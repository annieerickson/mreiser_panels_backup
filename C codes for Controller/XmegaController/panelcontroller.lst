
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bb5c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004e0  00802000  0000bb5c  0000bc10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000071d  008024e0  008024e0  0000c0f0  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000c0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000c174  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000ce7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000ceec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000d98  00000000  00000000  0000d02c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000955b  00000000  00000000  0000ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015d4  00000000  00000000  0001731f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000066a8  00000000  00000000  000188f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a40  00000000  00000000  0001ef9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002056  00000000  00000000  0001f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000790f  00000000  00000000  00021a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000258  00000000  00000000  00029341  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__ctors_end>
       4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
       8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
       c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      10:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      14:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      18:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      1c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      20:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      24:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      28:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      2c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      30:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      34:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__vector_13>
      38:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      3c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      40:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      44:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      48:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      4c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      50:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      54:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      58:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      5c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      60:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      64:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__vector_25>
      68:	0c 94 81 2e 	jmp	0x5d02	; 0x5d02 <__vector_26>
      6c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      70:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      74:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      78:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      7c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      80:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      84:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      88:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      8c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      90:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      94:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      98:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      9c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      a0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      a4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      a8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      ac:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      b0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      b4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      b8:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__vector_46>
      bc:	0c 94 f6 2e 	jmp	0x5dec	; 0x5dec <__vector_47>
      c0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      c4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      c8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      cc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      d0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      d4:	0c 94 f1 53 	jmp	0xa7e2	; 0xa7e2 <__vector_53>
      d8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      dc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      e0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      e4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      e8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      ec:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      f0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      f4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      f8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
      fc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     100:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     104:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     108:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     10c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     110:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     114:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     118:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     11c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     120:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     124:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     128:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     12c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     130:	0c 94 87 20 	jmp	0x410e	; 0x410e <__vector_76>
     134:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     138:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     13c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     140:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     144:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     148:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     14c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     150:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     154:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     158:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     15c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     160:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     164:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     168:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     16c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     170:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     174:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     178:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     17c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     180:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     184:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     188:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     18c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     190:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     194:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     198:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     19c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1a0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1a4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1a8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1ac:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__vector_107>
     1b0:	0c 94 27 55 	jmp	0xaa4e	; 0xaa4e <__vector_108>
     1b4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1b8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1bc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1c0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1c4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1c8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1cc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1d0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1d4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1d8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1dc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1e0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1e4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1e8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1ec:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1f0:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__bad_interrupt>
     1f4:	90 1a       	sub	r9, r16
     1f6:	95 1a       	sub	r9, r21
     1f8:	9a 1a       	sub	r9, r26
     1fa:	9e 1a       	sub	r9, r30
     1fc:	a2 1a       	sub	r10, r18
     1fe:	a6 1a       	sub	r10, r22
     200:	af 1a       	sub	r10, r31
     202:	b3 1a       	sub	r11, r19
     204:	b7 1a       	sub	r11, r23
     206:	55 52       	subi	r21, 0x25	; 37
     208:	61 52       	subi	r22, 0x21	; 33
     20a:	c2 52       	subi	r28, 0x22	; 34
     20c:	c8 52       	subi	r28, 0x28	; 40
     20e:	52 52       	subi	r21, 0x22	; 34
     210:	52 52       	subi	r21, 0x22	; 34
     212:	52 52       	subi	r21, 0x22	; 34
     214:	52 52       	subi	r21, 0x22	; 34
     216:	52 52       	subi	r21, 0x22	; 34
     218:	52 52       	subi	r21, 0x22	; 34
     21a:	63 53       	subi	r22, 0x33	; 51
     21c:	68 53       	subi	r22, 0x38	; 56
     21e:	6a 53       	subi	r22, 0x3A	; 58
     220:	78 53       	subi	r23, 0x38	; 56
     222:	97 53       	subi	r25, 0x37	; 55

00000224 <__c.5553>:
     224:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     234:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000241 <__c.5551>:
     241:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     251:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000262 <__c.5546>:
     262:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     272:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

00000280 <__c.5484>:
     280:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     290:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     2a0:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     2b0:	75 66 66 65 72 0a 00                                uffer..

000002b7 <__c.5482>:
     2b7:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002c2 <__c.5480>:
     2c2:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     2d2:	69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43 6e     in update_funcCn
     2e2:	74 5f 79 0a 00                                      t_y..

000002e7 <__c.5478>:
     2e7:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002f2 <__c.5413>:
     2f2:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     302:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     312:	6e 74 5f 78 0a 00                                   nt_x..

00000318 <__c.5411>:
     318:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000323 <__c.5409>:
     323:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     333:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     343:	63 43 6e 74 5f 78 0a 00                             cCnt_x..

0000034b <__c.5407>:
     34b:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000356 <__c.5363>:
     356:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     366:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     376:	2e 0a 00                                            ...

00000379 <__c.5360>:
     379:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     389:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

0000039a <__c.5358>:
     39a:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     3aa:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000003bb <__c.5356>:
     3bb:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     3cb:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     3db:	20 59 0a 00                                          Y..

000003df <__c.5352>:
     3df:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     3ef:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000400 <__c.5350>:
     400:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     410:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000421 <__c.5348>:
     421:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     431:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     441:	72 20 58 0a 00                                      r X..

00000446 <__c.5304>:
     446:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     456:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     466:	2e 0a 00                                            ...

00000469 <__c.5301>:
     469:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     479:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

0000048a <__c.5299>:
     48a:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     49a:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

000004a8 <__c.5297>:
     4a8:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     4b8:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4c8:	20 59 0a 00                                          Y..

000004cc <__c.5293>:
     4cc:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     4dc:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000004ed <__c.5291>:
     4ed:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     4fd:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

0000050a <__c.5289>:
     50a:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     51a:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     52a:	20 58 0a 00                                          X..

0000052e <__c.5271>:
     52e:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     53e:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

0000054e <__c.5265>:
     54e:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     55e:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

0000056f <__c.5258>:
     56f:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     57f:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

00000590 <__c.5209>:
     590:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     5a0:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     5b0:	20 3d 20 25 75 0a 00                                 = %u..

000005b7 <__c.5185>:
     5b7:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     5c7:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     5d7:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     5e7:	61 72 64 2e 0a 00                                   ard...

000005ed <__c.5183>:
     5ed:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     5fd:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     60d:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     61d:	50 52 4f 4d 0a 00                                   PROM..

00000623 <__c.5130>:
     623:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     633:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

0000063f <__c.5128>:
     63f:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     64f:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

0000065e <__c.5126>:
     65e:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     66e:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     67e:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     68e:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     69e:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     6ae:	75 0a 00                                            u..

000006b1 <__c.5124>:
     6b1:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     6c1:	25 75 3a 0a 00                                      %u:..

000006c6 <__c.4799>:
     6c6:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     6d6:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     6e6:	75 0a 00                                            u..

000006e9 <__c.4797>:
     6e9:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     6f9:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     709:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000713 <__c.4795>:
     713:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     723:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000731 <__c.4793>:
     731:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     741:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     751:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

0000075a <__c.4716>:
     75a:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     76a:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     77a:	6e 2e 0a 00                                         n...

0000077e <__c.4654>:
     77e:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     78e:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     79e:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     7ae:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

000007bd <__c.4650>:
     7bd:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     7cd:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     7dd:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     7ed:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

000007f9 <__c.4597>:
     7f9:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     809:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     819:	2e 0a 00                                            ...

0000081c <__c.4594>:
     81c:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     82c:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     83c:	2e 0a 00                                            ...

0000083f <__c.4488>:
     83f:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     84f:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     85f:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     86f:	0a 00                                               ..

00000871 <__c.4485>:
     871:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     881:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     891:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     8a1:	0a 00                                               ..

000008a3 <__c.4482>:
     8a3:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     8b3:	0a 00                                               ..

000008b5 <__c.4473>:
     8b5:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     8c5:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

000008d4 <__c.4374>:
     8d4:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     8e4:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     8f4:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00000902 <__c.4362>:
     902:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     912:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     922:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000930 <__c.4359>:
     930:	3f 3f 3f 0a 00                                      ???..

00000935 <__c.4356>:
     935:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000942 <__c.4353>:
     942:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     952:	21 0a 00                                            !..

00000955 <__c.4350>:
     955:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

0000095e <__c.4346>:
     95e:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00000968 <__c.4343>:
     968:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     978:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00000981 <__c.4341>:
     981:	3f 3f 3f 0a 00                                      ???..

00000986 <__c.4338>:
     986:	53 44 48 43 0a 00                                   SDHC..

0000098c <__c.4335>:
     98c:	42 4c 4b 0a 00                                      BLK..

00000991 <__c.4332>:
     991:	53 44 43 0a 00                                      SDC..

00000996 <__c.4329>:
     996:	53 44 32 0a 00                                      SD2..

0000099b <__c.4326>:
     99b:	53 44 0a 00                                         SD..

0000099f <__c.4322>:
     99f:	4d 4d 43 0a 00                                      MMC..

000009a4 <__c.4319>:
     9a4:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

000009b0 <__c.4317>:
     9b0:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     9c0:	61 6c 69 7a 65 64 0a 00                             alized..

000009c8 <__c.4309>:
     9c8:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     9d8:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

000009e2 <__c.4304>:
     9e2:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     9f2:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

000009ff <__c.4299>:
     9ff:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

00000a0e <__c.4297>:
     a0e:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     a1e:	20 57 6f 72 6b 73 0a 00                              Works..

00000a26 <__c.4519>:
     a26:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     a36:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000a41 <__c.4517>:
     a41:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     a51:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000a5c <__c.4511>:
     a5c:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     a6c:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     a7c:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     a8c:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000a9d <__c.4509>:
     a9d:	0a 00                                               ..

00000a9f <__c.4507>:
     a9f:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     aaf:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000abc <__c.4502>:
     abc:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     acc:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000ad9 <__c.4500>:
     ad9:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     ae9:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     af9:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000b04 <__c.4498>:
     b04:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     b14:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     b24:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     b34:	78 0a 00                                            x..

00000b37 <__c.4492>:
     b37:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000b44 <__c.4490>:
     b44:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     b54:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000b62 <__c.4487>:
     b62:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     b72:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     b82:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     b92:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     ba2:	0a 00                                               ..

00000ba4 <__c.4482>:
     ba4:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     bb4:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     bc4:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000bcf <__c.4480>:
     bcf:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     bdf:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     bef:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     bff:	78 2e 0a 00                                         x...

00000c03 <__c.4474>:
     c03:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000c10 <__c.4472>:
     c10:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     c20:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000c2e <__c.4467>:
     c2e:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
     c3e:	0a 00                                               ..

00000c40 <__c.4465>:
     c40:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     c50:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00000c5d <__c.4588>:
     c5d:	25 53 0a 00                                         %S..

00000c61 <str.4574>:
     c61:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     c71:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     c81:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     c91:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     ca1:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     cb1:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     cc1:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     cd1:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     ce1:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     cf1:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     d01:	45 4f 55 54 00 00                                   EOUT..

00000d07 <__c.4387>:
     d07:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     d17:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000d22 <__c.4385>:
     d22:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     d32:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000d3d <__c.4379>:
     d3d:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     d4d:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     d5d:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     d6d:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000d7d <__c.4377>:
     d7d:	0a 00                                               ..

00000d7f <__c.4375>:
     d7f:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d8f:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d9c <__c.4370>:
     d9c:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     dac:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000db9 <__c.4368>:
     db9:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     dc9:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     dd9:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000de4 <__c.4366>:
     de4:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     df4:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     e04:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     e14:	0a 00                                               ..

00000e16 <__c.4360>:
     e16:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000e23 <__c.4358>:
     e23:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     e33:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00000e40 <__c.4355>:
     e40:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     e50:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     e60:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     e70:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000e80 <__c.4350>:
     e80:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     e90:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     ea0:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000eab <__c.4348>:
     eab:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     ebb:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     ecb:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     edb:	2e 0a 00                                            ...

00000ede <__c.4342>:
     ede:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000eeb <__c.4340>:
     eeb:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     efb:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000f09 <__c.4335>:
     f09:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

00000f1a <__c.4333>:
     f1a:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     f2a:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

00000f36 <__c.4283>:
     f36:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f46:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f53 <__c.4278>:
     f53:	23 00                                               #.

00000f55 <__c.4248>:
     f55:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f65:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f72 <__c.4243>:
     f72:	23 00                                               #.

00000f74 <__c.4222>:
     f74:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
     f84:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00000f93 <__c.4217>:
     f93:	23 00                                               #.

00000f95 <__c.4186>:
     f95:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     fa5:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000fb2 <__c.4181>:
     fb2:	23 00                                               #.

00000fb4 <__c.4150>:
     fb4:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     fc4:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000fd1 <__c.4145>:
     fd1:	23 00                                               #.

00000fd3 <__c.4123>:
     fd3:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
     fe3:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000ff1 <__c.4118>:
     ff1:	23 00 00                                            #..

00000ff4 <__ctors_end>:
     ff4:	11 24       	eor	r1, r1
     ff6:	1f be       	out	0x3f, r1	; 63
     ff8:	cf ef       	ldi	r28, 0xFF	; 255
     ffa:	df e3       	ldi	r29, 0x3F	; 63
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	0c bf       	out	0x3c, r16	; 60
    1004:	18 be       	out	0x38, r1	; 56
    1006:	19 be       	out	0x39, r1	; 57
    1008:	1a be       	out	0x3a, r1	; 58
    100a:	1b be       	out	0x3b, r1	; 59

0000100c <__do_copy_data>:
    100c:	14 e2       	ldi	r17, 0x24	; 36
    100e:	a0 e0       	ldi	r26, 0x00	; 0
    1010:	b0 e2       	ldi	r27, 0x20	; 32
    1012:	ec e5       	ldi	r30, 0x5C	; 92
    1014:	fb eb       	ldi	r31, 0xBB	; 187
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	0b bf       	out	0x3b, r16	; 59
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <__do_copy_data+0x14>
    101c:	07 90       	elpm	r0, Z+
    101e:	0d 92       	st	X+, r0
    1020:	a0 3e       	cpi	r26, 0xE0	; 224
    1022:	b1 07       	cpc	r27, r17
    1024:	d9 f7       	brne	.-10     	; 0x101c <__do_copy_data+0x10>
    1026:	1b be       	out	0x3b, r1	; 59

00001028 <__do_clear_bss>:
    1028:	1b e2       	ldi	r17, 0x2B	; 43
    102a:	a0 ee       	ldi	r26, 0xE0	; 224
    102c:	b4 e2       	ldi	r27, 0x24	; 36
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <.do_clear_bss_start>

00001030 <.do_clear_bss_loop>:
    1030:	1d 92       	st	X+, r1

00001032 <.do_clear_bss_start>:
    1032:	ad 3f       	cpi	r26, 0xFD	; 253
    1034:	b1 07       	cpc	r27, r17
    1036:	e1 f7       	brne	.-8      	; 0x1030 <.do_clear_bss_loop>
    1038:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <main>
    103c:	0c 94 ac 5d 	jmp	0xbb58	; 0xbb58 <_exit>

00001040 <__bad_interrupt>:
    1040:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001044 <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    1044:	80 91 9b 27 	lds	r24, 0x279B
    1048:	90 91 9c 27 	lds	r25, 0x279C
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	80 93 9b 27 	sts	0x279B, r24
    1052:	90 93 9c 27 	sts	0x279C, r25
    if (index_x >= x_num)
    1056:	80 91 9b 27 	lds	r24, 0x279B
    105a:	90 91 9c 27 	lds	r25, 0x279C
    105e:	40 91 05 28 	lds	r20, 0x2805
    1062:	50 91 06 28 	lds	r21, 0x2806
    1066:	84 17       	cp	r24, r20
    1068:	95 07       	cpc	r25, r21
    106a:	20 f0       	brcs	.+8      	; 0x1074 <increment_index_x+0x30>
    {index_x = 0;}
    106c:	10 92 9b 27 	sts	0x279B, r1
    1070:	10 92 9c 27 	sts	0x279C, r1
    
    
    frame_num = index_y*x_num + index_x;
    1074:	80 91 50 29 	lds	r24, 0x2950
    1078:	90 91 51 29 	lds	r25, 0x2951
    107c:	20 91 9b 27 	lds	r18, 0x279B
    1080:	30 91 9c 27 	lds	r19, 0x279C
    1084:	bc 01       	movw	r22, r24
    1086:	64 9f       	mul	r22, r20
    1088:	c0 01       	movw	r24, r0
    108a:	65 9f       	mul	r22, r21
    108c:	90 0d       	add	r25, r0
    108e:	74 9f       	mul	r23, r20
    1090:	90 0d       	add	r25, r0
    1092:	11 24       	eor	r1, r1
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	80 93 e5 24 	sts	0x24E5, r24
    109c:	90 93 e6 24 	sts	0x24E6, r25
	
    if (x_gt_y) display_flag++;
    10a0:	80 91 e1 24 	lds	r24, 0x24E1
    10a4:	88 23       	and	r24, r24
    10a6:	29 f0       	breq	.+10     	; 0x10b2 <increment_index_x+0x6e>
    10a8:	80 91 e0 24 	lds	r24, 0x24E0
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	80 93 e0 24 	sts	0x24E0, r24
    10b2:	08 95       	ret

000010b4 <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    10b4:	80 91 50 29 	lds	r24, 0x2950
    10b8:	90 91 51 29 	lds	r25, 0x2951
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	80 93 50 29 	sts	0x2950, r24
    10c2:	90 93 51 29 	sts	0x2951, r25
    if (index_y >= y_num)
    10c6:	20 91 50 29 	lds	r18, 0x2950
    10ca:	30 91 51 29 	lds	r19, 0x2951
    10ce:	80 91 a6 25 	lds	r24, 0x25A6
    10d2:	90 91 a7 25 	lds	r25, 0x25A7
    10d6:	28 17       	cp	r18, r24
    10d8:	39 07       	cpc	r19, r25
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <increment_index_y+0x30>
    {index_y = 0;}
    10dc:	10 92 50 29 	sts	0x2950, r1
    10e0:	10 92 51 29 	sts	0x2951, r1
    
    frame_num = index_y*x_num + index_x;
    10e4:	20 91 50 29 	lds	r18, 0x2950
    10e8:	30 91 51 29 	lds	r19, 0x2951
    10ec:	40 91 9b 27 	lds	r20, 0x279B
    10f0:	50 91 9c 27 	lds	r21, 0x279C
    10f4:	80 91 05 28 	lds	r24, 0x2805
    10f8:	90 91 06 28 	lds	r25, 0x2806
    10fc:	bc 01       	movw	r22, r24
    10fe:	26 9f       	mul	r18, r22
    1100:	c0 01       	movw	r24, r0
    1102:	27 9f       	mul	r18, r23
    1104:	90 0d       	add	r25, r0
    1106:	36 9f       	mul	r19, r22
    1108:	90 0d       	add	r25, r0
    110a:	11 24       	eor	r1, r1
    110c:	84 0f       	add	r24, r20
    110e:	95 1f       	adc	r25, r21
    1110:	80 93 e5 24 	sts	0x24E5, r24
    1114:	90 93 e6 24 	sts	0x24E6, r25
	
    if (x_gt_y == 0) display_flag++;
    1118:	80 91 e1 24 	lds	r24, 0x24E1
    111c:	88 23       	and	r24, r24
    111e:	29 f4       	brne	.+10     	; 0x112a <increment_index_y+0x76>
    1120:	80 91 e0 24 	lds	r24, 0x24E0
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 e0 24 	sts	0x24E0, r24
    112a:	08 95       	ret

0000112c <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    112c:	80 91 9b 27 	lds	r24, 0x279B
    1130:	90 91 9c 27 	lds	r25, 0x279C
    1134:	89 2b       	or	r24, r25
    1136:	29 f4       	brne	.+10     	; 0x1142 <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    1138:	80 91 05 28 	lds	r24, 0x2805
    113c:	90 91 06 28 	lds	r25, 0x2806
    1140:	04 c0       	rjmp	.+8      	; 0x114a <decrement_index_x+0x1e>
    else
    {index_x--;}
    1142:	80 91 9b 27 	lds	r24, 0x279B
    1146:	90 91 9c 27 	lds	r25, 0x279C
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	80 93 9b 27 	sts	0x279B, r24
    1150:	90 93 9c 27 	sts	0x279C, r25
    
    frame_num = index_y*x_num + index_x;
    1154:	20 91 50 29 	lds	r18, 0x2950
    1158:	30 91 51 29 	lds	r19, 0x2951
    115c:	40 91 9b 27 	lds	r20, 0x279B
    1160:	50 91 9c 27 	lds	r21, 0x279C
    1164:	80 91 05 28 	lds	r24, 0x2805
    1168:	90 91 06 28 	lds	r25, 0x2806
    116c:	bc 01       	movw	r22, r24
    116e:	26 9f       	mul	r18, r22
    1170:	c0 01       	movw	r24, r0
    1172:	27 9f       	mul	r18, r23
    1174:	90 0d       	add	r25, r0
    1176:	36 9f       	mul	r19, r22
    1178:	90 0d       	add	r25, r0
    117a:	11 24       	eor	r1, r1
    117c:	84 0f       	add	r24, r20
    117e:	95 1f       	adc	r25, r21
    1180:	80 93 e5 24 	sts	0x24E5, r24
    1184:	90 93 e6 24 	sts	0x24E6, r25
    if (x_gt_y) display_flag++;
    1188:	80 91 e1 24 	lds	r24, 0x24E1
    118c:	88 23       	and	r24, r24
    118e:	29 f0       	breq	.+10     	; 0x119a <decrement_index_x+0x6e>
    1190:	80 91 e0 24 	lds	r24, 0x24E0
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	80 93 e0 24 	sts	0x24E0, r24
    119a:	08 95       	ret

0000119c <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    119c:	80 91 50 29 	lds	r24, 0x2950
    11a0:	90 91 51 29 	lds	r25, 0x2951
    11a4:	89 2b       	or	r24, r25
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    11a8:	80 91 a6 25 	lds	r24, 0x25A6
    11ac:	90 91 a7 25 	lds	r25, 0x25A7
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <decrement_index_y+0x1e>
    else
    {index_y--;}
    11b2:	80 91 50 29 	lds	r24, 0x2950
    11b6:	90 91 51 29 	lds	r25, 0x2951
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	80 93 50 29 	sts	0x2950, r24
    11c0:	90 93 51 29 	sts	0x2951, r25
    
    frame_num = index_y*x_num + index_x;
    11c4:	20 91 50 29 	lds	r18, 0x2950
    11c8:	30 91 51 29 	lds	r19, 0x2951
    11cc:	40 91 9b 27 	lds	r20, 0x279B
    11d0:	50 91 9c 27 	lds	r21, 0x279C
    11d4:	80 91 05 28 	lds	r24, 0x2805
    11d8:	90 91 06 28 	lds	r25, 0x2806
    11dc:	bc 01       	movw	r22, r24
    11de:	26 9f       	mul	r18, r22
    11e0:	c0 01       	movw	r24, r0
    11e2:	27 9f       	mul	r18, r23
    11e4:	90 0d       	add	r25, r0
    11e6:	36 9f       	mul	r19, r22
    11e8:	90 0d       	add	r25, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	84 0f       	add	r24, r20
    11ee:	95 1f       	adc	r25, r21
    11f0:	80 93 e5 24 	sts	0x24E5, r24
    11f4:	90 93 e6 24 	sts	0x24E6, r25
    if (x_gt_y == 0) display_flag++;
    11f8:	80 91 e1 24 	lds	r24, 0x24E1
    11fc:	88 23       	and	r24, r24
    11fe:	29 f4       	brne	.+10     	; 0x120a <decrement_index_y+0x6e>
    1200:	80 91 e0 24 	lds	r24, 0x24E0
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	80 93 e0 24 	sts	0x24E0, r24
    120a:	08 95       	ret

0000120c <set_default_func>:
}

void set_default_func(uint8_t func_channel) {
    uint16_t funcCnt;
    
    switch (func_channel) {
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	31 f0       	breq	.+12     	; 0x121c <set_default_func+0x10>
    1210:	90 91 f3 24 	lds	r25, 0x24F3
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	09 f0       	breq	.+2      	; 0x121a <set_default_func+0xe>
    1218:	49 c0       	rjmp	.+146    	; 0x12ac <set_default_func+0xa0>
    121a:	27 c0       	rjmp	.+78     	; 0x126a <set_default_func+0x5e>
        case 1:
            if (quiet_mode_on == 0)
    121c:	80 91 f3 24 	lds	r24, 0x24F3
    1220:	88 23       	and	r24, r24
    1222:	21 f4       	brne	.+8      	; 0x122c <set_default_func+0x20>
                xputs(PSTR("Setting default function for X.\n"));
    1224:	8f e6       	ldi	r24, 0x6F	; 111
    1226:	95 e0       	ldi	r25, 0x05	; 5
    1228:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
    122c:	10 92 f4 24 	sts	0x24F4, r1
    1230:	10 92 f5 24 	sts	0x24F5, r1
            funcSize_x = FUNCTION_LENGTH;
    1234:	84 e6       	ldi	r24, 0x64	; 100
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	80 93 a5 20 	sts	0x20A5, r24
    1240:	90 93 a6 20 	sts	0x20A6, r25
    1244:	a0 93 a7 20 	sts	0x20A7, r26
    1248:	b0 93 a8 20 	sts	0x20A8, r27
    124c:	e7 e0       	ldi	r30, 0x07	; 7
    124e:	f8 e2       	ldi	r31, 0x28	; 40
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_X[funcCnt] = 10; }
    1250:	8a e0       	ldi	r24, 0x0A	; 10
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	81 93       	st	Z+, r24
    1256:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1258:	28 e2       	ldi	r18, 0x28	; 40
    125a:	ef 3c       	cpi	r30, 0xCF	; 207
    125c:	f2 07       	cpc	r31, r18
    125e:	d1 f7       	brne	.-12     	; 0x1254 <set_default_func+0x48>
            { function_X[funcCnt] = 10; }
            function_counter_x = 0;
    1260:	10 92 e7 24 	sts	0x24E7, r1
    1264:	10 92 e8 24 	sts	0x24E8, r1
    1268:	08 95       	ret
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    126a:	99 23       	and	r25, r25
    126c:	21 f4       	brne	.+8      	; 0x1276 <set_default_func+0x6a>
                xputs(PSTR("Setting default function for Y.\n"));
    126e:	8e e4       	ldi	r24, 0x4E	; 78
    1270:	95 e0       	ldi	r25, 0x05	; 5
    1272:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
    1276:	10 92 f6 24 	sts	0x24F6, r1
    127a:	10 92 f7 24 	sts	0x24F7, r1
            funcSize_y = FUNCTION_LENGTH;
    127e:	84 e6       	ldi	r24, 0x64	; 100
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a0 e0       	ldi	r26, 0x00	; 0
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	80 93 a9 20 	sts	0x20A9, r24
    128a:	90 93 aa 20 	sts	0x20AA, r25
    128e:	a0 93 ab 20 	sts	0x20AB, r26
    1292:	b0 93 ac 20 	sts	0x20AC, r27
    1296:	eb ea       	ldi	r30, 0xAB	; 171
    1298:	f5 e2       	ldi	r31, 0x25	; 37
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    129a:	8a e0       	ldi	r24, 0x0A	; 10
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	81 93       	st	Z+, r24
    12a0:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    12a2:	26 e2       	ldi	r18, 0x26	; 38
    12a4:	e3 37       	cpi	r30, 0x73	; 115
    12a6:	f2 07       	cpc	r31, r18
    12a8:	d1 f7       	brne	.-12     	; 0x129e <set_default_func+0x92>
    12aa:	08 95       	ret
            { function_Y[funcCnt] = 10; }
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            if (quiet_mode_on == 0)
    12ac:	99 23       	and	r25, r25
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <set_default_func+0xac>
                xputs(PSTR("Wrong function channel number.\n"));
    12b0:	8e e2       	ldi	r24, 0x2E	; 46
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    12b8:	08 95       	ret

000012ba <handle_message_length_12>:
//load laser trigger pattern. Laer patter has 96 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_12(uint8_t *msg_buffer)
{   
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ec 01       	movw	r28, r24
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
	   for (j=0; j<8; j++)
	   {
		if ((tempVal & (1<<(7-j))) == 0)
			laserPattern[i*8+j] = 0;
		else
			laserPattern[i*8+j] = 1;
    12c6:	11 e0       	ldi	r17, 0x01	; 1
{   
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
	{ 
	   tempVal = msg_buffer[i];
    12c8:	88 81       	ld	r24, Y
    12ca:	fa 01       	movw	r30, r20
    12cc:	ea 57       	subi	r30, 0x7A	; 122
    12ce:	f9 4d       	sbci	r31, 0xD9	; 217
    12d0:	df 01       	movw	r26, r30
    12d2:	27 e0       	ldi	r18, 0x07	; 7
    12d4:	30 e0       	ldi	r19, 0x00	; 0
	   for (j=0; j<8; j++)
	   {
		if ((tempVal & (1<<(7-j))) == 0)
    12d6:	68 2f       	mov	r22, r24
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	cb 01       	movw	r24, r22
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <handle_message_length_12+0x2a>
    12e0:	95 95       	asr	r25
    12e2:	87 95       	ror	r24
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <handle_message_length_12+0x26>
    12e8:	80 fd       	sbrc	r24, 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <handle_message_length_12+0x36>
			laserPattern[i*8+j] = 0;
    12ec:	10 82       	st	Z, r1
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <handle_message_length_12+0x38>
		else
			laserPattern[i*8+j] = 1;
    12f0:	1c 93       	st	X, r17
    12f2:	21 50       	subi	r18, 0x01	; 1
    12f4:	30 40       	sbci	r19, 0x00	; 0
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	11 96       	adiw	r26, 0x01	; 1
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
	{ 
	   tempVal = msg_buffer[i];
	   for (j=0; j<8; j++)
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	2f 3f       	cpi	r18, 0xFF	; 255
    12fe:	38 07       	cpc	r19, r24
    1300:	61 f7       	brne	.-40     	; 0x12da <handle_message_length_12+0x20>
    1302:	21 96       	adiw	r28, 0x01	; 1
    1304:	48 5f       	subi	r20, 0xF8	; 248
    1306:	5f 4f       	sbci	r21, 0xFF	; 255

void handle_message_length_12(uint8_t *msg_buffer)
{   
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
    1308:	40 36       	cpi	r20, 0x60	; 96
    130a:	51 05       	cpc	r21, r1
    130c:	e9 f6       	brne	.-70     	; 0x12c8 <handle_message_length_12+0xe>
		else
			laserPattern[i*8+j] = 1;
	   }
	}
	
	if (quiet_mode_on == 0)
    130e:	80 91 f3 24 	lds	r24, 0x24F3
    1312:	88 23       	and	r24, r24
    1314:	21 f4       	brne	.+8      	; 0x131e <handle_message_length_12+0x64>
        xputs(PSTR("Success set the new laser pattern.\n"));
    1316:	8a e5       	ldi	r24, 0x5A	; 90
    1318:	97 e0       	ldi	r25, 0x07	; 7
    131a:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>

}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	08 95       	ret

00001326 <dump_mat>:
    
}


//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    1326:	a4 e3       	ldi	r26, 0x34	; 52
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e9 e9       	ldi	r30, 0x99	; 153
    132c:	f9 e0       	ldi	r31, 0x09	; 9
    132e:	0c 94 4c 58 	jmp	0xb098	; 0xb098 <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    1332:	85 ee       	ldi	r24, 0xE5	; 229
    1334:	97 e2       	ldi	r25, 0x27	; 39
    1336:	61 eb       	ldi	r22, 0xB1	; 177
    1338:	70 e2       	ldi	r23, 0x20	; 32
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
    if (res == FR_OK) {
    1340:	88 23       	and	r24, r24
    1342:	09 f0       	breq	.+2      	; 0x1346 <dump_mat+0x20>
    1344:	b5 c0       	rjmp	.+362    	; 0x14b0 <dump_mat+0x18a>
        // looks good
        iteration = file4.fsize/50;
    1346:	80 90 ef 27 	lds	r8, 0x27EF
    134a:	70 91 f0 27 	lds	r23, 0x27F0
    134e:	68 2d       	mov	r22, r8
    1350:	80 91 f1 27 	lds	r24, 0x27F1
    1354:	90 91 f2 27 	lds	r25, 0x27F2
    1358:	22 e3       	ldi	r18, 0x32	; 50
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    1364:	79 01       	movw	r14, r18
    1366:	8a 01       	movw	r16, r20
    1368:	99 24       	eor	r9, r9
    136a:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    136c:	22 e3       	ldi	r18, 0x32	; 50
    136e:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	69 2e       	mov	r6, r25
    1374:	71 2c       	mov	r7, r1
    1376:	6c 0e       	add	r6, r28
    1378:	7d 1e       	adc	r7, r29
    137a:	2e 01       	movw	r4, r28
    137c:	08 94       	sec
    137e:	41 1c       	adc	r4, r1
    1380:	51 1c       	adc	r5, r1
    1382:	3a c0       	rjmp	.+116    	; 0x13f8 <dump_mat+0xd2>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    1384:	93 9c       	mul	r9, r3
    1386:	c0 01       	movw	r24, r0
    1388:	11 24       	eor	r1, r1
    138a:	c2 97       	sbiw	r24, 0x32	; 50
    138c:	5c 01       	movw	r10, r24
    138e:	cc 24       	eor	r12, r12
    1390:	b7 fc       	sbrc	r11, 7
    1392:	c0 94       	com	r12
    1394:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    1396:	85 ee       	ldi	r24, 0xE5	; 229
    1398:	97 e2       	ldi	r25, 0x27	; 39
    139a:	b6 01       	movw	r22, r12
    139c:	a5 01       	movw	r20, r10
    139e:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    13a2:	88 23       	and	r24, r24
    13a4:	01 f5       	brne	.+64     	; 0x13e6 <dump_mat+0xc0>
    13a6:	80 91 eb 27 	lds	r24, 0x27EB
    13aa:	90 91 ec 27 	lds	r25, 0x27EC
    13ae:	a0 91 ed 27 	lds	r26, 0x27ED
    13b2:	b0 91 ee 27 	lds	r27, 0x27EE
    13b6:	8a 15       	cp	r24, r10
    13b8:	9b 05       	cpc	r25, r11
    13ba:	ac 05       	cpc	r26, r12
    13bc:	bd 05       	cpc	r27, r13
    13be:	99 f4       	brne	.+38     	; 0x13e6 <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    13c0:	85 ee       	ldi	r24, 0xE5	; 229
    13c2:	97 e2       	ldi	r25, 0x27	; 39
    13c4:	b3 01       	movw	r22, r6
    13c6:	42 e3       	ldi	r20, 0x32	; 50
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	92 01       	movw	r18, r4
    13cc:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    13d0:	88 23       	and	r24, r24
    13d2:	89 f4       	brne	.+34     	; 0x13f6 <dump_mat+0xd0>
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	c2 97       	sbiw	r24, 0x32	; 50
    13da:	69 f4       	brne	.+26     	; 0x13f6 <dump_mat+0xd0>
                    send_Tx_buffer(matBuff, 50);
    13dc:	c3 01       	movw	r24, r6
    13de:	62 e3       	ldi	r22, 0x32	; 50
    13e0:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <send_Tx_buffer>
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <dump_mat+0xd0>
                }
            }else {
                if (quiet_mode_on == 0)
    13e6:	80 91 f3 24 	lds	r24, 0x24F3
    13ea:	88 23       	and	r24, r24
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <dump_mat+0xd0>
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    13ee:	82 e6       	ldi	r24, 0x62	; 98
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    13f6:	93 94       	inc	r9
    13f8:	89 2d       	mov	r24, r9
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e8 16       	cp	r14, r24
    1402:	f9 06       	cpc	r15, r25
    1404:	0a 07       	cpc	r16, r26
    1406:	1b 07       	cpc	r17, r27
    1408:	08 f0       	brcs	.+2      	; 0x140c <dump_mat+0xe6>
    140a:	bc cf       	rjmp	.-136    	; 0x1384 <dump_mat+0x5e>
                if (quiet_mode_on == 0)
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
            }
        }
        //send the remained data
        offset = (b1-1)*50;
    140c:	82 e3       	ldi	r24, 0x32	; 50
    140e:	98 9e       	mul	r9, r24
    1410:	c0 01       	movw	r24, r0
    1412:	11 24       	eor	r1, r1
    1414:	c2 97       	sbiw	r24, 0x32	; 50
    1416:	5c 01       	movw	r10, r24
    1418:	cc 24       	eor	r12, r12
    141a:	b7 fc       	sbrc	r11, 7
    141c:	c0 94       	com	r12
    141e:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    1420:	85 ee       	ldi	r24, 0xE5	; 229
    1422:	97 e2       	ldi	r25, 0x27	; 39
    1424:	b6 01       	movw	r22, r12
    1426:	a5 01       	movw	r20, r10
    1428:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    142c:	88 23       	and	r24, r24
    142e:	99 f5       	brne	.+102    	; 0x1496 <dump_mat+0x170>
    1430:	80 91 eb 27 	lds	r24, 0x27EB
    1434:	90 91 ec 27 	lds	r25, 0x27EC
    1438:	a0 91 ed 27 	lds	r26, 0x27ED
    143c:	b0 91 ee 27 	lds	r27, 0x27EE
    1440:	8a 15       	cp	r24, r10
    1442:	9b 05       	cpc	r25, r11
    1444:	ac 05       	cpc	r26, r12
    1446:	bd 05       	cpc	r27, r13
    1448:	31 f5       	brne	.+76     	; 0x1496 <dump_mat+0x170>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    144a:	c8 01       	movw	r24, r16
    144c:	b7 01       	movw	r22, r14
    144e:	22 e3       	ldi	r18, 0x32	; 50
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    145a:	d8 2c       	mov	r13, r8
    145c:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    145e:	0d 2d       	mov	r16, r13
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	e8 2e       	mov	r14, r24
    1466:	f1 2c       	mov	r15, r1
    1468:	ec 0e       	add	r14, r28
    146a:	fd 1e       	adc	r15, r29
    146c:	85 ee       	ldi	r24, 0xE5	; 229
    146e:	97 e2       	ldi	r25, 0x27	; 39
    1470:	b7 01       	movw	r22, r14
    1472:	a8 01       	movw	r20, r16
    1474:	9e 01       	movw	r18, r28
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    147e:	88 23       	and	r24, r24
    1480:	91 f4       	brne	.+36     	; 0x14a6 <dump_mat+0x180>
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	80 17       	cp	r24, r16
    1488:	91 07       	cpc	r25, r17
    148a:	69 f4       	brne	.+26     	; 0x14a6 <dump_mat+0x180>
                send_Tx_buffer(matBuff, fileRemain);
    148c:	c7 01       	movw	r24, r14
    148e:	6d 2d       	mov	r22, r13
    1490:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <send_Tx_buffer>
    1494:	08 c0       	rjmp	.+16     	; 0x14a6 <dump_mat+0x180>
            }
        }else {
            if (quiet_mode_on == 0)
    1496:	80 91 f3 24 	lds	r24, 0x24F3
    149a:	88 23       	and	r24, r24
    149c:	21 f4       	brne	.+8      	; 0x14a6 <dump_mat+0x180>
                xputs(PSTR("Error f_lseek in remained data.\n"));
    149e:	81 e4       	ldi	r24, 0x41	; 65
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
        }
        
        f_close(&file4);
    14a6:	85 ee       	ldi	r24, 0xE5	; 229
    14a8:	97 e2       	ldi	r25, 0x27	; 39
    14aa:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
    14ae:	08 c0       	rjmp	.+16     	; 0x14c0 <dump_mat+0x19a>
    } else {
        if (quiet_mode_on == 0)
    14b0:	80 91 f3 24 	lds	r24, 0x24F3
    14b4:	88 23       	and	r24, r24
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <dump_mat+0x19a>
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK)
    14b8:	84 e2       	ldi	r24, 0x24	; 36
    14ba:	92 e0       	ldi	r25, 0x02	; 2
    14bc:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    }
    
}
    14c0:	e4 96       	adiw	r28, 0x34	; 52
    14c2:	e1 e1       	ldi	r30, 0x11	; 17
    14c4:	0c 94 68 58 	jmp	0xb0d0	; 0xb0d0 <__epilogue_restores__+0x2>

000014c8 <update_funcCnt_y>:
        X_dac_val = (65535/2) + 328*function_X[function_counter_x];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    }
}

void update_funcCnt_y(void) {
    14c8:	ac ec       	ldi	r26, 0xCC	; 204
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ea e6       	ldi	r30, 0x6A	; 106
    14ce:	fa e0       	ldi	r31, 0x0A	; 10
    14d0:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
    uint16_t cnt, j, offset;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcYBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_Y != 0){
    14d4:	80 91 f6 24 	lds	r24, 0x24F6
    14d8:	90 91 f7 24 	lds	r25, 0x24F7
    14dc:	89 2b       	or	r24, r25
    14de:	09 f4       	brne	.+2      	; 0x14e2 <update_funcCnt_y+0x1a>
    14e0:	2e c1       	rjmp	.+604    	; 0x173e <update_funcCnt_y+0x276>
        function_counter_y ++;
    14e2:	80 91 e9 24 	lds	r24, 0x24E9
    14e6:	90 91 ea 24 	lds	r25, 0x24EA
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	80 93 e9 24 	sts	0x24E9, r24
    14f0:	90 93 ea 24 	sts	0x24EA, r25
        func_global_counter_y = func_global_counter_y + 2;
    14f4:	80 91 ef 24 	lds	r24, 0x24EF
    14f8:	90 91 f0 24 	lds	r25, 0x24F0
    14fc:	a0 91 f1 24 	lds	r26, 0x24F1
    1500:	b0 91 f2 24 	lds	r27, 0x24F2
    1504:	02 96       	adiw	r24, 0x02	; 2
    1506:	a1 1d       	adc	r26, r1
    1508:	b1 1d       	adc	r27, r1
    150a:	80 93 ef 24 	sts	0x24EF, r24
    150e:	90 93 f0 24 	sts	0x24F0, r25
    1512:	a0 93 f1 24 	sts	0x24F1, r26
    1516:	b0 93 f2 24 	sts	0x24F2, r27
        
        
        if ((function_counter_y >= loadYBuffer/2) || (func_global_counter_y >= funcSize_y)) {
    151a:	20 91 e9 24 	lds	r18, 0x24E9
    151e:	30 91 ea 24 	lds	r19, 0x24EA
    1522:	80 91 af 20 	lds	r24, 0x20AF
    1526:	90 91 b0 20 	lds	r25, 0x20B0
    152a:	96 95       	lsr	r25
    152c:	87 95       	ror	r24
    152e:	28 17       	cp	r18, r24
    1530:	39 07       	cpc	r19, r25
    1532:	b0 f4       	brcc	.+44     	; 0x1560 <update_funcCnt_y+0x98>
    1534:	20 91 ef 24 	lds	r18, 0x24EF
    1538:	30 91 f0 24 	lds	r19, 0x24F0
    153c:	40 91 f1 24 	lds	r20, 0x24F1
    1540:	50 91 f2 24 	lds	r21, 0x24F2
    1544:	80 91 a9 20 	lds	r24, 0x20A9
    1548:	90 91 aa 20 	lds	r25, 0x20AA
    154c:	a0 91 ab 20 	lds	r26, 0x20AB
    1550:	b0 91 ac 20 	lds	r27, 0x20AC
    1554:	28 17       	cp	r18, r24
    1556:	39 07       	cpc	r19, r25
    1558:	4a 07       	cpc	r20, r26
    155a:	5b 07       	cpc	r21, r27
    155c:	08 f4       	brcc	.+2      	; 0x1560 <update_funcCnt_y+0x98>
    155e:	fc c0       	rjmp	.+504    	; 0x1758 <update_funcCnt_y+0x290>
            // need to update function_Y[FUNCITION_LENGTH]
            if (func_global_counter_y >= funcSize_y){
    1560:	20 91 ef 24 	lds	r18, 0x24EF
    1564:	30 91 f0 24 	lds	r19, 0x24F0
    1568:	40 91 f1 24 	lds	r20, 0x24F1
    156c:	50 91 f2 24 	lds	r21, 0x24F2
    1570:	80 91 a9 20 	lds	r24, 0x20A9
    1574:	90 91 aa 20 	lds	r25, 0x20AA
    1578:	a0 91 ab 20 	lds	r26, 0x20AB
    157c:	b0 91 ac 20 	lds	r27, 0x20AC
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	4a 07       	cpc	r20, r26
    1586:	5b 07       	cpc	r21, r27
    1588:	78 f0       	brcs	.+30     	; 0x15a8 <update_funcCnt_y+0xe0>
                //read from the start
                offset = 512;
                func_global_counter_y =0;
    158a:	10 92 ef 24 	sts	0x24EF, r1
    158e:	10 92 f0 24 	sts	0x24F0, r1
    1592:	10 92 f1 24 	sts	0x24F1, r1
    1596:	10 92 f2 24 	sts	0x24F2, r1
                function_counter_y = 0;
    159a:	10 92 e9 24 	sts	0x24E9, r1
    159e:	10 92 ea 24 	sts	0x24EA, r1
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	52 e0       	ldi	r21, 0x02	; 2
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <update_funcCnt_y+0xfe>
            }
            else{
                offset = 512 + func_global_counter_y;
    15a8:	80 91 ef 24 	lds	r24, 0x24EF
    15ac:	90 91 f0 24 	lds	r25, 0x24F0
    15b0:	a0 91 f1 24 	lds	r26, 0x24F1
    15b4:	b0 91 f2 24 	lds	r27, 0x24F2
    15b8:	ac 01       	movw	r20, r24
    15ba:	40 50       	subi	r20, 0x00	; 0
    15bc:	5e 4f       	sbci	r21, 0xFE	; 254
                function_counter_y = 0;
    15be:	10 92 e9 24 	sts	0x24E9, r1
    15c2:	10 92 ea 24 	sts	0x24EA, r1
            }
            
            res = f_lseek(&file3, offset);
    15c6:	7a 01       	movw	r14, r20
    15c8:	00 e0       	ldi	r16, 0x00	; 0
    15ca:	10 e0       	ldi	r17, 0x00	; 0
    15cc:	88 ee       	ldi	r24, 0xE8	; 232
    15ce:	96 e2       	ldi	r25, 0x26	; 38
    15d0:	b8 01       	movw	r22, r16
    15d2:	a7 01       	movw	r20, r14
    15d4:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
    15d8:	28 2f       	mov	r18, r24
            if ((res == FR_OK) && (file3.fptr == offset)) {
    15da:	88 23       	and	r24, r24
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <update_funcCnt_y+0x118>
    15de:	91 c0       	rjmp	.+290    	; 0x1702 <update_funcCnt_y+0x23a>
    15e0:	80 91 ee 26 	lds	r24, 0x26EE
    15e4:	90 91 ef 26 	lds	r25, 0x26EF
    15e8:	a0 91 f0 26 	lds	r26, 0x26F0
    15ec:	b0 91 f1 26 	lds	r27, 0x26F1
    15f0:	8e 15       	cp	r24, r14
    15f2:	9f 05       	cpc	r25, r15
    15f4:	a0 07       	cpc	r26, r16
    15f6:	b1 07       	cpc	r27, r17
    15f8:	09 f0       	breq	.+2      	; 0x15fc <update_funcCnt_y+0x134>
    15fa:	83 c0       	rjmp	.+262    	; 0x1702 <update_funcCnt_y+0x23a>
                
                if (funcSize_y - func_global_counter_y >= 2*FUNCTION_LENGTH) {
    15fc:	20 91 a9 20 	lds	r18, 0x20A9
    1600:	30 91 aa 20 	lds	r19, 0x20AA
    1604:	40 91 ab 20 	lds	r20, 0x20AB
    1608:	50 91 ac 20 	lds	r21, 0x20AC
    160c:	80 91 ef 24 	lds	r24, 0x24EF
    1610:	90 91 f0 24 	lds	r25, 0x24F0
    1614:	a0 91 f1 24 	lds	r26, 0x24F1
    1618:	b0 91 f2 24 	lds	r27, 0x24F2
    161c:	79 01       	movw	r14, r18
    161e:	8a 01       	movw	r16, r20
    1620:	e8 1a       	sub	r14, r24
    1622:	f9 0a       	sbc	r15, r25
    1624:	0a 0b       	sbc	r16, r26
    1626:	1b 0b       	sbc	r17, r27
    1628:	d8 01       	movw	r26, r16
    162a:	c7 01       	movw	r24, r14
    162c:	88 3c       	cpi	r24, 0xC8	; 200
    162e:	91 05       	cpc	r25, r1
    1630:	a1 05       	cpc	r26, r1
    1632:	b1 05       	cpc	r27, r1
    1634:	18 f0       	brcs	.+6      	; 0x163c <update_funcCnt_y+0x174>
                    loadYBuffer = 2*FUNCTION_LENGTH;
    1636:	88 ec       	ldi	r24, 0xC8	; 200
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0c c0       	rjmp	.+24     	; 0x1654 <update_funcCnt_y+0x18c>
                }
                else {
                    loadYBuffer = funcSize_y - func_global_counter_y;
    163c:	80 91 ef 24 	lds	r24, 0x24EF
    1640:	90 91 f0 24 	lds	r25, 0x24F0
    1644:	a0 91 f1 24 	lds	r26, 0x24F1
    1648:	b0 91 f2 24 	lds	r27, 0x24F2
    164c:	89 01       	movw	r16, r18
    164e:	08 1b       	sub	r16, r24
    1650:	19 0b       	sbc	r17, r25
    1652:	c8 01       	movw	r24, r16
    1654:	80 93 af 20 	sts	0x20AF, r24
    1658:	90 93 b0 20 	sts	0x20B0, r25
                }
                
                res = f_read(&file3, funcYBuff, loadYBuffer, &cnt);
    165c:	8e 01       	movw	r16, r28
    165e:	0b 5f       	subi	r16, 0xFB	; 251
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	40 91 af 20 	lds	r20, 0x20AF
    1666:	50 91 b0 20 	lds	r21, 0x20B0
    166a:	88 ee       	ldi	r24, 0xE8	; 232
    166c:	96 e2       	ldi	r25, 0x26	; 38
    166e:	b8 01       	movw	r22, r16
    1670:	9e 01       	movw	r18, r28
    1672:	2f 5f       	subi	r18, 0xFF	; 255
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
    167a:	48 2f       	mov	r20, r24
                if ((res == FR_OK) && (cnt == loadYBuffer)) {
    167c:	88 23       	and	r24, r24
    167e:	21 f5       	brne	.+72     	; 0x16c8 <update_funcCnt_y+0x200>
    1680:	29 81       	ldd	r18, Y+1	; 0x01
    1682:	3a 81       	ldd	r19, Y+2	; 0x02
    1684:	80 91 af 20 	lds	r24, 0x20AF
    1688:	90 91 b0 20 	lds	r25, 0x20B0
    168c:	28 17       	cp	r18, r24
    168e:	39 07       	cpc	r19, r25
    1690:	d9 f4       	brne	.+54     	; 0x16c8 <update_funcCnt_y+0x200>
                    
                    for (j = 0; j < loadYBuffer/2; j++)
    1692:	f8 01       	movw	r30, r16
    1694:	6b ea       	ldi	r22, 0xAB	; 171
    1696:	75 e2       	ldi	r23, 0x25	; 37
    1698:	2e 7f       	andi	r18, 0xFE	; 254
    169a:	20 0f       	add	r18, r16
    169c:	31 1f       	adc	r19, r17
                    {   ((uint8_t*)&tempVal)[0] = funcYBuff[2*j];
    169e:	ae 01       	movw	r20, r28
    16a0:	4d 5f       	subi	r20, 0xFD	; 253
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <update_funcCnt_y+0x1f8>
    16a6:	80 81       	ld	r24, Z
    16a8:	da 01       	movw	r26, r20
    16aa:	8c 93       	st	X, r24
                        ((uint8_t*)&tempVal)[1] = funcYBuff[2*j+1];
    16ac:	81 81       	ldd	r24, Z+1	; 0x01
    16ae:	11 96       	adiw	r26, 0x01	; 1
    16b0:	8c 93       	st	X, r24
                        function_Y [j] = tempVal;
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	db 01       	movw	r26, r22
    16b8:	8d 93       	st	X+, r24
    16ba:	9d 93       	st	X+, r25
    16bc:	bd 01       	movw	r22, r26
    16be:	32 96       	adiw	r30, 0x02	; 2
                }
                
                res = f_read(&file3, funcYBuff, loadYBuffer, &cnt);
                if ((res == FR_OK) && (cnt == loadYBuffer)) {
                    
                    for (j = 0; j < loadYBuffer/2; j++)
    16c0:	e2 17       	cp	r30, r18
    16c2:	f3 07       	cpc	r31, r19
    16c4:	81 f7       	brne	.-32     	; 0x16a6 <update_funcCnt_y+0x1de>
    16c6:	48 c0       	rjmp	.+144    	; 0x1758 <update_funcCnt_y+0x290>
                        ((uint8_t*)&tempVal)[1] = funcYBuff[2*j+1];
                        function_Y [j] = tempVal;
                    }
                    
                } else {
                    if (quiet_mode_on == 0){
    16c8:	80 91 f3 24 	lds	r24, 0x24F3
    16cc:	88 23       	and	r24, r24
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <update_funcCnt_y+0x20a>
    16d0:	43 c0       	rjmp	.+134    	; 0x1758 <update_funcCnt_y+0x290>
                        xprintf(PSTR("res =  %u\n"), res);
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <update_funcCnt_y+0x20c>
    16d4:	0f 92       	push	r0
    16d6:	ed b7       	in	r30, 0x3d	; 61
    16d8:	fe b7       	in	r31, 0x3e	; 62
    16da:	31 96       	adiw	r30, 0x01	; 1
    16dc:	87 ee       	ldi	r24, 0xE7	; 231
    16de:	92 e0       	ldi	r25, 0x02	; 2
    16e0:	ad b7       	in	r26, 0x3d	; 61
    16e2:	be b7       	in	r27, 0x3e	; 62
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	8d 93       	st	X+, r24
    16e8:	9c 93       	st	X, r25
    16ea:	12 97       	sbiw	r26, 0x02	; 2
    16ec:	42 83       	std	Z+2, r20	; 0x02
    16ee:	13 82       	std	Z+3, r1	; 0x03
    16f0:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                        xputs(PSTR("Error in f_read in update_funcCnt_y\n"));
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	82 ec       	ldi	r24, 0xC2	; 194
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	1b c0       	rjmp	.+54     	; 0x1738 <update_funcCnt_y+0x270>
                    }
                }
            } else {
                if (quiet_mode_on == 0){
    1702:	80 91 f3 24 	lds	r24, 0x24F3
    1706:	88 23       	and	r24, r24
    1708:	39 f5       	brne	.+78     	; 0x1758 <update_funcCnt_y+0x290>
                    xprintf(PSTR("res =  %u\n"), res);
    170a:	00 d0       	rcall	.+0      	; 0x170c <update_funcCnt_y+0x244>
    170c:	0f 92       	push	r0
    170e:	ed b7       	in	r30, 0x3d	; 61
    1710:	fe b7       	in	r31, 0x3e	; 62
    1712:	31 96       	adiw	r30, 0x01	; 1
    1714:	87 eb       	ldi	r24, 0xB7	; 183
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	ad b7       	in	r26, 0x3d	; 61
    171a:	be b7       	in	r27, 0x3e	; 62
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	8d 93       	st	X+, r24
    1720:	9c 93       	st	X, r25
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	22 83       	std	Z+2, r18	; 0x02
    1726:	13 82       	std	Z+3, r1	; 0x03
    1728:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                    xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	80 e8       	ldi	r24, 0x80	; 128
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <update_funcCnt_y+0x290>
                }
            }
        } //end if (function_counter >= 1000) && (func_global_counter <= funcSize)
    }
    else{
        function_counter_y = (function_counter_y + 1)%FUNCTION_LENGTH;
    173e:	80 91 e9 24 	lds	r24, 0x24E9
    1742:	90 91 ea 24 	lds	r25, 0x24EA
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	64 e6       	ldi	r22, 0x64	; 100
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    1750:	80 93 e9 24 	sts	0x24E9, r24
    1754:	90 93 ea 24 	sts	0x24EA, r25
    }
    
//update analog output
    if (y_mode == 5){
    1758:	80 91 e3 27 	lds	r24, 0x27E3
    175c:	85 30       	cpi	r24, 0x05	; 5
    175e:	e9 f4       	brne	.+58     	; 0x179a <update_funcCnt_y+0x2d2>
        Y_dac_val = (65535/2) + 328*function_Y[function_counter_y];   //328 should convert 1V (=20) to 0.5 V
    1760:	e0 91 e9 24 	lds	r30, 0x24E9
    1764:	f0 91 ea 24 	lds	r31, 0x24EA
        analogWrite(1, Y_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e5 55       	subi	r30, 0x55	; 85
    176e:	fa 4d       	sbci	r31, 0xDA	; 218
    1770:	20 81       	ld	r18, Z
    1772:	31 81       	ldd	r19, Z+1	; 0x01
    1774:	88 e4       	ldi	r24, 0x48	; 72
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	28 9f       	mul	r18, r24
    177a:	b0 01       	movw	r22, r0
    177c:	29 9f       	mul	r18, r25
    177e:	70 0d       	add	r23, r0
    1780:	38 9f       	mul	r19, r24
    1782:	70 0d       	add	r23, r0
    1784:	11 24       	eor	r1, r1
    1786:	61 50       	subi	r22, 0x01	; 1
    1788:	70 48       	sbci	r23, 0x80	; 128
    178a:	35 e0       	ldi	r19, 0x05	; 5
    178c:	76 95       	lsr	r23
    178e:	67 95       	ror	r22
    1790:	3a 95       	dec	r19
    1792:	e1 f7       	brne	.-8      	; 0x178c <update_funcCnt_y+0x2c4>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    }
    
}
    179a:	c4 53       	subi	r28, 0x34	; 52
    179c:	df 4f       	sbci	r29, 0xFF	; 255
    179e:	e6 e0       	ldi	r30, 0x06	; 6
    17a0:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

000017a4 <update_funcCnt_x>:
                xputs(PSTR("Error input for function channel.\n"));
            break;
    }
}

void update_funcCnt_x(void) {
    17a4:	ac ec       	ldi	r26, 0xCC	; 204
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e8 ed       	ldi	r30, 0xD8	; 216
    17aa:	fb e0       	ldi	r31, 0x0B	; 11
    17ac:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
    uint16_t cnt, j, offset;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcXBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_X != 0){
    17b0:	80 91 f4 24 	lds	r24, 0x24F4
    17b4:	90 91 f5 24 	lds	r25, 0x24F5
    17b8:	89 2b       	or	r24, r25
    17ba:	09 f4       	brne	.+2      	; 0x17be <update_funcCnt_x+0x1a>
    17bc:	2e c1       	rjmp	.+604    	; 0x1a1a <update_funcCnt_x+0x276>
        
        function_counter_x++;  //min:0, max:FUNCTION_LENGTH
    17be:	80 91 e7 24 	lds	r24, 0x24E7
    17c2:	90 91 e8 24 	lds	r25, 0x24E8
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	80 93 e7 24 	sts	0x24E7, r24
    17cc:	90 93 e8 24 	sts	0x24E8, r25
        func_global_counter_x = func_global_counter_x + 2; //min:0, max:funcSize_x Note:size of each function datum is 2 bytes.
    17d0:	80 91 eb 24 	lds	r24, 0x24EB
    17d4:	90 91 ec 24 	lds	r25, 0x24EC
    17d8:	a0 91 ed 24 	lds	r26, 0x24ED
    17dc:	b0 91 ee 24 	lds	r27, 0x24EE
    17e0:	02 96       	adiw	r24, 0x02	; 2
    17e2:	a1 1d       	adc	r26, r1
    17e4:	b1 1d       	adc	r27, r1
    17e6:	80 93 eb 24 	sts	0x24EB, r24
    17ea:	90 93 ec 24 	sts	0x24EC, r25
    17ee:	a0 93 ed 24 	sts	0x24ED, r26
    17f2:	b0 93 ee 24 	sts	0x24EE, r27
        
        if ((function_counter_x >= loadXBuffer/2) || (func_global_counter_x >= funcSize_x)) {
    17f6:	20 91 e7 24 	lds	r18, 0x24E7
    17fa:	30 91 e8 24 	lds	r19, 0x24E8
    17fe:	80 91 ad 20 	lds	r24, 0x20AD
    1802:	90 91 ae 20 	lds	r25, 0x20AE
    1806:	96 95       	lsr	r25
    1808:	87 95       	ror	r24
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	b0 f4       	brcc	.+44     	; 0x183c <update_funcCnt_x+0x98>
    1810:	20 91 eb 24 	lds	r18, 0x24EB
    1814:	30 91 ec 24 	lds	r19, 0x24EC
    1818:	40 91 ed 24 	lds	r20, 0x24ED
    181c:	50 91 ee 24 	lds	r21, 0x24EE
    1820:	80 91 a5 20 	lds	r24, 0x20A5
    1824:	90 91 a6 20 	lds	r25, 0x20A6
    1828:	a0 91 a7 20 	lds	r26, 0x20A7
    182c:	b0 91 a8 20 	lds	r27, 0x20A8
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	4a 07       	cpc	r20, r26
    1836:	5b 07       	cpc	r21, r27
    1838:	08 f4       	brcc	.+2      	; 0x183c <update_funcCnt_x+0x98>
    183a:	fc c0       	rjmp	.+504    	; 0x1a34 <update_funcCnt_x+0x290>
            // need to update function_X[FUNCITION_LENGTH]
            if (func_global_counter_x >= funcSize_x){
    183c:	20 91 eb 24 	lds	r18, 0x24EB
    1840:	30 91 ec 24 	lds	r19, 0x24EC
    1844:	40 91 ed 24 	lds	r20, 0x24ED
    1848:	50 91 ee 24 	lds	r21, 0x24EE
    184c:	80 91 a5 20 	lds	r24, 0x20A5
    1850:	90 91 a6 20 	lds	r25, 0x20A6
    1854:	a0 91 a7 20 	lds	r26, 0x20A7
    1858:	b0 91 a8 20 	lds	r27, 0x20A8
    185c:	28 17       	cp	r18, r24
    185e:	39 07       	cpc	r19, r25
    1860:	4a 07       	cpc	r20, r26
    1862:	5b 07       	cpc	r21, r27
    1864:	78 f0       	brcs	.+30     	; 0x1884 <update_funcCnt_x+0xe0>
                
                offset = 512;
                func_global_counter_x =0;
    1866:	10 92 eb 24 	sts	0x24EB, r1
    186a:	10 92 ec 24 	sts	0x24EC, r1
    186e:	10 92 ed 24 	sts	0x24ED, r1
    1872:	10 92 ee 24 	sts	0x24EE, r1
                function_counter_x = 0;
    1876:	10 92 e7 24 	sts	0x24E7, r1
    187a:	10 92 e8 24 	sts	0x24E8, r1
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	52 e0       	ldi	r21, 0x02	; 2
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <update_funcCnt_x+0xfe>
            }
            else{
                
                //read the next loadBuffer bytes
                offset = 512 + func_global_counter_x;
    1884:	80 91 eb 24 	lds	r24, 0x24EB
    1888:	90 91 ec 24 	lds	r25, 0x24EC
    188c:	a0 91 ed 24 	lds	r26, 0x24ED
    1890:	b0 91 ee 24 	lds	r27, 0x24EE
    1894:	ac 01       	movw	r20, r24
    1896:	40 50       	subi	r20, 0x00	; 0
    1898:	5e 4f       	sbci	r21, 0xFE	; 254
                function_counter_x = 0;
    189a:	10 92 e7 24 	sts	0x24E7, r1
    189e:	10 92 e8 24 	sts	0x24E8, r1
            }
            
            res = f_lseek(&file2, offset);
    18a2:	7a 01       	movw	r14, r20
    18a4:	00 e0       	ldi	r16, 0x00	; 0
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	86 e7       	ldi	r24, 0x76	; 118
    18aa:	95 e2       	ldi	r25, 0x25	; 37
    18ac:	b8 01       	movw	r22, r16
    18ae:	a7 01       	movw	r20, r14
    18b0:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
    18b4:	28 2f       	mov	r18, r24
            if ((res == FR_OK) && (file2.fptr == offset)) {
    18b6:	88 23       	and	r24, r24
    18b8:	09 f0       	breq	.+2      	; 0x18bc <update_funcCnt_x+0x118>
    18ba:	91 c0       	rjmp	.+290    	; 0x19de <update_funcCnt_x+0x23a>
    18bc:	80 91 7c 25 	lds	r24, 0x257C
    18c0:	90 91 7d 25 	lds	r25, 0x257D
    18c4:	a0 91 7e 25 	lds	r26, 0x257E
    18c8:	b0 91 7f 25 	lds	r27, 0x257F
    18cc:	8e 15       	cp	r24, r14
    18ce:	9f 05       	cpc	r25, r15
    18d0:	a0 07       	cpc	r26, r16
    18d2:	b1 07       	cpc	r27, r17
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <update_funcCnt_x+0x134>
    18d6:	83 c0       	rjmp	.+262    	; 0x19de <update_funcCnt_x+0x23a>
                
                if (funcSize_x - func_global_counter_x >= 2*FUNCTION_LENGTH) {
    18d8:	20 91 a5 20 	lds	r18, 0x20A5
    18dc:	30 91 a6 20 	lds	r19, 0x20A6
    18e0:	40 91 a7 20 	lds	r20, 0x20A7
    18e4:	50 91 a8 20 	lds	r21, 0x20A8
    18e8:	80 91 eb 24 	lds	r24, 0x24EB
    18ec:	90 91 ec 24 	lds	r25, 0x24EC
    18f0:	a0 91 ed 24 	lds	r26, 0x24ED
    18f4:	b0 91 ee 24 	lds	r27, 0x24EE
    18f8:	79 01       	movw	r14, r18
    18fa:	8a 01       	movw	r16, r20
    18fc:	e8 1a       	sub	r14, r24
    18fe:	f9 0a       	sbc	r15, r25
    1900:	0a 0b       	sbc	r16, r26
    1902:	1b 0b       	sbc	r17, r27
    1904:	d8 01       	movw	r26, r16
    1906:	c7 01       	movw	r24, r14
    1908:	88 3c       	cpi	r24, 0xC8	; 200
    190a:	91 05       	cpc	r25, r1
    190c:	a1 05       	cpc	r26, r1
    190e:	b1 05       	cpc	r27, r1
    1910:	18 f0       	brcs	.+6      	; 0x1918 <update_funcCnt_x+0x174>
                    loadXBuffer = 2*FUNCTION_LENGTH;
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0c c0       	rjmp	.+24     	; 0x1930 <update_funcCnt_x+0x18c>
                }
                else {
                    loadXBuffer = funcSize_x - func_global_counter_x;
    1918:	80 91 eb 24 	lds	r24, 0x24EB
    191c:	90 91 ec 24 	lds	r25, 0x24EC
    1920:	a0 91 ed 24 	lds	r26, 0x24ED
    1924:	b0 91 ee 24 	lds	r27, 0x24EE
    1928:	89 01       	movw	r16, r18
    192a:	08 1b       	sub	r16, r24
    192c:	19 0b       	sbc	r17, r25
    192e:	c8 01       	movw	r24, r16
    1930:	80 93 ad 20 	sts	0x20AD, r24
    1934:	90 93 ae 20 	sts	0x20AE, r25
                }
                
                res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
    1938:	8e 01       	movw	r16, r28
    193a:	0b 5f       	subi	r16, 0xFB	; 251
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	40 91 ad 20 	lds	r20, 0x20AD
    1942:	50 91 ae 20 	lds	r21, 0x20AE
    1946:	86 e7       	ldi	r24, 0x76	; 118
    1948:	95 e2       	ldi	r25, 0x25	; 37
    194a:	b8 01       	movw	r22, r16
    194c:	9e 01       	movw	r18, r28
    194e:	2f 5f       	subi	r18, 0xFF	; 255
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
    1956:	48 2f       	mov	r20, r24
                if ((res == FR_OK) && (cnt == loadXBuffer)) {
    1958:	88 23       	and	r24, r24
    195a:	21 f5       	brne	.+72     	; 0x19a4 <update_funcCnt_x+0x200>
    195c:	29 81       	ldd	r18, Y+1	; 0x01
    195e:	3a 81       	ldd	r19, Y+2	; 0x02
    1960:	80 91 ad 20 	lds	r24, 0x20AD
    1964:	90 91 ae 20 	lds	r25, 0x20AE
    1968:	28 17       	cp	r18, r24
    196a:	39 07       	cpc	r19, r25
    196c:	d9 f4       	brne	.+54     	; 0x19a4 <update_funcCnt_x+0x200>
                    
                    for (j = 0; j < loadXBuffer/2; j++)
    196e:	f8 01       	movw	r30, r16
    1970:	67 e0       	ldi	r22, 0x07	; 7
    1972:	78 e2       	ldi	r23, 0x28	; 40
    1974:	2e 7f       	andi	r18, 0xFE	; 254
    1976:	20 0f       	add	r18, r16
    1978:	31 1f       	adc	r19, r17
                    {   ((uint8_t*)&tempVal)[0] = funcXBuff[2*j];
    197a:	ae 01       	movw	r20, r28
    197c:	4d 5f       	subi	r20, 0xFD	; 253
    197e:	5f 4f       	sbci	r21, 0xFF	; 255
    1980:	0d c0       	rjmp	.+26     	; 0x199c <update_funcCnt_x+0x1f8>
    1982:	80 81       	ld	r24, Z
    1984:	da 01       	movw	r26, r20
    1986:	8c 93       	st	X, r24
                        ((uint8_t*)&tempVal)[1] = funcXBuff[2*j+1];
    1988:	81 81       	ldd	r24, Z+1	; 0x01
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	8c 93       	st	X, r24
                        function_X [j] = tempVal;
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	db 01       	movw	r26, r22
    1994:	8d 93       	st	X+, r24
    1996:	9d 93       	st	X+, r25
    1998:	bd 01       	movw	r22, r26
    199a:	32 96       	adiw	r30, 0x02	; 2
                }
                
                res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
                if ((res == FR_OK) && (cnt == loadXBuffer)) {
                    
                    for (j = 0; j < loadXBuffer/2; j++)
    199c:	e2 17       	cp	r30, r18
    199e:	f3 07       	cpc	r31, r19
    19a0:	81 f7       	brne	.-32     	; 0x1982 <update_funcCnt_x+0x1de>
    19a2:	48 c0       	rjmp	.+144    	; 0x1a34 <update_funcCnt_x+0x290>
                        ((uint8_t*)&tempVal)[1] = funcXBuff[2*j+1];
                        function_X [j] = tempVal;
                    }
                    
                } else {
                    if (quiet_mode_on == 0){
    19a4:	80 91 f3 24 	lds	r24, 0x24F3
    19a8:	88 23       	and	r24, r24
    19aa:	09 f0       	breq	.+2      	; 0x19ae <update_funcCnt_x+0x20a>
    19ac:	43 c0       	rjmp	.+134    	; 0x1a34 <update_funcCnt_x+0x290>
                        xprintf(PSTR("res =  %u\n"), res);
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <update_funcCnt_x+0x20c>
    19b0:	0f 92       	push	r0
    19b2:	ed b7       	in	r30, 0x3d	; 61
    19b4:	fe b7       	in	r31, 0x3e	; 62
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	8b e4       	ldi	r24, 0x4B	; 75
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	ad b7       	in	r26, 0x3d	; 61
    19be:	be b7       	in	r27, 0x3e	; 62
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	8d 93       	st	X+, r24
    19c4:	9c 93       	st	X, r25
    19c6:	12 97       	sbiw	r26, 0x02	; 2
    19c8:	42 83       	std	Z+2, r20	; 0x02
    19ca:	13 82       	std	Z+3, r1	; 0x03
    19cc:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                        xputs(PSTR("Error in f_read in in update_funcCnt_x\n"));
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	83 e2       	ldi	r24, 0x23	; 35
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	1b c0       	rjmp	.+54     	; 0x1a14 <update_funcCnt_x+0x270>
                    }
                }
            } else {
                if (quiet_mode_on == 0){
    19de:	80 91 f3 24 	lds	r24, 0x24F3
    19e2:	88 23       	and	r24, r24
    19e4:	39 f5       	brne	.+78     	; 0x1a34 <update_funcCnt_x+0x290>
                    xprintf(PSTR("res =  %u\n"), res);
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <update_funcCnt_x+0x244>
    19e8:	0f 92       	push	r0
    19ea:	ed b7       	in	r30, 0x3d	; 61
    19ec:	fe b7       	in	r31, 0x3e	; 62
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	88 e1       	ldi	r24, 0x18	; 24
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	ad b7       	in	r26, 0x3d	; 61
    19f6:	be b7       	in	r27, 0x3e	; 62
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	8d 93       	st	X+, r24
    19fc:	9c 93       	st	X, r25
    19fe:	12 97       	sbiw	r26, 0x02	; 2
    1a00:	22 83       	std	Z+2, r18	; 0x02
    1a02:	13 82       	std	Z+3, r1	; 0x03
    1a04:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                    xputs(PSTR("Error in f_lseek in update_funcCnt_x\n"));
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	82 ef       	ldi	r24, 0xF2	; 242
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <update_funcCnt_x+0x290>
            }
        } //end if ((function_counter_x >= loadBuffer/2) || (func_global_counter_x >= funcSize_x))
        
    }
    else{
        function_counter_x = (function_counter_x + 1)%FUNCTION_LENGTH;
    1a1a:	80 91 e7 24 	lds	r24, 0x24E7
    1a1e:	90 91 e8 24 	lds	r25, 0x24E8
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	64 e6       	ldi	r22, 0x64	; 100
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    1a2c:	80 93 e7 24 	sts	0x24E7, r24
    1a30:	90 93 e8 24 	sts	0x24E8, r25
    }
    
    if (x_mode == 5)   // in function DBG mode - show the function gen
    1a34:	80 91 99 27 	lds	r24, 0x2799
    1a38:	85 30       	cpi	r24, 0x05	; 5
    1a3a:	e9 f4       	brne	.+58     	; 0x1a76 <update_funcCnt_x+0x2d2>
    {
        X_dac_val = (65535/2) + 328*function_X[function_counter_x];   //328 should convert 1V (=20) to 0.5 V
    1a3c:	e0 91 e7 24 	lds	r30, 0x24E7
    1a40:	f0 91 e8 24 	lds	r31, 0x24E8
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	e9 5f       	subi	r30, 0xF9	; 249
    1a4a:	f7 4d       	sbci	r31, 0xD7	; 215
    1a4c:	20 81       	ld	r18, Z
    1a4e:	31 81       	ldd	r19, Z+1	; 0x01
    1a50:	88 e4       	ldi	r24, 0x48	; 72
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	28 9f       	mul	r18, r24
    1a56:	b0 01       	movw	r22, r0
    1a58:	29 9f       	mul	r18, r25
    1a5a:	70 0d       	add	r23, r0
    1a5c:	38 9f       	mul	r19, r24
    1a5e:	70 0d       	add	r23, r0
    1a60:	11 24       	eor	r1, r1
    1a62:	61 50       	subi	r22, 0x01	; 1
    1a64:	70 48       	sbci	r23, 0x80	; 128
    1a66:	e5 e0       	ldi	r30, 0x05	; 5
    1a68:	76 95       	lsr	r23
    1a6a:	67 95       	ror	r22
    1a6c:	ea 95       	dec	r30
    1a6e:	e1 f7       	brne	.-8      	; 0x1a68 <update_funcCnt_x+0x2c4>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    }
}
    1a76:	c4 53       	subi	r28, 0x34	; 52
    1a78:	df 4f       	sbci	r29, 0xFF	; 255
    1a7a:	e6 e0       	ldi	r30, 0x06	; 6
    1a7c:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

00001a80 <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    1a80:	ae e0       	ldi	r26, 0x0E	; 14
    1a82:	b2 e0       	ldi	r27, 0x02	; 2
    1a84:	e6 e4       	ldi	r30, 0x46	; 70
    1a86:	fd e0       	ldi	r31, 0x0D	; 13
    1a88:	0c 94 59 58 	jmp	0xb0b2	; 0xb0b2 <__prologue_saves__+0x1c>
    1a8c:	08 2f       	mov	r16, r24
    1a8e:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    1a90:	6a 30       	cpi	r22, 0x0A	; 10
    1a92:	80 f4       	brcc	.+32     	; 0x1ab4 <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <set_vel_func+0x16>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <set_vel_func+0x18>
    1a98:	ed b7       	in	r30, 0x3d	; 61
    1a9a:	fe b7       	in	r31, 0x3e	; 62
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	03 96       	adiw	r24, 0x03	; 3
    1aa2:	ad b7       	in	r26, 0x3d	; 61
    1aa4:	be b7       	in	r27, 0x3e	; 62
    1aa6:	11 96       	adiw	r26, 0x01	; 1
    1aa8:	8d 93       	st	X+, r24
    1aaa:	9c 93       	st	X, r25
    1aac:	12 97       	sbiw	r26, 0x02	; 2
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e2       	ldi	r25, 0x20	; 32
    1ab2:	1f c0       	rjmp	.+62     	; 0x1af2 <set_vel_func+0x72>
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1ab8:	64 36       	cpi	r22, 0x64	; 100
    1aba:	70 f4       	brcc	.+28     	; 0x1ad8 <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <set_vel_func+0x3e>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <set_vel_func+0x40>
    1ac0:	ed b7       	in	r30, 0x3d	; 61
    1ac2:	fe b7       	in	r31, 0x3e	; 62
    1ac4:	31 96       	adiw	r30, 0x01	; 1
    1ac6:	ad b7       	in	r26, 0x3d	; 61
    1ac8:	be b7       	in	r27, 0x3e	; 62
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	8d 93       	st	X+, r24
    1ace:	9c 93       	st	X, r25
    1ad0:	12 97       	sbiw	r26, 0x02	; 2
    1ad2:	8e e0       	ldi	r24, 0x0E	; 14
    1ad4:	90 e2       	ldi	r25, 0x20	; 32
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <set_vel_func+0x5a>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <set_vel_func+0x5c>
    1adc:	ed b7       	in	r30, 0x3d	; 61
    1ade:	fe b7       	in	r31, 0x3e	; 62
    1ae0:	31 96       	adiw	r30, 0x01	; 1
    1ae2:	ad b7       	in	r26, 0x3d	; 61
    1ae4:	be b7       	in	r27, 0x3e	; 62
    1ae6:	11 96       	adiw	r26, 0x01	; 1
    1ae8:	8d 93       	st	X+, r24
    1aea:	9c 93       	st	X, r25
    1aec:	12 97       	sbiw	r26, 0x02	; 2
    1aee:	8b e1       	ldi	r24, 0x1B	; 27
    1af0:	90 e2       	ldi	r25, 0x20	; 32
    1af2:	82 83       	std	Z+2, r24	; 0x02
    1af4:	93 83       	std	Z+3, r25	; 0x03
    1af6:	14 83       	std	Z+4, r17	; 0x04
    1af8:	15 82       	std	Z+5, r1	; 0x05
    1afa:	0e 94 ab 5a 	call	0xb556	; 0xb556 <sprintf>
    1afe:	8d b7       	in	r24, 0x3d	; 61
    1b00:	9e b7       	in	r25, 0x3e	; 62
    1b02:	06 96       	adiw	r24, 0x06	; 6
    1b04:	8d bf       	out	0x3d, r24	; 61
    1b06:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1b08:	01 30       	cpi	r16, 0x01	; 1
    1b0a:	21 f0       	breq	.+8      	; 0x1b14 <set_vel_func+0x94>
    1b0c:	02 30       	cpi	r16, 0x02	; 2
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <set_vel_func+0x92>
    1b10:	da c0       	rjmp	.+436    	; 0x1cc6 <set_vel_func+0x246>
    1b12:	6c c0       	rjmp	.+216    	; 0x1bec <set_vel_func+0x16c>
        case 1:    //channel x
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file2);
    1b14:	86 e7       	ldi	r24, 0x76	; 118
    1b16:	95 e2       	ldi	r25, 0x25	; 37
    1b18:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1b1c:	86 e7       	ldi	r24, 0x76	; 118
    1b1e:	95 e2       	ldi	r25, 0x25	; 37
    1b20:	be 01       	movw	r22, r28
    1b22:	6d 5f       	subi	r22, 0xFD	; 253
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
            
            if (res == FR_OK) {
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <set_vel_func+0xb2>
    1b30:	48 c0       	rjmp	.+144    	; 0x1bc2 <set_vel_func+0x142>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    1b32:	86 e7       	ldi	r24, 0x76	; 118
    1b34:	95 e2       	ldi	r25, 0x25	; 37
    1b36:	be 01       	movw	r22, r28
    1b38:	61 5f       	subi	r22, 0xF1	; 241
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	52 e0       	ldi	r21, 0x02	; 2
    1b40:	9e 01       	movw	r18, r28
    1b42:	2f 5f       	subi	r18, 0xFF	; 255
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1b4a:	88 23       	and	r24, r24
    1b4c:	99 f5       	brne	.+102    	; 0x1bb4 <set_vel_func+0x134>
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	80 50       	subi	r24, 0x00	; 0
    1b54:	92 40       	sbci	r25, 0x02	; 2
    1b56:	71 f5       	brne	.+92     	; 0x1bb4 <set_vel_func+0x134>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	80 93 a5 20 	sts	0x20A5, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    1b5e:	88 89       	ldd	r24, Y+16	; 0x10
    1b60:	80 93 a6 20 	sts	0x20A6, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    1b64:	89 89       	ldd	r24, Y+17	; 0x11
    1b66:	80 93 a7 20 	sts	0x20A7, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    1b6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b6c:	80 93 a8 20 	sts	0x20A8, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    1b70:	10 93 f4 24 	sts	0x24F4, r17
    1b74:	10 92 f5 24 	sts	0x24F5, r1
                    
                    Stop = 1;
    1b78:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    1b7c:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1b80:	80 91 f3 24 	lds	r24, 0x24F3
    1b84:	88 23       	and	r24, r24
    1b86:	29 f5       	brne	.+74     	; 0x1bd2 <set_vel_func+0x152>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <set_vel_func+0x10a>
    1b8a:	0f 92       	push	r0
    1b8c:	ed b7       	in	r30, 0x3d	; 61
    1b8e:	fe b7       	in	r31, 0x3e	; 62
    1b90:	31 96       	adiw	r30, 0x01	; 1
    1b92:	81 e2       	ldi	r24, 0x21	; 33
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	ad b7       	in	r26, 0x3d	; 61
    1b98:	be b7       	in	r27, 0x3e	; 62
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	8d 93       	st	X+, r24
    1b9e:	9c 93       	st	X, r25
    1ba0:	12 97       	sbiw	r26, 0x02	; 2
    1ba2:	12 83       	std	Z+2, r17	; 0x02
    1ba4:	13 82       	std	Z+3, r1	; 0x03
    1ba6:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <set_vel_func+0x152>
                    
                } else {
                    if (quiet_mode_on == 0)
    1bb4:	80 91 f3 24 	lds	r24, 0x24F3
    1bb8:	88 23       	and	r24, r24
    1bba:	59 f4       	brne	.+22     	; 0x1bd2 <set_vel_func+0x152>
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	94 e0       	ldi	r25, 0x04	; 4
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <set_vel_func+0x14e>
                }
            } else {
                if (quiet_mode_on == 0)
    1bc2:	80 91 f3 24 	lds	r24, 0x24F3
    1bc6:	88 23       	and	r24, r24
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <set_vel_func+0x152>
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    1bca:	8f ed       	ldi	r24, 0xDF	; 223
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            }
            function_counter_x = 0;
    1bd2:	10 92 e7 24 	sts	0x24E7, r1
    1bd6:	10 92 e8 24 	sts	0x24E8, r1
            func_global_counter_x = 0;
    1bda:	10 92 eb 24 	sts	0x24EB, r1
    1bde:	10 92 ec 24 	sts	0x24EC, r1
    1be2:	10 92 ed 24 	sts	0x24ED, r1
    1be6:	10 92 ee 24 	sts	0x24EE, r1
    1bea:	75 c0       	rjmp	.+234    	; 0x1cd6 <set_vel_func+0x256>
            
        case 2:
            
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            
            res = f_close(&file3);
    1bec:	88 ee       	ldi	r24, 0xE8	; 232
    1bee:	96 e2       	ldi	r25, 0x26	; 38
    1bf0:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1bf4:	88 ee       	ldi	r24, 0xE8	; 232
    1bf6:	96 e2       	ldi	r25, 0x26	; 38
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6d 5f       	subi	r22, 0xFD	; 253
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
            
            if (res == FR_OK) {
    1c04:	88 23       	and	r24, r24
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <set_vel_func+0x18a>
    1c08:	49 c0       	rjmp	.+146    	; 0x1c9c <set_vel_func+0x21c>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    1c0a:	88 ee       	ldi	r24, 0xE8	; 232
    1c0c:	96 e2       	ldi	r25, 0x26	; 38
    1c0e:	be 01       	movw	r22, r28
    1c10:	61 5f       	subi	r22, 0xF1	; 241
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	52 e0       	ldi	r21, 0x02	; 2
    1c18:	9e 01       	movw	r18, r28
    1c1a:	2f 5f       	subi	r18, 0xFF	; 255
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1c22:	88 23       	and	r24, r24
    1c24:	a1 f5       	brne	.+104    	; 0x1c8e <set_vel_func+0x20e>
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	80 50       	subi	r24, 0x00	; 0
    1c2c:	92 40       	sbci	r25, 0x02	; 2
    1c2e:	79 f5       	brne	.+94     	; 0x1c8e <set_vel_func+0x20e>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    1c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c32:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    1c36:	88 89       	ldd	r24, Y+16	; 0x10
    1c38:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    1c3c:	89 89       	ldd	r24, Y+17	; 0x11
    1c3e:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    1c42:	8a 89       	ldd	r24, Y+18	; 0x12
    1c44:	80 93 ac 20 	sts	0x20AC, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    1c48:	10 93 f6 24 	sts	0x24F6, r17
    1c4c:	10 92 f7 24 	sts	0x24F7, r1
                    
                    Stop = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1c56:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1c5a:	80 91 f3 24 	lds	r24, 0x24F3
    1c5e:	88 23       	and	r24, r24
    1c60:	29 f5       	brne	.+74     	; 0x1cac <set_vel_func+0x22c>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <set_vel_func+0x1e4>
    1c64:	0f 92       	push	r0
    1c66:	ed b7       	in	r30, 0x3d	; 61
    1c68:	fe b7       	in	r31, 0x3e	; 62
    1c6a:	31 96       	adiw	r30, 0x01	; 1
    1c6c:	8b eb       	ldi	r24, 0xBB	; 187
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	ad b7       	in	r26, 0x3d	; 61
    1c72:	be b7       	in	r27, 0x3e	; 62
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	8d 93       	st	X+, r24
    1c78:	9c 93       	st	X, r25
    1c7a:	12 97       	sbiw	r26, 0x02	; 2
    1c7c:	12 83       	std	Z+2, r17	; 0x02
    1c7e:	13 82       	std	Z+3, r1	; 0x03
    1c80:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <set_vel_func+0x22c>
                    
                } else {
                    if (quiet_mode_on == 0)
    1c8e:	80 91 f3 24 	lds	r24, 0x24F3
    1c92:	88 23       	and	r24, r24
    1c94:	59 f4       	brne	.+22     	; 0x1cac <set_vel_func+0x22c>
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    1c96:	8a e9       	ldi	r24, 0x9A	; 154
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <set_vel_func+0x228>
                }
            } else {
                if (quiet_mode_on == 0)
    1c9c:	80 91 f3 24 	lds	r24, 0x24F3
    1ca0:	88 23       	and	r24, r24
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <set_vel_func+0x22c>
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    1ca4:	89 e7       	ldi	r24, 0x79	; 121
    1ca6:	93 e0       	ldi	r25, 0x03	; 3
    1ca8:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            }
            function_counter_y = 0;
    1cac:	10 92 e9 24 	sts	0x24E9, r1
    1cb0:	10 92 ea 24 	sts	0x24EA, r1
            func_global_counter_y = 0;
    1cb4:	10 92 ef 24 	sts	0x24EF, r1
    1cb8:	10 92 f0 24 	sts	0x24F0, r1
    1cbc:	10 92 f1 24 	sts	0x24F1, r1
    1cc0:	10 92 f2 24 	sts	0x24F2, r1
    1cc4:	08 c0       	rjmp	.+16     	; 0x1cd6 <set_vel_func+0x256>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    1cc6:	80 91 f3 24 	lds	r24, 0x24F3
    1cca:	88 23       	and	r24, r24
    1ccc:	21 f4       	brne	.+8      	; 0x1cd6 <set_vel_func+0x256>
                xputs(PSTR("Error input for function channel.\n"));
    1cce:	86 e5       	ldi	r24, 0x56	; 86
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            break;
    }
}
    1cd6:	c2 5f       	subi	r28, 0xF2	; 242
    1cd8:	dd 4f       	sbci	r29, 0xFD	; 253
    1cda:	e4 e0       	ldi	r30, 0x04	; 4
    1cdc:	0c 94 75 58 	jmp	0xb0ea	; 0xb0ea <__epilogue_restores__+0x1c>

00001ce0 <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    1ce0:	ae e0       	ldi	r26, 0x0E	; 14
    1ce2:	b2 e0       	ldi	r27, 0x02	; 2
    1ce4:	e6 e7       	ldi	r30, 0x76	; 118
    1ce6:	fe e0       	ldi	r31, 0x0E	; 14
    1ce8:	0c 94 59 58 	jmp	0xb0b2	; 0xb0b2 <__prologue_saves__+0x1c>
    1cec:	08 2f       	mov	r16, r24
    1cee:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    1cf0:	6a 30       	cpi	r22, 0x0A	; 10
    1cf2:	80 f4       	brcc	.+32     	; 0x1d14 <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <set_pos_func+0x16>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <set_pos_func+0x18>
    1cf8:	ed b7       	in	r30, 0x3d	; 61
    1cfa:	fe b7       	in	r31, 0x3e	; 62
    1cfc:	31 96       	adiw	r30, 0x01	; 1
    1cfe:	ce 01       	movw	r24, r28
    1d00:	03 96       	adiw	r24, 0x03	; 3
    1d02:	ad b7       	in	r26, 0x3d	; 61
    1d04:	be b7       	in	r27, 0x3e	; 62
    1d06:	11 96       	adiw	r26, 0x01	; 1
    1d08:	8d 93       	st	X+, r24
    1d0a:	9c 93       	st	X, r25
    1d0c:	12 97       	sbiw	r26, 0x02	; 2
    1d0e:	87 e2       	ldi	r24, 0x27	; 39
    1d10:	90 e2       	ldi	r25, 0x20	; 32
    1d12:	1f c0       	rjmp	.+62     	; 0x1d52 <set_pos_func+0x72>
    1d14:	ce 01       	movw	r24, r28
    1d16:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1d18:	64 36       	cpi	r22, 0x64	; 100
    1d1a:	70 f4       	brcc	.+28     	; 0x1d38 <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <set_pos_func+0x3e>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <set_pos_func+0x40>
    1d20:	ed b7       	in	r30, 0x3d	; 61
    1d22:	fe b7       	in	r31, 0x3e	; 62
    1d24:	31 96       	adiw	r30, 0x01	; 1
    1d26:	ad b7       	in	r26, 0x3d	; 61
    1d28:	be b7       	in	r27, 0x3e	; 62
    1d2a:	11 96       	adiw	r26, 0x01	; 1
    1d2c:	8d 93       	st	X+, r24
    1d2e:	9c 93       	st	X, r25
    1d30:	12 97       	sbiw	r26, 0x02	; 2
    1d32:	85 e3       	ldi	r24, 0x35	; 53
    1d34:	90 e2       	ldi	r25, 0x20	; 32
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <set_pos_func+0x5a>
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <set_pos_func+0x5c>
    1d3c:	ed b7       	in	r30, 0x3d	; 61
    1d3e:	fe b7       	in	r31, 0x3e	; 62
    1d40:	31 96       	adiw	r30, 0x01	; 1
    1d42:	ad b7       	in	r26, 0x3d	; 61
    1d44:	be b7       	in	r27, 0x3e	; 62
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	8d 93       	st	X+, r24
    1d4a:	9c 93       	st	X, r25
    1d4c:	12 97       	sbiw	r26, 0x02	; 2
    1d4e:	82 e4       	ldi	r24, 0x42	; 66
    1d50:	90 e2       	ldi	r25, 0x20	; 32
    1d52:	82 83       	std	Z+2, r24	; 0x02
    1d54:	93 83       	std	Z+3, r25	; 0x03
    1d56:	14 83       	std	Z+4, r17	; 0x04
    1d58:	15 82       	std	Z+5, r1	; 0x05
    1d5a:	0e 94 ab 5a 	call	0xb556	; 0xb556 <sprintf>
    1d5e:	8d b7       	in	r24, 0x3d	; 61
    1d60:	9e b7       	in	r25, 0x3e	; 62
    1d62:	06 96       	adiw	r24, 0x06	; 6
    1d64:	8d bf       	out	0x3d, r24	; 61
    1d66:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1d68:	01 30       	cpi	r16, 0x01	; 1
    1d6a:	21 f0       	breq	.+8      	; 0x1d74 <set_pos_func+0x94>
    1d6c:	02 30       	cpi	r16, 0x02	; 2
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <set_pos_func+0x92>
    1d70:	da c0       	rjmp	.+436    	; 0x1f26 <set_pos_func+0x246>
    1d72:	6c c0       	rjmp	.+216    	; 0x1e4c <set_pos_func+0x16c>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    1d74:	86 e7       	ldi	r24, 0x76	; 118
    1d76:	95 e2       	ldi	r25, 0x25	; 37
    1d78:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1d7c:	86 e7       	ldi	r24, 0x76	; 118
    1d7e:	95 e2       	ldi	r25, 0x25	; 37
    1d80:	be 01       	movw	r22, r28
    1d82:	6d 5f       	subi	r22, 0xFD	; 253
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
            if (res == FR_OK) {
    1d8c:	88 23       	and	r24, r24
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <set_pos_func+0xb2>
    1d90:	48 c0       	rjmp	.+144    	; 0x1e22 <set_pos_func+0x142>
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    1d92:	86 e7       	ldi	r24, 0x76	; 118
    1d94:	95 e2       	ldi	r25, 0x25	; 37
    1d96:	be 01       	movw	r22, r28
    1d98:	61 5f       	subi	r22, 0xF1	; 241
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	52 e0       	ldi	r21, 0x02	; 2
    1da0:	9e 01       	movw	r18, r28
    1da2:	2f 5f       	subi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
    1da6:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1daa:	88 23       	and	r24, r24
    1dac:	99 f5       	brne	.+102    	; 0x1e14 <set_pos_func+0x134>
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	80 50       	subi	r24, 0x00	; 0
    1db4:	92 40       	sbci	r25, 0x02	; 2
    1db6:	71 f5       	brne	.+92     	; 0x1e14 <set_pos_func+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dba:	80 93 a5 20 	sts	0x20A5, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    1dbe:	88 89       	ldd	r24, Y+16	; 0x10
    1dc0:	80 93 a6 20 	sts	0x20A6, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    1dc4:	89 89       	ldd	r24, Y+17	; 0x11
    1dc6:	80 93 a7 20 	sts	0x20A7, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    1dca:	8a 89       	ldd	r24, Y+18	; 0x12
    1dcc:	80 93 a8 20 	sts	0x20A8, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    1dd0:	10 93 f4 24 	sts	0x24F4, r17
    1dd4:	10 92 f5 24 	sts	0x24F5, r1
                    
                    Stop = 1;
    1dd8:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    1ddc:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1de0:	80 91 f3 24 	lds	r24, 0x24F3
    1de4:	88 23       	and	r24, r24
    1de6:	29 f5       	brne	.+74     	; 0x1e32 <set_pos_func+0x152>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <set_pos_func+0x10a>
    1dea:	0f 92       	push	r0
    1dec:	ed b7       	in	r30, 0x3d	; 61
    1dee:	fe b7       	in	r31, 0x3e	; 62
    1df0:	31 96       	adiw	r30, 0x01	; 1
    1df2:	8a e0       	ldi	r24, 0x0A	; 10
    1df4:	95 e0       	ldi	r25, 0x05	; 5
    1df6:	ad b7       	in	r26, 0x3d	; 61
    1df8:	be b7       	in	r27, 0x3e	; 62
    1dfa:	11 96       	adiw	r26, 0x01	; 1
    1dfc:	8d 93       	st	X+, r24
    1dfe:	9c 93       	st	X, r25
    1e00:	12 97       	sbiw	r26, 0x02	; 2
    1e02:	12 83       	std	Z+2, r17	; 0x02
    1e04:	13 82       	std	Z+3, r1	; 0x03
    1e06:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <set_pos_func+0x152>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else {
                    if (quiet_mode_on == 0)
    1e14:	80 91 f3 24 	lds	r24, 0x24F3
    1e18:	88 23       	and	r24, r24
    1e1a:	59 f4       	brne	.+22     	; 0x1e32 <set_pos_func+0x152>
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    1e1c:	8d ee       	ldi	r24, 0xED	; 237
    1e1e:	94 e0       	ldi	r25, 0x04	; 4
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <set_pos_func+0x14e>
                }
            } else {
                if (quiet_mode_on == 0)
    1e22:	80 91 f3 24 	lds	r24, 0x24F3
    1e26:	88 23       	and	r24, r24
    1e28:	21 f4       	brne	.+8      	; 0x1e32 <set_pos_func+0x152>
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    1e2a:	8c ec       	ldi	r24, 0xCC	; 204
    1e2c:	94 e0       	ldi	r25, 0x04	; 4
    1e2e:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            }
            function_counter_x = 0;
    1e32:	10 92 e7 24 	sts	0x24E7, r1
    1e36:	10 92 e8 24 	sts	0x24E8, r1
            func_global_counter_x = 0;
    1e3a:	10 92 eb 24 	sts	0x24EB, r1
    1e3e:	10 92 ec 24 	sts	0x24EC, r1
    1e42:	10 92 ed 24 	sts	0x24ED, r1
    1e46:	10 92 ee 24 	sts	0x24EE, r1
    1e4a:	75 c0       	rjmp	.+234    	; 0x1f36 <set_pos_func+0x256>
            break;
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    1e4c:	88 ee       	ldi	r24, 0xE8	; 232
    1e4e:	96 e2       	ldi	r25, 0x26	; 38
    1e50:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1e54:	88 ee       	ldi	r24, 0xE8	; 232
    1e56:	96 e2       	ldi	r25, 0x26	; 38
    1e58:	be 01       	movw	r22, r28
    1e5a:	6d 5f       	subi	r22, 0xFD	; 253
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
            if (res == FR_OK) {
    1e64:	88 23       	and	r24, r24
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <set_pos_func+0x18a>
    1e68:	49 c0       	rjmp	.+146    	; 0x1efc <set_pos_func+0x21c>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    1e6a:	88 ee       	ldi	r24, 0xE8	; 232
    1e6c:	96 e2       	ldi	r25, 0x26	; 38
    1e6e:	be 01       	movw	r22, r28
    1e70:	61 5f       	subi	r22, 0xF1	; 241
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	52 e0       	ldi	r21, 0x02	; 2
    1e78:	9e 01       	movw	r18, r28
    1e7a:	2f 5f       	subi	r18, 0xFF	; 255
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1e82:	88 23       	and	r24, r24
    1e84:	a1 f5       	brne	.+104    	; 0x1eee <set_pos_func+0x20e>
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	80 50       	subi	r24, 0x00	; 0
    1e8c:	92 40       	sbci	r25, 0x02	; 2
    1e8e:	79 f5       	brne	.+94     	; 0x1eee <set_pos_func+0x20e>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    1e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e92:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    1e96:	88 89       	ldd	r24, Y+16	; 0x10
    1e98:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    1e9c:	89 89       	ldd	r24, Y+17	; 0x11
    1e9e:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    1ea2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ea4:	80 93 ac 20 	sts	0x20AC, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_y[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_y[func_name_len] = '\0';
                    
                    func_ID_Y = func_id;
    1ea8:	10 93 f6 24 	sts	0x24F6, r17
    1eac:	10 92 f7 24 	sts	0x24F7, r1
                    
                    Stop = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1eb6:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1eba:	80 91 f3 24 	lds	r24, 0x24F3
    1ebe:	88 23       	and	r24, r24
    1ec0:	29 f5       	brne	.+74     	; 0x1f0c <set_pos_func+0x22c>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <set_pos_func+0x1e4>
    1ec4:	0f 92       	push	r0
    1ec6:	ed b7       	in	r30, 0x3d	; 61
    1ec8:	fe b7       	in	r31, 0x3e	; 62
    1eca:	31 96       	adiw	r30, 0x01	; 1
    1ecc:	88 ea       	ldi	r24, 0xA8	; 168
    1ece:	94 e0       	ldi	r25, 0x04	; 4
    1ed0:	ad b7       	in	r26, 0x3d	; 61
    1ed2:	be b7       	in	r27, 0x3e	; 62
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	8d 93       	st	X+, r24
    1ed8:	9c 93       	st	X, r25
    1eda:	12 97       	sbiw	r26, 0x02	; 2
    1edc:	12 83       	std	Z+2, r17	; 0x02
    1ede:	13 82       	std	Z+3, r1	; 0x03
    1ee0:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <set_pos_func+0x22c>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                    if (quiet_mode_on == 0)
    1eee:	80 91 f3 24 	lds	r24, 0x24F3
    1ef2:	88 23       	and	r24, r24
    1ef4:	59 f4       	brne	.+22     	; 0x1f0c <set_pos_func+0x22c>
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    1ef6:	8a e8       	ldi	r24, 0x8A	; 138
    1ef8:	94 e0       	ldi	r25, 0x04	; 4
    1efa:	06 c0       	rjmp	.+12     	; 0x1f08 <set_pos_func+0x228>
                }
            } else {
                if (quiet_mode_on == 0)
    1efc:	80 91 f3 24 	lds	r24, 0x24F3
    1f00:	88 23       	and	r24, r24
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <set_pos_func+0x22c>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    1f04:	89 e6       	ldi	r24, 0x69	; 105
    1f06:	94 e0       	ldi	r25, 0x04	; 4
    1f08:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            }
            function_counter_y = 0;
    1f0c:	10 92 e9 24 	sts	0x24E9, r1
    1f10:	10 92 ea 24 	sts	0x24EA, r1
            func_global_counter_y = 0;
    1f14:	10 92 ef 24 	sts	0x24EF, r1
    1f18:	10 92 f0 24 	sts	0x24F0, r1
    1f1c:	10 92 f1 24 	sts	0x24F1, r1
    1f20:	10 92 f2 24 	sts	0x24F2, r1
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <set_pos_func+0x256>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    1f26:	80 91 f3 24 	lds	r24, 0x24F3
    1f2a:	88 23       	and	r24, r24
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <set_pos_func+0x256>
                xputs(PSTR("Error input for function channel.\n"));
    1f2e:	86 e4       	ldi	r24, 0x46	; 70
    1f30:	94 e0       	ldi	r25, 0x04	; 4
    1f32:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            break;
    }
}
    1f36:	c2 5f       	subi	r28, 0xF2	; 242
    1f38:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3a:	e4 e0       	ldi	r30, 0x04	; 4
    1f3c:	0c 94 75 58 	jmp	0xb0ea	; 0xb0ea <__epilogue_restores__+0x1c>

00001f40 <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	16 2f       	mov	r17, r22
    1f48:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    1f4a:	88 23       	and	r24, r24
    1f4c:	49 f5       	brne	.+82     	; 0x1fa0 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    1f4e:	80 91 82 26 	lds	r24, 0x2682
    1f52:	88 23       	and	r24, r24
    1f54:	e1 f7       	brne	.-8      	; 0x1f4e <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    1f56:	85 e7       	ldi	r24, 0x75	; 117
    1f58:	96 e2       	ldi	r25, 0x26	; 38
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	ae 01       	movw	r20, r28
    1f5e:	21 2f       	mov	r18, r17
    1f60:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    1f64:	80 91 7f 29 	lds	r24, 0x297F
    1f68:	88 23       	and	r24, r24
    1f6a:	e1 f7       	brne	.-8      	; 0x1f64 <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    1f6c:	82 e7       	ldi	r24, 0x72	; 114
    1f6e:	99 e2       	ldi	r25, 0x29	; 41
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	ae 01       	movw	r20, r28
    1f74:	21 2f       	mov	r18, r17
    1f76:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    1f7a:	80 91 15 27 	lds	r24, 0x2715
    1f7e:	88 23       	and	r24, r24
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    1f82:	88 e0       	ldi	r24, 0x08	; 8
    1f84:	97 e2       	ldi	r25, 0x27	; 39
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	ae 01       	movw	r20, r28
    1f8a:	21 2f       	mov	r18, r17
    1f8c:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    1f90:	80 91 a4 25 	lds	r24, 0x25A4
    1f94:	88 23       	and	r24, r24
    1f96:	e1 f7       	brne	.-8      	; 0x1f90 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    1f98:	87 e9       	ldi	r24, 0x97	; 151
    1f9a:	95 e2       	ldi	r25, 0x25	; 37
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	22 c0       	rjmp	.+68     	; 0x1fe4 <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    1fa0:	e8 2f       	mov	r30, r24
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	df 01       	movw	r26, r30
    1fa6:	a8 5e       	subi	r26, 0xE8	; 232
    1fa8:	b8 4d       	sbci	r27, 0xD8	; 216
    1faa:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    1fac:	e1 53       	subi	r30, 0x31	; 49
    1fae:	f7 4d       	sbci	r31, 0xD7	; 215
    1fb0:	60 81       	ld	r22, Z
        if (ch != 0){
    1fb2:	aa 23       	and	r26, r26
    1fb4:	d9 f0       	breq	.+54     	; 0x1fec <i2cMasterSend+0xac>
            
            switch (ch) {
    1fb6:	a3 30       	cpi	r26, 0x03	; 3
    1fb8:	51 f0       	breq	.+20     	; 0x1fce <i2cMasterSend+0x8e>
    1fba:	a4 30       	cpi	r26, 0x04	; 4
    1fbc:	59 f0       	breq	.+22     	; 0x1fd4 <i2cMasterSend+0x94>
    1fbe:	a2 30       	cpi	r26, 0x02	; 2
    1fc0:	19 f4       	brne	.+6      	; 0x1fc8 <i2cMasterSend+0x88>
    1fc2:	a2 e7       	ldi	r26, 0x72	; 114
    1fc4:	b9 e2       	ldi	r27, 0x29	; 41
    1fc6:	08 c0       	rjmp	.+16     	; 0x1fd8 <i2cMasterSend+0x98>
    1fc8:	a5 e7       	ldi	r26, 0x75	; 117
    1fca:	b6 e2       	ldi	r27, 0x26	; 38
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <i2cMasterSend+0x98>
    1fce:	a8 e0       	ldi	r26, 0x08	; 8
    1fd0:	b7 e2       	ldi	r27, 0x27	; 39
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    1fd4:	a7 e9       	ldi	r26, 0x97	; 151
    1fd6:	b5 e2       	ldi	r27, 0x25	; 37
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    1fd8:	1d 96       	adiw	r26, 0x0d	; 13
    1fda:	8c 91       	ld	r24, X
    1fdc:	1d 97       	sbiw	r26, 0x0d	; 13
    1fde:	88 23       	and	r24, r24
    1fe0:	d9 f7       	brne	.-10     	; 0x1fd8 <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	ae 01       	movw	r20, r28
    1fe6:	21 2f       	mov	r18, r17
    1fe8:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
        }
    }
}
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	08 95       	ret

00001ff4 <handle_message_length_4>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_4(uint8_t *msg_buffer) {
    1ff4:	fc 01       	movw	r30, r24
    int16_t setVal;
	
    switch(msg_buffer[0]) {
    1ff6:	80 81       	ld	r24, Z
    1ff8:	80 31       	cpi	r24, 0x10	; 16
    1ffa:	51 f4       	brne	.+20     	; 0x2010 <handle_message_length_4+0x1c>
        case 0x10: //set a value ranging from 0-2047 to one of the ADC1~4. 
		    setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    1ffc:	81 81       	ldd	r24, Z+1	; 0x01
    1ffe:	73 81       	ldd	r23, Z+3	; 0x03
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	92 81       	ldd	r25, Z+2	; 0x02
    2004:	69 0f       	add	r22, r25
    2006:	71 1d       	adc	r23, r1
    2008:	81 50       	subi	r24, 0x01	; 1
    200a:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    200e:	08 95       	ret
            break;
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	68 e0       	ldi	r22, 0x08	; 8
    2014:	49 ed       	ldi	r20, 0xD9	; 217
    2016:	50 e2       	ldi	r21, 0x20	; 32
    2018:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    201c:	08 95       	ret

0000201e <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    201e:	a2 e0       	ldi	r26, 0x02	; 2
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e1       	ldi	r30, 0x15	; 21
    2024:	f0 e1       	ldi	r31, 0x10	; 16
    2026:	0c 94 58 58 	jmp	0xb0b0	; 0xb0b0 <__prologue_saves__+0x1a>
    202a:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    202c:	fc 01       	movw	r30, r24
    202e:	80 81       	ld	r24, Z
    2030:	80 32       	cpi	r24, 0x20	; 32
    2032:	09 f4       	brne	.+2      	; 0x2036 <handle_message_length_3+0x18>
    2034:	a5 c0       	rjmp	.+330    	; 0x2180 <handle_message_length_3+0x162>
    2036:	81 32       	cpi	r24, 0x21	; 33
    2038:	38 f4       	brcc	.+14     	; 0x2048 <handle_message_length_3+0x2a>
    203a:	80 31       	cpi	r24, 0x10	; 16
    203c:	09 f4       	brne	.+2      	; 0x2040 <handle_message_length_3+0x22>
    203e:	8f c0       	rjmp	.+286    	; 0x215e <handle_message_length_3+0x140>
    2040:	85 31       	cpi	r24, 0x15	; 21
    2042:	09 f0       	breq	.+2      	; 0x2046 <handle_message_length_3+0x28>
    2044:	f0 c0       	rjmp	.+480    	; 0x2226 <handle_message_length_3+0x208>
    2046:	93 c0       	rjmp	.+294    	; 0x216e <handle_message_length_3+0x150>
    2048:	80 33       	cpi	r24, 0x30	; 48
    204a:	09 f4       	brne	.+2      	; 0x204e <handle_message_length_3+0x30>
    204c:	c3 c0       	rjmp	.+390    	; 0x21d4 <handle_message_length_3+0x1b6>
    204e:	8f 3f       	cpi	r24, 0xFF	; 255
    2050:	21 f0       	breq	.+8      	; 0x205a <handle_message_length_3+0x3c>
    2052:	85 32       	cpi	r24, 0x25	; 37
    2054:	09 f0       	breq	.+2      	; 0x2058 <handle_message_length_3+0x3a>
    2056:	e7 c0       	rjmp	.+462    	; 0x2226 <handle_message_length_3+0x208>
    2058:	a0 c0       	rjmp	.+320    	; 0x219a <handle_message_length_3+0x17c>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    205a:	f8 01       	movw	r30, r16
    205c:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    205e:	80 91 82 26 	lds	r24, 0x2682
    2062:	88 23       	and	r24, r24
    2064:	e1 f7       	brne	.-8      	; 0x205e <handle_message_length_3+0x40>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    2066:	85 e7       	ldi	r24, 0x75	; 117
    2068:	96 e2       	ldi	r25, 0x26	; 38
    206a:	6f 2d       	mov	r22, r15
    206c:	49 ef       	ldi	r20, 0xF9	; 249
    206e:	50 e2       	ldi	r21, 0x20	; 32
    2070:	22 e0       	ldi	r18, 0x02	; 2
    2072:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    2076:	80 91 7f 29 	lds	r24, 0x297F
    207a:	88 23       	and	r24, r24
    207c:	e1 f7       	brne	.-8      	; 0x2076 <handle_message_length_3+0x58>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    207e:	82 e7       	ldi	r24, 0x72	; 114
    2080:	99 e2       	ldi	r25, 0x29	; 41
    2082:	6f 2d       	mov	r22, r15
    2084:	49 ef       	ldi	r20, 0xF9	; 249
    2086:	50 e2       	ldi	r21, 0x20	; 32
    2088:	22 e0       	ldi	r18, 0x02	; 2
    208a:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    208e:	80 91 15 27 	lds	r24, 0x2715
    2092:	88 23       	and	r24, r24
    2094:	e1 f7       	brne	.-8      	; 0x208e <handle_message_length_3+0x70>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	97 e2       	ldi	r25, 0x27	; 39
    209a:	6f 2d       	mov	r22, r15
    209c:	49 ef       	ldi	r20, 0xF9	; 249
    209e:	50 e2       	ldi	r21, 0x20	; 32
    20a0:	22 e0       	ldi	r18, 0x02	; 2
    20a2:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    20a6:	80 91 a4 25 	lds	r24, 0x25A4
    20aa:	88 23       	and	r24, r24
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <handle_message_length_3+0x88>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    20ae:	87 e9       	ldi	r24, 0x97	; 151
    20b0:	95 e2       	ldi	r25, 0x25	; 37
    20b2:	6f 2d       	mov	r22, r15
    20b4:	49 ef       	ldi	r20, 0xF9	; 249
    20b6:	50 e2       	ldi	r21, 0x20	; 32
    20b8:	22 e0       	ldi	r18, 0x02	; 2
    20ba:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
    20be:	80 ef       	ldi	r24, 0xF0	; 240
    20c0:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c2:	20 e2       	ldi	r18, 0x20	; 32
    20c4:	33 e0       	ldi	r19, 0x03	; 3
    20c6:	f9 01       	movw	r30, r18
    20c8:	31 97       	sbiw	r30, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <handle_message_length_3+0xaa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	d9 f7       	brne	.-10     	; 0x20c6 <handle_message_length_3+0xa8>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    20d0:	8f ef       	ldi	r24, 0xFF	; 255
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	f8 01       	movw	r30, r16
    20d6:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    20d8:	80 91 82 26 	lds	r24, 0x2682
    20dc:	88 23       	and	r24, r24
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <handle_message_length_3+0xba>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    20e0:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    20e2:	85 e7       	ldi	r24, 0x75	; 117
    20e4:	96 e2       	ldi	r25, 0x26	; 38
    20e6:	6f 2d       	mov	r22, r15
    20e8:	ae 01       	movw	r20, r28
    20ea:	4f 5f       	subi	r20, 0xFF	; 255
    20ec:	5f 4f       	sbci	r21, 0xFF	; 255
    20ee:	22 e0       	ldi	r18, 0x02	; 2
    20f0:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    20f4:	80 91 7f 29 	lds	r24, 0x297F
    20f8:	88 23       	and	r24, r24
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <handle_message_length_3+0xd6>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    20fc:	82 e7       	ldi	r24, 0x72	; 114
    20fe:	99 e2       	ldi	r25, 0x29	; 41
    2100:	6f 2d       	mov	r22, r15
    2102:	ae 01       	movw	r20, r28
    2104:	4f 5f       	subi	r20, 0xFF	; 255
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    2108:	22 e0       	ldi	r18, 0x02	; 2
    210a:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    210e:	80 91 15 27 	lds	r24, 0x2715
    2112:	88 23       	and	r24, r24
    2114:	e1 f7       	brne	.-8      	; 0x210e <handle_message_length_3+0xf0>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    2116:	88 e0       	ldi	r24, 0x08	; 8
    2118:	97 e2       	ldi	r25, 0x27	; 39
    211a:	6f 2d       	mov	r22, r15
    211c:	ae 01       	movw	r20, r28
    211e:	4f 5f       	subi	r20, 0xFF	; 255
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	22 e0       	ldi	r18, 0x02	; 2
    2124:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    2128:	80 91 a4 25 	lds	r24, 0x25A4
    212c:	88 23       	and	r24, r24
    212e:	e1 f7       	brne	.-8      	; 0x2128 <handle_message_length_3+0x10a>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    2130:	87 e9       	ldi	r24, 0x97	; 151
    2132:	95 e2       	ldi	r25, 0x25	; 37
    2134:	6f 2d       	mov	r22, r15
    2136:	ae 01       	movw	r20, r28
    2138:	4f 5f       	subi	r20, 0xFF	; 255
    213a:	5f 4f       	sbci	r21, 0xFF	; 255
    213c:	22 e0       	ldi	r18, 0x02	; 2
    213e:	0e 94 4f 30 	call	0x609e	; 0x609e <TWI_MasterWrite>
    2142:	84 ef       	ldi	r24, 0xF4	; 244
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	20 e2       	ldi	r18, 0x20	; 32
    2148:	33 e0       	ldi	r19, 0x03	; 3
    214a:	f9 01       	movw	r30, r18
    214c:	31 97       	sbiw	r30, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <handle_message_length_3+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	d9 f7       	brne	.-10     	; 0x214a <handle_message_length_3+0x12c>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	62 e0       	ldi	r22, 0x02	; 2
    2158:	49 ef       	ldi	r20, 0xF9	; 249
    215a:	50 e2       	ldi	r21, 0x20	; 32
    215c:	68 c0       	rjmp	.+208    	; 0x222e <handle_message_length_3+0x210>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    215e:	f8 01       	movw	r30, r16
    2160:	81 81       	ldd	r24, Z+1	; 0x01
    2162:	80 93 99 27 	sts	0x2799, r24
            y_mode = msg_buffer[2];
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	80 93 e3 27 	sts	0x27E3, r24
    216c:	62 c0       	rjmp	.+196    	; 0x2232 <handle_message_length_3+0x214>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    216e:	f8 01       	movw	r30, r16
    2170:	62 81       	ldd	r22, Z+2	; 0x02
    2172:	66 23       	and	r22, r22
    2174:	49 f0       	breq	.+18     	; 0x2188 <handle_message_length_3+0x16a>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    2176:	f8 01       	movw	r30, r16
    2178:	81 81       	ldd	r24, Z+1	; 0x01
    217a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <set_pos_func>
    217e:	59 c0       	rjmp	.+178    	; 0x2232 <handle_message_length_3+0x214>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    2180:	f8 01       	movw	r30, r16
    2182:	62 81       	ldd	r22, Z+2	; 0x02
    2184:	66 23       	and	r22, r22
    2186:	21 f4       	brne	.+8      	; 0x2190 <handle_message_length_3+0x172>
                set_default_func(msg_buffer[1]);}
    2188:	81 81       	ldd	r24, Z+1	; 0x01
    218a:	0e 94 06 09 	call	0x120c	; 0x120c <set_default_func>
    218e:	51 c0       	rjmp	.+162    	; 0x2232 <handle_message_length_3+0x214>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    2190:	f8 01       	movw	r30, r16
    2192:	81 81       	ldd	r24, Z+1	; 0x01
    2194:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_vel_func>
    2198:	4c c0       	rjmp	.+152    	; 0x2232 <handle_message_length_3+0x214>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    219a:	f8 01       	movw	r30, r16
    219c:	92 81       	ldd	r25, Z+2	; 0x02
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	21 81       	ldd	r18, Z+1	; 0x01
    21a2:	8c 01       	movw	r16, r24
    21a4:	02 0f       	add	r16, r18
    21a6:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    21a8:	98 01       	movw	r18, r16
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	62 e1       	ldi	r22, 0x12	; 18
    21b0:	7a e7       	ldi	r23, 0x7A	; 122
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 30 58 	call	0xb060	; 0xb060 <__divmodsi4>
    21ba:	20 93 9f 20 	sts	0x209F, r18
    21be:	30 93 a0 20 	sts	0x20A0, r19
            if (quiet_mode_on == 0)
    21c2:	80 91 f3 24 	lds	r24, 0x24F3
    21c6:	88 23       	and	r24, r24
    21c8:	a1 f5       	brne	.+104    	; 0x2232 <handle_message_length_3+0x214>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <handle_message_length_3+0x1ae>
    21cc:	0f 92       	push	r0
    21ce:	8c e1       	ldi	r24, 0x1C	; 28
    21d0:	98 e0       	ldi	r25, 0x08	; 8
    21d2:	1c c0       	rjmp	.+56     	; 0x220c <handle_message_length_3+0x1ee>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    21d4:	f8 01       	movw	r30, r16
    21d6:	92 81       	ldd	r25, Z+2	; 0x02
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	21 81       	ldd	r18, Z+1	; 0x01
    21dc:	8c 01       	movw	r16, r24
    21de:	02 0f       	add	r16, r18
    21e0:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    21e2:	98 01       	movw	r18, r16
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	62 e1       	ldi	r22, 0x12	; 18
    21ea:	7a e7       	ldi	r23, 0x7A	; 122
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 30 58 	call	0xb060	; 0xb060 <__divmodsi4>
    21f4:	20 93 a1 20 	sts	0x20A1, r18
    21f8:	30 93 a2 20 	sts	0x20A2, r19
            if (quiet_mode_on == 0)
    21fc:	80 91 f3 24 	lds	r24, 0x24F3
    2200:	88 23       	and	r24, r24
    2202:	b9 f4       	brne	.+46     	; 0x2232 <handle_message_length_3+0x214>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    2204:	00 d0       	rcall	.+0      	; 0x2206 <handle_message_length_3+0x1e8>
    2206:	0f 92       	push	r0
    2208:	89 ef       	ldi	r24, 0xF9	; 249
    220a:	97 e0       	ldi	r25, 0x07	; 7
    220c:	ed b7       	in	r30, 0x3d	; 61
    220e:	fe b7       	in	r31, 0x3e	; 62
    2210:	81 83       	std	Z+1, r24	; 0x01
    2212:	92 83       	std	Z+2, r25	; 0x02
    2214:	03 83       	std	Z+3, r16	; 0x03
    2216:	14 83       	std	Z+4, r17	; 0x04
    2218:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	06 c0       	rjmp	.+12     	; 0x2232 <handle_message_length_3+0x214>
            break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	68 e0       	ldi	r22, 0x08	; 8
    222a:	41 ed       	ldi	r20, 0xD1	; 209
    222c:	50 e2       	ldi	r21, 0x20	; 32
    222e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    }
}
    2232:	22 96       	adiw	r28, 0x02	; 2
    2234:	e5 e0       	ldi	r30, 0x05	; 5
    2236:	0c 94 74 58 	jmp	0xb0e8	; 0xb0e8 <__epilogue_restores__+0x1a>

0000223a <set_hwConfig>:
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    223a:	a2 e8       	ldi	r26, 0x82	; 130
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e2       	ldi	r30, 0x23	; 35
    2240:	f1 e1       	ldi	r31, 0x11	; 17
    2242:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    2246:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    2248:	8a 30       	cpi	r24, 0x0A	; 10
    224a:	80 f4       	brcc	.+32     	; 0x226c <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    224c:	00 d0       	rcall	.+0      	; 0x224e <set_hwConfig+0x14>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <set_hwConfig+0x16>
    2250:	ed b7       	in	r30, 0x3d	; 61
    2252:	fe b7       	in	r31, 0x3e	; 62
    2254:	31 96       	adiw	r30, 0x01	; 1
    2256:	88 ef       	ldi	r24, 0xF8	; 248
    2258:	94 e2       	ldi	r25, 0x24	; 36
    225a:	ad b7       	in	r26, 0x3d	; 61
    225c:	be b7       	in	r27, 0x3e	; 62
    225e:	11 96       	adiw	r26, 0x01	; 1
    2260:	8d 93       	st	X+, r24
    2262:	9c 93       	st	X, r25
    2264:	12 97       	sbiw	r26, 0x02	; 2
    2266:	8e e4       	ldi	r24, 0x4E	; 78
    2268:	90 e2       	ldi	r25, 0x20	; 32
    226a:	1f c0       	rjmp	.+62     	; 0x22aa <set_hwConfig+0x70>
    226c:	88 ef       	ldi	r24, 0xF8	; 248
    226e:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    2270:	24 36       	cpi	r18, 0x64	; 100
    2272:	70 f4       	brcc	.+28     	; 0x2290 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    2274:	00 d0       	rcall	.+0      	; 0x2276 <set_hwConfig+0x3c>
    2276:	00 d0       	rcall	.+0      	; 0x2278 <set_hwConfig+0x3e>
    2278:	ed b7       	in	r30, 0x3d	; 61
    227a:	fe b7       	in	r31, 0x3e	; 62
    227c:	31 96       	adiw	r30, 0x01	; 1
    227e:	ad b7       	in	r26, 0x3d	; 61
    2280:	be b7       	in	r27, 0x3e	; 62
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	8d 93       	st	X+, r24
    2286:	9c 93       	st	X, r25
    2288:	12 97       	sbiw	r26, 0x02	; 2
    228a:	8c e5       	ldi	r24, 0x5C	; 92
    228c:	90 e2       	ldi	r25, 0x20	; 32
    228e:	0d c0       	rjmp	.+26     	; 0x22aa <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    2290:	00 d0       	rcall	.+0      	; 0x2292 <set_hwConfig+0x58>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <set_hwConfig+0x5a>
    2294:	ed b7       	in	r30, 0x3d	; 61
    2296:	fe b7       	in	r31, 0x3e	; 62
    2298:	31 96       	adiw	r30, 0x01	; 1
    229a:	ad b7       	in	r26, 0x3d	; 61
    229c:	be b7       	in	r27, 0x3e	; 62
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	8d 93       	st	X+, r24
    22a2:	9c 93       	st	X, r25
    22a4:	12 97       	sbiw	r26, 0x02	; 2
    22a6:	89 e6       	ldi	r24, 0x69	; 105
    22a8:	90 e2       	ldi	r25, 0x20	; 32
    22aa:	82 83       	std	Z+2, r24	; 0x02
    22ac:	93 83       	std	Z+3, r25	; 0x03
    22ae:	24 83       	std	Z+4, r18	; 0x04
    22b0:	15 82       	std	Z+5, r1	; 0x05
    22b2:	0e 94 ab 5a 	call	0xb556	; 0xb556 <sprintf>
    22b6:	ed b7       	in	r30, 0x3d	; 61
    22b8:	fe b7       	in	r31, 0x3e	; 62
    22ba:	36 96       	adiw	r30, 0x06	; 6
    22bc:	ed bf       	out	0x3d, r30	; 61
    22be:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    22c0:	85 ee       	ldi	r24, 0xE5	; 229
    22c2:	97 e2       	ldi	r25, 0x27	; 39
    22c4:	68 ef       	ldi	r22, 0xF8	; 248
    22c6:	74 e2       	ldi	r23, 0x24	; 36
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
    if (res == FR_OK) {
    22ce:	88 23       	and	r24, r24
    22d0:	c9 f5       	brne	.+114    	; 0x2344 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	c8 2e       	mov	r12, r24
    22d6:	d1 2c       	mov	r13, r1
    22d8:	cc 0e       	add	r12, r28
    22da:	dd 1e       	adc	r13, r29
    22dc:	85 ee       	ldi	r24, 0xE5	; 229
    22de:	97 e2       	ldi	r25, 0x27	; 39
    22e0:	b6 01       	movw	r22, r12
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	9e 01       	movw	r18, r28
    22e8:	2f 5f       	subi	r18, 0xFF	; 255
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    22f0:	88 23       	and	r24, r24
    22f2:	09 f5       	brne	.+66     	; 0x2336 <set_hwConfig+0xfc>
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	80 38       	cpi	r24, 0x80	; 128
    22fa:	91 05       	cpc	r25, r1
    22fc:	e1 f4       	brne	.+56     	; 0x2336 <set_hwConfig+0xfc>
    22fe:	19 e1       	ldi	r17, 0x19	; 25
    2300:	e1 2e       	mov	r14, r17
    2302:	17 e2       	ldi	r17, 0x27	; 39
    2304:	f1 2e       	mov	r15, r17
    2306:	00 e0       	ldi	r16, 0x00	; 0
    2308:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    230a:	f6 01       	movw	r30, r12
    230c:	e0 0f       	add	r30, r16
    230e:	f1 1f       	adc	r31, r17
    2310:	60 81       	ld	r22, Z
    2312:	d7 01       	movw	r26, r14
    2314:	6d 93       	st	X+, r22
    2316:	7d 01       	movw	r14, r26
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    2318:	0f 5f       	subi	r16, 0xFF	; 255
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    231c:	c8 01       	movw	r24, r16
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	0e 94 e6 5c 	call	0xb9cc	; 0xb9cc <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2326:	00 38       	cpi	r16, 0x80	; 128
    2328:	11 05       	cpc	r17, r1
    232a:	79 f7       	brne	.-34     	; 0x230a <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 e6 5c 	call	0xb9cc	; 0xb9cc <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2336:	85 ee       	ldi	r24, 0xE5	; 229
    2338:	97 e2       	ldi	r25, 0x27	; 39
    233a:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    233e:	8d ee       	ldi	r24, 0xED	; 237
    2340:	95 e0       	ldi	r25, 0x05	; 5
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2344:	87 eb       	ldi	r24, 0xB7	; 183
    2346:	95 e0       	ldi	r25, 0x05	; 5
    2348:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    }
}
    234c:	ce 57       	subi	r28, 0x7E	; 126
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	e8 e0       	ldi	r30, 0x08	; 8
    2352:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <__epilogue_restores__+0x14>

00002356 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	0e 94 bc 21 	call	0x4378	; 0x4378 <digitalToggle>
}
    235c:	08 95       	ret

0000235e <Update_display>:
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
}

void Update_display(void) {
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    int16_t X_ADC1, X_ADC2, Y_ADC1, Y_ADC2;
    int16_t temp_ADC_val;
    
    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    236a:	80 91 99 27 	lds	r24, 0x2799
    236e:	82 30       	cpi	r24, 0x02	; 2
    2370:	09 f4       	brne	.+2      	; 0x2374 <Update_display+0x16>
    2372:	a4 c0       	rjmp	.+328    	; 0x24bc <Update_display+0x15e>
    2374:	83 30       	cpi	r24, 0x03	; 3
    2376:	30 f4       	brcc	.+12     	; 0x2384 <Update_display+0x26>
    2378:	88 23       	and	r24, r24
    237a:	59 f0       	breq	.+22     	; 0x2392 <Update_display+0x34>
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	09 f0       	breq	.+2      	; 0x2382 <Update_display+0x24>
    2380:	9b c1       	rjmp	.+822    	; 0x26b8 <Update_display+0x35a>
    2382:	32 c0       	rjmp	.+100    	; 0x23e8 <Update_display+0x8a>
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	09 f4       	brne	.+2      	; 0x238a <Update_display+0x2c>
    2388:	ff c0       	rjmp	.+510    	; 0x2588 <Update_display+0x22a>
    238a:	84 30       	cpi	r24, 0x04	; 4
    238c:	09 f0       	breq	.+2      	; 0x2390 <Update_display+0x32>
    238e:	94 c1       	rjmp	.+808    	; 0x26b8 <Update_display+0x35a>
    2390:	49 c1       	rjmp	.+658    	; 0x2624 <Update_display+0x2c6>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[function_counter_x];
    2392:	e0 91 e7 24 	lds	r30, 0x24E7
    2396:	f0 91 e8 24 	lds	r31, 0x24E8
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	e9 5f       	subi	r30, 0xF9	; 249
    23a0:	f7 4d       	sbci	r31, 0xD7	; 215
    23a2:	20 81       	ld	r18, Z
    23a4:	31 81       	ldd	r19, Z+1	; 0x01
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	20 93 84 26 	sts	0x2684, r18
    23ae:	30 93 85 26 	sts	0x2685, r19
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    23b2:	80 91 e4 27 	lds	r24, 0x27E4
    23b6:	99 27       	eor	r25, r25
    23b8:	87 fd       	sbrc	r24, 7
    23ba:	90 95       	com	r25
    23bc:	ac 01       	movw	r20, r24
    23be:	24 9f       	mul	r18, r20
    23c0:	c0 01       	movw	r24, r0
    23c2:	25 9f       	mul	r18, r21
    23c4:	90 0d       	add	r25, r0
    23c6:	34 9f       	mul	r19, r20
    23c8:	90 0d       	add	r25, r0
    23ca:	11 24       	eor	r1, r1
    23cc:	6a e0       	ldi	r22, 0x0A	; 10
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    23d4:	cb 01       	movw	r24, r22
    23d6:	20 91 96 25 	lds	r18, 0x2596
    23da:	45 e0       	ldi	r20, 0x05	; 5
    23dc:	24 02       	muls	r18, r20
    23de:	90 01       	movw	r18, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	82 0f       	add	r24, r18
    23e4:	93 1f       	adc	r25, r19
    23e6:	ca c0       	rjmp	.+404    	; 0x257c <Update_display+0x21e>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  X_ADC2 = analogRead(1)/4; // 1 volt = 102 frames/sec
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    23ee:	64 e0       	ldi	r22, 0x04	; 4
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    23f6:	16 2f       	mov	r17, r22
    23f8:	07 2f       	mov	r16, r23
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    2400:	64 e0       	ldi	r22, 0x04	; 4
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            if (X_ADC2 < 0)
                X_ADC2 = 0;
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*(X_ADC1 - X_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    2408:	21 2f       	mov	r18, r17
    240a:	30 2f       	mov	r19, r16
    240c:	c9 01       	movw	r24, r18
    240e:	ac 01       	movw	r20, r24
    2410:	97 ff       	sbrs	r25, 7
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <Update_display+0xba>
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	9b 01       	movw	r18, r22
    241a:	77 ff       	sbrs	r23, 7
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <Update_display+0xc4>
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	42 1b       	sub	r20, r18
    2424:	53 0b       	sbc	r21, r19
    2426:	44 0f       	add	r20, r20
    2428:	55 1f       	adc	r21, r21
    242a:	44 0f       	add	r20, r20
    242c:	55 1f       	adc	r21, r21
    242e:	20 91 84 26 	lds	r18, 0x2684
    2432:	30 91 85 26 	lds	r19, 0x2685
    2436:	c9 01       	movw	r24, r18
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	82 0f       	add	r24, r18
    243e:	93 1f       	adc	r25, r19
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	84 0f       	add	r24, r20
    2446:	95 1f       	adc	r25, r21
    2448:	6a e0       	ldi	r22, 0x0A	; 10
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2450:	9b 01       	movw	r18, r22
    2452:	60 93 84 26 	sts	0x2684, r22
    2456:	70 93 85 26 	sts	0x2685, r23
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    245a:	80 91 e4 27 	lds	r24, 0x27E4
    245e:	99 27       	eor	r25, r25
    2460:	87 fd       	sbrc	r24, 7
    2462:	90 95       	com	r25
    2464:	bc 01       	movw	r22, r24
    2466:	26 9f       	mul	r18, r22
    2468:	c0 01       	movw	r24, r0
    246a:	27 9f       	mul	r18, r23
    246c:	90 0d       	add	r25, r0
    246e:	36 9f       	mul	r19, r22
    2470:	90 0d       	add	r25, r0
    2472:	11 24       	eor	r1, r1
    2474:	6a e0       	ldi	r22, 0x0A	; 10
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    247c:	cb 01       	movw	r24, r22
    247e:	20 91 96 25 	lds	r18, 0x2596
    2482:	45 e0       	ldi	r20, 0x05	; 5
    2484:	24 02       	muls	r18, r20
    2486:	90 01       	movw	r18, r0
    2488:	11 24       	eor	r1, r1
    248a:	82 0f       	add	r24, r18
    248c:	93 1f       	adc	r25, r19
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2496:	9b 01       	movw	r18, r22
    2498:	7b 01       	movw	r14, r22
            
            //set a frame rate limit 256fps
            if (X_rate >256)
    249a:	71 e0       	ldi	r23, 0x01	; 1
    249c:	21 30       	cpi	r18, 0x01	; 1
    249e:	37 07       	cpc	r19, r23
    24a0:	24 f0       	brlt	.+8      	; 0x24aa <Update_display+0x14c>
    24a2:	e1 2c       	mov	r14, r1
    24a4:	a1 e0       	ldi	r26, 0x01	; 1
    24a6:	fa 2e       	mov	r15, r26
    24a8:	09 c1       	rjmp	.+530    	; 0x26bc <Update_display+0x35e>
                X_rate = 256;
            else if (X_rate < -256)
    24aa:	8f ef       	ldi	r24, 0xFF	; 255
    24ac:	20 30       	cpi	r18, 0x00	; 0
    24ae:	38 07       	cpc	r19, r24
    24b0:	0c f0       	brlt	.+2      	; 0x24b4 <Update_display+0x156>
    24b2:	04 c1       	rjmp	.+520    	; 0x26bc <Update_display+0x35e>
    24b4:	e1 2c       	mov	r14, r1
    24b6:	ff ef       	ldi	r31, 0xFF	; 255
    24b8:	ff 2e       	mov	r15, r31
    24ba:	00 c1       	rjmp	.+512    	; 0x26bc <Update_display+0x35e>
                X_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4;  X_ADC2 = analogRead(1)/4; // 1 volt = 102
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    24c2:	64 e0       	ldi	r22, 0x04	; 4
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    24ca:	16 2f       	mov	r17, r22
    24cc:	07 2f       	mov	r16, r23
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    24d4:	64 e0       	ldi	r22, 0x04	; 4
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            if (X_ADC2 < 0)
                X_ADC2 = 0;
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*(X_ADC1 - X_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    24dc:	21 2f       	mov	r18, r17
    24de:	30 2f       	mov	r19, r16
    24e0:	c9 01       	movw	r24, r18
    24e2:	ac 01       	movw	r20, r24
    24e4:	97 ff       	sbrs	r25, 7
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <Update_display+0x18e>
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	9b 01       	movw	r18, r22
    24ee:	77 ff       	sbrs	r23, 7
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <Update_display+0x198>
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	42 1b       	sub	r20, r18
    24f8:	53 0b       	sbc	r21, r19
    24fa:	44 0f       	add	r20, r20
    24fc:	55 1f       	adc	r21, r21
    24fe:	44 0f       	add	r20, r20
    2500:	55 1f       	adc	r21, r21
    2502:	20 91 84 26 	lds	r18, 0x2684
    2506:	30 91 85 26 	lds	r19, 0x2685
    250a:	c9 01       	movw	r24, r18
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	84 0f       	add	r24, r20
    251a:	95 1f       	adc	r25, r21
    251c:	6a e0       	ldi	r22, 0x0A	; 10
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2524:	60 93 84 26 	sts	0x2684, r22
    2528:	70 93 85 26 	sts	0x2685, r23
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[function_counter_x] + 5*bias_x)/2;
    252c:	e0 91 e7 24 	lds	r30, 0x24E7
    2530:	f0 91 e8 24 	lds	r31, 0x24E8
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	e9 5f       	subi	r30, 0xF9	; 249
    253a:	f7 4d       	sbci	r31, 0xD7	; 215
    253c:	20 81       	ld	r18, Z
    253e:	31 81       	ldd	r19, Z+1	; 0x01
    2540:	22 0f       	add	r18, r18
    2542:	33 1f       	adc	r19, r19
    2544:	80 91 96 25 	lds	r24, 0x2596
    2548:	45 e0       	ldi	r20, 0x05	; 5
    254a:	84 02       	muls	r24, r20
    254c:	c0 01       	movw	r24, r0
    254e:	11 24       	eor	r1, r1
    2550:	28 0f       	add	r18, r24
    2552:	39 1f       	adc	r19, r25
    2554:	80 91 e4 27 	lds	r24, 0x27E4
    2558:	99 27       	eor	r25, r25
    255a:	87 fd       	sbrc	r24, 7
    255c:	90 95       	com	r25
    255e:	ac 01       	movw	r20, r24
    2560:	64 9f       	mul	r22, r20
    2562:	c0 01       	movw	r24, r0
    2564:	65 9f       	mul	r22, r21
    2566:	90 0d       	add	r25, r0
    2568:	74 9f       	mul	r23, r20
    256a:	90 0d       	add	r25, r0
    256c:	11 24       	eor	r1, r1
    256e:	6a e0       	ldi	r22, 0x0A	; 10
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2576:	c9 01       	movw	r24, r18
    2578:	86 0f       	add	r24, r22
    257a:	97 1f       	adc	r25, r23
    257c:	62 e0       	ldi	r22, 0x02	; 2
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2584:	7b 01       	movw	r14, r22
    2586:	9a c0       	rjmp	.+308    	; 0x26bc <Update_display+0x35e>
            break;
        case 3: // POS mode, use CH4 to set the frame position (pos ctrl, not vel ctrl)
            X_ADC1 = analogRead(4)/2;  //used to use CH0, changed this so no need to change connections
    2588:	84 e0       	ldi	r24, 0x04	; 4
    258a:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    258e:	62 e0       	ldi	r22, 0x02	; 2
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
            // set to 0 if negative to be compatibel with old code
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            index_x = X_ADC1/gain_x + bias_x;
    2596:	cb 01       	movw	r24, r22
    2598:	77 ff       	sbrs	r23, 7
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <Update_display+0x242>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	60 91 e4 27 	lds	r22, 0x27E4
    25a4:	77 27       	eor	r23, r23
    25a6:	67 fd       	sbrc	r22, 7
    25a8:	70 95       	com	r23
    25aa:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    25ae:	80 91 96 25 	lds	r24, 0x2596
    25b2:	99 27       	eor	r25, r25
    25b4:	87 fd       	sbrc	r24, 7
    25b6:	90 95       	com	r25
    25b8:	86 0f       	add	r24, r22
    25ba:	97 1f       	adc	r25, r23
    25bc:	80 93 9b 27 	sts	0x279B, r24
    25c0:	90 93 9c 27 	sts	0x279C, r25
            if (index_x >= x_num)  {index_x = x_num - 1;} //check if too big
    25c4:	80 91 9b 27 	lds	r24, 0x279B
    25c8:	90 91 9c 27 	lds	r25, 0x279C
    25cc:	40 91 05 28 	lds	r20, 0x2805
    25d0:	50 91 06 28 	lds	r21, 0x2806
    25d4:	84 17       	cp	r24, r20
    25d6:	95 07       	cpc	r25, r21
    25d8:	40 f0       	brcs	.+16     	; 0x25ea <Update_display+0x28c>
    25da:	41 50       	subi	r20, 0x01	; 1
    25dc:	50 40       	sbci	r21, 0x00	; 0
    25de:	40 93 9b 27 	sts	0x279B, r20
    25e2:	50 93 9c 27 	sts	0x279C, r21
    25e6:	4f 5f       	subi	r20, 0xFF	; 255
    25e8:	5f 4f       	sbci	r21, 0xFF	; 255
            if (index_x <= 0)  {index_x = 0;} //or too small
    25ea:	80 91 9b 27 	lds	r24, 0x279B
    25ee:	90 91 9c 27 	lds	r25, 0x279C
    25f2:	89 2b       	or	r24, r25
    25f4:	21 f4       	brne	.+8      	; 0x25fe <Update_display+0x2a0>
    25f6:	10 92 9b 27 	sts	0x279B, r1
    25fa:	10 92 9c 27 	sts	0x279C, r1
            frame_num = index_y*x_num + index_x;
    25fe:	80 91 50 29 	lds	r24, 0x2950
    2602:	90 91 51 29 	lds	r25, 0x2951
    2606:	20 91 9b 27 	lds	r18, 0x279B
    260a:	30 91 9c 27 	lds	r19, 0x279C
    260e:	bc 01       	movw	r22, r24
    2610:	64 9f       	mul	r22, r20
    2612:	c0 01       	movw	r24, r0
    2614:	65 9f       	mul	r22, r21
    2616:	90 0d       	add	r25, r0
    2618:	74 9f       	mul	r23, r20
    261a:	90 0d       	add	r25, r0
    261c:	11 24       	eor	r1, r1
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	46 c0       	rjmp	.+140    	; 0x26b0 <Update_display+0x352>
            X_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (X_pos_index + function_X[function_counter_x]);
    2624:	e0 91 e7 24 	lds	r30, 0x24E7
    2628:	f0 91 e8 24 	lds	r31, 0x24E8
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	e9 5f       	subi	r30, 0xF9	; 249
    2632:	f7 4d       	sbci	r31, 0xD7	; 215
    2634:	01 90       	ld	r0, Z+
    2636:	f0 81       	ld	r31, Z
    2638:	e0 2d       	mov	r30, r0
    263a:	80 91 e6 26 	lds	r24, 0x26E6
    263e:	90 91 e7 26 	lds	r25, 0x26E7
    2642:	e8 0f       	add	r30, r24
    2644:	f9 1f       	adc	r31, r25
    2646:	20 91 05 28 	lds	r18, 0x2805
    264a:	30 91 06 28 	lds	r19, 0x2806
            if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    264e:	f7 fd       	sbrc	r31, 7
    2650:	09 c0       	rjmp	.+18     	; 0x2664 <Update_display+0x306>
    2652:	cf 01       	movw	r24, r30
    2654:	b9 01       	movw	r22, r18
    2656:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    265a:	80 93 9b 27 	sts	0x279B, r24
    265e:	90 93 9c 27 	sts	0x279C, r25
    2662:	10 c0       	rjmp	.+32     	; 0x2684 <Update_display+0x326>
            if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    2664:	88 27       	eor	r24, r24
    2666:	99 27       	eor	r25, r25
    2668:	8e 1b       	sub	r24, r30
    266a:	9f 0b       	sbc	r25, r31
    266c:	b9 01       	movw	r22, r18
    266e:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    2672:	21 50       	subi	r18, 0x01	; 1
    2674:	30 40       	sbci	r19, 0x00	; 0
    2676:	a9 01       	movw	r20, r18
    2678:	48 1b       	sub	r20, r24
    267a:	59 0b       	sbc	r21, r25
    267c:	40 93 9b 27 	sts	0x279B, r20
    2680:	50 93 9c 27 	sts	0x279C, r21
            frame_num = index_y*x_num + index_x;
    2684:	20 91 50 29 	lds	r18, 0x2950
    2688:	30 91 51 29 	lds	r19, 0x2951
    268c:	40 91 9b 27 	lds	r20, 0x279B
    2690:	50 91 9c 27 	lds	r21, 0x279C
    2694:	80 91 05 28 	lds	r24, 0x2805
    2698:	90 91 06 28 	lds	r25, 0x2806
    269c:	bc 01       	movw	r22, r24
    269e:	26 9f       	mul	r18, r22
    26a0:	c0 01       	movw	r24, r0
    26a2:	27 9f       	mul	r18, r23
    26a4:	90 0d       	add	r25, r0
    26a6:	36 9f       	mul	r19, r22
    26a8:	90 0d       	add	r25, r0
    26aa:	11 24       	eor	r1, r1
    26ac:	84 0f       	add	r24, r20
    26ae:	95 1f       	adc	r25, r21
    26b0:	80 93 e5 24 	sts	0x24E5, r24
    26b4:	90 93 e6 24 	sts	0x24E6, r25
    26b8:	ee 24       	eor	r14, r14
    26ba:	ff 24       	eor	r15, r15
            break;
            //do something with errors here for default case
    }
    
    
    switch(y_mode) {
    26bc:	80 91 e3 27 	lds	r24, 0x27E3
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <Update_display+0x368>
    26c4:	a2 c0       	rjmp	.+324    	; 0x280a <Update_display+0x4ac>
    26c6:	83 30       	cpi	r24, 0x03	; 3
    26c8:	30 f4       	brcc	.+12     	; 0x26d6 <Update_display+0x378>
    26ca:	88 23       	and	r24, r24
    26cc:	59 f0       	breq	.+22     	; 0x26e4 <Update_display+0x386>
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <Update_display+0x376>
    26d2:	85 c1       	rjmp	.+778    	; 0x29de <Update_display+0x680>
    26d4:	32 c0       	rjmp	.+100    	; 0x273a <Update_display+0x3dc>
    26d6:	83 30       	cpi	r24, 0x03	; 3
    26d8:	09 f4       	brne	.+2      	; 0x26dc <Update_display+0x37e>
    26da:	fd c0       	rjmp	.+506    	; 0x28d6 <Update_display+0x578>
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	09 f0       	breq	.+2      	; 0x26e2 <Update_display+0x384>
    26e0:	7e c1       	rjmp	.+764    	; 0x29de <Update_display+0x680>
    26e2:	33 c1       	rjmp	.+614    	; 0x294a <Update_display+0x5ec>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[function_counter_y];
    26e4:	e0 91 e9 24 	lds	r30, 0x24E9
    26e8:	f0 91 ea 24 	lds	r31, 0x24EA
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	e5 55       	subi	r30, 0x55	; 85
    26f2:	fa 4d       	sbci	r31, 0xDA	; 218
    26f4:	20 81       	ld	r18, Z
    26f6:	31 81       	ldd	r19, Z+1	; 0x01
    26f8:	22 0f       	add	r18, r18
    26fa:	33 1f       	adc	r19, r19
    26fc:	20 93 a8 25 	sts	0x25A8, r18
    2700:	30 93 a9 25 	sts	0x25A9, r19
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    2704:	80 91 9d 27 	lds	r24, 0x279D
    2708:	99 27       	eor	r25, r25
    270a:	87 fd       	sbrc	r24, 7
    270c:	90 95       	com	r25
    270e:	ac 01       	movw	r20, r24
    2710:	24 9f       	mul	r18, r20
    2712:	c0 01       	movw	r24, r0
    2714:	25 9f       	mul	r18, r21
    2716:	90 0d       	add	r25, r0
    2718:	34 9f       	mul	r19, r20
    271a:	90 0d       	add	r25, r0
    271c:	11 24       	eor	r1, r1
    271e:	6a e0       	ldi	r22, 0x0A	; 10
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2726:	cb 01       	movw	r24, r22
    2728:	20 91 b4 2b 	lds	r18, 0x2BB4
    272c:	45 e0       	ldi	r20, 0x05	; 5
    272e:	24 02       	muls	r18, r20
    2730:	90 01       	movw	r18, r0
    2732:	11 24       	eor	r1, r1
    2734:	82 0f       	add	r24, r18
    2736:	93 1f       	adc	r25, r19
    2738:	c8 c0       	rjmp	.+400    	; 0x28ca <Update_display+0x56c>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(2)/4;  Y_ADC2 = analogRead(3)/4; // 1 volt = 102fps
    273a:	82 e0       	ldi	r24, 0x02	; 2
    273c:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    2740:	64 e0       	ldi	r22, 0x04	; 4
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2748:	16 2f       	mov	r17, r22
    274a:	07 2f       	mov	r16, r23
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    2752:	64 e0       	ldi	r22, 0x04	; 4
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            if (Y_ADC2 < 0)
                Y_ADC2 = 0;
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*(Y_ADC1 - Y_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    275a:	21 2f       	mov	r18, r17
    275c:	30 2f       	mov	r19, r16
    275e:	c9 01       	movw	r24, r18
    2760:	ac 01       	movw	r20, r24
    2762:	97 ff       	sbrs	r25, 7
    2764:	02 c0       	rjmp	.+4      	; 0x276a <Update_display+0x40c>
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	9b 01       	movw	r18, r22
    276c:	77 ff       	sbrs	r23, 7
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <Update_display+0x416>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	42 1b       	sub	r20, r18
    2776:	53 0b       	sbc	r21, r19
    2778:	44 0f       	add	r20, r20
    277a:	55 1f       	adc	r21, r21
    277c:	44 0f       	add	r20, r20
    277e:	55 1f       	adc	r21, r21
    2780:	20 91 a8 25 	lds	r18, 0x25A8
    2784:	30 91 a9 25 	lds	r19, 0x25A9
    2788:	c9 01       	movw	r24, r18
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	82 0f       	add	r24, r18
    2790:	93 1f       	adc	r25, r19
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	84 0f       	add	r24, r20
    2798:	95 1f       	adc	r25, r21
    279a:	6a e0       	ldi	r22, 0x0A	; 10
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    27a2:	9b 01       	movw	r18, r22
    27a4:	60 93 a8 25 	sts	0x25A8, r22
    27a8:	70 93 a9 25 	sts	0x25A9, r23
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    27ac:	80 91 9d 27 	lds	r24, 0x279D
    27b0:	99 27       	eor	r25, r25
    27b2:	87 fd       	sbrc	r24, 7
    27b4:	90 95       	com	r25
    27b6:	bc 01       	movw	r22, r24
    27b8:	26 9f       	mul	r18, r22
    27ba:	c0 01       	movw	r24, r0
    27bc:	27 9f       	mul	r18, r23
    27be:	90 0d       	add	r25, r0
    27c0:	36 9f       	mul	r19, r22
    27c2:	90 0d       	add	r25, r0
    27c4:	11 24       	eor	r1, r1
    27c6:	6a e0       	ldi	r22, 0x0A	; 10
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    27ce:	cb 01       	movw	r24, r22
    27d0:	20 91 b4 2b 	lds	r18, 0x2BB4
    27d4:	45 e0       	ldi	r20, 0x05	; 5
    27d6:	24 02       	muls	r18, r20
    27d8:	90 01       	movw	r18, r0
    27da:	11 24       	eor	r1, r1
    27dc:	82 0f       	add	r24, r18
    27de:	93 1f       	adc	r25, r19
    27e0:	62 e0       	ldi	r22, 0x02	; 2
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    27e8:	9b 01       	movw	r18, r22
    27ea:	eb 01       	movw	r28, r22
            
            //set a frame rate limit 256fps
            if (Y_rate > 256)
    27ec:	71 e0       	ldi	r23, 0x01	; 1
    27ee:	21 30       	cpi	r18, 0x01	; 1
    27f0:	37 07       	cpc	r19, r23
    27f2:	1c f0       	brlt	.+6      	; 0x27fa <Update_display+0x49c>
    27f4:	c0 e0       	ldi	r28, 0x00	; 0
    27f6:	d1 e0       	ldi	r29, 0x01	; 1
    27f8:	f4 c0       	rjmp	.+488    	; 0x29e2 <Update_display+0x684>
                Y_rate = 256;
            else if (Y_rate < -256)
    27fa:	8f ef       	ldi	r24, 0xFF	; 255
    27fc:	20 30       	cpi	r18, 0x00	; 0
    27fe:	38 07       	cpc	r19, r24
    2800:	0c f0       	brlt	.+2      	; 0x2804 <Update_display+0x4a6>
    2802:	ef c0       	rjmp	.+478    	; 0x29e2 <Update_display+0x684>
    2804:	c0 e0       	ldi	r28, 0x00	; 0
    2806:	df ef       	ldi	r29, 0xFF	; 255
    2808:	ec c0       	rjmp	.+472    	; 0x29e2 <Update_display+0x684>
                Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(2)/4;  Y_ADC2 = analogRead(3)/4; // 1 volt = 102
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    2810:	64 e0       	ldi	r22, 0x04	; 4
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2818:	16 2f       	mov	r17, r22
    281a:	07 2f       	mov	r16, r23
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    2822:	64 e0       	ldi	r22, 0x04	; 4
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            if (Y_ADC2 < 0)
                Y_ADC2 = 0;
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*(Y_ADC1 - Y_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    282a:	21 2f       	mov	r18, r17
    282c:	30 2f       	mov	r19, r16
    282e:	c9 01       	movw	r24, r18
    2830:	ac 01       	movw	r20, r24
    2832:	97 ff       	sbrs	r25, 7
    2834:	02 c0       	rjmp	.+4      	; 0x283a <Update_display+0x4dc>
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	9b 01       	movw	r18, r22
    283c:	77 ff       	sbrs	r23, 7
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <Update_display+0x4e6>
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	42 1b       	sub	r20, r18
    2846:	53 0b       	sbc	r21, r19
    2848:	44 0f       	add	r20, r20
    284a:	55 1f       	adc	r21, r21
    284c:	44 0f       	add	r20, r20
    284e:	55 1f       	adc	r21, r21
    2850:	20 91 a8 25 	lds	r18, 0x25A8
    2854:	30 91 a9 25 	lds	r19, 0x25A9
    2858:	c9 01       	movw	r24, r18
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	82 0f       	add	r24, r18
    2860:	93 1f       	adc	r25, r19
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	84 0f       	add	r24, r20
    2868:	95 1f       	adc	r25, r21
    286a:	6a e0       	ldi	r22, 0x0A	; 10
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    2872:	60 93 a8 25 	sts	0x25A8, r22
    2876:	70 93 a9 25 	sts	0x25A9, r23
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[function_counter_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    287a:	e0 91 e9 24 	lds	r30, 0x24E9
    287e:	f0 91 ea 24 	lds	r31, 0x24EA
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	e5 55       	subi	r30, 0x55	; 85
    2888:	fa 4d       	sbci	r31, 0xDA	; 218
    288a:	20 81       	ld	r18, Z
    288c:	31 81       	ldd	r19, Z+1	; 0x01
    288e:	22 0f       	add	r18, r18
    2890:	33 1f       	adc	r19, r19
    2892:	80 91 b4 2b 	lds	r24, 0x2BB4
    2896:	45 e0       	ldi	r20, 0x05	; 5
    2898:	84 02       	muls	r24, r20
    289a:	c0 01       	movw	r24, r0
    289c:	11 24       	eor	r1, r1
    289e:	28 0f       	add	r18, r24
    28a0:	39 1f       	adc	r19, r25
    28a2:	80 91 9d 27 	lds	r24, 0x279D
    28a6:	99 27       	eor	r25, r25
    28a8:	87 fd       	sbrc	r24, 7
    28aa:	90 95       	com	r25
    28ac:	ac 01       	movw	r20, r24
    28ae:	64 9f       	mul	r22, r20
    28b0:	c0 01       	movw	r24, r0
    28b2:	65 9f       	mul	r22, r21
    28b4:	90 0d       	add	r25, r0
    28b6:	74 9f       	mul	r23, r20
    28b8:	90 0d       	add	r25, r0
    28ba:	11 24       	eor	r1, r1
    28bc:	6a e0       	ldi	r22, 0x0A	; 10
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    28c4:	c9 01       	movw	r24, r18
    28c6:	86 0f       	add	r24, r22
    28c8:	97 1f       	adc	r25, r23
    28ca:	62 e0       	ldi	r22, 0x02	; 2
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    28d2:	eb 01       	movw	r28, r22
    28d4:	86 c0       	rjmp	.+268    	; 0x29e2 <Update_display+0x684>
            break;
        case 3: // POS mode, use CH5 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC1 = analogRead(5)/2;
    28d6:	85 e0       	ldi	r24, 0x05	; 5
    28d8:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
            // set to 0 if negative to be compatibel with old code
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            index_y = Y_ADC1/gain_y + bias_y;
    28e4:	cb 01       	movw	r24, r22
    28e6:	77 ff       	sbrs	r23, 7
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <Update_display+0x590>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	60 91 9d 27 	lds	r22, 0x279D
    28f2:	77 27       	eor	r23, r23
    28f4:	67 fd       	sbrc	r22, 7
    28f6:	70 95       	com	r23
    28f8:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <__divmodhi4>
    28fc:	80 91 b4 2b 	lds	r24, 0x2BB4
    2900:	99 27       	eor	r25, r25
    2902:	87 fd       	sbrc	r24, 7
    2904:	90 95       	com	r25
    2906:	86 0f       	add	r24, r22
    2908:	97 1f       	adc	r25, r23
    290a:	80 93 50 29 	sts	0x2950, r24
    290e:	90 93 51 29 	sts	0x2951, r25
            if (index_y >= y_num)  {index_y = y_num - 1;} //check if too big
    2912:	80 91 50 29 	lds	r24, 0x2950
    2916:	90 91 51 29 	lds	r25, 0x2951
    291a:	20 91 a6 25 	lds	r18, 0x25A6
    291e:	30 91 a7 25 	lds	r19, 0x25A7
    2922:	82 17       	cp	r24, r18
    2924:	93 07       	cpc	r25, r19
    2926:	30 f0       	brcs	.+12     	; 0x2934 <Update_display+0x5d6>
    2928:	21 50       	subi	r18, 0x01	; 1
    292a:	30 40       	sbci	r19, 0x00	; 0
    292c:	20 93 50 29 	sts	0x2950, r18
    2930:	30 93 51 29 	sts	0x2951, r19
            if (index_y <= 0)  {index_y = 0;} //or too small
    2934:	80 91 50 29 	lds	r24, 0x2950
    2938:	90 91 51 29 	lds	r25, 0x2951
    293c:	89 2b       	or	r24, r25
    293e:	a9 f5       	brne	.+106    	; 0x29aa <Update_display+0x64c>
    2940:	10 92 50 29 	sts	0x2950, r1
    2944:	10 92 51 29 	sts	0x2951, r1
    2948:	30 c0       	rjmp	.+96     	; 0x29aa <Update_display+0x64c>
            frame_num = index_y*x_num + index_x;
            Y_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[function_counter_y]);
    294a:	e0 91 e9 24 	lds	r30, 0x24E9
    294e:	f0 91 ea 24 	lds	r31, 0x24EA
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	e5 55       	subi	r30, 0x55	; 85
    2958:	fa 4d       	sbci	r31, 0xDA	; 218
    295a:	01 90       	ld	r0, Z+
    295c:	f0 81       	ld	r31, Z
    295e:	e0 2d       	mov	r30, r0
    2960:	80 91 73 26 	lds	r24, 0x2673
    2964:	90 91 74 26 	lds	r25, 0x2674
    2968:	e8 0f       	add	r30, r24
    296a:	f9 1f       	adc	r31, r25
    296c:	20 91 a6 25 	lds	r18, 0x25A6
    2970:	30 91 a7 25 	lds	r19, 0x25A7
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    2974:	f7 fd       	sbrc	r31, 7
    2976:	09 c0       	rjmp	.+18     	; 0x298a <Update_display+0x62c>
    2978:	cf 01       	movw	r24, r30
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    2980:	80 93 50 29 	sts	0x2950, r24
    2984:	90 93 51 29 	sts	0x2951, r25
    2988:	10 c0       	rjmp	.+32     	; 0x29aa <Update_display+0x64c>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    298a:	88 27       	eor	r24, r24
    298c:	99 27       	eor	r25, r25
    298e:	8e 1b       	sub	r24, r30
    2990:	9f 0b       	sbc	r25, r31
    2992:	b9 01       	movw	r22, r18
    2994:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    2998:	21 50       	subi	r18, 0x01	; 1
    299a:	30 40       	sbci	r19, 0x00	; 0
    299c:	a9 01       	movw	r20, r18
    299e:	48 1b       	sub	r20, r24
    29a0:	59 0b       	sbc	r21, r25
    29a2:	40 93 50 29 	sts	0x2950, r20
    29a6:	50 93 51 29 	sts	0x2951, r21
            frame_num = index_y*x_num + index_x;
    29aa:	20 91 50 29 	lds	r18, 0x2950
    29ae:	30 91 51 29 	lds	r19, 0x2951
    29b2:	40 91 9b 27 	lds	r20, 0x279B
    29b6:	50 91 9c 27 	lds	r21, 0x279C
    29ba:	80 91 05 28 	lds	r24, 0x2805
    29be:	90 91 06 28 	lds	r25, 0x2806
    29c2:	bc 01       	movw	r22, r24
    29c4:	26 9f       	mul	r18, r22
    29c6:	c0 01       	movw	r24, r0
    29c8:	27 9f       	mul	r18, r23
    29ca:	90 0d       	add	r25, r0
    29cc:	36 9f       	mul	r19, r22
    29ce:	90 0d       	add	r25, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	84 0f       	add	r24, r20
    29d4:	95 1f       	adc	r25, r21
    29d6:	80 93 e5 24 	sts	0x24E5, r24
    29da:	90 93 e6 24 	sts	0x24E6, r25
    29de:	c0 e0       	ldi	r28, 0x00	; 0
    29e0:	d0 e0       	ldi	r29, 0x00	; 0
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    29e2:	80 91 9c 20 	lds	r24, 0x209C
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	59 f1       	breq	.+86     	; 0x2a40 <Update_display+0x6e2>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    29ea:	1e 14       	cp	r1, r14
    29ec:	1f 04       	cpc	r1, r15
    29ee:	74 f4       	brge	.+28     	; 0x2a0c <Update_display+0x6ae>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    29f0:	97 01       	movw	r18, r14
    29f2:	44 27       	eor	r20, r20
    29f4:	37 fd       	sbrc	r19, 7
    29f6:	40 95       	com	r20
    29f8:	54 2f       	mov	r21, r20
    29fa:	62 e1       	ldi	r22, 0x12	; 18
    29fc:	7a e7       	ldi	r23, 0x7A	; 122
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    2a06:	82 e2       	ldi	r24, 0x22	; 34
    2a08:	98 e0       	ldi	r25, 0x08	; 8
    2a0a:	13 c0       	rjmp	.+38     	; 0x2a32 <Update_display+0x6d4>
    else if (X_rate < 0)
    2a0c:	e1 14       	cp	r14, r1
    2a0e:	f1 04       	cpc	r15, r1
    2a10:	c9 f0       	breq	.+50     	; 0x2a44 <Update_display+0x6e6>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2a12:	22 27       	eor	r18, r18
    2a14:	33 27       	eor	r19, r19
    2a16:	2e 19       	sub	r18, r14
    2a18:	3f 09       	sbc	r19, r15
    2a1a:	44 27       	eor	r20, r20
    2a1c:	37 fd       	sbrc	r19, 7
    2a1e:	40 95       	com	r20
    2a20:	54 2f       	mov	r21, r20
    2a22:	62 e1       	ldi	r22, 0x12	; 18
    2a24:	7a e7       	ldi	r23, 0x7A	; 122
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    2a2e:	86 e9       	ldi	r24, 0x96	; 150
    2a30:	98 e0       	ldi	r25, 0x08	; 8
    2a32:	ba 01       	movw	r22, r20
    2a34:	a9 01       	movw	r20, r18
    2a36:	22 e0       	ldi	r18, 0x02	; 2
    2a38:	01 e0       	ldi	r16, 0x01	; 1
    2a3a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <Update_Reg_Handler>
    2a3e:	0e c0       	rjmp	.+28     	; 0x2a5c <Update_display+0x6fe>
    2a40:	c0 e0       	ldi	r28, 0x00	; 0
    2a42:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    2a44:	86 e9       	ldi	r24, 0x96	; 150
    2a46:	98 e0       	ldi	r25, 0x08	; 8
    2a48:	4e e4       	ldi	r20, 0x4E	; 78
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	22 e0       	ldi	r18, 0x02	; 2
    2a52:	00 e0       	ldi	r16, 0x00	; 0
    2a54:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <Update_Reg_Handler>
    2a58:	ee 24       	eor	r14, r14
    2a5a:	ff 24       	eor	r15, r15
    
    
    if (Y_rate > 0)
    2a5c:	1c 16       	cp	r1, r28
    2a5e:	1d 06       	cpc	r1, r29
    2a60:	74 f4       	brge	.+28     	; 0x2a7e <Update_display+0x720>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2a62:	9e 01       	movw	r18, r28
    2a64:	44 27       	eor	r20, r20
    2a66:	37 fd       	sbrc	r19, 7
    2a68:	40 95       	com	r20
    2a6a:	54 2f       	mov	r21, r20
    2a6c:	62 e1       	ldi	r22, 0x12	; 18
    2a6e:	7a e7       	ldi	r23, 0x7A	; 122
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    2a78:	8a e5       	ldi	r24, 0x5A	; 90
    2a7a:	98 e0       	ldi	r25, 0x08	; 8
    2a7c:	12 c0       	rjmp	.+36     	; 0x2aa2 <Update_display+0x744>
    else if (Y_rate < 0)
    2a7e:	20 97       	sbiw	r28, 0x00	; 0
    2a80:	a9 f0       	breq	.+42     	; 0x2aac <Update_display+0x74e>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2a82:	22 27       	eor	r18, r18
    2a84:	33 27       	eor	r19, r19
    2a86:	2c 1b       	sub	r18, r28
    2a88:	3d 0b       	sbc	r19, r29
    2a8a:	44 27       	eor	r20, r20
    2a8c:	37 fd       	sbrc	r19, 7
    2a8e:	40 95       	com	r20
    2a90:	54 2f       	mov	r21, r20
    2a92:	62 e1       	ldi	r22, 0x12	; 18
    2a94:	7a e7       	ldi	r23, 0x7A	; 122
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    2a9e:	8e ec       	ldi	r24, 0xCE	; 206
    2aa0:	98 e0       	ldi	r25, 0x08	; 8
    2aa2:	ba 01       	movw	r22, r20
    2aa4:	a9 01       	movw	r20, r18
    2aa6:	23 e0       	ldi	r18, 0x03	; 3
    2aa8:	01 e0       	ldi	r16, 0x01	; 1
    2aaa:	08 c0       	rjmp	.+16     	; 0x2abc <Update_display+0x75e>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    2aac:	8e ec       	ldi	r24, 0xCE	; 206
    2aae:	98 e0       	ldi	r25, 0x08	; 8
    2ab0:	4e e4       	ldi	r20, 0x4E	; 78
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	23 e0       	ldi	r18, 0x03	; 3
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    2ac0:	10 92 e1 24 	sts	0x24E1, r1
    2ac4:	ec 16       	cp	r14, r28
    2ac6:	fd 06       	cpc	r15, r29
    2ac8:	1c f0       	brlt	.+6      	; 0x2ad0 <Update_display+0x772>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	80 93 e1 24 	sts	0x24E1, r24
}
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	e6 e0       	ldi	r30, 0x06	; 6
    2ad6:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

00002ada <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    2ada:	a1 e0       	ldi	r26, 0x01	; 1
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e3 e7       	ldi	r30, 0x73	; 115
    2ae0:	f5 e1       	ldi	r31, 0x15	; 21
    2ae2:	0c 94 53 58 	jmp	0xb0a6	; 0xb0a6 <__prologue_saves__+0x10>
    2ae6:	5c 01       	movw	r10, r24
    //The first two byte is the x_dac_val
    //The second two byte is the y_dac_val
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e0 80       	ld	r14, Z
    2aec:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    2aee:	c2 80       	ldd	r12, Z+2	; 0x02
    2af0:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    2af2:	84 81       	ldd	r24, Z+4	; 0x04
    2af4:	80 93 e4 24 	sts	0x24E4, r24
    gs_value =msg_buffer[5];
    2af8:	95 81       	ldd	r25, Z+5	; 0x05
    2afa:	90 93 17 27 	sts	0x2717, r25
    row_compress = msg_buffer[6];
    2afe:	86 81       	ldd	r24, Z+6	; 0x06
    2b00:	80 93 aa 25 	sts	0x25AA, r24


    if (row_compress)
    2b04:	88 23       	and	r24, r24
    2b06:	19 f0       	breq	.+6      	; 0x2b0e <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    2b08:	90 93 9a 27 	sts	0x279A, r25
    2b0c:	09 c0       	rjmp	.+18     	; 0x2b20 <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    2b0e:	89 2f       	mov	r24, r25
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	33 e0       	ldi	r19, 0x03	; 3
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	3a 95       	dec	r19
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <display_dumped_frame+0x3a>
    2b1c:	80 93 9a 27 	sts	0x279A, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    2b20:	10 92 e0 24 	sts	0x24E0, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	61 e0       	ldi	r22, 0x01	; 1
    2b28:	0e 94 9b 21 	call	0x4336	; 0x4336 <digitalWrite>
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	07 e0       	ldi	r16, 0x07	; 7
    2b30:	10 e0       	ldi	r17, 0x00	; 0
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    2b34:	a5 01       	movw	r20, r10
    2b36:	40 0f       	add	r20, r16
    2b38:	51 1f       	adc	r21, r17
    2b3a:	89 2f       	mov	r24, r25
    2b3c:	60 91 9a 27 	lds	r22, 0x279A
    2b40:	99 83       	std	Y+1, r25	; 0x01
    2b42:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    2b46:	80 91 9a 27 	lds	r24, 0x279A
    2b4a:	08 0f       	add	r16, r24
    2b4c:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2b4e:	99 81       	ldd	r25, Y+1	; 0x01
    2b50:	9f 5f       	subi	r25, 0xFF	; 255
    2b52:	80 91 e4 24 	lds	r24, 0x24E4
    2b56:	89 17       	cp	r24, r25
    2b58:	68 f7       	brcc	.-38     	; 0x2b34 <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 2047 (0 - 5V)
    2b5a:	7f 2d       	mov	r23, r15
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	6e 0d       	add	r22, r14
    2b60:	71 1d       	adc	r23, r1
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    analogWrite(1, y_dac_val); 
    2b68:	7d 2d       	mov	r23, r13
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	6c 0d       	add	r22, r12
    2b6e:	71 1d       	adc	r23, r1
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	0e 94 9b 21 	call	0x4336	; 0x4336 <digitalWrite>
}
    2b7e:	21 96       	adiw	r28, 0x01	; 1
    2b80:	ea e0       	ldi	r30, 0x0A	; 10
    2b82:	0c 94 6f 58 	jmp	0xb0de	; 0xb0de <__epilogue_restores__+0x10>

00002b86 <fetch_display_frame>:


void fetch_display_frame(uint16_t f_num){
    2b86:	4f 92       	push	r4
    2b88:	5f 92       	push	r5
    2b8a:	6f 92       	push	r6
    2b8c:	7f 92       	push	r7
    2b8e:	8f 92       	push	r8
    2b90:	9f 92       	push	r9
    2b92:	af 92       	push	r10
    2b94:	bf 92       	push	r11
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	a6 97       	sbiw	r28, 0x26	; 38
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	4c 01       	movw	r8, r24
    else
      digitalWrite(2, HIGH);   // turn off laser
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
}
    2bb0:	4d b6       	in	r4, 0x3d	; 61
    2bb2:	5e b6       	in	r5, 0x3e	; 62
    uint8_t FLASH[32];
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    2bb4:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
    
    digitalWrite(1, HIGH); // set line high at start of frame write
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	0e 94 9b 21 	call	0x4336	; 0x4336 <digitalWrite>
    len = num_panels * bytes_per_panel_frame;
    2bbe:	90 91 9a 27 	lds	r25, 0x279A
    2bc2:	80 91 e4 24 	lds	r24, 0x24E4
    2bc6:	98 9f       	mul	r25, r24
    2bc8:	50 01       	movw	r10, r0
    2bca:	11 24       	eor	r1, r1
	block_per_frame = len/512 + 1;
    uint8_t  frameBuff[len];
    2bcc:	8d b7       	in	r24, 0x3d	; 61
    2bce:	9e b7       	in	r25, 0x3e	; 62
    2bd0:	8a 19       	sub	r24, r10
    2bd2:	9b 09       	sbc	r25, r11
    2bd4:	8d bf       	out	0x3d, r24	; 61
    2bd6:	9e bf       	out	0x3e, r25	; 62
    2bd8:	6d b6       	in	r6, 0x3d	; 61
    2bda:	7e b6       	in	r7, 0x3e	; 62
    2bdc:	08 94       	sec
    2bde:	61 1c       	adc	r6, r1
    2be0:	71 1c       	adc	r7, r1
    //offset = 512 + (uint32_t)f_num * (uint32_t)len;  //byte offset into the file
    offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    2be2:	6b 2d       	mov	r22, r11
    2be4:	66 95       	lsr	r22
    2be6:	6f 5f       	subi	r22, 0xFF	; 255
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	94 01       	movw	r18, r8
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    2bf8:	6b 01       	movw	r12, r22
    2bfa:	7c 01       	movw	r14, r24
    2bfc:	08 94       	sec
    2bfe:	c1 1c       	adc	r12, r1
    2c00:	d1 1c       	adc	r13, r1
    2c02:	e1 1c       	adc	r14, r1
    2c04:	f1 1c       	adc	r15, r1
    2c06:	e9 e0       	ldi	r30, 0x09	; 9
    2c08:	cc 0c       	add	r12, r12
    2c0a:	dd 1c       	adc	r13, r13
    2c0c:	ee 1c       	adc	r14, r14
    2c0e:	ff 1c       	adc	r15, r15
    2c10:	ea 95       	dec	r30
    2c12:	d1 f7       	brne	.-12     	; 0x2c08 <fetch_display_frame+0x82>
	
    Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //straigforward way to avoid fs reentrant
    2c14:	40 91 9f 20 	lds	r20, 0x209F
    2c18:	50 91 a0 20 	lds	r21, 0x20A0
    2c1c:	60 e0       	ldi	r22, 0x00	; 0
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	82 ed       	ldi	r24, 0xD2	; 210
    2c22:	9b e0       	ldi	r25, 0x0B	; 11
    2c24:	24 e0       	ldi	r18, 0x04	; 4
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //straigforward way to avoid fs reentrant
    2c2c:	40 91 a1 20 	lds	r20, 0x20A1
    2c30:	50 91 a2 20 	lds	r21, 0x20A2
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	84 e6       	ldi	r24, 0x64	; 100
    2c3a:	9a e0       	ldi	r25, 0x0A	; 10
    2c3c:	25 e0       	ldi	r18, 0x05	; 5
    2c3e:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
    
    res = f_lseek(&file1, offset);
    2c42:	82 e5       	ldi	r24, 0x52	; 82
    2c44:	99 e2       	ldi	r25, 0x29	; 41
    2c46:	b7 01       	movw	r22, r14
    2c48:	a6 01       	movw	r20, r12
    2c4a:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
    2c4e:	08 2f       	mov	r16, r24
    if ((res == FR_OK) && (file1.fptr == offset)) {
    2c50:	88 23       	and	r24, r24
    2c52:	09 f0       	breq	.+2      	; 0x2c56 <fetch_display_frame+0xd0>
    2c54:	8c c1       	rjmp	.+792    	; 0x2f6e <fetch_display_frame+0x3e8>
    2c56:	80 91 58 29 	lds	r24, 0x2958
    2c5a:	90 91 59 29 	lds	r25, 0x2959
    2c5e:	a0 91 5a 29 	lds	r26, 0x295A
    2c62:	b0 91 5b 29 	lds	r27, 0x295B
    2c66:	8c 15       	cp	r24, r12
    2c68:	9d 05       	cpc	r25, r13
    2c6a:	ae 05       	cpc	r26, r14
    2c6c:	bf 05       	cpc	r27, r15
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <fetch_display_frame+0xec>
    2c70:	7e c1       	rjmp	.+764    	; 0x2f6e <fetch_display_frame+0x3e8>
        res = f_read(&file1, frameBuff, len, &cnt);
    2c72:	82 e5       	ldi	r24, 0x52	; 82
    2c74:	99 e2       	ldi	r25, 0x29	; 41
    2c76:	b3 01       	movw	r22, r6
    2c78:	a5 01       	movw	r20, r10
    2c7a:	9e 01       	movw	r18, r28
    2c7c:	2f 5f       	subi	r18, 0xFF	; 255
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c80:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
    2c84:	08 2f       	mov	r16, r24
        if ((res == FR_OK) && (cnt == len)) {	
    2c86:	88 23       	and	r24, r24
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <fetch_display_frame+0x106>
    2c8a:	4c c1       	rjmp	.+664    	; 0x2f24 <fetch_display_frame+0x39e>
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	8a 15       	cp	r24, r10
    2c92:	9b 05       	cpc	r25, r11
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <fetch_display_frame+0x112>
    2c96:	46 c1       	rjmp	.+652    	; 0x2f24 <fetch_display_frame+0x39e>
		    if ((func_ID_X != 0) && (Stop == 0))  //ISR 4 and 5 are enalbed only after 'start'
    2c98:	80 91 f4 24 	lds	r24, 0x24F4
    2c9c:	90 91 f5 24 	lds	r25, 0x24F5
    2ca0:	89 2b       	or	r24, r25
    2ca2:	81 f0       	breq	.+32     	; 0x2cc4 <fetch_display_frame+0x13e>
    2ca4:	80 91 9c 20 	lds	r24, 0x209C
    2ca8:	88 23       	and	r24, r24
    2caa:	61 f4       	brne	.+24     	; 0x2cc4 <fetch_display_frame+0x13e>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);  //straigforward way to avoid fs reentrant
    2cac:	40 91 9f 20 	lds	r20, 0x209F
    2cb0:	50 91 a0 20 	lds	r21, 0x20A0
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	82 ed       	ldi	r24, 0xD2	; 210
    2cba:	9b e0       	ldi	r25, 0x0B	; 11
    2cbc:	24 e0       	ldi	r18, 0x04	; 4
    2cbe:	01 e0       	ldi	r16, 0x01	; 1
    2cc0:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
        
			if ((func_ID_Y != 0) && (Stop == 0))  
    2cc4:	80 91 f6 24 	lds	r24, 0x24F6
    2cc8:	90 91 f7 24 	lds	r25, 0x24F7
    2ccc:	89 2b       	or	r24, r25
    2cce:	81 f0       	breq	.+32     	; 0x2cf0 <fetch_display_frame+0x16a>
    2cd0:	80 91 9c 20 	lds	r24, 0x209C
    2cd4:	88 23       	and	r24, r24
    2cd6:	61 f4       	brne	.+24     	; 0x2cf0 <fetch_display_frame+0x16a>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //straigforward way to avoid fs reentrant
    2cd8:	40 91 a1 20 	lds	r20, 0x20A1
    2cdc:	50 91 a2 20 	lds	r21, 0x20A2
    2ce0:	60 e0       	ldi	r22, 0x00	; 0
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	84 e6       	ldi	r24, 0x64	; 100
    2ce6:	9a e0       	ldi	r25, 0x0A	; 10
    2ce8:	25 e0       	ldi	r18, 0x05	; 5
    2cea:	01 e0       	ldi	r16, 0x01	; 1
    2cec:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
        
		
            if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    2cf0:	80 91 e0 24 	lds	r24, 0x24E0
    2cf4:	82 30       	cpi	r24, 0x02	; 2
    2cf6:	18 f0       	brcs	.+6      	; 0x2cfe <fetch_display_frame+0x178>
                ledToggle(1);    //toggle LED 1
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	0e 94 29 21 	call	0x4252	; 0x4252 <ledToggle>
            }
            
            display_flag = 0;  //clear the display flag
    2cfe:	10 92 e0 24 	sts	0x24E0, r1
    2d02:	01 e0       	ldi	r16, 0x01	; 1
    2d04:	ee 24       	eor	r14, r14
    2d06:	ff 24       	eor	r15, r15
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2d08:	77 e0       	ldi	r23, 0x07	; 7
    2d0a:	c7 2e       	mov	r12, r23
    2d0c:	d1 2c       	mov	r13, r1
    2d0e:	cc 0e       	add	r12, r28
    2d10:	dd 1e       	adc	r13, r29
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
                                                        gscale[0] = FLASH[0];
                                                        gscale[1] = FLASH[8];
                                                        gscale[2] = FLASH[16];
                                                        gscale[3] = FLASH[24];
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2d12:	63 e0       	ldi	r22, 0x03	; 3
    2d14:	a6 2e       	mov	r10, r22
    2d16:	b1 2c       	mov	r11, r1
    2d18:	ac 0e       	add	r10, r28
    2d1a:	bd 1e       	adc	r11, r29
    2d1c:	f7 c0       	rjmp	.+494    	; 0x2f0c <fetch_display_frame+0x386>
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
    2d1e:	8d 91       	ld	r24, X+
    2d20:	81 93       	st	Z+, r24
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2d22:	8e 2f       	mov	r24, r30
    2d24:	8c 19       	sub	r24, r12
    2d26:	89 17       	cp	r24, r25
    2d28:	d0 f3       	brcs	.-12     	; 0x2d1e <fetch_display_frame+0x198>
    2d2a:	e9 0e       	add	r14, r25
    2d2c:	f1 1c       	adc	r15, r1
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
                }
                packet_sent = 0; //used with compression to simplify coniditionals.
                if (ident_compress == 1) {
    2d2e:	80 91 81 29 	lds	r24, 0x2981
    2d32:	81 30       	cpi	r24, 0x01	; 1
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <fetch_display_frame+0x1b2>
    2d36:	e3 c0       	rjmp	.+454    	; 0x2efe <fetch_display_frame+0x378>
                    if (bytes_per_panel_frame == 8){
    2d38:	98 30       	cpi	r25, 0x08	; 8
    2d3a:	e9 f4       	brne	.+58     	; 0x2d76 <fetch_display_frame+0x1f0>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3e:	88 85       	ldd	r24, Y+8	; 0x08
    2d40:	98 17       	cp	r25, r24
    2d42:	c9 f4       	brne	.+50     	; 0x2d76 <fetch_display_frame+0x1f0>
    2d44:	49 85       	ldd	r20, Y+9	; 0x09
    2d46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d48:	48 17       	cp	r20, r24
    2d4a:	a9 f4       	brne	.+42     	; 0x2d76 <fetch_display_frame+0x1f0>
    2d4c:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d50:	38 17       	cp	r19, r24
    2d52:	89 f4       	brne	.+34     	; 0x2d76 <fetch_display_frame+0x1f0>
    2d54:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d58:	28 17       	cp	r18, r24
    2d5a:	69 f4       	brne	.+26     	; 0x2d76 <fetch_display_frame+0x1f0>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2d5c:	94 17       	cp	r25, r20
    2d5e:	59 f4       	brne	.+22     	; 0x2d76 <fetch_display_frame+0x1f0>
    2d60:	93 17       	cp	r25, r19
    2d62:	49 f4       	brne	.+18     	; 0x2d76 <fetch_display_frame+0x1f0>
    2d64:	92 17       	cp	r25, r18
    2d66:	39 f4       	brne	.+14     	; 0x2d76 <fetch_display_frame+0x1f0>
                                i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    2d68:	80 2f       	mov	r24, r16
    2d6a:	61 e0       	ldi	r22, 0x01	; 1
    2d6c:	a6 01       	movw	r20, r12
    2d6e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    2d72:	e1 e0       	ldi	r30, 0x01	; 1
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <fetch_display_frame+0x1f2>
    2d76:	e0 e0       	ldi	r30, 0x00	; 0
                                packet_sent = 1;
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 8
                    
                    if (bytes_per_panel_frame == 24){
    2d78:	80 91 9a 27 	lds	r24, 0x279A
    2d7c:	88 31       	cpi	r24, 0x18	; 24
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <fetch_display_frame+0x1fc>
    2d80:	4e c0       	rjmp	.+156    	; 0x2e1e <fetch_display_frame+0x298>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	88 85       	ldd	r24, Y+8	; 0x08
    2d86:	68 17       	cp	r22, r24
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <fetch_display_frame+0x206>
    2d8a:	49 c0       	rjmp	.+146    	; 0x2e1e <fetch_display_frame+0x298>
    2d8c:	39 85       	ldd	r19, Y+9	; 0x09
    2d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d90:	38 17       	cp	r19, r24
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <fetch_display_frame+0x210>
    2d94:	44 c0       	rjmp	.+136    	; 0x2e1e <fetch_display_frame+0x298>
    2d96:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d98:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d9a:	28 17       	cp	r18, r24
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <fetch_display_frame+0x21a>
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <fetch_display_frame+0x298>
    2da0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2da4:	98 17       	cp	r25, r24
    2da6:	d9 f5       	brne	.+118    	; 0x2e1e <fetch_display_frame+0x298>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2da8:	63 17       	cp	r22, r19
    2daa:	c9 f5       	brne	.+114    	; 0x2e1e <fetch_display_frame+0x298>
    2dac:	62 17       	cp	r22, r18
    2dae:	b9 f5       	brne	.+110    	; 0x2e1e <fetch_display_frame+0x298>
    2db0:	69 17       	cp	r22, r25
    2db2:	a9 f5       	brne	.+106    	; 0x2e1e <fetch_display_frame+0x298>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2db4:	4f 85       	ldd	r20, Y+15	; 0x0f
    2db6:	88 89       	ldd	r24, Y+16	; 0x10
    2db8:	48 17       	cp	r20, r24
    2dba:	89 f5       	brne	.+98     	; 0x2e1e <fetch_display_frame+0x298>
    2dbc:	39 89       	ldd	r19, Y+17	; 0x11
    2dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    2dc0:	38 17       	cp	r19, r24
    2dc2:	69 f5       	brne	.+90     	; 0x2e1e <fetch_display_frame+0x298>
    2dc4:	2b 89       	ldd	r18, Y+19	; 0x13
    2dc6:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc8:	28 17       	cp	r18, r24
    2dca:	49 f5       	brne	.+82     	; 0x2e1e <fetch_display_frame+0x298>
    2dcc:	9d 89       	ldd	r25, Y+21	; 0x15
    2dce:	8e 89       	ldd	r24, Y+22	; 0x16
    2dd0:	98 17       	cp	r25, r24
    2dd2:	29 f5       	brne	.+74     	; 0x2e1e <fetch_display_frame+0x298>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2dd4:	43 17       	cp	r20, r19
    2dd6:	19 f5       	brne	.+70     	; 0x2e1e <fetch_display_frame+0x298>
    2dd8:	42 17       	cp	r20, r18
    2dda:	09 f5       	brne	.+66     	; 0x2e1e <fetch_display_frame+0x298>
    2ddc:	49 17       	cp	r20, r25
    2dde:	f9 f4       	brne	.+62     	; 0x2e1e <fetch_display_frame+0x298>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2de0:	9f 89       	ldd	r25, Y+23	; 0x17
    2de2:	88 8d       	ldd	r24, Y+24	; 0x18
    2de4:	98 17       	cp	r25, r24
    2de6:	d9 f4       	brne	.+54     	; 0x2e1e <fetch_display_frame+0x298>
    2de8:	59 8d       	ldd	r21, Y+25	; 0x19
    2dea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dec:	58 17       	cp	r21, r24
    2dee:	b9 f4       	brne	.+46     	; 0x2e1e <fetch_display_frame+0x298>
    2df0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2df2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2df4:	38 17       	cp	r19, r24
    2df6:	99 f4       	brne	.+38     	; 0x2e1e <fetch_display_frame+0x298>
    2df8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dfc:	28 17       	cp	r18, r24
    2dfe:	79 f4       	brne	.+30     	; 0x2e1e <fetch_display_frame+0x298>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2e00:	95 17       	cp	r25, r21
    2e02:	69 f4       	brne	.+26     	; 0x2e1e <fetch_display_frame+0x298>
    2e04:	93 17       	cp	r25, r19
    2e06:	59 f4       	brne	.+22     	; 0x2e1e <fetch_display_frame+0x298>
    2e08:	92 17       	cp	r25, r18
    2e0a:	49 f4       	brne	.+18     	; 0x2e1e <fetch_display_frame+0x298>
                                                gscale[0] = FLASH[0];
    2e0c:	6b 83       	std	Y+3, r22	; 0x03
                                                gscale[1] = FLASH[8];
    2e0e:	4c 83       	std	Y+4, r20	; 0x04
                                                gscale[2] = FLASH[16];
    2e10:	9d 83       	std	Y+5, r25	; 0x05
                                                i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    2e12:	80 2f       	mov	r24, r16
    2e14:	63 e0       	ldi	r22, 0x03	; 3
    2e16:	a5 01       	movw	r20, r10
    2e18:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    2e1c:	e1 e0       	ldi	r30, 0x01	; 1
                                } //end of third round of comparisons
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 24
                    
                    if (bytes_per_panel_frame == 32){
    2e1e:	80 91 9a 27 	lds	r24, 0x279A
    2e22:	80 32       	cpi	r24, 0x20	; 32
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <fetch_display_frame+0x2a2>
    2e26:	69 c0       	rjmp	.+210    	; 0x2efa <fetch_display_frame+0x374>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2e28:	7f 81       	ldd	r23, Y+7	; 0x07
    2e2a:	88 85       	ldd	r24, Y+8	; 0x08
    2e2c:	78 17       	cp	r23, r24
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <fetch_display_frame+0x2ac>
    2e30:	64 c0       	rjmp	.+200    	; 0x2efa <fetch_display_frame+0x374>
    2e32:	39 85       	ldd	r19, Y+9	; 0x09
    2e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e36:	38 17       	cp	r19, r24
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <fetch_display_frame+0x2b6>
    2e3a:	5f c0       	rjmp	.+190    	; 0x2efa <fetch_display_frame+0x374>
    2e3c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e40:	28 17       	cp	r18, r24
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <fetch_display_frame+0x2c0>
    2e44:	5a c0       	rjmp	.+180    	; 0x2efa <fetch_display_frame+0x374>
    2e46:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e4a:	98 17       	cp	r25, r24
    2e4c:	09 f0       	breq	.+2      	; 0x2e50 <fetch_display_frame+0x2ca>
    2e4e:	55 c0       	rjmp	.+170    	; 0x2efa <fetch_display_frame+0x374>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2e50:	73 17       	cp	r23, r19
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <fetch_display_frame+0x2d0>
    2e54:	52 c0       	rjmp	.+164    	; 0x2efa <fetch_display_frame+0x374>
    2e56:	72 17       	cp	r23, r18
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <fetch_display_frame+0x2d6>
    2e5a:	4f c0       	rjmp	.+158    	; 0x2efa <fetch_display_frame+0x374>
    2e5c:	79 17       	cp	r23, r25
    2e5e:	09 f0       	breq	.+2      	; 0x2e62 <fetch_display_frame+0x2dc>
    2e60:	4c c0       	rjmp	.+152    	; 0x2efa <fetch_display_frame+0x374>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2e62:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e64:	88 89       	ldd	r24, Y+16	; 0x10
    2e66:	68 17       	cp	r22, r24
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <fetch_display_frame+0x2e6>
    2e6a:	47 c0       	rjmp	.+142    	; 0x2efa <fetch_display_frame+0x374>
    2e6c:	39 89       	ldd	r19, Y+17	; 0x11
    2e6e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e70:	38 17       	cp	r19, r24
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <fetch_display_frame+0x2f0>
    2e74:	42 c0       	rjmp	.+132    	; 0x2efa <fetch_display_frame+0x374>
    2e76:	2b 89       	ldd	r18, Y+19	; 0x13
    2e78:	8c 89       	ldd	r24, Y+20	; 0x14
    2e7a:	28 17       	cp	r18, r24
    2e7c:	f1 f5       	brne	.+124    	; 0x2efa <fetch_display_frame+0x374>
    2e7e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e80:	8e 89       	ldd	r24, Y+22	; 0x16
    2e82:	98 17       	cp	r25, r24
    2e84:	d1 f5       	brne	.+116    	; 0x2efa <fetch_display_frame+0x374>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2e86:	63 17       	cp	r22, r19
    2e88:	c1 f5       	brne	.+112    	; 0x2efa <fetch_display_frame+0x374>
    2e8a:	62 17       	cp	r22, r18
    2e8c:	b1 f5       	brne	.+108    	; 0x2efa <fetch_display_frame+0x374>
    2e8e:	69 17       	cp	r22, r25
    2e90:	a1 f5       	brne	.+104    	; 0x2efa <fetch_display_frame+0x374>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2e92:	4f 89       	ldd	r20, Y+23	; 0x17
    2e94:	88 8d       	ldd	r24, Y+24	; 0x18
    2e96:	48 17       	cp	r20, r24
    2e98:	81 f5       	brne	.+96     	; 0x2efa <fetch_display_frame+0x374>
    2e9a:	39 8d       	ldd	r19, Y+25	; 0x19
    2e9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e9e:	38 17       	cp	r19, r24
    2ea0:	61 f5       	brne	.+88     	; 0x2efa <fetch_display_frame+0x374>
    2ea2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2ea4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ea6:	28 17       	cp	r18, r24
    2ea8:	41 f5       	brne	.+80     	; 0x2efa <fetch_display_frame+0x374>
    2eaa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2eac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eae:	98 17       	cp	r25, r24
    2eb0:	21 f5       	brne	.+72     	; 0x2efa <fetch_display_frame+0x374>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2eb2:	43 17       	cp	r20, r19
    2eb4:	11 f5       	brne	.+68     	; 0x2efa <fetch_display_frame+0x374>
    2eb6:	42 17       	cp	r20, r18
    2eb8:	01 f5       	brne	.+64     	; 0x2efa <fetch_display_frame+0x374>
    2eba:	49 17       	cp	r20, r25
    2ebc:	f1 f4       	brne	.+60     	; 0x2efa <fetch_display_frame+0x374>
                                                if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    2ebe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ec0:	88 a1       	ldd	r24, Y+32	; 0x20
    2ec2:	98 17       	cp	r25, r24
    2ec4:	d1 f4       	brne	.+52     	; 0x2efa <fetch_display_frame+0x374>
    2ec6:	59 a1       	ldd	r21, Y+33	; 0x21
    2ec8:	8a a1       	ldd	r24, Y+34	; 0x22
    2eca:	58 17       	cp	r21, r24
    2ecc:	b1 f4       	brne	.+44     	; 0x2efa <fetch_display_frame+0x374>
    2ece:	3b a1       	ldd	r19, Y+35	; 0x23
    2ed0:	8c a1       	ldd	r24, Y+36	; 0x24
    2ed2:	38 17       	cp	r19, r24
    2ed4:	91 f4       	brne	.+36     	; 0x2efa <fetch_display_frame+0x374>
    2ed6:	2d a1       	ldd	r18, Y+37	; 0x25
    2ed8:	8e a1       	ldd	r24, Y+38	; 0x26
    2eda:	28 17       	cp	r18, r24
    2edc:	71 f4       	brne	.+28     	; 0x2efa <fetch_display_frame+0x374>
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    2ede:	95 17       	cp	r25, r21
    2ee0:	61 f4       	brne	.+24     	; 0x2efa <fetch_display_frame+0x374>
    2ee2:	93 17       	cp	r25, r19
    2ee4:	51 f4       	brne	.+20     	; 0x2efa <fetch_display_frame+0x374>
    2ee6:	92 17       	cp	r25, r18
    2ee8:	41 f4       	brne	.+16     	; 0x2efa <fetch_display_frame+0x374>
                                                        gscale[0] = FLASH[0];
    2eea:	7b 83       	std	Y+3, r23	; 0x03
                                                        gscale[1] = FLASH[8];
    2eec:	6c 83       	std	Y+4, r22	; 0x04
                                                        gscale[2] = FLASH[16];
    2eee:	4d 83       	std	Y+5, r20	; 0x05
                                                        gscale[3] = FLASH[24];
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2ef2:	80 2f       	mov	r24, r16
    2ef4:	64 e0       	ldi	r22, 0x04	; 4
    2ef6:	a5 01       	movw	r20, r10
    2ef8:	06 c0       	rjmp	.+12     	; 0x2f06 <fetch_display_frame+0x380>
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 32
                } //end of if ident_compress == 1
                
                if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    2efa:	ee 23       	and	r30, r30
    2efc:	31 f4       	brne	.+12     	; 0x2f0a <fetch_display_frame+0x384>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    2efe:	80 2f       	mov	r24, r16
    2f00:	60 91 9a 27 	lds	r22, 0x279A
    2f04:	a6 01       	movw	r20, r12
    2f06:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
            }
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2f0a:	0f 5f       	subi	r16, 0xFF	; 255
    2f0c:	80 91 e4 24 	lds	r24, 0x24E4
    2f10:	80 17       	cp	r24, r16
    2f12:	08 f4       	brcc	.+2      	; 0x2f16 <fetch_display_frame+0x390>
    2f14:	51 c0       	rjmp	.+162    	; 0x2fb8 <fetch_display_frame+0x432>
                for(j = 0;j < bytes_per_panel_frame;j++){
    2f16:	90 91 9a 27 	lds	r25, 0x279A
    2f1a:	d3 01       	movw	r26, r6
    2f1c:	ae 0d       	add	r26, r14
    2f1e:	bf 1d       	adc	r27, r15
    2f20:	f6 01       	movw	r30, r12
    2f22:	ff ce       	rjmp	.-514    	; 0x2d22 <fetch_display_frame+0x19c>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
                }
            } //end of for all panels loop
        }
        else {
            if (quiet_mode_on == 0){
    2f24:	80 91 f3 24 	lds	r24, 0x24F3
    2f28:	88 23       	and	r24, r24
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <fetch_display_frame+0x3a8>
    2f2c:	45 c0       	rjmp	.+138    	; 0x2fb8 <fetch_display_frame+0x432>
                xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    2f2e:	81 e3       	ldi	r24, 0x31	; 49
    2f30:	97 e0       	ldi	r25, 0x07	; 7
    2f32:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
                xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    2f36:	ad b7       	in	r26, 0x3d	; 61
    2f38:	be b7       	in	r27, 0x3e	; 62
    2f3a:	18 97       	sbiw	r26, 0x08	; 8
    2f3c:	ad bf       	out	0x3d, r26	; 61
    2f3e:	be bf       	out	0x3e, r27	; 62
    2f40:	ed b7       	in	r30, 0x3d	; 61
    2f42:	fe b7       	in	r31, 0x3e	; 62
    2f44:	31 96       	adiw	r30, 0x01	; 1
    2f46:	83 e1       	ldi	r24, 0x13	; 19
    2f48:	97 e0       	ldi	r25, 0x07	; 7
    2f4a:	11 96       	adiw	r26, 0x01	; 1
    2f4c:	8d 93       	st	X+, r24
    2f4e:	9c 93       	st	X, r25
    2f50:	12 97       	sbiw	r26, 0x02	; 2
    2f52:	02 83       	std	Z+2, r16	; 0x02
    2f54:	13 82       	std	Z+3, r1	; 0x03
    2f56:	84 82       	std	Z+4, r8	; 0x04
    2f58:	95 82       	std	Z+5, r9	; 0x05
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5e:	86 83       	std	Z+6, r24	; 0x06
    2f60:	97 83       	std	Z+7, r25	; 0x07
    2f62:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    2f66:	8d b7       	in	r24, 0x3d	; 61
    2f68:	9e b7       	in	r25, 0x3e	; 62
    2f6a:	08 96       	adiw	r24, 0x08	; 8
    2f6c:	23 c0       	rjmp	.+70     	; 0x2fb4 <fetch_display_frame+0x42e>
        //    Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);	//straigforward way to avoid fs reentrant
        
        //if ((func_ID_Y != 0) && (Stop == 0)) 
        //    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);   //straigforward way to avoid fs reentrant
        
        if (quiet_mode_on == 0){
    2f6e:	80 91 f3 24 	lds	r24, 0x24F3
    2f72:	88 23       	and	r24, r24
    2f74:	09 f5       	brne	.+66     	; 0x2fb8 <fetch_display_frame+0x432>
            xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    2f76:	89 ee       	ldi	r24, 0xE9	; 233
    2f78:	96 e0       	ldi	r25, 0x06	; 6
    2f7a:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    2f7e:	ad b7       	in	r26, 0x3d	; 61
    2f80:	be b7       	in	r27, 0x3e	; 62
    2f82:	1a 97       	sbiw	r26, 0x0a	; 10
    2f84:	ad bf       	out	0x3d, r26	; 61
    2f86:	be bf       	out	0x3e, r27	; 62
    2f88:	ed b7       	in	r30, 0x3d	; 61
    2f8a:	fe b7       	in	r31, 0x3e	; 62
    2f8c:	31 96       	adiw	r30, 0x01	; 1
    2f8e:	86 ec       	ldi	r24, 0xC6	; 198
    2f90:	96 e0       	ldi	r25, 0x06	; 6
    2f92:	11 96       	adiw	r26, 0x01	; 1
    2f94:	8d 93       	st	X+, r24
    2f96:	9c 93       	st	X, r25
    2f98:	12 97       	sbiw	r26, 0x02	; 2
    2f9a:	02 83       	std	Z+2, r16	; 0x02
    2f9c:	13 82       	std	Z+3, r1	; 0x03
    2f9e:	84 82       	std	Z+4, r8	; 0x04
    2fa0:	95 82       	std	Z+5, r9	; 0x05
    2fa2:	c6 82       	std	Z+6, r12	; 0x06
    2fa4:	d7 82       	std	Z+7, r13	; 0x07
    2fa6:	e0 86       	std	Z+8, r14	; 0x08
    2fa8:	f1 86       	std	Z+9, r15	; 0x09
    2faa:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    2fae:	8d b7       	in	r24, 0x3d	; 61
    2fb0:	9e b7       	in	r25, 0x3e	; 62
    2fb2:	0a 96       	adiw	r24, 0x0a	; 10
    2fb4:	8d bf       	out	0x3d, r24	; 61
    2fb6:	9e bf       	out	0x3e, r25	; 62
        }
    }
    
    //update analog out
    if (x_mode != 5){
    2fb8:	80 91 99 27 	lds	r24, 0x2799
    2fbc:	85 30       	cpi	r24, 0x05	; 5
    2fbe:	e9 f0       	breq	.+58     	; 0x2ffa <fetch_display_frame+0x474>
        X_dac_val = (index_x*65535)/x_num;
    2fc0:	60 91 9b 27 	lds	r22, 0x279B
    2fc4:	70 91 9c 27 	lds	r23, 0x279C
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	2f ef       	ldi	r18, 0xFF	; 255
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    2fd8:	20 91 05 28 	lds	r18, 0x2805
    2fdc:	30 91 06 28 	lds	r19, 0x2806
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	50 e0       	ldi	r21, 0x00	; 0
    2fe4:	0e 94 30 58 	call	0xb060	; 0xb060 <__divmodsi4>
    2fe8:	55 e0       	ldi	r21, 0x05	; 5
    2fea:	36 95       	lsr	r19
    2fec:	27 95       	ror	r18
    2fee:	5a 95       	dec	r21
    2ff0:	e1 f7       	brne	.-8      	; 0x2fea <fetch_display_frame+0x464>
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	b9 01       	movw	r22, r18
    2ff6:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    }
    
    if (y_mode != 5){
    2ffa:	80 91 e3 27 	lds	r24, 0x27E3
    2ffe:	85 30       	cpi	r24, 0x05	; 5
    3000:	e9 f0       	breq	.+58     	; 0x303c <fetch_display_frame+0x4b6>
        Y_dac_val = (index_y*65535)/y_num;
    3002:	60 91 50 29 	lds	r22, 0x2950
    3006:	70 91 51 29 	lds	r23, 0x2951
        
        
        analogWrite(1, Y_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	2f ef       	ldi	r18, 0xFF	; 255
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    301a:	20 91 a6 25 	lds	r18, 0x25A6
    301e:	30 91 a7 25 	lds	r19, 0x25A7
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	0e 94 30 58 	call	0xb060	; 0xb060 <__divmodsi4>
    302a:	45 e0       	ldi	r20, 0x05	; 5
    302c:	36 95       	lsr	r19
    302e:	27 95       	ror	r18
    3030:	4a 95       	dec	r20
    3032:	e1 f7       	brne	.-8      	; 0x302c <fetch_display_frame+0x4a6>
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	b9 01       	movw	r22, r18
    3038:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    }
	
	  //also update the output lines for quadrant-type learning patterns
  if (Laser_active == 1)
    303c:	80 91 e2 24 	lds	r24, 0x24E2
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	81 f4       	brne	.+32     	; 0x3064 <fetch_display_frame+0x4de>
  {
    if (laserPattern[index_x] == 0) 
    3044:	e0 91 9b 27 	lds	r30, 0x279B
    3048:	f0 91 9c 27 	lds	r31, 0x279C
    304c:	ea 57       	subi	r30, 0x7A	; 122
    304e:	f9 4d       	sbci	r31, 0xD9	; 217
    3050:	80 81       	ld	r24, Z
    3052:	88 23       	and	r24, r24
    3054:	19 f4       	brne	.+6      	; 0x305c <fetch_display_frame+0x4d6>
      digitalWrite(2, LOW);  // turn on laser
    3056:	82 e0       	ldi	r24, 0x02	; 2
    3058:	60 e0       	ldi	r22, 0x00	; 0
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <fetch_display_frame+0x4da>
    else
      digitalWrite(2, HIGH);   // turn off laser
    305c:	82 e0       	ldi	r24, 0x02	; 2
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	0e 94 9b 21 	call	0x4336	; 0x4336 <digitalWrite>
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	0e 94 9b 21 	call	0x4336	; 0x4336 <digitalWrite>
}
    306c:	4d be       	out	0x3d, r4	; 61
    306e:	5e be       	out	0x3e, r5	; 62
    3070:	a6 96       	adiw	r28, 0x26	; 38
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	0f 91       	pop	r16
    307c:	ff 90       	pop	r15
    307e:	ef 90       	pop	r14
    3080:	df 90       	pop	r13
    3082:	cf 90       	pop	r12
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	7f 90       	pop	r7
    308e:	6f 90       	pop	r6
    3090:	5f 90       	pop	r5
    3092:	4f 90       	pop	r4
    3094:	08 95       	ret

00003096 <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    3096:	a0 e0       	ldi	r26, 0x00	; 0
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e1 e5       	ldi	r30, 0x51	; 81
    309c:	f8 e1       	ldi	r31, 0x18	; 24
    309e:	0c 94 53 58 	jmp	0xb0a6	; 0xb0a6 <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    30a8:	20 91 a6 25 	lds	r18, 0x25A6
    30ac:	30 91 a7 25 	lds	r19, 0x25A7
    30b0:	80 91 05 28 	lds	r24, 0x2805
    30b4:	90 91 06 28 	lds	r25, 0x2806
    30b8:	28 9f       	mul	r18, r24
    30ba:	50 01       	movw	r10, r0
    30bc:	29 9f       	mul	r18, r25
    30be:	b0 0c       	add	r11, r0
    30c0:	38 9f       	mul	r19, r24
    30c2:	b0 0c       	add	r11, r0
    30c4:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    30c6:	0e 94 9d 55 	call	0xab3a	; 0xab3a <timer_coarse_tic>
    30ca:	c0 e0       	ldi	r28, 0x00	; 0
    30cc:	d0 e0       	ldi	r29, 0x00	; 0
    30ce:	04 c0       	rjmp	.+8      	; 0x30d8 <benchmark_pattern+0x42>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind);
    30d0:	ce 01       	movw	r24, r28
    30d2:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    30d6:	21 96       	adiw	r28, 0x01	; 1
    30d8:	ca 15       	cp	r28, r10
    30da:	db 05       	cpc	r29, r11
    30dc:	c8 f3       	brcs	.-14     	; 0x30d0 <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind);
    
    bench_time = timer_coarse_toc();
    30de:	0e 94 b2 55 	call	0xab64	; 0xab64 <timer_coarse_toc>
    30e2:	7b 01       	movw	r14, r22
    30e4:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    30e6:	8d b7       	in	r24, 0x3d	; 61
    30e8:	9e b7       	in	r25, 0x3e	; 62
    30ea:	08 97       	sbiw	r24, 0x08	; 8
    30ec:	8d bf       	out	0x3d, r24	; 61
    30ee:	9e bf       	out	0x3e, r25	; 62
    30f0:	cd b6       	in	r12, 0x3d	; 61
    30f2:	de b6       	in	r13, 0x3e	; 62
    30f4:	08 94       	sec
    30f6:	c1 1c       	adc	r12, r1
    30f8:	d1 1c       	adc	r13, r1
    30fa:	80 e9       	ldi	r24, 0x90	; 144
    30fc:	95 e0       	ldi	r25, 0x05	; 5
    30fe:	ed b7       	in	r30, 0x3d	; 61
    3100:	fe b7       	in	r31, 0x3e	; 62
    3102:	81 83       	std	Z+1, r24	; 0x01
    3104:	92 83       	std	Z+2, r25	; 0x02
    3106:	f6 01       	movw	r30, r12
    3108:	e2 82       	std	Z+2, r14	; 0x02
    310a:	f3 82       	std	Z+3, r15	; 0x03
    310c:	04 83       	std	Z+4, r16	; 0x04
    310e:	15 83       	std	Z+5, r17	; 0x05
    3110:	b5 01       	movw	r22, r10
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	28 ee       	ldi	r18, 0xE8	; 232
    3118:	33 e0       	ldi	r19, 0x03	; 3
    311a:	40 e0       	ldi	r20, 0x00	; 0
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    3122:	a8 01       	movw	r20, r16
    3124:	97 01       	movw	r18, r14
    3126:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    312a:	f6 01       	movw	r30, r12
    312c:	26 83       	std	Z+6, r18	; 0x06
    312e:	37 83       	std	Z+7, r19	; 0x07
    3130:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    3134:	8d b7       	in	r24, 0x3d	; 61
    3136:	9e b7       	in	r25, 0x3e	; 62
    3138:	08 96       	adiw	r24, 0x08	; 8
    313a:	8d bf       	out	0x3d, r24	; 61
    313c:	9e bf       	out	0x3e, r25	; 62
}
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	ea e0       	ldi	r30, 0x0A	; 10
    3144:	0c 94 6f 58 	jmp	0xb0de	; 0xb0de <__epilogue_restores__+0x10>

00003148 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}



void set_pattern(uint8_t pat_num) {
    3148:	a2 e0       	ldi	r26, 0x02	; 2
    314a:	b2 e0       	ldi	r27, 0x02	; 2
    314c:	ea ea       	ldi	r30, 0xAA	; 170
    314e:	f8 e1       	ldi	r31, 0x18	; 24
    3150:	0c 94 59 58 	jmp	0xb0b2	; 0xb0b2 <__prologue_saves__+0x1c>
    3154:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    3156:	8a 30       	cpi	r24, 0x0A	; 10
    3158:	80 f4       	brcc	.+32     	; 0x317a <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    315a:	00 d0       	rcall	.+0      	; 0x315c <set_pattern+0x14>
    315c:	00 d0       	rcall	.+0      	; 0x315e <set_pattern+0x16>
    315e:	ed b7       	in	r30, 0x3d	; 61
    3160:	fe b7       	in	r31, 0x3e	; 62
    3162:	31 96       	adiw	r30, 0x01	; 1
    3164:	84 e0       	ldi	r24, 0x04	; 4
    3166:	95 e2       	ldi	r25, 0x25	; 37
    3168:	ad b7       	in	r26, 0x3d	; 61
    316a:	be b7       	in	r27, 0x3e	; 62
    316c:	11 96       	adiw	r26, 0x01	; 1
    316e:	8d 93       	st	X+, r24
    3170:	9c 93       	st	X, r25
    3172:	12 97       	sbiw	r26, 0x02	; 2
    3174:	85 e7       	ldi	r24, 0x75	; 117
    3176:	90 e2       	ldi	r25, 0x20	; 32
    3178:	1f c0       	rjmp	.+62     	; 0x31b8 <set_pattern+0x70>
    317a:	84 e0       	ldi	r24, 0x04	; 4
    317c:	95 e2       	ldi	r25, 0x25	; 37
    else if (pat_num < 100)
    317e:	14 36       	cpi	r17, 0x64	; 100
    3180:	70 f4       	brcc	.+28     	; 0x319e <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    3182:	00 d0       	rcall	.+0      	; 0x3184 <set_pattern+0x3c>
    3184:	00 d0       	rcall	.+0      	; 0x3186 <set_pattern+0x3e>
    3186:	ed b7       	in	r30, 0x3d	; 61
    3188:	fe b7       	in	r31, 0x3e	; 62
    318a:	31 96       	adiw	r30, 0x01	; 1
    318c:	ad b7       	in	r26, 0x3d	; 61
    318e:	be b7       	in	r27, 0x3e	; 62
    3190:	11 96       	adiw	r26, 0x01	; 1
    3192:	8d 93       	st	X+, r24
    3194:	9c 93       	st	X, r25
    3196:	12 97       	sbiw	r26, 0x02	; 2
    3198:	83 e8       	ldi	r24, 0x83	; 131
    319a:	90 e2       	ldi	r25, 0x20	; 32
    319c:	0d c0       	rjmp	.+26     	; 0x31b8 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <set_pattern+0x58>
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <set_pattern+0x5a>
    31a2:	ed b7       	in	r30, 0x3d	; 61
    31a4:	fe b7       	in	r31, 0x3e	; 62
    31a6:	31 96       	adiw	r30, 0x01	; 1
    31a8:	ad b7       	in	r26, 0x3d	; 61
    31aa:	be b7       	in	r27, 0x3e	; 62
    31ac:	11 96       	adiw	r26, 0x01	; 1
    31ae:	8d 93       	st	X+, r24
    31b0:	9c 93       	st	X, r25
    31b2:	12 97       	sbiw	r26, 0x02	; 2
    31b4:	80 e9       	ldi	r24, 0x90	; 144
    31b6:	90 e2       	ldi	r25, 0x20	; 32
    31b8:	82 83       	std	Z+2, r24	; 0x02
    31ba:	93 83       	std	Z+3, r25	; 0x03
    31bc:	14 83       	std	Z+4, r17	; 0x04
    31be:	15 82       	std	Z+5, r1	; 0x05
    31c0:	0e 94 ab 5a 	call	0xb556	; 0xb556 <sprintf>
    31c4:	8d b7       	in	r24, 0x3d	; 61
    31c6:	9e b7       	in	r25, 0x3e	; 62
    31c8:	06 96       	adiw	r24, 0x06	; 6
    31ca:	8d bf       	out	0x3d, r24	; 61
    31cc:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
    
    //in case user forgets to 'stop' before set another pattern
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //straigforward way to avoid fs reentrant
    31ce:	40 91 9f 20 	lds	r20, 0x209F
    31d2:	50 91 a0 20 	lds	r21, 0x20A0
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	82 ed       	ldi	r24, 0xD2	; 210
    31dc:	9b e0       	ldi	r25, 0x0B	; 11
    31de:	24 e0       	ldi	r18, 0x04	; 4
    31e0:	00 e0       	ldi	r16, 0x00	; 0
    31e2:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //straigforward way to avoid fs reentrant
    31e6:	40 91 a1 20 	lds	r20, 0x20A1
    31ea:	50 91 a2 20 	lds	r21, 0x20A2
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	84 e6       	ldi	r24, 0x64	; 100
    31f4:	9a e0       	ldi	r25, 0x0A	; 10
    31f6:	25 e0       	ldi	r18, 0x05	; 5
    31f8:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
	
    res = f_close(&file1);
    31fc:	82 e5       	ldi	r24, 0x52	; 82
    31fe:	99 e2       	ldi	r25, 0x29	; 41
    3200:	0e 94 fe 48 	call	0x91fc	; 0x91fc <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    3204:	82 e5       	ldi	r24, 0x52	; 82
    3206:	99 e2       	ldi	r25, 0x29	; 41
    3208:	64 e0       	ldi	r22, 0x04	; 4
    320a:	75 e2       	ldi	r23, 0x25	; 37
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
    if (res == FR_OK) {
    3212:	88 23       	and	r24, r24
    3214:	09 f0       	breq	.+2      	; 0x3218 <set_pattern+0xd0>
    3216:	a7 c0       	rjmp	.+334    	; 0x3366 <set_pattern+0x21e>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    3218:	82 e5       	ldi	r24, 0x52	; 82
    321a:	99 e2       	ldi	r25, 0x29	; 41
    321c:	be 01       	movw	r22, r28
    321e:	6d 5f       	subi	r22, 0xFD	; 253
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	52 e0       	ldi	r21, 0x02	; 2
    3226:	9e 01       	movw	r18, r28
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    3230:	88 23       	and	r24, r24
    3232:	09 f0       	breq	.+2      	; 0x3236 <set_pattern+0xee>
    3234:	91 c0       	rjmp	.+290    	; 0x3358 <set_pattern+0x210>
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	80 50       	subi	r24, 0x00	; 0
    323c:	92 40       	sbci	r25, 0x02	; 2
    323e:	09 f0       	breq	.+2      	; 0x3242 <set_pattern+0xfa>
    3240:	8b c0       	rjmp	.+278    	; 0x3358 <set_pattern+0x210>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	80 93 05 28 	sts	0x2805, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    3248:	8c 81       	ldd	r24, Y+4	; 0x04
    324a:	80 93 06 28 	sts	0x2806, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	80 93 a6 25 	sts	0x25A6, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    3254:	8e 81       	ldd	r24, Y+6	; 0x06
    3256:	80 93 a7 25 	sts	0x25A7, r24
            num_panels = pattDataBuff[4];
    325a:	8f 81       	ldd	r24, Y+7	; 0x07
    325c:	80 93 e4 24 	sts	0x24E4, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    3260:	98 85       	ldd	r25, Y+8	; 0x08
    3262:	90 93 17 27 	sts	0x2717, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    3266:	89 2f       	mov	r24, r25
    3268:	8b 50       	subi	r24, 0x0B	; 11
    326a:	84 30       	cpi	r24, 0x04	; 4
    326c:	48 f4       	brcc	.+18     	; 0x3280 <set_pattern+0x138>
                gs_value = gs_value - 10;
    326e:	9a 50       	subi	r25, 0x0A	; 10
    3270:	90 93 17 27 	sts	0x2717, r25
                row_compress = 1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 aa 25 	sts	0x25AA, r24
                bytes_per_panel_frame = gs_value;
    327a:	90 93 9a 27 	sts	0x279A, r25
    327e:	0b c0       	rjmp	.+22     	; 0x3296 <set_pattern+0x14e>
            }
            else {
                row_compress = 0;
    3280:	10 92 aa 25 	sts	0x25AA, r1
                bytes_per_panel_frame = gs_value * 8;
    3284:	89 2f       	mov	r24, r25
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	f3 e0       	ldi	r31, 0x03	; 3
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	fa 95       	dec	r31
    3290:	e1 f7       	brne	.-8      	; 0x328a <set_pattern+0x142>
    3292:	80 93 9a 27 	sts	0x279A, r24
            }
            index_x = index_y = 0;
    3296:	10 92 50 29 	sts	0x2950, r1
    329a:	10 92 51 29 	sts	0x2951, r1
    329e:	80 91 50 29 	lds	r24, 0x2950
    32a2:	90 91 51 29 	lds	r25, 0x2951
    32a6:	80 93 9b 27 	sts	0x279B, r24
    32aa:	90 93 9c 27 	sts	0x279C, r25
            frame_num = 0;
    32ae:	10 92 e5 24 	sts	0x24E5, r1
    32b2:	10 92 e6 24 	sts	0x24E6, r1
            Stop = 1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    32bc:	10 92 e0 24 	sts	0x24E0, r1
            if (quiet_mode_on == 0){
    32c0:	80 91 f3 24 	lds	r24, 0x24F3
    32c4:	88 23       	and	r24, r24
    32c6:	09 f0       	breq	.+2      	; 0x32ca <set_pattern+0x182>
    32c8:	40 c0       	rjmp	.+128    	; 0x334a <set_pattern+0x202>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <set_pattern+0x184>
    32cc:	0f 92       	push	r0
    32ce:	ed b7       	in	r30, 0x3d	; 61
    32d0:	fe b7       	in	r31, 0x3e	; 62
    32d2:	31 96       	adiw	r30, 0x01	; 1
    32d4:	81 eb       	ldi	r24, 0xB1	; 177
    32d6:	96 e0       	ldi	r25, 0x06	; 6
    32d8:	ad b7       	in	r26, 0x3d	; 61
    32da:	be b7       	in	r27, 0x3e	; 62
    32dc:	11 96       	adiw	r26, 0x01	; 1
    32de:	8d 93       	st	X+, r24
    32e0:	9c 93       	st	X, r25
    32e2:	12 97       	sbiw	r26, 0x02	; 2
    32e4:	12 83       	std	Z+2, r17	; 0x02
    32e6:	13 82       	std	Z+3, r1	; 0x03
    32e8:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    32ec:	8d b7       	in	r24, 0x3d	; 61
    32ee:	9e b7       	in	r25, 0x3e	; 62
    32f0:	08 97       	sbiw	r24, 0x08	; 8
    32f2:	8d bf       	out	0x3d, r24	; 61
    32f4:	9e bf       	out	0x3e, r25	; 62
    32f6:	ed b7       	in	r30, 0x3d	; 61
    32f8:	fe b7       	in	r31, 0x3e	; 62
    32fa:	31 96       	adiw	r30, 0x01	; 1
    32fc:	8e e5       	ldi	r24, 0x5E	; 94
    32fe:	96 e0       	ldi	r25, 0x06	; 6
    3300:	ad b7       	in	r26, 0x3d	; 61
    3302:	be b7       	in	r27, 0x3e	; 62
    3304:	11 96       	adiw	r26, 0x01	; 1
    3306:	8d 93       	st	X+, r24
    3308:	9c 93       	st	X, r25
    330a:	12 97       	sbiw	r26, 0x02	; 2
    330c:	80 91 05 28 	lds	r24, 0x2805
    3310:	90 91 06 28 	lds	r25, 0x2806
    3314:	82 83       	std	Z+2, r24	; 0x02
    3316:	93 83       	std	Z+3, r25	; 0x03
    3318:	80 91 a6 25 	lds	r24, 0x25A6
    331c:	90 91 a7 25 	lds	r25, 0x25A7
    3320:	84 83       	std	Z+4, r24	; 0x04
    3322:	95 83       	std	Z+5, r25	; 0x05
    3324:	80 91 e4 24 	lds	r24, 0x24E4
    3328:	86 83       	std	Z+6, r24	; 0x06
    332a:	17 82       	std	Z+7, r1	; 0x07
    332c:	80 91 17 27 	lds	r24, 0x2717
    3330:	80 87       	std	Z+8, r24	; 0x08
    3332:	11 86       	std	Z+9, r1	; 0x09
    3334:	80 91 aa 25 	lds	r24, 0x25AA
    3338:	82 87       	std	Z+10, r24	; 0x0a
    333a:	13 86       	std	Z+11, r1	; 0x0b
    333c:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    3340:	8d b7       	in	r24, 0x3d	; 61
    3342:	9e b7       	in	r25, 0x3e	; 62
    3344:	0c 96       	adiw	r24, 0x0c	; 12
    3346:	8d bf       	out	0x3d, r24	; 61
    3348:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num);
    334a:	80 91 e5 24 	lds	r24, 0x24E5
    334e:	90 91 e6 24 	lds	r25, 0x24E6
    3352:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <fetch_display_frame>
    3356:	0f c0       	rjmp	.+30     	; 0x3376 <set_pattern+0x22e>
        } else {
            if (quiet_mode_on == 0)
    3358:	80 91 f3 24 	lds	r24, 0x24F3
    335c:	88 23       	and	r24, r24
    335e:	59 f4       	brne	.+22     	; 0x3376 <set_pattern+0x22e>
                xputs(PSTR("Error reading in pattern file\n"));
    3360:	8f e3       	ldi	r24, 0x3F	; 63
    3362:	96 e0       	ldi	r25, 0x06	; 6
    3364:	06 c0       	rjmp	.+12     	; 0x3372 <set_pattern+0x22a>
        }
    } else {
        if (quiet_mode_on == 0)
    3366:	80 91 f3 24 	lds	r24, 0x24F3
    336a:	88 23       	and	r24, r24
    336c:	21 f4       	brne	.+8      	; 0x3376 <set_pattern+0x22e>
            xputs(PSTR("Error opening pattern file\n"));
    336e:	83 e2       	ldi	r24, 0x23	; 35
    3370:	96 e0       	ldi	r25, 0x06	; 6
    3372:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    }
}
    3376:	ce 5f       	subi	r28, 0xFE	; 254
    3378:	dd 4f       	sbci	r29, 0xFD	; 253
    337a:	e4 e0       	ldi	r30, 0x04	; 4
    337c:	0c 94 75 58 	jmp	0xb0ea	; 0xb0ea <__epilogue_restores__+0x1c>

00003380 <handle_message_length_5>:
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    3380:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    3382:	80 81       	ld	r24, Z
    3384:	80 37       	cpi	r24, 0x70	; 112
    3386:	21 f0       	breq	.+8      	; 0x3390 <handle_message_length_5+0x10>
    3388:	81 37       	cpi	r24, 0x71	; 113
    338a:	09 f0       	breq	.+2      	; 0x338e <handle_message_length_5+0xe>
    338c:	b5 c0       	rjmp	.+362    	; 0x34f8 <handle_message_length_5+0x178>
    338e:	73 c0       	rjmp	.+230    	; 0x3476 <handle_message_length_5+0xf6>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    3390:	92 81       	ldd	r25, Z+2	; 0x02
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	21 81       	ldd	r18, Z+1	; 0x01
    3396:	82 0f       	add	r24, r18
    3398:	91 1d       	adc	r25, r1
    339a:	80 93 9b 27 	sts	0x279B, r24
    339e:	90 93 9c 27 	sts	0x279C, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    33a2:	94 81       	ldd	r25, Z+4	; 0x04
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	23 81       	ldd	r18, Z+3	; 0x03
    33a8:	82 0f       	add	r24, r18
    33aa:	91 1d       	adc	r25, r1
    33ac:	80 93 50 29 	sts	0x2950, r24
    33b0:	90 93 51 29 	sts	0x2951, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    33b4:	80 91 9b 27 	lds	r24, 0x279B
    33b8:	90 91 9c 27 	lds	r25, 0x279C
    33bc:	80 93 e6 26 	sts	0x26E6, r24
    33c0:	90 93 e7 26 	sts	0x26E7, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    33c4:	80 91 50 29 	lds	r24, 0x2950
    33c8:	90 91 51 29 	lds	r25, 0x2951
    33cc:	80 93 73 26 	sts	0x2673, r24
    33d0:	90 93 74 26 	sts	0x2674, r25
            frame_num = index_y* x_num + index_x;
    33d4:	20 91 50 29 	lds	r18, 0x2950
    33d8:	30 91 51 29 	lds	r19, 0x2951
    33dc:	40 91 9b 27 	lds	r20, 0x279B
    33e0:	50 91 9c 27 	lds	r21, 0x279C
    33e4:	80 91 05 28 	lds	r24, 0x2805
    33e8:	90 91 06 28 	lds	r25, 0x2806
    33ec:	bc 01       	movw	r22, r24
    33ee:	26 9f       	mul	r18, r22
    33f0:	c0 01       	movw	r24, r0
    33f2:	27 9f       	mul	r18, r23
    33f4:	90 0d       	add	r25, r0
    33f6:	36 9f       	mul	r19, r22
    33f8:	90 0d       	add	r25, r0
    33fa:	11 24       	eor	r1, r1
    33fc:	84 0f       	add	r24, r20
    33fe:	95 1f       	adc	r25, r21
    3400:	80 93 e5 24 	sts	0x24E5, r24
    3404:	90 93 e6 24 	sts	0x24E6, r25
            display_flag = 0;  //clear the display flag
    3408:	10 92 e0 24 	sts	0x24E0, r1
            if (quiet_mode_on == 0)
    340c:	80 91 f3 24 	lds	r24, 0x24F3
    3410:	88 23       	and	r24, r24
    3412:	51 f5       	brne	.+84     	; 0x3468 <handle_message_length_5+0xe8>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    3414:	20 91 9b 27 	lds	r18, 0x279B
    3418:	30 91 9c 27 	lds	r19, 0x279C
    341c:	40 91 50 29 	lds	r20, 0x2950
    3420:	50 91 51 29 	lds	r21, 0x2951
    3424:	60 91 e5 24 	lds	r22, 0x24E5
    3428:	70 91 e6 24 	lds	r23, 0x24E6
    342c:	8d b7       	in	r24, 0x3d	; 61
    342e:	9e b7       	in	r25, 0x3e	; 62
    3430:	08 97       	sbiw	r24, 0x08	; 8
    3432:	8d bf       	out	0x3d, r24	; 61
    3434:	9e bf       	out	0x3e, r25	; 62
    3436:	ed b7       	in	r30, 0x3d	; 61
    3438:	fe b7       	in	r31, 0x3e	; 62
    343a:	31 96       	adiw	r30, 0x01	; 1
    343c:	8d eb       	ldi	r24, 0xBD	; 189
    343e:	97 e0       	ldi	r25, 0x07	; 7
    3440:	ad b7       	in	r26, 0x3d	; 61
    3442:	be b7       	in	r27, 0x3e	; 62
    3444:	11 96       	adiw	r26, 0x01	; 1
    3446:	8d 93       	st	X+, r24
    3448:	9c 93       	st	X, r25
    344a:	12 97       	sbiw	r26, 0x02	; 2
    344c:	22 83       	std	Z+2, r18	; 0x02
    344e:	33 83       	std	Z+3, r19	; 0x03
    3450:	44 83       	std	Z+4, r20	; 0x04
    3452:	55 83       	std	Z+5, r21	; 0x05
    3454:	66 83       	std	Z+6, r22	; 0x06
    3456:	77 83       	std	Z+7, r23	; 0x07
    3458:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    345c:	6d b7       	in	r22, 0x3d	; 61
    345e:	7e b7       	in	r23, 0x3e	; 62
    3460:	68 5f       	subi	r22, 0xF8	; 248
    3462:	7f 4f       	sbci	r23, 0xFF	; 255
    3464:	6d bf       	out	0x3d, r22	; 61
    3466:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num);
    3468:	80 91 e5 24 	lds	r24, 0x24E5
    346c:	90 91 e6 24 	lds	r25, 0x24E6
    3470:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <fetch_display_frame>
    3474:	08 95       	ret
            break;
            
        case 0x71:
            //'send_gain_bias', all of these are signed byte values
            gain_x = msg_buffer[1];
    3476:	51 81       	ldd	r21, Z+1	; 0x01
    3478:	50 93 e4 27 	sts	0x27E4, r21
            bias_x = msg_buffer[2];
    347c:	42 81       	ldd	r20, Z+2	; 0x02
    347e:	40 93 96 25 	sts	0x2596, r20
            gain_y = msg_buffer[3];
    3482:	33 81       	ldd	r19, Z+3	; 0x03
    3484:	30 93 9d 27 	sts	0x279D, r19
            bias_y = msg_buffer[4];
    3488:	24 81       	ldd	r18, Z+4	; 0x04
    348a:	20 93 b4 2b 	sts	0x2BB4, r18
			if (quiet_mode_on == 0)
    348e:	80 91 f3 24 	lds	r24, 0x24F3
    3492:	88 23       	and	r24, r24
    3494:	b9 f5       	brne	.+110    	; 0x3504 <handle_message_length_5+0x184>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), gain_x, bias_x, gain_y, bias_y);
    3496:	8d b7       	in	r24, 0x3d	; 61
    3498:	9e b7       	in	r25, 0x3e	; 62
    349a:	0a 97       	sbiw	r24, 0x0a	; 10
    349c:	8d bf       	out	0x3d, r24	; 61
    349e:	9e bf       	out	0x3e, r25	; 62
    34a0:	ed b7       	in	r30, 0x3d	; 61
    34a2:	fe b7       	in	r31, 0x3e	; 62
    34a4:	31 96       	adiw	r30, 0x01	; 1
    34a6:	8e e7       	ldi	r24, 0x7E	; 126
    34a8:	97 e0       	ldi	r25, 0x07	; 7
    34aa:	ad b7       	in	r26, 0x3d	; 61
    34ac:	be b7       	in	r27, 0x3e	; 62
    34ae:	11 96       	adiw	r26, 0x01	; 1
    34b0:	8d 93       	st	X+, r24
    34b2:	9c 93       	st	X, r25
    34b4:	12 97       	sbiw	r26, 0x02	; 2
    34b6:	85 2f       	mov	r24, r21
    34b8:	99 27       	eor	r25, r25
    34ba:	87 fd       	sbrc	r24, 7
    34bc:	90 95       	com	r25
    34be:	82 83       	std	Z+2, r24	; 0x02
    34c0:	93 83       	std	Z+3, r25	; 0x03
    34c2:	84 2f       	mov	r24, r20
    34c4:	99 27       	eor	r25, r25
    34c6:	87 fd       	sbrc	r24, 7
    34c8:	90 95       	com	r25
    34ca:	84 83       	std	Z+4, r24	; 0x04
    34cc:	95 83       	std	Z+5, r25	; 0x05
    34ce:	83 2f       	mov	r24, r19
    34d0:	99 27       	eor	r25, r25
    34d2:	87 fd       	sbrc	r24, 7
    34d4:	90 95       	com	r25
    34d6:	86 83       	std	Z+6, r24	; 0x06
    34d8:	97 83       	std	Z+7, r25	; 0x07
    34da:	82 2f       	mov	r24, r18
    34dc:	99 27       	eor	r25, r25
    34de:	87 fd       	sbrc	r24, 7
    34e0:	90 95       	com	r25
    34e2:	80 87       	std	Z+8, r24	; 0x08
    34e4:	91 87       	std	Z+9, r25	; 0x09
    34e6:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    34ea:	6d b7       	in	r22, 0x3d	; 61
    34ec:	7e b7       	in	r23, 0x3e	; 62
    34ee:	66 5f       	subi	r22, 0xF6	; 246
    34f0:	7f 4f       	sbci	r23, 0xFF	; 255
    34f2:	6d bf       	out	0x3d, r22	; 61
    34f4:	7e bf       	out	0x3e, r23	; 62
    34f6:	08 95       	ret
            break;
            
            
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	68 e0       	ldi	r22, 0x08	; 8
    34fc:	41 ee       	ldi	r20, 0xE1	; 225
    34fe:	50 e2       	ldi	r21, 0x20	; 32
    3500:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    3504:	08 95       	ret

00003506 <handle_message_length_2>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    3506:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    3508:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    350a:	80 81       	ld	r24, Z
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	fc 01       	movw	r30, r24
    3510:	31 97       	sbiw	r30, 0x01	; 1
    3512:	e9 30       	cpi	r30, 0x09	; 9
    3514:	f1 05       	cpc	r31, r1
    3516:	78 f5       	brcc	.+94     	; 0x3576 <handle_message_length_2+0x70>
    3518:	e6 50       	subi	r30, 0x06	; 6
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	0c 94 82 58 	jmp	0xb104	; 0xb104 <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    3520:	82 2f       	mov	r24, r18
    3522:	62 e0       	ldi	r22, 0x02	; 2
    3524:	49 ef       	ldi	r20, 0xF9	; 249
    3526:	50 e2       	ldi	r21, 0x20	; 32
    3528:	2a c0       	rjmp	.+84     	; 0x357e <handle_message_length_2+0x78>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    352a:	82 2f       	mov	r24, r18
    352c:	62 e0       	ldi	r22, 0x02	; 2
    352e:	4b ef       	ldi	r20, 0xFB	; 251
    3530:	50 e2       	ldi	r21, 0x20	; 32
    3532:	25 c0       	rjmp	.+74     	; 0x357e <handle_message_length_2+0x78>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    3534:	82 2f       	mov	r24, r18
    3536:	0e 94 a4 18 	call	0x3148	; 0x3148 <set_pattern>
    353a:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    353c:	82 2f       	mov	r24, r18
    353e:	0e 94 c1 22 	call	0x4582	; 0x4582 <test_ADC>
    3542:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    3544:	82 2f       	mov	r24, r18
    3546:	0e 94 65 22 	call	0x44ca	; 0x44ca <test_DIO>
    354a:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    354c:	82 2f       	mov	r24, r18
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	80 93 a3 20 	sts	0x20A3, r24
    3558:	90 93 a4 20 	sts	0x20A4, r25
    355c:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    355e:	82 2f       	mov	r24, r18
    3560:	0e 94 1f 29 	call	0x523e	; 0x523e <flash_panel>
    3564:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    3566:	82 2f       	mov	r24, r18
    3568:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <eeprom_panel>
    356c:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    356e:	82 2f       	mov	r24, r18
    3570:	0e 94 1d 11 	call	0x223a	; 0x223a <set_hwConfig>
    3574:	08 95       	ret
            break;	
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	68 e0       	ldi	r22, 0x08	; 8
    357a:	49 ec       	ldi	r20, 0xC9	; 201
    357c:	50 e2       	ldi	r21, 0x20	; 32
    357e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    3582:	08 95       	ret

00003584 <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    3584:	a2 e0       	ldi	r26, 0x02	; 2
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e8 ec       	ldi	r30, 0xC8	; 200
    358a:	fa e1       	ldi	r31, 0x1A	; 26
    358c:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    3590:	fc 01       	movw	r30, r24
    uint8_t CMD[2];
    uint8_t i;
    
    switch(msg_buffer[0]) {
    3592:	e0 81       	ld	r30, Z
    3594:	e4 34       	cpi	r30, 0x44	; 68
    3596:	09 f4       	brne	.+2      	; 0x359a <handle_message_length_1+0x16>
    3598:	15 c2       	rjmp	.+1066   	; 0x39c4 <handle_message_length_1+0x440>
    359a:	e5 34       	cpi	r30, 0x45	; 69
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <handle_message_length_1+0x1c>
    359e:	5b c0       	rjmp	.+182    	; 0x3656 <handle_message_length_1+0xd2>
    35a0:	e0 32       	cpi	r30, 0x20	; 32
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <handle_message_length_1+0x22>
    35a4:	b3 c0       	rjmp	.+358    	; 0x370c <handle_message_length_1+0x188>
    35a6:	e1 32       	cpi	r30, 0x21	; 33
    35a8:	58 f5       	brcc	.+86     	; 0x3600 <handle_message_length_1+0x7c>
    35aa:	e4 31       	cpi	r30, 0x14	; 20
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <handle_message_length_1+0x2c>
    35ae:	8e c2       	rjmp	.+1308   	; 0x3acc <handle_message_length_1+0x548>
    35b0:	e5 31       	cpi	r30, 0x15	; 21
    35b2:	98 f4       	brcc	.+38     	; 0x35da <handle_message_length_1+0x56>
    35b4:	e1 31       	cpi	r30, 0x11	; 17
    35b6:	09 f4       	brne	.+2      	; 0x35ba <handle_message_length_1+0x36>
    35b8:	7b c2       	rjmp	.+1270   	; 0x3ab0 <handle_message_length_1+0x52c>
    35ba:	e2 31       	cpi	r30, 0x12	; 18
    35bc:	38 f4       	brcc	.+14     	; 0x35cc <handle_message_length_1+0x48>
    35be:	ee 23       	and	r30, r30
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <handle_message_length_1+0x40>
    35c2:	e7 c1       	rjmp	.+974    	; 0x3992 <handle_message_length_1+0x40e>
    35c4:	e0 31       	cpi	r30, 0x10	; 16
    35c6:	09 f0       	breq	.+2      	; 0x35ca <handle_message_length_1+0x46>
    35c8:	18 c3       	rjmp	.+1584   	; 0x3bfa <handle_message_length_1+0x676>
    35ca:	6e c2       	rjmp	.+1244   	; 0x3aa8 <handle_message_length_1+0x524>
    35cc:	e2 31       	cpi	r30, 0x12	; 18
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <handle_message_length_1+0x4e>
    35d0:	76 c2       	rjmp	.+1260   	; 0x3abe <handle_message_length_1+0x53a>
    35d2:	e3 31       	cpi	r30, 0x13	; 19
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <handle_message_length_1+0x54>
    35d6:	11 c3       	rjmp	.+1570   	; 0x3bfa <handle_message_length_1+0x676>
    35d8:	76 c2       	rjmp	.+1260   	; 0x3ac6 <handle_message_length_1+0x542>
    35da:	e7 31       	cpi	r30, 0x17	; 23
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <handle_message_length_1+0x5c>
    35de:	9c c2       	rjmp	.+1336   	; 0x3b18 <handle_message_length_1+0x594>
    35e0:	e8 31       	cpi	r30, 0x18	; 24
    35e2:	38 f4       	brcc	.+14     	; 0x35f2 <handle_message_length_1+0x6e>
    35e4:	e5 31       	cpi	r30, 0x15	; 21
    35e6:	09 f4       	brne	.+2      	; 0x35ea <handle_message_length_1+0x66>
    35e8:	74 c2       	rjmp	.+1256   	; 0x3ad2 <handle_message_length_1+0x54e>
    35ea:	e6 31       	cpi	r30, 0x16	; 22
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <handle_message_length_1+0x6c>
    35ee:	05 c3       	rjmp	.+1546   	; 0x3bfa <handle_message_length_1+0x676>
    35f0:	7b c2       	rjmp	.+1270   	; 0x3ae8 <handle_message_length_1+0x564>
    35f2:	e8 31       	cpi	r30, 0x18	; 24
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <handle_message_length_1+0x74>
    35f6:	94 c2       	rjmp	.+1320   	; 0x3b20 <handle_message_length_1+0x59c>
    35f8:	e9 31       	cpi	r30, 0x19	; 25
    35fa:	09 f0       	breq	.+2      	; 0x35fe <handle_message_length_1+0x7a>
    35fc:	fe c2       	rjmp	.+1532   	; 0x3bfa <handle_message_length_1+0x676>
    35fe:	93 c2       	rjmp	.+1318   	; 0x3b26 <handle_message_length_1+0x5a2>
    3600:	e0 33       	cpi	r30, 0x30	; 48
    3602:	09 f4       	brne	.+2      	; 0x3606 <handle_message_length_1+0x82>
    3604:	d7 c0       	rjmp	.+430    	; 0x37b4 <handle_message_length_1+0x230>
    3606:	e1 33       	cpi	r30, 0x31	; 49
    3608:	98 f4       	brcc	.+38     	; 0x3630 <handle_message_length_1+0xac>
    360a:	e3 32       	cpi	r30, 0x23	; 35
    360c:	09 f4       	brne	.+2      	; 0x3610 <handle_message_length_1+0x8c>
    360e:	bb c2       	rjmp	.+1398   	; 0x3b86 <handle_message_length_1+0x602>
    3610:	e4 32       	cpi	r30, 0x24	; 36
    3612:	38 f4       	brcc	.+14     	; 0x3622 <handle_message_length_1+0x9e>
    3614:	e1 32       	cpi	r30, 0x21	; 33
    3616:	09 f4       	brne	.+2      	; 0x361a <handle_message_length_1+0x96>
    3618:	9a c2       	rjmp	.+1332   	; 0x3b4e <handle_message_length_1+0x5ca>
    361a:	e2 32       	cpi	r30, 0x22	; 34
    361c:	09 f0       	breq	.+2      	; 0x3620 <handle_message_length_1+0x9c>
    361e:	ed c2       	rjmp	.+1498   	; 0x3bfa <handle_message_length_1+0x676>
    3620:	a0 c2       	rjmp	.+1344   	; 0x3b62 <handle_message_length_1+0x5de>
    3622:	e4 32       	cpi	r30, 0x24	; 36
    3624:	09 f4       	brne	.+2      	; 0x3628 <handle_message_length_1+0xa4>
    3626:	cc c2       	rjmp	.+1432   	; 0x3bc0 <handle_message_length_1+0x63c>
    3628:	e5 32       	cpi	r30, 0x25	; 37
    362a:	09 f0       	breq	.+2      	; 0x362e <handle_message_length_1+0xaa>
    362c:	e6 c2       	rjmp	.+1484   	; 0x3bfa <handle_message_length_1+0x676>
    362e:	f8 c0       	rjmp	.+496    	; 0x3820 <handle_message_length_1+0x29c>
    3630:	e1 34       	cpi	r30, 0x41	; 65
    3632:	09 f4       	brne	.+2      	; 0x3636 <handle_message_length_1+0xb2>
    3634:	b8 c1       	rjmp	.+880    	; 0x39a6 <handle_message_length_1+0x422>
    3636:	e2 34       	cpi	r30, 0x42	; 66
    3638:	38 f4       	brcc	.+14     	; 0x3648 <handle_message_length_1+0xc4>
    363a:	e5 33       	cpi	r30, 0x35	; 53
    363c:	09 f4       	brne	.+2      	; 0x3640 <handle_message_length_1+0xbc>
    363e:	5f c1       	rjmp	.+702    	; 0x38fe <handle_message_length_1+0x37a>
    3640:	e0 34       	cpi	r30, 0x40	; 64
    3642:	09 f0       	breq	.+2      	; 0x3646 <handle_message_length_1+0xc2>
    3644:	da c2       	rjmp	.+1460   	; 0x3bfa <handle_message_length_1+0x676>
    3646:	aa c1       	rjmp	.+852    	; 0x399c <handle_message_length_1+0x418>
    3648:	e2 34       	cpi	r30, 0x42	; 66
    364a:	09 f4       	brne	.+2      	; 0x364e <handle_message_length_1+0xca>
    364c:	b1 c1       	rjmp	.+866    	; 0x39b0 <handle_message_length_1+0x42c>
    364e:	e3 34       	cpi	r30, 0x43	; 67
    3650:	09 f0       	breq	.+2      	; 0x3654 <handle_message_length_1+0xd0>
    3652:	d3 c2       	rjmp	.+1446   	; 0x3bfa <handle_message_length_1+0x676>
    3654:	b2 c1       	rjmp	.+868    	; 0x39ba <handle_message_length_1+0x436>
    3656:	e5 39       	cpi	r30, 0x95	; 149
    3658:	09 f4       	brne	.+2      	; 0x365c <handle_message_length_1+0xd8>
    365a:	ef c1       	rjmp	.+990    	; 0x3a3a <handle_message_length_1+0x4b6>
    365c:	e6 39       	cpi	r30, 0x96	; 150
    365e:	58 f5       	brcc	.+86     	; 0x36b6 <handle_message_length_1+0x132>
    3660:	e0 37       	cpi	r30, 0x70	; 112
    3662:	09 f4       	brne	.+2      	; 0x3666 <handle_message_length_1+0xe2>
    3664:	ce c1       	rjmp	.+924    	; 0x3a02 <handle_message_length_1+0x47e>
    3666:	e1 37       	cpi	r30, 0x71	; 113
    3668:	98 f4       	brcc	.+38     	; 0x3690 <handle_message_length_1+0x10c>
    366a:	e7 34       	cpi	r30, 0x47	; 71
    366c:	09 f4       	brne	.+2      	; 0x3670 <handle_message_length_1+0xec>
    366e:	b9 c1       	rjmp	.+882    	; 0x39e2 <handle_message_length_1+0x45e>
    3670:	e8 34       	cpi	r30, 0x48	; 72
    3672:	38 f4       	brcc	.+14     	; 0x3682 <handle_message_length_1+0xfe>
    3674:	e5 34       	cpi	r30, 0x45	; 69
    3676:	09 f4       	brne	.+2      	; 0x367a <handle_message_length_1+0xf6>
    3678:	aa c1       	rjmp	.+852    	; 0x39ce <handle_message_length_1+0x44a>
    367a:	e6 34       	cpi	r30, 0x46	; 70
    367c:	09 f0       	breq	.+2      	; 0x3680 <handle_message_length_1+0xfc>
    367e:	bd c2       	rjmp	.+1402   	; 0x3bfa <handle_message_length_1+0x676>
    3680:	ab c1       	rjmp	.+854    	; 0x39d8 <handle_message_length_1+0x454>
    3682:	e0 35       	cpi	r30, 0x50	; 80
    3684:	09 f4       	brne	.+2      	; 0x3688 <handle_message_length_1+0x104>
    3686:	b7 c1       	rjmp	.+878    	; 0x39f6 <handle_message_length_1+0x472>
    3688:	e0 36       	cpi	r30, 0x60	; 96
    368a:	09 f0       	breq	.+2      	; 0x368e <handle_message_length_1+0x10a>
    368c:	b6 c2       	rjmp	.+1388   	; 0x3bfa <handle_message_length_1+0x676>
    368e:	b6 c1       	rjmp	.+876    	; 0x39fc <handle_message_length_1+0x478>
    3690:	e2 39       	cpi	r30, 0x92	; 146
    3692:	09 f4       	brne	.+2      	; 0x3696 <handle_message_length_1+0x112>
    3694:	c3 c1       	rjmp	.+902    	; 0x3a1c <handle_message_length_1+0x498>
    3696:	e3 39       	cpi	r30, 0x93	; 147
    3698:	38 f4       	brcc	.+14     	; 0x36a8 <handle_message_length_1+0x124>
    369a:	e0 39       	cpi	r30, 0x90	; 144
    369c:	09 f4       	brne	.+2      	; 0x36a0 <handle_message_length_1+0x11c>
    369e:	b4 c1       	rjmp	.+872    	; 0x3a08 <handle_message_length_1+0x484>
    36a0:	e1 39       	cpi	r30, 0x91	; 145
    36a2:	09 f0       	breq	.+2      	; 0x36a6 <handle_message_length_1+0x122>
    36a4:	aa c2       	rjmp	.+1364   	; 0x3bfa <handle_message_length_1+0x676>
    36a6:	b5 c1       	rjmp	.+874    	; 0x3a12 <handle_message_length_1+0x48e>
    36a8:	e3 39       	cpi	r30, 0x93	; 147
    36aa:	09 f4       	brne	.+2      	; 0x36ae <handle_message_length_1+0x12a>
    36ac:	bc c1       	rjmp	.+888    	; 0x3a26 <handle_message_length_1+0x4a2>
    36ae:	e4 39       	cpi	r30, 0x94	; 148
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <handle_message_length_1+0x130>
    36b2:	a3 c2       	rjmp	.+1350   	; 0x3bfa <handle_message_length_1+0x676>
    36b4:	bd c1       	rjmp	.+890    	; 0x3a30 <handle_message_length_1+0x4ac>
    36b6:	eb 39       	cpi	r30, 0x9B	; 155
    36b8:	09 f4       	brne	.+2      	; 0x36bc <handle_message_length_1+0x138>
    36ba:	dd c1       	rjmp	.+954    	; 0x3a76 <handle_message_length_1+0x4f2>
    36bc:	ec 39       	cpi	r30, 0x9C	; 156
    36be:	98 f4       	brcc	.+38     	; 0x36e6 <handle_message_length_1+0x162>
    36c0:	e8 39       	cpi	r30, 0x98	; 152
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <handle_message_length_1+0x142>
    36c4:	c9 c1       	rjmp	.+914    	; 0x3a58 <handle_message_length_1+0x4d4>
    36c6:	e9 39       	cpi	r30, 0x99	; 153
    36c8:	38 f4       	brcc	.+14     	; 0x36d8 <handle_message_length_1+0x154>
    36ca:	e6 39       	cpi	r30, 0x96	; 150
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <handle_message_length_1+0x14c>
    36ce:	ba c1       	rjmp	.+884    	; 0x3a44 <handle_message_length_1+0x4c0>
    36d0:	e7 39       	cpi	r30, 0x97	; 151
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <handle_message_length_1+0x152>
    36d4:	92 c2       	rjmp	.+1316   	; 0x3bfa <handle_message_length_1+0x676>
    36d6:	bb c1       	rjmp	.+886    	; 0x3a4e <handle_message_length_1+0x4ca>
    36d8:	e9 39       	cpi	r30, 0x99	; 153
    36da:	09 f4       	brne	.+2      	; 0x36de <handle_message_length_1+0x15a>
    36dc:	c2 c1       	rjmp	.+900    	; 0x3a62 <handle_message_length_1+0x4de>
    36de:	ea 39       	cpi	r30, 0x9A	; 154
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <handle_message_length_1+0x160>
    36e2:	8b c2       	rjmp	.+1302   	; 0x3bfa <handle_message_length_1+0x676>
    36e4:	c3 c1       	rjmp	.+902    	; 0x3a6c <handle_message_length_1+0x4e8>
    36e6:	ee 39       	cpi	r30, 0x9E	; 158
    36e8:	09 f4       	brne	.+2      	; 0x36ec <handle_message_length_1+0x168>
    36ea:	d4 c1       	rjmp	.+936    	; 0x3a94 <handle_message_length_1+0x510>
    36ec:	ef 39       	cpi	r30, 0x9F	; 159
    36ee:	38 f4       	brcc	.+14     	; 0x36fe <handle_message_length_1+0x17a>
    36f0:	ec 39       	cpi	r30, 0x9C	; 156
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <handle_message_length_1+0x172>
    36f4:	c5 c1       	rjmp	.+906    	; 0x3a80 <handle_message_length_1+0x4fc>
    36f6:	ed 39       	cpi	r30, 0x9D	; 157
    36f8:	09 f0       	breq	.+2      	; 0x36fc <handle_message_length_1+0x178>
    36fa:	7f c2       	rjmp	.+1278   	; 0x3bfa <handle_message_length_1+0x676>
    36fc:	c6 c1       	rjmp	.+908    	; 0x3a8a <handle_message_length_1+0x506>
    36fe:	ef 39       	cpi	r30, 0x9F	; 159
    3700:	09 f4       	brne	.+2      	; 0x3704 <handle_message_length_1+0x180>
    3702:	cd c1       	rjmp	.+922    	; 0x3a9e <handle_message_length_1+0x51a>
    3704:	ef 3f       	cpi	r30, 0xFF	; 255
    3706:	09 f0       	breq	.+2      	; 0x370a <handle_message_length_1+0x186>
    3708:	78 c2       	rjmp	.+1264   	; 0x3bfa <handle_message_length_1+0x676>
    370a:	70 c1       	rjmp	.+736    	; 0x39ec <handle_message_length_1+0x468>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_global_counter_x = funcSize_x;
    370c:	80 91 a5 20 	lds	r24, 0x20A5
    3710:	90 91 a6 20 	lds	r25, 0x20A6
    3714:	a0 91 a7 20 	lds	r26, 0x20A7
    3718:	b0 91 a8 20 	lds	r27, 0x20A8
    371c:	80 93 eb 24 	sts	0x24EB, r24
    3720:	90 93 ec 24 	sts	0x24EC, r25
    3724:	a0 93 ed 24 	sts	0x24ED, r26
    3728:	b0 93 ee 24 	sts	0x24EE, r27
			func_global_counter_y = funcSize_y;
    372c:	80 91 a9 20 	lds	r24, 0x20A9
    3730:	90 91 aa 20 	lds	r25, 0x20AA
    3734:	a0 91 ab 20 	lds	r26, 0x20AB
    3738:	b0 91 ac 20 	lds	r27, 0x20AC
    373c:	80 93 ef 24 	sts	0x24EF, r24
    3740:	90 93 f0 24 	sts	0x24F0, r25
    3744:	a0 93 f1 24 	sts	0x24F1, r26
    3748:	b0 93 f2 24 	sts	0x24F2, r27
			function_counter_x = 0;
    374c:	10 92 e7 24 	sts	0x24E7, r1
    3750:	10 92 e8 24 	sts	0x24E8, r1
			function_counter_y = 0;
    3754:	10 92 e9 24 	sts	0x24E9, r1
    3758:	10 92 ea 24 	sts	0x24EA, r1
            Stop = 0;
    375c:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    3760:	10 92 e0 24 	sts	0x24E0, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3764:	8f ea       	ldi	r24, 0xAF	; 175
    3766:	91 e1       	ldi	r25, 0x11	; 17
    3768:	4e e4       	ldi	r20, 0x4E	; 78
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	21 e0       	ldi	r18, 0x01	; 1
    3772:	01 e0       	ldi	r16, 0x01	; 1
    3774:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    3778:	82 e2       	ldi	r24, 0x22	; 34
    377a:	98 e0       	ldi	r25, 0x08	; 8
    377c:	4e e4       	ldi	r20, 0x4E	; 78
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	22 e0       	ldi	r18, 0x02	; 2
    3786:	00 e0       	ldi	r16, 0x00	; 0
    3788:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    378c:	8a e5       	ldi	r24, 0x5A	; 90
    378e:	98 e0       	ldi	r25, 0x08	; 8
    3790:	4e e4       	ldi	r20, 0x4E	; 78
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	23 e0       	ldi	r18, 0x03	; 3
    379a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
                                                                //by the Update_display interupt.
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    379e:	40 91 9f 20 	lds	r20, 0x209F
    37a2:	50 91 a0 20 	lds	r21, 0x20A0
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	82 ed       	ldi	r24, 0xD2	; 210
    37ac:	9b e0       	ldi	r25, 0x0B	; 11
    37ae:	24 e0       	ldi	r18, 0x04	; 4
    37b0:	01 e0       	ldi	r16, 0x01	; 1
    37b2:	28 c0       	rjmp	.+80     	; 0x3804 <handle_message_length_1+0x280>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 
			break;
            
        case 0x30: //stop display
            Stop = 1;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    37ba:	8f ea       	ldi	r24, 0xAF	; 175
    37bc:	91 e1       	ldi	r25, 0x11	; 17
    37be:	4e e4       	ldi	r20, 0x4E	; 78
    37c0:	50 e0       	ldi	r21, 0x00	; 0
    37c2:	60 e0       	ldi	r22, 0x00	; 0
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	21 e0       	ldi	r18, 0x01	; 1
    37c8:	00 e0       	ldi	r16, 0x00	; 0
    37ca:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    37ce:	82 e2       	ldi	r24, 0x22	; 34
    37d0:	98 e0       	ldi	r25, 0x08	; 8
    37d2:	4e e4       	ldi	r20, 0x4E	; 78
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	22 e0       	ldi	r18, 0x02	; 2
    37dc:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    37e0:	8a e5       	ldi	r24, 0x5A	; 90
    37e2:	98 e0       	ldi	r25, 0x08	; 8
    37e4:	4e e4       	ldi	r20, 0x4E	; 78
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	23 e0       	ldi	r18, 0x03	; 3
    37ee:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    37f2:	40 91 9f 20 	lds	r20, 0x209F
    37f6:	50 91 a0 20 	lds	r21, 0x20A0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	82 ed       	ldi	r24, 0xD2	; 210
    3800:	9b e0       	ldi	r25, 0x0B	; 11
    3802:	24 e0       	ldi	r18, 0x04	; 4
    3804:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3808:	40 91 a1 20 	lds	r20, 0x20A1
    380c:	50 91 a2 20 	lds	r21, 0x20A2
    3810:	60 e0       	ldi	r22, 0x00	; 0
    3812:	70 e0       	ldi	r23, 0x00	; 0
    3814:	84 e6       	ldi	r24, 0x64	; 100
    3816:	9a e0       	ldi	r25, 0x0A	; 10
    3818:	25 e0       	ldi	r18, 0x05	; 5
    381a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
    381e:	f3 c1       	rjmp	.+998    	; 0x3c06 <handle_message_length_1+0x682>
            
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_global_counter_x = funcSize_x;
    3820:	80 91 a5 20 	lds	r24, 0x20A5
    3824:	90 91 a6 20 	lds	r25, 0x20A6
    3828:	a0 91 a7 20 	lds	r26, 0x20A7
    382c:	b0 91 a8 20 	lds	r27, 0x20A8
    3830:	80 93 eb 24 	sts	0x24EB, r24
    3834:	90 93 ec 24 	sts	0x24EC, r25
    3838:	a0 93 ed 24 	sts	0x24ED, r26
    383c:	b0 93 ee 24 	sts	0x24EE, r27
			func_global_counter_y = funcSize_y;
    3840:	80 91 a9 20 	lds	r24, 0x20A9
    3844:	90 91 aa 20 	lds	r25, 0x20AA
    3848:	a0 91 ab 20 	lds	r26, 0x20AB
    384c:	b0 91 ac 20 	lds	r27, 0x20AC
    3850:	80 93 ef 24 	sts	0x24EF, r24
    3854:	90 93 f0 24 	sts	0x24F0, r25
    3858:	a0 93 f1 24 	sts	0x24F1, r26
    385c:	b0 93 f2 24 	sts	0x24F2, r27
			function_counter_x = 0;
    3860:	10 92 e7 24 	sts	0x24E7, r1
    3864:	10 92 e8 24 	sts	0x24E8, r1
			function_counter_y = 0;
    3868:	10 92 e9 24 	sts	0x24E9, r1
    386c:	10 92 ea 24 	sts	0x24EA, r1
            Stop = 0;
    3870:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    3874:	10 92 e0 24 	sts	0x24E0, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3878:	8f ea       	ldi	r24, 0xAF	; 175
    387a:	91 e1       	ldi	r25, 0x11	; 17
    387c:	4e e4       	ldi	r20, 0x4E	; 78
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	60 e0       	ldi	r22, 0x00	; 0
    3882:	70 e0       	ldi	r23, 0x00	; 0
    3884:	21 e0       	ldi	r18, 0x01	; 1
    3886:	01 e0       	ldi	r16, 0x01	; 1
    3888:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    388c:	82 e2       	ldi	r24, 0x22	; 34
    388e:	98 e0       	ldi	r25, 0x08	; 8
    3890:	4e e4       	ldi	r20, 0x4E	; 78
    3892:	50 e0       	ldi	r21, 0x00	; 0
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	70 e0       	ldi	r23, 0x00	; 0
    3898:	22 e0       	ldi	r18, 0x02	; 2
    389a:	00 e0       	ldi	r16, 0x00	; 0
    389c:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    38a0:	8a e5       	ldi	r24, 0x5A	; 90
    38a2:	98 e0       	ldi	r25, 0x08	; 8
    38a4:	4e e4       	ldi	r20, 0x4E	; 78
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	23 e0       	ldi	r18, 0x03	; 3
    38ae:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    38b2:	40 91 9f 20 	lds	r20, 0x209F
    38b6:	50 91 a0 20 	lds	r21, 0x20A0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	82 ed       	ldi	r24, 0xD2	; 210
    38c0:	9b e0       	ldi	r25, 0x0B	; 11
    38c2:	24 e0       	ldi	r18, 0x04	; 4
    38c4:	01 e0       	ldi	r16, 0x01	; 1
    38c6:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 
    38ca:	40 91 a1 20 	lds	r20, 0x20A1
    38ce:	50 91 a2 20 	lds	r21, 0x20A2
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	84 e6       	ldi	r24, 0x64	; 100
    38d8:	9a e0       	ldi	r25, 0x0A	; 10
    38da:	25 e0       	ldi	r18, 0x05	; 5
    38dc:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    38e0:	60 91 a3 20 	lds	r22, 0x20A3
    38e4:	70 91 a4 20 	lds	r23, 0x20A4
    38e8:	82 e1       	ldi	r24, 0x12	; 18
    38ea:	9a e7       	ldi	r25, 0x7A	; 122
    38ec:	0e 94 e7 57 	call	0xafce	; 0xafce <__udivmodhi4>
    38f0:	ab 01       	movw	r20, r22
    38f2:	60 e0       	ldi	r22, 0x00	; 0
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	8b ea       	ldi	r24, 0xAB	; 171
    38f8:	91 e1       	ldi	r25, 0x11	; 17
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	8e cf       	rjmp	.-228    	; 0x381a <handle_message_length_1+0x296>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3904:	8f ea       	ldi	r24, 0xAF	; 175
    3906:	91 e1       	ldi	r25, 0x11	; 17
    3908:	4e e4       	ldi	r20, 0x4E	; 78
    390a:	50 e0       	ldi	r21, 0x00	; 0
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	70 e0       	ldi	r23, 0x00	; 0
    3910:	21 e0       	ldi	r18, 0x01	; 1
    3912:	00 e0       	ldi	r16, 0x00	; 0
    3914:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3918:	82 e2       	ldi	r24, 0x22	; 34
    391a:	98 e0       	ldi	r25, 0x08	; 8
    391c:	4e e4       	ldi	r20, 0x4E	; 78
    391e:	50 e0       	ldi	r21, 0x00	; 0
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	22 e0       	ldi	r18, 0x02	; 2
    3926:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    392a:	8a e5       	ldi	r24, 0x5A	; 90
    392c:	98 e0       	ldi	r25, 0x08	; 8
    392e:	4e e4       	ldi	r20, 0x4E	; 78
    3930:	50 e0       	ldi	r21, 0x00	; 0
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	23 e0       	ldi	r18, 0x03	; 3
    3938:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    393c:	40 91 9f 20 	lds	r20, 0x209F
    3940:	50 91 a0 20 	lds	r21, 0x20A0
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	82 ed       	ldi	r24, 0xD2	; 210
    394a:	9b e0       	ldi	r25, 0x0B	; 11
    394c:	24 e0       	ldi	r18, 0x04	; 4
    394e:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3952:	40 91 a1 20 	lds	r20, 0x20A1
    3956:	50 91 a2 20 	lds	r21, 0x20A2
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	84 e6       	ldi	r24, 0x64	; 100
    3960:	9a e0       	ldi	r25, 0x0A	; 10
    3962:	25 e0       	ldi	r18, 0x05	; 5
    3964:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    3968:	20 91 a3 20 	lds	r18, 0x20A3
    396c:	30 91 a4 20 	lds	r19, 0x20A4
    3970:	40 e0       	ldi	r20, 0x00	; 0
    3972:	50 e0       	ldi	r21, 0x00	; 0
    3974:	62 e1       	ldi	r22, 0x12	; 18
    3976:	7a e7       	ldi	r23, 0x7A	; 122
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 30 58 	call	0xb060	; 0xb060 <__divmodsi4>
    3980:	8b ea       	ldi	r24, 0xAB	; 171
    3982:	91 e1       	ldi	r25, 0x11	; 17
    3984:	ba 01       	movw	r22, r20
    3986:	a9 01       	movw	r20, r18
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			digitalWrite(3,LOW);    //set the output to low
    398e:	83 e0       	ldi	r24, 0x03	; 3
    3990:	92 c0       	rjmp	.+292    	; 0x3ab6 <handle_message_length_1+0x532>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	68 e0       	ldi	r22, 0x08	; 8
    3996:	40 e1       	ldi	r20, 0x10	; 16
    3998:	55 e2       	ldi	r21, 0x25	; 37
    399a:	33 c1       	rjmp	.+614    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	68 e1       	ldi	r22, 0x18	; 24
    39a0:	4d ef       	ldi	r20, 0xFD	; 253
    39a2:	50 e2       	ldi	r21, 0x20	; 32
    39a4:	2e c1       	rjmp	.+604    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	68 e1       	ldi	r22, 0x18	; 24
    39aa:	45 e1       	ldi	r20, 0x15	; 21
    39ac:	51 e2       	ldi	r21, 0x21	; 33
    39ae:	29 c1       	rjmp	.+594    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	68 e1       	ldi	r22, 0x18	; 24
    39b4:	4d e2       	ldi	r20, 0x2D	; 45
    39b6:	51 e2       	ldi	r21, 0x21	; 33
    39b8:	24 c1       	rjmp	.+584    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	68 e1       	ldi	r22, 0x18	; 24
    39be:	45 e4       	ldi	r20, 0x45	; 69
    39c0:	51 e2       	ldi	r21, 0x21	; 33
    39c2:	1f c1       	rjmp	.+574    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	68 e1       	ldi	r22, 0x18	; 24
    39c8:	4d e5       	ldi	r20, 0x5D	; 93
    39ca:	51 e2       	ldi	r21, 0x21	; 33
    39cc:	1a c1       	rjmp	.+564    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	68 e1       	ldi	r22, 0x18	; 24
    39d2:	45 e7       	ldi	r20, 0x75	; 117
    39d4:	51 e2       	ldi	r21, 0x21	; 33
    39d6:	15 c1       	rjmp	.+554    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	68 e1       	ldi	r22, 0x18	; 24
    39dc:	4d e8       	ldi	r20, 0x8D	; 141
    39de:	51 e2       	ldi	r21, 0x21	; 33
    39e0:	10 c1       	rjmp	.+544    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	68 e1       	ldi	r22, 0x18	; 24
    39e6:	45 ea       	ldi	r20, 0xA5	; 165
    39e8:	51 e2       	ldi	r21, 0x21	; 33
    39ea:	0b c1       	rjmp	.+534    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	68 e0       	ldi	r22, 0x08	; 8
    39f0:	4d eb       	ldi	r20, 0xBD	; 189
    39f2:	51 e2       	ldi	r21, 0x21	; 33
    39f4:	06 c1       	rjmp	.+524    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x50:  ledBlink(); break;
    39f6:	0e 94 3c 21 	call	0x4278	; 0x4278 <ledBlink>
    39fa:	05 c1       	rjmp	.+522    	; 0x3c06 <handle_message_length_1+0x682>
        case 0x60:  SystemReset();  break;
    39fc:	0e 94 a9 22 	call	0x4552	; 0x4552 <SystemReset>
    3a00:	02 c1       	rjmp	.+516    	; 0x3c06 <handle_message_length_1+0x682>
        case 0x70:  benchmark_pattern(); break;
    3a02:	0e 94 4b 18 	call	0x3096	; 0x3096 <benchmark_pattern>
    3a06:	ff c0       	rjmp	.+510    	; 0x3c06 <handle_message_length_1+0x682>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	60 e2       	ldi	r22, 0x20	; 32
    3a0c:	45 ec       	ldi	r20, 0xC5	; 197
    3a0e:	51 e2       	ldi	r21, 0x21	; 33
    3a10:	f8 c0       	rjmp	.+496    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	60 e2       	ldi	r22, 0x20	; 32
    3a16:	45 ee       	ldi	r20, 0xE5	; 229
    3a18:	51 e2       	ldi	r21, 0x21	; 33
    3a1a:	f3 c0       	rjmp	.+486    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	60 e2       	ldi	r22, 0x20	; 32
    3a20:	45 e0       	ldi	r20, 0x05	; 5
    3a22:	52 e2       	ldi	r21, 0x22	; 34
    3a24:	ee c0       	rjmp	.+476    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	60 e2       	ldi	r22, 0x20	; 32
    3a2a:	45 e2       	ldi	r20, 0x25	; 37
    3a2c:	52 e2       	ldi	r21, 0x22	; 34
    3a2e:	e9 c0       	rjmp	.+466    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	60 e2       	ldi	r22, 0x20	; 32
    3a34:	45 e4       	ldi	r20, 0x45	; 69
    3a36:	52 e2       	ldi	r21, 0x22	; 34
    3a38:	e4 c0       	rjmp	.+456    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	60 e2       	ldi	r22, 0x20	; 32
    3a3e:	45 e6       	ldi	r20, 0x65	; 101
    3a40:	52 e2       	ldi	r21, 0x22	; 34
    3a42:	df c0       	rjmp	.+446    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	60 e2       	ldi	r22, 0x20	; 32
    3a48:	45 e8       	ldi	r20, 0x85	; 133
    3a4a:	52 e2       	ldi	r21, 0x22	; 34
    3a4c:	da c0       	rjmp	.+436    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	60 e2       	ldi	r22, 0x20	; 32
    3a52:	45 ea       	ldi	r20, 0xA5	; 165
    3a54:	52 e2       	ldi	r21, 0x22	; 34
    3a56:	d5 c0       	rjmp	.+426    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	60 e2       	ldi	r22, 0x20	; 32
    3a5c:	45 ec       	ldi	r20, 0xC5	; 197
    3a5e:	52 e2       	ldi	r21, 0x22	; 34
    3a60:	d0 c0       	rjmp	.+416    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	60 e2       	ldi	r22, 0x20	; 32
    3a66:	45 ee       	ldi	r20, 0xE5	; 229
    3a68:	52 e2       	ldi	r21, 0x22	; 34
    3a6a:	cb c0       	rjmp	.+406    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	60 e2       	ldi	r22, 0x20	; 32
    3a70:	45 e0       	ldi	r20, 0x05	; 5
    3a72:	53 e2       	ldi	r21, 0x23	; 35
    3a74:	c6 c0       	rjmp	.+396    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	60 e2       	ldi	r22, 0x20	; 32
    3a7a:	45 e2       	ldi	r20, 0x25	; 37
    3a7c:	53 e2       	ldi	r21, 0x23	; 35
    3a7e:	c1 c0       	rjmp	.+386    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	60 e2       	ldi	r22, 0x20	; 32
    3a84:	45 e4       	ldi	r20, 0x45	; 69
    3a86:	53 e2       	ldi	r21, 0x23	; 35
    3a88:	bc c0       	rjmp	.+376    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	60 e2       	ldi	r22, 0x20	; 32
    3a8e:	45 e6       	ldi	r20, 0x65	; 101
    3a90:	53 e2       	ldi	r21, 0x23	; 35
    3a92:	b7 c0       	rjmp	.+366    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	60 e2       	ldi	r22, 0x20	; 32
    3a98:	45 e8       	ldi	r20, 0x85	; 133
    3a9a:	53 e2       	ldi	r21, 0x23	; 35
    3a9c:	b2 c0       	rjmp	.+356    	; 0x3c02 <handle_message_length_1+0x67e>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	60 e2       	ldi	r22, 0x20	; 32
    3aa2:	45 ea       	ldi	r20, 0xA5	; 165
    3aa4:	53 e2       	ldi	r21, 0x23	; 35
    3aa6:	ad c0       	rjmp	.+346    	; 0x3c02 <handle_message_length_1+0x67e>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	80 93 e2 24 	sts	0x24E2, r24
    3aae:	ab c0       	rjmp	.+342    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    3ab0:	10 92 e2 24 	sts	0x24E2, r1
            // turn off the lines that may be connected
            digitalWrite(2, LOW);
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	0e 94 9b 21 	call	0x4336	; 0x4336 <digitalWrite>
    3abc:	a4 c0       	rjmp	.+328    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	80 93 81 29 	sts	0x2981, r24
    3ac4:	a0 c0       	rjmp	.+320    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    3ac6:	10 92 81 29 	sts	0x2981, r1
    3aca:	9d c0       	rjmp	.+314    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    3acc:	0e 94 93 09 	call	0x1326	; 0x1326 <dump_mat>
    3ad0:	9a c0       	rjmp	.+308    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <handle_message_length_1+0x550>
    3ad4:	0f 92       	push	r0
    3ad6:	85 eb       	ldi	r24, 0xB5	; 181
    3ad8:	98 e0       	ldi	r25, 0x08	; 8
    3ada:	ed b7       	in	r30, 0x3d	; 61
    3adc:	fe b7       	in	r31, 0x3e	; 62
    3ade:	81 83       	std	Z+1, r24	; 0x01
    3ae0:	92 83       	std	Z+2, r25	; 0x02
    3ae2:	85 ec       	ldi	r24, 0xC5	; 197
    3ae4:	93 e2       	ldi	r25, 0x23	; 35
    3ae6:	2a c0       	rjmp	.+84     	; 0x3b3c <handle_message_length_1+0x5b8>
            break;
    3ae8:	b9 e1       	ldi	r27, 0x19	; 25
    3aea:	eb 2e       	mov	r14, r27
    3aec:	b7 e2       	ldi	r27, 0x27	; 39
    3aee:	fb 2e       	mov	r15, r27
    3af0:	01 e0       	ldi	r16, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3af2:	1e ef       	ldi	r17, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    3af4:	6e 01       	movw	r12, r28
    3af6:	08 94       	sec
    3af8:	c1 1c       	adc	r12, r1
    3afa:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3afc:	19 83       	std	Y+1, r17	; 0x01
    3afe:	f7 01       	movw	r30, r14
    3b00:	81 91       	ld	r24, Z+
    3b02:	7f 01       	movw	r14, r30
    3b04:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    3b06:	80 2f       	mov	r24, r16
    3b08:	62 e0       	ldi	r22, 0x02	; 2
    3b0a:	a6 01       	movw	r20, r12
    3b0c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    3b10:	0f 5f       	subi	r16, 0xFF	; 255
    3b12:	01 38       	cpi	r16, 0x81	; 129
    3b14:	99 f7       	brne	.-26     	; 0x3afc <handle_message_length_1+0x578>
    3b16:	77 c0       	rjmp	.+238    	; 0x3c06 <handle_message_length_1+0x682>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	80 93 f3 24 	sts	0x24F3, r24
    3b1e:	73 c0       	rjmp	.+230    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    3b20:	10 92 f3 24 	sts	0x24F3, r1
    3b24:	70 c0       	rjmp	.+224    	; 0x3c06 <handle_message_length_1+0x682>
            break;
            
        case 0x19:  // get ADC value from ADC0 to debug ADC
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(0));
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <handle_message_length_1+0x5aa>
    3b2e:	0f 92       	push	r0
    3b30:	23 ea       	ldi	r18, 0xA3	; 163
    3b32:	38 e0       	ldi	r19, 0x08	; 8
    3b34:	ed b7       	in	r30, 0x3d	; 61
    3b36:	fe b7       	in	r31, 0x3e	; 62
    3b38:	21 83       	std	Z+1, r18	; 0x01
    3b3a:	32 83       	std	Z+2, r19	; 0x02
    3b3c:	83 83       	std	Z+3, r24	; 0x03
    3b3e:	94 83       	std	Z+4, r25	; 0x04
    3b40:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	5c c0       	rjmp	.+184    	; 0x3c06 <handle_message_length_1+0x682>
            break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	6f ef       	ldi	r22, 0xFF	; 255
    3b54:	0e 94 e6 5c 	call	0xb9cc	; 0xb9cc <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    3b58:	0f 92       	push	r0
    3b5a:	0f 92       	push	r0
    3b5c:	81 e7       	ldi	r24, 0x71	; 113
    3b5e:	98 e0       	ldi	r25, 0x08	; 8
    3b60:	09 c0       	rjmp	.+18     	; 0x3b74 <handle_message_length_1+0x5f0>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	60 e0       	ldi	r22, 0x00	; 0
    3b68:	0e 94 e6 5c 	call	0xb9cc	; 0xb9cc <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    3b6c:	0f 92       	push	r0
    3b6e:	0f 92       	push	r0
    3b70:	8f e3       	ldi	r24, 0x3F	; 63
    3b72:	98 e0       	ldi	r25, 0x08	; 8
    3b74:	ed b7       	in	r30, 0x3d	; 61
    3b76:	fe b7       	in	r31, 0x3e	; 62
    3b78:	81 83       	std	Z+1, r24	; 0x01
    3b7a:	92 83       	std	Z+2, r25	; 0x02
    3b7c:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	40 c0       	rjmp	.+128    	; 0x3c06 <handle_message_length_1+0x682>
			break;

		case 0x23:  //reset function x  count
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3b86:	40 91 9f 20 	lds	r20, 0x209F
    3b8a:	50 91 a0 20 	lds	r21, 0x20A0
    3b8e:	60 e0       	ldi	r22, 0x00	; 0
    3b90:	70 e0       	ldi	r23, 0x00	; 0
    3b92:	82 ed       	ldi	r24, 0xD2	; 210
    3b94:	9b e0       	ldi	r25, 0x0B	; 11
    3b96:	24 e0       	ldi	r18, 0x04	; 4
    3b98:	00 e0       	ldi	r16, 0x00	; 0
    3b9a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			func_global_counter_x = funcSize_x;
    3b9e:	80 91 a5 20 	lds	r24, 0x20A5
    3ba2:	90 91 a6 20 	lds	r25, 0x20A6
    3ba6:	a0 91 a7 20 	lds	r26, 0x20A7
    3baa:	b0 91 a8 20 	lds	r27, 0x20A8
    3bae:	80 93 eb 24 	sts	0x24EB, r24
    3bb2:	90 93 ec 24 	sts	0x24EC, r25
    3bb6:	a0 93 ed 24 	sts	0x24ED, r26
    3bba:	b0 93 ee 24 	sts	0x24EE, r27
    3bbe:	23 c0       	rjmp	.+70     	; 0x3c06 <handle_message_length_1+0x682>
			break;

		case 0x24:  //reset function y count
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3bc0:	40 91 a1 20 	lds	r20, 0x20A1
    3bc4:	50 91 a2 20 	lds	r21, 0x20A2
    3bc8:	60 e0       	ldi	r22, 0x00	; 0
    3bca:	70 e0       	ldi	r23, 0x00	; 0
    3bcc:	84 e6       	ldi	r24, 0x64	; 100
    3bce:	9a e0       	ldi	r25, 0x0A	; 10
    3bd0:	25 e0       	ldi	r18, 0x05	; 5
    3bd2:	00 e0       	ldi	r16, 0x00	; 0
    3bd4:	0e 94 77 2f 	call	0x5eee	; 0x5eee <Reg_Handler>
			func_global_counter_y = funcSize_y;
    3bd8:	80 91 a9 20 	lds	r24, 0x20A9
    3bdc:	90 91 aa 20 	lds	r25, 0x20AA
    3be0:	a0 91 ab 20 	lds	r26, 0x20AB
    3be4:	b0 91 ac 20 	lds	r27, 0x20AC
    3be8:	80 93 ef 24 	sts	0x24EF, r24
    3bec:	90 93 f0 24 	sts	0x24F0, r25
    3bf0:	a0 93 f1 24 	sts	0x24F1, r26
    3bf4:	b0 93 f2 24 	sts	0x24F2, r27
    3bf8:	06 c0       	rjmp	.+12     	; 0x3c06 <handle_message_length_1+0x682>
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	68 e0       	ldi	r22, 0x08	; 8
    3bfe:	41 ec       	ldi	r20, 0xC1	; 193
    3c00:	50 e2       	ldi	r21, 0x20	; 32
    3c02:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    }
}
    3c06:	22 96       	adiw	r28, 0x02	; 2
    3c08:	e8 e0       	ldi	r30, 0x08	; 8
    3c0a:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <__epilogue_restores__+0x14>

00003c0e <main>:
}




int main(void) {
    3c0e:	a6 e4       	ldi	r26, 0x46	; 70
    3c10:	b6 e0       	ldi	r27, 0x06	; 6
    3c12:	ed e0       	ldi	r30, 0x0D	; 13
    3c14:	fe e1       	ldi	r31, 0x1E	; 30
    3c16:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    uint16_t message_length;
    uint16_t lcv;
    uint8_t  tempBuff[128];
	uint8_t workingModes;
	
	workingModes = eeprom_read_byte(work_mode);
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 d6 5c 	call	0xb9ac	; 0xb9ac <__eerd_byte_x128a1>
    3c22:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    3c24:	85 e7       	ldi	r24, 0x75	; 117
    3c26:	96 e2       	ldi	r25, 0x26	; 38
    3c28:	6e 2d       	mov	r22, r14
    3c2a:	0e 94 1b 31 	call	0x6236	; 0x6236 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    3c2e:	82 e7       	ldi	r24, 0x72	; 114
    3c30:	99 e2       	ldi	r25, 0x29	; 41
    3c32:	6e 2d       	mov	r22, r14
    3c34:	0e 94 1b 31 	call	0x6236	; 0x6236 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    3c38:	88 e0       	ldi	r24, 0x08	; 8
    3c3a:	97 e2       	ldi	r25, 0x27	; 39
    3c3c:	6e 2d       	mov	r22, r14
    3c3e:	0e 94 1b 31 	call	0x6236	; 0x6236 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    3c42:	87 e9       	ldi	r24, 0x97	; 151
    3c44:	95 e2       	ldi	r25, 0x25	; 37
    3c46:	6e 2d       	mov	r22, r14
    3c48:	0e 94 1b 31 	call	0x6236	; 0x6236 <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    3c4c:	85 e7       	ldi	r24, 0x75	; 117
    3c4e:	96 e2       	ldi	r25, 0x26	; 38
    3c50:	60 e8       	ldi	r22, 0x80	; 128
    3c52:	74 e0       	ldi	r23, 0x04	; 4
    3c54:	40 e4       	ldi	r20, 0x40	; 64
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	23 e2       	ldi	r18, 0x23	; 35
    3c5a:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    3c5e:	82 e7       	ldi	r24, 0x72	; 114
    3c60:	99 e2       	ldi	r25, 0x29	; 41
    3c62:	60 e9       	ldi	r22, 0x90	; 144
    3c64:	74 e0       	ldi	r23, 0x04	; 4
    3c66:	40 e4       	ldi	r20, 0x40	; 64
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	23 e2       	ldi	r18, 0x23	; 35
    3c6c:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    3c70:	88 e0       	ldi	r24, 0x08	; 8
    3c72:	97 e2       	ldi	r25, 0x27	; 39
    3c74:	60 ea       	ldi	r22, 0xA0	; 160
    3c76:	74 e0       	ldi	r23, 0x04	; 4
    3c78:	40 e4       	ldi	r20, 0x40	; 64
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	23 e2       	ldi	r18, 0x23	; 35
    3c7e:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    3c82:	87 e9       	ldi	r24, 0x97	; 151
    3c84:	95 e2       	ldi	r25, 0x25	; 37
    3c86:	60 eb       	ldi	r22, 0xB0	; 176
    3c88:	74 e0       	ldi	r23, 0x04	; 4
    3c8a:	40 e4       	ldi	r20, 0x40	; 64
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	23 e2       	ldi	r18, 0x23	; 35
    3c90:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    3c94:	8e 2d       	mov	r24, r14
    3c96:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <createRxBuff>
    init_all();
    3c9a:	0e 94 25 2c 	call	0x584a	; 0x584a <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    3c9e:	8c e8       	ldi	r24, 0x8C	; 140
    3ca0:	9d e2       	ldi	r25, 0x2D	; 45
    3ca2:	80 93 74 25 	sts	0x2574, r24
    3ca6:	90 93 75 25 	sts	0x2575, r25
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    3cae:	2a e0       	ldi	r18, 0x0A	; 10
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	e5 55       	subi	r30, 0x55	; 85
    3cb6:	fa 4d       	sbci	r31, 0xDA	; 218
    3cb8:	20 83       	st	Z, r18
    3cba:	31 83       	std	Z+1, r19	; 0x01
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	e9 5f       	subi	r30, 0xF9	; 249
    3cc0:	f7 4d       	sbci	r31, 0xD7	; 215
    3cc2:	20 83       	st	Z, r18
    3cc4:	31 83       	std	Z+1, r19	; 0x01
    3cc6:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    3cc8:	88 3c       	cpi	r24, 0xC8	; 200
    3cca:	91 05       	cpc	r25, r1
    3ccc:	91 f7       	brne	.-28     	; 0x3cb2 <main+0xa4>
    3cce:	e6 e8       	ldi	r30, 0x86	; 134
    3cd0:	f6 e2       	ldi	r31, 0x26	; 38
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 23)) || ((lcv >= 48)&&(lcv <= 71)))
	        laserPattern[lcv] = 1;
    3cd6:	41 e0       	ldi	r20, 0x01	; 1
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 23)) || ((lcv >= 48)&&(lcv <= 71)))
    3cd8:	28 31       	cpi	r18, 0x18	; 24
    3cda:	31 05       	cpc	r19, r1
    3cdc:	20 f0       	brcs	.+8      	; 0x3ce6 <main+0xd8>
    3cde:	c9 01       	movw	r24, r18
    3ce0:	c0 97       	sbiw	r24, 0x30	; 48
    3ce2:	48 97       	sbiw	r24, 0x18	; 24
    3ce4:	10 f4       	brcc	.+4      	; 0x3cea <main+0xdc>
	        laserPattern[lcv] = 1;
    3ce6:	40 83       	st	Z, r20
    3ce8:	01 c0       	rjmp	.+2      	; 0x3cec <main+0xde>
		else
			laserPattern[lcv] = 0;
    3cea:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
    3cec:	2f 5f       	subi	r18, 0xFF	; 255
    3cee:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf0:	31 96       	adiw	r30, 0x01	; 1
    3cf2:	20 36       	cpi	r18, 0x60	; 96
    3cf4:	31 05       	cpc	r19, r1
    3cf6:	81 f7       	brne	.-32     	; 0x3cd8 <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    3cf8:	10 92 50 29 	sts	0x2950, r1
    3cfc:	10 92 51 29 	sts	0x2951, r1
    3d00:	80 91 50 29 	lds	r24, 0x2950
    3d04:	90 91 51 29 	lds	r25, 0x2951
    3d08:	80 93 9b 27 	sts	0x279B, r24
    3d0c:	90 93 9c 27 	sts	0x279C, r25
    3d10:	80 91 9b 27 	lds	r24, 0x279B
    3d14:	90 91 9c 27 	lds	r25, 0x279C
    3d18:	80 93 73 26 	sts	0x2673, r24
    3d1c:	90 93 74 26 	sts	0x2674, r25
    3d20:	80 93 e6 26 	sts	0x26E6, r24
    3d24:	90 93 e7 26 	sts	0x26E7, r25
    bias_x = bias_y = 0;
    3d28:	10 92 b4 2b 	sts	0x2BB4, r1
    3d2c:	10 92 96 25 	sts	0x2596, r1
    gain_x = gain_y = 10;
    3d30:	8a e0       	ldi	r24, 0x0A	; 10
    3d32:	80 93 9d 27 	sts	0x279D, r24
    3d36:	80 93 e4 27 	sts	0x27E4, r24
    x_mode = y_mode = 0;
    3d3a:	10 92 e3 27 	sts	0x27E3, r1
    3d3e:	10 92 99 27 	sts	0x2799, r1
    X_val = Y_val = 0;
    3d42:	10 92 a8 25 	sts	0x25A8, r1
    3d46:	10 92 a9 25 	sts	0x25A9, r1
    3d4a:	10 92 84 26 	sts	0x2684, r1
    3d4e:	10 92 85 26 	sts	0x2685, r1
    gs_value = 1;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	80 93 17 27 	sts	0x2717, r24
    row_compress = 0;
    3d58:	10 92 aa 25 	sts	0x25AA, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    3d5c:	10 92 81 29 	sts	0x2981, r1
    
    temp = eeprom_read_byte(arena_config);
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 d6 5c 	call	0xb9ac	; 0xb9ac <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    3d68:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6a:	c1 f4       	brne	.+48     	; 0x3d9c <main+0x18e>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    3d6e:	24 e0       	ldi	r18, 0x04	; 4
    3d70:	11 c0       	rjmp	.+34     	; 0x3d94 <main+0x186>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    3d72:	e8 2f       	mov	r30, r24
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	98 2f       	mov	r25, r24
    3d78:	93 70       	andi	r25, 0x03	; 3
    3d7a:	df 01       	movw	r26, r30
    3d7c:	a8 5e       	subi	r26, 0xE8	; 232
    3d7e:	b8 4d       	sbci	r27, 0xD8	; 216
    3d80:	9c 93       	st	X, r25
			if (b1 && (chMap[b1] == 0))
    3d82:	88 23       	and	r24, r24
    3d84:	19 f0       	breq	.+6      	; 0x3d8c <main+0x17e>
    3d86:	99 23       	and	r25, r25
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <main+0x17e>
				chMap[b1] = 4;
    3d8a:	2c 93       	st	X, r18
			adrMap[b1] = b1; // panel address identity mapping
    3d8c:	e1 53       	subi	r30, 0x31	; 49
    3d8e:	f7 4d       	sbci	r31, 0xD7	; 215
    3d90:	80 83       	st	Z, r24
    3d92:	8f 5f       	subi	r24, 0xFF	; 255
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3d94:	81 38       	cpi	r24, 0x81	; 129
    3d96:	68 f3       	brcs	.-38     	; 0x3d72 <main+0x164>
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	17 c0       	rjmp	.+46     	; 0x3dca <main+0x1bc>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3d9c:	19 82       	std	Y+1, r1	; 0x01
    3d9e:	11 c0       	rjmp	.+34     	; 0x3dc2 <main+0x1b4>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    3da0:	0f 2d       	mov	r16, r15
    3da2:	10 e0       	ldi	r17, 0x00	; 0
    3da4:	c8 01       	movw	r24, r16
    3da6:	8f 5f       	subi	r24, 0xFF	; 255
    3da8:	9f 4f       	sbci	r25, 0xFF	; 255
    3daa:	0e 94 d6 5c 	call	0xb9ac	; 0xb9ac <__eerd_byte_x128a1>
    3dae:	f8 01       	movw	r30, r16
    3db0:	e8 5e       	subi	r30, 0xE8	; 232
    3db2:	f8 4d       	sbci	r31, 0xD8	; 216
    3db4:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    3db6:	01 53       	subi	r16, 0x31	; 49
    3db8:	17 4d       	sbci	r17, 0xD7	; 215
    3dba:	f8 01       	movw	r30, r16
    3dbc:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3dbe:	f3 94       	inc	r15
    3dc0:	f9 82       	std	Y+1, r15	; 0x01
    3dc2:	f9 80       	ldd	r15, Y+1	; 0x01
    3dc4:	f0 e8       	ldi	r31, 0x80	; 128
    3dc6:	ff 15       	cp	r31, r15
    3dc8:	58 f7       	brcc	.-42     	; 0x3da0 <main+0x192>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    3dca:	8e e0       	ldi	r24, 0x0E	; 14
    3dcc:	9a e0       	ldi	r25, 0x0A	; 10
    3dce:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	61 e0       	ldi	r22, 0x01	; 1
    3dd6:	0e 94 06 21 	call	0x420c	; 0x420c <ledWrite>
    3dda:	01 e0       	ldi	r16, 0x01	; 1
    3ddc:	10 e2       	ldi	r17, 0x20	; 32
    3dde:	c1 2e       	mov	r12, r17
    3de0:	13 e0       	ldi	r17, 0x03	; 3
    3de2:	d1 2e       	mov	r13, r17
    3de4:	3a c0       	rjmp	.+116    	; 0x3e5a <main+0x24c>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	0e 94 2e 51 	call	0xa25c	; 0xa25c <disk_status>
    3dec:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    3dee:	81 ff       	sbrs	r24, 1
    3df0:	0d c0       	rjmp	.+26     	; 0x3e0c <main+0x1fe>
            xputs(PSTR("Insert SD card"));
    3df2:	8f ef       	ldi	r24, 0xFF	; 255
    3df4:	99 e0       	ldi	r25, 0x09	; 9
    3df6:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            uart_crlf();
    3dfa:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <uart_crlf>
    3dfe:	04 c0       	rjmp	.+8      	; 0x3e08 <main+0x1fa>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	0e 94 2e 51 	call	0xa25c	; 0xa25c <disk_status>
    3e06:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    3e08:	01 fd       	sbrc	r16, 1
    3e0a:	fa cf       	rjmp	.-12     	; 0x3e00 <main+0x1f2>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    3e0c:	02 ff       	sbrs	r16, 2
    3e0e:	04 c0       	rjmp	.+8      	; 0x3e18 <main+0x20a>
            xputs(PSTR("SD card is Write Protected!\n"));
    3e10:	82 ee       	ldi	r24, 0xE2	; 226
    3e12:	99 e0       	ldi	r25, 0x09	; 9
    3e14:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3e18:	19 82       	std	Y+1, r1	; 0x01
    3e1a:	10 c0       	rjmp	.+32     	; 0x3e3c <main+0x22e>
            sta = disk_initialize(0);
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	0e 94 24 54 	call	0xa848	; 0xa848 <disk_initialize>
    3e22:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    3e24:	80 ff       	sbrs	r24, 0
    3e26:	0d c0       	rjmp	.+26     	; 0x3e42 <main+0x234>
    3e28:	29 81       	ldd	r18, Y+1	; 0x01
    3e2a:	84 ef       	ldi	r24, 0xF4	; 244
    3e2c:	91 e0       	ldi	r25, 0x01	; 1
    3e2e:	f6 01       	movw	r30, r12
    3e30:	31 97       	sbiw	r30, 0x01	; 1
    3e32:	f1 f7       	brne	.-4      	; 0x3e30 <main+0x222>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e34:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	d9 f7       	brne	.-10     	; 0x3e2e <main+0x220>
    3e38:	2f 5f       	subi	r18, 0xFF	; 255
    3e3a:	29 83       	std	Y+1, r18	; 0x01
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	84 30       	cpi	r24, 0x04	; 4
    3e40:	68 f3       	brcs	.-38     	; 0x3e1c <main+0x20e>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    3e42:	00 ff       	sbrs	r16, 0
    3e44:	0a c0       	rjmp	.+20     	; 0x3e5a <main+0x24c>
            xputs(PSTR("Initialization failed!!!\n"));
    3e46:	88 ec       	ldi	r24, 0xC8	; 200
    3e48:	99 e0       	ldi	r25, 0x09	; 9
    3e4a:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	0e 94 2e 51 	call	0xa25c	; 0xa25c <disk_status>
    3e54:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    3e56:	81 ff       	sbrs	r24, 1
    3e58:	fa cf       	rjmp	.-12     	; 0x3e4e <main+0x240>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    3e5a:	00 fd       	sbrc	r16, 0
    3e5c:	c4 cf       	rjmp	.-120    	; 0x3de6 <main+0x1d8>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    3e5e:	80 eb       	ldi	r24, 0xB0	; 176
    3e60:	99 e0       	ldi	r25, 0x09	; 9
    3e62:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	6a e0       	ldi	r22, 0x0A	; 10
    3e6a:	ae 01       	movw	r20, r28
    3e6c:	4f 5f       	subi	r20, 0xFF	; 255
    3e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e70:	0e 94 18 52 	call	0xa430	; 0xa430 <disk_ioctl>
    3e74:	89 2b       	or	r24, r25
    3e76:	59 f5       	brne	.+86     	; 0x3ece <main+0x2c0>
        xputs(PSTR("Card type: "));
    3e78:	84 ea       	ldi	r24, 0xA4	; 164
    3e7a:	99 e0       	ldi	r25, 0x09	; 9
    3e7c:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
        switch(b1) {
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	84 30       	cpi	r24, 0x04	; 4
    3e84:	a1 f0       	breq	.+40     	; 0x3eae <main+0x2a0>
    3e86:	85 30       	cpi	r24, 0x05	; 5
    3e88:	28 f4       	brcc	.+10     	; 0x3e94 <main+0x286>
    3e8a:	81 30       	cpi	r24, 0x01	; 1
    3e8c:	51 f0       	breq	.+20     	; 0x3ea2 <main+0x294>
    3e8e:	82 30       	cpi	r24, 0x02	; 2
    3e90:	d1 f4       	brne	.+52     	; 0x3ec6 <main+0x2b8>
    3e92:	0a c0       	rjmp	.+20     	; 0x3ea8 <main+0x29a>
    3e94:	88 30       	cpi	r24, 0x08	; 8
    3e96:	89 f0       	breq	.+34     	; 0x3eba <main+0x2ac>
    3e98:	8c 30       	cpi	r24, 0x0C	; 12
    3e9a:	91 f0       	breq	.+36     	; 0x3ec0 <main+0x2b2>
    3e9c:	86 30       	cpi	r24, 0x06	; 6
    3e9e:	99 f4       	brne	.+38     	; 0x3ec6 <main+0x2b8>
    3ea0:	09 c0       	rjmp	.+18     	; 0x3eb4 <main+0x2a6>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    3ea2:	8f e9       	ldi	r24, 0x9F	; 159
    3ea4:	99 e0       	ldi	r25, 0x09	; 9
    3ea6:	11 c0       	rjmp	.+34     	; 0x3eca <main+0x2bc>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    3ea8:	8b e9       	ldi	r24, 0x9B	; 155
    3eaa:	99 e0       	ldi	r25, 0x09	; 9
    3eac:	0e c0       	rjmp	.+28     	; 0x3eca <main+0x2bc>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    3eae:	86 e9       	ldi	r24, 0x96	; 150
    3eb0:	99 e0       	ldi	r25, 0x09	; 9
    3eb2:	0b c0       	rjmp	.+22     	; 0x3eca <main+0x2bc>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    3eb4:	81 e9       	ldi	r24, 0x91	; 145
    3eb6:	99 e0       	ldi	r25, 0x09	; 9
    3eb8:	08 c0       	rjmp	.+16     	; 0x3eca <main+0x2bc>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    3eba:	8c e8       	ldi	r24, 0x8C	; 140
    3ebc:	99 e0       	ldi	r25, 0x09	; 9
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <main+0x2bc>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    3ec0:	86 e8       	ldi	r24, 0x86	; 134
    3ec2:	99 e0       	ldi	r25, 0x09	; 9
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <main+0x2bc>
            default: xputs(PSTR("???\n"));
    3ec6:	81 e8       	ldi	r24, 0x81	; 129
    3ec8:	99 e0       	ldi	r25, 0x09	; 9
    3eca:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    3ece:	88 e6       	ldi	r24, 0x68	; 104
    3ed0:	99 e0       	ldi	r25, 0x09	; 9
    3ed2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    res = f_mount(0, &fatfs);
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	62 e8       	ldi	r22, 0x82	; 130
    3eda:	79 e2       	ldi	r23, 0x29	; 41
    3edc:	0e 94 bc 31 	call	0x6378	; 0x6378 <f_mount>
    switch(res) {
    3ee0:	81 30       	cpi	r24, 0x01	; 1
    3ee2:	51 f0       	breq	.+20     	; 0x3ef8 <main+0x2ea>
    3ee4:	81 30       	cpi	r24, 0x01	; 1
    3ee6:	28 f0       	brcs	.+10     	; 0x3ef2 <main+0x2e4>
    3ee8:	82 30       	cpi	r24, 0x02	; 2
    3eea:	49 f0       	breq	.+18     	; 0x3efe <main+0x2f0>
    3eec:	83 30       	cpi	r24, 0x03	; 3
    3eee:	69 f4       	brne	.+26     	; 0x3f0a <main+0x2fc>
    3ef0:	09 c0       	rjmp	.+18     	; 0x3f04 <main+0x2f6>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    3ef2:	8e e5       	ldi	r24, 0x5E	; 94
    3ef4:	99 e0       	ldi	r25, 0x09	; 9
    3ef6:	0b c0       	rjmp	.+22     	; 0x3f0e <main+0x300>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    3ef8:	85 e5       	ldi	r24, 0x55	; 85
    3efa:	99 e0       	ldi	r25, 0x09	; 9
    3efc:	08 c0       	rjmp	.+16     	; 0x3f0e <main+0x300>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    3efe:	82 e4       	ldi	r24, 0x42	; 66
    3f00:	99 e0       	ldi	r25, 0x09	; 9
    3f02:	05 c0       	rjmp	.+10     	; 0x3f0e <main+0x300>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    3f04:	85 e3       	ldi	r24, 0x35	; 53
    3f06:	99 e0       	ldi	r25, 0x09	; 9
    3f08:	02 c0       	rjmp	.+4      	; 0x3f0e <main+0x300>
        default: xputs(PSTR("???\n"));
    3f0a:	80 e3       	ldi	r24, 0x30	; 48
    3f0c:	99 e0       	ldi	r25, 0x09	; 9
    3f0e:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	68 e0       	ldi	r22, 0x08	; 8
    3f16:	40 e1       	ldi	r20, 0x10	; 16
    3f18:	55 e2       	ldi	r21, 0x25	; 37
    3f1a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    ledWrite(LED1, OFF);
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	0e 94 06 21 	call	0x420c	; 0x420c <ledWrite>
    ledBlink();
    3f26:	0e 94 3c 21 	call	0x4278	; 0x4278 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    3f2a:	8f ef       	ldi	r24, 0xFF	; 255
    3f2c:	e8 16       	cp	r14, r24
    3f2e:	09 f0       	breq	.+2      	; 0x3f32 <main+0x324>
    3f30:	61 c0       	rjmp	.+194    	; 0x3ff4 <main+0x3e6>
        uint8_t msg_buffer[55];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	99 e0       	ldi	r25, 0x09	; 9
    3f36:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	0e 5f       	subi	r16, 0xFE	; 254
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    if (workingModes == 0xff) {
        uint8_t msg_buffer[55];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    3f40:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <uart_test>
    3f44:	89 2b       	or	r24, r25
    3f46:	b1 f1       	breq	.+108    	; 0x3fb4 <main+0x3a6>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3f48:	c8 01       	movw	r24, r16
    3f4a:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <fill_Rx_buffer>
                switch(message_length) {
    3f4e:	83 30       	cpi	r24, 0x03	; 3
    3f50:	91 05       	cpc	r25, r1
    3f52:	d1 f0       	breq	.+52     	; 0x3f88 <main+0x37a>
    3f54:	84 30       	cpi	r24, 0x04	; 4
    3f56:	91 05       	cpc	r25, r1
    3f58:	30 f4       	brcc	.+12     	; 0x3f66 <main+0x358>
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	61 f0       	breq	.+24     	; 0x3f78 <main+0x36a>
    3f60:	02 97       	sbiw	r24, 0x02	; 2
    3f62:	11 f5       	brne	.+68     	; 0x3fa8 <main+0x39a>
    3f64:	0d c0       	rjmp	.+26     	; 0x3f80 <main+0x372>
    3f66:	85 30       	cpi	r24, 0x05	; 5
    3f68:	91 05       	cpc	r25, r1
    3f6a:	b1 f0       	breq	.+44     	; 0x3f98 <main+0x38a>
    3f6c:	85 30       	cpi	r24, 0x05	; 5
    3f6e:	91 05       	cpc	r25, r1
    3f70:	78 f0       	brcs	.+30     	; 0x3f90 <main+0x382>
    3f72:	0c 97       	sbiw	r24, 0x0c	; 12
    3f74:	c9 f4       	brne	.+50     	; 0x3fa8 <main+0x39a>
    3f76:	14 c0       	rjmp	.+40     	; 0x3fa0 <main+0x392>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    3f78:	c8 01       	movw	r24, r16
    3f7a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <handle_message_length_1>
    3f7e:	1a c0       	rjmp	.+52     	; 0x3fb4 <main+0x3a6>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    3f80:	c8 01       	movw	r24, r16
    3f82:	0e 94 83 1a 	call	0x3506	; 0x3506 <handle_message_length_2>
    3f86:	16 c0       	rjmp	.+44     	; 0x3fb4 <main+0x3a6>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    3f88:	c8 01       	movw	r24, r16
    3f8a:	0e 94 0f 10 	call	0x201e	; 0x201e <handle_message_length_3>
    3f8e:	12 c0       	rjmp	.+36     	; 0x3fb4 <main+0x3a6>
                        break;
					case 4:
						handle_message_length_4(&msg_buffer[0]);
    3f90:	c8 01       	movw	r24, r16
    3f92:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <handle_message_length_4>
    3f96:	0e c0       	rjmp	.+28     	; 0x3fb4 <main+0x3a6>
						break;
                    case 5: // if length 5, then decode, set x,y index, or set gain, bias
                        handle_message_length_5(&msg_buffer[0]);
    3f98:	c8 01       	movw	r24, r16
    3f9a:	0e 94 c0 19 	call	0x3380	; 0x3380 <handle_message_length_5>
    3f9e:	0a c0       	rjmp	.+20     	; 0x3fb4 <main+0x3a6>
                        break;
                    case 12: //if length 12, then set laser trigger pattern
                        handle_message_length_12(&msg_buffer[0]);
    3fa0:	c8 01       	movw	r24, r16
    3fa2:	0e 94 5d 09 	call	0x12ba	; 0x12ba <handle_message_length_12>
    3fa6:	06 c0       	rjmp	.+12     	; 0x3fb4 <main+0x3a6>
                        break;
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	68 e0       	ldi	r22, 0x08	; 8
    3fac:	49 ee       	ldi	r20, 0xE9	; 233
    3fae:	50 e2       	ldi	r21, 0x20	; 32
    3fb0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has changed
    3fb4:	80 91 9c 20 	lds	r24, 0x209C
    3fb8:	88 23       	and	r24, r24
    3fba:	09 f0       	breq	.+2      	; 0x3fbe <main+0x3b0>
    3fbc:	c1 cf       	rjmp	.-126    	; 0x3f40 <main+0x332>
                if (frame_num != frame_num_old) {
    3fbe:	20 91 e5 24 	lds	r18, 0x24E5
    3fc2:	30 91 e6 24 	lds	r19, 0x24E6
    3fc6:	80 91 9d 20 	lds	r24, 0x209D
    3fca:	90 91 9e 20 	lds	r25, 0x209E
    3fce:	28 17       	cp	r18, r24
    3fd0:	39 07       	cpc	r19, r25
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <main+0x3c8>
    3fd4:	b5 cf       	rjmp	.-150    	; 0x3f40 <main+0x332>
                    frame_num_old = frame_num; //update the 'old' frame number
    3fd6:	80 91 e5 24 	lds	r24, 0x24E5
    3fda:	90 91 e6 24 	lds	r25, 0x24E6
    3fde:	80 93 9d 20 	sts	0x209D, r24
    3fe2:	90 93 9e 20 	sts	0x209E, r25
                    fetch_display_frame(frame_num);
    3fe6:	80 91 e5 24 	lds	r24, 0x24E5
    3fea:	90 91 e6 24 	lds	r25, 0x24E6
    3fee:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <fetch_display_frame>
    3ff2:	a6 cf       	rjmp	.-180    	; 0x3f40 <main+0x332>
                }
            }
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    3ff4:	84 ed       	ldi	r24, 0xD4	; 212
    3ff6:	98 e0       	ldi	r25, 0x08	; 8
    3ff8:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3ffc:	8e 01       	movw	r16, r28
    3ffe:	07 5c       	subi	r16, 0xC7	; 199
    4000:	1f 4f       	sbci	r17, 0xFF	; 255
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    4002:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <uart_test>
    4006:	89 2b       	or	r24, r25
    4008:	e1 f3       	breq	.-8      	; 0x4002 <__stack+0x3>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    400a:	c8 01       	movw	r24, r16
    400c:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <fill_Rx_buffer>
                switch(message_length) {
    4010:	81 30       	cpi	r24, 0x01	; 1
    4012:	91 05       	cpc	r25, r1
    4014:	19 f0       	breq	.+6      	; 0x401c <__stack+0x1d>
    4016:	c2 97       	sbiw	r24, 0x32	; 50
    4018:	49 f4       	brne	.+18     	; 0x402c <__stack+0x2d>
    401a:	04 c0       	rjmp	.+8      	; 0x4024 <__stack+0x25>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    401c:	c8 01       	movw	r24, r16
    401e:	0e 94 c2 1a 	call	0x3584	; 0x3584 <handle_message_length_1>
    4022:	ef cf       	rjmp	.-34     	; 0x4002 <__stack+0x3>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    4024:	c8 01       	movw	r24, r16
    4026:	0e 94 6d 15 	call	0x2ada	; 0x2ada <display_dumped_frame>
    402a:	eb cf       	rjmp	.-42     	; 0x4002 <__stack+0x3>
                        break;
                    default:			
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	68 e0       	ldi	r22, 0x08	; 8
    4030:	49 ee       	ldi	r20, 0xE9	; 233
    4032:	50 e2       	ldi	r21, 0x20	; 32
    4034:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <i2cMasterSend>
    4038:	e4 cf       	rjmp	.-56     	; 0x4002 <__stack+0x3>

0000403a <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    403a:	1f 92       	push	r1
    403c:	0f 92       	push	r0
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	0f 92       	push	r0
    4042:	08 b6       	in	r0, 0x38	; 56
    4044:	0f 92       	push	r0
    4046:	09 b6       	in	r0, 0x39	; 57
    4048:	0f 92       	push	r0
    404a:	0b b6       	in	r0, 0x3b	; 59
    404c:	0f 92       	push	r0
    404e:	11 24       	eor	r1, r1
    4050:	18 be       	out	0x38, r1	; 56
    4052:	19 be       	out	0x39, r1	; 57
    4054:	1b be       	out	0x3b, r1	; 59
    4056:	2f 93       	push	r18
    4058:	3f 93       	push	r19
    405a:	4f 93       	push	r20
    405c:	5f 93       	push	r21
    405e:	6f 93       	push	r22
    4060:	7f 93       	push	r23
    4062:	8f 93       	push	r24
    4064:	9f 93       	push	r25
    4066:	af 93       	push	r26
    4068:	bf 93       	push	r27
    406a:	ef 93       	push	r30
    406c:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    406e:	87 e9       	ldi	r24, 0x97	; 151
    4070:	95 e2       	ldi	r25, 0x25	; 37
    4072:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <TWI_MasterInterruptHandler>
}
    4076:	ff 91       	pop	r31
    4078:	ef 91       	pop	r30
    407a:	bf 91       	pop	r27
    407c:	af 91       	pop	r26
    407e:	9f 91       	pop	r25
    4080:	8f 91       	pop	r24
    4082:	7f 91       	pop	r23
    4084:	6f 91       	pop	r22
    4086:	5f 91       	pop	r21
    4088:	4f 91       	pop	r20
    408a:	3f 91       	pop	r19
    408c:	2f 91       	pop	r18
    408e:	0f 90       	pop	r0
    4090:	0b be       	out	0x3b, r0	; 59
    4092:	0f 90       	pop	r0
    4094:	09 be       	out	0x39, r0	; 57
    4096:	0f 90       	pop	r0
    4098:	08 be       	out	0x38, r0	; 56
    409a:	0f 90       	pop	r0
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	0f 90       	pop	r0
    40a0:	1f 90       	pop	r1
    40a2:	18 95       	reti

000040a4 <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    40a4:	1f 92       	push	r1
    40a6:	0f 92       	push	r0
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	0f 92       	push	r0
    40ac:	08 b6       	in	r0, 0x38	; 56
    40ae:	0f 92       	push	r0
    40b0:	09 b6       	in	r0, 0x39	; 57
    40b2:	0f 92       	push	r0
    40b4:	0b b6       	in	r0, 0x3b	; 59
    40b6:	0f 92       	push	r0
    40b8:	11 24       	eor	r1, r1
    40ba:	18 be       	out	0x38, r1	; 56
    40bc:	19 be       	out	0x39, r1	; 57
    40be:	1b be       	out	0x3b, r1	; 59
    40c0:	2f 93       	push	r18
    40c2:	3f 93       	push	r19
    40c4:	4f 93       	push	r20
    40c6:	5f 93       	push	r21
    40c8:	6f 93       	push	r22
    40ca:	7f 93       	push	r23
    40cc:	8f 93       	push	r24
    40ce:	9f 93       	push	r25
    40d0:	af 93       	push	r26
    40d2:	bf 93       	push	r27
    40d4:	ef 93       	push	r30
    40d6:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    40d8:	88 e0       	ldi	r24, 0x08	; 8
    40da:	97 e2       	ldi	r25, 0x27	; 39
    40dc:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <TWI_MasterInterruptHandler>
}
    40e0:	ff 91       	pop	r31
    40e2:	ef 91       	pop	r30
    40e4:	bf 91       	pop	r27
    40e6:	af 91       	pop	r26
    40e8:	9f 91       	pop	r25
    40ea:	8f 91       	pop	r24
    40ec:	7f 91       	pop	r23
    40ee:	6f 91       	pop	r22
    40f0:	5f 91       	pop	r21
    40f2:	4f 91       	pop	r20
    40f4:	3f 91       	pop	r19
    40f6:	2f 91       	pop	r18
    40f8:	0f 90       	pop	r0
    40fa:	0b be       	out	0x3b, r0	; 59
    40fc:	0f 90       	pop	r0
    40fe:	09 be       	out	0x39, r0	; 57
    4100:	0f 90       	pop	r0
    4102:	08 be       	out	0x38, r0	; 56
    4104:	0f 90       	pop	r0
    4106:	0f be       	out	0x3f, r0	; 63
    4108:	0f 90       	pop	r0
    410a:	1f 90       	pop	r1
    410c:	18 95       	reti

0000410e <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    410e:	1f 92       	push	r1
    4110:	0f 92       	push	r0
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	0f 92       	push	r0
    4116:	08 b6       	in	r0, 0x38	; 56
    4118:	0f 92       	push	r0
    411a:	09 b6       	in	r0, 0x39	; 57
    411c:	0f 92       	push	r0
    411e:	0b b6       	in	r0, 0x3b	; 59
    4120:	0f 92       	push	r0
    4122:	11 24       	eor	r1, r1
    4124:	18 be       	out	0x38, r1	; 56
    4126:	19 be       	out	0x39, r1	; 57
    4128:	1b be       	out	0x3b, r1	; 59
    412a:	2f 93       	push	r18
    412c:	3f 93       	push	r19
    412e:	4f 93       	push	r20
    4130:	5f 93       	push	r21
    4132:	6f 93       	push	r22
    4134:	7f 93       	push	r23
    4136:	8f 93       	push	r24
    4138:	9f 93       	push	r25
    413a:	af 93       	push	r26
    413c:	bf 93       	push	r27
    413e:	ef 93       	push	r30
    4140:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    4142:	82 e7       	ldi	r24, 0x72	; 114
    4144:	99 e2       	ldi	r25, 0x29	; 41
    4146:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <TWI_MasterInterruptHandler>
}
    414a:	ff 91       	pop	r31
    414c:	ef 91       	pop	r30
    414e:	bf 91       	pop	r27
    4150:	af 91       	pop	r26
    4152:	9f 91       	pop	r25
    4154:	8f 91       	pop	r24
    4156:	7f 91       	pop	r23
    4158:	6f 91       	pop	r22
    415a:	5f 91       	pop	r21
    415c:	4f 91       	pop	r20
    415e:	3f 91       	pop	r19
    4160:	2f 91       	pop	r18
    4162:	0f 90       	pop	r0
    4164:	0b be       	out	0x3b, r0	; 59
    4166:	0f 90       	pop	r0
    4168:	09 be       	out	0x39, r0	; 57
    416a:	0f 90       	pop	r0
    416c:	08 be       	out	0x38, r0	; 56
    416e:	0f 90       	pop	r0
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	0f 90       	pop	r0
    4174:	1f 90       	pop	r1
    4176:	18 95       	reti

00004178 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    4178:	1f 92       	push	r1
    417a:	0f 92       	push	r0
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	0f 92       	push	r0
    4180:	08 b6       	in	r0, 0x38	; 56
    4182:	0f 92       	push	r0
    4184:	09 b6       	in	r0, 0x39	; 57
    4186:	0f 92       	push	r0
    4188:	0b b6       	in	r0, 0x3b	; 59
    418a:	0f 92       	push	r0
    418c:	11 24       	eor	r1, r1
    418e:	18 be       	out	0x38, r1	; 56
    4190:	19 be       	out	0x39, r1	; 57
    4192:	1b be       	out	0x3b, r1	; 59
    4194:	2f 93       	push	r18
    4196:	3f 93       	push	r19
    4198:	4f 93       	push	r20
    419a:	5f 93       	push	r21
    419c:	6f 93       	push	r22
    419e:	7f 93       	push	r23
    41a0:	8f 93       	push	r24
    41a2:	9f 93       	push	r25
    41a4:	af 93       	push	r26
    41a6:	bf 93       	push	r27
    41a8:	ef 93       	push	r30
    41aa:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    41ac:	85 e7       	ldi	r24, 0x75	; 117
    41ae:	96 e2       	ldi	r25, 0x26	; 38
    41b0:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <TWI_MasterInterruptHandler>
}
    41b4:	ff 91       	pop	r31
    41b6:	ef 91       	pop	r30
    41b8:	bf 91       	pop	r27
    41ba:	af 91       	pop	r26
    41bc:	9f 91       	pop	r25
    41be:	8f 91       	pop	r24
    41c0:	7f 91       	pop	r23
    41c2:	6f 91       	pop	r22
    41c4:	5f 91       	pop	r21
    41c6:	4f 91       	pop	r20
    41c8:	3f 91       	pop	r19
    41ca:	2f 91       	pop	r18
    41cc:	0f 90       	pop	r0
    41ce:	0b be       	out	0x3b, r0	; 59
    41d0:	0f 90       	pop	r0
    41d2:	09 be       	out	0x39, r0	; 57
    41d4:	0f 90       	pop	r0
    41d6:	08 be       	out	0x38, r0	; 56
    41d8:	0f 90       	pop	r0
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	0f 90       	pop	r0
    41de:	1f 90       	pop	r1
    41e0:	18 95       	reti

000041e2 <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    41e2:	0f 93       	push	r16
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	0f 92       	push	r0
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    41ee:	2f b7       	in	r18, 0x3f	; 63
    41f0:	29 83       	std	Y+1, r18	; 0x01
  cli();
    41f2:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    41f4:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    41f6:	fc 01       	movw	r30, r24
    41f8:	08 ed       	ldi	r16, 0xD8	; 216
    41fa:	04 bf       	out	0x34, r16	; 52
    41fc:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	8f bf       	out	0x3f, r24	; 63
}
    4202:	0f 90       	pop	r0
    4204:	cf 91       	pop	r28
    4206:	df 91       	pop	r29
    4208:	0f 91       	pop	r16
    420a:	08 95       	ret

0000420c <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    420c:	28 2f       	mov	r18, r24
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	c9 01       	movw	r24, r18
    4212:	8c 7f       	andi	r24, 0xFC	; 252
    4214:	89 2b       	or	r24, r25
    4216:	e1 f4       	brne	.+56     	; 0x4250 <ledWrite+0x44>
    4218:	86 2f       	mov	r24, r22
    421a:	8e 7f       	andi	r24, 0xFE	; 254
    421c:	c9 f4       	brne	.+50     	; 0x4250 <ledWrite+0x44>
    421e:	2c 5f       	subi	r18, 0xFC	; 252
    4220:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    4222:	61 30       	cpi	r22, 0x01	; 1
    4224:	59 f4       	brne	.+22     	; 0x423c <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	02 c0       	rjmp	.+4      	; 0x4230 <ledWrite+0x24>
    422c:	88 0f       	add	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	2a 95       	dec	r18
    4232:	e2 f7       	brpl	.-8      	; 0x422c <ledWrite+0x20>
    4234:	e0 e0       	ldi	r30, 0x00	; 0
    4236:	f7 e0       	ldi	r31, 0x07	; 7
    4238:	86 83       	std	Z+6, r24	; 0x06
    423a:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	02 c0       	rjmp	.+4      	; 0x4246 <ledWrite+0x3a>
    4242:	88 0f       	add	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	2a 95       	dec	r18
    4248:	e2 f7       	brpl	.-8      	; 0x4242 <ledWrite+0x36>
    424a:	e0 e0       	ldi	r30, 0x00	; 0
    424c:	f7 e0       	ldi	r31, 0x07	; 7
    424e:	85 83       	std	Z+5, r24	; 0x05
    4250:	08 95       	ret

00004252 <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    4252:	28 2f       	mov	r18, r24
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	c9 01       	movw	r24, r18
    4258:	8c 7f       	andi	r24, 0xFC	; 252
    425a:	89 2b       	or	r24, r25
    425c:	61 f4       	brne	.+24     	; 0x4276 <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    425e:	2c 5f       	subi	r18, 0xFC	; 252
    4260:	3f 4f       	sbci	r19, 0xFF	; 255
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	02 c0       	rjmp	.+4      	; 0x426c <ledToggle+0x1a>
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	2a 95       	dec	r18
    426e:	e2 f7       	brpl	.-8      	; 0x4268 <ledToggle+0x16>
    4270:	e0 e0       	ldi	r30, 0x00	; 0
    4272:	f7 e0       	ldi	r31, 0x07	; 7
    4274:	87 83       	std	Z+7, r24	; 0x07
    4276:	08 95       	ret

00004278 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    427c:	a0 e0       	ldi	r26, 0x00	; 0
    427e:	b7 e0       	ldi	r27, 0x07	; 7
    4280:	60 e2       	ldi	r22, 0x20	; 32
    4282:	40 e2       	ldi	r20, 0x20	; 32
    4284:	53 e0       	ldi	r21, 0x03	; 3
    4286:	17 96       	adiw	r26, 0x07	; 7
    4288:	6c 93       	st	X, r22
    428a:	17 97       	sbiw	r26, 0x07	; 7
    428c:	8c ea       	ldi	r24, 0xAC	; 172
    428e:	9d e0       	ldi	r25, 0x0D	; 13
    4290:	fa 01       	movw	r30, r20
    4292:	31 97       	sbiw	r30, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4296:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	d9 f7       	brne	.-10     	; 0x4290 <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    429a:	2f 5f       	subi	r18, 0xFF	; 255
    429c:	3f 4f       	sbci	r19, 0xFF	; 255
    429e:	2a 30       	cpi	r18, 0x0A	; 10
    42a0:	31 05       	cpc	r19, r1
    42a2:	89 f7       	brne	.-30     	; 0x4286 <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    42a4:	08 95       	ret

000042a6 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    42a6:	48 2f       	mov	r20, r24
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	ca 01       	movw	r24, r20
    42ac:	8c 7f       	andi	r24, 0xFC	; 252
    42ae:	89 2b       	or	r24, r25
    42b0:	79 f5       	brne	.+94     	; 0x4310 <digitalMode+0x6a>
    if (mode == OUTPUT) {
    42b2:	66 23       	and	r22, r22
    42b4:	b9 f4       	brne	.+46     	; 0x42e4 <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    42b6:	4c 5f       	subi	r20, 0xFC	; 252
    42b8:	5f 4f       	sbci	r21, 0xFF	; 255
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	9c 01       	movw	r18, r24
    42c0:	04 2e       	mov	r0, r20
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <digitalMode+0x22>
    42c4:	22 0f       	add	r18, r18
    42c6:	33 1f       	adc	r19, r19
    42c8:	0a 94       	dec	r0
    42ca:	e2 f7       	brpl	.-8      	; 0x42c4 <digitalMode+0x1e>
    42cc:	44 50       	subi	r20, 0x04	; 4
    42ce:	50 40       	sbci	r21, 0x00	; 0
    42d0:	e0 e2       	ldi	r30, 0x20	; 32
    42d2:	f7 e0       	ldi	r31, 0x07	; 7
    42d4:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    42d6:	02 c0       	rjmp	.+4      	; 0x42dc <digitalMode+0x36>
    42d8:	88 0f       	add	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	4a 95       	dec	r20
    42de:	e2 f7       	brpl	.-8      	; 0x42d8 <digitalMode+0x32>
    42e0:	81 83       	std	Z+1, r24	; 0x01
    42e2:	08 95       	ret
    } else if (mode == INPUT) {
    42e4:	61 30       	cpi	r22, 0x01	; 1
    42e6:	a1 f4       	brne	.+40     	; 0x4310 <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	9c 01       	movw	r18, r24
    42ee:	04 2e       	mov	r0, r20
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <digitalMode+0x50>
    42f2:	22 0f       	add	r18, r18
    42f4:	33 1f       	adc	r19, r19
    42f6:	0a 94       	dec	r0
    42f8:	e2 f7       	brpl	.-8      	; 0x42f2 <digitalMode+0x4c>
    42fa:	e0 e2       	ldi	r30, 0x20	; 32
    42fc:	f7 e0       	ldi	r31, 0x07	; 7
    42fe:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    4300:	4c 5f       	subi	r20, 0xFC	; 252
    4302:	5f 4f       	sbci	r21, 0xFF	; 255
    4304:	02 c0       	rjmp	.+4      	; 0x430a <digitalMode+0x64>
    4306:	88 0f       	add	r24, r24
    4308:	99 1f       	adc	r25, r25
    430a:	4a 95       	dec	r20
    430c:	e2 f7       	brpl	.-8      	; 0x4306 <digitalMode+0x60>
    430e:	85 83       	std	Z+5, r24	; 0x05
    4310:	08 95       	ret

00004312 <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    4312:	28 2f       	mov	r18, r24
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	c9 01       	movw	r24, r18
    4318:	8c 7f       	andi	r24, 0xFC	; 252
    431a:	89 2b       	or	r24, r25
    431c:	11 f0       	breq	.+4      	; 0x4322 <digitalRead+0x10>
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    4322:	80 91 28 07 	lds	r24, 0x0728
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	02 c0       	rjmp	.+4      	; 0x432e <digitalRead+0x1c>
    432a:	95 95       	asr	r25
    432c:	87 95       	ror	r24
    432e:	2a 95       	dec	r18
    4330:	e2 f7       	brpl	.-8      	; 0x432a <digitalRead+0x18>
    4332:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    4334:	08 95       	ret

00004336 <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    4336:	28 2f       	mov	r18, r24
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	c9 01       	movw	r24, r18
    433c:	8c 7f       	andi	r24, 0xFC	; 252
    433e:	89 2b       	or	r24, r25
    4340:	d1 f4       	brne	.+52     	; 0x4376 <digitalWrite+0x40>
    4342:	86 2f       	mov	r24, r22
    4344:	8e 7f       	andi	r24, 0xFE	; 254
    4346:	b9 f4       	brne	.+46     	; 0x4376 <digitalWrite+0x40>
    if (value == 1) {
    4348:	61 30       	cpi	r22, 0x01	; 1
    434a:	59 f4       	brne	.+22     	; 0x4362 <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <digitalWrite+0x20>
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	2a 95       	dec	r18
    4358:	e2 f7       	brpl	.-8      	; 0x4352 <digitalWrite+0x1c>
    435a:	e0 e2       	ldi	r30, 0x20	; 32
    435c:	f7 e0       	ldi	r31, 0x07	; 7
    435e:	85 83       	std	Z+5, r24	; 0x05
    4360:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	02 c0       	rjmp	.+4      	; 0x436c <digitalWrite+0x36>
    4368:	88 0f       	add	r24, r24
    436a:	99 1f       	adc	r25, r25
    436c:	2a 95       	dec	r18
    436e:	e2 f7       	brpl	.-8      	; 0x4368 <digitalWrite+0x32>
    4370:	e0 e2       	ldi	r30, 0x20	; 32
    4372:	f7 e0       	ldi	r31, 0x07	; 7
    4374:	86 83       	std	Z+6, r24	; 0x06
    4376:	08 95       	ret

00004378 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    4378:	28 2f       	mov	r18, r24
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	c9 01       	movw	r24, r18
    437e:	8c 7f       	andi	r24, 0xFC	; 252
    4380:	89 2b       	or	r24, r25
    4382:	51 f4       	brne	.+20     	; 0x4398 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	02 c0       	rjmp	.+4      	; 0x438e <digitalToggle+0x16>
    438a:	88 0f       	add	r24, r24
    438c:	99 1f       	adc	r25, r25
    438e:	2a 95       	dec	r18
    4390:	e2 f7       	brpl	.-8      	; 0x438a <digitalToggle+0x12>
    4392:	e0 e2       	ldi	r30, 0x20	; 32
    4394:	f7 e0       	ldi	r31, 0x07	; 7
    4396:	87 83       	std	Z+7, r24	; 0x07
    4398:	08 95       	ret

0000439a <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    439a:	a2 e0       	ldi	r26, 0x02	; 2
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	e3 ed       	ldi	r30, 0xD3	; 211
    43a0:	f1 e2       	ldi	r31, 0x21	; 33
    43a2:	0c 94 5b 58 	jmp	0xb0b6	; 0xb0b6 <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    43a6:	28 2f       	mov	r18, r24
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	c9 01       	movw	r24, r18
    43ac:	88 7f       	andi	r24, 0xF8	; 248
    43ae:	89 2b       	or	r24, r25
    43b0:	19 f0       	breq	.+6      	; 0x43b8 <analogRead+0x1e>
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	49 c0       	rjmp	.+146    	; 0x444a <analogRead+0xb0>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    43b8:	80 e1       	ldi	r24, 0x10	; 16
    43ba:	e0 e4       	ldi	r30, 0x40	; 64
    43bc:	f6 e0       	ldi	r31, 0x06	; 6
    43be:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    43c0:	27 70       	andi	r18, 0x07	; 7
    43c2:	30 70       	andi	r19, 0x00	; 0
    43c4:	22 0f       	add	r18, r18
    43c6:	33 1f       	adc	r19, r19
    43c8:	22 0f       	add	r18, r18
    43ca:	33 1f       	adc	r19, r19
    43cc:	82 2f       	mov	r24, r18
    43ce:	80 68       	ori	r24, 0x80	; 128
    43d0:	e0 ec       	ldi	r30, 0xC0	; 192
    43d2:	f8 e0       	ldi	r31, 0x08	; 8
    43d4:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    43d6:	80 91 c2 08 	lds	r24, 0x08C2
    43da:	87 ff       	sbrs	r24, 7
    43dc:	fc cf       	rjmp	.-8      	; 0x43d6 <analogRead+0x3c>
    SPIC.DATA = 0x10;
    43de:	80 e1       	ldi	r24, 0x10	; 16
    43e0:	e0 ec       	ldi	r30, 0xC0	; 192
    43e2:	f8 e0       	ldi	r31, 0x08	; 8
    43e4:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    43e6:	80 91 c2 08 	lds	r24, 0x08C2
    43ea:	87 ff       	sbrs	r24, 7
    43ec:	fc cf       	rjmp	.-8      	; 0x43e6 <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    43ee:	e0 e4       	ldi	r30, 0x40	; 64
    43f0:	f6 e0       	ldi	r31, 0x06	; 6
    43f2:	80 e1       	ldi	r24, 0x10	; 16
    43f4:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    43f6:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    43f8:	e0 ec       	ldi	r30, 0xC0	; 192
    43fa:	f8 e0       	ldi	r31, 0x08	; 8
    43fc:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    43fe:	80 91 c2 08 	lds	r24, 0x08C2
    4402:	87 ff       	sbrs	r24, 7
    4404:	fc cf       	rjmp	.-8      	; 0x43fe <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    4406:	de 01       	movw	r26, r28
    4408:	11 96       	adiw	r26, 0x01	; 1
    440a:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    440e:	e0 ec       	ldi	r30, 0xC0	; 192
    4410:	f8 e0       	ldi	r31, 0x08	; 8
    4412:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4414:	80 91 c2 08 	lds	r24, 0x08C2
    4418:	87 ff       	sbrs	r24, 7
    441a:	fc cf       	rjmp	.-8      	; 0x4414 <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    441c:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    4420:	11 96       	adiw	r26, 0x01	; 1
    4422:	9c 93       	st	X, r25
    4424:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    4426:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    4428:	80 e1       	ldi	r24, 0x10	; 16
    442a:	e0 e4       	ldi	r30, 0x40	; 64
    442c:	f6 e0       	ldi	r31, 0x06	; 6
    442e:	85 83       	std	Z+5, r24	; 0x05
	
	//in this way, 0v ->0, 5V -> 2047, 10V->4095
    if (w1 & 1 << 12) {
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	94 ff       	sbrs	r25, 4
    4436:	02 c0       	rjmp	.+4      	; 0x443c <analogRead+0xa2>
      w1 = (w1 & 0x0fff) >> 1;
    4438:	9f 70       	andi	r25, 0x0F	; 15
    443a:	01 c0       	rjmp	.+2      	; 0x443e <analogRead+0xa4>
    } 
	else{
	  w1 = (w1 | 0x1000) >> 1;
    443c:	90 61       	ori	r25, 0x10	; 16
    443e:	95 95       	asr	r25
    4440:	87 95       	ror	r24
    4442:	89 83       	std	Y+1, r24	; 0x01
    4444:	9a 83       	std	Y+2, r25	; 0x02
	}
    return w1;
    4446:	29 81       	ldd	r18, Y+1	; 0x01
    4448:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else {
    return 0;
  }
}
    444a:	c9 01       	movw	r24, r18
    444c:	22 96       	adiw	r28, 0x02	; 2
    444e:	e2 e0       	ldi	r30, 0x02	; 2
    4450:	0c 94 77 58 	jmp	0xb0ee	; 0xb0ee <__epilogue_restores__+0x20>

00004454 <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    4454:	28 2f       	mov	r18, r24
  if (!((ch & ~3) || ((value & ~2047) && (~value & ~2047)))) {
    4456:	8c 7f       	andi	r24, 0xFC	; 252
    4458:	b9 f5       	brne	.+110    	; 0x44c8 <analogWrite+0x74>
    445a:	cb 01       	movw	r24, r22
    445c:	80 70       	andi	r24, 0x00	; 0
    445e:	98 7f       	andi	r25, 0xF8	; 248
    4460:	89 2b       	or	r24, r25
    4462:	39 f0       	breq	.+14     	; 0x4472 <analogWrite+0x1e>
    4464:	cb 01       	movw	r24, r22
    4466:	80 95       	com	r24
    4468:	90 95       	com	r25
    446a:	80 70       	andi	r24, 0x00	; 0
    446c:	98 7f       	andi	r25, 0xF8	; 248
    446e:	89 2b       	or	r24, r25
    4470:	59 f5       	brne	.+86     	; 0x44c8 <analogWrite+0x74>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    4472:	80 e1       	ldi	r24, 0x10	; 16
    4474:	e0 e6       	ldi	r30, 0x60	; 96
    4476:	f6 e0       	ldi	r31, 0x06	; 6
    4478:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    447a:	27 70       	andi	r18, 0x07	; 7
    447c:	e0 ec       	ldi	r30, 0xC0	; 192
    447e:	f9 e0       	ldi	r31, 0x09	; 9
    4480:	23 83       	std	Z+3, r18	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4482:	80 91 c2 09 	lds	r24, 0x09C2
    4486:	87 ff       	sbrs	r24, 7
    4488:	fc cf       	rjmp	.-8      	; 0x4482 <analogWrite+0x2e>
    SPID.DATA = (uint8_t)((value & 0xff0) >> 4);
    448a:	cb 01       	movw	r24, r22
    448c:	80 7f       	andi	r24, 0xF0	; 240
    448e:	9f 70       	andi	r25, 0x0F	; 15
    4490:	e4 e0       	ldi	r30, 0x04	; 4
    4492:	95 95       	asr	r25
    4494:	87 95       	ror	r24
    4496:	ea 95       	dec	r30
    4498:	e1 f7       	brne	.-8      	; 0x4492 <analogWrite+0x3e>
    449a:	e0 ec       	ldi	r30, 0xC0	; 192
    449c:	f9 e0       	ldi	r31, 0x09	; 9
    449e:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    44a0:	80 91 c2 09 	lds	r24, 0x09C2
    44a4:	87 ff       	sbrs	r24, 7
    44a6:	fc cf       	rjmp	.-8      	; 0x44a0 <analogWrite+0x4c>
    SPID.DATA = (uint8_t)((value & 0xf) << 4);
    44a8:	54 e0       	ldi	r21, 0x04	; 4
    44aa:	66 0f       	add	r22, r22
    44ac:	77 1f       	adc	r23, r23
    44ae:	5a 95       	dec	r21
    44b0:	e1 f7       	brne	.-8      	; 0x44aa <analogWrite+0x56>
    44b2:	e0 ec       	ldi	r30, 0xC0	; 192
    44b4:	f9 e0       	ldi	r31, 0x09	; 9
    44b6:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    44b8:	80 91 c2 09 	lds	r24, 0x09C2
    44bc:	87 ff       	sbrs	r24, 7
    44be:	fc cf       	rjmp	.-8      	; 0x44b8 <analogWrite+0x64>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    44c0:	80 e1       	ldi	r24, 0x10	; 16
    44c2:	e0 e6       	ldi	r30, 0x60	; 96
    44c4:	f6 e0       	ldi	r31, 0x06	; 6
    44c6:	85 83       	std	Z+5, r24	; 0x05
    44c8:	08 95       	ret

000044ca <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    44ca:	a0 e0       	ldi	r26, 0x00	; 0
    44cc:	b0 e0       	ldi	r27, 0x00	; 0
    44ce:	eb e6       	ldi	r30, 0x6B	; 107
    44d0:	f2 e2       	ldi	r31, 0x22	; 34
    44d2:	0c 94 4f 58 	jmp	0xb09e	; 0xb09e <__prologue_saves__+0x8>
    44d6:	b8 2e       	mov	r11, r24
    44d8:	c0 e0       	ldi	r28, 0x00	; 0
    44da:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    44dc:	00 e2       	ldi	r16, 0x20	; 32
    44de:	17 e0       	ldi	r17, 0x07	; 7
    44e0:	66 24       	eor	r6, r6
    44e2:	63 94       	inc	r6
    44e4:	22 e0       	ldi	r18, 0x02	; 2
    44e6:	72 2e       	mov	r7, r18
    44e8:	94 e0       	ldi	r25, 0x04	; 4
    44ea:	89 2e       	mov	r8, r25
    44ec:	88 e0       	ldi	r24, 0x08	; 8
    44ee:	98 2e       	mov	r9, r24
    44f0:	b0 e2       	ldi	r27, 0x20	; 32
    44f2:	eb 2e       	mov	r14, r27
    44f4:	b3 e0       	ldi	r27, 0x03	; 3
    44f6:	fb 2e       	mov	r15, r27

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    44f8:	c1 2c       	mov	r12, r1
    44fa:	a7 e0       	ldi	r26, 0x07	; 7
    44fc:	da 2e       	mov	r13, r26
    44fe:	f0 e2       	ldi	r31, 0x20	; 32
    4500:	af 2e       	mov	r10, r31

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4502:	f8 01       	movw	r30, r16
    4504:	67 82       	std	Z+7, r6	; 0x07
    4506:	77 82       	std	Z+7, r7	; 0x07
    4508:	87 82       	std	Z+7, r8	; 0x07
    450a:	97 82       	std	Z+7, r9	; 0x07
    450c:	88 ee       	ldi	r24, 0xE8	; 232
    450e:	93 e0       	ldi	r25, 0x03	; 3
    4510:	f7 01       	movw	r30, r14
    4512:	31 97       	sbiw	r30, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4516:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4518:	d9 f7       	brne	.-10     	; 0x4510 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    451a:	8b 2d       	mov	r24, r11
    451c:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    4520:	bc 01       	movw	r22, r24
    4522:	28 ee       	ldi	r18, 0xE8	; 232
    4524:	33 e0       	ldi	r19, 0x03	; 3
    4526:	f7 01       	movw	r30, r14
    4528:	31 97       	sbiw	r30, 0x01	; 1
    452a:	f1 f7       	brne	.-4      	; 0x4528 <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452c:	21 50       	subi	r18, 0x01	; 1
    452e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4530:	d1 f7       	brne	.-12     	; 0x4526 <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    if (k % 2)
    4538:	c0 ff       	sbrs	r28, 0
    453a:	02 c0       	rjmp	.+4      	; 0x4540 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    453c:	f6 01       	movw	r30, r12
    453e:	a7 82       	std	Z+7, r10	; 0x07
    4540:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    4542:	cc 33       	cpi	r28, 0x3C	; 60
    4544:	d1 05       	cpc	r29, r1
    4546:	e9 f6       	brne	.-70     	; 0x4502 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per triangle wave pulse
  }
}
    4548:	cd b7       	in	r28, 0x3d	; 61
    454a:	de b7       	in	r29, 0x3e	; 62
    454c:	ee e0       	ldi	r30, 0x0E	; 14
    454e:	0c 94 6b 58 	jmp	0xb0d6	; 0xb0d6 <__epilogue_restores__+0x8>

00004552 <SystemReset>:

void SystemReset(void) {
    4552:	0f 93       	push	r16
    4554:	df 93       	push	r29
    4556:	cf 93       	push	r28
    4558:	0f 92       	push	r0
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    455e:	8f b7       	in	r24, 0x3f	; 63
    4560:	89 83       	std	Y+1, r24	; 0x01
  cli();
    4562:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    4564:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    4566:	21 e0       	ldi	r18, 0x01	; 1
    4568:	89 e7       	ldi	r24, 0x79	; 121
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	fc 01       	movw	r30, r24
    456e:	08 ed       	ldi	r16, 0xD8	; 216
    4570:	04 bf       	out	0x34, r16	; 52
    4572:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    4574:	89 81       	ldd	r24, Y+1	; 0x01
    4576:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    4578:	0f 90       	pop	r0
    457a:	cf 91       	pop	r28
    457c:	df 91       	pop	r29
    457e:	0f 91       	pop	r16
    4580:	08 95       	ret

00004582 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    4582:	a0 e0       	ldi	r26, 0x00	; 0
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	e7 ec       	ldi	r30, 0xC7	; 199
    4588:	f2 e2       	ldi	r31, 0x22	; 34
    458a:	0c 94 51 58 	jmp	0xb0a2	; 0xb0a2 <__prologue_saves__+0xc>
    458e:	98 2e       	mov	r9, r24
    4590:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4592:	60 ea       	ldi	r22, 0xA0	; 160
    4594:	a6 2e       	mov	r10, r22
    4596:	6f e0       	ldi	r22, 0x0F	; 15
    4598:	b6 2e       	mov	r11, r22
    459a:	50 e8       	ldi	r21, 0x80	; 128
    459c:	c5 2e       	mov	r12, r21
    459e:	5e e3       	ldi	r21, 0x3E	; 62
    45a0:	d5 2e       	mov	r13, r21

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    45a2:	e1 2c       	mov	r14, r1
    45a4:	47 e0       	ldi	r20, 0x07	; 7
    45a6:	f4 2e       	mov	r15, r20
    45a8:	30 e2       	ldi	r19, 0x20	; 32
    45aa:	83 2e       	mov	r8, r19
    45ac:	1d c0       	rjmp	.+58     	; 0x45e8 <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    45ae:	14 36       	cpi	r17, 0x64	; 100
    45b0:	10 f4       	brcc	.+4      	; 0x45b6 <test_ADC+0x34>
    45b2:	be 01       	movw	r22, r28
    45b4:	03 c0       	rjmp	.+6      	; 0x45bc <test_ADC+0x3a>
    45b6:	b5 01       	movw	r22, r10
    45b8:	6c 1b       	sub	r22, r28
    45ba:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    45c2:	89 2d       	mov	r24, r9
    45c4:	0e 94 cd 21 	call	0x439a	; 0x439a <analogRead>
    45c8:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	0e 94 2a 22 	call	0x4454	; 0x4454 <analogWrite>
    45d0:	c6 01       	movw	r24, r12
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	f1 f7       	brne	.-4      	; 0x45d2 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    45d6:	1f 5f       	subi	r17, 0xFF	; 255
    45d8:	64 96       	adiw	r28, 0x14	; 20
    45da:	18 3c       	cpi	r17, 0xC8	; 200
    45dc:	41 f7       	brne	.-48     	; 0x45ae <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    45de:	f7 01       	movw	r30, r14
    45e0:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    45e2:	0f 5f       	subi	r16, 0xFF	; 255
    45e4:	0e 31       	cpi	r16, 0x1E	; 30
    45e6:	21 f0       	breq	.+8      	; 0x45f0 <test_ADC+0x6e>
    45e8:	10 e0       	ldi	r17, 0x00	; 0
    45ea:	c0 e0       	ldi	r28, 0x00	; 0
    45ec:	d0 e0       	ldi	r29, 0x00	; 0
    45ee:	df cf       	rjmp	.-66     	; 0x45ae <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    45f0:	cd b7       	in	r28, 0x3d	; 61
    45f2:	de b7       	in	r29, 0x3e	; 62
    45f4:	ec e0       	ldi	r30, 0x0C	; 12
    45f6:	0c 94 6d 58 	jmp	0xb0da	; 0xb0da <__epilogue_restores__+0xc>

000045fa <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    45fa:	bc 01       	movw	r22, r24
    45fc:	21 e6       	ldi	r18, 0x61	; 97
    45fe:	3c e0       	ldi	r19, 0x0C	; 12
    4600:	40 e0       	ldi	r20, 0x00	; 0
    4602:	50 e0       	ldi	r21, 0x00	; 0
    4604:	08 c0       	rjmp	.+16     	; 0x4616 <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4606:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    4608:	2f 5f       	subi	r18, 0xFF	; 255
    460a:	3f 4f       	sbci	r19, 0xFF	; 255
    460c:	e4 91       	lpm	r30, Z+
    460e:	ee 23       	and	r30, r30
    4610:	d1 f7       	brne	.-12     	; 0x4606 <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4612:	4f 5f       	subi	r20, 0xFF	; 255
    4614:	5f 4f       	sbci	r21, 0xFF	; 255
    4616:	46 17       	cp	r20, r22
    4618:	57 07       	cpc	r21, r23
    461a:	21 f0       	breq	.+8      	; 0x4624 <put_rc+0x2a>
    461c:	f9 01       	movw	r30, r18
    461e:	84 91       	lpm	r24, Z+
    4620:	88 23       	and	r24, r24
    4622:	89 f7       	brne	.-30     	; 0x4606 <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    4624:	00 d0       	rcall	.+0      	; 0x4626 <put_rc+0x2c>
    4626:	0f 92       	push	r0
    4628:	8d e5       	ldi	r24, 0x5D	; 93
    462a:	9c e0       	ldi	r25, 0x0C	; 12
    462c:	ed b7       	in	r30, 0x3d	; 61
    462e:	fe b7       	in	r31, 0x3e	; 62
    4630:	81 83       	std	Z+1, r24	; 0x01
    4632:	92 83       	std	Z+2, r25	; 0x02
    4634:	23 83       	std	Z+3, r18	; 0x03
    4636:	34 83       	std	Z+4, r19	; 0x04
    4638:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
}
    4644:	08 95       	ret

00004646 <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4646:	a0 e0       	ldi	r26, 0x00	; 0
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	e9 e2       	ldi	r30, 0x29	; 41
    464c:	f3 e2       	ldi	r31, 0x23	; 35
    464e:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <__prologue_saves__+0xe>
    4652:	5c 01       	movw	r10, r24
    4654:	6a 01       	movw	r12, r20
    4656:	7b 01       	movw	r14, r22
    4658:	92 2e       	mov	r9, r18
    465a:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    465c:	83 e5       	ldi	r24, 0x53	; 83
    465e:	9f e0       	ldi	r25, 0x0F	; 15
    4660:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    buff[0] = 'g';
    4664:	87 e6       	ldi	r24, 0x67	; 103
    4666:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4668:	bb 27       	eor	r27, r27
    466a:	af 2d       	mov	r26, r15
    466c:	9e 2d       	mov	r25, r14
    466e:	8d 2d       	mov	r24, r13
    4670:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4672:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    4674:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4676:	85 e4       	ldi	r24, 0x45	; 69
    4678:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    467a:	c5 01       	movw	r24, r10
    467c:	60 e7       	ldi	r22, 0x70	; 112
    467e:	a8 01       	movw	r20, r16
    4680:	25 e0       	ldi	r18, 0x05	; 5
    4682:	09 2d       	mov	r16, r9
    4684:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4688:	d5 01       	movw	r26, r10
    468a:	1d 96       	adiw	r26, 0x0d	; 13
    468c:	8c 91       	ld	r24, X
    468e:	1d 97       	sbiw	r26, 0x0d	; 13
    4690:	88 23       	and	r24, r24
    4692:	d1 f7       	brne	.-12     	; 0x4688 <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4694:	1e 96       	adiw	r26, 0x0e	; 14
    4696:	8c 91       	ld	r24, X
    4698:	1e 97       	sbiw	r26, 0x0e	; 14
    469a:	81 30       	cpi	r24, 0x01	; 1
    469c:	b9 f0       	breq	.+46     	; 0x46cc <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    469e:	1e 96       	adiw	r26, 0x0e	; 14
    46a0:	2c 91       	ld	r18, X
    46a2:	00 d0       	rcall	.+0      	; 0x46a4 <verifyEEPage+0x5e>
    46a4:	0f 92       	push	r0
    46a6:	ed b7       	in	r30, 0x3d	; 61
    46a8:	fe b7       	in	r31, 0x3e	; 62
    46aa:	31 96       	adiw	r30, 0x01	; 1
    46ac:	86 e3       	ldi	r24, 0x36	; 54
    46ae:	9f e0       	ldi	r25, 0x0F	; 15
    46b0:	ad b7       	in	r26, 0x3d	; 61
    46b2:	be b7       	in	r27, 0x3e	; 62
    46b4:	11 96       	adiw	r26, 0x01	; 1
    46b6:	8d 93       	st	X+, r24
    46b8:	9c 93       	st	X, r25
    46ba:	12 97       	sbiw	r26, 0x02	; 2
    46bc:	22 83       	std	Z+2, r18	; 0x02
    46be:	13 82       	std	Z+3, r1	; 0x03
    46c0:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	de 01       	movw	r26, r28
    46ce:	31 e0       	ldi	r19, 0x01	; 1
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	0d c0       	rjmp	.+26     	; 0x46ee <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    46d4:	e5 01       	movw	r28, r10
    46d6:	ed 81       	ldd	r30, Y+5	; 0x05
    46d8:	fe 81       	ldd	r31, Y+6	; 0x06
    46da:	e2 0f       	add	r30, r18
    46dc:	f1 1d       	adc	r31, r1
    46de:	90 81       	ld	r25, Z
    46e0:	15 96       	adiw	r26, 0x05	; 5
    46e2:	8c 91       	ld	r24, X
    46e4:	15 97       	sbiw	r26, 0x05	; 5
    46e6:	98 13       	cpse	r25, r24
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    46ea:	2f 5f       	subi	r18, 0xFF	; 255
    46ec:	11 96       	adiw	r26, 0x01	; 1
    46ee:	29 15       	cp	r18, r9
    46f0:	88 f3       	brcs	.-30     	; 0x46d4 <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    46f2:	83 2f       	mov	r24, r19
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	cd b7       	in	r28, 0x3d	; 61
    46f8:	de b7       	in	r29, 0x3e	; 62
    46fa:	eb e0       	ldi	r30, 0x0B	; 11
    46fc:	0c 94 6e 58 	jmp	0xb0dc	; 0xb0dc <__epilogue_restores__+0xe>

00004700 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4700:	a0 e0       	ldi	r26, 0x00	; 0
    4702:	b0 e0       	ldi	r27, 0x00	; 0
    4704:	e6 e8       	ldi	r30, 0x86	; 134
    4706:	f3 e2       	ldi	r31, 0x23	; 35
    4708:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <__prologue_saves__+0xe>
    470c:	5c 01       	movw	r10, r24
    470e:	6a 01       	movw	r12, r20
    4710:	7b 01       	movw	r14, r22
    4712:	92 2e       	mov	r9, r18
    4714:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    4716:	82 e7       	ldi	r24, 0x72	; 114
    4718:	9f e0       	ldi	r25, 0x0F	; 15
    471a:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    buff[0] = 'g';
    471e:	87 e6       	ldi	r24, 0x67	; 103
    4720:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4722:	bb 27       	eor	r27, r27
    4724:	af 2d       	mov	r26, r15
    4726:	9e 2d       	mov	r25, r14
    4728:	8d 2d       	mov	r24, r13
    472a:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    472c:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    472e:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4730:	85 e4       	ldi	r24, 0x45	; 69
    4732:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4734:	c5 01       	movw	r24, r10
    4736:	60 e7       	ldi	r22, 0x70	; 112
    4738:	a8 01       	movw	r20, r16
    473a:	25 e0       	ldi	r18, 0x05	; 5
    473c:	09 2d       	mov	r16, r9
    473e:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4742:	d5 01       	movw	r26, r10
    4744:	1d 96       	adiw	r26, 0x0d	; 13
    4746:	8c 91       	ld	r24, X
    4748:	1d 97       	sbiw	r26, 0x0d	; 13
    474a:	88 23       	and	r24, r24
    474c:	d1 f7       	brne	.-12     	; 0x4742 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    474e:	1e 96       	adiw	r26, 0x0e	; 14
    4750:	8c 91       	ld	r24, X
    4752:	1e 97       	sbiw	r26, 0x0e	; 14
    4754:	81 30       	cpi	r24, 0x01	; 1
    4756:	b9 f0       	breq	.+46     	; 0x4786 <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4758:	1e 96       	adiw	r26, 0x0e	; 14
    475a:	2c 91       	ld	r18, X
    475c:	00 d0       	rcall	.+0      	; 0x475e <readEEPage+0x5e>
    475e:	0f 92       	push	r0
    4760:	ed b7       	in	r30, 0x3d	; 61
    4762:	fe b7       	in	r31, 0x3e	; 62
    4764:	31 96       	adiw	r30, 0x01	; 1
    4766:	85 e5       	ldi	r24, 0x55	; 85
    4768:	9f e0       	ldi	r25, 0x0F	; 15
    476a:	ad b7       	in	r26, 0x3d	; 61
    476c:	be b7       	in	r27, 0x3e	; 62
    476e:	11 96       	adiw	r26, 0x01	; 1
    4770:	8d 93       	st	X+, r24
    4772:	9c 93       	st	X, r25
    4774:	12 97       	sbiw	r26, 0x02	; 2
    4776:	22 83       	std	Z+2, r18	; 0x02
    4778:	13 82       	std	Z+3, r1	; 0x03
    477a:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	de 01       	movw	r26, r28
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	0a c0       	rjmp	.+20     	; 0x47a0 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    478c:	e5 01       	movw	r28, r10
    478e:	ed 81       	ldd	r30, Y+5	; 0x05
    4790:	fe 81       	ldd	r31, Y+6	; 0x06
    4792:	e9 0f       	add	r30, r25
    4794:	f1 1d       	adc	r31, r1
    4796:	80 81       	ld	r24, Z
    4798:	14 96       	adiw	r26, 0x04	; 4
    479a:	8c 93       	st	X, r24
    479c:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    479e:	9f 5f       	subi	r25, 0xFF	; 255
    47a0:	11 96       	adiw	r26, 0x01	; 1
    47a2:	99 15       	cp	r25, r9
    47a4:	98 f3       	brcs	.-26     	; 0x478c <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    47aa:	eb e0       	ldi	r30, 0x0B	; 11
    47ac:	0c 94 6e 58 	jmp	0xb0dc	; 0xb0dc <__epilogue_restores__+0xe>

000047b0 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    47b0:	a0 e0       	ldi	r26, 0x00	; 0
    47b2:	b0 e0       	ldi	r27, 0x00	; 0
    47b4:	ee ed       	ldi	r30, 0xDE	; 222
    47b6:	f3 e2       	ldi	r31, 0x23	; 35
    47b8:	0c 94 54 58 	jmp	0xb0a8	; 0xb0a8 <__prologue_saves__+0x12>
    47bc:	ec 01       	movw	r28, r24
    47be:	6a 01       	movw	r12, r20
    47c0:	7b 01       	movw	r14, r22
    47c2:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    47c4:	83 e9       	ldi	r24, 0x93	; 147
    47c6:	9f e0       	ldi	r25, 0x0F	; 15
    47c8:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    buff[0] = 'B';
    47cc:	82 e4       	ldi	r24, 0x42	; 66
    47ce:	d8 01       	movw	r26, r16
    47d0:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    47d2:	bb 27       	eor	r27, r27
    47d4:	af 2d       	mov	r26, r15
    47d6:	9e 2d       	mov	r25, r14
    47d8:	8d 2d       	mov	r24, r13
    47da:	f8 01       	movw	r30, r16
    47dc:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    47de:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    47e0:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    47e2:	85 e4       	ldi	r24, 0x45	; 69
    47e4:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    47e6:	f5 e0       	ldi	r31, 0x05	; 5
    47e8:	bf 0e       	add	r11, r31
    47ea:	ce 01       	movw	r24, r28
    47ec:	60 e7       	ldi	r22, 0x70	; 112
    47ee:	a8 01       	movw	r20, r16
    47f0:	2b 2d       	mov	r18, r11
    47f2:	00 e0       	ldi	r16, 0x00	; 0
    47f4:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    47f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47fa:	88 23       	and	r24, r24
    47fc:	e9 f7       	brne	.-6      	; 0x47f8 <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    47fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    4800:	81 30       	cpi	r24, 0x01	; 1
    4802:	b1 f0       	breq	.+44     	; 0x4830 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    4804:	2e 85       	ldd	r18, Y+14	; 0x0e
    4806:	00 d0       	rcall	.+0      	; 0x4808 <progEEPage+0x58>
    4808:	0f 92       	push	r0
    480a:	ed b7       	in	r30, 0x3d	; 61
    480c:	fe b7       	in	r31, 0x3e	; 62
    480e:	31 96       	adiw	r30, 0x01	; 1
    4810:	84 e7       	ldi	r24, 0x74	; 116
    4812:	9f e0       	ldi	r25, 0x0F	; 15
    4814:	ad b7       	in	r26, 0x3d	; 61
    4816:	be b7       	in	r27, 0x3e	; 62
    4818:	11 96       	adiw	r26, 0x01	; 1
    481a:	8d 93       	st	X+, r24
    481c:	9c 93       	st	X, r25
    481e:	12 97       	sbiw	r26, 0x02	; 2
    4820:	22 83       	std	Z+2, r18	; 0x02
    4822:	13 82       	std	Z+3, r1	; 0x03
    4824:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    }
}
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
    4834:	e9 e0       	ldi	r30, 0x09	; 9
    4836:	0c 94 70 58 	jmp	0xb0e0	; 0xb0e0 <__epilogue_restores__+0x12>

0000483a <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    483a:	a0 e0       	ldi	r26, 0x00	; 0
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	e3 e2       	ldi	r30, 0x23	; 35
    4840:	f4 e2       	ldi	r31, 0x24	; 36
    4842:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <__prologue_saves__+0xe>
    4846:	5c 01       	movw	r10, r24
    4848:	6a 01       	movw	r12, r20
    484a:	7b 01       	movw	r14, r22
    484c:	92 2e       	mov	r9, r18
    484e:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4850:	82 eb       	ldi	r24, 0xB2	; 178
    4852:	9f e0       	ldi	r25, 0x0F	; 15
    4854:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    buff[0] = 'g';
    4858:	87 e6       	ldi	r24, 0x67	; 103
    485a:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    485c:	bb 27       	eor	r27, r27
    485e:	af 2d       	mov	r26, r15
    4860:	9e 2d       	mov	r25, r14
    4862:	8d 2d       	mov	r24, r13
    4864:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4866:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4868:	89 2d       	mov	r24, r9
    486a:	86 95       	lsr	r24
    486c:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    486e:	86 e4       	ldi	r24, 0x46	; 70
    4870:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4872:	c5 01       	movw	r24, r10
    4874:	60 e7       	ldi	r22, 0x70	; 112
    4876:	a8 01       	movw	r20, r16
    4878:	25 e0       	ldi	r18, 0x05	; 5
    487a:	09 2d       	mov	r16, r9
    487c:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4880:	d5 01       	movw	r26, r10
    4882:	1d 96       	adiw	r26, 0x0d	; 13
    4884:	8c 91       	ld	r24, X
    4886:	1d 97       	sbiw	r26, 0x0d	; 13
    4888:	88 23       	and	r24, r24
    488a:	d1 f7       	brne	.-12     	; 0x4880 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    488c:	1e 96       	adiw	r26, 0x0e	; 14
    488e:	8c 91       	ld	r24, X
    4890:	1e 97       	sbiw	r26, 0x0e	; 14
    4892:	81 30       	cpi	r24, 0x01	; 1
    4894:	b9 f0       	breq	.+46     	; 0x48c4 <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4896:	1e 96       	adiw	r26, 0x0e	; 14
    4898:	2c 91       	ld	r18, X
    489a:	00 d0       	rcall	.+0      	; 0x489c <verifyPage+0x62>
    489c:	0f 92       	push	r0
    489e:	ed b7       	in	r30, 0x3d	; 61
    48a0:	fe b7       	in	r31, 0x3e	; 62
    48a2:	31 96       	adiw	r30, 0x01	; 1
    48a4:	85 e9       	ldi	r24, 0x95	; 149
    48a6:	9f e0       	ldi	r25, 0x0F	; 15
    48a8:	ad b7       	in	r26, 0x3d	; 61
    48aa:	be b7       	in	r27, 0x3e	; 62
    48ac:	11 96       	adiw	r26, 0x01	; 1
    48ae:	8d 93       	st	X+, r24
    48b0:	9c 93       	st	X, r25
    48b2:	12 97       	sbiw	r26, 0x02	; 2
    48b4:	22 83       	std	Z+2, r18	; 0x02
    48b6:	13 82       	std	Z+3, r1	; 0x03
    48b8:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	de 01       	movw	r26, r28
    48c6:	31 e0       	ldi	r19, 0x01	; 1
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	0d c0       	rjmp	.+26     	; 0x48e6 <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    48cc:	e5 01       	movw	r28, r10
    48ce:	ed 81       	ldd	r30, Y+5	; 0x05
    48d0:	fe 81       	ldd	r31, Y+6	; 0x06
    48d2:	e2 0f       	add	r30, r18
    48d4:	f1 1d       	adc	r31, r1
    48d6:	90 81       	ld	r25, Z
    48d8:	15 96       	adiw	r26, 0x05	; 5
    48da:	8c 91       	ld	r24, X
    48dc:	15 97       	sbiw	r26, 0x05	; 5
    48de:	98 13       	cpse	r25, r24
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    48e2:	2f 5f       	subi	r18, 0xFF	; 255
    48e4:	11 96       	adiw	r26, 0x01	; 1
    48e6:	29 15       	cp	r18, r9
    48e8:	88 f3       	brcs	.-30     	; 0x48cc <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    48ea:	83 2f       	mov	r24, r19
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
    48f2:	eb e0       	ldi	r30, 0x0B	; 11
    48f4:	0c 94 6e 58 	jmp	0xb0dc	; 0xb0dc <__epilogue_restores__+0xe>

000048f8 <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    48f8:	a0 e0       	ldi	r26, 0x00	; 0
    48fa:	b0 e0       	ldi	r27, 0x00	; 0
    48fc:	e2 e8       	ldi	r30, 0x82	; 130
    48fe:	f4 e2       	ldi	r31, 0x24	; 36
    4900:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <__prologue_saves__+0xe>
    4904:	5c 01       	movw	r10, r24
    4906:	6a 01       	movw	r12, r20
    4908:	7b 01       	movw	r14, r22
    490a:	92 2e       	mov	r9, r18
    490c:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    490e:	81 ed       	ldi	r24, 0xD1	; 209
    4910:	9f e0       	ldi	r25, 0x0F	; 15
    4912:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    buff[0] = 'g';
    4916:	87 e6       	ldi	r24, 0x67	; 103
    4918:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    491a:	bb 27       	eor	r27, r27
    491c:	af 2d       	mov	r26, r15
    491e:	9e 2d       	mov	r25, r14
    4920:	8d 2d       	mov	r24, r13
    4922:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4924:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4926:	89 2d       	mov	r24, r9
    4928:	86 95       	lsr	r24
    492a:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    492c:	86 e4       	ldi	r24, 0x46	; 70
    492e:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4930:	c5 01       	movw	r24, r10
    4932:	60 e7       	ldi	r22, 0x70	; 112
    4934:	a8 01       	movw	r20, r16
    4936:	25 e0       	ldi	r18, 0x05	; 5
    4938:	09 2d       	mov	r16, r9
    493a:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    493e:	d5 01       	movw	r26, r10
    4940:	1d 96       	adiw	r26, 0x0d	; 13
    4942:	8c 91       	ld	r24, X
    4944:	1d 97       	sbiw	r26, 0x0d	; 13
    4946:	88 23       	and	r24, r24
    4948:	d1 f7       	brne	.-12     	; 0x493e <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    494a:	1e 96       	adiw	r26, 0x0e	; 14
    494c:	8c 91       	ld	r24, X
    494e:	1e 97       	sbiw	r26, 0x0e	; 14
    4950:	81 30       	cpi	r24, 0x01	; 1
    4952:	b9 f0       	breq	.+46     	; 0x4982 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4954:	1e 96       	adiw	r26, 0x0e	; 14
    4956:	2c 91       	ld	r18, X
    4958:	00 d0       	rcall	.+0      	; 0x495a <readPage+0x62>
    495a:	0f 92       	push	r0
    495c:	ed b7       	in	r30, 0x3d	; 61
    495e:	fe b7       	in	r31, 0x3e	; 62
    4960:	31 96       	adiw	r30, 0x01	; 1
    4962:	84 eb       	ldi	r24, 0xB4	; 180
    4964:	9f e0       	ldi	r25, 0x0F	; 15
    4966:	ad b7       	in	r26, 0x3d	; 61
    4968:	be b7       	in	r27, 0x3e	; 62
    496a:	11 96       	adiw	r26, 0x01	; 1
    496c:	8d 93       	st	X+, r24
    496e:	9c 93       	st	X, r25
    4970:	12 97       	sbiw	r26, 0x02	; 2
    4972:	22 83       	std	Z+2, r18	; 0x02
    4974:	13 82       	std	Z+3, r1	; 0x03
    4976:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	de 01       	movw	r26, r28
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	0a c0       	rjmp	.+20     	; 0x499c <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4988:	e5 01       	movw	r28, r10
    498a:	ed 81       	ldd	r30, Y+5	; 0x05
    498c:	fe 81       	ldd	r31, Y+6	; 0x06
    498e:	e9 0f       	add	r30, r25
    4990:	f1 1d       	adc	r31, r1
    4992:	80 81       	ld	r24, Z
    4994:	14 96       	adiw	r26, 0x04	; 4
    4996:	8c 93       	st	X, r24
    4998:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    499a:	9f 5f       	subi	r25, 0xFF	; 255
    499c:	11 96       	adiw	r26, 0x01	; 1
    499e:	99 15       	cp	r25, r9
    49a0:	98 f3       	brcs	.-26     	; 0x4988 <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	eb e0       	ldi	r30, 0x0B	; 11
    49a8:	0c 94 6e 58 	jmp	0xb0dc	; 0xb0dc <__epilogue_restores__+0xe>

000049ac <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    49ac:	a0 e0       	ldi	r26, 0x00	; 0
    49ae:	b0 e0       	ldi	r27, 0x00	; 0
    49b0:	ec ed       	ldi	r30, 0xDC	; 220
    49b2:	f4 e2       	ldi	r31, 0x24	; 36
    49b4:	0c 94 54 58 	jmp	0xb0a8	; 0xb0a8 <__prologue_saves__+0x12>
    49b8:	ec 01       	movw	r28, r24
    49ba:	6a 01       	movw	r12, r20
    49bc:	7b 01       	movw	r14, r22
    49be:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    49c0:	81 ef       	ldi	r24, 0xF1	; 241
    49c2:	9f e0       	ldi	r25, 0x0F	; 15
    49c4:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    49c8:	82 e4       	ldi	r24, 0x42	; 66
    49ca:	d8 01       	movw	r26, r16
    49cc:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    49ce:	bb 27       	eor	r27, r27
    49d0:	af 2d       	mov	r26, r15
    49d2:	9e 2d       	mov	r25, r14
    49d4:	8d 2d       	mov	r24, r13
    49d6:	f8 01       	movw	r30, r16
    49d8:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    49da:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    49dc:	8b 2d       	mov	r24, r11
    49de:	86 95       	lsr	r24
    49e0:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    49e2:	86 e4       	ldi	r24, 0x46	; 70
    49e4:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    49e6:	f5 e0       	ldi	r31, 0x05	; 5
    49e8:	bf 0e       	add	r11, r31
    49ea:	ce 01       	movw	r24, r28
    49ec:	60 e7       	ldi	r22, 0x70	; 112
    49ee:	a8 01       	movw	r20, r16
    49f0:	2b 2d       	mov	r18, r11
    49f2:	00 e0       	ldi	r16, 0x00	; 0
    49f4:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    49f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49fa:	88 23       	and	r24, r24
    49fc:	e9 f7       	brne	.-6      	; 0x49f8 <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    49fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a00:	81 30       	cpi	r24, 0x01	; 1
    4a02:	b1 f0       	breq	.+44     	; 0x4a30 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    4a04:	2e 85       	ldd	r18, Y+14	; 0x0e
    4a06:	00 d0       	rcall	.+0      	; 0x4a08 <progPage+0x5c>
    4a08:	0f 92       	push	r0
    4a0a:	ed b7       	in	r30, 0x3d	; 61
    4a0c:	fe b7       	in	r31, 0x3e	; 62
    4a0e:	31 96       	adiw	r30, 0x01	; 1
    4a10:	83 ed       	ldi	r24, 0xD3	; 211
    4a12:	9f e0       	ldi	r25, 0x0F	; 15
    4a14:	ad b7       	in	r26, 0x3d	; 61
    4a16:	be b7       	in	r27, 0x3e	; 62
    4a18:	11 96       	adiw	r26, 0x01	; 1
    4a1a:	8d 93       	st	X+, r24
    4a1c:	9c 93       	st	X, r25
    4a1e:	12 97       	sbiw	r26, 0x02	; 2
    4a20:	22 83       	std	Z+2, r18	; 0x02
    4a22:	13 82       	std	Z+3, r1	; 0x03
    4a24:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    }
}
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
    4a34:	e9 e0       	ldi	r30, 0x09	; 9
    4a36:	0c 94 70 58 	jmp	0xb0e0	; 0xb0e0 <__epilogue_restores__+0x12>

00004a3a <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    4a3a:	af e0       	ldi	r26, 0x0F	; 15
    4a3c:	b0 e0       	ldi	r27, 0x00	; 0
    4a3e:	e3 e2       	ldi	r30, 0x23	; 35
    4a40:	f5 e2       	ldi	r31, 0x25	; 37
    4a42:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    4a46:	7c 01       	movw	r14, r24
    4a48:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    4a4a:	db 01       	movw	r26, r22
    4a4c:	0d 90       	ld	r0, X+
    4a4e:	00 20       	and	r0, r0
    4a50:	e9 f7       	brne	.-6      	; 0x4a4c <ihex_readrec+0x12>
    4a52:	6d 01       	movw	r12, r26
    4a54:	08 94       	sec
    4a56:	c1 08       	sbc	r12, r1
    4a58:	d1 08       	sbc	r13, r1
    4a5a:	c6 1a       	sub	r12, r22
    4a5c:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    4a5e:	b3 e0       	ldi	r27, 0x03	; 3
    4a60:	cb 16       	cp	r12, r27
    4a62:	d1 04       	cpc	r13, r1
    4a64:	0c f4       	brge	.+2      	; 0x4a68 <ihex_readrec+0x2e>
    4a66:	f2 c0       	rjmp	.+484    	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4a68:	fb 01       	movw	r30, r22
    4a6a:	81 81       	ldd	r24, Z+1	; 0x01
    4a6c:	8b 83       	std	Y+3, r24	; 0x03
    4a6e:	82 81       	ldd	r24, Z+2	; 0x02
    4a70:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4a72:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    4a74:	ce 01       	movw	r24, r28
    4a76:	03 96       	adiw	r24, 0x03	; 3
    4a78:	8c 87       	std	Y+12, r24	; 0x0c
    4a7a:	9d 87       	std	Y+13, r25	; 0x0d
    4a7c:	ce 01       	movw	r24, r28
    4a7e:	03 96       	adiw	r24, 0x03	; 3
    4a80:	be 01       	movw	r22, r28
    4a82:	6f 5f       	subi	r22, 0xFF	; 255
    4a84:	7f 4f       	sbci	r23, 0xFF	; 255
    4a86:	40 e1       	ldi	r20, 0x10	; 16
    4a88:	50 e0       	ldi	r21, 0x00	; 0
    4a8a:	0e 94 8d 59 	call	0xb31a	; 0xb31a <strtoul>
    4a8e:	d7 01       	movw	r26, r14
    4a90:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4a92:	e9 81       	ldd	r30, Y+1	; 0x01
    4a94:	fa 81       	ldd	r31, Y+2	; 0x02
    4a96:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a98:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a9a:	e8 17       	cp	r30, r24
    4a9c:	f9 07       	cpc	r31, r25
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <ihex_readrec+0x68>
    4aa0:	d5 c0       	rjmp	.+426    	; 0x4c4c <ihex_readrec+0x212>
    4aa2:	80 81       	ld	r24, Z
    4aa4:	88 23       	and	r24, r24
    4aa6:	09 f0       	breq	.+2      	; 0x4aaa <ihex_readrec+0x70>
    4aa8:	d1 c0       	rjmp	.+418    	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    4aaa:	97 e0       	ldi	r25, 0x07	; 7
    4aac:	c9 16       	cp	r12, r25
    4aae:	d1 04       	cpc	r13, r1
    4ab0:	0c f4       	brge	.+2      	; 0x4ab4 <ihex_readrec+0x7a>
    4ab2:	cc c0       	rjmp	.+408    	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    4ab4:	d8 01       	movw	r26, r16
    4ab6:	13 96       	adiw	r26, 0x03	; 3
    4ab8:	8c 91       	ld	r24, X
    4aba:	13 97       	sbiw	r26, 0x03	; 3
    4abc:	8b 83       	std	Y+3, r24	; 0x03
    4abe:	14 96       	adiw	r26, 0x04	; 4
    4ac0:	8c 91       	ld	r24, X
    4ac2:	14 97       	sbiw	r26, 0x04	; 4
    4ac4:	8c 83       	std	Y+4, r24	; 0x04
    4ac6:	15 96       	adiw	r26, 0x05	; 5
    4ac8:	8c 91       	ld	r24, X
    4aca:	15 97       	sbiw	r26, 0x05	; 5
    4acc:	8d 83       	std	Y+5, r24	; 0x05
    4ace:	16 96       	adiw	r26, 0x06	; 6
    4ad0:	8c 91       	ld	r24, X
    4ad2:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    4ad4:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	03 96       	adiw	r24, 0x03	; 3
    4ada:	be 01       	movw	r22, r28
    4adc:	6f 5f       	subi	r22, 0xFF	; 255
    4ade:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae0:	40 e1       	ldi	r20, 0x10	; 16
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	0e 94 8d 59 	call	0xb31a	; 0xb31a <strtoul>
    4ae8:	f7 01       	movw	r30, r14
    4aea:	61 83       	std	Z+1, r22	; 0x01
    4aec:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    4aee:	e9 81       	ldd	r30, Y+1	; 0x01
    4af0:	fa 81       	ldd	r31, Y+2	; 0x02
    4af2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4af4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4af6:	e8 17       	cp	r30, r24
    4af8:	f9 07       	cpc	r31, r25
    4afa:	09 f4       	brne	.+2      	; 0x4afe <ihex_readrec+0xc4>
    4afc:	a7 c0       	rjmp	.+334    	; 0x4c4c <ihex_readrec+0x212>
    4afe:	80 81       	ld	r24, Z
    4b00:	88 23       	and	r24, r24
    4b02:	09 f0       	breq	.+2      	; 0x4b06 <ihex_readrec+0xcc>
    4b04:	a3 c0       	rjmp	.+326    	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    4b06:	99 e0       	ldi	r25, 0x09	; 9
    4b08:	c9 16       	cp	r12, r25
    4b0a:	d1 04       	cpc	r13, r1
    4b0c:	0c f4       	brge	.+2      	; 0x4b10 <ihex_readrec+0xd6>
    4b0e:	9e c0       	rjmp	.+316    	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4b10:	d8 01       	movw	r26, r16
    4b12:	17 96       	adiw	r26, 0x07	; 7
    4b14:	8c 91       	ld	r24, X
    4b16:	17 97       	sbiw	r26, 0x07	; 7
    4b18:	8b 83       	std	Y+3, r24	; 0x03
    4b1a:	18 96       	adiw	r26, 0x08	; 8
    4b1c:	8c 91       	ld	r24, X
    4b1e:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4b20:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    4b22:	ce 01       	movw	r24, r28
    4b24:	03 96       	adiw	r24, 0x03	; 3
    4b26:	be 01       	movw	r22, r28
    4b28:	6f 5f       	subi	r22, 0xFF	; 255
    4b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b2c:	40 e1       	ldi	r20, 0x10	; 16
    4b2e:	50 e0       	ldi	r21, 0x00	; 0
    4b30:	0e 94 8d 59 	call	0xb31a	; 0xb31a <strtoul>
    4b34:	f7 01       	movw	r30, r14
    4b36:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    4b38:	e9 81       	ldd	r30, Y+1	; 0x01
    4b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b40:	e8 17       	cp	r30, r24
    4b42:	f9 07       	cpc	r31, r25
    4b44:	09 f4       	brne	.+2      	; 0x4b48 <ihex_readrec+0x10e>
    4b46:	82 c0       	rjmp	.+260    	; 0x4c4c <ihex_readrec+0x212>
    4b48:	80 81       	ld	r24, Z
    4b4a:	88 23       	and	r24, r24
    4b4c:	09 f0       	breq	.+2      	; 0x4b50 <ihex_readrec+0x116>
    4b4e:	7e c0       	rjmp	.+252    	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    4b50:	d7 01       	movw	r26, r14
    4b52:	11 96       	adiw	r26, 0x01	; 1
    4b54:	8c 91       	ld	r24, X
    4b56:	11 97       	sbiw	r26, 0x01	; 1
    4b58:	12 96       	adiw	r26, 0x02	; 2
    4b5a:	9c 91       	ld	r25, X
    4b5c:	12 97       	sbiw	r26, 0x02	; 2
    4b5e:	7c 90       	ld	r7, X
    4b60:	78 0e       	add	r7, r24
    4b62:	79 0e       	add	r7, r25
    4b64:	76 0e       	add	r7, r22
    4b66:	48 01       	movw	r8, r16
    4b68:	17 01       	movw	r2, r14
    4b6a:	44 24       	eor	r4, r4
    4b6c:	55 24       	eor	r5, r5
    4b6e:	99 e0       	ldi	r25, 0x09	; 9
    4b70:	a9 2e       	mov	r10, r25
    4b72:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    4b74:	fe 01       	movw	r30, r28
    4b76:	33 96       	adiw	r30, 0x03	; 3
    4b78:	ee 87       	std	Y+14, r30	; 0x0e
    4b7a:	ff 87       	std	Y+15, r31	; 0x0f
    4b7c:	ce 01       	movw	r24, r28
    4b7e:	01 96       	adiw	r24, 0x01	; 1
    4b80:	8b 87       	std	Y+11, r24	; 0x0b
    4b82:	69 2e       	mov	r6, r25
    4b84:	32 c0       	rjmp	.+100    	; 0x4bea <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    4b86:	2c 15       	cp	r18, r12
    4b88:	3d 05       	cpc	r19, r13
    4b8a:	0c f0       	brlt	.+2      	; 0x4b8e <ihex_readrec+0x154>
    4b8c:	5f c0       	rjmp	.+190    	; 0x4c4c <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    4b8e:	d4 01       	movw	r26, r8
    4b90:	19 96       	adiw	r26, 0x09	; 9
    4b92:	8c 91       	ld	r24, X
    4b94:	19 97       	sbiw	r26, 0x09	; 9
    4b96:	8b 83       	std	Y+3, r24	; 0x03
    4b98:	1a 96       	adiw	r26, 0x0a	; 10
    4b9a:	8c 91       	ld	r24, X
    4b9c:	8c 83       	std	Y+4, r24	; 0x04
    4b9e:	e2 e0       	ldi	r30, 0x02	; 2
    4ba0:	f0 e0       	ldi	r31, 0x00	; 0
    4ba2:	ae 0e       	add	r10, r30
    4ba4:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    4ba6:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    4ba8:	ce 01       	movw	r24, r28
    4baa:	03 96       	adiw	r24, 0x03	; 3
    4bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bae:	76 2d       	mov	r23, r6
    4bb0:	40 e1       	ldi	r20, 0x10	; 16
    4bb2:	50 e0       	ldi	r21, 0x00	; 0
    4bb4:	0e 94 8d 59 	call	0xb31a	; 0xb31a <strtoul>
    4bb8:	d1 01       	movw	r26, r2
    4bba:	14 96       	adiw	r26, 0x04	; 4
    4bbc:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    4bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    4bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    4bc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bc6:	e8 17       	cp	r30, r24
    4bc8:	f9 07       	cpc	r31, r25
    4bca:	09 f4       	brne	.+2      	; 0x4bce <ihex_readrec+0x194>
    4bcc:	3f c0       	rjmp	.+126    	; 0x4c4c <ihex_readrec+0x212>
    4bce:	a2 e0       	ldi	r26, 0x02	; 2
    4bd0:	b0 e0       	ldi	r27, 0x00	; 0
    4bd2:	8a 0e       	add	r8, r26
    4bd4:	9b 1e       	adc	r9, r27
    4bd6:	08 94       	sec
    4bd8:	21 1c       	adc	r2, r1
    4bda:	31 1c       	adc	r3, r1
    4bdc:	80 81       	ld	r24, Z
    4bde:	88 23       	and	r24, r24
    4be0:	a9 f5       	brne	.+106    	; 0x4c4c <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    4be2:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    4be4:	08 94       	sec
    4be6:	41 1c       	adc	r4, r1
    4be8:	51 1c       	adc	r5, r1
    4bea:	f7 01       	movw	r30, r14
    4bec:	80 81       	ld	r24, Z
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	95 01       	movw	r18, r10
    4bf2:	2f 5f       	subi	r18, 0xFF	; 255
    4bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf6:	48 16       	cp	r4, r24
    4bf8:	59 06       	cpc	r5, r25
    4bfa:	2c f2       	brlt	.-118    	; 0x4b86 <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    4bfc:	2c 15       	cp	r18, r12
    4bfe:	3d 05       	cpc	r19, r13
    4c00:	2c f5       	brge	.+74     	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4c02:	f8 01       	movw	r30, r16
    4c04:	ea 0d       	add	r30, r10
    4c06:	fb 1d       	adc	r31, r11
    4c08:	80 81       	ld	r24, Z
    4c0a:	8b 83       	std	Y+3, r24	; 0x03
    4c0c:	81 81       	ldd	r24, Z+1	; 0x01
    4c0e:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4c10:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    4c12:	8e 01       	movw	r16, r28
    4c14:	0d 5f       	subi	r16, 0xFD	; 253
    4c16:	1f 4f       	sbci	r17, 0xFF	; 255
    4c18:	c8 01       	movw	r24, r16
    4c1a:	be 01       	movw	r22, r28
    4c1c:	6f 5f       	subi	r22, 0xFF	; 255
    4c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c20:	40 e1       	ldi	r20, 0x10	; 16
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	0e 94 8d 59 	call	0xb31a	; 0xb31a <strtoul>
    4c28:	84 e0       	ldi	r24, 0x04	; 4
    4c2a:	91 e0       	ldi	r25, 0x01	; 1
    4c2c:	e8 0e       	add	r14, r24
    4c2e:	f9 1e       	adc	r15, r25
    4c30:	d7 01       	movw	r26, r14
    4c32:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4c34:	e9 81       	ldd	r30, Y+1	; 0x01
    4c36:	fa 81       	ldd	r31, Y+2	; 0x02
    4c38:	e0 17       	cp	r30, r16
    4c3a:	f1 07       	cpc	r31, r17
    4c3c:	39 f0       	breq	.+14     	; 0x4c4c <ihex_readrec+0x212>
    4c3e:	80 81       	ld	r24, Z
    4c40:	88 23       	and	r24, r24
    4c42:	21 f4       	brne	.+8      	; 0x4c4c <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    4c44:	71 94       	neg	r7
    4c46:	27 2d       	mov	r18, r7
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	02 c0       	rjmp	.+4      	; 0x4c50 <ihex_readrec+0x216>
    
    return rc;
    4c4c:	2f ef       	ldi	r18, 0xFF	; 255
    4c4e:	3f ef       	ldi	r19, 0xFF	; 255
    4c50:	c9 01       	movw	r24, r18
    4c52:	2f 96       	adiw	r28, 0x0f	; 15
    4c54:	e2 e1       	ldi	r30, 0x12	; 18
    4c56:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

00004c5a <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    4c5a:	a0 e9       	ldi	r26, 0x90	; 144
    4c5c:	b2 e0       	ldi	r27, 0x02	; 2
    4c5e:	e3 e3       	ldi	r30, 0x33	; 51
    4c60:	f6 e2       	ldi	r31, 0x26	; 38
    4c62:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    4c66:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    4c68:	e8 2e       	mov	r14, r24
    4c6a:	ff 24       	eor	r15, r15
    4c6c:	f7 01       	movw	r30, r14
    4c6e:	e8 5e       	subi	r30, 0xE8	; 232
    4c70:	f8 4d       	sbci	r31, 0xD8	; 216
    4c72:	e0 81       	ld	r30, Z
    if (ch != 0){
    4c74:	ee 23       	and	r30, r30
    4c76:	09 f4       	brne	.+2      	; 0x4c7a <eeprom_panel+0x20>
    4c78:	cd c2       	rjmp	.+1434   	; 0x5214 <eeprom_panel+0x5ba>
        
        switch (ch) {
    4c7a:	e3 30       	cpi	r30, 0x03	; 3
    4c7c:	71 f0       	breq	.+28     	; 0x4c9a <eeprom_panel+0x40>
    4c7e:	e4 30       	cpi	r30, 0x04	; 4
    4c80:	89 f0       	breq	.+34     	; 0x4ca4 <eeprom_panel+0x4a>
    4c82:	e2 30       	cpi	r30, 0x02	; 2
    4c84:	29 f4       	brne	.+10     	; 0x4c90 <eeprom_panel+0x36>
    4c86:	22 e7       	ldi	r18, 0x72	; 114
    4c88:	82 2e       	mov	r8, r18
    4c8a:	29 e2       	ldi	r18, 0x29	; 41
    4c8c:	92 2e       	mov	r9, r18
    4c8e:	0e c0       	rjmp	.+28     	; 0x4cac <eeprom_panel+0x52>
    4c90:	95 e7       	ldi	r25, 0x75	; 117
    4c92:	89 2e       	mov	r8, r25
    4c94:	96 e2       	ldi	r25, 0x26	; 38
    4c96:	99 2e       	mov	r9, r25
    4c98:	09 c0       	rjmp	.+18     	; 0x4cac <eeprom_panel+0x52>
    4c9a:	88 e0       	ldi	r24, 0x08	; 8
    4c9c:	88 2e       	mov	r8, r24
    4c9e:	87 e2       	ldi	r24, 0x27	; 39
    4ca0:	98 2e       	mov	r9, r24
    4ca2:	04 c0       	rjmp	.+8      	; 0x4cac <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    4ca4:	17 e9       	ldi	r17, 0x97	; 151
    4ca6:	81 2e       	mov	r8, r17
    4ca8:	15 e2       	ldi	r17, 0x25	; 37
    4caa:	91 2e       	mov	r9, r17
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    4cac:	83 ec       	ldi	r24, 0xC3	; 195
    4cae:	97 e2       	ldi	r25, 0x27	; 39
    4cb0:	6a ec       	ldi	r22, 0xCA	; 202
    4cb2:	73 e2       	ldi	r23, 0x23	; 35
    4cb4:	41 e0       	ldi	r20, 0x01	; 1
    4cb6:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
    4cba:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4cbc:	88 23       	and	r24, r24
    4cbe:	49 f0       	breq	.+18     	; 0x4cd2 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    4cc0:	80 e4       	ldi	r24, 0x40	; 64
    4cc2:	9c e0       	ldi	r25, 0x0C	; 12
    4cc4:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            put_rc(res);
    4cc8:	81 2f       	mov	r24, r17
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	0e 94 fd 22 	call	0x45fa	; 0x45fa <put_rc>
    4cd0:	3d c0       	rjmp	.+122    	; 0x4d4c <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    4cd2:	00 d0       	rcall	.+0      	; 0x4cd4 <eeprom_panel+0x7a>
    4cd4:	0f 92       	push	r0
    4cd6:	8e e2       	ldi	r24, 0x2E	; 46
    4cd8:	9c e0       	ldi	r25, 0x0C	; 12
    4cda:	ad b7       	in	r26, 0x3d	; 61
    4cdc:	be b7       	in	r27, 0x3e	; 62
    4cde:	11 96       	adiw	r26, 0x01	; 1
    4ce0:	8d 93       	st	X+, r24
    4ce2:	9c 93       	st	X, r25
    4ce4:	12 97       	sbiw	r26, 0x02	; 2
    4ce6:	13 96       	adiw	r26, 0x03	; 3
    4ce8:	ed 92       	st	X+, r14
    4cea:	fc 92       	st	X, r15
    4cec:	14 97       	sbiw	r26, 0x04	; 4
    4cee:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                pagebuff[0] = 0x00;
    4cf2:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    4cf8:	0f 90       	pop	r0
    4cfa:	0f 90       	pop	r0
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	c4 01       	movw	r24, r8
    4d02:	60 2f       	mov	r22, r16
    4d04:	ae 01       	movw	r20, r28
    4d06:	4f 5f       	subi	r20, 0xFF	; 255
    4d08:	5f 4f       	sbci	r21, 0xFF	; 255
    4d0a:	22 e0       	ldi	r18, 0x02	; 2
    4d0c:	00 e0       	ldi	r16, 0x00	; 0
    4d0e:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    4d12:	f4 01       	movw	r30, r8
    4d14:	85 85       	ldd	r24, Z+13	; 0x0d
    4d16:	88 23       	and	r24, r24
    4d18:	e1 f7       	brne	.-8      	; 0x4d12 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    4d1a:	86 85       	ldd	r24, Z+14	; 0x0e
    4d1c:	81 30       	cpi	r24, 0x01	; 1
    4d1e:	b1 f0       	breq	.+44     	; 0x4d4c <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    4d20:	26 85       	ldd	r18, Z+14	; 0x0e
    4d22:	00 d0       	rcall	.+0      	; 0x4d24 <eeprom_panel+0xca>
    4d24:	0f 92       	push	r0
    4d26:	ed b7       	in	r30, 0x3d	; 61
    4d28:	fe b7       	in	r31, 0x3e	; 62
    4d2a:	31 96       	adiw	r30, 0x01	; 1
    4d2c:	80 e1       	ldi	r24, 0x10	; 16
    4d2e:	9c e0       	ldi	r25, 0x0C	; 12
    4d30:	ad b7       	in	r26, 0x3d	; 61
    4d32:	be b7       	in	r27, 0x3e	; 62
    4d34:	11 96       	adiw	r26, 0x01	; 1
    4d36:	8d 93       	st	X+, r24
    4d38:	9c 93       	st	X, r25
    4d3a:	12 97       	sbiw	r26, 0x02	; 2
    4d3c:	22 83       	std	Z+2, r18	; 0x02
    4d3e:	13 82       	std	Z+3, r1	; 0x03
    4d40:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    4d44:	0f 90       	pop	r0
    4d46:	0f 90       	pop	r0
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	88 e8       	ldi	r24, 0x88	; 136
    4d4e:	93 e1       	ldi	r25, 0x13	; 19
    4d50:	20 e2       	ldi	r18, 0x20	; 32
    4d52:	33 e0       	ldi	r19, 0x03	; 3
    4d54:	f9 01       	movw	r30, r18
    4d56:	31 97       	sbiw	r30, 0x01	; 1
    4d58:	f1 f7       	brne	.-4      	; 0x4d56 <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5c:	d9 f7       	brne	.-10     	; 0x4d54 <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    4d5e:	83 e0       	ldi	r24, 0x03	; 3
    4d60:	9c e0       	ldi	r25, 0x0C	; 12
    4d62:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    4d66:	0f ef       	ldi	r16, 0xFF	; 255
    4d68:	1f ef       	ldi	r17, 0xFF	; 255
    4d6a:	cc 24       	eor	r12, r12
    4d6c:	dd 24       	eor	r13, r13
    4d6e:	66 24       	eor	r6, r6
    4d70:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4d72:	b6 e8       	ldi	r27, 0x86	; 134
    4d74:	2b 2e       	mov	r2, r27
    4d76:	31 2c       	mov	r3, r1
    4d78:	2c 0e       	add	r2, r28
    4d7a:	3d 1e       	adc	r3, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4d7c:	a6 e8       	ldi	r26, 0x86	; 134
    4d7e:	4a 2e       	mov	r4, r26
    4d80:	a1 e0       	ldi	r26, 0x01	; 1
    4d82:	5a 2e       	mov	r5, r26
    4d84:	4c 0e       	add	r4, r28
    4d86:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4d88:	f2 01       	movw	r30, r4
    4d8a:	34 96       	adiw	r30, 0x04	; 4
    4d8c:	c3 57       	subi	r28, 0x73	; 115
    4d8e:	dd 4f       	sbci	r29, 0xFD	; 253
    4d90:	e8 83       	st	Y, r30
    4d92:	f9 83       	std	Y+1, r31	; 0x01
    4d94:	cd 58       	subi	r28, 0x8D	; 141
    4d96:	d2 40       	sbci	r29, 0x02	; 2
    4d98:	cb c0       	rjmp	.+406    	; 0x4f30 <eeprom_panel+0x2d6>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    4d9a:	08 94       	sec
    4d9c:	61 1c       	adc	r6, r1
    4d9e:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    4da0:	f1 01       	movw	r30, r2
    4da2:	01 90       	ld	r0, Z+
    4da4:	00 20       	and	r0, r0
    4da6:	e9 f7       	brne	.-6      	; 0x4da2 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    4da8:	32 97       	sbiw	r30, 0x02	; 2
    4daa:	80 81       	ld	r24, Z
    4dac:	8a 30       	cpi	r24, 0x0A	; 10
    4dae:	09 f4       	brne	.+2      	; 0x4db2 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    4db0:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    4db2:	d1 01       	movw	r26, r2
    4db4:	8c 91       	ld	r24, X
    4db6:	8a 33       	cpi	r24, 0x3A	; 58
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <eeprom_panel+0x162>
    4dba:	ba c0       	rjmp	.+372    	; 0x4f30 <eeprom_panel+0x2d6>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4dbc:	c2 01       	movw	r24, r4
    4dbe:	b1 01       	movw	r22, r2
    4dc0:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <ihex_readrec>
    4dc4:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    4dc6:	c6 57       	subi	r28, 0x76	; 118
    4dc8:	dd 4f       	sbci	r29, 0xFD	; 253
    4dca:	88 81       	ld	r24, Y
    4dcc:	ca 58       	subi	r28, 0x8A	; 138
    4dce:	d2 40       	sbci	r29, 0x02	; 2
    4dd0:	f8 16       	cp	r15, r24
    4dd2:	19 f1       	breq	.+70     	; 0x4e1a <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    4dd4:	00 d0       	rcall	.+0      	; 0x4dd6 <eeprom_panel+0x17c>
    4dd6:	0f 92       	push	r0
    4dd8:	8f ec       	ldi	r24, 0xCF	; 207
    4dda:	9b e0       	ldi	r25, 0x0B	; 11
    4ddc:	ed b7       	in	r30, 0x3d	; 61
    4dde:	fe b7       	in	r31, 0x3e	; 62
    4de0:	81 83       	std	Z+1, r24	; 0x01
    4de2:	92 83       	std	Z+2, r25	; 0x02
    4de4:	63 82       	std	Z+3, r6	; 0x03
    4de6:	74 82       	std	Z+4, r7	; 0x04
    4de8:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    4dec:	0f 92       	push	r0
    4dee:	0f 92       	push	r0
    4df0:	ed b7       	in	r30, 0x3d	; 61
    4df2:	fe b7       	in	r31, 0x3e	; 62
    4df4:	31 96       	adiw	r30, 0x01	; 1
    4df6:	84 ea       	ldi	r24, 0xA4	; 164
    4df8:	9b e0       	ldi	r25, 0x0B	; 11
    4dfa:	ad b7       	in	r26, 0x3d	; 61
    4dfc:	be b7       	in	r27, 0x3e	; 62
    4dfe:	11 96       	adiw	r26, 0x01	; 1
    4e00:	8d 93       	st	X+, r24
    4e02:	9c 93       	st	X, r25
    4e04:	12 97       	sbiw	r26, 0x02	; 2
    4e06:	c6 57       	subi	r28, 0x76	; 118
    4e08:	dd 4f       	sbci	r29, 0xFD	; 253
    4e0a:	88 81       	ld	r24, Y
    4e0c:	ca 58       	subi	r28, 0x8A	; 138
    4e0e:	d2 40       	sbci	r29, 0x02	; 2
    4e10:	82 83       	std	Z+2, r24	; 0x02
    4e12:	13 82       	std	Z+3, r1	; 0x03
    4e14:	f4 82       	std	Z+4, r15	; 0x04
    4e16:	15 82       	std	Z+5, r1	; 0x05
    4e18:	82 c0       	rjmp	.+260    	; 0x4f1e <eeprom_panel+0x2c4>
                break;
            } else {
                if (ihex.rectyp == 0) {
    4e1a:	d2 01       	movw	r26, r4
    4e1c:	13 96       	adiw	r26, 0x03	; 3
    4e1e:	2c 91       	ld	r18, X
    4e20:	13 97       	sbiw	r26, 0x03	; 3
    4e22:	22 23       	and	r18, r18
    4e24:	09 f0       	breq	.+2      	; 0x4e28 <eeprom_panel+0x1ce>
    4e26:	53 c0       	rjmp	.+166    	; 0x4ece <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    4e28:	11 96       	adiw	r26, 0x01	; 1
    4e2a:	ed 90       	ld	r14, X+
    4e2c:	fc 90       	ld	r15, X
    4e2e:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    4e30:	57 01       	movw	r10, r14
    4e32:	aa 0c       	add	r10, r10
    4e34:	ab 2c       	mov	r10, r11
    4e36:	aa 1c       	adc	r10, r10
    4e38:	bb 08       	sbc	r11, r11
    4e3a:	b1 94       	neg	r11
    4e3c:	a0 16       	cp	r10, r16
    4e3e:	b1 06       	cpc	r11, r17
    4e40:	c1 f0       	breq	.+48     	; 0x4e72 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    4e42:	cd 14       	cp	r12, r13
    4e44:	91 f0       	breq	.+36     	; 0x4e6a <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    4e46:	16 95       	lsr	r17
    4e48:	10 2f       	mov	r17, r16
    4e4a:	00 27       	eor	r16, r16
    4e4c:	17 95       	ror	r17
    4e4e:	07 95       	ror	r16
    4e50:	0c 0d       	add	r16, r12
    4e52:	11 1d       	adc	r17, r1
    4e54:	a8 01       	movw	r20, r16
    4e56:	60 e0       	ldi	r22, 0x00	; 0
    4e58:	70 e0       	ldi	r23, 0x00	; 0
    4e5a:	dc 18       	sub	r13, r12
    4e5c:	c4 01       	movw	r24, r8
    4e5e:	2d 2d       	mov	r18, r13
    4e60:	8e 01       	movw	r16, r28
    4e62:	0f 5f       	subi	r16, 0xFF	; 255
    4e64:	1f 4f       	sbci	r17, 0xFF	; 255
    4e66:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    4e6a:	7f e7       	ldi	r23, 0x7F	; 127
    4e6c:	d7 2e       	mov	r13, r23
    4e6e:	de 20       	and	r13, r14
    4e70:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    4e72:	4e 2d       	mov	r20, r14
    4e74:	4f 77       	andi	r20, 0x7F	; 127
    4e76:	4c 15       	cp	r20, r12
    4e78:	08 f4       	brcc	.+2      	; 0x4e7c <eeprom_panel+0x222>
    4e7a:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4e7c:	f2 01       	movw	r30, r4
    4e7e:	50 81       	ld	r21, Z
    4e80:	25 2f       	mov	r18, r21
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	c3 57       	subi	r28, 0x73	; 115
    4e86:	dd 4f       	sbci	r29, 0xFD	; 253
    4e88:	a8 81       	ld	r26, Y
    4e8a:	b9 81       	ldd	r27, Y+1	; 0x01
    4e8c:	cd 58       	subi	r28, 0x8D	; 141
    4e8e:	d2 40       	sbci	r29, 0x02	; 2
    4e90:	e4 2f       	mov	r30, r20
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	35 96       	adiw	r30, 0x05	; 5
    4e96:	81 e0       	ldi	r24, 0x01	; 1
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	8c 0f       	add	r24, r28
    4e9c:	9d 1f       	adc	r25, r29
    4e9e:	e8 0f       	add	r30, r24
    4ea0:	f9 1f       	adc	r31, r25
    4ea2:	2c 5f       	subi	r18, 0xFC	; 252
    4ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea6:	24 0d       	add	r18, r4
    4ea8:	35 1d       	adc	r19, r5
    4eaa:	02 c0       	rjmp	.+4      	; 0x4eb0 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    4eac:	8d 91       	ld	r24, X+
    4eae:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4eb0:	a2 17       	cp	r26, r18
    4eb2:	b3 07       	cpc	r27, r19
    4eb4:	d9 f7       	brne	.-10     	; 0x4eac <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    4eb6:	85 2f       	mov	r24, r21
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	84 0f       	add	r24, r20
    4ebc:	91 1d       	adc	r25, r1
    4ebe:	2d 2d       	mov	r18, r13
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	28 17       	cp	r18, r24
    4ec4:	39 07       	cpc	r19, r25
    4ec6:	9c f5       	brge	.+102    	; 0x4f2e <eeprom_panel+0x2d4>
                        pageendaddr = pageoffset+ihex.reclen;
    4ec8:	d4 2e       	mov	r13, r20
    4eca:	d5 0e       	add	r13, r21
    4ecc:	30 c0       	rjmp	.+96     	; 0x4f2e <eeprom_panel+0x2d4>
                } else if (ihex.rectyp == 1) {
    4ece:	21 30       	cpi	r18, 0x01	; 1
    4ed0:	a9 f4       	brne	.+42     	; 0x4efc <eeprom_panel+0x2a2>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    4ed2:	cd 14       	cp	r12, r13
    4ed4:	b9 f1       	breq	.+110    	; 0x4f44 <eeprom_panel+0x2ea>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    4ed6:	16 95       	lsr	r17
    4ed8:	10 2f       	mov	r17, r16
    4eda:	00 27       	eor	r16, r16
    4edc:	17 95       	ror	r17
    4ede:	07 95       	ror	r16
    4ee0:	0c 0d       	add	r16, r12
    4ee2:	11 1d       	adc	r17, r1
    4ee4:	a8 01       	movw	r20, r16
    4ee6:	60 e0       	ldi	r22, 0x00	; 0
    4ee8:	70 e0       	ldi	r23, 0x00	; 0
    4eea:	dc 18       	sub	r13, r12
    4eec:	c4 01       	movw	r24, r8
    4eee:	2d 2d       	mov	r18, r13
    4ef0:	8e 01       	movw	r16, r28
    4ef2:	0f 5f       	subi	r16, 0xFF	; 255
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef6:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <progEEPage>
    4efa:	24 c0       	rjmp	.+72     	; 0x4f44 <eeprom_panel+0x2ea>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    4efc:	00 d0       	rcall	.+0      	; 0x4efe <eeprom_panel+0x2a4>
    4efe:	00 d0       	rcall	.+0      	; 0x4f00 <eeprom_panel+0x2a6>
    4f00:	ed b7       	in	r30, 0x3d	; 61
    4f02:	fe b7       	in	r31, 0x3e	; 62
    4f04:	31 96       	adiw	r30, 0x01	; 1
    4f06:	82 e6       	ldi	r24, 0x62	; 98
    4f08:	9b e0       	ldi	r25, 0x0B	; 11
    4f0a:	ad b7       	in	r26, 0x3d	; 61
    4f0c:	be b7       	in	r27, 0x3e	; 62
    4f0e:	11 96       	adiw	r26, 0x01	; 1
    4f10:	8d 93       	st	X+, r24
    4f12:	9c 93       	st	X, r25
    4f14:	12 97       	sbiw	r26, 0x02	; 2
    4f16:	22 83       	std	Z+2, r18	; 0x02
    4f18:	13 82       	std	Z+3, r1	; 0x03
    4f1a:	64 82       	std	Z+4, r6	; 0x04
    4f1c:	75 82       	std	Z+5, r7	; 0x05
    4f1e:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    4f22:	ed b7       	in	r30, 0x3d	; 61
    4f24:	fe b7       	in	r31, 0x3e	; 62
    4f26:	36 96       	adiw	r30, 0x06	; 6
    4f28:	ed bf       	out	0x3d, r30	; 61
    4f2a:	fe bf       	out	0x3e, r31	; 62
    4f2c:	0b c0       	rjmp	.+22     	; 0x4f44 <eeprom_panel+0x2ea>
                            ihex.rectyp, lineno);
                    break;
    4f2e:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4f30:	c1 01       	movw	r24, r2
    4f32:	60 e0       	ldi	r22, 0x00	; 0
    4f34:	71 e0       	ldi	r23, 0x01	; 1
    4f36:	43 ec       	ldi	r20, 0xC3	; 195
    4f38:	57 e2       	ldi	r21, 0x27	; 39
    4f3a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <f_gets>
    4f3e:	89 2b       	or	r24, r25
    4f40:	09 f0       	breq	.+2      	; 0x4f44 <eeprom_panel+0x2ea>
    4f42:	2b cf       	rjmp	.-426    	; 0x4d9a <eeprom_panel+0x140>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    4f44:	83 ec       	ldi	r24, 0xC3	; 195
    4f46:	97 e2       	ldi	r25, 0x27	; 39
    4f48:	40 e0       	ldi	r20, 0x00	; 0
    4f4a:	50 e0       	ldi	r21, 0x00	; 0
    4f4c:	60 e0       	ldi	r22, 0x00	; 0
    4f4e:	70 e0       	ldi	r23, 0x00	; 0
    4f50:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
    4f54:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4f56:	88 23       	and	r24, r24
    4f58:	49 f0       	breq	.+18     	; 0x4f6c <eeprom_panel+0x312>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    4f5a:	84 e4       	ldi	r24, 0x44	; 68
    4f5c:	9b e0       	ldi	r25, 0x0B	; 11
    4f5e:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            put_rc(res);
    4f62:	81 2f       	mov	r24, r17
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	0e 94 fd 22 	call	0x45fa	; 0x45fa <put_rc>
    4f6a:	2c c1       	rjmp	.+600    	; 0x51c4 <eeprom_panel+0x56a>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    4f6c:	87 e3       	ldi	r24, 0x37	; 55
    4f6e:	9b e0       	ldi	r25, 0x0B	; 11
    4f70:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    4f74:	cc 24       	eor	r12, r12
    4f76:	ca 94       	dec	r12
    4f78:	dc 2c       	mov	r13, r12
    4f7a:	00 e0       	ldi	r16, 0x00	; 0
    4f7c:	10 e0       	ldi	r17, 0x00	; 0
    4f7e:	66 24       	eor	r6, r6
    4f80:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    4f82:	ce 01       	movw	r24, r28
    4f84:	8a 57       	subi	r24, 0x7A	; 122
    4f86:	9f 4f       	sbci	r25, 0xFF	; 255
    4f88:	c1 57       	subi	r28, 0x71	; 113
    4f8a:	dd 4f       	sbci	r29, 0xFD	; 253
    4f8c:	88 83       	st	Y, r24
    4f8e:	99 83       	std	Y+1, r25	; 0x01
    4f90:	cf 58       	subi	r28, 0x8F	; 143
    4f92:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    4f94:	56 e8       	ldi	r21, 0x86	; 134
    4f96:	45 2e       	mov	r4, r21
    4f98:	51 e0       	ldi	r21, 0x01	; 1
    4f9a:	55 2e       	mov	r5, r21
    4f9c:	4c 0e       	add	r4, r28
    4f9e:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4fa0:	d2 01       	movw	r26, r4
    4fa2:	14 96       	adiw	r26, 0x04	; 4
    4fa4:	c5 57       	subi	r28, 0x75	; 117
    4fa6:	dd 4f       	sbci	r29, 0xFD	; 253
    4fa8:	a8 83       	st	Y, r26
    4faa:	b9 83       	std	Y+1, r27	; 0x01
    4fac:	cb 58       	subi	r28, 0x8B	; 139
    4fae:	d2 40       	sbci	r29, 0x02	; 2
    4fb0:	ff c0       	rjmp	.+510    	; 0x51b0 <eeprom_panel+0x556>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    4fb2:	08 94       	sec
    4fb4:	61 1c       	adc	r6, r1
    4fb6:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    4fb8:	c1 57       	subi	r28, 0x71	; 113
    4fba:	dd 4f       	sbci	r29, 0xFD	; 253
    4fbc:	e8 81       	ld	r30, Y
    4fbe:	f9 81       	ldd	r31, Y+1	; 0x01
    4fc0:	cf 58       	subi	r28, 0x8F	; 143
    4fc2:	d2 40       	sbci	r29, 0x02	; 2
    4fc4:	01 90       	ld	r0, Z+
    4fc6:	00 20       	and	r0, r0
    4fc8:	e9 f7       	brne	.-6      	; 0x4fc4 <eeprom_panel+0x36a>
                if (eepromBuff[len-1] == '\n')
    4fca:	32 97       	sbiw	r30, 0x02	; 2
    4fcc:	80 81       	ld	r24, Z
    4fce:	8a 30       	cpi	r24, 0x0A	; 10
    4fd0:	09 f4       	brne	.+2      	; 0x4fd4 <eeprom_panel+0x37a>
                    eepromBuff[--len] = 0;
    4fd2:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    4fd4:	ca 57       	subi	r28, 0x7A	; 122
    4fd6:	df 4f       	sbci	r29, 0xFF	; 255
    4fd8:	88 81       	ld	r24, Y
    4fda:	c6 58       	subi	r28, 0x86	; 134
    4fdc:	d0 40       	sbci	r29, 0x00	; 0
    4fde:	8a 33       	cpi	r24, 0x3A	; 58
    4fe0:	09 f0       	breq	.+2      	; 0x4fe4 <eeprom_panel+0x38a>
    4fe2:	e6 c0       	rjmp	.+460    	; 0x51b0 <eeprom_panel+0x556>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    4fe4:	c2 01       	movw	r24, r4
    4fe6:	b1 01       	movw	r22, r2
    4fe8:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <ihex_readrec>
    4fec:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    4fee:	c6 57       	subi	r28, 0x76	; 118
    4ff0:	dd 4f       	sbci	r29, 0xFD	; 253
    4ff2:	88 81       	ld	r24, Y
    4ff4:	ca 58       	subi	r28, 0x8A	; 138
    4ff6:	d2 40       	sbci	r29, 0x02	; 2
    4ff8:	f8 16       	cp	r15, r24
    4ffa:	19 f1       	breq	.+70     	; 0x5042 <eeprom_panel+0x3e8>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    4ffc:	00 d0       	rcall	.+0      	; 0x4ffe <eeprom_panel+0x3a4>
    4ffe:	0f 92       	push	r0
    5000:	84 e0       	ldi	r24, 0x04	; 4
    5002:	9b e0       	ldi	r25, 0x0B	; 11
    5004:	ed b7       	in	r30, 0x3d	; 61
    5006:	fe b7       	in	r31, 0x3e	; 62
    5008:	81 83       	std	Z+1, r24	; 0x01
    500a:	92 83       	std	Z+2, r25	; 0x02
    500c:	63 82       	std	Z+3, r6	; 0x03
    500e:	74 82       	std	Z+4, r7	; 0x04
    5010:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5014:	0f 92       	push	r0
    5016:	0f 92       	push	r0
    5018:	ed b7       	in	r30, 0x3d	; 61
    501a:	fe b7       	in	r31, 0x3e	; 62
    501c:	31 96       	adiw	r30, 0x01	; 1
    501e:	89 ed       	ldi	r24, 0xD9	; 217
    5020:	9a e0       	ldi	r25, 0x0A	; 10
    5022:	ad b7       	in	r26, 0x3d	; 61
    5024:	be b7       	in	r27, 0x3e	; 62
    5026:	11 96       	adiw	r26, 0x01	; 1
    5028:	8d 93       	st	X+, r24
    502a:	9c 93       	st	X, r25
    502c:	12 97       	sbiw	r26, 0x02	; 2
    502e:	c6 57       	subi	r28, 0x76	; 118
    5030:	dd 4f       	sbci	r29, 0xFD	; 253
    5032:	88 81       	ld	r24, Y
    5034:	ca 58       	subi	r28, 0x8A	; 138
    5036:	d2 40       	sbci	r29, 0x02	; 2
    5038:	82 83       	std	Z+2, r24	; 0x02
    503a:	13 82       	std	Z+3, r1	; 0x03
    503c:	f4 82       	std	Z+4, r15	; 0x04
    503e:	15 82       	std	Z+5, r1	; 0x05
    5040:	ae c0       	rjmp	.+348    	; 0x519e <eeprom_panel+0x544>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    5042:	d2 01       	movw	r26, r4
    5044:	13 96       	adiw	r26, 0x03	; 3
    5046:	2c 91       	ld	r18, X
    5048:	13 97       	sbiw	r26, 0x03	; 3
    504a:	22 23       	and	r18, r18
    504c:	09 f0       	breq	.+2      	; 0x5050 <eeprom_panel+0x3f6>
    504e:	65 c0       	rjmp	.+202    	; 0x511a <eeprom_panel+0x4c0>
                        // data record
                        nextaddr = ihex.loadofs;
    5050:	11 96       	adiw	r26, 0x01	; 1
    5052:	ed 90       	ld	r14, X+
    5054:	fc 90       	ld	r15, X
    5056:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5058:	57 01       	movw	r10, r14
    505a:	aa 0c       	add	r10, r10
    505c:	ab 2c       	mov	r10, r11
    505e:	aa 1c       	adc	r10, r10
    5060:	bb 08       	sbc	r11, r11
    5062:	b1 94       	neg	r11
    5064:	ac 14       	cp	r10, r12
    5066:	bd 04       	cpc	r11, r13
    5068:	49 f1       	breq	.+82     	; 0x50bc <eeprom_panel+0x462>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    506a:	01 17       	cp	r16, r17
    506c:	21 f1       	breq	.+72     	; 0x50b6 <eeprom_panel+0x45c>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    506e:	a6 01       	movw	r20, r12
    5070:	56 95       	lsr	r21
    5072:	54 2f       	mov	r21, r20
    5074:	44 27       	eor	r20, r20
    5076:	57 95       	ror	r21
    5078:	47 95       	ror	r20
    507a:	40 0f       	add	r20, r16
    507c:	51 1d       	adc	r21, r1
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	10 1b       	sub	r17, r16
    5084:	c4 01       	movw	r24, r8
    5086:	21 2f       	mov	r18, r17
    5088:	8e 01       	movw	r16, r28
    508a:	0f 5f       	subi	r16, 0xFF	; 255
    508c:	1f 4f       	sbci	r17, 0xFF	; 255
    508e:	0e 94 23 23 	call	0x4646	; 0x4646 <verifyEEPage>
    5092:	89 2b       	or	r24, r25
    5094:	81 f4       	brne	.+32     	; 0x50b6 <eeprom_panel+0x45c>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    5096:	00 d0       	rcall	.+0      	; 0x5098 <eeprom_panel+0x43e>
    5098:	0f 92       	push	r0
    509a:	8c eb       	ldi	r24, 0xBC	; 188
    509c:	9a e0       	ldi	r25, 0x0A	; 10
    509e:	ed b7       	in	r30, 0x3d	; 61
    50a0:	fe b7       	in	r31, 0x3e	; 62
    50a2:	81 83       	std	Z+1, r24	; 0x01
    50a4:	92 83       	std	Z+2, r25	; 0x02
    50a6:	c3 82       	std	Z+3, r12	; 0x03
    50a8:	d4 82       	std	Z+4, r13	; 0x04
    50aa:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    50b6:	1e 2d       	mov	r17, r14
    50b8:	1f 77       	andi	r17, 0x7F	; 127
    50ba:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    50bc:	4e 2d       	mov	r20, r14
    50be:	4f 77       	andi	r20, 0x7F	; 127
    50c0:	40 17       	cp	r20, r16
    50c2:	08 f4       	brcc	.+2      	; 0x50c6 <eeprom_panel+0x46c>
    50c4:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    50c6:	d2 01       	movw	r26, r4
    50c8:	5c 91       	ld	r21, X
    50ca:	25 2f       	mov	r18, r21
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	c5 57       	subi	r28, 0x75	; 117
    50d0:	dd 4f       	sbci	r29, 0xFD	; 253
    50d2:	a8 81       	ld	r26, Y
    50d4:	b9 81       	ldd	r27, Y+1	; 0x01
    50d6:	cb 58       	subi	r28, 0x8B	; 139
    50d8:	d2 40       	sbci	r29, 0x02	; 2
    50da:	e4 2f       	mov	r30, r20
    50dc:	f0 e0       	ldi	r31, 0x00	; 0
    50de:	35 96       	adiw	r30, 0x05	; 5
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	8c 0f       	add	r24, r28
    50e6:	9d 1f       	adc	r25, r29
    50e8:	e8 0f       	add	r30, r24
    50ea:	f9 1f       	adc	r31, r25
    50ec:	2c 5f       	subi	r18, 0xFC	; 252
    50ee:	3f 4f       	sbci	r19, 0xFF	; 255
    50f0:	24 0d       	add	r18, r4
    50f2:	35 1d       	adc	r19, r5
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <eeprom_panel+0x4a0>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    50f6:	8d 91       	ld	r24, X+
    50f8:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    50fa:	a2 17       	cp	r26, r18
    50fc:	b3 07       	cpc	r27, r19
    50fe:	d9 f7       	brne	.-10     	; 0x50f6 <eeprom_panel+0x49c>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    5100:	85 2f       	mov	r24, r21
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	84 0f       	add	r24, r20
    5106:	91 1d       	adc	r25, r1
    5108:	21 2f       	mov	r18, r17
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	28 17       	cp	r18, r24
    510e:	39 07       	cpc	r19, r25
    5110:	0c f0       	brlt	.+2      	; 0x5114 <eeprom_panel+0x4ba>
    5112:	4d c0       	rjmp	.+154    	; 0x51ae <eeprom_panel+0x554>
                            pageendaddr = pageoffset+ihex.reclen;
    5114:	14 2f       	mov	r17, r20
    5116:	15 0f       	add	r17, r21
    5118:	4a c0       	rjmp	.+148    	; 0x51ae <eeprom_panel+0x554>
                    } else if (ihex.rectyp == 1) {
    511a:	21 30       	cpi	r18, 0x01	; 1
    511c:	79 f5       	brne	.+94     	; 0x517c <eeprom_panel+0x522>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    511e:	01 17       	cp	r16, r17
    5120:	41 f1       	breq	.+80     	; 0x5172 <eeprom_panel+0x518>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    5122:	a6 01       	movw	r20, r12
    5124:	56 95       	lsr	r21
    5126:	54 2f       	mov	r21, r20
    5128:	44 27       	eor	r20, r20
    512a:	57 95       	ror	r21
    512c:	47 95       	ror	r20
    512e:	40 0f       	add	r20, r16
    5130:	51 1d       	adc	r21, r1
    5132:	60 e0       	ldi	r22, 0x00	; 0
    5134:	70 e0       	ldi	r23, 0x00	; 0
    5136:	10 1b       	sub	r17, r16
    5138:	c4 01       	movw	r24, r8
    513a:	21 2f       	mov	r18, r17
    513c:	8e 01       	movw	r16, r28
    513e:	0f 5f       	subi	r16, 0xFF	; 255
    5140:	1f 4f       	sbci	r17, 0xFF	; 255
    5142:	0e 94 23 23 	call	0x4646	; 0x4646 <verifyEEPage>
    5146:	89 2b       	or	r24, r25
    5148:	a1 f4       	brne	.+40     	; 0x5172 <eeprom_panel+0x518>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    514a:	00 d0       	rcall	.+0      	; 0x514c <eeprom_panel+0x4f2>
    514c:	0f 92       	push	r0
    514e:	8f e9       	ldi	r24, 0x9F	; 159
    5150:	9a e0       	ldi	r25, 0x0A	; 10
    5152:	ad b7       	in	r26, 0x3d	; 61
    5154:	be b7       	in	r27, 0x3e	; 62
    5156:	11 96       	adiw	r26, 0x01	; 1
    5158:	8d 93       	st	X+, r24
    515a:	9c 93       	st	X, r25
    515c:	12 97       	sbiw	r26, 0x02	; 2
    515e:	13 96       	adiw	r26, 0x03	; 3
    5160:	cd 92       	st	X+, r12
    5162:	dc 92       	st	X, r13
    5164:	14 97       	sbiw	r26, 0x04	; 4
    5166:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    516a:	0f 90       	pop	r0
    516c:	0f 90       	pop	r0
    516e:	0f 90       	pop	r0
    5170:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5172:	8d e9       	ldi	r24, 0x9D	; 157
    5174:	9a e0       	ldi	r25, 0x0A	; 10
    5176:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    517a:	24 c0       	rjmp	.+72     	; 0x51c4 <eeprom_panel+0x56a>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    517c:	00 d0       	rcall	.+0      	; 0x517e <eeprom_panel+0x524>
    517e:	00 d0       	rcall	.+0      	; 0x5180 <eeprom_panel+0x526>
    5180:	ed b7       	in	r30, 0x3d	; 61
    5182:	fe b7       	in	r31, 0x3e	; 62
    5184:	31 96       	adiw	r30, 0x01	; 1
    5186:	8c e5       	ldi	r24, 0x5C	; 92
    5188:	9a e0       	ldi	r25, 0x0A	; 10
    518a:	ad b7       	in	r26, 0x3d	; 61
    518c:	be b7       	in	r27, 0x3e	; 62
    518e:	11 96       	adiw	r26, 0x01	; 1
    5190:	8d 93       	st	X+, r24
    5192:	9c 93       	st	X, r25
    5194:	12 97       	sbiw	r26, 0x02	; 2
    5196:	22 83       	std	Z+2, r18	; 0x02
    5198:	13 82       	std	Z+3, r1	; 0x03
    519a:	64 82       	std	Z+4, r6	; 0x04
    519c:	75 82       	std	Z+5, r7	; 0x05
    519e:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    51a2:	ed b7       	in	r30, 0x3d	; 61
    51a4:	fe b7       	in	r31, 0x3e	; 62
    51a6:	36 96       	adiw	r30, 0x06	; 6
    51a8:	ed bf       	out	0x3d, r30	; 61
    51aa:	fe bf       	out	0x3e, r31	; 62
    51ac:	0b c0       	rjmp	.+22     	; 0x51c4 <eeprom_panel+0x56a>
                                ihex.rectyp, lineno);
                        break;
    51ae:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    51b0:	c1 01       	movw	r24, r2
    51b2:	60 e0       	ldi	r22, 0x00	; 0
    51b4:	71 e0       	ldi	r23, 0x01	; 1
    51b6:	43 ec       	ldi	r20, 0xC3	; 195
    51b8:	57 e2       	ldi	r21, 0x27	; 39
    51ba:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <f_gets>
    51be:	89 2b       	or	r24, r25
    51c0:	09 f0       	breq	.+2      	; 0x51c4 <eeprom_panel+0x56a>
    51c2:	f7 ce       	rjmp	.-530    	; 0x4fb2 <eeprom_panel+0x358>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    51c4:	85 e4       	ldi	r24, 0x45	; 69
    51c6:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    51c8:	c4 01       	movw	r24, r8
    51ca:	60 e7       	ldi	r22, 0x70	; 112
    51cc:	ae 01       	movw	r20, r28
    51ce:	4f 5f       	subi	r20, 0xFF	; 255
    51d0:	5f 4f       	sbci	r21, 0xFF	; 255
    51d2:	21 e0       	ldi	r18, 0x01	; 1
    51d4:	00 e0       	ldi	r16, 0x00	; 0
    51d6:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    51da:	d4 01       	movw	r26, r8
    51dc:	1d 96       	adiw	r26, 0x0d	; 13
    51de:	8c 91       	ld	r24, X
    51e0:	1d 97       	sbiw	r26, 0x0d	; 13
    51e2:	88 23       	and	r24, r24
    51e4:	d1 f7       	brne	.-12     	; 0x51da <eeprom_panel+0x580>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    51e6:	1e 96       	adiw	r26, 0x0e	; 14
    51e8:	8c 91       	ld	r24, X
    51ea:	1e 97       	sbiw	r26, 0x0e	; 14
    51ec:	81 30       	cpi	r24, 0x01	; 1
    51ee:	11 f1       	breq	.+68     	; 0x5234 <eeprom_panel+0x5da>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    51f0:	1e 96       	adiw	r26, 0x0e	; 14
    51f2:	2c 91       	ld	r18, X
    51f4:	00 d0       	rcall	.+0      	; 0x51f6 <eeprom_panel+0x59c>
    51f6:	0f 92       	push	r0
    51f8:	ed b7       	in	r30, 0x3d	; 61
    51fa:	fe b7       	in	r31, 0x3e	; 62
    51fc:	31 96       	adiw	r30, 0x01	; 1
    51fe:	81 e4       	ldi	r24, 0x41	; 65
    5200:	9a e0       	ldi	r25, 0x0A	; 10
    5202:	ad b7       	in	r26, 0x3d	; 61
    5204:	be b7       	in	r27, 0x3e	; 62
    5206:	11 96       	adiw	r26, 0x01	; 1
    5208:	8d 93       	st	X+, r24
    520a:	9c 93       	st	X, r25
    520c:	12 97       	sbiw	r26, 0x02	; 2
    520e:	22 83       	std	Z+2, r18	; 0x02
    5210:	13 82       	std	Z+3, r1	; 0x03
    5212:	0a c0       	rjmp	.+20     	; 0x5228 <eeprom_panel+0x5ce>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    5214:	00 d0       	rcall	.+0      	; 0x5216 <eeprom_panel+0x5bc>
    5216:	0f 92       	push	r0
    5218:	86 e2       	ldi	r24, 0x26	; 38
    521a:	9a e0       	ldi	r25, 0x0A	; 10
    521c:	ed b7       	in	r30, 0x3d	; 61
    521e:	fe b7       	in	r31, 0x3e	; 62
    5220:	81 83       	std	Z+1, r24	; 0x01
    5222:	92 83       	std	Z+2, r25	; 0x02
    5224:	e3 82       	std	Z+3, r14	; 0x03
    5226:	f4 82       	std	Z+4, r15	; 0x04
    5228:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    522c:	0f 90       	pop	r0
    522e:	0f 90       	pop	r0
    5230:	0f 90       	pop	r0
    5232:	0f 90       	pop	r0
    }
    
};
    5234:	c0 57       	subi	r28, 0x70	; 112
    5236:	dd 4f       	sbci	r29, 0xFD	; 253
    5238:	e2 e1       	ldi	r30, 0x12	; 18
    523a:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

0000523e <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    523e:	a0 e9       	ldi	r26, 0x90	; 144
    5240:	b2 e0       	ldi	r27, 0x02	; 2
    5242:	e5 e2       	ldi	r30, 0x25	; 37
    5244:	f9 e2       	ldi	r31, 0x29	; 41
    5246:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    524a:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    524c:	e8 2e       	mov	r14, r24
    524e:	ff 24       	eor	r15, r15
    5250:	f7 01       	movw	r30, r14
    5252:	e8 5e       	subi	r30, 0xE8	; 232
    5254:	f8 4d       	sbci	r31, 0xD8	; 216
    5256:	e0 81       	ld	r30, Z
    if (ch != 0){
    5258:	ee 23       	and	r30, r30
    525a:	09 f4       	brne	.+2      	; 0x525e <flash_panel+0x20>
    525c:	e1 c2       	rjmp	.+1474   	; 0x5820 <flash_panel+0x5e2>
        
        switch (ch) {
    525e:	e3 30       	cpi	r30, 0x03	; 3
    5260:	71 f0       	breq	.+28     	; 0x527e <flash_panel+0x40>
    5262:	e4 30       	cpi	r30, 0x04	; 4
    5264:	89 f0       	breq	.+34     	; 0x5288 <flash_panel+0x4a>
    5266:	e2 30       	cpi	r30, 0x02	; 2
    5268:	29 f4       	brne	.+10     	; 0x5274 <flash_panel+0x36>
    526a:	62 e7       	ldi	r22, 0x72	; 114
    526c:	86 2e       	mov	r8, r22
    526e:	69 e2       	ldi	r22, 0x29	; 41
    5270:	96 2e       	mov	r9, r22
    5272:	0e c0       	rjmp	.+28     	; 0x5290 <flash_panel+0x52>
    5274:	55 e7       	ldi	r21, 0x75	; 117
    5276:	85 2e       	mov	r8, r21
    5278:	56 e2       	ldi	r21, 0x26	; 38
    527a:	95 2e       	mov	r9, r21
    527c:	09 c0       	rjmp	.+18     	; 0x5290 <flash_panel+0x52>
    527e:	48 e0       	ldi	r20, 0x08	; 8
    5280:	84 2e       	mov	r8, r20
    5282:	47 e2       	ldi	r20, 0x27	; 39
    5284:	94 2e       	mov	r9, r20
    5286:	04 c0       	rjmp	.+8      	; 0x5290 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    5288:	37 e9       	ldi	r19, 0x97	; 151
    528a:	83 2e       	mov	r8, r19
    528c:	35 e2       	ldi	r19, 0x25	; 37
    528e:	93 2e       	mov	r9, r19
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    5290:	83 ea       	ldi	r24, 0xA3	; 163
    5292:	97 e2       	ldi	r25, 0x27	; 39
    5294:	65 ed       	ldi	r22, 0xD5	; 213
    5296:	73 e2       	ldi	r23, 0x23	; 35
    5298:	41 e0       	ldi	r20, 0x01	; 1
    529a:	0e 94 ba 4c 	call	0x9974	; 0x9974 <f_open>
    529e:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    52a0:	88 23       	and	r24, r24
    52a2:	49 f0       	breq	.+18     	; 0x52b6 <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    52a4:	8a e1       	ldi	r24, 0x1A	; 26
    52a6:	9f e0       	ldi	r25, 0x0F	; 15
    52a8:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            put_rc(res);
    52ac:	81 2f       	mov	r24, r17
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	0e 94 fd 22 	call	0x45fa	; 0x45fa <put_rc>
    52b4:	51 c0       	rjmp	.+162    	; 0x5358 <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    52b6:	07 ff       	sbrs	r16, 7
    52b8:	12 c0       	rjmp	.+36     	; 0x52de <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    52ba:	84 e0       	ldi	r24, 0x04	; 4
    52bc:	e0 e6       	ldi	r30, 0x60	; 96
    52be:	f6 e0       	ldi	r31, 0x06	; 6
    52c0:	86 83       	std	Z+6, r24	; 0x06
    52c2:	84 e6       	ldi	r24, 0x64	; 100
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	20 e2       	ldi	r18, 0x20	; 32
    52c8:	33 e0       	ldi	r19, 0x03	; 3
    52ca:	f9 01       	movw	r30, r18
    52cc:	31 97       	sbiw	r30, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d2:	d9 f7       	brne	.-10     	; 0x52ca <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    52d4:	84 e0       	ldi	r24, 0x04	; 4
    52d6:	e0 e6       	ldi	r30, 0x60	; 96
    52d8:	f6 e0       	ldi	r31, 0x06	; 6
    52da:	85 83       	std	Z+5, r24	; 0x05
    52dc:	3d c0       	rjmp	.+122    	; 0x5358 <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    52de:	00 d0       	rcall	.+0      	; 0x52e0 <flash_panel+0xa2>
    52e0:	0f 92       	push	r0
    52e2:	89 e0       	ldi	r24, 0x09	; 9
    52e4:	9f e0       	ldi	r25, 0x0F	; 15
    52e6:	ad b7       	in	r26, 0x3d	; 61
    52e8:	be b7       	in	r27, 0x3e	; 62
    52ea:	11 96       	adiw	r26, 0x01	; 1
    52ec:	8d 93       	st	X+, r24
    52ee:	9c 93       	st	X, r25
    52f0:	12 97       	sbiw	r26, 0x02	; 2
    52f2:	13 96       	adiw	r26, 0x03	; 3
    52f4:	ed 92       	st	X+, r14
    52f6:	fc 92       	st	X, r15
    52f8:	14 97       	sbiw	r26, 0x04	; 4
    52fa:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                pagebuff[0] = 0x00;
    52fe:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    5304:	0f 90       	pop	r0
    5306:	0f 90       	pop	r0
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	c4 01       	movw	r24, r8
    530e:	60 2f       	mov	r22, r16
    5310:	ae 01       	movw	r20, r28
    5312:	4f 5f       	subi	r20, 0xFF	; 255
    5314:	5f 4f       	sbci	r21, 0xFF	; 255
    5316:	22 e0       	ldi	r18, 0x02	; 2
    5318:	00 e0       	ldi	r16, 0x00	; 0
    531a:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    531e:	f4 01       	movw	r30, r8
    5320:	85 85       	ldd	r24, Z+13	; 0x0d
    5322:	88 23       	and	r24, r24
    5324:	e1 f7       	brne	.-8      	; 0x531e <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    5326:	86 85       	ldd	r24, Z+14	; 0x0e
    5328:	81 30       	cpi	r24, 0x01	; 1
    532a:	b1 f0       	breq	.+44     	; 0x5358 <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    532c:	26 85       	ldd	r18, Z+14	; 0x0e
    532e:	00 d0       	rcall	.+0      	; 0x5330 <flash_panel+0xf2>
    5330:	0f 92       	push	r0
    5332:	ed b7       	in	r30, 0x3d	; 61
    5334:	fe b7       	in	r31, 0x3e	; 62
    5336:	31 96       	adiw	r30, 0x01	; 1
    5338:	8b ee       	ldi	r24, 0xEB	; 235
    533a:	9e e0       	ldi	r25, 0x0E	; 14
    533c:	ad b7       	in	r26, 0x3d	; 61
    533e:	be b7       	in	r27, 0x3e	; 62
    5340:	11 96       	adiw	r26, 0x01	; 1
    5342:	8d 93       	st	X+, r24
    5344:	9c 93       	st	X, r25
    5346:	12 97       	sbiw	r26, 0x02	; 2
    5348:	22 83       	std	Z+2, r18	; 0x02
    534a:	13 82       	std	Z+3, r1	; 0x03
    534c:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    5350:	0f 90       	pop	r0
    5352:	0f 90       	pop	r0
    5354:	0f 90       	pop	r0
    5356:	0f 90       	pop	r0
    5358:	88 e8       	ldi	r24, 0x88	; 136
    535a:	93 e1       	ldi	r25, 0x13	; 19
    535c:	20 e2       	ldi	r18, 0x20	; 32
    535e:	33 e0       	ldi	r19, 0x03	; 3
    5360:	f9 01       	movw	r30, r18
    5362:	31 97       	sbiw	r30, 0x01	; 1
    5364:	f1 f7       	brne	.-4      	; 0x5362 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5368:	d9 f7       	brne	.-10     	; 0x5360 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    536a:	8e ed       	ldi	r24, 0xDE	; 222
    536c:	9e e0       	ldi	r25, 0x0E	; 14
    536e:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    5372:	0f ef       	ldi	r16, 0xFF	; 255
    5374:	1f ef       	ldi	r17, 0xFF	; 255
    5376:	cc 24       	eor	r12, r12
    5378:	dd 24       	eor	r13, r13
    537a:	66 24       	eor	r6, r6
    537c:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    537e:	26 e8       	ldi	r18, 0x86	; 134
    5380:	22 2e       	mov	r2, r18
    5382:	31 2c       	mov	r3, r1
    5384:	2c 0e       	add	r2, r28
    5386:	3d 1e       	adc	r3, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5388:	96 e8       	ldi	r25, 0x86	; 134
    538a:	49 2e       	mov	r4, r25
    538c:	91 e0       	ldi	r25, 0x01	; 1
    538e:	59 2e       	mov	r5, r25
    5390:	4c 0e       	add	r4, r28
    5392:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5394:	f2 01       	movw	r30, r4
    5396:	34 96       	adiw	r30, 0x04	; 4
    5398:	c3 57       	subi	r28, 0x73	; 115
    539a:	dd 4f       	sbci	r29, 0xFD	; 253
    539c:	e8 83       	st	Y, r30
    539e:	f9 83       	std	Y+1, r31	; 0x01
    53a0:	cd 58       	subi	r28, 0x8D	; 141
    53a2:	d2 40       	sbci	r29, 0x02	; 2
    53a4:	cb c0       	rjmp	.+406    	; 0x553c <flash_panel+0x2fe>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    53a6:	08 94       	sec
    53a8:	61 1c       	adc	r6, r1
    53aa:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    53ac:	f1 01       	movw	r30, r2
    53ae:	01 90       	ld	r0, Z+
    53b0:	00 20       	and	r0, r0
    53b2:	e9 f7       	brne	.-6      	; 0x53ae <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    53b4:	32 97       	sbiw	r30, 0x02	; 2
    53b6:	80 81       	ld	r24, Z
    53b8:	8a 30       	cpi	r24, 0x0A	; 10
    53ba:	09 f4       	brne	.+2      	; 0x53be <flash_panel+0x180>
                flashBuff[--len] = 0;
    53bc:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    53be:	d1 01       	movw	r26, r2
    53c0:	8c 91       	ld	r24, X
    53c2:	8a 33       	cpi	r24, 0x3A	; 58
    53c4:	09 f0       	breq	.+2      	; 0x53c8 <flash_panel+0x18a>
    53c6:	ba c0       	rjmp	.+372    	; 0x553c <flash_panel+0x2fe>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    53c8:	c2 01       	movw	r24, r4
    53ca:	b1 01       	movw	r22, r2
    53cc:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <ihex_readrec>
    53d0:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    53d2:	c6 57       	subi	r28, 0x76	; 118
    53d4:	dd 4f       	sbci	r29, 0xFD	; 253
    53d6:	88 81       	ld	r24, Y
    53d8:	ca 58       	subi	r28, 0x8A	; 138
    53da:	d2 40       	sbci	r29, 0x02	; 2
    53dc:	f8 16       	cp	r15, r24
    53de:	19 f1       	breq	.+70     	; 0x5426 <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    53e0:	00 d0       	rcall	.+0      	; 0x53e2 <flash_panel+0x1a4>
    53e2:	0f 92       	push	r0
    53e4:	8b ea       	ldi	r24, 0xAB	; 171
    53e6:	9e e0       	ldi	r25, 0x0E	; 14
    53e8:	ed b7       	in	r30, 0x3d	; 61
    53ea:	fe b7       	in	r31, 0x3e	; 62
    53ec:	81 83       	std	Z+1, r24	; 0x01
    53ee:	92 83       	std	Z+2, r25	; 0x02
    53f0:	63 82       	std	Z+3, r6	; 0x03
    53f2:	74 82       	std	Z+4, r7	; 0x04
    53f4:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    53f8:	0f 92       	push	r0
    53fa:	0f 92       	push	r0
    53fc:	ed b7       	in	r30, 0x3d	; 61
    53fe:	fe b7       	in	r31, 0x3e	; 62
    5400:	31 96       	adiw	r30, 0x01	; 1
    5402:	80 e8       	ldi	r24, 0x80	; 128
    5404:	9e e0       	ldi	r25, 0x0E	; 14
    5406:	ad b7       	in	r26, 0x3d	; 61
    5408:	be b7       	in	r27, 0x3e	; 62
    540a:	11 96       	adiw	r26, 0x01	; 1
    540c:	8d 93       	st	X+, r24
    540e:	9c 93       	st	X, r25
    5410:	12 97       	sbiw	r26, 0x02	; 2
    5412:	c6 57       	subi	r28, 0x76	; 118
    5414:	dd 4f       	sbci	r29, 0xFD	; 253
    5416:	88 81       	ld	r24, Y
    5418:	ca 58       	subi	r28, 0x8A	; 138
    541a:	d2 40       	sbci	r29, 0x02	; 2
    541c:	82 83       	std	Z+2, r24	; 0x02
    541e:	13 82       	std	Z+3, r1	; 0x03
    5420:	f4 82       	std	Z+4, r15	; 0x04
    5422:	15 82       	std	Z+5, r1	; 0x05
    5424:	82 c0       	rjmp	.+260    	; 0x552a <flash_panel+0x2ec>
                break;
            } else {
                if (ihex.rectyp == 0) {
    5426:	d2 01       	movw	r26, r4
    5428:	13 96       	adiw	r26, 0x03	; 3
    542a:	2c 91       	ld	r18, X
    542c:	13 97       	sbiw	r26, 0x03	; 3
    542e:	22 23       	and	r18, r18
    5430:	09 f0       	breq	.+2      	; 0x5434 <flash_panel+0x1f6>
    5432:	53 c0       	rjmp	.+166    	; 0x54da <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    5434:	11 96       	adiw	r26, 0x01	; 1
    5436:	ed 90       	ld	r14, X+
    5438:	fc 90       	ld	r15, X
    543a:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    543c:	57 01       	movw	r10, r14
    543e:	aa 0c       	add	r10, r10
    5440:	ab 2c       	mov	r10, r11
    5442:	aa 1c       	adc	r10, r10
    5444:	bb 08       	sbc	r11, r11
    5446:	b1 94       	neg	r11
    5448:	a0 16       	cp	r10, r16
    544a:	b1 06       	cpc	r11, r17
    544c:	c1 f0       	breq	.+48     	; 0x547e <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    544e:	cd 14       	cp	r12, r13
    5450:	91 f0       	breq	.+36     	; 0x5476 <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    5452:	16 95       	lsr	r17
    5454:	10 2f       	mov	r17, r16
    5456:	00 27       	eor	r16, r16
    5458:	17 95       	ror	r17
    545a:	07 95       	ror	r16
    545c:	0c 0d       	add	r16, r12
    545e:	11 1d       	adc	r17, r1
    5460:	a8 01       	movw	r20, r16
    5462:	60 e0       	ldi	r22, 0x00	; 0
    5464:	70 e0       	ldi	r23, 0x00	; 0
    5466:	dc 18       	sub	r13, r12
    5468:	c4 01       	movw	r24, r8
    546a:	2d 2d       	mov	r18, r13
    546c:	8e 01       	movw	r16, r28
    546e:	0f 5f       	subi	r16, 0xFF	; 255
    5470:	1f 4f       	sbci	r17, 0xFF	; 255
    5472:	0e 94 d6 24 	call	0x49ac	; 0x49ac <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5476:	af e7       	ldi	r26, 0x7F	; 127
    5478:	da 2e       	mov	r13, r26
    547a:	de 20       	and	r13, r14
    547c:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    547e:	4e 2d       	mov	r20, r14
    5480:	4f 77       	andi	r20, 0x7F	; 127
    5482:	4c 15       	cp	r20, r12
    5484:	08 f4       	brcc	.+2      	; 0x5488 <flash_panel+0x24a>
    5486:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5488:	f2 01       	movw	r30, r4
    548a:	50 81       	ld	r21, Z
    548c:	25 2f       	mov	r18, r21
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	c3 57       	subi	r28, 0x73	; 115
    5492:	dd 4f       	sbci	r29, 0xFD	; 253
    5494:	a8 81       	ld	r26, Y
    5496:	b9 81       	ldd	r27, Y+1	; 0x01
    5498:	cd 58       	subi	r28, 0x8D	; 141
    549a:	d2 40       	sbci	r29, 0x02	; 2
    549c:	e4 2f       	mov	r30, r20
    549e:	f0 e0       	ldi	r31, 0x00	; 0
    54a0:	35 96       	adiw	r30, 0x05	; 5
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	8c 0f       	add	r24, r28
    54a8:	9d 1f       	adc	r25, r29
    54aa:	e8 0f       	add	r30, r24
    54ac:	f9 1f       	adc	r31, r25
    54ae:	2c 5f       	subi	r18, 0xFC	; 252
    54b0:	3f 4f       	sbci	r19, 0xFF	; 255
    54b2:	24 0d       	add	r18, r4
    54b4:	35 1d       	adc	r19, r5
    54b6:	02 c0       	rjmp	.+4      	; 0x54bc <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    54b8:	8d 91       	ld	r24, X+
    54ba:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    54bc:	a2 17       	cp	r26, r18
    54be:	b3 07       	cpc	r27, r19
    54c0:	d9 f7       	brne	.-10     	; 0x54b8 <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    54c2:	85 2f       	mov	r24, r21
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	84 0f       	add	r24, r20
    54c8:	91 1d       	adc	r25, r1
    54ca:	2d 2d       	mov	r18, r13
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	28 17       	cp	r18, r24
    54d0:	39 07       	cpc	r19, r25
    54d2:	9c f5       	brge	.+102    	; 0x553a <flash_panel+0x2fc>
                        pageendaddr = pageoffset+ihex.reclen;
    54d4:	d4 2e       	mov	r13, r20
    54d6:	d5 0e       	add	r13, r21
    54d8:	30 c0       	rjmp	.+96     	; 0x553a <flash_panel+0x2fc>
                } else if (ihex.rectyp == 1) {
    54da:	21 30       	cpi	r18, 0x01	; 1
    54dc:	a9 f4       	brne	.+42     	; 0x5508 <flash_panel+0x2ca>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    54de:	cd 14       	cp	r12, r13
    54e0:	b9 f1       	breq	.+110    	; 0x5550 <flash_panel+0x312>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    54e2:	16 95       	lsr	r17
    54e4:	10 2f       	mov	r17, r16
    54e6:	00 27       	eor	r16, r16
    54e8:	17 95       	ror	r17
    54ea:	07 95       	ror	r16
    54ec:	0c 0d       	add	r16, r12
    54ee:	11 1d       	adc	r17, r1
    54f0:	a8 01       	movw	r20, r16
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	dc 18       	sub	r13, r12
    54f8:	c4 01       	movw	r24, r8
    54fa:	2d 2d       	mov	r18, r13
    54fc:	8e 01       	movw	r16, r28
    54fe:	0f 5f       	subi	r16, 0xFF	; 255
    5500:	1f 4f       	sbci	r17, 0xFF	; 255
    5502:	0e 94 d6 24 	call	0x49ac	; 0x49ac <progPage>
    5506:	24 c0       	rjmp	.+72     	; 0x5550 <flash_panel+0x312>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5508:	00 d0       	rcall	.+0      	; 0x550a <flash_panel+0x2cc>
    550a:	00 d0       	rcall	.+0      	; 0x550c <flash_panel+0x2ce>
    550c:	ed b7       	in	r30, 0x3d	; 61
    550e:	fe b7       	in	r31, 0x3e	; 62
    5510:	31 96       	adiw	r30, 0x01	; 1
    5512:	80 e4       	ldi	r24, 0x40	; 64
    5514:	9e e0       	ldi	r25, 0x0E	; 14
    5516:	ad b7       	in	r26, 0x3d	; 61
    5518:	be b7       	in	r27, 0x3e	; 62
    551a:	11 96       	adiw	r26, 0x01	; 1
    551c:	8d 93       	st	X+, r24
    551e:	9c 93       	st	X, r25
    5520:	12 97       	sbiw	r26, 0x02	; 2
    5522:	22 83       	std	Z+2, r18	; 0x02
    5524:	13 82       	std	Z+3, r1	; 0x03
    5526:	64 82       	std	Z+4, r6	; 0x04
    5528:	75 82       	std	Z+5, r7	; 0x05
    552a:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    552e:	ed b7       	in	r30, 0x3d	; 61
    5530:	fe b7       	in	r31, 0x3e	; 62
    5532:	36 96       	adiw	r30, 0x06	; 6
    5534:	ed bf       	out	0x3d, r30	; 61
    5536:	fe bf       	out	0x3e, r31	; 62
    5538:	0b c0       	rjmp	.+22     	; 0x5550 <flash_panel+0x312>
                            ihex.rectyp, lineno);
                    break;
    553a:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    553c:	c1 01       	movw	r24, r2
    553e:	60 e0       	ldi	r22, 0x00	; 0
    5540:	71 e0       	ldi	r23, 0x01	; 1
    5542:	43 ea       	ldi	r20, 0xA3	; 163
    5544:	57 e2       	ldi	r21, 0x27	; 39
    5546:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <f_gets>
    554a:	89 2b       	or	r24, r25
    554c:	09 f0       	breq	.+2      	; 0x5550 <flash_panel+0x312>
    554e:	2b cf       	rjmp	.-426    	; 0x53a6 <flash_panel+0x168>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    5550:	83 ea       	ldi	r24, 0xA3	; 163
    5552:	97 e2       	ldi	r25, 0x27	; 39
    5554:	40 e0       	ldi	r20, 0x00	; 0
    5556:	50 e0       	ldi	r21, 0x00	; 0
    5558:	60 e0       	ldi	r22, 0x00	; 0
    555a:	70 e0       	ldi	r23, 0x00	; 0
    555c:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <f_lseek>
    5560:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5562:	88 23       	and	r24, r24
    5564:	49 f0       	breq	.+18     	; 0x5578 <flash_panel+0x33a>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    5566:	83 e2       	ldi	r24, 0x23	; 35
    5568:	9e e0       	ldi	r25, 0x0E	; 14
    556a:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
            put_rc(res);
    556e:	81 2f       	mov	r24, r17
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	0e 94 fd 22 	call	0x45fa	; 0x45fa <put_rc>
    5576:	2c c1       	rjmp	.+600    	; 0x57d0 <flash_panel+0x592>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    5578:	86 e1       	ldi	r24, 0x16	; 22
    557a:	9e e0       	ldi	r25, 0x0E	; 14
    557c:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    5580:	cc 24       	eor	r12, r12
    5582:	ca 94       	dec	r12
    5584:	dc 2c       	mov	r13, r12
    5586:	00 e0       	ldi	r16, 0x00	; 0
    5588:	10 e0       	ldi	r17, 0x00	; 0
    558a:	66 24       	eor	r6, r6
    558c:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    558e:	ce 01       	movw	r24, r28
    5590:	8a 57       	subi	r24, 0x7A	; 122
    5592:	9f 4f       	sbci	r25, 0xFF	; 255
    5594:	c1 57       	subi	r28, 0x71	; 113
    5596:	dd 4f       	sbci	r29, 0xFD	; 253
    5598:	88 83       	st	Y, r24
    559a:	99 83       	std	Y+1, r25	; 0x01
    559c:	cf 58       	subi	r28, 0x8F	; 143
    559e:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    55a0:	e6 e8       	ldi	r30, 0x86	; 134
    55a2:	4e 2e       	mov	r4, r30
    55a4:	e1 e0       	ldi	r30, 0x01	; 1
    55a6:	5e 2e       	mov	r5, r30
    55a8:	4c 0e       	add	r4, r28
    55aa:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    55ac:	d2 01       	movw	r26, r4
    55ae:	14 96       	adiw	r26, 0x04	; 4
    55b0:	c5 57       	subi	r28, 0x75	; 117
    55b2:	dd 4f       	sbci	r29, 0xFD	; 253
    55b4:	a8 83       	st	Y, r26
    55b6:	b9 83       	std	Y+1, r27	; 0x01
    55b8:	cb 58       	subi	r28, 0x8B	; 139
    55ba:	d2 40       	sbci	r29, 0x02	; 2
    55bc:	ff c0       	rjmp	.+510    	; 0x57bc <flash_panel+0x57e>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    55be:	08 94       	sec
    55c0:	61 1c       	adc	r6, r1
    55c2:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    55c4:	c1 57       	subi	r28, 0x71	; 113
    55c6:	dd 4f       	sbci	r29, 0xFD	; 253
    55c8:	e8 81       	ld	r30, Y
    55ca:	f9 81       	ldd	r31, Y+1	; 0x01
    55cc:	cf 58       	subi	r28, 0x8F	; 143
    55ce:	d2 40       	sbci	r29, 0x02	; 2
    55d0:	01 90       	ld	r0, Z+
    55d2:	00 20       	and	r0, r0
    55d4:	e9 f7       	brne	.-6      	; 0x55d0 <flash_panel+0x392>
                if (flashBuff[len-1] == '\n')
    55d6:	32 97       	sbiw	r30, 0x02	; 2
    55d8:	80 81       	ld	r24, Z
    55da:	8a 30       	cpi	r24, 0x0A	; 10
    55dc:	09 f4       	brne	.+2      	; 0x55e0 <flash_panel+0x3a2>
                    flashBuff[--len] = 0;
    55de:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    55e0:	ca 57       	subi	r28, 0x7A	; 122
    55e2:	df 4f       	sbci	r29, 0xFF	; 255
    55e4:	88 81       	ld	r24, Y
    55e6:	c6 58       	subi	r28, 0x86	; 134
    55e8:	d0 40       	sbci	r29, 0x00	; 0
    55ea:	8a 33       	cpi	r24, 0x3A	; 58
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <flash_panel+0x3b2>
    55ee:	e6 c0       	rjmp	.+460    	; 0x57bc <flash_panel+0x57e>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    55f0:	c2 01       	movw	r24, r4
    55f2:	b1 01       	movw	r22, r2
    55f4:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <ihex_readrec>
    55f8:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    55fa:	c6 57       	subi	r28, 0x76	; 118
    55fc:	dd 4f       	sbci	r29, 0xFD	; 253
    55fe:	88 81       	ld	r24, Y
    5600:	ca 58       	subi	r28, 0x8A	; 138
    5602:	d2 40       	sbci	r29, 0x02	; 2
    5604:	f8 16       	cp	r15, r24
    5606:	19 f1       	breq	.+70     	; 0x564e <flash_panel+0x410>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    5608:	00 d0       	rcall	.+0      	; 0x560a <flash_panel+0x3cc>
    560a:	0f 92       	push	r0
    560c:	84 ee       	ldi	r24, 0xE4	; 228
    560e:	9d e0       	ldi	r25, 0x0D	; 13
    5610:	ed b7       	in	r30, 0x3d	; 61
    5612:	fe b7       	in	r31, 0x3e	; 62
    5614:	81 83       	std	Z+1, r24	; 0x01
    5616:	92 83       	std	Z+2, r25	; 0x02
    5618:	63 82       	std	Z+3, r6	; 0x03
    561a:	74 82       	std	Z+4, r7	; 0x04
    561c:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5620:	0f 92       	push	r0
    5622:	0f 92       	push	r0
    5624:	ed b7       	in	r30, 0x3d	; 61
    5626:	fe b7       	in	r31, 0x3e	; 62
    5628:	31 96       	adiw	r30, 0x01	; 1
    562a:	89 eb       	ldi	r24, 0xB9	; 185
    562c:	9d e0       	ldi	r25, 0x0D	; 13
    562e:	ad b7       	in	r26, 0x3d	; 61
    5630:	be b7       	in	r27, 0x3e	; 62
    5632:	11 96       	adiw	r26, 0x01	; 1
    5634:	8d 93       	st	X+, r24
    5636:	9c 93       	st	X, r25
    5638:	12 97       	sbiw	r26, 0x02	; 2
    563a:	c6 57       	subi	r28, 0x76	; 118
    563c:	dd 4f       	sbci	r29, 0xFD	; 253
    563e:	88 81       	ld	r24, Y
    5640:	ca 58       	subi	r28, 0x8A	; 138
    5642:	d2 40       	sbci	r29, 0x02	; 2
    5644:	82 83       	std	Z+2, r24	; 0x02
    5646:	13 82       	std	Z+3, r1	; 0x03
    5648:	f4 82       	std	Z+4, r15	; 0x04
    564a:	15 82       	std	Z+5, r1	; 0x05
    564c:	ae c0       	rjmp	.+348    	; 0x57aa <flash_panel+0x56c>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    564e:	d2 01       	movw	r26, r4
    5650:	13 96       	adiw	r26, 0x03	; 3
    5652:	2c 91       	ld	r18, X
    5654:	13 97       	sbiw	r26, 0x03	; 3
    5656:	22 23       	and	r18, r18
    5658:	09 f0       	breq	.+2      	; 0x565c <flash_panel+0x41e>
    565a:	65 c0       	rjmp	.+202    	; 0x5726 <flash_panel+0x4e8>
                        // data record
                        nextaddr = ihex.loadofs;
    565c:	11 96       	adiw	r26, 0x01	; 1
    565e:	ed 90       	ld	r14, X+
    5660:	fc 90       	ld	r15, X
    5662:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5664:	57 01       	movw	r10, r14
    5666:	aa 0c       	add	r10, r10
    5668:	ab 2c       	mov	r10, r11
    566a:	aa 1c       	adc	r10, r10
    566c:	bb 08       	sbc	r11, r11
    566e:	b1 94       	neg	r11
    5670:	ac 14       	cp	r10, r12
    5672:	bd 04       	cpc	r11, r13
    5674:	49 f1       	breq	.+82     	; 0x56c8 <flash_panel+0x48a>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    5676:	01 17       	cp	r16, r17
    5678:	21 f1       	breq	.+72     	; 0x56c2 <flash_panel+0x484>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    567a:	a6 01       	movw	r20, r12
    567c:	56 95       	lsr	r21
    567e:	54 2f       	mov	r21, r20
    5680:	44 27       	eor	r20, r20
    5682:	57 95       	ror	r21
    5684:	47 95       	ror	r20
    5686:	40 0f       	add	r20, r16
    5688:	51 1d       	adc	r21, r1
    568a:	60 e0       	ldi	r22, 0x00	; 0
    568c:	70 e0       	ldi	r23, 0x00	; 0
    568e:	10 1b       	sub	r17, r16
    5690:	c4 01       	movw	r24, r8
    5692:	21 2f       	mov	r18, r17
    5694:	8e 01       	movw	r16, r28
    5696:	0f 5f       	subi	r16, 0xFF	; 255
    5698:	1f 4f       	sbci	r17, 0xFF	; 255
    569a:	0e 94 1d 24 	call	0x483a	; 0x483a <verifyPage>
    569e:	89 2b       	or	r24, r25
    56a0:	81 f4       	brne	.+32     	; 0x56c2 <flash_panel+0x484>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    56a2:	00 d0       	rcall	.+0      	; 0x56a4 <flash_panel+0x466>
    56a4:	0f 92       	push	r0
    56a6:	8c e9       	ldi	r24, 0x9C	; 156
    56a8:	9d e0       	ldi	r25, 0x0D	; 13
    56aa:	ed b7       	in	r30, 0x3d	; 61
    56ac:	fe b7       	in	r31, 0x3e	; 62
    56ae:	81 83       	std	Z+1, r24	; 0x01
    56b0:	92 83       	std	Z+2, r25	; 0x02
    56b2:	c3 82       	std	Z+3, r12	; 0x03
    56b4:	d4 82       	std	Z+4, r13	; 0x04
    56b6:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    56c2:	1e 2d       	mov	r17, r14
    56c4:	1f 77       	andi	r17, 0x7F	; 127
    56c6:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    56c8:	4e 2d       	mov	r20, r14
    56ca:	4f 77       	andi	r20, 0x7F	; 127
    56cc:	40 17       	cp	r20, r16
    56ce:	08 f4       	brcc	.+2      	; 0x56d2 <flash_panel+0x494>
    56d0:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    56d2:	d2 01       	movw	r26, r4
    56d4:	5c 91       	ld	r21, X
    56d6:	25 2f       	mov	r18, r21
    56d8:	30 e0       	ldi	r19, 0x00	; 0
    56da:	c5 57       	subi	r28, 0x75	; 117
    56dc:	dd 4f       	sbci	r29, 0xFD	; 253
    56de:	a8 81       	ld	r26, Y
    56e0:	b9 81       	ldd	r27, Y+1	; 0x01
    56e2:	cb 58       	subi	r28, 0x8B	; 139
    56e4:	d2 40       	sbci	r29, 0x02	; 2
    56e6:	e4 2f       	mov	r30, r20
    56e8:	f0 e0       	ldi	r31, 0x00	; 0
    56ea:	35 96       	adiw	r30, 0x05	; 5
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	8c 0f       	add	r24, r28
    56f2:	9d 1f       	adc	r25, r29
    56f4:	e8 0f       	add	r30, r24
    56f6:	f9 1f       	adc	r31, r25
    56f8:	2c 5f       	subi	r18, 0xFC	; 252
    56fa:	3f 4f       	sbci	r19, 0xFF	; 255
    56fc:	24 0d       	add	r18, r4
    56fe:	35 1d       	adc	r19, r5
    5700:	02 c0       	rjmp	.+4      	; 0x5706 <flash_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5702:	8d 91       	ld	r24, X+
    5704:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5706:	a2 17       	cp	r26, r18
    5708:	b3 07       	cpc	r27, r19
    570a:	d9 f7       	brne	.-10     	; 0x5702 <flash_panel+0x4c4>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    570c:	85 2f       	mov	r24, r21
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	84 0f       	add	r24, r20
    5712:	91 1d       	adc	r25, r1
    5714:	21 2f       	mov	r18, r17
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	28 17       	cp	r18, r24
    571a:	39 07       	cpc	r19, r25
    571c:	0c f0       	brlt	.+2      	; 0x5720 <flash_panel+0x4e2>
    571e:	4d c0       	rjmp	.+154    	; 0x57ba <flash_panel+0x57c>
                            pageendaddr = pageoffset+ihex.reclen;
    5720:	14 2f       	mov	r17, r20
    5722:	15 0f       	add	r17, r21
    5724:	4a c0       	rjmp	.+148    	; 0x57ba <flash_panel+0x57c>
                    } else if (ihex.rectyp == 1) {
    5726:	21 30       	cpi	r18, 0x01	; 1
    5728:	79 f5       	brne	.+94     	; 0x5788 <flash_panel+0x54a>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    572a:	01 17       	cp	r16, r17
    572c:	41 f1       	breq	.+80     	; 0x577e <flash_panel+0x540>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    572e:	a6 01       	movw	r20, r12
    5730:	56 95       	lsr	r21
    5732:	54 2f       	mov	r21, r20
    5734:	44 27       	eor	r20, r20
    5736:	57 95       	ror	r21
    5738:	47 95       	ror	r20
    573a:	40 0f       	add	r20, r16
    573c:	51 1d       	adc	r21, r1
    573e:	60 e0       	ldi	r22, 0x00	; 0
    5740:	70 e0       	ldi	r23, 0x00	; 0
    5742:	10 1b       	sub	r17, r16
    5744:	c4 01       	movw	r24, r8
    5746:	21 2f       	mov	r18, r17
    5748:	8e 01       	movw	r16, r28
    574a:	0f 5f       	subi	r16, 0xFF	; 255
    574c:	1f 4f       	sbci	r17, 0xFF	; 255
    574e:	0e 94 1d 24 	call	0x483a	; 0x483a <verifyPage>
    5752:	89 2b       	or	r24, r25
    5754:	a1 f4       	brne	.+40     	; 0x577e <flash_panel+0x540>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    5756:	00 d0       	rcall	.+0      	; 0x5758 <flash_panel+0x51a>
    5758:	0f 92       	push	r0
    575a:	8f e7       	ldi	r24, 0x7F	; 127
    575c:	9d e0       	ldi	r25, 0x0D	; 13
    575e:	ad b7       	in	r26, 0x3d	; 61
    5760:	be b7       	in	r27, 0x3e	; 62
    5762:	11 96       	adiw	r26, 0x01	; 1
    5764:	8d 93       	st	X+, r24
    5766:	9c 93       	st	X, r25
    5768:	12 97       	sbiw	r26, 0x02	; 2
    576a:	13 96       	adiw	r26, 0x03	; 3
    576c:	cd 92       	st	X+, r12
    576e:	dc 92       	st	X, r13
    5770:	14 97       	sbiw	r26, 0x04	; 4
    5772:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    5776:	0f 90       	pop	r0
    5778:	0f 90       	pop	r0
    577a:	0f 90       	pop	r0
    577c:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    577e:	8d e7       	ldi	r24, 0x7D	; 125
    5780:	9d e0       	ldi	r25, 0x0D	; 13
    5782:	0e 94 cd 56 	call	0xad9a	; 0xad9a <xputs>
    5786:	24 c0       	rjmp	.+72     	; 0x57d0 <flash_panel+0x592>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5788:	00 d0       	rcall	.+0      	; 0x578a <flash_panel+0x54c>
    578a:	00 d0       	rcall	.+0      	; 0x578c <flash_panel+0x54e>
    578c:	ed b7       	in	r30, 0x3d	; 61
    578e:	fe b7       	in	r31, 0x3e	; 62
    5790:	31 96       	adiw	r30, 0x01	; 1
    5792:	8d e3       	ldi	r24, 0x3D	; 61
    5794:	9d e0       	ldi	r25, 0x0D	; 13
    5796:	ad b7       	in	r26, 0x3d	; 61
    5798:	be b7       	in	r27, 0x3e	; 62
    579a:	11 96       	adiw	r26, 0x01	; 1
    579c:	8d 93       	st	X+, r24
    579e:	9c 93       	st	X, r25
    57a0:	12 97       	sbiw	r26, 0x02	; 2
    57a2:	22 83       	std	Z+2, r18	; 0x02
    57a4:	13 82       	std	Z+3, r1	; 0x03
    57a6:	64 82       	std	Z+4, r6	; 0x04
    57a8:	75 82       	std	Z+5, r7	; 0x05
    57aa:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    57ae:	ed b7       	in	r30, 0x3d	; 61
    57b0:	fe b7       	in	r31, 0x3e	; 62
    57b2:	36 96       	adiw	r30, 0x06	; 6
    57b4:	ed bf       	out	0x3d, r30	; 61
    57b6:	fe bf       	out	0x3e, r31	; 62
    57b8:	0b c0       	rjmp	.+22     	; 0x57d0 <flash_panel+0x592>
                                ihex.rectyp, lineno);
                        break;
    57ba:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    57bc:	c1 01       	movw	r24, r2
    57be:	60 e0       	ldi	r22, 0x00	; 0
    57c0:	71 e0       	ldi	r23, 0x01	; 1
    57c2:	43 ea       	ldi	r20, 0xA3	; 163
    57c4:	57 e2       	ldi	r21, 0x27	; 39
    57c6:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <f_gets>
    57ca:	89 2b       	or	r24, r25
    57cc:	09 f0       	breq	.+2      	; 0x57d0 <flash_panel+0x592>
    57ce:	f7 ce       	rjmp	.-530    	; 0x55be <flash_panel+0x380>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    57d0:	85 e4       	ldi	r24, 0x45	; 69
    57d2:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    57d4:	c4 01       	movw	r24, r8
    57d6:	60 e7       	ldi	r22, 0x70	; 112
    57d8:	ae 01       	movw	r20, r28
    57da:	4f 5f       	subi	r20, 0xFF	; 255
    57dc:	5f 4f       	sbci	r21, 0xFF	; 255
    57de:	21 e0       	ldi	r18, 0x01	; 1
    57e0:	00 e0       	ldi	r16, 0x00	; 0
    57e2:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    57e6:	d4 01       	movw	r26, r8
    57e8:	1d 96       	adiw	r26, 0x0d	; 13
    57ea:	8c 91       	ld	r24, X
    57ec:	1d 97       	sbiw	r26, 0x0d	; 13
    57ee:	88 23       	and	r24, r24
    57f0:	d1 f7       	brne	.-12     	; 0x57e6 <flash_panel+0x5a8>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    57f2:	1e 96       	adiw	r26, 0x0e	; 14
    57f4:	8c 91       	ld	r24, X
    57f6:	1e 97       	sbiw	r26, 0x0e	; 14
    57f8:	81 30       	cpi	r24, 0x01	; 1
    57fa:	11 f1       	breq	.+68     	; 0x5840 <flash_panel+0x602>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    57fc:	1e 96       	adiw	r26, 0x0e	; 14
    57fe:	2c 91       	ld	r18, X
    5800:	00 d0       	rcall	.+0      	; 0x5802 <flash_panel+0x5c4>
    5802:	0f 92       	push	r0
    5804:	ed b7       	in	r30, 0x3d	; 61
    5806:	fe b7       	in	r31, 0x3e	; 62
    5808:	31 96       	adiw	r30, 0x01	; 1
    580a:	82 e2       	ldi	r24, 0x22	; 34
    580c:	9d e0       	ldi	r25, 0x0D	; 13
    580e:	ad b7       	in	r26, 0x3d	; 61
    5810:	be b7       	in	r27, 0x3e	; 62
    5812:	11 96       	adiw	r26, 0x01	; 1
    5814:	8d 93       	st	X+, r24
    5816:	9c 93       	st	X, r25
    5818:	12 97       	sbiw	r26, 0x02	; 2
    581a:	22 83       	std	Z+2, r18	; 0x02
    581c:	13 82       	std	Z+3, r1	; 0x03
    581e:	0a c0       	rjmp	.+20     	; 0x5834 <flash_panel+0x5f6>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    5820:	00 d0       	rcall	.+0      	; 0x5822 <flash_panel+0x5e4>
    5822:	0f 92       	push	r0
    5824:	87 e0       	ldi	r24, 0x07	; 7
    5826:	9d e0       	ldi	r25, 0x0D	; 13
    5828:	ed b7       	in	r30, 0x3d	; 61
    582a:	fe b7       	in	r31, 0x3e	; 62
    582c:	81 83       	std	Z+1, r24	; 0x01
    582e:	92 83       	std	Z+2, r25	; 0x02
    5830:	e3 82       	std	Z+3, r14	; 0x03
    5832:	f4 82       	std	Z+4, r15	; 0x04
    5834:	0e 94 0f 57 	call	0xae1e	; 0xae1e <xprintf>
    5838:	0f 90       	pop	r0
    583a:	0f 90       	pop	r0
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    }
};
    5840:	c0 57       	subi	r28, 0x70	; 112
    5842:	dd 4f       	sbci	r29, 0xFD	; 253
    5844:	e2 e1       	ldi	r30, 0x12	; 18
    5846:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

0000584a <init_all>:
#include "utils.h"

void init_all()
{ 
    584a:	0f 93       	push	r16
    584c:	df 93       	push	r29
    584e:	cf 93       	push	r28
    5850:	0f 92       	push	r0
    5852:	cd b7       	in	r28, 0x3d	; 61
    5854:	de b7       	in	r29, 0x3e	; 62
  ledWrite(LED0, ON);
    5856:	80 e0       	ldi	r24, 0x00	; 0
    5858:	61 e0       	ldi	r22, 0x01	; 1
    585a:	0e 94 06 21 	call	0x420c	; 0x420c <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    585e:	e0 e4       	ldi	r30, 0x40	; 64
    5860:	f6 e0       	ldi	r31, 0x06	; 6
    5862:	88 e0       	ldi	r24, 0x08	; 8
    5864:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    5866:	84 e0       	ldi	r24, 0x04	; 4
    5868:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    586a:	80 e1       	ldi	r24, 0x10	; 16
    586c:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    586e:	90 e2       	ldi	r25, 0x20	; 32
    5870:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    5872:	20 e8       	ldi	r18, 0x80	; 128
    5874:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    5876:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5878:	e0 e6       	ldi	r30, 0x60	; 96
    587a:	f6 e0       	ldi	r31, 0x06	; 6
    587c:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    587e:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    5880:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    5882:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    5884:	80 eb       	ldi	r24, 0xB0	; 176
    5886:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    588a:	e0 e8       	ldi	r30, 0x80	; 128
    588c:	f6 e0       	ldi	r31, 0x06	; 6
    588e:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    5890:	e0 ee       	ldi	r30, 0xE0	; 224
    5892:	f6 e0       	ldi	r31, 0x06	; 6
    5894:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    5896:	80 e4       	ldi	r24, 0x40	; 64
    5898:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    589a:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    589c:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    589e:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    58a0:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    58a2:	80 ef       	ldi	r24, 0xF0	; 240
    58a4:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    58a8:	e0 e0       	ldi	r30, 0x00	; 0
    58aa:	f7 e0       	ldi	r31, 0x07	; 7
    58ac:	84 83       	std	Z+4, r24	; 0x04
/*
  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
*/
  // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);
    58ae:	80 e0       	ldi	r24, 0x00	; 0
    58b0:	60 e0       	ldi	r22, 0x00	; 0
    58b2:	0e 94 53 21 	call	0x42a6	; 0x42a6 <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	60 e0       	ldi	r22, 0x00	; 0
    58ba:	0e 94 53 21 	call	0x42a6	; 0x42a6 <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger laser
    58be:	82 e0       	ldi	r24, 0x02	; 2
    58c0:	60 e0       	ldi	r22, 0x00	; 0
    58c2:	0e 94 53 21 	call	0x42a6	; 0x42a6 <digitalMode>
  digitalMode(3, OUTPUT);     //used to trigger camera
    58c6:	83 e0       	ldi	r24, 0x03	; 3
    58c8:	60 e0       	ldi	r22, 0x00	; 0
    58ca:	0e 94 53 21 	call	0x42a6	; 0x42a6 <digitalMode>
  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    58ce:	e0 e5       	ldi	r30, 0x50	; 80
    58d0:	f0 e0       	ldi	r31, 0x00	; 0
    58d2:	87 e4       	ldi	r24, 0x47	; 71
    58d4:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    58d6:	84 ec       	ldi	r24, 0xC4	; 196
    58d8:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    58da:	88 e1       	ldi	r24, 0x18	; 24
    58dc:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    58e0:	80 91 51 00 	lds	r24, 0x0051
    58e4:	84 ff       	sbrs	r24, 4
    58e6:	fc cf       	rjmp	.-8      	; 0x58e0 <init_all+0x96>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    58e8:	8f b7       	in	r24, 0x3f	; 63
    58ea:	89 83       	std	Y+1, r24	; 0x01
  cli();
    58ec:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    58ee:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    58f0:	24 e0       	ldi	r18, 0x04	; 4
    58f2:	80 e4       	ldi	r24, 0x40	; 64
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	fc 01       	movw	r30, r24
    58f8:	08 ed       	ldi	r16, 0xD8	; 216
    58fa:	04 bf       	out	0x34, r16	; 52
    58fc:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    58fe:	89 81       	ldd	r24, Y+1	; 0x01
    5900:	8f bf       	out	0x3f, r24	; 63
    5902:	88 ee       	ldi	r24, 0xE8	; 232
    5904:	93 e0       	ldi	r25, 0x03	; 3
    5906:	20 e2       	ldi	r18, 0x20	; 32
    5908:	33 e0       	ldi	r19, 0x03	; 3
    590a:	f9 01       	movw	r30, r18
    590c:	31 97       	sbiw	r30, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <init_all+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5910:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5912:	d9 f7       	brne	.-10     	; 0x590a <init_all+0xc0>
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    5914:	e0 e4       	ldi	r30, 0x40	; 64
    5916:	fa e0       	ldi	r31, 0x0A	; 10
    5918:	84 e0       	ldi	r24, 0x04	; 4
    591a:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    591e:	8f e3       	ldi	r24, 0x3F	; 63
    5920:	9c e9       	ldi	r25, 0x9C	; 156
    5922:	86 a3       	std	Z+38, r24	; 0x26
    5924:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    5926:	82 e0       	ldi	r24, 0x02	; 2
    5928:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    592a:	88 e5       	ldi	r24, 0x58	; 88
    592c:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: 0-10v range on ch 0,1,2,3
  PORTC.OUTCLR = PIN4_bm;
    5930:	80 e1       	ldi	r24, 0x10	; 16
    5932:	e0 e4       	ldi	r30, 0x40	; 64
    5934:	f6 e0       	ldi	r31, 0x06	; 6
    5936:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xbf;
    5938:	8f eb       	ldi	r24, 0xBF	; 191
    593a:	e0 ec       	ldi	r30, 0xC0	; 192
    593c:	f8 e0       	ldi	r31, 0x08	; 8
    593e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5940:	80 91 c2 08 	lds	r24, 0x08C2
    5944:	87 ff       	sbrs	r24, 7
    5946:	fc cf       	rjmp	.-8      	; 0x5940 <init_all+0xf6>
  SPIC.DATA = 0xe0;
    5948:	80 ee       	ldi	r24, 0xE0	; 224
    594a:	e0 ec       	ldi	r30, 0xC0	; 192
    594c:	f8 e0       	ldi	r31, 0x08	; 8
    594e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5950:	80 91 c2 08 	lds	r24, 0x08C2
    5954:	87 ff       	sbrs	r24, 7
    5956:	fc cf       	rjmp	.-8      	; 0x5950 <init_all+0x106>
  PORTC.OUTSET = PIN4_bm;
    5958:	e0 e4       	ldi	r30, 0x40	; 64
    595a:	f6 e0       	ldi	r31, 0x06	; 6
    595c:	80 e1       	ldi	r24, 0x10	; 16
    595e:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10V range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    5960:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    5962:	8f ed       	ldi	r24, 0xDF	; 223
    5964:	e0 ec       	ldi	r30, 0xC0	; 192
    5966:	f8 e0       	ldi	r31, 0x08	; 8
    5968:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    596a:	80 91 c2 08 	lds	r24, 0x08C2
    596e:	87 ff       	sbrs	r24, 7
    5970:	fc cf       	rjmp	.-8      	; 0x596a <init_all+0x120>
  SPIC.DATA = 0xe0;
    5972:	80 ee       	ldi	r24, 0xE0	; 224
    5974:	e0 ec       	ldi	r30, 0xC0	; 192
    5976:	f8 e0       	ldi	r31, 0x08	; 8
    5978:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    597a:	80 91 c2 08 	lds	r24, 0x08C2
    597e:	87 ff       	sbrs	r24, 7
    5980:	fc cf       	rjmp	.-8      	; 0x597a <init_all+0x130>
  PORTC.OUTSET = PIN4_bm;
    5982:	e0 e4       	ldi	r30, 0x40	; 64
    5984:	f6 e0       	ldi	r31, 0x06	; 6
    5986:	80 e1       	ldi	r24, 0x10	; 16
    5988:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    598a:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    598c:	80 ee       	ldi	r24, 0xE0	; 224
    598e:	e0 ec       	ldi	r30, 0xC0	; 192
    5990:	f8 e0       	ldi	r31, 0x08	; 8
    5992:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5994:	80 91 c2 08 	lds	r24, 0x08C2
    5998:	87 ff       	sbrs	r24, 7
    599a:	fc cf       	rjmp	.-8      	; 0x5994 <init_all+0x14a>
  SPIC.DATA = 0x00;
    599c:	e0 ec       	ldi	r30, 0xC0	; 192
    599e:	f8 e0       	ldi	r31, 0x08	; 8
    59a0:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    59a2:	80 91 c2 08 	lds	r24, 0x08C2
    59a6:	87 ff       	sbrs	r24, 7
    59a8:	fc cf       	rjmp	.-8      	; 0x59a2 <init_all+0x158>
  PORTC.OUTSET = PIN4_bm;
    59aa:	e0 e4       	ldi	r30, 0x40	; 64
    59ac:	f6 e0       	ldi	r31, 0x06	; 6
    59ae:	80 e1       	ldi	r24, 0x10	; 16
    59b0:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 1, ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    59b2:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    59b4:	80 e8       	ldi	r24, 0x80	; 128
    59b6:	e0 ec       	ldi	r30, 0xC0	; 192
    59b8:	f8 e0       	ldi	r31, 0x08	; 8
    59ba:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    59bc:	80 91 c2 08 	lds	r24, 0x08C2
    59c0:	87 ff       	sbrs	r24, 7
    59c2:	fc cf       	rjmp	.-8      	; 0x59bc <init_all+0x172>
  SPIC.DATA = 0x30;
    59c4:	80 e3       	ldi	r24, 0x30	; 48
    59c6:	e0 ec       	ldi	r30, 0xC0	; 192
    59c8:	f8 e0       	ldi	r31, 0x08	; 8
    59ca:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    59cc:	80 91 c2 08 	lds	r24, 0x08C2
    59d0:	87 ff       	sbrs	r24, 7
    59d2:	fc cf       	rjmp	.-8      	; 0x59cc <init_all+0x182>
  PORTC.OUTSET = PIN4_bm;
    59d4:	90 e1       	ldi	r25, 0x10	; 16
    59d6:	e0 e4       	ldi	r30, 0x40	; 64
    59d8:	f6 e0       	ldi	r31, 0x06	; 6
    59da:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    59dc:	88 e5       	ldi	r24, 0x58	; 88
    59de:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    59e2:	e0 e6       	ldi	r30, 0x60	; 96
    59e4:	f6 e0       	ldi	r31, 0x06	; 6
    59e6:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    59e8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ea:	f9 e0       	ldi	r31, 0x09	; 9
    59ec:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    59ee:	80 91 c2 09 	lds	r24, 0x09C2
    59f2:	87 ff       	sbrs	r24, 7
    59f4:	fc cf       	rjmp	.-8      	; 0x59ee <init_all+0x1a4>
  SPID.DATA = 0x00;
    59f6:	e0 ec       	ldi	r30, 0xC0	; 192
    59f8:	f9 e0       	ldi	r31, 0x09	; 9
    59fa:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    59fc:	80 91 c2 09 	lds	r24, 0x09C2
    5a00:	87 ff       	sbrs	r24, 7
    5a02:	fc cf       	rjmp	.-8      	; 0x59fc <init_all+0x1b2>
  SPID.DATA = 0x1f;
    5a04:	8f e1       	ldi	r24, 0x1F	; 31
    5a06:	e0 ec       	ldi	r30, 0xC0	; 192
    5a08:	f9 e0       	ldi	r31, 0x09	; 9
    5a0a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a0c:	80 91 c2 09 	lds	r24, 0x09C2
    5a10:	87 ff       	sbrs	r24, 7
    5a12:	fc cf       	rjmp	.-8      	; 0x5a0c <init_all+0x1c2>
  PORTD.OUTSET = PIN4_bm;
    5a14:	e0 e6       	ldi	r30, 0x60	; 96
    5a16:	f6 e0       	ldi	r31, 0x06	; 6
    5a18:	80 e1       	ldi	r24, 0x10	; 16
    5a1a:	85 83       	std	Z+5, r24	; 0x05

  // DAC output range register (all ch +/-5V range)
  PORTD.OUTCLR = PIN4_bm;
    5a1c:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    5a1e:	8c e0       	ldi	r24, 0x0C	; 12
    5a20:	e0 ec       	ldi	r30, 0xC0	; 192
    5a22:	f9 e0       	ldi	r31, 0x09	; 9
    5a24:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a26:	80 91 c2 09 	lds	r24, 0x09C2
    5a2a:	87 ff       	sbrs	r24, 7
    5a2c:	fc cf       	rjmp	.-8      	; 0x5a26 <init_all+0x1dc>
  SPID.DATA = 0x00;
    5a2e:	e0 ec       	ldi	r30, 0xC0	; 192
    5a30:	f9 e0       	ldi	r31, 0x09	; 9
    5a32:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a34:	80 91 c2 09 	lds	r24, 0x09C2
    5a38:	87 ff       	sbrs	r24, 7
    5a3a:	fc cf       	rjmp	.-8      	; 0x5a34 <init_all+0x1ea>
  SPID.DATA = 0x03;
    5a3c:	83 e0       	ldi	r24, 0x03	; 3
    5a3e:	e0 ec       	ldi	r30, 0xC0	; 192
    5a40:	f9 e0       	ldi	r31, 0x09	; 9
    5a42:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a44:	80 91 c2 09 	lds	r24, 0x09C2
    5a48:	87 ff       	sbrs	r24, 7
    5a4a:	fc cf       	rjmp	.-8      	; 0x5a44 <init_all+0x1fa>
  PORTD.OUTSET = PIN4_bm;
    5a4c:	80 e1       	ldi	r24, 0x10	; 16
    5a4e:	e0 e6       	ldi	r30, 0x60	; 96
    5a50:	f6 e0       	ldi	r31, 0x06	; 6
    5a52:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    5a54:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <uart_init>
  
  //initialize timer
  timer_init();
    5a58:	0e 94 56 55 	call	0xaaac	; 0xaaac <timer_init>
  
  Handler_Init();
    5a5c:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    5a60:	87 e0       	ldi	r24, 0x07	; 7
    5a62:	e0 ea       	ldi	r30, 0xA0	; 160
    5a64:	f0 e0       	ldi	r31, 0x00	; 0
    5a66:	82 83       	std	Z+2, r24	; 0x02
  sei();
    5a68:	78 94       	sei
}
    5a6a:	0f 90       	pop	r0
    5a6c:	cf 91       	pop	r28
    5a6e:	df 91       	pop	r29
    5a70:	0f 91       	pop	r16
    5a72:	08 95       	ret

00005a74 <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    5a74:	10 92 5d 25 	sts	0x255D, r1
    5a78:	10 92 5e 25 	sts	0x255E, r1
  rxfifo.idx_w = 0;
    5a7c:	10 92 5b 25 	sts	0x255B, r1
    5a80:	10 92 5c 25 	sts	0x255C, r1
  rxfifo.count = 0;
    5a84:	10 92 5f 25 	sts	0x255F, r1
    5a88:	10 92 60 25 	sts	0x2560, r1
  txfifo.idx_r = 0;
    5a8c:	10 92 19 25 	sts	0x2519, r1
  txfifo.idx_w = 0;
    5a90:	10 92 18 25 	sts	0x2518, r1
  txfifo.count = 0;
    5a94:	10 92 1a 25 	sts	0x251A, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    5a98:	e0 ea       	ldi	r30, 0xA0	; 160
    5a9a:	f8 e0       	ldi	r31, 0x08	; 8
    5a9c:	8b e4       	ldi	r24, 0x4B	; 75
    5a9e:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    5aa0:	80 ea       	ldi	r24, 0xA0	; 160
    5aa2:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    5aa4:	80 e1       	ldi	r24, 0x10	; 16
    5aa6:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    5aa8:	83 e0       	ldi	r24, 0x03	; 3
    5aaa:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    5aac:	88 e1       	ldi	r24, 0x18	; 24
    5aae:	84 83       	std	Z+4, r24	; 0x04
}
    5ab0:	08 95       	ret

00005ab2 <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5ab2:	20 91 5f 25 	lds	r18, 0x255F
    5ab6:	30 91 60 25 	lds	r19, 0x2560
}
    5aba:	c9 01       	movw	r24, r18
    5abc:	08 95       	ret

00005abe <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    5abe:	20 91 5d 25 	lds	r18, 0x255D
    5ac2:	30 91 5e 25 	lds	r19, 0x255E
  while(rxfifo.count == 0);
    5ac6:	80 91 5f 25 	lds	r24, 0x255F
    5aca:	90 91 60 25 	lds	r25, 0x2560
    5ace:	89 2b       	or	r24, r25
    5ad0:	d1 f3       	breq	.-12     	; 0x5ac6 <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    5ad2:	e0 91 63 25 	lds	r30, 0x2563
    5ad6:	f0 91 64 25 	lds	r31, 0x2564
    5ada:	e2 0f       	add	r30, r18
    5adc:	f3 1f       	adc	r31, r19
    5ade:	e0 81       	ld	r30, Z
    5ae0:	2f 5f       	subi	r18, 0xFF	; 255
    5ae2:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    5ae4:	f8 94       	cli
  rxfifo.count--;
    5ae6:	80 91 5f 25 	lds	r24, 0x255F
    5aea:	90 91 60 25 	lds	r25, 0x2560
    5aee:	01 97       	sbiw	r24, 0x01	; 1
    5af0:	80 93 5f 25 	sts	0x255F, r24
    5af4:	90 93 60 25 	sts	0x2560, r25
  sei();
    5af8:	78 94       	sei
  if(i >= rxfifo.size)
    5afa:	80 91 61 25 	lds	r24, 0x2561
    5afe:	90 91 62 25 	lds	r25, 0x2562
    5b02:	28 17       	cp	r18, r24
    5b04:	39 07       	cpc	r19, r25
    5b06:	10 f0       	brcs	.+4      	; 0x5b0c <uart_get+0x4e>
    5b08:	20 e0       	ldi	r18, 0x00	; 0
    5b0a:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    5b0c:	20 93 5d 25 	sts	0x255D, r18
    5b10:	30 93 5e 25 	sts	0x255E, r19

  return d;
}
    5b14:	8e 2f       	mov	r24, r30
    5b16:	08 95       	ret

00005b18 <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    5b18:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    5b1a:	90 91 18 25 	lds	r25, 0x2518
  while(txfifo.count >= sizeof(txfifo.buff));
    5b1e:	80 91 1a 25 	lds	r24, 0x251A
    5b22:	80 34       	cpi	r24, 0x40	; 64
    5b24:	e0 f7       	brcc	.-8      	; 0x5b1e <uart_put+0x6>
  txfifo.buff[i++] = d;
    5b26:	e9 2f       	mov	r30, r25
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	e8 5e       	subi	r30, 0xE8	; 232
    5b2c:	fa 4d       	sbci	r31, 0xDA	; 218
    5b2e:	23 83       	std	Z+3, r18	; 0x03
    5b30:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    5b32:	f8 94       	cli
  txfifo.count++;
    5b34:	80 91 1a 25 	lds	r24, 0x251A
    5b38:	8f 5f       	subi	r24, 0xFF	; 255
    5b3a:	80 93 1a 25 	sts	0x251A, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    5b3e:	81 e1       	ldi	r24, 0x11	; 17
    5b40:	e0 ea       	ldi	r30, 0xA0	; 160
    5b42:	f8 e0       	ldi	r31, 0x08	; 8
    5b44:	83 83       	std	Z+3, r24	; 0x03

  sei();
    5b46:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    5b48:	90 34       	cpi	r25, 0x40	; 64
    5b4a:	08 f0       	brcs	.+2      	; 0x5b4e <uart_put+0x36>
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    5b4e:	90 93 18 25 	sts	0x2518, r25
}
    5b52:	08 95       	ret

00005b54 <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    5b54:	cf 93       	push	r28
    5b56:	df 93       	push	r29
    5b58:	ec 01       	movw	r28, r24
    5b5a:	03 c0       	rjmp	.+6      	; 0x5b62 <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    5b5c:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <uart_put>
    s++;
    5b60:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    5b62:	fe 01       	movw	r30, r28
    5b64:	84 91       	lpm	r24, Z+
    5b66:	88 23       	and	r24, r24
    5b68:	c9 f7       	brne	.-14     	; 0x5b5c <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    5b6a:	df 91       	pop	r29
    5b6c:	cf 91       	pop	r28
    5b6e:	08 95       	ret

00005b70 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    5b70:	8d e0       	ldi	r24, 0x0D	; 13
    5b72:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <uart_put>
  uart_put(LF);
    5b76:	8a e0       	ldi	r24, 0x0A	; 10
    5b78:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <uart_put>
}
    5b7c:	08 95       	ret

00005b7e <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    5b7e:	cf 92       	push	r12
    5b80:	df 92       	push	r13
    5b82:	ff 92       	push	r15
    5b84:	0f 93       	push	r16
    5b86:	1f 93       	push	r17
    5b88:	cf 93       	push	r28
    5b8a:	df 93       	push	r29
    5b8c:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5b8e:	80 91 5f 25 	lds	r24, 0x255F
    5b92:	90 91 60 25 	lds	r25, 0x2560
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    5b96:	89 2b       	or	r24, r25
    5b98:	11 f4       	brne	.+4      	; 0x5b9e <fill_Rx_buffer+0x20>
    5b9a:	ff 24       	eor	r15, r15
    5b9c:	3c c0       	rjmp	.+120    	; 0x5c16 <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    5b9e:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <uart_get>
    5ba2:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    5ba4:	82 e3       	ldi	r24, 0x32	; 50
    5ba6:	f8 16       	cp	r15, r24
    5ba8:	29 f0       	breq	.+10     	; 0x5bb4 <fill_Rx_buffer+0x36>
    5baa:	c0 e0       	ldi	r28, 0x00	; 0
    5bac:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5bae:	0f 2d       	mov	r16, r15
    5bb0:	10 e0       	ldi	r17, 0x00	; 0
    5bb2:	2e c0       	rjmp	.+92     	; 0x5c10 <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    5bb4:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <uart_get>
    5bb8:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    5bba:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    5bbe:	38 2f       	mov	r19, r24
    5bc0:	20 e0       	ldi	r18, 0x00	; 0
    5bc2:	c9 01       	movw	r24, r18
    5bc4:	81 0f       	add	r24, r17
    5bc6:	91 1d       	adc	r25, r1
    5bc8:	8c 01       	movw	r16, r24
    5bca:	c0 e0       	ldi	r28, 0x00	; 0
    5bcc:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    5bce:	09 5f       	subi	r16, 0xF9	; 249
    5bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd2:	0d c0       	rjmp	.+26     	; 0x5bee <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5bd4:	80 91 5f 25 	lds	r24, 0x255F
    5bd8:	90 91 60 25 	lds	r25, 0x2560

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    5bdc:	89 2b       	or	r24, r25
    5bde:	d1 f3       	breq	.-12     	; 0x5bd4 <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    5be0:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <uart_get>
    5be4:	f6 01       	movw	r30, r12
    5be6:	ec 0f       	add	r30, r28
    5be8:	fd 1f       	adc	r31, r29
    5bea:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    5bec:	21 96       	adiw	r28, 0x01	; 1
    5bee:	c0 17       	cp	r28, r16
    5bf0:	d1 07       	cpc	r29, r17
    5bf2:	80 f3       	brcs	.-32     	; 0x5bd4 <fill_Rx_buffer+0x56>
    5bf4:	10 c0       	rjmp	.+32     	; 0x5c16 <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5bf6:	80 91 5f 25 	lds	r24, 0x255F
    5bfa:	90 91 60 25 	lds	r25, 0x2560
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    5bfe:	89 2b       	or	r24, r25
    5c00:	d1 f3       	breq	.-12     	; 0x5bf6 <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    5c02:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <uart_get>
    5c06:	f6 01       	movw	r30, r12
    5c08:	ec 0f       	add	r30, r28
    5c0a:	fd 1f       	adc	r31, r29
    5c0c:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5c0e:	21 96       	adiw	r28, 0x01	; 1
    5c10:	c0 17       	cp	r28, r16
    5c12:	d1 07       	cpc	r29, r17
    5c14:	80 f3       	brcs	.-32     	; 0x5bf6 <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    5c16:	8f 2d       	mov	r24, r15
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	df 91       	pop	r29
    5c1c:	cf 91       	pop	r28
    5c1e:	1f 91       	pop	r17
    5c20:	0f 91       	pop	r16
    5c22:	ff 90       	pop	r15
    5c24:	df 90       	pop	r13
    5c26:	cf 90       	pop	r12
    5c28:	08 95       	ret

00005c2a <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
    5c30:	cf 93       	push	r28
    5c32:	df 93       	push	r29
    5c34:	18 2f       	mov	r17, r24
    5c36:	09 2f       	mov	r16, r25
    5c38:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    5c3a:	86 2f       	mov	r24, r22
    5c3c:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <uart_put>
    5c40:	21 2f       	mov	r18, r17
    5c42:	30 2f       	mov	r19, r16
    5c44:	c9 01       	movw	r24, r18
    5c46:	ec 01       	movw	r28, r24
    5c48:	10 e0       	ldi	r17, 0x00	; 0
    5c4a:	04 c0       	rjmp	.+8      	; 0x5c54 <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    5c4c:	89 91       	ld	r24, Y+
    5c4e:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    5c52:	1f 5f       	subi	r17, 0xFF	; 255
    5c54:	1f 15       	cp	r17, r15
    5c56:	d0 f3       	brcs	.-12     	; 0x5c4c <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    5c58:	cd b7       	in	r28, 0x3d	; 61
    5c5a:	de b7       	in	r29, 0x3e	; 62
    5c5c:	e5 e0       	ldi	r30, 0x05	; 5
    5c5e:	0c 94 74 58 	jmp	0xb0e8	; 0xb0e8 <__epilogue_restores__+0x1a>

00005c62 <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    5c62:	1f 92       	push	r1
    5c64:	0f 92       	push	r0
    5c66:	0f b6       	in	r0, 0x3f	; 63
    5c68:	0f 92       	push	r0
    5c6a:	08 b6       	in	r0, 0x38	; 56
    5c6c:	0f 92       	push	r0
    5c6e:	0b b6       	in	r0, 0x3b	; 59
    5c70:	0f 92       	push	r0
    5c72:	11 24       	eor	r1, r1
    5c74:	18 be       	out	0x38, r1	; 56
    5c76:	1b be       	out	0x3b, r1	; 59
    5c78:	2f 93       	push	r18
    5c7a:	3f 93       	push	r19
    5c7c:	4f 93       	push	r20
    5c7e:	8f 93       	push	r24
    5c80:	9f 93       	push	r25
    5c82:	ef 93       	push	r30
    5c84:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    5c86:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    5c8a:	20 91 5f 25 	lds	r18, 0x255F
    5c8e:	30 91 60 25 	lds	r19, 0x2560
  if(n < rxfifo.size) {
    5c92:	80 91 61 25 	lds	r24, 0x2561
    5c96:	90 91 62 25 	lds	r25, 0x2562
    5c9a:	28 17       	cp	r18, r24
    5c9c:	39 07       	cpc	r19, r25
    5c9e:	08 f5       	brcc	.+66     	; 0x5ce2 <__vector_25+0x80>
    rxfifo.count = ++n;
    5ca0:	2f 5f       	subi	r18, 0xFF	; 255
    5ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca4:	20 93 5f 25 	sts	0x255F, r18
    5ca8:	30 93 60 25 	sts	0x2560, r19
    i = rxfifo.idx_w;
    5cac:	80 91 5b 25 	lds	r24, 0x255B
    5cb0:	90 91 5c 25 	lds	r25, 0x255C
    *(rxfifo.PRxBuff + i++) = d;
    5cb4:	e0 91 63 25 	lds	r30, 0x2563
    5cb8:	f0 91 64 25 	lds	r31, 0x2564
    5cbc:	e8 0f       	add	r30, r24
    5cbe:	f9 1f       	adc	r31, r25
    5cc0:	40 83       	st	Z, r20
    5cc2:	9c 01       	movw	r18, r24
    5cc4:	2f 5f       	subi	r18, 0xFF	; 255
    5cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    5cc8:	80 91 61 25 	lds	r24, 0x2561
    5ccc:	90 91 62 25 	lds	r25, 0x2562
    5cd0:	28 17       	cp	r18, r24
    5cd2:	39 07       	cpc	r19, r25
    5cd4:	10 f0       	brcs	.+4      	; 0x5cda <__vector_25+0x78>
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    5cda:	20 93 5b 25 	sts	0x255B, r18
    5cde:	30 93 5c 25 	sts	0x255C, r19
  }
}
    5ce2:	ff 91       	pop	r31
    5ce4:	ef 91       	pop	r30
    5ce6:	9f 91       	pop	r25
    5ce8:	8f 91       	pop	r24
    5cea:	4f 91       	pop	r20
    5cec:	3f 91       	pop	r19
    5cee:	2f 91       	pop	r18
    5cf0:	0f 90       	pop	r0
    5cf2:	0b be       	out	0x3b, r0	; 59
    5cf4:	0f 90       	pop	r0
    5cf6:	08 be       	out	0x38, r0	; 56
    5cf8:	0f 90       	pop	r0
    5cfa:	0f be       	out	0x3f, r0	; 63
    5cfc:	0f 90       	pop	r0
    5cfe:	1f 90       	pop	r1
    5d00:	18 95       	reti

00005d02 <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    5d02:	1f 92       	push	r1
    5d04:	0f 92       	push	r0
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	0f 92       	push	r0
    5d0a:	08 b6       	in	r0, 0x38	; 56
    5d0c:	0f 92       	push	r0
    5d0e:	0b b6       	in	r0, 0x3b	; 59
    5d10:	0f 92       	push	r0
    5d12:	11 24       	eor	r1, r1
    5d14:	18 be       	out	0x38, r1	; 56
    5d16:	1b be       	out	0x3b, r1	; 59
    5d18:	2f 93       	push	r18
    5d1a:	8f 93       	push	r24
    5d1c:	9f 93       	push	r25
    5d1e:	ef 93       	push	r30
    5d20:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    5d22:	80 91 1a 25 	lds	r24, 0x251A
  if(n) {
    5d26:	88 23       	and	r24, r24
    5d28:	a9 f0       	breq	.+42     	; 0x5d54 <__vector_26+0x52>
    txfifo.count = --n;
    5d2a:	28 2f       	mov	r18, r24
    5d2c:	21 50       	subi	r18, 0x01	; 1
    5d2e:	20 93 1a 25 	sts	0x251A, r18
    i = txfifo.idx_r;
    5d32:	80 91 19 25 	lds	r24, 0x2519
    USARTC0.DATA = txfifo.buff[i++];
    5d36:	e8 2f       	mov	r30, r24
    5d38:	f0 e0       	ldi	r31, 0x00	; 0
    5d3a:	e8 5e       	subi	r30, 0xE8	; 232
    5d3c:	fa 4d       	sbci	r31, 0xDA	; 218
    5d3e:	93 81       	ldd	r25, Z+3	; 0x03
    5d40:	90 93 a0 08 	sts	0x08A0, r25
    5d44:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    5d46:	80 34       	cpi	r24, 0x40	; 64
    5d48:	08 f0       	brcs	.+2      	; 0x5d4c <__vector_26+0x4a>
    5d4a:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    5d4c:	80 93 19 25 	sts	0x2519, r24
  }
  if(n == 0)
    5d50:	22 23       	and	r18, r18
    5d52:	21 f4       	brne	.+8      	; 0x5d5c <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    5d54:	80 e1       	ldi	r24, 0x10	; 16
    5d56:	e0 ea       	ldi	r30, 0xA0	; 160
    5d58:	f8 e0       	ldi	r31, 0x08	; 8
    5d5a:	83 83       	std	Z+3, r24	; 0x03
}
    5d5c:	ff 91       	pop	r31
    5d5e:	ef 91       	pop	r30
    5d60:	9f 91       	pop	r25
    5d62:	8f 91       	pop	r24
    5d64:	2f 91       	pop	r18
    5d66:	0f 90       	pop	r0
    5d68:	0b be       	out	0x3b, r0	; 59
    5d6a:	0f 90       	pop	r0
    5d6c:	08 be       	out	0x38, r0	; 56
    5d6e:	0f 90       	pop	r0
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	0f 90       	pop	r0
    5d74:	1f 90       	pop	r1
    5d76:	18 95       	reti

00005d78 <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    5d78:	80 91 63 25 	lds	r24, 0x2563
    5d7c:	90 91 64 25 	lds	r25, 0x2564
    5d80:	0e 94 35 59 	call	0xb26a	; 0xb26a <free>

}
    5d84:	08 95       	ret

00005d86 <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    5d86:	8f 3f       	cpi	r24, 0xFF	; 255
    5d88:	59 f4       	brne	.+22     	; 0x5da0 <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    5d8a:	80 e4       	ldi	r24, 0x40	; 64
    5d8c:	90 e0       	ldi	r25, 0x00	; 0
    5d8e:	0e 94 88 58 	call	0xb110	; 0xb110 <malloc>
    5d92:	80 93 63 25 	sts	0x2563, r24
    5d96:	90 93 64 25 	sts	0x2564, r25
 rxfifo.size = 64;
    5d9a:	80 e4       	ldi	r24, 0x40	; 64
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	0a c0       	rjmp	.+20     	; 0x5db4 <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    5da0:	8e e0       	ldi	r24, 0x0E	; 14
    5da2:	96 e0       	ldi	r25, 0x06	; 6
    5da4:	0e 94 88 58 	call	0xb110	; 0xb110 <malloc>
    5da8:	80 93 63 25 	sts	0x2563, r24
    5dac:	90 93 64 25 	sts	0x2564, r25
 rxfifo.size = 1550;
    5db0:	8e e0       	ldi	r24, 0x0E	; 14
    5db2:	96 e0       	ldi	r25, 0x06	; 6
    5db4:	80 93 61 25 	sts	0x2561, r24
    5db8:	90 93 62 25 	sts	0x2562, r25
    5dbc:	08 95       	ret

00005dbe <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    5dbe:	10 92 c1 2b 	sts	0x2BC1, r1
    5dc2:	10 92 c2 2b 	sts	0x2BC2, r1
    5dc6:	10 92 c3 2b 	sts	0x2BC3, r1
    5dca:	10 92 c4 2b 	sts	0x2BC4, r1
    5dce:	10 92 c5 2b 	sts	0x2BC5, r1
    5dd2:	10 92 c6 2b 	sts	0x2BC6, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    5dd6:	e0 e0       	ldi	r30, 0x00	; 0
    5dd8:	fa e0       	ldi	r31, 0x0A	; 10
    5dda:	82 e0       	ldi	r24, 0x02	; 2
    5ddc:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    5dde:	8f ef       	ldi	r24, 0xFF	; 255
    5de0:	91 e0       	ldi	r25, 0x01	; 1
    5de2:	86 a3       	std	Z+38, r24	; 0x26
    5de4:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    5de6:	83 e0       	ldi	r24, 0x03	; 3
    5de8:	86 83       	std	Z+6, r24	; 0x06
}
    5dea:	08 95       	ret

00005dec <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    5dec:	1f 92       	push	r1
    5dee:	0f 92       	push	r0
    5df0:	0f b6       	in	r0, 0x3f	; 63
    5df2:	0f 92       	push	r0
    5df4:	08 b6       	in	r0, 0x38	; 56
    5df6:	0f 92       	push	r0
    5df8:	09 b6       	in	r0, 0x39	; 57
    5dfa:	0f 92       	push	r0
    5dfc:	0a b6       	in	r0, 0x3a	; 58
    5dfe:	0f 92       	push	r0
    5e00:	0b b6       	in	r0, 0x3b	; 59
    5e02:	0f 92       	push	r0
    5e04:	11 24       	eor	r1, r1
    5e06:	18 be       	out	0x38, r1	; 56
    5e08:	19 be       	out	0x39, r1	; 57
    5e0a:	1a be       	out	0x3a, r1	; 58
    5e0c:	1b be       	out	0x3b, r1	; 59
    5e0e:	ef 92       	push	r14
    5e10:	ff 92       	push	r15
    5e12:	0f 93       	push	r16
    5e14:	1f 93       	push	r17
    5e16:	2f 93       	push	r18
    5e18:	3f 93       	push	r19
    5e1a:	4f 93       	push	r20
    5e1c:	5f 93       	push	r21
    5e1e:	6f 93       	push	r22
    5e20:	7f 93       	push	r23
    5e22:	8f 93       	push	r24
    5e24:	9f 93       	push	r25
    5e26:	af 93       	push	r26
    5e28:	bf 93       	push	r27
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	ef 93       	push	r30
    5e30:	ff 93       	push	r31
    5e32:	97 ec       	ldi	r25, 0xC7	; 199
    5e34:	e9 2e       	mov	r14, r25
    5e36:	9b e2       	ldi	r25, 0x2B	; 43
    5e38:	f9 2e       	mov	r15, r25
    5e3a:	05 eb       	ldi	r16, 0xB5	; 181
    5e3c:	1b e2       	ldi	r17, 0x2B	; 43
    5e3e:	c0 e0       	ldi	r28, 0x00	; 0
    5e40:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    5e42:	fe 01       	movw	r30, r28
    5e44:	ef 53       	subi	r30, 0x3F	; 63
    5e46:	f4 4d       	sbci	r31, 0xD4	; 212
    5e48:	80 81       	ld	r24, Z
    5e4a:	81 30       	cpi	r24, 0x01	; 1
    5e4c:	39 f5       	brne	.+78     	; 0x5e9c <__vector_47+0xb0>
     {
       count[lcv]--;			
    5e4e:	fe 01       	movw	r30, r28
    5e50:	ee 0f       	add	r30, r30
    5e52:	ff 1f       	adc	r31, r31
    5e54:	ee 0f       	add	r30, r30
    5e56:	ff 1f       	adc	r31, r31
    5e58:	e1 52       	subi	r30, 0x21	; 33
    5e5a:	f4 4d       	sbci	r31, 0xD4	; 212
    5e5c:	80 81       	ld	r24, Z
    5e5e:	91 81       	ldd	r25, Z+1	; 0x01
    5e60:	a2 81       	ldd	r26, Z+2	; 0x02
    5e62:	b3 81       	ldd	r27, Z+3	; 0x03
    5e64:	01 97       	sbiw	r24, 0x01	; 1
    5e66:	a1 09       	sbc	r26, r1
    5e68:	b1 09       	sbc	r27, r1
    5e6a:	80 83       	st	Z, r24
    5e6c:	91 83       	std	Z+1, r25	; 0x01
    5e6e:	a2 83       	std	Z+2, r26	; 0x02
    5e70:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    5e72:	80 81       	ld	r24, Z
    5e74:	91 81       	ldd	r25, Z+1	; 0x01
    5e76:	a2 81       	ldd	r26, Z+2	; 0x02
    5e78:	b3 81       	ldd	r27, Z+3	; 0x03
    5e7a:	00 97       	sbiw	r24, 0x00	; 0
    5e7c:	a1 05       	cpc	r26, r1
    5e7e:	b1 05       	cpc	r27, r1
    5e80:	69 f4       	brne	.+26     	; 0x5e9c <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    5e82:	d7 01       	movw	r26, r14
    5e84:	2d 91       	ld	r18, X+
    5e86:	3d 91       	ld	r19, X+
    5e88:	4d 91       	ld	r20, X+
    5e8a:	5c 91       	ld	r21, X
    5e8c:	20 83       	st	Z, r18
    5e8e:	31 83       	std	Z+1, r19	; 0x01
    5e90:	42 83       	std	Z+2, r20	; 0x02
    5e92:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    5e94:	d8 01       	movw	r26, r16
    5e96:	ed 91       	ld	r30, X+
    5e98:	fc 91       	ld	r31, X
    5e9a:	19 95       	eicall
    5e9c:	21 96       	adiw	r28, 0x01	; 1
    5e9e:	84 e0       	ldi	r24, 0x04	; 4
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	e8 0e       	add	r14, r24
    5ea4:	f9 1e       	adc	r15, r25
    5ea6:	0e 5f       	subi	r16, 0xFE	; 254
    5ea8:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    5eaa:	c6 30       	cpi	r28, 0x06	; 6
    5eac:	d1 05       	cpc	r29, r1
    5eae:	49 f6       	brne	.-110    	; 0x5e42 <__vector_47+0x56>
     }
   }



}
    5eb0:	ff 91       	pop	r31
    5eb2:	ef 91       	pop	r30
    5eb4:	df 91       	pop	r29
    5eb6:	cf 91       	pop	r28
    5eb8:	bf 91       	pop	r27
    5eba:	af 91       	pop	r26
    5ebc:	9f 91       	pop	r25
    5ebe:	8f 91       	pop	r24
    5ec0:	7f 91       	pop	r23
    5ec2:	6f 91       	pop	r22
    5ec4:	5f 91       	pop	r21
    5ec6:	4f 91       	pop	r20
    5ec8:	3f 91       	pop	r19
    5eca:	2f 91       	pop	r18
    5ecc:	1f 91       	pop	r17
    5ece:	0f 91       	pop	r16
    5ed0:	ff 90       	pop	r15
    5ed2:	ef 90       	pop	r14
    5ed4:	0f 90       	pop	r0
    5ed6:	0b be       	out	0x3b, r0	; 59
    5ed8:	0f 90       	pop	r0
    5eda:	0a be       	out	0x3a, r0	; 58
    5edc:	0f 90       	pop	r0
    5ede:	09 be       	out	0x39, r0	; 57
    5ee0:	0f 90       	pop	r0
    5ee2:	08 be       	out	0x38, r0	; 56
    5ee4:	0f 90       	pop	r0
    5ee6:	0f be       	out	0x3f, r0	; 63
    5ee8:	0f 90       	pop	r0
    5eea:	1f 90       	pop	r1
    5eec:	18 95       	reti

00005eee <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    5eee:	0f 93       	push	r16
    5ef0:	cf 93       	push	r28
    5ef2:	df 93       	push	r29
    5ef4:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    5ef6:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    5ef8:	fd 01       	movw	r30, r26
    5efa:	ee 0f       	add	r30, r30
    5efc:	ff 1f       	adc	r31, r31
    5efe:	eb 54       	subi	r30, 0x4B	; 75
    5f00:	f4 4d       	sbci	r31, 0xD4	; 212
    5f02:	80 83       	st	Z, r24
    5f04:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    5f06:	fd 01       	movw	r30, r26
    5f08:	ee 0f       	add	r30, r30
    5f0a:	ff 1f       	adc	r31, r31
    5f0c:	ee 0f       	add	r30, r30
    5f0e:	ff 1f       	adc	r31, r31
    5f10:	cf 01       	movw	r24, r30
    5f12:	89 53       	subi	r24, 0x39	; 57
    5f14:	94 4d       	sbci	r25, 0xD4	; 212
    5f16:	ec 01       	movw	r28, r24
    5f18:	48 83       	st	Y, r20
    5f1a:	59 83       	std	Y+1, r21	; 0x01
    5f1c:	6a 83       	std	Y+2, r22	; 0x02
    5f1e:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    5f20:	e1 52       	subi	r30, 0x21	; 33
    5f22:	f4 4d       	sbci	r31, 0xD4	; 212
    5f24:	40 83       	st	Z, r20
    5f26:	51 83       	std	Z+1, r21	; 0x01
    5f28:	62 83       	std	Z+2, r22	; 0x02
    5f2a:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    5f2c:	af 53       	subi	r26, 0x3F	; 63
    5f2e:	b4 4d       	sbci	r27, 0xD4	; 212
    5f30:	0c 93       	st	X, r16
}
    5f32:	df 91       	pop	r29
    5f34:	cf 91       	pop	r28
    5f36:	0f 91       	pop	r16
    5f38:	08 95       	ret

00005f3a <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    5f3a:	0f 93       	push	r16
    5f3c:	cf 93       	push	r28
    5f3e:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    5f40:	c2 2f       	mov	r28, r18
    5f42:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    5f44:	fe 01       	movw	r30, r28
    5f46:	ee 0f       	add	r30, r30
    5f48:	ff 1f       	adc	r31, r31
    5f4a:	eb 54       	subi	r30, 0x4B	; 75
    5f4c:	f4 4d       	sbci	r31, 0xD4	; 212
    5f4e:	80 83       	st	Z, r24
    5f50:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    5f52:	ce 01       	movw	r24, r28
    5f54:	88 0f       	add	r24, r24
    5f56:	99 1f       	adc	r25, r25
    5f58:	88 0f       	add	r24, r24
    5f5a:	99 1f       	adc	r25, r25
    5f5c:	fc 01       	movw	r30, r24
    5f5e:	e9 53       	subi	r30, 0x39	; 57
    5f60:	f4 4d       	sbci	r31, 0xD4	; 212
    5f62:	40 83       	st	Z, r20
    5f64:	51 83       	std	Z+1, r21	; 0x01
    5f66:	62 83       	std	Z+2, r22	; 0x02
    5f68:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	e1 52       	subi	r30, 0x21	; 33
    5f6e:	f4 4d       	sbci	r31, 0xD4	; 212
    5f70:	80 81       	ld	r24, Z
    5f72:	91 81       	ldd	r25, Z+1	; 0x01
    5f74:	a2 81       	ldd	r26, Z+2	; 0x02
    5f76:	b3 81       	ldd	r27, Z+3	; 0x03
    5f78:	48 17       	cp	r20, r24
    5f7a:	59 07       	cpc	r21, r25
    5f7c:	6a 07       	cpc	r22, r26
    5f7e:	7b 07       	cpc	r23, r27
    5f80:	20 f4       	brcc	.+8      	; 0x5f8a <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    5f82:	40 83       	st	Z, r20
    5f84:	51 83       	std	Z+1, r21	; 0x01
    5f86:	62 83       	std	Z+2, r22	; 0x02
    5f88:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    5f8a:	cf 53       	subi	r28, 0x3F	; 63
    5f8c:	d4 4d       	sbci	r29, 0xD4	; 212
    5f8e:	08 83       	st	Y, r16
}
    5f90:	df 91       	pop	r29
    5f92:	cf 91       	pop	r28
    5f94:	0f 91       	pop	r16
    5f96:	08 95       	ret

00005f98 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    5f98:	dc 01       	movw	r26, r24
    5f9a:	fb 01       	movw	r30, r22
	twi->interface = module;
    5f9c:	6d 93       	st	X+, r22
    5f9e:	7c 93       	st	X, r23
    5fa0:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    5fa2:	48 63       	ori	r20, 0x38	; 56
    5fa4:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    5fa6:	ed 91       	ld	r30, X+
    5fa8:	fc 91       	ld	r31, X
    5faa:	11 97       	sbiw	r26, 0x01	; 1
    5fac:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    5fae:	ed 91       	ld	r30, X+
    5fb0:	fc 91       	ld	r31, X
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	84 83       	std	Z+4, r24	; 0x04
}
    5fb6:	08 95       	ret

00005fb8 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    5fb8:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    5fba:	01 90       	ld	r0, Z+
    5fbc:	f0 81       	ld	r31, Z
    5fbe:	e0 2d       	mov	r30, r0
    5fc0:	24 81       	ldd	r18, Z+4	; 0x04
    5fc2:	30 e0       	ldi	r19, 0x00	; 0
    5fc4:	23 70       	andi	r18, 0x03	; 3
    5fc6:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    5fc8:	c9 01       	movw	r24, r18
    5fca:	08 95       	ret

00005fcc <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    5fcc:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    5fce:	85 85       	ldd	r24, Z+13	; 0x0d
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	88 23       	and	r24, r24
    5fd4:	09 f4       	brne	.+2      	; 0x5fd8 <TWI_MasterReady+0xc>
    5fd6:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    5fd8:	89 2f       	mov	r24, r25
    5fda:	08 95       	ret

00005fdc <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    5fdc:	0f 93       	push	r16
    5fde:	cf 93       	push	r28
    5fe0:	df 93       	push	r29
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    5fe6:	17 96       	adiw	r26, 0x07	; 7
    5fe8:	8c 91       	ld	r24, X
    5fea:	17 97       	sbiw	r26, 0x07	; 7
    5fec:	82 17       	cp	r24, r18
    5fee:	08 f4       	brcc	.+2      	; 0x5ff2 <TWI_MasterWriteRead+0x16>
    5ff0:	48 c0       	rjmp	.+144    	; 0x6082 <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    5ff2:	18 96       	adiw	r26, 0x08	; 8
    5ff4:	8c 91       	ld	r24, X
    5ff6:	18 97       	sbiw	r26, 0x08	; 8
    5ff8:	80 17       	cp	r24, r16
    5ffa:	08 f4       	brcc	.+2      	; 0x5ffe <TWI_MasterWriteRead+0x22>
    5ffc:	42 c0       	rjmp	.+132    	; 0x6082 <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    5ffe:	1d 96       	adiw	r26, 0x0d	; 13
    6000:	8c 91       	ld	r24, X
    6002:	1d 97       	sbiw	r26, 0x0d	; 13
    6004:	88 23       	and	r24, r24
    6006:	e9 f5       	brne	.+122    	; 0x6082 <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	1d 96       	adiw	r26, 0x0d	; 13
    600c:	8c 93       	st	X, r24
    600e:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    6010:	1e 96       	adiw	r26, 0x0e	; 14
    6012:	1c 92       	st	X, r1
    6014:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    6016:	66 0f       	add	r22, r22
    6018:	12 96       	adiw	r26, 0x02	; 2
    601a:	6c 93       	st	X, r22
    601c:	12 97       	sbiw	r26, 0x02	; 2
    601e:	ea 01       	movw	r28, r20
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	09 c0       	rjmp	.+18     	; 0x6036 <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    6024:	13 96       	adiw	r26, 0x03	; 3
    6026:	ed 91       	ld	r30, X+
    6028:	fc 91       	ld	r31, X
    602a:	14 97       	sbiw	r26, 0x04	; 4
    602c:	e9 0f       	add	r30, r25
    602e:	f1 1d       	adc	r31, r1
    6030:	89 91       	ld	r24, Y+
    6032:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    6034:	9f 5f       	subi	r25, 0xFF	; 255
    6036:	97 17       	cp	r25, r23
    6038:	a8 f3       	brcs	.-22     	; 0x6024 <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    603a:	19 96       	adiw	r26, 0x09	; 9
    603c:	7c 93       	st	X, r23
    603e:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    6040:	1a 96       	adiw	r26, 0x0a	; 10
    6042:	0c 93       	st	X, r16
    6044:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    6046:	1b 96       	adiw	r26, 0x0b	; 11
    6048:	1c 92       	st	X, r1
    604a:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    604c:	1c 96       	adiw	r26, 0x0c	; 12
    604e:	1c 92       	st	X, r1
    6050:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    6052:	19 96       	adiw	r26, 0x09	; 9
    6054:	8c 91       	ld	r24, X
    6056:	19 97       	sbiw	r26, 0x09	; 9
    6058:	88 23       	and	r24, r24
    605a:	29 f0       	breq	.+10     	; 0x6066 <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    605c:	12 96       	adiw	r26, 0x02	; 2
    605e:	8c 91       	ld	r24, X
    6060:	12 97       	sbiw	r26, 0x02	; 2
    6062:	8e 7f       	andi	r24, 0xFE	; 254
    6064:	09 c0       	rjmp	.+18     	; 0x6078 <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    6066:	1a 96       	adiw	r26, 0x0a	; 10
    6068:	8c 91       	ld	r24, X
    606a:	1a 97       	sbiw	r26, 0x0a	; 10
    606c:	88 23       	and	r24, r24
    606e:	39 f0       	breq	.+14     	; 0x607e <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    6070:	12 96       	adiw	r26, 0x02	; 2
    6072:	8c 91       	ld	r24, X
    6074:	12 97       	sbiw	r26, 0x02	; 2
    6076:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    6078:	ed 91       	ld	r30, X+
    607a:	fc 91       	ld	r31, X
    607c:	86 83       	std	Z+6, r24	; 0x06
    607e:	81 e0       	ldi	r24, 0x01	; 1
    6080:	01 c0       	rjmp	.+2      	; 0x6084 <TWI_MasterWriteRead+0xa8>
    6082:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	0f 91       	pop	r16
    608a:	08 95       	ret

0000608c <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    608c:	0f 93       	push	r16
    608e:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    6090:	40 e0       	ldi	r20, 0x00	; 0
    6092:	50 e0       	ldi	r21, 0x00	; 0
    6094:	20 e0       	ldi	r18, 0x00	; 0
    6096:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
	return twi_status;
}
    609a:	0f 91       	pop	r16
    609c:	08 95       	ret

0000609e <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    609e:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    60a0:	00 e0       	ldi	r16, 0x00	; 0
    60a2:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <TWI_MasterWriteRead>
	return twi_status;
}
    60a6:	0f 91       	pop	r16
    60a8:	08 95       	ret

000060aa <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    60aa:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    60ac:	ed 91       	ld	r30, X+
    60ae:	fc 91       	ld	r31, X
    60b0:	11 97       	sbiw	r26, 0x01	; 1
    60b2:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    60b4:	92 ff       	sbrs	r25, 2
    60b6:	02 c0       	rjmp	.+4      	; 0x60bc <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    60b8:	84 e0       	ldi	r24, 0x04	; 4
    60ba:	01 c0       	rjmp	.+2      	; 0x60be <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    60bc:	83 e0       	ldi	r24, 0x03	; 3
    60be:	1e 96       	adiw	r26, 0x0e	; 14
    60c0:	8c 93       	st	X, r24
    60c2:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    60c4:	ed 91       	ld	r30, X+
    60c6:	fc 91       	ld	r31, X
    60c8:	11 97       	sbiw	r26, 0x01	; 1
    60ca:	98 60       	ori	r25, 0x08	; 8
    60cc:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    60ce:	1d 96       	adiw	r26, 0x0d	; 13
    60d0:	1c 92       	st	X, r1
}
    60d2:	08 95       	ret

000060d4 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    60d4:	cf 93       	push	r28
    60d6:	df 93       	push	r29
    60d8:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    60da:	19 96       	adiw	r26, 0x09	; 9
    60dc:	9c 91       	ld	r25, X
    60de:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    60e0:	1a 96       	adiw	r26, 0x0a	; 10
    60e2:	2c 91       	ld	r18, X
    60e4:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    60e6:	cd 91       	ld	r28, X+
    60e8:	dc 91       	ld	r29, X
    60ea:	11 97       	sbiw	r26, 0x01	; 1
    60ec:	8c 81       	ldd	r24, Y+4	; 0x04
    60ee:	84 ff       	sbrs	r24, 4
    60f0:	04 c0       	rjmp	.+8      	; 0x60fa <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    60f2:	83 e0       	ldi	r24, 0x03	; 3
    60f4:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    60f6:	85 e0       	ldi	r24, 0x05	; 5
    60f8:	24 c0       	rjmp	.+72     	; 0x6142 <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    60fa:	1b 96       	adiw	r26, 0x0b	; 11
    60fc:	8c 91       	ld	r24, X
    60fe:	1b 97       	sbiw	r26, 0x0b	; 11
    6100:	89 17       	cp	r24, r25
    6102:	90 f4       	brcc	.+36     	; 0x6128 <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    6104:	1b 96       	adiw	r26, 0x0b	; 11
    6106:	8c 91       	ld	r24, X
    6108:	1b 97       	sbiw	r26, 0x0b	; 11
    610a:	13 96       	adiw	r26, 0x03	; 3
    610c:	ed 91       	ld	r30, X+
    610e:	fc 91       	ld	r31, X
    6110:	14 97       	sbiw	r26, 0x04	; 4
    6112:	e8 0f       	add	r30, r24
    6114:	f1 1d       	adc	r31, r1
    6116:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    6118:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    611a:	1b 96       	adiw	r26, 0x0b	; 11
    611c:	8c 91       	ld	r24, X
    611e:	1b 97       	sbiw	r26, 0x0b	; 11
    6120:	8f 5f       	subi	r24, 0xFF	; 255
    6122:	1b 96       	adiw	r26, 0x0b	; 11
    6124:	8c 93       	st	X, r24
    6126:	12 c0       	rjmp	.+36     	; 0x614c <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    6128:	1c 96       	adiw	r26, 0x0c	; 12
    612a:	8c 91       	ld	r24, X
    612c:	1c 97       	sbiw	r26, 0x0c	; 12
    612e:	82 17       	cp	r24, r18
    6130:	28 f4       	brcc	.+10     	; 0x613c <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    6132:	12 96       	adiw	r26, 0x02	; 2
    6134:	8c 91       	ld	r24, X
    6136:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    6138:	8e 83       	std	Y+6, r24	; 0x06
    613a:	08 c0       	rjmp	.+16     	; 0x614c <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    613c:	83 e0       	ldi	r24, 0x03	; 3
    613e:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    6140:	81 e0       	ldi	r24, 0x01	; 1
    6142:	1e 96       	adiw	r26, 0x0e	; 14
    6144:	8c 93       	st	X, r24
    6146:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6148:	1d 96       	adiw	r26, 0x0d	; 13
    614a:	1c 92       	st	X, r1
	}
}
    614c:	df 91       	pop	r29
    614e:	cf 91       	pop	r28
    6150:	08 95       	ret

00006152 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    6152:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    6154:	1c 96       	adiw	r26, 0x0c	; 12
    6156:	9c 91       	ld	r25, X
    6158:	1c 97       	sbiw	r26, 0x0c	; 12
    615a:	18 96       	adiw	r26, 0x08	; 8
    615c:	8c 91       	ld	r24, X
    615e:	18 97       	sbiw	r26, 0x08	; 8
    6160:	ed 91       	ld	r30, X+
    6162:	fc 91       	ld	r31, X
    6164:	11 97       	sbiw	r26, 0x01	; 1
    6166:	98 17       	cp	r25, r24
    6168:	98 f4       	brcc	.+38     	; 0x6190 <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    616a:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    616c:	1c 96       	adiw	r26, 0x0c	; 12
    616e:	8c 91       	ld	r24, X
    6170:	1c 97       	sbiw	r26, 0x0c	; 12
    6172:	15 96       	adiw	r26, 0x05	; 5
    6174:	ed 91       	ld	r30, X+
    6176:	fc 91       	ld	r31, X
    6178:	16 97       	sbiw	r26, 0x06	; 6
    617a:	e8 0f       	add	r30, r24
    617c:	f1 1d       	adc	r31, r1
    617e:	90 83       	st	Z, r25
    twi->bytesRead++;
    6180:	1c 96       	adiw	r26, 0x0c	; 12
    6182:	8c 91       	ld	r24, X
    6184:	1c 97       	sbiw	r26, 0x0c	; 12
    6186:	8f 5f       	subi	r24, 0xFF	; 255
    6188:	1c 96       	adiw	r26, 0x0c	; 12
    618a:	8c 93       	st	X, r24
    618c:	1c 97       	sbiw	r26, 0x0c	; 12
    618e:	09 c0       	rjmp	.+18     	; 0x61a2 <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6190:	83 e0       	ldi	r24, 0x03	; 3
    6192:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    6194:	82 e0       	ldi	r24, 0x02	; 2
    6196:	1e 96       	adiw	r26, 0x0e	; 14
    6198:	8c 93       	st	X, r24
    619a:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    619c:	1d 96       	adiw	r26, 0x0d	; 13
    619e:	1c 92       	st	X, r1
    61a0:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    61a2:	1a 96       	adiw	r26, 0x0a	; 10
    61a4:	9c 91       	ld	r25, X
    61a6:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    61a8:	1c 96       	adiw	r26, 0x0c	; 12
    61aa:	8c 91       	ld	r24, X
    61ac:	1c 97       	sbiw	r26, 0x0c	; 12
    61ae:	ed 91       	ld	r30, X+
    61b0:	fc 91       	ld	r31, X
    61b2:	11 97       	sbiw	r26, 0x01	; 1
    61b4:	89 17       	cp	r24, r25
    61b6:	18 f4       	brcc	.+6      	; 0x61be <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    61b8:	82 e0       	ldi	r24, 0x02	; 2
    61ba:	83 83       	std	Z+3, r24	; 0x03
    61bc:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    61be:	87 e0       	ldi	r24, 0x07	; 7
    61c0:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	1e 96       	adiw	r26, 0x0e	; 14
    61c6:	8c 93       	st	X, r24
    61c8:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    61ca:	1d 96       	adiw	r26, 0x0d	; 13
    61cc:	1c 92       	st	X, r1
    61ce:	08 95       	ret

000061d0 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    61d0:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    61d2:	ed 91       	ld	r30, X+
    61d4:	fc 91       	ld	r31, X
    61d6:	11 97       	sbiw	r26, 0x01	; 1
    61d8:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    61da:	24 2f       	mov	r18, r20
    61dc:	30 e0       	ldi	r19, 0x00	; 0
    61de:	c9 01       	movw	r24, r18
    61e0:	8c 70       	andi	r24, 0x0C	; 12
    61e2:	90 70       	andi	r25, 0x00	; 0
    61e4:	89 2b       	or	r24, r25
    61e6:	21 f0       	breq	.+8      	; 0x61f0 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    61e8:	cd 01       	movw	r24, r26
    61ea:	0e 94 55 30 	call	0x60aa	; 0x60aa <TWI_MasterArbitrationLostBusErrorHandler>
    61ee:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    61f0:	46 ff       	sbrs	r20, 6
    61f2:	04 c0       	rjmp	.+8      	; 0x61fc <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    61f4:	cd 01       	movw	r24, r26
    61f6:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <TWI_MasterWriteHandler>
    61fa:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    61fc:	47 ff       	sbrs	r20, 7
    61fe:	04 c0       	rjmp	.+8      	; 0x6208 <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    6200:	cd 01       	movw	r24, r26
    6202:	0e 94 a9 30 	call	0x6152	; 0x6152 <TWI_MasterReadHandler>
    6206:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    6208:	86 e0       	ldi	r24, 0x06	; 6
    620a:	1e 96       	adiw	r26, 0x0e	; 14
    620c:	8c 93       	st	X, r24
    620e:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    6210:	1d 96       	adiw	r26, 0x0d	; 13
    6212:	1c 92       	st	X, r1
    6214:	08 95       	ret

00006216 <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    6216:	0f 93       	push	r16
    6218:	1f 93       	push	r17
    621a:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    621c:	fc 01       	movw	r30, r24
    621e:	85 81       	ldd	r24, Z+5	; 0x05
    6220:	96 81       	ldd	r25, Z+6	; 0x06
    6222:	0e 94 35 59 	call	0xb26a	; 0xb26a <free>
 free(twi->PwriteData);
    6226:	f8 01       	movw	r30, r16
    6228:	83 81       	ldd	r24, Z+3	; 0x03
    622a:	94 81       	ldd	r25, Z+4	; 0x04
    622c:	0e 94 35 59 	call	0xb26a	; 0xb26a <free>
}
    6230:	1f 91       	pop	r17
    6232:	0f 91       	pop	r16
    6234:	08 95       	ret

00006236 <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    6236:	cf 93       	push	r28
    6238:	df 93       	push	r29
    623a:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    623c:	6f 3f       	cpi	r22, 0xFF	; 255
    623e:	79 f4       	brne	.+30     	; 0x625e <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    6240:	88 e8       	ldi	r24, 0x88	; 136
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	0e 94 88 58 	call	0xb110	; 0xb110 <malloc>
    6248:	8d 83       	std	Y+5, r24	; 0x05
    624a:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    624c:	88 e8       	ldi	r24, 0x88	; 136
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 88 58 	call	0xb110	; 0xb110 <malloc>
    6254:	8b 83       	std	Y+3, r24	; 0x03
    6256:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    6258:	88 e8       	ldi	r24, 0x88	; 136
    625a:	8f 83       	std	Y+7, r24	; 0x07
    625c:	0f c0       	rjmp	.+30     	; 0x627c <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    625e:	8e e1       	ldi	r24, 0x1E	; 30
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	0e 94 88 58 	call	0xb110	; 0xb110 <malloc>
    6266:	8d 83       	std	Y+5, r24	; 0x05
    6268:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    626a:	82 e3       	ldi	r24, 0x32	; 50
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	0e 94 88 58 	call	0xb110	; 0xb110 <malloc>
    6272:	8b 83       	std	Y+3, r24	; 0x03
    6274:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    6276:	84 e6       	ldi	r24, 0x64	; 100
    6278:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    627a:	82 e3       	ldi	r24, 0x32	; 50
    627c:	88 87       	std	Y+8, r24	; 0x08
 }
}
    627e:	df 91       	pop	r29
    6280:	cf 91       	pop	r28
    6282:	08 95       	ret

00006284 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    6284:	0f 93       	push	r16
    6286:	1f 93       	push	r17
    6288:	cf 93       	push	r28
    628a:	df 93       	push	r29
    628c:	fc 01       	movw	r30, r24
    628e:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    6290:	eb 01       	movw	r28, r22
    6292:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    6294:	86 85       	ldd	r24, Z+14	; 0x0e
    6296:	97 85       	ldd	r25, Z+15	; 0x0f
    6298:	a0 89       	ldd	r26, Z+16	; 0x10
    629a:	b1 89       	ldd	r27, Z+17	; 0x11
    629c:	00 97       	sbiw	r24, 0x00	; 0
    629e:	a1 05       	cpc	r26, r1
    62a0:	b1 05       	cpc	r27, r1
    62a2:	09 f4       	brne	.+2      	; 0x62a6 <get_fileinfo+0x22>
    62a4:	63 c0       	rjmp	.+198    	; 0x636c <get_fileinfo+0xe8>
		dir = dj->dir;
    62a6:	22 89       	ldd	r18, Z+18	; 0x12
    62a8:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    62aa:	d9 01       	movw	r26, r18
    62ac:	1c 96       	adiw	r26, 0x0c	; 12
    62ae:	9c 91       	ld	r25, X
    62b0:	40 e0       	ldi	r20, 0x00	; 0
    62b2:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    62b4:	69 2f       	mov	r22, r25
    62b6:	70 e0       	ldi	r23, 0x00	; 0
    62b8:	68 70       	andi	r22, 0x08	; 8
    62ba:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    62bc:	f9 01       	movw	r30, r18
    62be:	e4 0f       	add	r30, r20
    62c0:	f5 1f       	adc	r31, r21
    62c2:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    62c4:	e0 32       	cpi	r30, 0x20	; 32
    62c6:	89 f0       	breq	.+34     	; 0x62ea <get_fileinfo+0x66>
			if (c == 0x05) c = 0xE5;
    62c8:	e5 30       	cpi	r30, 0x05	; 5
    62ca:	09 f4       	brne	.+2      	; 0x62ce <get_fileinfo+0x4a>
    62cc:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    62ce:	61 15       	cp	r22, r1
    62d0:	71 05       	cpc	r23, r1
    62d2:	29 f0       	breq	.+10     	; 0x62de <get_fileinfo+0x5a>
    62d4:	8e 2f       	mov	r24, r30
    62d6:	81 54       	subi	r24, 0x41	; 65
    62d8:	8a 31       	cpi	r24, 0x1A	; 26
    62da:	08 f4       	brcc	.+2      	; 0x62de <get_fileinfo+0x5a>
    62dc:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    62de:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    62e0:	4f 5f       	subi	r20, 0xFF	; 255
    62e2:	5f 4f       	sbci	r21, 0xFF	; 255
    62e4:	48 30       	cpi	r20, 0x08	; 8
    62e6:	51 05       	cpc	r21, r1
    62e8:	49 f7       	brne	.-46     	; 0x62bc <get_fileinfo+0x38>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    62ea:	f9 01       	movw	r30, r18
    62ec:	80 85       	ldd	r24, Z+8	; 0x08
    62ee:	80 32       	cpi	r24, 0x20	; 32
    62f0:	11 f4       	brne	.+4      	; 0x62f6 <get_fileinfo+0x72>
    62f2:	fe 01       	movw	r30, r28
    62f4:	1d c0       	rjmp	.+58     	; 0x6330 <get_fileinfo+0xac>
			*p++ = '.';
    62f6:	fe 01       	movw	r30, r28
    62f8:	8e e2       	ldi	r24, 0x2E	; 46
    62fa:	81 93       	st	Z+, r24
    62fc:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    62fe:	49 2f       	mov	r20, r25
    6300:	50 e0       	ldi	r21, 0x00	; 0
    6302:	40 71       	andi	r20, 0x10	; 16
    6304:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    6306:	be 01       	movw	r22, r28
    6308:	6c 5f       	subi	r22, 0xFC	; 252
    630a:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    630c:	18 96       	adiw	r26, 0x08	; 8
    630e:	9c 91       	ld	r25, X
    6310:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    6312:	90 32       	cpi	r25, 0x20	; 32
    6314:	69 f0       	breq	.+26     	; 0x6330 <get_fileinfo+0xac>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    6316:	41 15       	cp	r20, r1
    6318:	51 05       	cpc	r21, r1
    631a:	29 f0       	breq	.+10     	; 0x6326 <get_fileinfo+0xa2>
    631c:	89 2f       	mov	r24, r25
    631e:	81 54       	subi	r24, 0x41	; 65
    6320:	8a 31       	cpi	r24, 0x1A	; 26
    6322:	08 f4       	brcc	.+2      	; 0x6326 <get_fileinfo+0xa2>
    6324:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    6326:	91 93       	st	Z+, r25
    6328:	11 96       	adiw	r26, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    632a:	e6 17       	cp	r30, r22
    632c:	f7 07       	cpc	r31, r23
    632e:	71 f7       	brne	.-36     	; 0x630c <get_fileinfo+0x88>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    6330:	d9 01       	movw	r26, r18
    6332:	1b 96       	adiw	r26, 0x0b	; 11
    6334:	8c 91       	ld	r24, X
    6336:	1b 97       	sbiw	r26, 0x0b	; 11
    6338:	e8 01       	movw	r28, r16
    633a:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    633c:	5c 96       	adiw	r26, 0x1c	; 28
    633e:	8d 91       	ld	r24, X+
    6340:	9d 91       	ld	r25, X+
    6342:	0d 90       	ld	r0, X+
    6344:	bc 91       	ld	r27, X
    6346:	a0 2d       	mov	r26, r0
    6348:	88 83       	st	Y, r24
    634a:	99 83       	std	Y+1, r25	; 0x01
    634c:	aa 83       	std	Y+2, r26	; 0x02
    634e:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    6350:	d9 01       	movw	r26, r18
    6352:	58 96       	adiw	r26, 0x18	; 24
    6354:	8d 91       	ld	r24, X+
    6356:	9c 91       	ld	r25, X
    6358:	59 97       	sbiw	r26, 0x19	; 25
    635a:	8c 83       	std	Y+4, r24	; 0x04
    635c:	9d 83       	std	Y+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    635e:	56 96       	adiw	r26, 0x16	; 22
    6360:	8d 91       	ld	r24, X+
    6362:	9c 91       	ld	r25, X
    6364:	57 97       	sbiw	r26, 0x17	; 23
    6366:	8e 83       	std	Y+6, r24	; 0x06
    6368:	9f 83       	std	Y+7, r25	; 0x07
    636a:	ef 01       	movw	r28, r30
	}
	*p = 0;
    636c:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    636e:	df 91       	pop	r29
    6370:	cf 91       	pop	r28
    6372:	1f 91       	pop	r17
    6374:	0f 91       	pop	r16
    6376:	08 95       	ret

00006378 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    6378:	cf 93       	push	r28
    637a:	df 93       	push	r29
    637c:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    637e:	82 30       	cpi	r24, 0x02	; 2
    6380:	18 f0       	brcs	.+6      	; 0x6388 <f_mount+0x10>
    6382:	2b e0       	ldi	r18, 0x0B	; 11
    6384:	30 e0       	ldi	r19, 0x00	; 0
    6386:	18 c0       	rjmp	.+48     	; 0x63b8 <f_mount+0x40>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    6388:	a8 2f       	mov	r26, r24
    638a:	b0 e0       	ldi	r27, 0x00	; 0
    638c:	fd 01       	movw	r30, r26
    638e:	ee 0f       	add	r30, r30
    6390:	ff 1f       	adc	r31, r31
    6392:	eb 59       	subi	r30, 0x9B	; 155
    6394:	fa 4d       	sbci	r31, 0xDA	; 218
    6396:	01 90       	ld	r0, Z+
    6398:	f0 81       	ld	r31, Z
    639a:	e0 2d       	mov	r30, r0

	if (rfs) {
    639c:	30 97       	sbiw	r30, 0x00	; 0
    639e:	09 f0       	breq	.+2      	; 0x63a2 <f_mount+0x2a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    63a0:	10 82       	st	Z, r1
	}

	if (fs) {
    63a2:	20 97       	sbiw	r28, 0x00	; 0
    63a4:	09 f0       	breq	.+2      	; 0x63a8 <f_mount+0x30>
		fs->fs_type = 0;			/* Clear new fs object */
    63a6:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    63a8:	aa 0f       	add	r26, r26
    63aa:	bb 1f       	adc	r27, r27
    63ac:	ab 59       	subi	r26, 0x9B	; 155
    63ae:	ba 4d       	sbci	r27, 0xDA	; 218
    63b0:	cd 93       	st	X+, r28
    63b2:	dc 93       	st	X, r29
    63b4:	20 e0       	ldi	r18, 0x00	; 0
    63b6:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    63b8:	c9 01       	movw	r24, r18
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	08 95       	ret

000063c0 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    63c0:	82 30       	cpi	r24, 0x02	; 2
    63c2:	18 f0       	brcs	.+6      	; 0x63ca <f_chdrive+0xa>
    63c4:	2b e0       	ldi	r18, 0x0B	; 11
    63c6:	30 e0       	ldi	r19, 0x00	; 0
    63c8:	04 c0       	rjmp	.+8      	; 0x63d2 <f_chdrive+0x12>

	Drive = drv;
    63ca:	80 93 6b 25 	sts	0x256B, r24
    63ce:	20 e0       	ldi	r18, 0x00	; 0
    63d0:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    63d2:	c9 01       	movw	r24, r18
    63d4:	08 95       	ret

000063d6 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    63d6:	a5 e2       	ldi	r26, 0x25	; 37
    63d8:	b0 e0       	ldi	r27, 0x00	; 0
    63da:	e1 ef       	ldi	r30, 0xF1	; 241
    63dc:	f1 e3       	ldi	r31, 0x31	; 49
    63de:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    63e2:	38 2e       	mov	r3, r24
    63e4:	26 2e       	mov	r2, r22
    63e6:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    63e8:	21 e0       	ldi	r18, 0x01	; 1
    63ea:	28 17       	cp	r18, r24
    63ec:	18 f4       	brcc	.+6      	; 0x63f4 <f_mkfs+0x1e>
    63ee:	2b e0       	ldi	r18, 0x0B	; 11
    63f0:	30 e0       	ldi	r19, 0x00	; 0
    63f2:	58 c4       	rjmp	.+2224   	; 0x6ca4 <f_mkfs+0x8ce>
	if (partition >= 2) return FR_MKFS_ABORTED;
    63f4:	31 e0       	ldi	r19, 0x01	; 1
    63f6:	36 17       	cp	r19, r22
    63f8:	08 f4       	brcc	.+2      	; 0x63fc <f_mkfs+0x26>
    63fa:	4f c4       	rjmp	.+2206   	; 0x6c9a <f_mkfs+0x8c4>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    63fc:	e8 2f       	mov	r30, r24
    63fe:	f0 e0       	ldi	r31, 0x00	; 0
    6400:	ee 0f       	add	r30, r30
    6402:	ff 1f       	adc	r31, r31
    6404:	eb 59       	subi	r30, 0x9B	; 155
    6406:	fa 4d       	sbci	r31, 0xDA	; 218
    6408:	80 80       	ld	r8, Z
    640a:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    640c:	81 14       	cp	r8, r1
    640e:	91 04       	cpc	r9, r1
    6410:	19 f4       	brne	.+6      	; 0x6418 <f_mkfs+0x42>
    6412:	2c e0       	ldi	r18, 0x0C	; 12
    6414:	30 e0       	ldi	r19, 0x00	; 0
    6416:	46 c4       	rjmp	.+2188   	; 0x6ca4 <f_mkfs+0x8ce>
	fs->fs_type = 0;
    6418:	d4 01       	movw	r26, r8
    641a:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    641c:	0e 94 24 54 	call	0xa848	; 0xa848 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    6420:	80 ff       	sbrs	r24, 0
    6422:	03 c0       	rjmp	.+6      	; 0x642a <f_mkfs+0x54>
    6424:	23 e0       	ldi	r18, 0x03	; 3
    6426:	30 e0       	ldi	r19, 0x00	; 0
    6428:	3d c4       	rjmp	.+2170   	; 0x6ca4 <f_mkfs+0x8ce>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    642a:	82 ff       	sbrs	r24, 2
    642c:	03 c0       	rjmp	.+6      	; 0x6434 <f_mkfs+0x5e>
    642e:	2a e0       	ldi	r18, 0x0A	; 10
    6430:	30 e0       	ldi	r19, 0x00	; 0
    6432:	38 c4       	rjmp	.+2160   	; 0x6ca4 <f_mkfs+0x8ce>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    6434:	83 2d       	mov	r24, r3
    6436:	61 e0       	ldi	r22, 0x01	; 1
    6438:	ae 01       	movw	r20, r28
    643a:	4f 5f       	subi	r20, 0xFF	; 255
    643c:	5f 4f       	sbci	r21, 0xFF	; 255
    643e:	0e 94 18 52 	call	0xa430	; 0xa430 <disk_ioctl>
    6442:	89 2b       	or	r24, r25
    6444:	09 f0       	breq	.+2      	; 0x6448 <f_mkfs+0x72>
    6446:	29 c4       	rjmp	.+2130   	; 0x6c9a <f_mkfs+0x8c4>
    6448:	89 81       	ldd	r24, Y+1	; 0x01
    644a:	9a 81       	ldd	r25, Y+2	; 0x02
    644c:	ab 81       	ldd	r26, Y+3	; 0x03
    644e:	bc 81       	ldd	r27, Y+4	; 0x04
    6450:	80 3d       	cpi	r24, 0xD0	; 208
    6452:	e7 e0       	ldi	r30, 0x07	; 7
    6454:	9e 07       	cpc	r25, r30
    6456:	e0 e0       	ldi	r30, 0x00	; 0
    6458:	ae 07       	cpc	r26, r30
    645a:	e0 e0       	ldi	r30, 0x00	; 0
    645c:	be 07       	cpc	r27, r30
    645e:	08 f4       	brcc	.+2      	; 0x6462 <f_mkfs+0x8c>
    6460:	1c c4       	rjmp	.+2104   	; 0x6c9a <f_mkfs+0x8c4>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    6462:	81 50       	subi	r24, 0x01	; 1
    6464:	90 40       	sbci	r25, 0x00	; 0
    6466:	a0 4d       	sbci	r26, 0xD0	; 208
    6468:	b7 40       	sbci	r27, 0x07	; 7
    646a:	40 f0       	brcs	.+16     	; 0x647c <f_mkfs+0xa6>
    646c:	80 e0       	ldi	r24, 0x00	; 0
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	a0 ed       	ldi	r26, 0xD0	; 208
    6472:	b7 e0       	ldi	r27, 0x07	; 7
    6474:	89 83       	std	Y+1, r24	; 0x01
    6476:	9a 83       	std	Y+2, r25	; 0x02
    6478:	ab 83       	std	Y+3, r26	; 0x03
    647a:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    647c:	22 20       	and	r2, r2
    647e:	29 f0       	breq	.+10     	; 0x648a <f_mkfs+0xb4>
    6480:	1b 8e       	std	Y+27, r1	; 0x1b
    6482:	1c 8e       	std	Y+28, r1	; 0x1c
    6484:	1d 8e       	std	Y+29, r1	; 0x1d
    6486:	1e 8e       	std	Y+30, r1	; 0x1e
    6488:	08 c0       	rjmp	.+16     	; 0x649a <f_mkfs+0xc4>
    648a:	2f e3       	ldi	r18, 0x3F	; 63
    648c:	30 e0       	ldi	r19, 0x00	; 0
    648e:	40 e0       	ldi	r20, 0x00	; 0
    6490:	50 e0       	ldi	r21, 0x00	; 0
    6492:	2b 8f       	std	Y+27, r18	; 0x1b
    6494:	3c 8f       	std	Y+28, r19	; 0x1c
    6496:	4d 8f       	std	Y+29, r20	; 0x1d
    6498:	5e 8f       	std	Y+30, r21	; 0x1e
	n_part -= b_part;
    649a:	a9 80       	ldd	r10, Y+1	; 0x01
    649c:	ba 80       	ldd	r11, Y+2	; 0x02
    649e:	cb 80       	ldd	r12, Y+3	; 0x03
    64a0:	dc 80       	ldd	r13, Y+4	; 0x04
    64a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64a6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    64a8:	be 8d       	ldd	r27, Y+30	; 0x1e
    64aa:	a8 1a       	sub	r10, r24
    64ac:	b9 0a       	sbc	r11, r25
    64ae:	ca 0a       	sbc	r12, r26
    64b0:	db 0a       	sbc	r13, r27
    64b2:	80 e0       	ldi	r24, 0x00	; 0
    64b4:	92 e0       	ldi	r25, 0x02	; 2
    64b6:	a0 e0       	ldi	r26, 0x00	; 0
    64b8:	b0 e0       	ldi	r27, 0x00	; 0
    64ba:	20 e0       	ldi	r18, 0x00	; 0
    64bc:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    64be:	a8 01       	movw	r20, r16
    64c0:	60 e0       	ldi	r22, 0x00	; 0
    64c2:	70 e0       	ldi	r23, 0x00	; 0
    64c4:	09 c0       	rjmp	.+18     	; 0x64d8 <f_mkfs+0x102>
    64c6:	88 0f       	add	r24, r24
    64c8:	99 1f       	adc	r25, r25
    64ca:	aa 1f       	adc	r26, r26
    64cc:	bb 1f       	adc	r27, r27
    64ce:	2f 5f       	subi	r18, 0xFF	; 255
    64d0:	3f 4f       	sbci	r19, 0xFF	; 255
    64d2:	27 30       	cpi	r18, 0x07	; 7
    64d4:	31 05       	cpc	r19, r1
    64d6:	31 f0       	breq	.+12     	; 0x64e4 <f_mkfs+0x10e>
    64d8:	84 17       	cp	r24, r20
    64da:	95 07       	cpc	r25, r21
    64dc:	a6 07       	cpc	r26, r22
    64de:	b7 07       	cpc	r27, r23
    64e0:	91 f7       	brne	.-28     	; 0x64c6 <f_mkfs+0xf0>
    64e2:	05 c0       	rjmp	.+10     	; 0x64ee <f_mkfs+0x118>
	if (d != allocsize) allocsize = 0;
    64e4:	84 17       	cp	r24, r20
    64e6:	95 07       	cpc	r25, r21
    64e8:	a6 07       	cpc	r26, r22
    64ea:	b7 07       	cpc	r27, r23
    64ec:	19 f4       	brne	.+6      	; 0x64f4 <f_mkfs+0x11e>
	if (!allocsize) {					/* Auto selection of cluster size */
    64ee:	01 15       	cp	r16, r1
    64f0:	11 05       	cpc	r17, r1
    64f2:	11 f5       	brne	.+68     	; 0x6538 <f_mkfs+0x162>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    64f4:	e9 e2       	ldi	r30, 0x29	; 41
    64f6:	f4 e2       	ldi	r31, 0x24	; 36
    64f8:	20 e0       	ldi	r18, 0x00	; 0
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	40 e0       	ldi	r20, 0x00	; 0
    64fe:	50 e0       	ldi	r21, 0x00	; 0
    6500:	81 91       	ld	r24, Z+
    6502:	91 91       	ld	r25, Z+
    6504:	a1 91       	ld	r26, Z+
    6506:	b1 91       	ld	r27, Z+
    6508:	b9 01       	movw	r22, r18
    650a:	14 2f       	mov	r17, r20
    650c:	05 2f       	mov	r16, r21
    650e:	2f 5f       	subi	r18, 0xFF	; 255
    6510:	3f 4f       	sbci	r19, 0xFF	; 255
    6512:	4f 4f       	sbci	r20, 0xFF	; 255
    6514:	5f 4f       	sbci	r21, 0xFF	; 255
    6516:	a8 16       	cp	r10, r24
    6518:	b9 06       	cpc	r11, r25
    651a:	ca 06       	cpc	r12, r26
    651c:	db 06       	cpc	r13, r27
    651e:	80 f3       	brcs	.-32     	; 0x6500 <f_mkfs+0x12a>
    6520:	cb 01       	movw	r24, r22
    6522:	6d 83       	std	Y+5, r22	; 0x05
    6524:	9e 83       	std	Y+6, r25	; 0x06
    6526:	1f 83       	std	Y+7, r17	; 0x07
    6528:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    652a:	fb 01       	movw	r30, r22
    652c:	ee 0f       	add	r30, r30
    652e:	ff 1f       	adc	r31, r31
    6530:	ed 5e       	subi	r30, 0xED	; 237
    6532:	fb 4d       	sbci	r31, 0xDB	; 219
    6534:	00 81       	ld	r16, Z
    6536:	11 81       	ldd	r17, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    6538:	92 e0       	ldi	r25, 0x02	; 2
    653a:	00 30       	cpi	r16, 0x00	; 0
    653c:	19 07       	cpc	r17, r25
    653e:	10 f4       	brcc	.+4      	; 0x6544 <f_mkfs+0x16e>
    6540:	00 e0       	ldi	r16, 0x00	; 0
    6542:	12 e0       	ldi	r17, 0x02	; 2

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    6544:	d8 01       	movw	r26, r16
    6546:	ab 2f       	mov	r26, r27
    6548:	bb 27       	eor	r27, r27
    654a:	a6 95       	lsr	r26
    654c:	ad 8b       	std	Y+21, r26	; 0x15
    654e:	be 8b       	std	Y+22, r27	; 0x16

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    6550:	9d 01       	movw	r18, r26
    6552:	40 e0       	ldi	r20, 0x00	; 0
    6554:	50 e0       	ldi	r21, 0x00	; 0
    6556:	29 8b       	std	Y+17, r18	; 0x11
    6558:	3a 8b       	std	Y+18, r19	; 0x12
    655a:	4b 8b       	std	Y+19, r20	; 0x13
    655c:	5c 8b       	std	Y+20, r21	; 0x14
    655e:	c6 01       	movw	r24, r12
    6560:	b5 01       	movw	r22, r10
    6562:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    6566:	c9 01       	movw	r24, r18
    6568:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    656a:	85 3f       	cpi	r24, 0xF5	; 245
    656c:	5f e0       	ldi	r21, 0x0F	; 15
    656e:	95 07       	cpc	r25, r21
    6570:	50 e0       	ldi	r21, 0x00	; 0
    6572:	a5 07       	cpc	r26, r21
    6574:	50 e0       	ldi	r21, 0x00	; 0
    6576:	b5 07       	cpc	r27, r21
    6578:	08 f4       	brcc	.+2      	; 0x657c <f_mkfs+0x1a6>
    657a:	99 c3       	rjmp	.+1842   	; 0x6cae <f_mkfs+0x8d8>
    657c:	22 2d       	mov	r18, r2
    657e:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    6580:	85 3f       	cpi	r24, 0xF5	; 245
    6582:	ef ef       	ldi	r30, 0xFF	; 255
    6584:	9e 07       	cpc	r25, r30
    6586:	e0 e0       	ldi	r30, 0x00	; 0
    6588:	ae 07       	cpc	r26, r30
    658a:	e0 e0       	ldi	r30, 0x00	; 0
    658c:	be 07       	cpc	r27, r30
    658e:	30 f5       	brcc	.+76     	; 0x65dc <f_mkfs+0x206>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    6590:	7c 01       	movw	r14, r24
    6592:	8d 01       	movw	r16, r26
    6594:	ee 0c       	add	r14, r14
    6596:	ff 1c       	adc	r15, r15
    6598:	00 1f       	adc	r16, r16
    659a:	11 1f       	adc	r17, r17
    659c:	83 e0       	ldi	r24, 0x03	; 3
    659e:	92 e0       	ldi	r25, 0x02	; 2
    65a0:	a0 e0       	ldi	r26, 0x00	; 0
    65a2:	b0 e0       	ldi	r27, 0x00	; 0
    65a4:	e8 0e       	add	r14, r24
    65a6:	f9 1e       	adc	r15, r25
    65a8:	0a 1f       	adc	r16, r26
    65aa:	1b 1f       	adc	r17, r27
    65ac:	f9 e0       	ldi	r31, 0x09	; 9
    65ae:	16 95       	lsr	r17
    65b0:	07 95       	ror	r16
    65b2:	f7 94       	ror	r15
    65b4:	e7 94       	ror	r14
    65b6:	fa 95       	dec	r31
    65b8:	d1 f7       	brne	.-12     	; 0x65ae <f_mkfs+0x1d8>
		n_rsv = 1 + partition;
    65ba:	2f 5f       	subi	r18, 0xFF	; 255
    65bc:	3f 4f       	sbci	r19, 0xFF	; 255
    65be:	29 01       	movw	r4, r18
    65c0:	66 24       	eor	r6, r6
    65c2:	57 fc       	sbrc	r5, 7
    65c4:	60 94       	com	r6
    65c6:	76 2c       	mov	r7, r6
    65c8:	20 e2       	ldi	r18, 0x20	; 32
    65ca:	30 e0       	ldi	r19, 0x00	; 0
    65cc:	40 e0       	ldi	r20, 0x00	; 0
    65ce:	50 e0       	ldi	r21, 0x00	; 0
    65d0:	2f 8b       	std	Y+23, r18	; 0x17
    65d2:	38 8f       	std	Y+24, r19	; 0x18
    65d4:	49 8f       	std	Y+25, r20	; 0x19
    65d6:	5a 8f       	std	Y+26, r21	; 0x1a
    65d8:	32 e0       	ldi	r19, 0x02	; 2
    65da:	9c c3       	rjmp	.+1848   	; 0x6d14 <f_mkfs+0x93e>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    65dc:	7c 01       	movw	r14, r24
    65de:	8d 01       	movw	r16, r26
    65e0:	e2 e0       	ldi	r30, 0x02	; 2
    65e2:	ee 0c       	add	r14, r14
    65e4:	ff 1c       	adc	r15, r15
    65e6:	00 1f       	adc	r16, r16
    65e8:	11 1f       	adc	r17, r17
    65ea:	ea 95       	dec	r30
    65ec:	d1 f7       	brne	.-12     	; 0x65e2 <f_mkfs+0x20c>
    65ee:	87 e0       	ldi	r24, 0x07	; 7
    65f0:	92 e0       	ldi	r25, 0x02	; 2
    65f2:	a0 e0       	ldi	r26, 0x00	; 0
    65f4:	b0 e0       	ldi	r27, 0x00	; 0
    65f6:	e8 0e       	add	r14, r24
    65f8:	f9 1e       	adc	r15, r25
    65fa:	0a 1f       	adc	r16, r26
    65fc:	1b 1f       	adc	r17, r27
    65fe:	79 e0       	ldi	r23, 0x09	; 9
    6600:	16 95       	lsr	r17
    6602:	07 95       	ror	r16
    6604:	f7 94       	ror	r15
    6606:	e7 94       	ror	r14
    6608:	7a 95       	dec	r23
    660a:	d1 f7       	brne	.-12     	; 0x6600 <f_mkfs+0x22a>
		n_rsv = 33 - partition;
    660c:	81 e2       	ldi	r24, 0x21	; 33
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	82 1b       	sub	r24, r18
    6612:	93 0b       	sbc	r25, r19
    6614:	2c 01       	movw	r4, r24
    6616:	66 24       	eor	r6, r6
    6618:	57 fc       	sbrc	r5, 7
    661a:	60 94       	com	r6
    661c:	76 2c       	mov	r7, r6
    661e:	1f 8a       	std	Y+23, r1	; 0x17
    6620:	18 8e       	std	Y+24, r1	; 0x18
    6622:	19 8e       	std	Y+25, r1	; 0x19
    6624:	1a 8e       	std	Y+26, r1	; 0x1a
    6626:	93 e0       	ldi	r25, 0x03	; 3
    6628:	9f 8f       	std	Y+31, r25	; 0x1f
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    662a:	a9 82       	std	Y+1, r10	; 0x01
    662c:	ba 82       	std	Y+2, r11	; 0x02
    662e:	cb 82       	std	Y+3, r12	; 0x03
    6630:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    6632:	83 2d       	mov	r24, r3
    6634:	63 e0       	ldi	r22, 0x03	; 3
    6636:	ae 01       	movw	r20, r28
    6638:	4b 5f       	subi	r20, 0xFB	; 251
    663a:	5f 4f       	sbci	r21, 0xFF	; 255
    663c:	0e 94 18 52 	call	0xa430	; 0xa430 <disk_ioctl>
    6640:	89 2b       	or	r24, r25
    6642:	09 f0       	breq	.+2      	; 0x6646 <f_mkfs+0x270>
    6644:	2a c3       	rjmp	.+1620   	; 0x6c9a <f_mkfs+0x8c4>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    6646:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6648:	3c 8d       	ldd	r19, Y+28	; 0x1c
    664a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    664c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    664e:	24 0d       	add	r18, r4
    6650:	35 1d       	adc	r19, r5
    6652:	46 1d       	adc	r20, r6
    6654:	57 1d       	adc	r21, r7
    6656:	2d 87       	std	Y+13, r18	; 0x0d
    6658:	3e 87       	std	Y+14, r19	; 0x0e
    665a:	4f 87       	std	Y+15, r20	; 0x0f
    665c:	58 8b       	std	Y+16, r21	; 0x10
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    665e:	2f 89       	ldd	r18, Y+23	; 0x17
    6660:	38 8d       	ldd	r19, Y+24	; 0x18
    6662:	49 8d       	ldd	r20, Y+25	; 0x19
    6664:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6666:	2e 0d       	add	r18, r14
    6668:	3f 1d       	adc	r19, r15
    666a:	40 1f       	adc	r20, r16
    666c:	51 1f       	adc	r21, r17
    666e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6670:	9e 85       	ldd	r25, Y+14	; 0x0e
    6672:	af 85       	ldd	r26, Y+15	; 0x0f
    6674:	b8 89       	ldd	r27, Y+16	; 0x10
    6676:	28 0f       	add	r18, r24
    6678:	39 1f       	adc	r19, r25
    667a:	4a 1f       	adc	r20, r26
    667c:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    667e:	8d 81       	ldd	r24, Y+5	; 0x05
    6680:	9e 81       	ldd	r25, Y+6	; 0x06
    6682:	af 81       	ldd	r26, Y+7	; 0x07
    6684:	b8 85       	ldd	r27, Y+8	; 0x08
    6686:	5c 01       	movw	r10, r24
    6688:	6d 01       	movw	r12, r26
    668a:	08 94       	sec
    668c:	a1 08       	sbc	r10, r1
    668e:	b1 08       	sbc	r11, r1
    6690:	c1 08       	sbc	r12, r1
    6692:	d1 08       	sbc	r13, r1
    6694:	a2 0e       	add	r10, r18
    6696:	b3 1e       	adc	r11, r19
    6698:	c4 1e       	adc	r12, r20
    669a:	d5 1e       	adc	r13, r21
    669c:	b0 95       	com	r27
    669e:	a0 95       	com	r26
    66a0:	90 95       	com	r25
    66a2:	81 95       	neg	r24
    66a4:	9f 4f       	sbci	r25, 0xFF	; 255
    66a6:	af 4f       	sbci	r26, 0xFF	; 255
    66a8:	bf 4f       	sbci	r27, 0xFF	; 255
    66aa:	a8 22       	and	r10, r24
    66ac:	b9 22       	and	r11, r25
    66ae:	ca 22       	and	r12, r26
    66b0:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    66b2:	d8 01       	movw	r26, r16
    66b4:	c7 01       	movw	r24, r14
    66b6:	82 1b       	sub	r24, r18
    66b8:	93 0b       	sbc	r25, r19
    66ba:	a4 0b       	sbc	r26, r20
    66bc:	b5 0b       	sbc	r27, r21
    66be:	8a 0d       	add	r24, r10
    66c0:	9b 1d       	adc	r25, r11
    66c2:	ac 1d       	adc	r26, r12
    66c4:	bd 1d       	adc	r27, r13
    66c6:	89 87       	std	Y+9, r24	; 0x09
    66c8:	9a 87       	std	Y+10, r25	; 0x0a
    66ca:	ab 87       	std	Y+11, r26	; 0x0b
    66cc:	bc 87       	std	Y+12, r27	; 0x0c
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    66ce:	e9 80       	ldd	r14, Y+1	; 0x01
    66d0:	fa 80       	ldd	r15, Y+2	; 0x02
    66d2:	0b 81       	ldd	r16, Y+3	; 0x03
    66d4:	1c 81       	ldd	r17, Y+4	; 0x04
    66d6:	c8 01       	movw	r24, r16
    66d8:	b7 01       	movw	r22, r14
    66da:	64 19       	sub	r22, r4
    66dc:	75 09       	sbc	r23, r5
    66de:	86 09       	sbc	r24, r6
    66e0:	97 09       	sbc	r25, r7
    66e2:	29 85       	ldd	r18, Y+9	; 0x09
    66e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    66e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    66e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    66ea:	62 1b       	sub	r22, r18
    66ec:	73 0b       	sbc	r23, r19
    66ee:	84 0b       	sbc	r24, r20
    66f0:	95 0b       	sbc	r25, r21
    66f2:	2f 89       	ldd	r18, Y+23	; 0x17
    66f4:	38 8d       	ldd	r19, Y+24	; 0x18
    66f6:	49 8d       	ldd	r20, Y+25	; 0x19
    66f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    66fa:	62 1b       	sub	r22, r18
    66fc:	73 0b       	sbc	r23, r19
    66fe:	84 0b       	sbc	r24, r20
    6700:	95 0b       	sbc	r25, r21
    6702:	29 89       	ldd	r18, Y+17	; 0x11
    6704:	3a 89       	ldd	r19, Y+18	; 0x12
    6706:	4b 89       	ldd	r20, Y+19	; 0x13
    6708:	5c 89       	ldd	r21, Y+20	; 0x14
    670a:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    670e:	2a a3       	std	Y+34, r18	; 0x22
    6710:	3b a3       	std	Y+35, r19	; 0x23
    6712:	4c a3       	std	Y+36, r20	; 0x24
    6714:	5d a3       	std	Y+37, r21	; 0x25
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    6716:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6718:	32 30       	cpi	r19, 0x02	; 2
    671a:	51 f4       	brne	.+20     	; 0x6730 <f_mkfs+0x35a>
    671c:	8a a1       	ldd	r24, Y+34	; 0x22
    671e:	9b a1       	ldd	r25, Y+35	; 0x23
    6720:	ac a1       	ldd	r26, Y+36	; 0x24
    6722:	bd a1       	ldd	r27, Y+37	; 0x25
    6724:	85 5f       	subi	r24, 0xF5	; 245
    6726:	9f 40       	sbci	r25, 0x0F	; 15
    6728:	a0 40       	sbci	r26, 0x00	; 0
    672a:	b0 40       	sbci	r27, 0x00	; 0
    672c:	70 f4       	brcc	.+28     	; 0x674a <f_mkfs+0x374>
    672e:	b5 c2       	rjmp	.+1386   	; 0x6c9a <f_mkfs+0x8c4>
    6730:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6732:	f3 30       	cpi	r31, 0x03	; 3
    6734:	51 f4       	brne	.+20     	; 0x674a <f_mkfs+0x374>
    6736:	2a a1       	ldd	r18, Y+34	; 0x22
    6738:	3b a1       	ldd	r19, Y+35	; 0x23
    673a:	4c a1       	ldd	r20, Y+36	; 0x24
    673c:	5d a1       	ldd	r21, Y+37	; 0x25
    673e:	25 5f       	subi	r18, 0xF5	; 245
    6740:	3f 4f       	sbci	r19, 0xFF	; 255
    6742:	40 40       	sbci	r20, 0x00	; 0
    6744:	50 40       	sbci	r21, 0x00	; 0
    6746:	08 f4       	brcc	.+2      	; 0x674a <f_mkfs+0x374>
    6748:	a8 c2       	rjmp	.+1360   	; 0x6c9a <f_mkfs+0x8c4>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    674a:	ad 82       	std	Y+5, r10	; 0x05
    674c:	be 82       	std	Y+6, r11	; 0x06
    674e:	cf 82       	std	Y+7, r12	; 0x07
    6750:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    6752:	22 20       	and	r2, r2
    6754:	11 f0       	breq	.+4      	; 0x675a <f_mkfs+0x384>
    6756:	10 ef       	ldi	r17, 0xF0	; 240
    6758:	85 c0       	rjmp	.+266    	; 0x6864 <f_mkfs+0x48e>
		DWORD n_disk = b_part + n_part;
    675a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    675c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    675e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6760:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6762:	2e 0d       	add	r18, r14
    6764:	3f 1d       	adc	r19, r15
    6766:	40 1f       	adc	r20, r16
    6768:	51 1f       	adc	r21, r17

		mem_set(fs->win, 0, SS(fs));
    676a:	62 e3       	ldi	r22, 0x32	; 50
    676c:	e6 2e       	mov	r14, r22
    676e:	f1 2c       	mov	r15, r1
    6770:	e8 0c       	add	r14, r8
    6772:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6774:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = (char)val;
    6776:	c4 01       	movw	r24, r8
    6778:	8e 5c       	subi	r24, 0xCE	; 206
    677a:	9d 4f       	sbci	r25, 0xFD	; 253
    677c:	01 c0       	rjmp	.+2      	; 0x6780 <f_mkfs+0x3aa>
    677e:	11 92       	st	Z+, r1
    6780:	e8 17       	cp	r30, r24
    6782:	f9 07       	cpc	r31, r25
    6784:	e1 f7       	brne	.-8      	; 0x677e <f_mkfs+0x3a8>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    6786:	84 01       	movw	r16, r8
    6788:	00 51       	subi	r16, 0x10	; 16
    678a:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    678c:	80 e8       	ldi	r24, 0x80	; 128
    678e:	91 e0       	ldi	r25, 0x01	; 1
    6790:	a1 e0       	ldi	r26, 0x01	; 1
    6792:	b0 e0       	ldi	r27, 0x00	; 0
    6794:	f8 01       	movw	r30, r16
    6796:	80 83       	st	Z, r24
    6798:	91 83       	std	Z+1, r25	; 0x01
    679a:	a2 83       	std	Z+2, r26	; 0x02
    679c:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    679e:	20 30       	cpi	r18, 0x00	; 0
    67a0:	f4 e0       	ldi	r31, 0x04	; 4
    67a2:	3f 07       	cpc	r19, r31
    67a4:	fb ef       	ldi	r31, 0xFB	; 251
    67a6:	4f 07       	cpc	r20, r31
    67a8:	f0 e0       	ldi	r31, 0x00	; 0
    67aa:	5f 07       	cpc	r21, r31
    67ac:	b0 f4       	brcc	.+44     	; 0x67da <f_mkfs+0x404>
			n_disk = n_disk / 63 / 255;
    67ae:	ca 01       	movw	r24, r20
    67b0:	b9 01       	movw	r22, r18
    67b2:	21 ec       	ldi	r18, 0xC1	; 193
    67b4:	3e e3       	ldi	r19, 0x3E	; 62
    67b6:	40 e0       	ldi	r20, 0x00	; 0
    67b8:	50 e0       	ldi	r21, 0x00	; 0
    67ba:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    67be:	c9 01       	movw	r24, r18
    67c0:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    67c2:	f8 01       	movw	r30, r16
    67c4:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    67c6:	22 e0       	ldi	r18, 0x02	; 2
    67c8:	b6 95       	lsr	r27
    67ca:	a7 95       	ror	r26
    67cc:	97 95       	ror	r25
    67ce:	87 95       	ror	r24
    67d0:	2a 95       	dec	r18
    67d2:	d1 f7       	brne	.-12     	; 0x67c8 <f_mkfs+0x3f2>
    67d4:	8f 63       	ori	r24, 0x3F	; 63
    67d6:	86 83       	std	Z+6, r24	; 0x06
    67d8:	07 c0       	rjmp	.+14     	; 0x67e8 <f_mkfs+0x412>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    67da:	8f ef       	ldi	r24, 0xFF	; 255
    67dc:	9f ef       	ldi	r25, 0xFF	; 255
    67de:	d8 01       	movw	r26, r16
    67e0:	16 96       	adiw	r26, 0x06	; 6
    67e2:	8d 93       	st	X+, r24
    67e4:	9c 93       	st	X, r25
    67e6:	17 97       	sbiw	r26, 0x07	; 7
		}
		tbl[5] = 254;
    67e8:	8e ef       	ldi	r24, 0xFE	; 254
    67ea:	f8 01       	movw	r30, r16
    67ec:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    67ee:	ff 8d       	ldd	r31, Y+31	; 0x1f
    67f0:	f3 30       	cpi	r31, 0x03	; 3
    67f2:	81 f0       	breq	.+32     	; 0x6814 <f_mkfs+0x43e>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    67f4:	89 81       	ldd	r24, Y+1	; 0x01
    67f6:	9a 81       	ldd	r25, Y+2	; 0x02
    67f8:	ab 81       	ldd	r26, Y+3	; 0x03
    67fa:	bc 81       	ldd	r27, Y+4	; 0x04
    67fc:	80 50       	subi	r24, 0x00	; 0
    67fe:	90 40       	sbci	r25, 0x00	; 0
    6800:	a1 40       	sbci	r26, 0x01	; 1
    6802:	b0 40       	sbci	r27, 0x00	; 0
    6804:	10 f0       	brcs	.+4      	; 0x680a <f_mkfs+0x434>
    6806:	86 e0       	ldi	r24, 0x06	; 6
    6808:	01 c0       	rjmp	.+2      	; 0x680c <f_mkfs+0x436>
    680a:	84 e0       	ldi	r24, 0x04	; 4
    680c:	d8 01       	movw	r26, r16
    680e:	14 96       	adiw	r26, 0x04	; 4
    6810:	8c 93       	st	X, r24
    6812:	03 c0       	rjmp	.+6      	; 0x681a <f_mkfs+0x444>
		else
			tbl[4] = 0x0c;
    6814:	8c e0       	ldi	r24, 0x0C	; 12
    6816:	f8 01       	movw	r30, r16
    6818:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    681a:	8f e3       	ldi	r24, 0x3F	; 63
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	a0 e0       	ldi	r26, 0x00	; 0
    6820:	b0 e0       	ldi	r27, 0x00	; 0
    6822:	f8 01       	movw	r30, r16
    6824:	80 87       	std	Z+8, r24	; 0x08
    6826:	91 87       	std	Z+9, r25	; 0x09
    6828:	a2 87       	std	Z+10, r26	; 0x0a
    682a:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    682c:	89 81       	ldd	r24, Y+1	; 0x01
    682e:	9a 81       	ldd	r25, Y+2	; 0x02
    6830:	ab 81       	ldd	r26, Y+3	; 0x03
    6832:	bc 81       	ldd	r27, Y+4	; 0x04
    6834:	84 87       	std	Z+12, r24	; 0x0c
    6836:	95 87       	std	Z+13, r25	; 0x0d
    6838:	a6 87       	std	Z+14, r26	; 0x0e
    683a:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    683c:	00 5c       	subi	r16, 0xC0	; 192
    683e:	1f 4f       	sbci	r17, 0xFF	; 255
    6840:	85 e5       	ldi	r24, 0x55	; 85
    6842:	9a ea       	ldi	r25, 0xAA	; 170
    6844:	d8 01       	movw	r26, r16
    6846:	8d 93       	st	X+, r24
    6848:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    684a:	83 2d       	mov	r24, r3
    684c:	b7 01       	movw	r22, r14
    684e:	20 e0       	ldi	r18, 0x00	; 0
    6850:	30 e0       	ldi	r19, 0x00	; 0
    6852:	40 e0       	ldi	r20, 0x00	; 0
    6854:	50 e0       	ldi	r21, 0x00	; 0
    6856:	01 e0       	ldi	r16, 0x01	; 1
    6858:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    685c:	89 2b       	or	r24, r25
    685e:	09 f0       	breq	.+2      	; 0x6862 <f_mkfs+0x48c>
    6860:	1f c2       	rjmp	.+1086   	; 0x6ca0 <f_mkfs+0x8ca>
    6862:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    6864:	72 e3       	ldi	r23, 0x32	; 50
    6866:	e7 2e       	mov	r14, r23
    6868:	f1 2c       	mov	r15, r1
    686a:	e8 0c       	add	r14, r8
    686c:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    686e:	57 01       	movw	r10, r14
    6870:	f7 01       	movw	r30, r14
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6872:	62 e3       	ldi	r22, 0x32	; 50
    6874:	c6 2e       	mov	r12, r22
    6876:	62 e0       	ldi	r22, 0x02	; 2
    6878:	d6 2e       	mov	r13, r22
    687a:	c8 0c       	add	r12, r8
    687c:	d9 1c       	adc	r13, r9
    687e:	01 c0       	rjmp	.+2      	; 0x6882 <f_mkfs+0x4ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6880:	11 92       	st	Z+, r1
    6882:	ec 15       	cp	r30, r12
    6884:	fd 05       	cpc	r31, r13
    6886:	e1 f7       	brne	.-8      	; 0x6880 <f_mkfs+0x4aa>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    6888:	8b ee       	ldi	r24, 0xEB	; 235
    688a:	9e ef       	ldi	r25, 0xFE	; 254
    688c:	a0 e9       	ldi	r26, 0x90	; 144
    688e:	b0 e0       	ldi	r27, 0x00	; 0
    6890:	f4 01       	movw	r30, r8
    6892:	82 ab       	std	Z+50, r24	; 0x32
    6894:	93 ab       	std	Z+51, r25	; 0x33
    6896:	a4 ab       	std	Z+52, r26	; 0x34
    6898:	b5 ab       	std	Z+53, r27	; 0x35
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    689a:	80 e0       	ldi	r24, 0x00	; 0
    689c:	92 e0       	ldi	r25, 0x02	; 2
    689e:	d7 01       	movw	r26, r14
    68a0:	1b 96       	adiw	r26, 0x0b	; 11
    68a2:	8d 93       	st	X+, r24
    68a4:	9c 93       	st	X, r25
    68a6:	1c 97       	sbiw	r26, 0x0c	; 12
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    68a8:	2d 88       	ldd	r2, Y+21	; 0x15
    68aa:	27 ae       	std	Z+63, r2	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    68ac:	f7 01       	movw	r30, r14
    68ae:	46 86       	std	Z+14, r4	; 0x0e
    68b0:	57 86       	std	Z+15, r5	; 0x0f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    68b2:	22 e4       	ldi	r18, 0x42	; 66
    68b4:	30 e0       	ldi	r19, 0x00	; 0
    68b6:	82 0e       	add	r8, r18
    68b8:	93 1e       	adc	r9, r19
    68ba:	81 e0       	ldi	r24, 0x01	; 1
    68bc:	d4 01       	movw	r26, r8
    68be:	8c 93       	st	X, r24
    68c0:	ee eb       	ldi	r30, 0xBE	; 190
    68c2:	ff ef       	ldi	r31, 0xFF	; 255
    68c4:	8e 0e       	add	r8, r30
    68c6:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    68c8:	8f 89       	ldd	r24, Y+23	; 0x17
    68ca:	98 8d       	ldd	r25, Y+24	; 0x18
    68cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    68ce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    68d0:	54 e0       	ldi	r21, 0x04	; 4
    68d2:	88 0f       	add	r24, r24
    68d4:	99 1f       	adc	r25, r25
    68d6:	aa 1f       	adc	r26, r26
    68d8:	bb 1f       	adc	r27, r27
    68da:	5a 95       	dec	r21
    68dc:	d1 f7       	brne	.-12     	; 0x68d2 <f_mkfs+0x4fc>
    68de:	f7 01       	movw	r30, r14
    68e0:	81 8b       	std	Z+17, r24	; 0x11
    68e2:	92 8b       	std	Z+18, r25	; 0x12
	if (n_part < 0x10000) {						/* Number of total sectors */
    68e4:	89 81       	ldd	r24, Y+1	; 0x01
    68e6:	9a 81       	ldd	r25, Y+2	; 0x02
    68e8:	ab 81       	ldd	r26, Y+3	; 0x03
    68ea:	bc 81       	ldd	r27, Y+4	; 0x04
    68ec:	80 30       	cpi	r24, 0x00	; 0
    68ee:	f0 e0       	ldi	r31, 0x00	; 0
    68f0:	9f 07       	cpc	r25, r31
    68f2:	f1 e0       	ldi	r31, 0x01	; 1
    68f4:	af 07       	cpc	r26, r31
    68f6:	f0 e0       	ldi	r31, 0x00	; 0
    68f8:	bf 07       	cpc	r27, r31
    68fa:	20 f4       	brcc	.+8      	; 0x6904 <f_mkfs+0x52e>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    68fc:	f7 01       	movw	r30, r14
    68fe:	83 8b       	std	Z+19, r24	; 0x13
    6900:	94 8b       	std	Z+20, r25	; 0x14
    6902:	05 c0       	rjmp	.+10     	; 0x690e <f_mkfs+0x538>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    6904:	f7 01       	movw	r30, r14
    6906:	80 a3       	std	Z+32, r24	; 0x20
    6908:	91 a3       	std	Z+33, r25	; 0x21
    690a:	a2 a3       	std	Z+34, r26	; 0x22
    690c:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    690e:	27 e4       	ldi	r18, 0x47	; 71
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	82 0e       	add	r8, r18
    6914:	93 1e       	adc	r9, r19
    6916:	d4 01       	movw	r26, r8
    6918:	1c 93       	st	X, r17
    691a:	e9 eb       	ldi	r30, 0xB9	; 185
    691c:	ff ef       	ldi	r31, 0xFF	; 255
    691e:	8e 0e       	add	r8, r30
    6920:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    6922:	8f e3       	ldi	r24, 0x3F	; 63
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	d7 01       	movw	r26, r14
    6928:	58 96       	adiw	r26, 0x18	; 24
    692a:	8d 93       	st	X+, r24
    692c:	9c 93       	st	X, r25
    692e:	59 97       	sbiw	r26, 0x19	; 25
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    6930:	8f ef       	ldi	r24, 0xFF	; 255
    6932:	90 e0       	ldi	r25, 0x00	; 0
    6934:	5a 96       	adiw	r26, 0x1a	; 26
    6936:	8d 93       	st	X+, r24
    6938:	9c 93       	st	X, r25
    693a:	5b 97       	sbiw	r26, 0x1b	; 27
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    693c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    693e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6940:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6942:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6944:	5c 96       	adiw	r26, 0x1c	; 28
    6946:	2d 93       	st	X+, r18
    6948:	3d 93       	st	X+, r19
    694a:	4d 93       	st	X+, r20
    694c:	5c 93       	st	X, r21
    694e:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    6950:	0e 94 22 55 	call	0xaa44	; 0xaa44 <get_fattime>
    6954:	6d 83       	std	Y+5, r22	; 0x05
    6956:	7e 83       	std	Y+6, r23	; 0x06
    6958:	8f 83       	std	Y+7, r24	; 0x07
    695a:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    695c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    695e:	b3 30       	cpi	r27, 0x03	; 3
    6960:	39 f1       	breq	.+78     	; 0x69b0 <f_mkfs+0x5da>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    6962:	f7 01       	movw	r30, r14
    6964:	67 a3       	std	Z+39, r22	; 0x27
    6966:	70 a7       	std	Z+40, r23	; 0x28
    6968:	81 a7       	std	Z+41, r24	; 0x29
    696a:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    696c:	29 85       	ldd	r18, Y+9	; 0x09
    696e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6970:	26 8b       	std	Z+22, r18	; 0x16
    6972:	37 8b       	std	Z+23, r19	; 0x17
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    6974:	46 e5       	ldi	r20, 0x56	; 86
    6976:	50 e0       	ldi	r21, 0x00	; 0
    6978:	84 0e       	add	r8, r20
    697a:	95 1e       	adc	r9, r21
    697c:	80 e8       	ldi	r24, 0x80	; 128
    697e:	d4 01       	movw	r26, r8
    6980:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    6982:	e2 e0       	ldi	r30, 0x02	; 2
    6984:	f0 e0       	ldi	r31, 0x00	; 0
    6986:	8e 0e       	add	r8, r30
    6988:	9f 1e       	adc	r9, r31
    698a:	89 e2       	ldi	r24, 0x29	; 41
    698c:	d4 01       	movw	r26, r8
    698e:	8c 93       	st	X, r24
    6990:	e8 ea       	ldi	r30, 0xA8	; 168
    6992:	ff ef       	ldi	r31, 0xFF	; 255
    6994:	8e 0e       	add	r8, r30
    6996:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6998:	d7 01       	movw	r26, r14
    699a:	9b 96       	adiw	r26, 0x2b	; 43
    699c:	e0 ee       	ldi	r30, 0xE0	; 224
    699e:	f3 e2       	ldi	r31, 0x23	; 35
    69a0:	02 c0       	rjmp	.+4      	; 0x69a6 <f_mkfs+0x5d0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    69a2:	81 91       	ld	r24, Z+
    69a4:	8d 93       	st	X+, r24
    69a6:	23 e2       	ldi	r18, 0x23	; 35
    69a8:	e3 3f       	cpi	r30, 0xF3	; 243
    69aa:	f2 07       	cpc	r31, r18
    69ac:	d1 f7       	brne	.-12     	; 0x69a2 <f_mkfs+0x5cc>
    69ae:	48 c0       	rjmp	.+144    	; 0x6a40 <f_mkfs+0x66a>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    69b0:	43 e4       	ldi	r20, 0x43	; 67
    69b2:	50 e0       	ldi	r21, 0x00	; 0
    69b4:	e4 0e       	add	r14, r20
    69b6:	f5 1e       	adc	r15, r21
    69b8:	d7 01       	movw	r26, r14
    69ba:	6d 93       	st	X+, r22
    69bc:	7d 93       	st	X+, r23
    69be:	8d 93       	st	X+, r24
    69c0:	9c 93       	st	X, r25
    69c2:	13 97       	sbiw	r26, 0x03	; 3
    69c4:	ed eb       	ldi	r30, 0xBD	; 189
    69c6:	ff ef       	ldi	r31, 0xFF	; 255
    69c8:	ee 0e       	add	r14, r30
    69ca:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    69cc:	29 85       	ldd	r18, Y+9	; 0x09
    69ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    69d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    69d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    69d4:	d7 01       	movw	r26, r14
    69d6:	94 96       	adiw	r26, 0x24	; 36
    69d8:	2d 93       	st	X+, r18
    69da:	3d 93       	st	X+, r19
    69dc:	4d 93       	st	X+, r20
    69de:	5c 93       	st	X, r21
    69e0:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    69e2:	82 e0       	ldi	r24, 0x02	; 2
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	a0 e0       	ldi	r26, 0x00	; 0
    69e8:	b0 e0       	ldi	r27, 0x00	; 0
    69ea:	f7 01       	movw	r30, r14
    69ec:	84 a7       	std	Z+44, r24	; 0x2c
    69ee:	95 a7       	std	Z+45, r25	; 0x2d
    69f0:	a6 a7       	std	Z+46, r26	; 0x2e
    69f2:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	90 e0       	ldi	r25, 0x00	; 0
    69f8:	80 ab       	std	Z+48, r24	; 0x30
    69fa:	91 ab       	std	Z+49, r25	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    69fc:	86 e0       	ldi	r24, 0x06	; 6
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	82 ab       	std	Z+50, r24	; 0x32
    6a02:	93 ab       	std	Z+51, r25	; 0x33
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    6a04:	22 e7       	ldi	r18, 0x72	; 114
    6a06:	30 e0       	ldi	r19, 0x00	; 0
    6a08:	82 0e       	add	r8, r18
    6a0a:	93 1e       	adc	r9, r19
    6a0c:	80 e8       	ldi	r24, 0x80	; 128
    6a0e:	d4 01       	movw	r26, r8
    6a10:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    6a12:	e2 e0       	ldi	r30, 0x02	; 2
    6a14:	f0 e0       	ldi	r31, 0x00	; 0
    6a16:	8e 0e       	add	r8, r30
    6a18:	9f 1e       	adc	r9, r31
    6a1a:	89 e2       	ldi	r24, 0x29	; 41
    6a1c:	d4 01       	movw	r26, r8
    6a1e:	8c 93       	st	X, r24
    6a20:	ec e8       	ldi	r30, 0x8C	; 140
    6a22:	ff ef       	ldi	r31, 0xFF	; 255
    6a24:	8e 0e       	add	r8, r30
    6a26:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6a28:	d7 01       	movw	r26, r14
    6a2a:	a9 5b       	subi	r26, 0xB9	; 185
    6a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    6a2e:	e4 ef       	ldi	r30, 0xF4	; 244
    6a30:	f3 e2       	ldi	r31, 0x23	; 35
    6a32:	02 c0       	rjmp	.+4      	; 0x6a38 <f_mkfs+0x662>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    6a34:	81 91       	ld	r24, Z+
    6a36:	8d 93       	st	X+, r24
    6a38:	24 e2       	ldi	r18, 0x24	; 36
    6a3a:	e7 30       	cpi	r30, 0x07	; 7
    6a3c:	f2 07       	cpc	r31, r18
    6a3e:	d1 f7       	brne	.-12     	; 0x6a34 <f_mkfs+0x65e>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    6a40:	a7 01       	movw	r20, r14
    6a42:	42 50       	subi	r20, 0x02	; 2
    6a44:	5e 4f       	sbci	r21, 0xFE	; 254
    6a46:	48 a3       	std	Y+32, r20	; 0x20
    6a48:	59 a3       	std	Y+33, r21	; 0x21
    6a4a:	85 e5       	ldi	r24, 0x55	; 85
    6a4c:	9a ea       	ldi	r25, 0xAA	; 170
    6a4e:	da 01       	movw	r26, r20
    6a50:	8d 93       	st	X+, r24
    6a52:	9c 93       	st	X, r25
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    6a54:	83 2d       	mov	r24, r3
    6a56:	b7 01       	movw	r22, r14
    6a58:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6a5a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6a5c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6a5e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6a60:	01 e0       	ldi	r16, 0x01	; 1
    6a62:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    6a66:	89 2b       	or	r24, r25
    6a68:	09 f0       	breq	.+2      	; 0x6a6c <f_mkfs+0x696>
    6a6a:	1a c1       	rjmp	.+564    	; 0x6ca0 <f_mkfs+0x8ca>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    6a6c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6a6e:	b3 30       	cpi	r27, 0x03	; 3
    6a70:	61 f4       	brne	.+24     	; 0x6a8a <f_mkfs+0x6b4>
		disk_write(drv, tbl, b_part+6, 1);
    6a72:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6a74:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6a76:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6a78:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6a7a:	2a 5f       	subi	r18, 0xFA	; 250
    6a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a7e:	4f 4f       	sbci	r20, 0xFF	; 255
    6a80:	5f 4f       	sbci	r21, 0xFF	; 255
    6a82:	83 2d       	mov	r24, r3
    6a84:	b7 01       	movw	r22, r14
    6a86:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    6a8a:	f7 01       	movw	r30, r14
    6a8c:	01 c0       	rjmp	.+2      	; 0x6a90 <f_mkfs+0x6ba>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6a8e:	11 92       	st	Z+, r1
    6a90:	ec 15       	cp	r30, r12
    6a92:	fd 05       	cpc	r31, r13
    6a94:	e1 f7       	brne	.-8      	; 0x6a8e <f_mkfs+0x6b8>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    6a96:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6a98:	e3 30       	cpi	r30, 0x03	; 3
    6a9a:	e9 f0       	breq	.+58     	; 0x6ad6 <f_mkfs+0x700>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    6a9c:	e1 30       	cpi	r30, 0x01	; 1
    6a9e:	29 f0       	breq	.+10     	; 0x6aaa <f_mkfs+0x6d4>
    6aa0:	20 e0       	ldi	r18, 0x00	; 0
    6aa2:	3f ef       	ldi	r19, 0xFF	; 255
    6aa4:	4f ef       	ldi	r20, 0xFF	; 255
    6aa6:	5f ef       	ldi	r21, 0xFF	; 255
    6aa8:	04 c0       	rjmp	.+8      	; 0x6ab2 <f_mkfs+0x6dc>
    6aaa:	20 e0       	ldi	r18, 0x00	; 0
    6aac:	3f ef       	ldi	r19, 0xFF	; 255
    6aae:	4f ef       	ldi	r20, 0xFF	; 255
    6ab0:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    6ab2:	81 2f       	mov	r24, r17
    6ab4:	90 e0       	ldi	r25, 0x00	; 0
    6ab6:	a0 e0       	ldi	r26, 0x00	; 0
    6ab8:	b0 e0       	ldi	r27, 0x00	; 0
    6aba:	82 2b       	or	r24, r18
    6abc:	93 2b       	or	r25, r19
    6abe:	a4 2b       	or	r26, r20
    6ac0:	b5 2b       	or	r27, r21
    6ac2:	8d 83       	std	Y+5, r24	; 0x05
    6ac4:	9e 83       	std	Y+6, r25	; 0x06
    6ac6:	af 83       	std	Y+7, r26	; 0x07
    6ac8:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    6aca:	f4 01       	movw	r30, r8
    6acc:	82 ab       	std	Z+50, r24	; 0x32
    6ace:	93 ab       	std	Z+51, r25	; 0x33
    6ad0:	a4 ab       	std	Z+52, r26	; 0x34
    6ad2:	b5 ab       	std	Z+53, r27	; 0x35
    6ad4:	1a c0       	rjmp	.+52     	; 0x6b0a <f_mkfs+0x734>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    6ad6:	88 ef       	ldi	r24, 0xF8	; 248
    6ad8:	9f ef       	ldi	r25, 0xFF	; 255
    6ada:	af ef       	ldi	r26, 0xFF	; 255
    6adc:	bf ef       	ldi	r27, 0xFF	; 255
    6ade:	f4 01       	movw	r30, r8
    6ae0:	82 ab       	std	Z+50, r24	; 0x32
    6ae2:	93 ab       	std	Z+51, r25	; 0x33
    6ae4:	a4 ab       	std	Z+52, r26	; 0x34
    6ae6:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    6ae8:	8f ef       	ldi	r24, 0xFF	; 255
    6aea:	9f ef       	ldi	r25, 0xFF	; 255
    6aec:	af ef       	ldi	r26, 0xFF	; 255
    6aee:	bf ef       	ldi	r27, 0xFF	; 255
    6af0:	f7 01       	movw	r30, r14
    6af2:	84 83       	std	Z+4, r24	; 0x04
    6af4:	95 83       	std	Z+5, r25	; 0x05
    6af6:	a6 83       	std	Z+6, r26	; 0x06
    6af8:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    6afa:	8f ef       	ldi	r24, 0xFF	; 255
    6afc:	9f ef       	ldi	r25, 0xFF	; 255
    6afe:	af ef       	ldi	r26, 0xFF	; 255
    6b00:	bf e0       	ldi	r27, 0x0F	; 15
    6b02:	80 87       	std	Z+8, r24	; 0x08
    6b04:	91 87       	std	Z+9, r25	; 0x09
    6b06:	a2 87       	std	Z+10, r26	; 0x0a
    6b08:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6b0a:	83 2d       	mov	r24, r3
    6b0c:	b7 01       	movw	r22, r14
    6b0e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6b10:	3e 85       	ldd	r19, Y+14	; 0x0e
    6b12:	4f 85       	ldd	r20, Y+15	; 0x0f
    6b14:	58 89       	ldd	r21, Y+16	; 0x10
    6b16:	01 e0       	ldi	r16, 0x01	; 1
    6b18:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    6b1c:	89 2b       	or	r24, r25
    6b1e:	21 f0       	breq	.+8      	; 0x6b28 <f_mkfs+0x752>
    6b20:	bf c0       	rjmp	.+382    	; 0x6ca0 <f_mkfs+0x8ca>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6b22:	d5 01       	movw	r26, r10
    6b24:	1d 92       	st	X+, r1
    6b26:	5d 01       	movw	r10, r26
    6b28:	ac 14       	cp	r10, r12
    6b2a:	bd 04       	cpc	r11, r13
    6b2c:	d1 f7       	brne	.-12     	; 0x6b22 <f_mkfs+0x74c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6b2e:	ad 84       	ldd	r10, Y+13	; 0x0d
    6b30:	be 84       	ldd	r11, Y+14	; 0x0e
    6b32:	cf 84       	ldd	r12, Y+15	; 0x0f
    6b34:	d8 88       	ldd	r13, Y+16	; 0x10
    6b36:	08 94       	sec
    6b38:	a1 1c       	adc	r10, r1
    6b3a:	b1 1c       	adc	r11, r1
    6b3c:	c1 1c       	adc	r12, r1
    6b3e:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    6b40:	81 e0       	ldi	r24, 0x01	; 1
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	a0 e0       	ldi	r26, 0x00	; 0
    6b46:	b0 e0       	ldi	r27, 0x00	; 0
    6b48:	16 c0       	rjmp	.+44     	; 0x6b76 <f_mkfs+0x7a0>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6b4a:	83 2d       	mov	r24, r3
    6b4c:	b7 01       	movw	r22, r14
    6b4e:	a6 01       	movw	r20, r12
    6b50:	95 01       	movw	r18, r10
    6b52:	01 e0       	ldi	r16, 0x01	; 1
    6b54:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    6b58:	89 2b       	or	r24, r25
    6b5a:	09 f0       	breq	.+2      	; 0x6b5e <f_mkfs+0x788>
    6b5c:	a1 c0       	rjmp	.+322    	; 0x6ca0 <f_mkfs+0x8ca>
    6b5e:	08 94       	sec
    6b60:	a1 1c       	adc	r10, r1
    6b62:	b1 1c       	adc	r11, r1
    6b64:	c1 1c       	adc	r12, r1
    6b66:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    6b68:	8d 81       	ldd	r24, Y+5	; 0x05
    6b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b6c:	af 81       	ldd	r26, Y+7	; 0x07
    6b6e:	b8 85       	ldd	r27, Y+8	; 0x08
    6b70:	01 96       	adiw	r24, 0x01	; 1
    6b72:	a1 1d       	adc	r26, r1
    6b74:	b1 1d       	adc	r27, r1
    6b76:	8d 83       	std	Y+5, r24	; 0x05
    6b78:	9e 83       	std	Y+6, r25	; 0x06
    6b7a:	af 83       	std	Y+7, r26	; 0x07
    6b7c:	b8 87       	std	Y+8, r27	; 0x08
    6b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b80:	9e 81       	ldd	r25, Y+6	; 0x06
    6b82:	af 81       	ldd	r26, Y+7	; 0x07
    6b84:	b8 85       	ldd	r27, Y+8	; 0x08
    6b86:	29 85       	ldd	r18, Y+9	; 0x09
    6b88:	3a 85       	ldd	r19, Y+10	; 0x0a
    6b8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    6b8c:	5c 85       	ldd	r21, Y+12	; 0x0c
    6b8e:	82 17       	cp	r24, r18
    6b90:	93 07       	cpc	r25, r19
    6b92:	a4 07       	cpc	r26, r20
    6b94:	b5 07       	cpc	r27, r21
    6b96:	c8 f2       	brcs	.-78     	; 0x6b4a <f_mkfs+0x774>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    6b98:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6b9a:	33 30       	cpi	r19, 0x03	; 3
    6b9c:	09 f0       	breq	.+2      	; 0x6ba0 <f_mkfs+0x7ca>
    6b9e:	2f 88       	ldd	r2, Y+23	; 0x17
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6ba0:	25 01       	movw	r4, r10
    6ba2:	36 01       	movw	r6, r12
    6ba4:	08 94       	sec
    6ba6:	41 1c       	adc	r4, r1
    6ba8:	51 1c       	adc	r5, r1
    6baa:	61 1c       	adc	r6, r1
    6bac:	71 1c       	adc	r7, r1
    6bae:	83 2d       	mov	r24, r3
    6bb0:	b7 01       	movw	r22, r14
    6bb2:	a6 01       	movw	r20, r12
    6bb4:	95 01       	movw	r18, r10
    6bb6:	01 e0       	ldi	r16, 0x01	; 1
    6bb8:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    6bbc:	89 2b       	or	r24, r25
    6bbe:	09 f0       	breq	.+2      	; 0x6bc2 <f_mkfs+0x7ec>
    6bc0:	6f c0       	rjmp	.+222    	; 0x6ca0 <f_mkfs+0x8ca>
			return FR_DISK_ERR;
	} while (--m);
    6bc2:	2a 94       	dec	r2
    6bc4:	19 f0       	breq	.+6      	; 0x6bcc <f_mkfs+0x7f6>
    6bc6:	63 01       	movw	r12, r6
    6bc8:	52 01       	movw	r10, r4
    6bca:	ea cf       	rjmp	.-44     	; 0x6ba0 <f_mkfs+0x7ca>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    6bcc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6bce:	43 30       	cpi	r20, 0x03	; 3
    6bd0:	09 f0       	breq	.+2      	; 0x6bd4 <f_mkfs+0x7fe>
    6bd2:	57 c0       	rjmp	.+174    	; 0x6c82 <f_mkfs+0x8ac>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    6bd4:	85 e5       	ldi	r24, 0x55	; 85
    6bd6:	9a ea       	ldi	r25, 0xAA	; 170
    6bd8:	a8 a1       	ldd	r26, Y+32	; 0x20
    6bda:	b9 a1       	ldd	r27, Y+33	; 0x21
    6bdc:	8d 93       	st	X+, r24
    6bde:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    6be0:	82 e5       	ldi	r24, 0x52	; 82
    6be2:	92 e5       	ldi	r25, 0x52	; 82
    6be4:	a1 e6       	ldi	r26, 0x61	; 97
    6be6:	b1 e4       	ldi	r27, 0x41	; 65
    6be8:	f4 01       	movw	r30, r8
    6bea:	82 ab       	std	Z+50, r24	; 0x32
    6bec:	93 ab       	std	Z+51, r25	; 0x33
    6bee:	a4 ab       	std	Z+52, r26	; 0x34
    6bf0:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    6bf2:	24 ee       	ldi	r18, 0xE4	; 228
    6bf4:	31 e0       	ldi	r19, 0x01	; 1
    6bf6:	e2 0e       	add	r14, r18
    6bf8:	f3 1e       	adc	r15, r19
    6bfa:	82 e7       	ldi	r24, 0x72	; 114
    6bfc:	92 e7       	ldi	r25, 0x72	; 114
    6bfe:	a1 e4       	ldi	r26, 0x41	; 65
    6c00:	b1 e6       	ldi	r27, 0x61	; 97
    6c02:	f7 01       	movw	r30, r14
    6c04:	81 93       	st	Z+, r24
    6c06:	91 93       	st	Z+, r25
    6c08:	a1 93       	st	Z+, r26
    6c0a:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    6c0c:	2a a1       	ldd	r18, Y+34	; 0x22
    6c0e:	3b a1       	ldd	r19, Y+35	; 0x23
    6c10:	4c a1       	ldd	r20, Y+36	; 0x24
    6c12:	5d a1       	ldd	r21, Y+37	; 0x25
    6c14:	21 50       	subi	r18, 0x01	; 1
    6c16:	30 40       	sbci	r19, 0x00	; 0
    6c18:	40 40       	sbci	r20, 0x00	; 0
    6c1a:	50 40       	sbci	r21, 0x00	; 0
    6c1c:	df 01       	movw	r26, r30
    6c1e:	2d 93       	st	X+, r18
    6c20:	3d 93       	st	X+, r19
    6c22:	4d 93       	st	X+, r20
    6c24:	5d 93       	st	X+, r21
    6c26:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    6c28:	8f ef       	ldi	r24, 0xFF	; 255
    6c2a:	9f ef       	ldi	r25, 0xFF	; 255
    6c2c:	af ef       	ldi	r26, 0xFF	; 255
    6c2e:	bf ef       	ldi	r27, 0xFF	; 255
    6c30:	f7 01       	movw	r30, r14
    6c32:	80 83       	st	Z, r24
    6c34:	91 83       	std	Z+1, r25	; 0x01
    6c36:	a2 83       	std	Z+2, r26	; 0x02
    6c38:	b3 83       	std	Z+3, r27	; 0x03
    6c3a:	24 e1       	ldi	r18, 0x14	; 20
    6c3c:	3e ef       	ldi	r19, 0xFE	; 254
    6c3e:	e2 0e       	add	r14, r18
    6c40:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    6c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c46:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6c48:	be 8d       	ldd	r27, Y+30	; 0x1e
    6c4a:	01 96       	adiw	r24, 0x01	; 1
    6c4c:	a1 1d       	adc	r26, r1
    6c4e:	b1 1d       	adc	r27, r1
    6c50:	8b 8f       	std	Y+27, r24	; 0x1b
    6c52:	9c 8f       	std	Y+28, r25	; 0x1c
    6c54:	ad 8f       	std	Y+29, r26	; 0x1d
    6c56:	be 8f       	std	Y+30, r27	; 0x1e
    6c58:	83 2d       	mov	r24, r3
    6c5a:	b7 01       	movw	r22, r14
    6c5c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6c5e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6c60:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6c62:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6c64:	01 e0       	ldi	r16, 0x01	; 1
    6c66:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    6c6a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6c6c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6c6e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6c70:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6c72:	2a 5f       	subi	r18, 0xFA	; 250
    6c74:	3f 4f       	sbci	r19, 0xFF	; 255
    6c76:	4f 4f       	sbci	r20, 0xFF	; 255
    6c78:	5f 4f       	sbci	r21, 0xFF	; 255
    6c7a:	83 2d       	mov	r24, r3
    6c7c:	b7 01       	movw	r22, r14
    6c7e:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    6c82:	83 2d       	mov	r24, r3
    6c84:	60 e0       	ldi	r22, 0x00	; 0
    6c86:	40 e0       	ldi	r20, 0x00	; 0
    6c88:	50 e0       	ldi	r21, 0x00	; 0
    6c8a:	0e 94 18 52 	call	0xa430	; 0xa430 <disk_ioctl>
    6c8e:	00 97       	sbiw	r24, 0x00	; 0
    6c90:	11 f0       	breq	.+4      	; 0x6c96 <f_mkfs+0x8c0>
    6c92:	81 e0       	ldi	r24, 0x01	; 1
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	9c 01       	movw	r18, r24
    6c98:	05 c0       	rjmp	.+10     	; 0x6ca4 <f_mkfs+0x8ce>
    6c9a:	2e e0       	ldi	r18, 0x0E	; 14
    6c9c:	30 e0       	ldi	r19, 0x00	; 0
    6c9e:	02 c0       	rjmp	.+4      	; 0x6ca4 <f_mkfs+0x8ce>
    6ca0:	21 e0       	ldi	r18, 0x01	; 1
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
}
    6ca4:	c9 01       	movw	r24, r18
    6ca6:	a5 96       	adiw	r28, 0x25	; 37
    6ca8:	e2 e1       	ldi	r30, 0x12	; 18
    6caa:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    6cae:	7c 01       	movw	r14, r24
    6cb0:	8d 01       	movw	r16, r26
    6cb2:	ee 0c       	add	r14, r14
    6cb4:	ff 1c       	adc	r15, r15
    6cb6:	00 1f       	adc	r16, r16
    6cb8:	11 1f       	adc	r17, r17
    6cba:	e8 0e       	add	r14, r24
    6cbc:	f9 1e       	adc	r15, r25
    6cbe:	0a 1f       	adc	r16, r26
    6cc0:	1b 1f       	adc	r17, r27
    6cc2:	08 94       	sec
    6cc4:	e1 1c       	adc	r14, r1
    6cc6:	f1 1c       	adc	r15, r1
    6cc8:	01 1d       	adc	r16, r1
    6cca:	11 1d       	adc	r17, r1
    6ccc:	16 95       	lsr	r17
    6cce:	07 95       	ror	r16
    6cd0:	f7 94       	ror	r15
    6cd2:	e7 94       	ror	r14
    6cd4:	82 e0       	ldi	r24, 0x02	; 2
    6cd6:	92 e0       	ldi	r25, 0x02	; 2
    6cd8:	a0 e0       	ldi	r26, 0x00	; 0
    6cda:	b0 e0       	ldi	r27, 0x00	; 0
    6cdc:	e8 0e       	add	r14, r24
    6cde:	f9 1e       	adc	r15, r25
    6ce0:	0a 1f       	adc	r16, r26
    6ce2:	1b 1f       	adc	r17, r27
    6ce4:	29 e0       	ldi	r18, 0x09	; 9
    6ce6:	16 95       	lsr	r17
    6ce8:	07 95       	ror	r16
    6cea:	f7 94       	ror	r15
    6cec:	e7 94       	ror	r14
    6cee:	2a 95       	dec	r18
    6cf0:	d1 f7       	brne	.-12     	; 0x6ce6 <f_mkfs+0x910>
		n_rsv = 1 + partition;
    6cf2:	82 2d       	mov	r24, r2
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	01 96       	adiw	r24, 0x01	; 1
    6cf8:	2c 01       	movw	r4, r24
    6cfa:	66 24       	eor	r6, r6
    6cfc:	57 fc       	sbrc	r5, 7
    6cfe:	60 94       	com	r6
    6d00:	76 2c       	mov	r7, r6
    6d02:	20 e2       	ldi	r18, 0x20	; 32
    6d04:	30 e0       	ldi	r19, 0x00	; 0
    6d06:	40 e0       	ldi	r20, 0x00	; 0
    6d08:	50 e0       	ldi	r21, 0x00	; 0
    6d0a:	2f 8b       	std	Y+23, r18	; 0x17
    6d0c:	38 8f       	std	Y+24, r19	; 0x18
    6d0e:	49 8f       	std	Y+25, r20	; 0x19
    6d10:	5a 8f       	std	Y+26, r21	; 0x1a
    6d12:	31 e0       	ldi	r19, 0x01	; 1
    6d14:	3f 8f       	std	Y+31, r19	; 0x1f
    6d16:	89 cc       	rjmp	.-1774   	; 0x662a <f_mkfs+0x254>

00006d18 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6d18:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    6d1a:	00 97       	sbiw	r24, 0x00	; 0
    6d1c:	99 f0       	breq	.+38     	; 0x6d44 <validate+0x2c>
    6d1e:	80 81       	ld	r24, Z
    6d20:	88 23       	and	r24, r24
    6d22:	81 f0       	breq	.+32     	; 0x6d44 <validate+0x2c>
    6d24:	85 81       	ldd	r24, Z+5	; 0x05
    6d26:	96 81       	ldd	r25, Z+6	; 0x06
    6d28:	86 17       	cp	r24, r22
    6d2a:	97 07       	cpc	r25, r23
    6d2c:	59 f4       	brne	.+22     	; 0x6d44 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    6d2e:	81 81       	ldd	r24, Z+1	; 0x01
    6d30:	0e 94 2e 51 	call	0xa25c	; 0xa25c <disk_status>
    6d34:	80 fd       	sbrc	r24, 0
    6d36:	03 c0       	rjmp	.+6      	; 0x6d3e <validate+0x26>
    6d38:	20 e0       	ldi	r18, 0x00	; 0
    6d3a:	30 e0       	ldi	r19, 0x00	; 0
    6d3c:	05 c0       	rjmp	.+10     	; 0x6d48 <validate+0x30>
    6d3e:	23 e0       	ldi	r18, 0x03	; 3
    6d40:	30 e0       	ldi	r19, 0x00	; 0
    6d42:	02 c0       	rjmp	.+4      	; 0x6d48 <validate+0x30>
    6d44:	29 e0       	ldi	r18, 0x09	; 9
    6d46:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    6d48:	c9 01       	movw	r24, r18
    6d4a:	08 95       	ret

00006d4c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    6d4c:	0f 93       	push	r16
    6d4e:	cf 93       	push	r28
    6d50:	df 93       	push	r29
    6d52:	ec 01       	movw	r28, r24
    6d54:	9a 01       	movw	r18, r20
    6d56:	ab 01       	movw	r20, r22
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6d58:	bc 01       	movw	r22, r24
    6d5a:	6e 5c       	subi	r22, 0xCE	; 206
    6d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d5e:	89 81       	ldd	r24, Y+1	; 0x01
    6d60:	01 e0       	ldi	r16, 0x01	; 1
    6d62:	0e 94 35 51 	call	0xa26a	; 0xa26a <disk_read>
    6d66:	89 2b       	or	r24, r25
    6d68:	11 f0       	breq	.+4      	; 0x6d6e <check_fs+0x22>
    6d6a:	23 e0       	ldi	r18, 0x03	; 3
    6d6c:	37 c0       	rjmp	.+110    	; 0x6ddc <check_fs+0x90>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6d6e:	c0 5d       	subi	r28, 0xD0	; 208
    6d70:	dd 4f       	sbci	r29, 0xFD	; 253
    6d72:	88 81       	ld	r24, Y
    6d74:	99 81       	ldd	r25, Y+1	; 0x01
    6d76:	c0 53       	subi	r28, 0x30	; 48
    6d78:	d2 40       	sbci	r29, 0x02	; 2
    6d7a:	85 55       	subi	r24, 0x55	; 85
    6d7c:	9a 4a       	sbci	r25, 0xAA	; 170
    6d7e:	11 f0       	breq	.+4      	; 0x6d84 <check_fs+0x38>
    6d80:	22 e0       	ldi	r18, 0x02	; 2
    6d82:	2c c0       	rjmp	.+88     	; 0x6ddc <check_fs+0x90>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6d84:	de 01       	movw	r26, r28
    6d86:	a8 59       	subi	r26, 0x98	; 152
    6d88:	bf 4f       	sbci	r27, 0xFF	; 255
    6d8a:	e5 e5       	ldi	r30, 0x55	; 85
    6d8c:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6d8e:	84 e2       	ldi	r24, 0x24	; 36
    6d90:	e8 35       	cpi	r30, 0x58	; 88
    6d92:	f8 07       	cpc	r31, r24
    6d94:	11 f4       	brne	.+4      	; 0x6d9a <check_fs+0x4e>
    6d96:	20 e0       	ldi	r18, 0x00	; 0
    6d98:	21 c0       	rjmp	.+66     	; 0x6ddc <check_fs+0x90>
    6d9a:	9c 91       	ld	r25, X
    6d9c:	80 81       	ld	r24, Z
    6d9e:	98 17       	cp	r25, r24
    6da0:	19 f4       	brne	.+6      	; 0x6da8 <check_fs+0x5c>
    6da2:	11 96       	adiw	r26, 0x01	; 1
    6da4:	31 96       	adiw	r30, 0x01	; 1
    6da6:	f3 cf       	rjmp	.-26     	; 0x6d8e <check_fs+0x42>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6da8:	de 01       	movw	r26, r28
    6daa:	ac 57       	subi	r26, 0x7C	; 124
    6dac:	bf 4f       	sbci	r27, 0xFF	; 255
    6dae:	e5 e5       	ldi	r30, 0x55	; 85
    6db0:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6db2:	24 e2       	ldi	r18, 0x24	; 36
    6db4:	e8 35       	cpi	r30, 0x58	; 88
    6db6:	f2 07       	cpc	r31, r18
    6db8:	49 f0       	breq	.+18     	; 0x6dcc <check_fs+0x80>
    6dba:	9c 91       	ld	r25, X
    6dbc:	80 81       	ld	r24, Z
    6dbe:	98 17       	cp	r25, r24
    6dc0:	11 f0       	breq	.+4      	; 0x6dc6 <check_fs+0x7a>
    6dc2:	21 e0       	ldi	r18, 0x01	; 1
    6dc4:	0b c0       	rjmp	.+22     	; 0x6ddc <check_fs+0x90>
    6dc6:	11 96       	adiw	r26, 0x01	; 1
    6dc8:	31 96       	adiw	r30, 0x01	; 1
    6dca:	f3 cf       	rjmp	.-26     	; 0x6db2 <check_fs+0x66>
    6dcc:	20 e0       	ldi	r18, 0x00	; 0
    6dce:	c6 5a       	subi	r28, 0xA6	; 166
    6dd0:	df 4f       	sbci	r29, 0xFF	; 255
    6dd2:	88 81       	ld	r24, Y
    6dd4:	87 ff       	sbrs	r24, 7
    6dd6:	21 e0       	ldi	r18, 0x01	; 1
    6dd8:	81 e0       	ldi	r24, 0x01	; 1
    6dda:	28 27       	eor	r18, r24
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
}
    6ddc:	82 2f       	mov	r24, r18
    6dde:	df 91       	pop	r29
    6de0:	cf 91       	pop	r28
    6de2:	0f 91       	pop	r16
    6de4:	08 95       	ret

00006de6 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    6de6:	a0 e0       	ldi	r26, 0x00	; 0
    6de8:	b0 e0       	ldi	r27, 0x00	; 0
    6dea:	e9 ef       	ldi	r30, 0xF9	; 249
    6dec:	f6 e3       	ldi	r31, 0x36	; 54
    6dee:	0c 94 4f 58 	jmp	0xb09e	; 0xb09e <__prologue_saves__+0x8>
    6df2:	fc 01       	movw	r30, r24
    6df4:	9b 01       	movw	r18, r22
    6df6:	f4 2e       	mov	r15, r20
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    6df8:	a0 81       	ld	r26, Z
    6dfa:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    6dfc:	8c 91       	ld	r24, X
    6dfe:	08 2f       	mov	r16, r24
    6e00:	11 27       	eor	r17, r17
    6e02:	07 fd       	sbrc	r16, 7
    6e04:	10 95       	com	r17
    6e06:	00 53       	subi	r16, 0x30	; 48
    6e08:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    6e0a:	0a 30       	cpi	r16, 0x0A	; 10
    6e0c:	11 05       	cpc	r17, r1
    6e0e:	48 f4       	brcc	.+18     	; 0x6e22 <auto_mount+0x3c>
    6e10:	11 96       	adiw	r26, 0x01	; 1
    6e12:	8c 91       	ld	r24, X
    6e14:	11 97       	sbiw	r26, 0x01	; 1
    6e16:	8a 33       	cpi	r24, 0x3A	; 58
    6e18:	21 f4       	brne	.+8      	; 0x6e22 <auto_mount+0x3c>
		p += 2; *path = p;			/* Return pointer to the path name */
    6e1a:	12 96       	adiw	r26, 0x02	; 2
    6e1c:	a0 83       	st	Z, r26
    6e1e:	b1 83       	std	Z+1, r27	; 0x01
    6e20:	04 c0       	rjmp	.+8      	; 0x6e2a <auto_mount+0x44>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    6e22:	80 91 6b 25 	lds	r24, 0x256B
    6e26:	08 2f       	mov	r16, r24
    6e28:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    6e2a:	02 30       	cpi	r16, 0x02	; 2
    6e2c:	11 05       	cpc	r17, r1
    6e2e:	18 f0       	brcs	.+6      	; 0x6e36 <auto_mount+0x50>
    6e30:	2b e0       	ldi	r18, 0x0B	; 11
    6e32:	30 e0       	ldi	r19, 0x00	; 0
    6e34:	84 c1       	rjmp	.+776    	; 0x713e <auto_mount+0x358>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    6e36:	f8 01       	movw	r30, r16
    6e38:	ee 0f       	add	r30, r30
    6e3a:	ff 1f       	adc	r31, r31
    6e3c:	eb 59       	subi	r30, 0x9B	; 155
    6e3e:	fa 4d       	sbci	r31, 0xDA	; 218
    6e40:	c0 81       	ld	r28, Z
    6e42:	d1 81       	ldd	r29, Z+1	; 0x01
    6e44:	f9 01       	movw	r30, r18
    6e46:	c0 83       	st	Z, r28
    6e48:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
    6e4a:	20 97       	sbiw	r28, 0x00	; 0
    6e4c:	19 f4       	brne	.+6      	; 0x6e54 <auto_mount+0x6e>
    6e4e:	2c e0       	ldi	r18, 0x0C	; 12
    6e50:	30 e0       	ldi	r19, 0x00	; 0
    6e52:	75 c1       	rjmp	.+746    	; 0x713e <auto_mount+0x358>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    6e54:	88 81       	ld	r24, Y
    6e56:	88 23       	and	r24, r24
    6e58:	59 f0       	breq	.+22     	; 0x6e70 <auto_mount+0x8a>
		stat = disk_status(fs->drive);
    6e5a:	89 81       	ldd	r24, Y+1	; 0x01
    6e5c:	0e 94 2e 51 	call	0xa25c	; 0xa25c <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    6e60:	80 fd       	sbrc	r24, 0
    6e62:	06 c0       	rjmp	.+12     	; 0x6e70 <auto_mount+0x8a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6e64:	ff 20       	and	r15, r15
    6e66:	09 f4       	brne	.+2      	; 0x6e6a <auto_mount+0x84>
    6e68:	65 c1       	rjmp	.+714    	; 0x7134 <auto_mount+0x34e>
    6e6a:	82 fd       	sbrc	r24, 2
    6e6c:	60 c1       	rjmp	.+704    	; 0x712e <auto_mount+0x348>
    6e6e:	62 c1       	rjmp	.+708    	; 0x7134 <auto_mount+0x34e>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    6e70:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    6e72:	09 83       	std	Y+1, r16	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    6e74:	80 2f       	mov	r24, r16
    6e76:	0e 94 24 54 	call	0xa848	; 0xa848 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    6e7a:	80 ff       	sbrs	r24, 0
    6e7c:	03 c0       	rjmp	.+6      	; 0x6e84 <auto_mount+0x9e>
    6e7e:	23 e0       	ldi	r18, 0x03	; 3
    6e80:	30 e0       	ldi	r19, 0x00	; 0
    6e82:	5d c1       	rjmp	.+698    	; 0x713e <auto_mount+0x358>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6e84:	ff 20       	and	r15, r15
    6e86:	11 f0       	breq	.+4      	; 0x6e8c <auto_mount+0xa6>
    6e88:	82 fd       	sbrc	r24, 2
    6e8a:	51 c1       	rjmp	.+674    	; 0x712e <auto_mount+0x348>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    6e8c:	ce 01       	movw	r24, r28
    6e8e:	40 e0       	ldi	r20, 0x00	; 0
    6e90:	50 e0       	ldi	r21, 0x00	; 0
    6e92:	60 e0       	ldi	r22, 0x00	; 0
    6e94:	70 e0       	ldi	r23, 0x00	; 0
    6e96:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    6e9a:	81 30       	cpi	r24, 0x01	; 1
    6e9c:	21 f0       	breq	.+8      	; 0x6ea6 <auto_mount+0xc0>
    6e9e:	66 24       	eor	r6, r6
    6ea0:	77 24       	eor	r7, r7
    6ea2:	43 01       	movw	r8, r6
    6ea4:	10 c0       	rjmp	.+32     	; 0x6ec6 <auto_mount+0xe0>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    6ea6:	fe 01       	movw	r30, r28
    6ea8:	e0 51       	subi	r30, 0x10	; 16
    6eaa:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    6eac:	84 81       	ldd	r24, Z+4	; 0x04
    6eae:	88 23       	and	r24, r24
    6eb0:	09 f4       	brne	.+2      	; 0x6eb4 <auto_mount+0xce>
    6eb2:	43 c1       	rjmp	.+646    	; 0x713a <auto_mount+0x354>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    6eb4:	60 84       	ldd	r6, Z+8	; 0x08
    6eb6:	71 84       	ldd	r7, Z+9	; 0x09
    6eb8:	82 84       	ldd	r8, Z+10	; 0x0a
    6eba:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    6ebc:	ce 01       	movw	r24, r28
    6ebe:	b4 01       	movw	r22, r8
    6ec0:	a3 01       	movw	r20, r6
    6ec2:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    6ec6:	83 30       	cpi	r24, 0x03	; 3
    6ec8:	19 f4       	brne	.+6      	; 0x6ed0 <auto_mount+0xea>
    6eca:	21 e0       	ldi	r18, 0x01	; 1
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	37 c1       	rjmp	.+622    	; 0x713e <auto_mount+0x358>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    6ed0:	88 23       	and	r24, r24
    6ed2:	09 f0       	breq	.+2      	; 0x6ed6 <auto_mount+0xf0>
    6ed4:	32 c1       	rjmp	.+612    	; 0x713a <auto_mount+0x354>
    6ed6:	8d ad       	ldd	r24, Y+61	; 0x3d
    6ed8:	9e ad       	ldd	r25, Y+62	; 0x3e
    6eda:	80 50       	subi	r24, 0x00	; 0
    6edc:	92 40       	sbci	r25, 0x02	; 2
    6ede:	09 f0       	breq	.+2      	; 0x6ee2 <auto_mount+0xfc>
    6ee0:	2c c1       	rjmp	.+600    	; 0x713a <auto_mount+0x354>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6ee2:	c8 5b       	subi	r28, 0xB8	; 184
    6ee4:	df 4f       	sbci	r29, 0xFF	; 255
    6ee6:	88 81       	ld	r24, Y
    6ee8:	99 81       	ldd	r25, Y+1	; 0x01
    6eea:	c8 54       	subi	r28, 0x48	; 72
    6eec:	d0 40       	sbci	r29, 0x00	; 0
    6eee:	bc 01       	movw	r22, r24
    6ef0:	80 e0       	ldi	r24, 0x00	; 0
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    6ef4:	61 15       	cp	r22, r1
    6ef6:	71 05       	cpc	r23, r1
    6ef8:	81 05       	cpc	r24, r1
    6efa:	91 05       	cpc	r25, r1
    6efc:	41 f4       	brne	.+16     	; 0x6f0e <auto_mount+0x128>
    6efe:	ca 5a       	subi	r28, 0xAA	; 170
    6f00:	df 4f       	sbci	r29, 0xFF	; 255
    6f02:	68 81       	ld	r22, Y
    6f04:	79 81       	ldd	r23, Y+1	; 0x01
    6f06:	8a 81       	ldd	r24, Y+2	; 0x02
    6f08:	9b 81       	ldd	r25, Y+3	; 0x03
    6f0a:	c6 55       	subi	r28, 0x56	; 86
    6f0c:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    6f0e:	6a 8f       	std	Y+26, r22	; 0x1a
    6f10:	7b 8f       	std	Y+27, r23	; 0x1b
    6f12:	8c 8f       	std	Y+28, r24	; 0x1c
    6f14:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    6f16:	ce 5b       	subi	r28, 0xBE	; 190
    6f18:	df 4f       	sbci	r29, 0xFF	; 255
    6f1a:	28 81       	ld	r18, Y
    6f1c:	c2 54       	subi	r28, 0x42	; 66
    6f1e:	d0 40       	sbci	r29, 0x00	; 0
    6f20:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    6f22:	30 e0       	ldi	r19, 0x00	; 0
    6f24:	40 e0       	ldi	r20, 0x00	; 0
    6f26:	50 e0       	ldi	r21, 0x00	; 0
    6f28:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    6f2c:	5b 01       	movw	r10, r22
    6f2e:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    6f30:	fe 01       	movw	r30, r28
    6f32:	e0 5c       	subi	r30, 0xC0	; 192
    6f34:	ff 4f       	sbci	r31, 0xFF	; 255
    6f36:	80 81       	ld	r24, Z
    6f38:	91 81       	ldd	r25, Z+1	; 0x01
    6f3a:	a0 e0       	ldi	r26, 0x00	; 0
    6f3c:	b0 e0       	ldi	r27, 0x00	; 0
    6f3e:	86 0d       	add	r24, r6
    6f40:	97 1d       	adc	r25, r7
    6f42:	a8 1d       	adc	r26, r8
    6f44:	b9 1d       	adc	r27, r9
    6f46:	8a a3       	std	Y+34, r24	; 0x22
    6f48:	9b a3       	std	Y+35, r25	; 0x23
    6f4a:	ac a3       	std	Y+36, r26	; 0x24
    6f4c:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    6f4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f50:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    6f52:	cd 5b       	subi	r28, 0xBD	; 189
    6f54:	df 4f       	sbci	r29, 0xFF	; 255
    6f56:	28 81       	ld	r18, Y
    6f58:	39 81       	ldd	r19, Y+1	; 0x01
    6f5a:	c3 54       	subi	r28, 0x43	; 67
    6f5c:	d0 40       	sbci	r29, 0x00	; 0
    6f5e:	2f 83       	std	Y+7, r18	; 0x07
    6f60:	38 87       	std	Y+8, r19	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    6f62:	cb 5b       	subi	r28, 0xBB	; 187
    6f64:	df 4f       	sbci	r29, 0xFF	; 255
    6f66:	88 81       	ld	r24, Y
    6f68:	99 81       	ldd	r25, Y+1	; 0x01
    6f6a:	c5 54       	subi	r28, 0x45	; 69
    6f6c:	d0 40       	sbci	r29, 0x00	; 0
    6f6e:	7c 01       	movw	r14, r24
    6f70:	00 e0       	ldi	r16, 0x00	; 0
    6f72:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6f74:	e1 14       	cp	r14, r1
    6f76:	f1 04       	cpc	r15, r1
    6f78:	01 05       	cpc	r16, r1
    6f7a:	11 05       	cpc	r17, r1
    6f7c:	41 f4       	brne	.+16     	; 0x6f8e <auto_mount+0x1a8>
    6f7e:	ce 5a       	subi	r28, 0xAE	; 174
    6f80:	df 4f       	sbci	r29, 0xFF	; 255
    6f82:	e8 80       	ld	r14, Y
    6f84:	f9 80       	ldd	r15, Y+1	; 0x01
    6f86:	0a 81       	ldd	r16, Y+2	; 0x02
    6f88:	1b 81       	ldd	r17, Y+3	; 0x03
    6f8a:	c2 55       	subi	r28, 0x52	; 82
    6f8c:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    6f8e:	80 81       	ld	r24, Z
    6f90:	91 81       	ldd	r25, Z+1	; 0x01
    6f92:	a0 e0       	ldi	r26, 0x00	; 0
    6f94:	b0 e0       	ldi	r27, 0x00	; 0
    6f96:	e8 1a       	sub	r14, r24
    6f98:	f9 0a       	sbc	r15, r25
    6f9a:	0a 0b       	sbc	r16, r26
    6f9c:	1b 0b       	sbc	r17, r27
    6f9e:	ea 18       	sub	r14, r10
    6fa0:	fb 08       	sbc	r15, r11
    6fa2:	0c 09       	sbc	r16, r12
    6fa4:	1d 09       	sbc	r17, r13
    6fa6:	84 e0       	ldi	r24, 0x04	; 4
    6fa8:	36 95       	lsr	r19
    6faa:	27 95       	ror	r18
    6fac:	8a 95       	dec	r24
    6fae:	e1 f7       	brne	.-8      	; 0x6fa8 <auto_mount+0x1c2>
    6fb0:	c9 01       	movw	r24, r18
    6fb2:	a0 e0       	ldi	r26, 0x00	; 0
    6fb4:	b0 e0       	ldi	r27, 0x00	; 0
    6fb6:	e8 1a       	sub	r14, r24
    6fb8:	f9 0a       	sbc	r15, r25
    6fba:	0a 0b       	sbc	r16, r26
    6fbc:	1b 0b       	sbc	r17, r27
    6fbe:	2a 81       	ldd	r18, Y+2	; 0x02
    6fc0:	30 e0       	ldi	r19, 0x00	; 0
    6fc2:	40 e0       	ldi	r20, 0x00	; 0
    6fc4:	50 e0       	ldi	r21, 0x00	; 0
    6fc6:	c8 01       	movw	r24, r16
    6fc8:	b7 01       	movw	r22, r14
    6fca:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    6fce:	2e 5f       	subi	r18, 0xFE	; 254
    6fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd2:	4f 4f       	sbci	r20, 0xFF	; 255
    6fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6fd6:	2e 8f       	std	Y+30, r18	; 0x1e
    6fd8:	3f 8f       	std	Y+31, r19	; 0x1f
    6fda:	48 a3       	std	Y+32, r20	; 0x20
    6fdc:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    6fde:	27 3f       	cpi	r18, 0xF7	; 247
    6fe0:	8f e0       	ldi	r24, 0x0F	; 15
    6fe2:	38 07       	cpc	r19, r24
    6fe4:	80 e0       	ldi	r24, 0x00	; 0
    6fe6:	48 07       	cpc	r20, r24
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	58 07       	cpc	r21, r24
    6fec:	10 f4       	brcc	.+4      	; 0x6ff2 <auto_mount+0x20c>
    6fee:	11 e0       	ldi	r17, 0x01	; 1
    6ff0:	07 c0       	rjmp	.+14     	; 0x7000 <auto_mount+0x21a>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    6ff2:	27 5f       	subi	r18, 0xF7	; 247
    6ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ff6:	40 40       	sbci	r20, 0x00	; 0
    6ff8:	50 40       	sbci	r21, 0x00	; 0
    6ffa:	08 f0       	brcs	.+2      	; 0x6ffe <auto_mount+0x218>
    6ffc:	a6 c0       	rjmp	.+332    	; 0x714a <auto_mount+0x364>
    6ffe:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    7000:	8a a1       	ldd	r24, Y+34	; 0x22
    7002:	9b a1       	ldd	r25, Y+35	; 0x23
    7004:	ac a1       	ldd	r26, Y+36	; 0x24
    7006:	bd a1       	ldd	r27, Y+37	; 0x25
    7008:	8a 0d       	add	r24, r10
    700a:	9b 1d       	adc	r25, r11
    700c:	ac 1d       	adc	r26, r12
    700e:	bd 1d       	adc	r27, r13
    7010:	8e a3       	std	Y+38, r24	; 0x26
    7012:	9f a3       	std	Y+39, r25	; 0x27
    7014:	a8 a7       	std	Y+40, r26	; 0x28
    7016:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    7018:	8f 81       	ldd	r24, Y+7	; 0x07
    701a:	98 85       	ldd	r25, Y+8	; 0x08
    701c:	b4 e0       	ldi	r27, 0x04	; 4
    701e:	96 95       	lsr	r25
    7020:	87 95       	ror	r24
    7022:	ba 95       	dec	r27
    7024:	e1 f7       	brne	.-8      	; 0x701e <auto_mount+0x238>
    7026:	a0 e0       	ldi	r26, 0x00	; 0
    7028:	b0 e0       	ldi	r27, 0x00	; 0
    702a:	2a a1       	ldd	r18, Y+34	; 0x22
    702c:	3b a1       	ldd	r19, Y+35	; 0x23
    702e:	4c a1       	ldd	r20, Y+36	; 0x24
    7030:	5d a1       	ldd	r21, Y+37	; 0x25
    7032:	82 0f       	add	r24, r18
    7034:	93 1f       	adc	r25, r19
    7036:	a4 1f       	adc	r26, r20
    7038:	b5 1f       	adc	r27, r21
    703a:	8a 0d       	add	r24, r10
    703c:	9b 1d       	adc	r25, r11
    703e:	ac 1d       	adc	r26, r12
    7040:	bd 1d       	adc	r27, r13
    7042:	8a a7       	std	Y+42, r24	; 0x2a
    7044:	9b a7       	std	Y+43, r25	; 0x2b
    7046:	ac a7       	std	Y+44, r26	; 0x2c
    7048:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    704a:	8f ef       	ldi	r24, 0xFF	; 255
    704c:	9f ef       	ldi	r25, 0xFF	; 255
    704e:	af ef       	ldi	r26, 0xFF	; 255
    7050:	bf ef       	ldi	r27, 0xFF	; 255
    7052:	8e 87       	std	Y+14, r24	; 0x0e
    7054:	9f 87       	std	Y+15, r25	; 0x0f
    7056:	a8 8b       	std	Y+16, r26	; 0x10
    7058:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    705a:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    705c:	13 30       	cpi	r17, 0x03	; 3
    705e:	09 f0       	breq	.+2      	; 0x7062 <auto_mount+0x27c>
    7060:	51 c0       	rjmp	.+162    	; 0x7104 <auto_mount+0x31e>
	 	fs->fsi_flag = 0;
    7062:	19 86       	std	Y+9, r1	; 0x09
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    7064:	ce 59       	subi	r28, 0x9E	; 158
    7066:	df 4f       	sbci	r29, 0xFF	; 255
    7068:	28 81       	ld	r18, Y
    706a:	39 81       	ldd	r19, Y+1	; 0x01
    706c:	c2 56       	subi	r28, 0x62	; 98
    706e:	d0 40       	sbci	r29, 0x00	; 0
    7070:	40 e0       	ldi	r20, 0x00	; 0
    7072:	50 e0       	ldi	r21, 0x00	; 0
    7074:	26 0d       	add	r18, r6
    7076:	37 1d       	adc	r19, r7
    7078:	48 1d       	adc	r20, r8
    707a:	59 1d       	adc	r21, r9
    707c:	2a 8b       	std	Y+18, r18	; 0x12
    707e:	3b 8b       	std	Y+19, r19	; 0x13
    7080:	4c 8b       	std	Y+20, r20	; 0x14
    7082:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    7084:	be 01       	movw	r22, r28
    7086:	6e 5c       	subi	r22, 0xCE	; 206
    7088:	7f 4f       	sbci	r23, 0xFF	; 255
    708a:	89 81       	ldd	r24, Y+1	; 0x01
    708c:	01 e0       	ldi	r16, 0x01	; 1
    708e:	0e 94 35 51 	call	0xa26a	; 0xa26a <disk_read>
    7092:	89 2b       	or	r24, r25
    7094:	b9 f5       	brne	.+110    	; 0x7104 <auto_mount+0x31e>
    7096:	c0 5d       	subi	r28, 0xD0	; 208
    7098:	dd 4f       	sbci	r29, 0xFD	; 253
    709a:	88 81       	ld	r24, Y
    709c:	99 81       	ldd	r25, Y+1	; 0x01
    709e:	c0 53       	subi	r28, 0x30	; 48
    70a0:	d2 40       	sbci	r29, 0x02	; 2
    70a2:	85 55       	subi	r24, 0x55	; 85
    70a4:	9a 4a       	sbci	r25, 0xAA	; 170
    70a6:	71 f5       	brne	.+92     	; 0x7104 <auto_mount+0x31e>
    70a8:	8a a9       	ldd	r24, Y+50	; 0x32
    70aa:	9b a9       	ldd	r25, Y+51	; 0x33
    70ac:	ac a9       	ldd	r26, Y+52	; 0x34
    70ae:	bd a9       	ldd	r27, Y+53	; 0x35
    70b0:	82 55       	subi	r24, 0x52	; 82
    70b2:	92 45       	sbci	r25, 0x52	; 82
    70b4:	a1 46       	sbci	r26, 0x61	; 97
    70b6:	b1 44       	sbci	r27, 0x41	; 65
    70b8:	29 f5       	brne	.+74     	; 0x7104 <auto_mount+0x31e>
    70ba:	ca 5e       	subi	r28, 0xEA	; 234
    70bc:	dd 4f       	sbci	r29, 0xFD	; 253
    70be:	88 81       	ld	r24, Y
    70c0:	99 81       	ldd	r25, Y+1	; 0x01
    70c2:	aa 81       	ldd	r26, Y+2	; 0x02
    70c4:	bb 81       	ldd	r27, Y+3	; 0x03
    70c6:	c6 51       	subi	r28, 0x16	; 22
    70c8:	d2 40       	sbci	r29, 0x02	; 2
    70ca:	82 57       	subi	r24, 0x72	; 114
    70cc:	92 47       	sbci	r25, 0x72	; 114
    70ce:	a1 44       	sbci	r26, 0x41	; 65
    70d0:	b1 46       	sbci	r27, 0x61	; 97
    70d2:	c1 f4       	brne	.+48     	; 0x7104 <auto_mount+0x31e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    70d4:	c2 5e       	subi	r28, 0xE2	; 226
    70d6:	dd 4f       	sbci	r29, 0xFD	; 253
    70d8:	88 81       	ld	r24, Y
    70da:	99 81       	ldd	r25, Y+1	; 0x01
    70dc:	aa 81       	ldd	r26, Y+2	; 0x02
    70de:	bb 81       	ldd	r27, Y+3	; 0x03
    70e0:	ce 51       	subi	r28, 0x1E	; 30
    70e2:	d2 40       	sbci	r29, 0x02	; 2
    70e4:	8a 87       	std	Y+10, r24	; 0x0a
    70e6:	9b 87       	std	Y+11, r25	; 0x0b
    70e8:	ac 87       	std	Y+12, r26	; 0x0c
    70ea:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    70ec:	c6 5e       	subi	r28, 0xE6	; 230
    70ee:	dd 4f       	sbci	r29, 0xFD	; 253
    70f0:	88 81       	ld	r24, Y
    70f2:	99 81       	ldd	r25, Y+1	; 0x01
    70f4:	aa 81       	ldd	r26, Y+2	; 0x02
    70f6:	bb 81       	ldd	r27, Y+3	; 0x03
    70f8:	ca 51       	subi	r28, 0x1A	; 26
    70fa:	d2 40       	sbci	r29, 0x02	; 2
    70fc:	8e 87       	std	Y+14, r24	; 0x0e
    70fe:	9f 87       	std	Y+15, r25	; 0x0f
    7100:	a8 8b       	std	Y+16, r26	; 0x10
    7102:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    7104:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    7106:	1e a6       	std	Y+46, r1	; 0x2e
    7108:	1f a6       	std	Y+47, r1	; 0x2f
    710a:	18 aa       	std	Y+48, r1	; 0x30
    710c:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    710e:	1e 8a       	std	Y+22, r1	; 0x16
    7110:	1f 8a       	std	Y+23, r1	; 0x17
    7112:	18 8e       	std	Y+24, r1	; 0x18
    7114:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    7116:	80 91 69 25 	lds	r24, 0x2569
    711a:	90 91 6a 25 	lds	r25, 0x256A
    711e:	01 96       	adiw	r24, 0x01	; 1
    7120:	80 93 69 25 	sts	0x2569, r24
    7124:	90 93 6a 25 	sts	0x256A, r25
    7128:	8d 83       	std	Y+5, r24	; 0x05
    712a:	9e 83       	std	Y+6, r25	; 0x06
    712c:	03 c0       	rjmp	.+6      	; 0x7134 <auto_mount+0x34e>
	res = FR_OK;

	return res;
    712e:	2a e0       	ldi	r18, 0x0A	; 10
    7130:	30 e0       	ldi	r19, 0x00	; 0
    7132:	05 c0       	rjmp	.+10     	; 0x713e <auto_mount+0x358>
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	30 e0       	ldi	r19, 0x00	; 0
    7138:	02 c0       	rjmp	.+4      	; 0x713e <auto_mount+0x358>
    713a:	2d e0       	ldi	r18, 0x0D	; 13
    713c:	30 e0       	ldi	r19, 0x00	; 0
}
    713e:	c9 01       	movw	r24, r18
    7140:	cd b7       	in	r28, 0x3d	; 61
    7142:	de b7       	in	r29, 0x3e	; 62
    7144:	ee e0       	ldi	r30, 0x0E	; 14
    7146:	0c 94 6b 58 	jmp	0xb0d6	; 0xb0d6 <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    714a:	c2 5a       	subi	r28, 0xA2	; 162
    714c:	df 4f       	sbci	r29, 0xFF	; 255
    714e:	88 81       	ld	r24, Y
    7150:	99 81       	ldd	r25, Y+1	; 0x01
    7152:	aa 81       	ldd	r26, Y+2	; 0x02
    7154:	bb 81       	ldd	r27, Y+3	; 0x03
    7156:	ce 55       	subi	r28, 0x5E	; 94
    7158:	d0 40       	sbci	r29, 0x00	; 0
    715a:	8e a3       	std	Y+38, r24	; 0x26
    715c:	9f a3       	std	Y+39, r25	; 0x27
    715e:	a8 a7       	std	Y+40, r26	; 0x28
    7160:	b9 a7       	std	Y+41, r27	; 0x29
    7162:	13 e0       	ldi	r17, 0x03	; 3
    7164:	59 cf       	rjmp	.-334    	; 0x7018 <auto_mount+0x232>

00007166 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7166:	a0 e0       	ldi	r26, 0x00	; 0
    7168:	b0 e0       	ldi	r27, 0x00	; 0
    716a:	e9 eb       	ldi	r30, 0xB9	; 185
    716c:	f8 e3       	ldi	r31, 0x38	; 56
    716e:	0c 94 4f 58 	jmp	0xb09e	; 0xb09e <__prologue_saves__+0x8>
    7172:	ec 01       	movw	r28, r24
    7174:	4a 01       	movw	r8, r20
    7176:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    7178:	ce a4       	ldd	r12, Y+46	; 0x2e
    717a:	df a4       	ldd	r13, Y+47	; 0x2f
    717c:	e8 a8       	ldd	r14, Y+48	; 0x30
    717e:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    7180:	c4 16       	cp	r12, r20
    7182:	d5 06       	cpc	r13, r21
    7184:	e6 06       	cpc	r14, r22
    7186:	f7 06       	cpc	r15, r23
    7188:	09 f4       	brne	.+2      	; 0x718c <move_window+0x26>
    718a:	4f c0       	rjmp	.+158    	; 0x722a <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    718c:	8c 81       	ldd	r24, Y+4	; 0x04
    718e:	88 23       	and	r24, r24
    7190:	a1 f1       	breq	.+104    	; 0x71fa <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    7192:	22 e3       	ldi	r18, 0x32	; 50
    7194:	62 2e       	mov	r6, r18
    7196:	71 2c       	mov	r7, r1
    7198:	6c 0e       	add	r6, r28
    719a:	7d 1e       	adc	r7, r29
    719c:	89 81       	ldd	r24, Y+1	; 0x01
    719e:	b3 01       	movw	r22, r6
    71a0:	a7 01       	movw	r20, r14
    71a2:	96 01       	movw	r18, r12
    71a4:	01 e0       	ldi	r16, 0x01	; 1
    71a6:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    71aa:	89 2b       	or	r24, r25
    71ac:	d9 f5       	brne	.+118    	; 0x7224 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    71ae:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    71b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    71b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    71b4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    71b6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    71b8:	2a a1       	ldd	r18, Y+34	; 0x22
    71ba:	3b a1       	ldd	r19, Y+35	; 0x23
    71bc:	4c a1       	ldd	r20, Y+36	; 0x24
    71be:	5d a1       	ldd	r21, Y+37	; 0x25
    71c0:	82 0f       	add	r24, r18
    71c2:	93 1f       	adc	r25, r19
    71c4:	a4 1f       	adc	r26, r20
    71c6:	b5 1f       	adc	r27, r21
    71c8:	c8 16       	cp	r12, r24
    71ca:	d9 06       	cpc	r13, r25
    71cc:	ea 06       	cpc	r14, r26
    71ce:	fb 06       	cpc	r15, r27
    71d0:	a0 f4       	brcc	.+40     	; 0x71fa <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    71d2:	1b 81       	ldd	r17, Y+3	; 0x03
    71d4:	10 c0       	rjmp	.+32     	; 0x71f6 <move_window+0x90>
					wsect += fs->sects_fat;
    71d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    71d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    71da:	ac 8d       	ldd	r26, Y+28	; 0x1c
    71dc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    71de:	c8 0e       	add	r12, r24
    71e0:	d9 1e       	adc	r13, r25
    71e2:	ea 1e       	adc	r14, r26
    71e4:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    71e6:	89 81       	ldd	r24, Y+1	; 0x01
    71e8:	b3 01       	movw	r22, r6
    71ea:	a7 01       	movw	r20, r14
    71ec:	96 01       	movw	r18, r12
    71ee:	01 e0       	ldi	r16, 0x01	; 1
    71f0:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    71f4:	11 50       	subi	r17, 0x01	; 1
    71f6:	12 30       	cpi	r17, 0x02	; 2
    71f8:	70 f7       	brcc	.-36     	; 0x71d6 <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    71fa:	81 14       	cp	r8, r1
    71fc:	91 04       	cpc	r9, r1
    71fe:	a1 04       	cpc	r10, r1
    7200:	b1 04       	cpc	r11, r1
    7202:	99 f0       	breq	.+38     	; 0x722a <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    7204:	be 01       	movw	r22, r28
    7206:	6e 5c       	subi	r22, 0xCE	; 206
    7208:	7f 4f       	sbci	r23, 0xFF	; 255
    720a:	89 81       	ldd	r24, Y+1	; 0x01
    720c:	a5 01       	movw	r20, r10
    720e:	94 01       	movw	r18, r8
    7210:	01 e0       	ldi	r16, 0x01	; 1
    7212:	0e 94 35 51 	call	0xa26a	; 0xa26a <disk_read>
    7216:	89 2b       	or	r24, r25
    7218:	29 f4       	brne	.+10     	; 0x7224 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    721a:	8e a6       	std	Y+46, r8	; 0x2e
    721c:	9f a6       	std	Y+47, r9	; 0x2f
    721e:	a8 aa       	std	Y+48, r10	; 0x30
    7220:	b9 aa       	std	Y+49, r11	; 0x31
    7222:	03 c0       	rjmp	.+6      	; 0x722a <move_window+0xc4>
    7224:	21 e0       	ldi	r18, 0x01	; 1
    7226:	30 e0       	ldi	r19, 0x00	; 0
    7228:	02 c0       	rjmp	.+4      	; 0x722e <move_window+0xc8>
    722a:	20 e0       	ldi	r18, 0x00	; 0
    722c:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    722e:	c9 01       	movw	r24, r18
    7230:	cd b7       	in	r28, 0x3d	; 61
    7232:	de b7       	in	r29, 0x3e	; 62
    7234:	ee e0       	ldi	r30, 0x0E	; 14
    7236:	0c 94 6b 58 	jmp	0xb0d6	; 0xb0d6 <__epilogue_restores__+0x8>

0000723a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    723a:	a0 e0       	ldi	r26, 0x00	; 0
    723c:	b0 e0       	ldi	r27, 0x00	; 0
    723e:	e3 e2       	ldi	r30, 0x23	; 35
    7240:	f9 e3       	ldi	r31, 0x39	; 57
    7242:	0c 94 50 58 	jmp	0xb0a0	; 0xb0a0 <__prologue_saves__+0xa>
    7246:	4c 01       	movw	r8, r24
    7248:	7a 01       	movw	r14, r20
    724a:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    724c:	42 30       	cpi	r20, 0x02	; 2
    724e:	51 05       	cpc	r21, r1
    7250:	61 05       	cpc	r22, r1
    7252:	71 05       	cpc	r23, r1
    7254:	08 f4       	brcc	.+2      	; 0x7258 <get_fat+0x1e>
    7256:	97 c0       	rjmp	.+302    	; 0x7386 <get_fat+0x14c>
    7258:	f4 01       	movw	r30, r8
    725a:	86 8d       	ldd	r24, Z+30	; 0x1e
    725c:	97 8d       	ldd	r25, Z+31	; 0x1f
    725e:	a0 a1       	ldd	r26, Z+32	; 0x20
    7260:	b1 a1       	ldd	r27, Z+33	; 0x21
    7262:	48 17       	cp	r20, r24
    7264:	59 07       	cpc	r21, r25
    7266:	6a 07       	cpc	r22, r26
    7268:	7b 07       	cpc	r23, r27
    726a:	08 f0       	brcs	.+2      	; 0x726e <get_fat+0x34>
    726c:	8c c0       	rjmp	.+280    	; 0x7386 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
    726e:	a2 a0       	ldd	r10, Z+34	; 0x22
    7270:	b3 a0       	ldd	r11, Z+35	; 0x23
    7272:	c4 a0       	ldd	r12, Z+36	; 0x24
    7274:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
    7276:	80 81       	ld	r24, Z
    7278:	82 30       	cpi	r24, 0x02	; 2
    727a:	09 f4       	brne	.+2      	; 0x727e <get_fat+0x44>
    727c:	4d c0       	rjmp	.+154    	; 0x7318 <get_fat+0xde>
    727e:	83 30       	cpi	r24, 0x03	; 3
    7280:	09 f4       	brne	.+2      	; 0x7284 <get_fat+0x4a>
    7282:	63 c0       	rjmp	.+198    	; 0x734a <get_fat+0x110>
    7284:	81 30       	cpi	r24, 0x01	; 1
    7286:	09 f0       	breq	.+2      	; 0x728a <get_fat+0x50>
    7288:	83 c0       	rjmp	.+262    	; 0x7390 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    728a:	ea 01       	movw	r28, r20
    728c:	d6 95       	lsr	r29
    728e:	c7 95       	ror	r28
    7290:	c4 0f       	add	r28, r20
    7292:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    7294:	ae 01       	movw	r20, r28
    7296:	45 2f       	mov	r20, r21
    7298:	55 27       	eor	r21, r21
    729a:	46 95       	lsr	r20
    729c:	60 e0       	ldi	r22, 0x00	; 0
    729e:	70 e0       	ldi	r23, 0x00	; 0
    72a0:	4a 0d       	add	r20, r10
    72a2:	5b 1d       	adc	r21, r11
    72a4:	6c 1d       	adc	r22, r12
    72a6:	7d 1d       	adc	r23, r13
    72a8:	c4 01       	movw	r24, r8
    72aa:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    72ae:	89 2b       	or	r24, r25
    72b0:	09 f0       	breq	.+2      	; 0x72b4 <get_fat+0x7a>
    72b2:	6e c0       	rjmp	.+220    	; 0x7390 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    72b4:	fe 01       	movw	r30, r28
    72b6:	f1 70       	andi	r31, 0x01	; 1
    72b8:	e8 0d       	add	r30, r8
    72ba:	f9 1d       	adc	r31, r9
    72bc:	72 a8       	ldd	r7, Z+50	; 0x32
    72be:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    72c0:	ae 01       	movw	r20, r28
    72c2:	45 2f       	mov	r20, r21
    72c4:	55 27       	eor	r21, r21
    72c6:	46 95       	lsr	r20
    72c8:	60 e0       	ldi	r22, 0x00	; 0
    72ca:	70 e0       	ldi	r23, 0x00	; 0
    72cc:	4a 0d       	add	r20, r10
    72ce:	5b 1d       	adc	r21, r11
    72d0:	6c 1d       	adc	r22, r12
    72d2:	7d 1d       	adc	r23, r13
    72d4:	c4 01       	movw	r24, r8
    72d6:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    72da:	89 2b       	or	r24, r25
    72dc:	09 f0       	breq	.+2      	; 0x72e0 <get_fat+0xa6>
    72de:	58 c0       	rjmp	.+176    	; 0x7390 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    72e0:	67 2d       	mov	r22, r7
    72e2:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    72e4:	d1 70       	andi	r29, 0x01	; 1
    72e6:	c8 0d       	add	r28, r8
    72e8:	d9 1d       	adc	r29, r9
    72ea:	9a a9       	ldd	r25, Y+50	; 0x32
    72ec:	80 e0       	ldi	r24, 0x00	; 0
    72ee:	68 2b       	or	r22, r24
    72f0:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    72f2:	c7 01       	movw	r24, r14
    72f4:	81 70       	andi	r24, 0x01	; 1
    72f6:	90 70       	andi	r25, 0x00	; 0
    72f8:	89 2b       	or	r24, r25
    72fa:	39 f0       	breq	.+14     	; 0x730a <get_fat+0xd0>
    72fc:	84 e0       	ldi	r24, 0x04	; 4
    72fe:	76 95       	lsr	r23
    7300:	67 95       	ror	r22
    7302:	8a 95       	dec	r24
    7304:	e1 f7       	brne	.-8      	; 0x72fe <get_fat+0xc4>
    7306:	9b 01       	movw	r18, r22
    7308:	1d c0       	rjmp	.+58     	; 0x7344 <get_fat+0x10a>
    730a:	9b 01       	movw	r18, r22
    730c:	40 e0       	ldi	r20, 0x00	; 0
    730e:	50 e0       	ldi	r21, 0x00	; 0
    7310:	3f 70       	andi	r19, 0x0F	; 15
    7312:	40 70       	andi	r20, 0x00	; 0
    7314:	50 70       	andi	r21, 0x00	; 0
    7316:	40 c0       	rjmp	.+128    	; 0x7398 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    7318:	45 2f       	mov	r20, r21
    731a:	56 2f       	mov	r21, r22
    731c:	67 2f       	mov	r22, r23
    731e:	77 27       	eor	r23, r23
    7320:	4a 0d       	add	r20, r10
    7322:	5b 1d       	adc	r21, r11
    7324:	6c 1d       	adc	r22, r12
    7326:	7d 1d       	adc	r23, r13
    7328:	c4 01       	movw	r24, r8
    732a:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    732e:	89 2b       	or	r24, r25
    7330:	79 f5       	brne	.+94     	; 0x7390 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    7332:	f7 01       	movw	r30, r14
    7334:	ee 0f       	add	r30, r30
    7336:	ff 1f       	adc	r31, r31
    7338:	f1 70       	andi	r31, 0x01	; 1
    733a:	e8 0d       	add	r30, r8
    733c:	f9 1d       	adc	r31, r9
    733e:	82 a9       	ldd	r24, Z+50	; 0x32
    7340:	93 a9       	ldd	r25, Z+51	; 0x33
    7342:	9c 01       	movw	r18, r24
    7344:	40 e0       	ldi	r20, 0x00	; 0
    7346:	50 e0       	ldi	r21, 0x00	; 0
    7348:	27 c0       	rjmp	.+78     	; 0x7398 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    734a:	e7 e0       	ldi	r30, 0x07	; 7
    734c:	76 95       	lsr	r23
    734e:	67 95       	ror	r22
    7350:	57 95       	ror	r21
    7352:	47 95       	ror	r20
    7354:	ea 95       	dec	r30
    7356:	d1 f7       	brne	.-12     	; 0x734c <get_fat+0x112>
    7358:	4a 0d       	add	r20, r10
    735a:	5b 1d       	adc	r21, r11
    735c:	6c 1d       	adc	r22, r12
    735e:	7d 1d       	adc	r23, r13
    7360:	c4 01       	movw	r24, r8
    7362:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    7366:	89 2b       	or	r24, r25
    7368:	99 f4       	brne	.+38     	; 0x7390 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    736a:	f7 01       	movw	r30, r14
    736c:	ee 0f       	add	r30, r30
    736e:	ff 1f       	adc	r31, r31
    7370:	ee 0f       	add	r30, r30
    7372:	ff 1f       	adc	r31, r31
    7374:	f1 70       	andi	r31, 0x01	; 1
    7376:	e8 0d       	add	r30, r8
    7378:	f9 1d       	adc	r31, r9
    737a:	22 a9       	ldd	r18, Z+50	; 0x32
    737c:	33 a9       	ldd	r19, Z+51	; 0x33
    737e:	44 a9       	ldd	r20, Z+52	; 0x34
    7380:	55 a9       	ldd	r21, Z+53	; 0x35
    7382:	5f 70       	andi	r21, 0x0F	; 15
    7384:	09 c0       	rjmp	.+18     	; 0x7398 <get_fat+0x15e>
    7386:	21 e0       	ldi	r18, 0x01	; 1
    7388:	30 e0       	ldi	r19, 0x00	; 0
    738a:	40 e0       	ldi	r20, 0x00	; 0
    738c:	50 e0       	ldi	r21, 0x00	; 0
    738e:	04 c0       	rjmp	.+8      	; 0x7398 <get_fat+0x15e>
    7390:	2f ef       	ldi	r18, 0xFF	; 255
    7392:	3f ef       	ldi	r19, 0xFF	; 255
    7394:	4f ef       	ldi	r20, 0xFF	; 255
    7396:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    7398:	b9 01       	movw	r22, r18
    739a:	ca 01       	movw	r24, r20
    739c:	cd b7       	in	r28, 0x3d	; 61
    739e:	de b7       	in	r29, 0x3e	; 62
    73a0:	ed e0       	ldi	r30, 0x0D	; 13
    73a2:	0c 94 6c 58 	jmp	0xb0d8	; 0xb0d8 <__epilogue_restores__+0xa>

000073a6 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    73a6:	a0 e0       	ldi	r26, 0x00	; 0
    73a8:	b0 e0       	ldi	r27, 0x00	; 0
    73aa:	e9 ed       	ldi	r30, 0xD9	; 217
    73ac:	f9 e3       	ldi	r31, 0x39	; 57
    73ae:	0c 94 53 58 	jmp	0xb0a6	; 0xb0a6 <__prologue_saves__+0x10>
    73b2:	5c 01       	movw	r10, r24
    73b4:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    73b6:	dc 01       	movw	r26, r24
    73b8:	14 96       	adiw	r26, 0x04	; 4
    73ba:	6d 93       	st	X+, r22
    73bc:	7c 93       	st	X, r23
    73be:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    73c0:	16 96       	adiw	r26, 0x06	; 6
    73c2:	4d 91       	ld	r20, X+
    73c4:	5d 91       	ld	r21, X+
    73c6:	6d 91       	ld	r22, X+
    73c8:	7c 91       	ld	r23, X
    73ca:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    73cc:	41 30       	cpi	r20, 0x01	; 1
    73ce:	51 05       	cpc	r21, r1
    73d0:	61 05       	cpc	r22, r1
    73d2:	71 05       	cpc	r23, r1
    73d4:	09 f4       	brne	.+2      	; 0x73d8 <dir_seek+0x32>
    73d6:	d5 c0       	rjmp	.+426    	; 0x7582 <dir_seek+0x1dc>
    73d8:	ed 91       	ld	r30, X+
    73da:	fc 91       	ld	r31, X
    73dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    73de:	97 8d       	ldd	r25, Z+31	; 0x1f
    73e0:	a0 a1       	ldd	r26, Z+32	; 0x20
    73e2:	b1 a1       	ldd	r27, Z+33	; 0x21
    73e4:	48 17       	cp	r20, r24
    73e6:	59 07       	cpc	r21, r25
    73e8:	6a 07       	cpc	r22, r26
    73ea:	7b 07       	cpc	r23, r27
    73ec:	08 f0       	brcs	.+2      	; 0x73f0 <dir_seek+0x4a>
    73ee:	c9 c0       	rjmp	.+402    	; 0x7582 <dir_seek+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    73f0:	41 15       	cp	r20, r1
    73f2:	51 05       	cpc	r21, r1
    73f4:	61 05       	cpc	r22, r1
    73f6:	71 05       	cpc	r23, r1
    73f8:	81 f5       	brne	.+96     	; 0x745a <dir_seek+0xb4>
    73fa:	80 81       	ld	r24, Z
    73fc:	83 30       	cpi	r24, 0x03	; 3
    73fe:	49 f4       	brne	.+18     	; 0x7412 <dir_seek+0x6c>
		clst = dj->fs->dirbase;
    7400:	46 a1       	ldd	r20, Z+38	; 0x26
    7402:	57 a1       	ldd	r21, Z+39	; 0x27
    7404:	60 a5       	ldd	r22, Z+40	; 0x28
    7406:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    7408:	41 15       	cp	r20, r1
    740a:	51 05       	cpc	r21, r1
    740c:	61 05       	cpc	r22, r1
    740e:	71 05       	cpc	r23, r1
    7410:	21 f5       	brne	.+72     	; 0x745a <dir_seek+0xb4>
		dj->clust = clst;
    7412:	f5 01       	movw	r30, r10
    7414:	12 86       	std	Z+10, r1	; 0x0a
    7416:	13 86       	std	Z+11, r1	; 0x0b
    7418:	14 86       	std	Z+12, r1	; 0x0c
    741a:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    741c:	01 90       	ld	r0, Z+
    741e:	f0 81       	ld	r31, Z
    7420:	e0 2d       	mov	r30, r0
    7422:	87 81       	ldd	r24, Z+7	; 0x07
    7424:	90 85       	ldd	r25, Z+8	; 0x08
    7426:	c8 16       	cp	r12, r24
    7428:	d9 06       	cpc	r13, r25
    742a:	08 f0       	brcs	.+2      	; 0x742e <dir_seek+0x88>
    742c:	aa c0       	rjmp	.+340    	; 0x7582 <dir_seek+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    742e:	c6 01       	movw	r24, r12
    7430:	a4 e0       	ldi	r26, 0x04	; 4
    7432:	96 95       	lsr	r25
    7434:	87 95       	ror	r24
    7436:	aa 95       	dec	r26
    7438:	e1 f7       	brne	.-8      	; 0x7432 <dir_seek+0x8c>
    743a:	a0 e0       	ldi	r26, 0x00	; 0
    743c:	b0 e0       	ldi	r27, 0x00	; 0
    743e:	26 a1       	ldd	r18, Z+38	; 0x26
    7440:	37 a1       	ldd	r19, Z+39	; 0x27
    7442:	40 a5       	ldd	r20, Z+40	; 0x28
    7444:	51 a5       	ldd	r21, Z+41	; 0x29
    7446:	82 0f       	add	r24, r18
    7448:	93 1f       	adc	r25, r19
    744a:	a4 1f       	adc	r26, r20
    744c:	b5 1f       	adc	r27, r21
    744e:	f5 01       	movw	r30, r10
    7450:	86 87       	std	Z+14, r24	; 0x0e
    7452:	97 87       	std	Z+15, r25	; 0x0f
    7454:	a0 8b       	std	Z+16, r26	; 0x10
    7456:	b1 8b       	std	Z+17, r27	; 0x11
    7458:	7b c0       	rjmp	.+246    	; 0x7550 <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    745a:	82 81       	ldd	r24, Z+2	; 0x02
    745c:	08 2f       	mov	r16, r24
    745e:	10 e0       	ldi	r17, 0x00	; 0
    7460:	f4 e0       	ldi	r31, 0x04	; 4
    7462:	00 0f       	add	r16, r16
    7464:	11 1f       	adc	r17, r17
    7466:	fa 95       	dec	r31
    7468:	e1 f7       	brne	.-8      	; 0x7462 <dir_seek+0xbc>
    746a:	25 c0       	rjmp	.+74     	; 0x74b6 <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    746c:	ce 01       	movw	r24, r28
    746e:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    7472:	ab 01       	movw	r20, r22
    7474:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7476:	4f 3f       	cpi	r20, 0xFF	; 255
    7478:	ff ef       	ldi	r31, 0xFF	; 255
    747a:	5f 07       	cpc	r21, r31
    747c:	ff ef       	ldi	r31, 0xFF	; 255
    747e:	6f 07       	cpc	r22, r31
    7480:	ff ef       	ldi	r31, 0xFF	; 255
    7482:	7f 07       	cpc	r23, r31
    7484:	19 f4       	brne	.+6      	; 0x748c <dir_seek+0xe6>
    7486:	21 e0       	ldi	r18, 0x01	; 1
    7488:	30 e0       	ldi	r19, 0x00	; 0
    748a:	7d c0       	rjmp	.+250    	; 0x7586 <dir_seek+0x1e0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    748c:	42 30       	cpi	r20, 0x02	; 2
    748e:	51 05       	cpc	r21, r1
    7490:	61 05       	cpc	r22, r1
    7492:	71 05       	cpc	r23, r1
    7494:	08 f4       	brcc	.+2      	; 0x7498 <dir_seek+0xf2>
    7496:	75 c0       	rjmp	.+234    	; 0x7582 <dir_seek+0x1dc>
    7498:	d5 01       	movw	r26, r10
    749a:	ed 91       	ld	r30, X+
    749c:	fc 91       	ld	r31, X
    749e:	86 8d       	ldd	r24, Z+30	; 0x1e
    74a0:	97 8d       	ldd	r25, Z+31	; 0x1f
    74a2:	a0 a1       	ldd	r26, Z+32	; 0x20
    74a4:	b1 a1       	ldd	r27, Z+33	; 0x21
    74a6:	48 17       	cp	r20, r24
    74a8:	59 07       	cpc	r21, r25
    74aa:	6a 07       	cpc	r22, r26
    74ac:	7b 07       	cpc	r23, r27
    74ae:	08 f0       	brcs	.+2      	; 0x74b2 <dir_seek+0x10c>
    74b0:	68 c0       	rjmp	.+208    	; 0x7582 <dir_seek+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    74b2:	c0 1a       	sub	r12, r16
    74b4:	d1 0a       	sbc	r13, r17
    74b6:	f5 01       	movw	r30, r10
    74b8:	c0 81       	ld	r28, Z
    74ba:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    74bc:	c0 16       	cp	r12, r16
    74be:	d1 06       	cpc	r13, r17
    74c0:	a8 f6       	brcc	.-86     	; 0x746c <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    74c2:	d5 01       	movw	r26, r10
    74c4:	1a 96       	adiw	r26, 0x0a	; 10
    74c6:	4d 93       	st	X+, r20
    74c8:	5d 93       	st	X+, r21
    74ca:	6d 93       	st	X+, r22
    74cc:	7c 93       	st	X, r23
    74ce:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    74d0:	ee ef       	ldi	r30, 0xFE	; 254
    74d2:	ee 2e       	mov	r14, r30
    74d4:	ef ef       	ldi	r30, 0xFF	; 255
    74d6:	fe 2e       	mov	r15, r30
    74d8:	ef ef       	ldi	r30, 0xFF	; 255
    74da:	0e 2f       	mov	r16, r30
    74dc:	ef ef       	ldi	r30, 0xFF	; 255
    74de:	1e 2f       	mov	r17, r30
    74e0:	e4 0e       	add	r14, r20
    74e2:	f5 1e       	adc	r15, r21
    74e4:	06 1f       	adc	r16, r22
    74e6:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    74e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    74ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    74ec:	a8 a1       	ldd	r26, Y+32	; 0x20
    74ee:	b9 a1       	ldd	r27, Y+33	; 0x21
    74f0:	02 97       	sbiw	r24, 0x02	; 2
    74f2:	a1 09       	sbc	r26, r1
    74f4:	b1 09       	sbc	r27, r1
    74f6:	e8 16       	cp	r14, r24
    74f8:	f9 06       	cpc	r15, r25
    74fa:	0a 07       	cpc	r16, r26
    74fc:	1b 07       	cpc	r17, r27
    74fe:	28 f0       	brcs	.+10     	; 0x750a <dir_seek+0x164>
    7500:	20 e0       	ldi	r18, 0x00	; 0
    7502:	30 e0       	ldi	r19, 0x00	; 0
    7504:	40 e0       	ldi	r20, 0x00	; 0
    7506:	50 e0       	ldi	r21, 0x00	; 0
    7508:	12 c0       	rjmp	.+36     	; 0x752e <dir_seek+0x188>
	return clst * fs->csize + fs->database;
    750a:	2a 81       	ldd	r18, Y+2	; 0x02
    750c:	30 e0       	ldi	r19, 0x00	; 0
    750e:	40 e0       	ldi	r20, 0x00	; 0
    7510:	50 e0       	ldi	r21, 0x00	; 0
    7512:	c8 01       	movw	r24, r16
    7514:	b7 01       	movw	r22, r14
    7516:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    751a:	9b 01       	movw	r18, r22
    751c:	ac 01       	movw	r20, r24
    751e:	8a a5       	ldd	r24, Y+42	; 0x2a
    7520:	9b a5       	ldd	r25, Y+43	; 0x2b
    7522:	ac a5       	ldd	r26, Y+44	; 0x2c
    7524:	bd a5       	ldd	r27, Y+45	; 0x2d
    7526:	28 0f       	add	r18, r24
    7528:	39 1f       	adc	r19, r25
    752a:	4a 1f       	adc	r20, r26
    752c:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    752e:	c6 01       	movw	r24, r12
    7530:	64 e0       	ldi	r22, 0x04	; 4
    7532:	96 95       	lsr	r25
    7534:	87 95       	ror	r24
    7536:	6a 95       	dec	r22
    7538:	e1 f7       	brne	.-8      	; 0x7532 <dir_seek+0x18c>
    753a:	a0 e0       	ldi	r26, 0x00	; 0
    753c:	b0 e0       	ldi	r27, 0x00	; 0
    753e:	28 0f       	add	r18, r24
    7540:	39 1f       	adc	r19, r25
    7542:	4a 1f       	adc	r20, r26
    7544:	5b 1f       	adc	r21, r27
    7546:	f5 01       	movw	r30, r10
    7548:	26 87       	std	Z+14, r18	; 0x0e
    754a:	37 87       	std	Z+15, r19	; 0x0f
    754c:	40 8b       	std	Z+16, r20	; 0x10
    754e:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    7550:	ff e0       	ldi	r31, 0x0F	; 15
    7552:	cf 22       	and	r12, r31
    7554:	dd 24       	eor	r13, r13
    7556:	45 e0       	ldi	r20, 0x05	; 5
    7558:	cc 0c       	add	r12, r12
    755a:	dd 1c       	adc	r13, r13
    755c:	4a 95       	dec	r20
    755e:	e1 f7       	brne	.-8      	; 0x7558 <dir_seek+0x1b2>
    7560:	82 e3       	ldi	r24, 0x32	; 50
    7562:	90 e0       	ldi	r25, 0x00	; 0
    7564:	c8 0e       	add	r12, r24
    7566:	d9 1e       	adc	r13, r25
    7568:	d5 01       	movw	r26, r10
    756a:	8d 91       	ld	r24, X+
    756c:	9c 91       	ld	r25, X
    756e:	11 97       	sbiw	r26, 0x01	; 1
    7570:	8c 0d       	add	r24, r12
    7572:	9d 1d       	adc	r25, r13
    7574:	52 96       	adiw	r26, 0x12	; 18
    7576:	8d 93       	st	X+, r24
    7578:	9c 93       	st	X, r25
    757a:	53 97       	sbiw	r26, 0x13	; 19
    757c:	20 e0       	ldi	r18, 0x00	; 0
    757e:	30 e0       	ldi	r19, 0x00	; 0
    7580:	02 c0       	rjmp	.+4      	; 0x7586 <dir_seek+0x1e0>

	return FR_OK;	/* Seek succeeded */
    7582:	22 e0       	ldi	r18, 0x02	; 2
    7584:	30 e0       	ldi	r19, 0x00	; 0
}
    7586:	c9 01       	movw	r24, r18
    7588:	cd b7       	in	r28, 0x3d	; 61
    758a:	de b7       	in	r29, 0x3e	; 62
    758c:	ea e0       	ldi	r30, 0x0A	; 10
    758e:	0c 94 6f 58 	jmp	0xb0de	; 0xb0de <__epilogue_restores__+0x10>

00007592 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7592:	a0 e0       	ldi	r26, 0x00	; 0
    7594:	b0 e0       	ldi	r27, 0x00	; 0
    7596:	ef ec       	ldi	r30, 0xCF	; 207
    7598:	fa e3       	ldi	r31, 0x3A	; 58
    759a:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    759e:	5c 01       	movw	r10, r24
    75a0:	6a 01       	movw	r12, r20
    75a2:	7b 01       	movw	r14, r22
    75a4:	38 01       	movw	r6, r16
    75a6:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    75a8:	42 30       	cpi	r20, 0x02	; 2
    75aa:	51 05       	cpc	r21, r1
    75ac:	61 05       	cpc	r22, r1
    75ae:	71 05       	cpc	r23, r1
    75b0:	08 f4       	brcc	.+2      	; 0x75b4 <put_fat+0x22>
    75b2:	b1 c0       	rjmp	.+354    	; 0x7716 <put_fat+0x184>
    75b4:	f5 01       	movw	r30, r10
    75b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    75b8:	97 8d       	ldd	r25, Z+31	; 0x1f
    75ba:	a0 a1       	ldd	r26, Z+32	; 0x20
    75bc:	b1 a1       	ldd	r27, Z+33	; 0x21
    75be:	48 17       	cp	r20, r24
    75c0:	59 07       	cpc	r21, r25
    75c2:	6a 07       	cpc	r22, r26
    75c4:	7b 07       	cpc	r23, r27
    75c6:	08 f0       	brcs	.+2      	; 0x75ca <put_fat+0x38>
    75c8:	a6 c0       	rjmp	.+332    	; 0x7716 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    75ca:	22 a0       	ldd	r2, Z+34	; 0x22
    75cc:	33 a0       	ldd	r3, Z+35	; 0x23
    75ce:	44 a0       	ldd	r4, Z+36	; 0x24
    75d0:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
    75d2:	80 81       	ld	r24, Z
    75d4:	82 30       	cpi	r24, 0x02	; 2
    75d6:	09 f4       	brne	.+2      	; 0x75da <put_fat+0x48>
    75d8:	66 c0       	rjmp	.+204    	; 0x76a6 <put_fat+0x114>
    75da:	83 30       	cpi	r24, 0x03	; 3
    75dc:	09 f4       	brne	.+2      	; 0x75e0 <put_fat+0x4e>
    75de:	7a c0       	rjmp	.+244    	; 0x76d4 <put_fat+0x142>
    75e0:	81 30       	cpi	r24, 0x01	; 1
    75e2:	19 f0       	breq	.+6      	; 0x75ea <put_fat+0x58>
    75e4:	42 e0       	ldi	r20, 0x02	; 2
    75e6:	50 e0       	ldi	r21, 0x00	; 0
    75e8:	92 c0       	rjmp	.+292    	; 0x770e <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    75ea:	ea 01       	movw	r28, r20
    75ec:	d6 95       	lsr	r29
    75ee:	c7 95       	ror	r28
    75f0:	c4 0f       	add	r28, r20
    75f2:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    75f4:	ae 01       	movw	r20, r28
    75f6:	45 2f       	mov	r20, r21
    75f8:	55 27       	eor	r21, r21
    75fa:	46 95       	lsr	r20
    75fc:	60 e0       	ldi	r22, 0x00	; 0
    75fe:	70 e0       	ldi	r23, 0x00	; 0
    7600:	42 0d       	add	r20, r2
    7602:	53 1d       	adc	r21, r3
    7604:	64 1d       	adc	r22, r4
    7606:	75 1d       	adc	r23, r5
    7608:	c5 01       	movw	r24, r10
    760a:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    760e:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7610:	00 97       	sbiw	r24, 0x00	; 0
    7612:	09 f0       	breq	.+2      	; 0x7616 <put_fat+0x84>
    7614:	7c c0       	rjmp	.+248    	; 0x770e <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7616:	de 01       	movw	r26, r28
    7618:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    761a:	86 01       	movw	r16, r12
    761c:	01 70       	andi	r16, 0x01	; 1
    761e:	10 70       	andi	r17, 0x00	; 0
    7620:	01 15       	cp	r16, r1
    7622:	11 05       	cpc	r17, r1
    7624:	51 f0       	breq	.+20     	; 0x763a <put_fat+0xa8>
    7626:	f5 01       	movw	r30, r10
    7628:	ea 0f       	add	r30, r26
    762a:	fb 1f       	adc	r31, r27
    762c:	82 a9       	ldd	r24, Z+50	; 0x32
    762e:	8f 70       	andi	r24, 0x0F	; 15
    7630:	96 2d       	mov	r25, r6
    7632:	92 95       	swap	r25
    7634:	90 7f       	andi	r25, 0xF0	; 240
    7636:	98 2b       	or	r25, r24
    7638:	01 c0       	rjmp	.+2      	; 0x763c <put_fat+0xaa>
    763a:	96 2d       	mov	r25, r6
    763c:	aa 0d       	add	r26, r10
    763e:	bb 1d       	adc	r27, r11
    7640:	d2 96       	adiw	r26, 0x32	; 50
    7642:	9c 93       	st	X, r25
			bc++;
    7644:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    7646:	81 e0       	ldi	r24, 0x01	; 1
    7648:	f5 01       	movw	r30, r10
    764a:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    764c:	ae 01       	movw	r20, r28
    764e:	45 2f       	mov	r20, r21
    7650:	55 27       	eor	r21, r21
    7652:	46 95       	lsr	r20
    7654:	60 e0       	ldi	r22, 0x00	; 0
    7656:	70 e0       	ldi	r23, 0x00	; 0
    7658:	42 0d       	add	r20, r2
    765a:	53 1d       	adc	r21, r3
    765c:	64 1d       	adc	r22, r4
    765e:	75 1d       	adc	r23, r5
    7660:	c5 01       	movw	r24, r10
    7662:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    7666:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7668:	00 97       	sbiw	r24, 0x00	; 0
    766a:	09 f0       	breq	.+2      	; 0x766e <put_fat+0xdc>
    766c:	50 c0       	rjmp	.+160    	; 0x770e <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    766e:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7670:	01 15       	cp	r16, r1
    7672:	11 05       	cpc	r17, r1
    7674:	49 f0       	breq	.+18     	; 0x7688 <put_fat+0xf6>
    7676:	64 e0       	ldi	r22, 0x04	; 4
    7678:	96 94       	lsr	r9
    767a:	87 94       	ror	r8
    767c:	77 94       	ror	r7
    767e:	67 94       	ror	r6
    7680:	6a 95       	dec	r22
    7682:	d1 f7       	brne	.-12     	; 0x7678 <put_fat+0xe6>
    7684:	66 2d       	mov	r22, r6
    7686:	0b c0       	rjmp	.+22     	; 0x769e <put_fat+0x10c>
    7688:	f5 01       	movw	r30, r10
    768a:	ec 0f       	add	r30, r28
    768c:	fd 1f       	adc	r31, r29
    768e:	62 a9       	ldd	r22, Z+50	; 0x32
    7690:	60 7f       	andi	r22, 0xF0	; 240
    7692:	bb 27       	eor	r27, r27
    7694:	a9 2d       	mov	r26, r9
    7696:	98 2d       	mov	r25, r8
    7698:	87 2d       	mov	r24, r7
    769a:	8f 70       	andi	r24, 0x0F	; 15
    769c:	68 2b       	or	r22, r24
    769e:	ca 0d       	add	r28, r10
    76a0:	db 1d       	adc	r29, r11
    76a2:	6a ab       	std	Y+50, r22	; 0x32
    76a4:	34 c0       	rjmp	.+104    	; 0x770e <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    76a6:	45 2f       	mov	r20, r21
    76a8:	56 2f       	mov	r21, r22
    76aa:	67 2f       	mov	r22, r23
    76ac:	77 27       	eor	r23, r23
    76ae:	42 0d       	add	r20, r2
    76b0:	53 1d       	adc	r21, r3
    76b2:	64 1d       	adc	r22, r4
    76b4:	75 1d       	adc	r23, r5
    76b6:	c5 01       	movw	r24, r10
    76b8:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    76bc:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    76be:	00 97       	sbiw	r24, 0x00	; 0
    76c0:	31 f5       	brne	.+76     	; 0x770e <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    76c2:	f6 01       	movw	r30, r12
    76c4:	ee 0f       	add	r30, r30
    76c6:	ff 1f       	adc	r31, r31
    76c8:	f1 70       	andi	r31, 0x01	; 1
    76ca:	ea 0d       	add	r30, r10
    76cc:	fb 1d       	adc	r31, r11
    76ce:	62 aa       	std	Z+50, r6	; 0x32
    76d0:	73 aa       	std	Z+51, r7	; 0x33
    76d2:	1d c0       	rjmp	.+58     	; 0x770e <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    76d4:	87 e0       	ldi	r24, 0x07	; 7
    76d6:	76 95       	lsr	r23
    76d8:	67 95       	ror	r22
    76da:	57 95       	ror	r21
    76dc:	47 95       	ror	r20
    76de:	8a 95       	dec	r24
    76e0:	d1 f7       	brne	.-12     	; 0x76d6 <put_fat+0x144>
    76e2:	42 0d       	add	r20, r2
    76e4:	53 1d       	adc	r21, r3
    76e6:	64 1d       	adc	r22, r4
    76e8:	75 1d       	adc	r23, r5
    76ea:	c5 01       	movw	r24, r10
    76ec:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    76f0:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    76f2:	00 97       	sbiw	r24, 0x00	; 0
    76f4:	61 f4       	brne	.+24     	; 0x770e <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    76f6:	f6 01       	movw	r30, r12
    76f8:	ee 0f       	add	r30, r30
    76fa:	ff 1f       	adc	r31, r31
    76fc:	ee 0f       	add	r30, r30
    76fe:	ff 1f       	adc	r31, r31
    7700:	f1 70       	andi	r31, 0x01	; 1
    7702:	ea 0d       	add	r30, r10
    7704:	fb 1d       	adc	r31, r11
    7706:	62 aa       	std	Z+50, r6	; 0x32
    7708:	73 aa       	std	Z+51, r7	; 0x33
    770a:	84 aa       	std	Z+52, r8	; 0x34
    770c:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    770e:	81 e0       	ldi	r24, 0x01	; 1
    7710:	f5 01       	movw	r30, r10
    7712:	84 83       	std	Z+4, r24	; 0x04
    7714:	02 c0       	rjmp	.+4      	; 0x771a <put_fat+0x188>
    7716:	42 e0       	ldi	r20, 0x02	; 2
    7718:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    771a:	ca 01       	movw	r24, r20
    771c:	cd b7       	in	r28, 0x3d	; 61
    771e:	de b7       	in	r29, 0x3e	; 62
    7720:	e2 e1       	ldi	r30, 0x12	; 18
    7722:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

00007726 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7726:	a4 e0       	ldi	r26, 0x04	; 4
    7728:	b0 e0       	ldi	r27, 0x00	; 0
    772a:	e9 e9       	ldi	r30, 0x99	; 153
    772c:	fb e3       	ldi	r31, 0x3B	; 59
    772e:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    7732:	1c 01       	movw	r2, r24
    7734:	2a 01       	movw	r4, r20
    7736:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    7738:	dc 01       	movw	r26, r24
    773a:	5e 96       	adiw	r26, 0x1e	; 30
    773c:	8d 91       	ld	r24, X+
    773e:	9d 91       	ld	r25, X+
    7740:	0d 90       	ld	r0, X+
    7742:	bc 91       	ld	r27, X
    7744:	a0 2d       	mov	r26, r0
    7746:	89 83       	std	Y+1, r24	; 0x01
    7748:	9a 83       	std	Y+2, r25	; 0x02
    774a:	ab 83       	std	Y+3, r26	; 0x03
    774c:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    774e:	41 15       	cp	r20, r1
    7750:	51 05       	cpc	r21, r1
    7752:	61 05       	cpc	r22, r1
    7754:	71 05       	cpc	r23, r1
    7756:	81 f4       	brne	.+32     	; 0x7778 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    7758:	f1 01       	movw	r30, r2
    775a:	82 84       	ldd	r8, Z+10	; 0x0a
    775c:	93 84       	ldd	r9, Z+11	; 0x0b
    775e:	a4 84       	ldd	r10, Z+12	; 0x0c
    7760:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    7762:	81 14       	cp	r8, r1
    7764:	91 04       	cpc	r9, r1
    7766:	a1 04       	cpc	r10, r1
    7768:	b1 04       	cpc	r11, r1
    776a:	11 f1       	breq	.+68     	; 0x77b0 <create_chain+0x8a>
    776c:	88 16       	cp	r8, r24
    776e:	99 06       	cpc	r9, r25
    7770:	aa 06       	cpc	r10, r26
    7772:	bb 06       	cpc	r11, r27
    7774:	e8 f4       	brcc	.+58     	; 0x77b0 <create_chain+0x8a>
    7776:	21 c0       	rjmp	.+66     	; 0x77ba <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7778:	c1 01       	movw	r24, r2
    777a:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    777e:	9b 01       	movw	r18, r22
    7780:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7782:	62 30       	cpi	r22, 0x02	; 2
    7784:	71 05       	cpc	r23, r1
    7786:	81 05       	cpc	r24, r1
    7788:	91 05       	cpc	r25, r1
    778a:	28 f4       	brcc	.+10     	; 0x7796 <create_chain+0x70>
    778c:	21 e0       	ldi	r18, 0x01	; 1
    778e:	30 e0       	ldi	r19, 0x00	; 0
    7790:	40 e0       	ldi	r20, 0x00	; 0
    7792:	50 e0       	ldi	r21, 0x00	; 0
    7794:	93 c0       	rjmp	.+294    	; 0x78bc <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    7796:	89 81       	ldd	r24, Y+1	; 0x01
    7798:	9a 81       	ldd	r25, Y+2	; 0x02
    779a:	ab 81       	ldd	r26, Y+3	; 0x03
    779c:	bc 81       	ldd	r27, Y+4	; 0x04
    779e:	28 17       	cp	r18, r24
    77a0:	39 07       	cpc	r19, r25
    77a2:	4a 07       	cpc	r20, r26
    77a4:	5b 07       	cpc	r21, r27
    77a6:	08 f4       	brcc	.+2      	; 0x77aa <create_chain+0x84>
    77a8:	89 c0       	rjmp	.+274    	; 0x78bc <create_chain+0x196>
    77aa:	53 01       	movw	r10, r6
    77ac:	42 01       	movw	r8, r4
    77ae:	05 c0       	rjmp	.+10     	; 0x77ba <create_chain+0x94>
    77b0:	b1 e0       	ldi	r27, 0x01	; 1
    77b2:	8b 2e       	mov	r8, r27
    77b4:	91 2c       	mov	r9, r1
    77b6:	a1 2c       	mov	r10, r1
    77b8:	b1 2c       	mov	r11, r1
    77ba:	75 01       	movw	r14, r10
    77bc:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    77be:	08 94       	sec
    77c0:	c1 1c       	adc	r12, r1
    77c2:	d1 1c       	adc	r13, r1
    77c4:	e1 1c       	adc	r14, r1
    77c6:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    77c8:	89 81       	ldd	r24, Y+1	; 0x01
    77ca:	9a 81       	ldd	r25, Y+2	; 0x02
    77cc:	ab 81       	ldd	r26, Y+3	; 0x03
    77ce:	bc 81       	ldd	r27, Y+4	; 0x04
    77d0:	c8 16       	cp	r12, r24
    77d2:	d9 06       	cpc	r13, r25
    77d4:	ea 06       	cpc	r14, r26
    77d6:	fb 06       	cpc	r15, r27
    77d8:	60 f0       	brcs	.+24     	; 0x77f2 <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    77da:	92 e0       	ldi	r25, 0x02	; 2
    77dc:	89 16       	cp	r8, r25
    77de:	91 04       	cpc	r9, r1
    77e0:	a1 04       	cpc	r10, r1
    77e2:	b1 04       	cpc	r11, r1
    77e4:	08 f4       	brcc	.+2      	; 0x77e8 <create_chain+0xc2>
    77e6:	61 c0       	rjmp	.+194    	; 0x78aa <create_chain+0x184>
    77e8:	a2 e0       	ldi	r26, 0x02	; 2
    77ea:	ca 2e       	mov	r12, r26
    77ec:	d1 2c       	mov	r13, r1
    77ee:	e1 2c       	mov	r14, r1
    77f0:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    77f2:	c1 01       	movw	r24, r2
    77f4:	b7 01       	movw	r22, r14
    77f6:	a6 01       	movw	r20, r12
    77f8:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    77fc:	9b 01       	movw	r18, r22
    77fe:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    7800:	61 15       	cp	r22, r1
    7802:	71 05       	cpc	r23, r1
    7804:	81 05       	cpc	r24, r1
    7806:	91 05       	cpc	r25, r1
    7808:	a9 f0       	breq	.+42     	; 0x7834 <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    780a:	6f 3f       	cpi	r22, 0xFF	; 255
    780c:	af ef       	ldi	r26, 0xFF	; 255
    780e:	7a 07       	cpc	r23, r26
    7810:	af ef       	ldi	r26, 0xFF	; 255
    7812:	8a 07       	cpc	r24, r26
    7814:	af ef       	ldi	r26, 0xFF	; 255
    7816:	9a 07       	cpc	r25, r26
    7818:	09 f4       	brne	.+2      	; 0x781c <create_chain+0xf6>
    781a:	50 c0       	rjmp	.+160    	; 0x78bc <create_chain+0x196>
    781c:	61 30       	cpi	r22, 0x01	; 1
    781e:	71 05       	cpc	r23, r1
    7820:	81 05       	cpc	r24, r1
    7822:	91 05       	cpc	r25, r1
    7824:	09 f4       	brne	.+2      	; 0x7828 <create_chain+0x102>
    7826:	4a c0       	rjmp	.+148    	; 0x78bc <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    7828:	c8 14       	cp	r12, r8
    782a:	d9 04       	cpc	r13, r9
    782c:	ea 04       	cpc	r14, r10
    782e:	fb 04       	cpc	r15, r11
    7830:	31 f6       	brne	.-116    	; 0x77be <create_chain+0x98>
    7832:	3b c0       	rjmp	.+118    	; 0x78aa <create_chain+0x184>
    7834:	bc 2c       	mov	r11, r12
    7836:	ad 2c       	mov	r10, r13
    7838:	9e 2c       	mov	r9, r14
    783a:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    783c:	c1 01       	movw	r24, r2
    783e:	a6 01       	movw	r20, r12
    7840:	b7 01       	movw	r22, r14
    7842:	0f ef       	ldi	r16, 0xFF	; 255
    7844:	1f ef       	ldi	r17, 0xFF	; 255
    7846:	2f ef       	ldi	r18, 0xFF	; 255
    7848:	3f e0       	ldi	r19, 0x0F	; 15
    784a:	0e 94 c9 3a 	call	0x7592	; 0x7592 <put_fat>
    784e:	89 2b       	or	r24, r25
    7850:	89 f5       	brne	.+98     	; 0x78b4 <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    7852:	41 14       	cp	r4, r1
    7854:	51 04       	cpc	r5, r1
    7856:	61 04       	cpc	r6, r1
    7858:	71 04       	cpc	r7, r1
    785a:	49 f0       	breq	.+18     	; 0x786e <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    785c:	c1 01       	movw	r24, r2
    785e:	b3 01       	movw	r22, r6
    7860:	a2 01       	movw	r20, r4
    7862:	86 01       	movw	r16, r12
    7864:	97 01       	movw	r18, r14
    7866:	0e 94 c9 3a 	call	0x7592	; 0x7592 <put_fat>
    786a:	89 2b       	or	r24, r25
    786c:	19 f5       	brne	.+70     	; 0x78b4 <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    786e:	f1 01       	movw	r30, r2
    7870:	b2 86       	std	Z+10, r11	; 0x0a
    7872:	a3 86       	std	Z+11, r10	; 0x0b
    7874:	94 86       	std	Z+12, r9	; 0x0c
    7876:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    7878:	86 85       	ldd	r24, Z+14	; 0x0e
    787a:	97 85       	ldd	r25, Z+15	; 0x0f
    787c:	a0 89       	ldd	r26, Z+16	; 0x10
    787e:	b1 89       	ldd	r27, Z+17	; 0x11
    7880:	8f 3f       	cpi	r24, 0xFF	; 255
    7882:	ff ef       	ldi	r31, 0xFF	; 255
    7884:	9f 07       	cpc	r25, r31
    7886:	ff ef       	ldi	r31, 0xFF	; 255
    7888:	af 07       	cpc	r26, r31
    788a:	ff ef       	ldi	r31, 0xFF	; 255
    788c:	bf 07       	cpc	r27, r31
    788e:	51 f0       	breq	.+20     	; 0x78a4 <create_chain+0x17e>
		fs->free_clust--;
    7890:	01 97       	sbiw	r24, 0x01	; 1
    7892:	a1 09       	sbc	r26, r1
    7894:	b1 09       	sbc	r27, r1
    7896:	f1 01       	movw	r30, r2
    7898:	86 87       	std	Z+14, r24	; 0x0e
    789a:	97 87       	std	Z+15, r25	; 0x0f
    789c:	a0 8b       	std	Z+16, r26	; 0x10
    789e:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    78a0:	81 e0       	ldi	r24, 0x01	; 1
    78a2:	81 87       	std	Z+9, r24	; 0x09
    78a4:	a7 01       	movw	r20, r14
    78a6:	96 01       	movw	r18, r12
    78a8:	09 c0       	rjmp	.+18     	; 0x78bc <create_chain+0x196>
    78aa:	20 e0       	ldi	r18, 0x00	; 0
    78ac:	30 e0       	ldi	r19, 0x00	; 0
    78ae:	40 e0       	ldi	r20, 0x00	; 0
    78b0:	50 e0       	ldi	r21, 0x00	; 0
    78b2:	04 c0       	rjmp	.+8      	; 0x78bc <create_chain+0x196>
    78b4:	2f ef       	ldi	r18, 0xFF	; 255
    78b6:	3f ef       	ldi	r19, 0xFF	; 255
    78b8:	4f ef       	ldi	r20, 0xFF	; 255
    78ba:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    78bc:	b9 01       	movw	r22, r18
    78be:	ca 01       	movw	r24, r20
    78c0:	24 96       	adiw	r28, 0x04	; 4
    78c2:	e2 e1       	ldi	r30, 0x12	; 18
    78c4:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

000078c8 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    78c8:	a6 e0       	ldi	r26, 0x06	; 6
    78ca:	b0 e0       	ldi	r27, 0x00	; 0
    78cc:	ea e6       	ldi	r30, 0x6A	; 106
    78ce:	fc e3       	ldi	r31, 0x3C	; 60
    78d0:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    78d4:	8d 83       	std	Y+5, r24	; 0x05
    78d6:	9e 83       	std	Y+6, r25	; 0x06
    78d8:	3a 01       	movw	r6, r20
    78da:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    78dc:	dc 01       	movw	r26, r24
    78de:	12 96       	adiw	r26, 0x02	; 2
    78e0:	6d 91       	ld	r22, X+
    78e2:	7c 91       	ld	r23, X
    78e4:	13 97       	sbiw	r26, 0x03	; 3
    78e6:	8d 91       	ld	r24, X+
    78e8:	9c 91       	ld	r25, X
    78ea:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <validate>
    78ee:	8b 83       	std	Y+3, r24	; 0x03
    78f0:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    78f2:	89 2b       	or	r24, r25
    78f4:	09 f0       	breq	.+2      	; 0x78f8 <f_lseek+0x30>
    78f6:	c7 c1       	rjmp	.+910    	; 0x7c86 <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    78f8:	ed 81       	ldd	r30, Y+5	; 0x05
    78fa:	fe 81       	ldd	r31, Y+6	; 0x06
    78fc:	84 81       	ldd	r24, Z+4	; 0x04
    78fe:	87 fd       	sbrc	r24, 7
    7900:	92 c0       	rjmp	.+292    	; 0x7a26 <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    7902:	ad 81       	ldd	r26, Y+5	; 0x05
    7904:	be 81       	ldd	r27, Y+6	; 0x06
    7906:	1a 96       	adiw	r26, 0x0a	; 10
    7908:	ad 90       	ld	r10, X+
    790a:	bd 90       	ld	r11, X+
    790c:	cd 90       	ld	r12, X+
    790e:	dc 90       	ld	r13, X
    7910:	1d 97       	sbiw	r26, 0x0d	; 13
    7912:	a6 14       	cp	r10, r6
    7914:	b7 04       	cpc	r11, r7
    7916:	c8 04       	cpc	r12, r8
    7918:	d9 04       	cpc	r13, r9
    791a:	10 f4       	brcc	.+4      	; 0x7920 <f_lseek+0x58>
    791c:	81 ff       	sbrs	r24, 1
    791e:	02 c0       	rjmp	.+4      	; 0x7924 <f_lseek+0x5c>
    7920:	64 01       	movw	r12, r8
    7922:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    7924:	ed 81       	ldd	r30, Y+5	; 0x05
    7926:	fe 81       	ldd	r31, Y+6	; 0x06
    7928:	26 81       	ldd	r18, Z+6	; 0x06
    792a:	37 81       	ldd	r19, Z+7	; 0x07
    792c:	40 85       	ldd	r20, Z+8	; 0x08
    792e:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    7930:	16 82       	std	Z+6, r1	; 0x06
    7932:	17 82       	std	Z+7, r1	; 0x07
    7934:	10 86       	std	Z+8, r1	; 0x08
    7936:	11 86       	std	Z+9, r1	; 0x09
    7938:	8f ef       	ldi	r24, 0xFF	; 255
    793a:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    793c:	a1 14       	cp	r10, r1
    793e:	b1 04       	cpc	r11, r1
    7940:	c1 04       	cpc	r12, r1
    7942:	d1 04       	cpc	r13, r1
    7944:	09 f4       	brne	.+2      	; 0x7948 <f_lseek+0x80>
    7946:	6b c1       	rjmp	.+726    	; 0x7c1e <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    7948:	01 90       	ld	r0, Z+
    794a:	f0 81       	ld	r31, Z
    794c:	e0 2d       	mov	r30, r0
    794e:	e9 83       	std	Y+1, r30	; 0x01
    7950:	fa 83       	std	Y+2, r31	; 0x02
    7952:	82 81       	ldd	r24, Z+2	; 0x02
    7954:	68 2e       	mov	r6, r24
    7956:	77 24       	eor	r7, r7
    7958:	88 24       	eor	r8, r8
    795a:	99 24       	eor	r9, r9
    795c:	69 e0       	ldi	r22, 0x09	; 9
    795e:	66 0c       	add	r6, r6
    7960:	77 1c       	adc	r7, r7
    7962:	88 1c       	adc	r8, r8
    7964:	99 1c       	adc	r9, r9
    7966:	6a 95       	dec	r22
    7968:	d1 f7       	brne	.-12     	; 0x795e <f_lseek+0x96>
		if (ifptr > 0 &&
    796a:	21 15       	cp	r18, r1
    796c:	31 05       	cpc	r19, r1
    796e:	41 05       	cpc	r20, r1
    7970:	51 05       	cpc	r21, r1
    7972:	c1 f1       	breq	.+112    	; 0x79e4 <f_lseek+0x11c>
    7974:	19 01       	movw	r2, r18
    7976:	2a 01       	movw	r4, r20
    7978:	08 94       	sec
    797a:	21 08       	sbc	r2, r1
    797c:	31 08       	sbc	r3, r1
    797e:	41 08       	sbc	r4, r1
    7980:	51 08       	sbc	r5, r1
    7982:	c6 01       	movw	r24, r12
    7984:	b5 01       	movw	r22, r10
    7986:	61 50       	subi	r22, 0x01	; 1
    7988:	70 40       	sbci	r23, 0x00	; 0
    798a:	80 40       	sbci	r24, 0x00	; 0
    798c:	90 40       	sbci	r25, 0x00	; 0
    798e:	a4 01       	movw	r20, r8
    7990:	93 01       	movw	r18, r6
    7992:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    7996:	79 01       	movw	r14, r18
    7998:	8a 01       	movw	r16, r20
    799a:	c2 01       	movw	r24, r4
    799c:	b1 01       	movw	r22, r2
    799e:	a4 01       	movw	r20, r8
    79a0:	93 01       	movw	r18, r6
    79a2:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    79a6:	e2 16       	cp	r14, r18
    79a8:	f3 06       	cpc	r15, r19
    79aa:	04 07       	cpc	r16, r20
    79ac:	15 07       	cpc	r17, r21
    79ae:	d0 f0       	brcs	.+52     	; 0x79e4 <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    79b0:	88 27       	eor	r24, r24
    79b2:	99 27       	eor	r25, r25
    79b4:	dc 01       	movw	r26, r24
    79b6:	86 19       	sub	r24, r6
    79b8:	97 09       	sbc	r25, r7
    79ba:	a8 09       	sbc	r26, r8
    79bc:	b9 09       	sbc	r27, r9
    79be:	82 21       	and	r24, r2
    79c0:	93 21       	and	r25, r3
    79c2:	a4 21       	and	r26, r4
    79c4:	b5 21       	and	r27, r5
    79c6:	ed 81       	ldd	r30, Y+5	; 0x05
    79c8:	fe 81       	ldd	r31, Y+6	; 0x06
    79ca:	86 83       	std	Z+6, r24	; 0x06
    79cc:	97 83       	std	Z+7, r25	; 0x07
    79ce:	a0 87       	std	Z+8, r26	; 0x08
    79d0:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    79d2:	a8 1a       	sub	r10, r24
    79d4:	b9 0a       	sbc	r11, r25
    79d6:	ca 0a       	sbc	r12, r26
    79d8:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    79da:	42 89       	ldd	r20, Z+18	; 0x12
    79dc:	53 89       	ldd	r21, Z+19	; 0x13
    79de:	64 89       	ldd	r22, Z+20	; 0x14
    79e0:	75 89       	ldd	r23, Z+21	; 0x15
    79e2:	47 c0       	rjmp	.+142    	; 0x7a72 <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    79e4:	ad 81       	ldd	r26, Y+5	; 0x05
    79e6:	be 81       	ldd	r27, Y+6	; 0x06
    79e8:	1e 96       	adiw	r26, 0x0e	; 14
    79ea:	4d 91       	ld	r20, X+
    79ec:	5d 91       	ld	r21, X+
    79ee:	6d 91       	ld	r22, X+
    79f0:	7c 91       	ld	r23, X
    79f2:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    79f4:	41 15       	cp	r20, r1
    79f6:	51 05       	cpc	r21, r1
    79f8:	61 05       	cpc	r22, r1
    79fa:	71 05       	cpc	r23, r1
    79fc:	a1 f5       	brne	.+104    	; 0x7a66 <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    79fe:	89 81       	ldd	r24, Y+1	; 0x01
    7a00:	9a 81       	ldd	r25, Y+2	; 0x02
    7a02:	40 e0       	ldi	r20, 0x00	; 0
    7a04:	50 e0       	ldi	r21, 0x00	; 0
    7a06:	60 e0       	ldi	r22, 0x00	; 0
    7a08:	70 e0       	ldi	r23, 0x00	; 0
    7a0a:	0e 94 93 3b 	call	0x7726	; 0x7726 <create_chain>
    7a0e:	ab 01       	movw	r20, r22
    7a10:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    7a12:	41 30       	cpi	r20, 0x01	; 1
    7a14:	51 05       	cpc	r21, r1
    7a16:	61 05       	cpc	r22, r1
    7a18:	71 05       	cpc	r23, r1
    7a1a:	51 f4       	brne	.+20     	; 0x7a30 <f_lseek+0x168>
    7a1c:	ed 81       	ldd	r30, Y+5	; 0x05
    7a1e:	fe 81       	ldd	r31, Y+6	; 0x06
    7a20:	84 81       	ldd	r24, Z+4	; 0x04
    7a22:	80 68       	ori	r24, 0x80	; 128
    7a24:	84 83       	std	Z+4, r24	; 0x04
    7a26:	82 e0       	ldi	r24, 0x02	; 2
    7a28:	90 e0       	ldi	r25, 0x00	; 0
    7a2a:	8b 83       	std	Y+3, r24	; 0x03
    7a2c:	9c 83       	std	Y+4, r25	; 0x04
    7a2e:	2b c1       	rjmp	.+598    	; 0x7c86 <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7a30:	4f 3f       	cpi	r20, 0xFF	; 255
    7a32:	9f ef       	ldi	r25, 0xFF	; 255
    7a34:	59 07       	cpc	r21, r25
    7a36:	9f ef       	ldi	r25, 0xFF	; 255
    7a38:	69 07       	cpc	r22, r25
    7a3a:	9f ef       	ldi	r25, 0xFF	; 255
    7a3c:	79 07       	cpc	r23, r25
    7a3e:	59 f4       	brne	.+22     	; 0x7a56 <f_lseek+0x18e>
    7a40:	ad 81       	ldd	r26, Y+5	; 0x05
    7a42:	be 81       	ldd	r27, Y+6	; 0x06
    7a44:	14 96       	adiw	r26, 0x04	; 4
    7a46:	8c 91       	ld	r24, X
    7a48:	14 97       	sbiw	r26, 0x04	; 4
    7a4a:	80 68       	ori	r24, 0x80	; 128
    7a4c:	14 96       	adiw	r26, 0x04	; 4
    7a4e:	8c 93       	st	X, r24
    7a50:	e1 e0       	ldi	r30, 0x01	; 1
    7a52:	f0 e0       	ldi	r31, 0x00	; 0
    7a54:	d7 c0       	rjmp	.+430    	; 0x7c04 <f_lseek+0x33c>
				fp->org_clust = clst;
    7a56:	ad 81       	ldd	r26, Y+5	; 0x05
    7a58:	be 81       	ldd	r27, Y+6	; 0x06
    7a5a:	1e 96       	adiw	r26, 0x0e	; 14
    7a5c:	4d 93       	st	X+, r20
    7a5e:	5d 93       	st	X+, r21
    7a60:	6d 93       	st	X+, r22
    7a62:	7c 93       	st	X, r23
    7a64:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    7a66:	ed 81       	ldd	r30, Y+5	; 0x05
    7a68:	fe 81       	ldd	r31, Y+6	; 0x06
    7a6a:	42 8b       	std	Z+18, r20	; 0x12
    7a6c:	53 8b       	std	Z+19, r21	; 0x13
    7a6e:	64 8b       	std	Z+20, r22	; 0x14
    7a70:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    7a72:	41 15       	cp	r20, r1
    7a74:	51 05       	cpc	r21, r1
    7a76:	61 05       	cpc	r22, r1
    7a78:	71 05       	cpc	r23, r1
    7a7a:	09 f0       	breq	.+2      	; 0x7a7e <f_lseek+0x1b6>
    7a7c:	59 c0       	rjmp	.+178    	; 0x7b30 <f_lseek+0x268>
    7a7e:	cf c0       	rjmp	.+414    	; 0x7c1e <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    7a80:	ad 81       	ldd	r26, Y+5	; 0x05
    7a82:	be 81       	ldd	r27, Y+6	; 0x06
    7a84:	14 96       	adiw	r26, 0x04	; 4
    7a86:	8c 91       	ld	r24, X
    7a88:	14 97       	sbiw	r26, 0x04	; 4
    7a8a:	2d 91       	ld	r18, X+
    7a8c:	3c 91       	ld	r19, X
    7a8e:	81 ff       	sbrs	r24, 1
    7a90:	0d c0       	rjmp	.+26     	; 0x7aac <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    7a92:	c9 01       	movw	r24, r18
    7a94:	0e 94 93 3b 	call	0x7726	; 0x7726 <create_chain>
    7a98:	ab 01       	movw	r20, r22
    7a9a:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    7a9c:	41 15       	cp	r20, r1
    7a9e:	51 05       	cpc	r21, r1
    7aa0:	61 05       	cpc	r22, r1
    7aa2:	71 05       	cpc	r23, r1
    7aa4:	41 f4       	brne	.+16     	; 0x7ab6 <f_lseek+0x1ee>
    7aa6:	64 01       	movw	r12, r8
    7aa8:	53 01       	movw	r10, r6
    7aaa:	48 c0       	rjmp	.+144    	; 0x7b3c <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    7aac:	c9 01       	movw	r24, r18
    7aae:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    7ab2:	ab 01       	movw	r20, r22
    7ab4:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7ab6:	4f 3f       	cpi	r20, 0xFF	; 255
    7ab8:	bf ef       	ldi	r27, 0xFF	; 255
    7aba:	5b 07       	cpc	r21, r27
    7abc:	bf ef       	ldi	r27, 0xFF	; 255
    7abe:	6b 07       	cpc	r22, r27
    7ac0:	bf ef       	ldi	r27, 0xFF	; 255
    7ac2:	7b 07       	cpc	r23, r27
    7ac4:	41 f4       	brne	.+16     	; 0x7ad6 <f_lseek+0x20e>
    7ac6:	ed 81       	ldd	r30, Y+5	; 0x05
    7ac8:	fe 81       	ldd	r31, Y+6	; 0x06
    7aca:	84 81       	ldd	r24, Z+4	; 0x04
    7acc:	80 68       	ori	r24, 0x80	; 128
    7ace:	84 83       	std	Z+4, r24	; 0x04
    7ad0:	81 e0       	ldi	r24, 0x01	; 1
    7ad2:	90 e0       	ldi	r25, 0x00	; 0
    7ad4:	aa cf       	rjmp	.-172    	; 0x7a2a <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    7ad6:	42 30       	cpi	r20, 0x02	; 2
    7ad8:	51 05       	cpc	r21, r1
    7ada:	61 05       	cpc	r22, r1
    7adc:	71 05       	cpc	r23, r1
    7ade:	08 f4       	brcc	.+2      	; 0x7ae2 <f_lseek+0x21a>
    7ae0:	9d cf       	rjmp	.-198    	; 0x7a1c <f_lseek+0x154>
    7ae2:	ad 81       	ldd	r26, Y+5	; 0x05
    7ae4:	be 81       	ldd	r27, Y+6	; 0x06
    7ae6:	ed 91       	ld	r30, X+
    7ae8:	fc 91       	ld	r31, X
    7aea:	86 8d       	ldd	r24, Z+30	; 0x1e
    7aec:	97 8d       	ldd	r25, Z+31	; 0x1f
    7aee:	a0 a1       	ldd	r26, Z+32	; 0x20
    7af0:	b1 a1       	ldd	r27, Z+33	; 0x21
    7af2:	48 17       	cp	r20, r24
    7af4:	59 07       	cpc	r21, r25
    7af6:	6a 07       	cpc	r22, r26
    7af8:	7b 07       	cpc	r23, r27
    7afa:	08 f0       	brcs	.+2      	; 0x7afe <f_lseek+0x236>
    7afc:	8f cf       	rjmp	.-226    	; 0x7a1c <f_lseek+0x154>
				fp->curr_clust = clst;
    7afe:	ad 81       	ldd	r26, Y+5	; 0x05
    7b00:	be 81       	ldd	r27, Y+6	; 0x06
    7b02:	52 96       	adiw	r26, 0x12	; 18
    7b04:	4d 93       	st	X+, r20
    7b06:	5d 93       	st	X+, r21
    7b08:	6d 93       	st	X+, r22
    7b0a:	7c 93       	st	X, r23
    7b0c:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    7b0e:	fd 01       	movw	r30, r26
    7b10:	86 81       	ldd	r24, Z+6	; 0x06
    7b12:	97 81       	ldd	r25, Z+7	; 0x07
    7b14:	a0 85       	ldd	r26, Z+8	; 0x08
    7b16:	b1 85       	ldd	r27, Z+9	; 0x09
    7b18:	86 0d       	add	r24, r6
    7b1a:	97 1d       	adc	r25, r7
    7b1c:	a8 1d       	adc	r26, r8
    7b1e:	b9 1d       	adc	r27, r9
    7b20:	86 83       	std	Z+6, r24	; 0x06
    7b22:	97 83       	std	Z+7, r25	; 0x07
    7b24:	a0 87       	std	Z+8, r26	; 0x08
    7b26:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    7b28:	a6 18       	sub	r10, r6
    7b2a:	b7 08       	sbc	r11, r7
    7b2c:	c8 08       	sbc	r12, r8
    7b2e:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    7b30:	6a 14       	cp	r6, r10
    7b32:	7b 04       	cpc	r7, r11
    7b34:	8c 04       	cpc	r8, r12
    7b36:	9d 04       	cpc	r9, r13
    7b38:	08 f4       	brcc	.+2      	; 0x7b3c <f_lseek+0x274>
    7b3a:	a2 cf       	rjmp	.-188    	; 0x7a80 <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    7b3c:	ed 81       	ldd	r30, Y+5	; 0x05
    7b3e:	fe 81       	ldd	r31, Y+6	; 0x06
    7b40:	86 81       	ldd	r24, Z+6	; 0x06
    7b42:	97 81       	ldd	r25, Z+7	; 0x07
    7b44:	a0 85       	ldd	r26, Z+8	; 0x08
    7b46:	b1 85       	ldd	r27, Z+9	; 0x09
    7b48:	8a 0d       	add	r24, r10
    7b4a:	9b 1d       	adc	r25, r11
    7b4c:	ac 1d       	adc	r26, r12
    7b4e:	bd 1d       	adc	r27, r13
    7b50:	86 83       	std	Z+6, r24	; 0x06
    7b52:	97 83       	std	Z+7, r25	; 0x07
    7b54:	a0 87       	std	Z+8, r26	; 0x08
    7b56:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    7b58:	d6 01       	movw	r26, r12
    7b5a:	c5 01       	movw	r24, r10
    7b5c:	29 e0       	ldi	r18, 0x09	; 9
    7b5e:	b6 95       	lsr	r27
    7b60:	a7 95       	ror	r26
    7b62:	97 95       	ror	r25
    7b64:	87 95       	ror	r24
    7b66:	2a 95       	dec	r18
    7b68:	d1 f7       	brne	.-12     	; 0x7b5e <f_lseek+0x296>
    7b6a:	e8 2e       	mov	r14, r24
    7b6c:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    7b6e:	8f ef       	ldi	r24, 0xFF	; 255
    7b70:	91 e0       	ldi	r25, 0x01	; 1
    7b72:	a0 e0       	ldi	r26, 0x00	; 0
    7b74:	b0 e0       	ldi	r27, 0x00	; 0
    7b76:	a8 22       	and	r10, r24
    7b78:	b9 22       	and	r11, r25
    7b7a:	ca 22       	and	r12, r26
    7b7c:	db 22       	and	r13, r27
    7b7e:	a1 14       	cp	r10, r1
    7b80:	b1 04       	cpc	r11, r1
    7b82:	c1 04       	cpc	r12, r1
    7b84:	d1 04       	cpc	r13, r1
    7b86:	09 f4       	brne	.+2      	; 0x7b8a <f_lseek+0x2c2>
    7b88:	4a c0       	rjmp	.+148    	; 0x7c1e <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    7b8a:	80 80       	ld	r8, Z
    7b8c:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7b8e:	8e ef       	ldi	r24, 0xFE	; 254
    7b90:	a8 2e       	mov	r10, r24
    7b92:	8f ef       	ldi	r24, 0xFF	; 255
    7b94:	b8 2e       	mov	r11, r24
    7b96:	8f ef       	ldi	r24, 0xFF	; 255
    7b98:	c8 2e       	mov	r12, r24
    7b9a:	8f ef       	ldi	r24, 0xFF	; 255
    7b9c:	d8 2e       	mov	r13, r24
    7b9e:	a4 0e       	add	r10, r20
    7ba0:	b5 1e       	adc	r11, r21
    7ba2:	c6 1e       	adc	r12, r22
    7ba4:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7ba6:	f4 01       	movw	r30, r8
    7ba8:	86 8d       	ldd	r24, Z+30	; 0x1e
    7baa:	97 8d       	ldd	r25, Z+31	; 0x1f
    7bac:	a0 a1       	ldd	r26, Z+32	; 0x20
    7bae:	b1 a1       	ldd	r27, Z+33	; 0x21
    7bb0:	02 97       	sbiw	r24, 0x02	; 2
    7bb2:	a1 09       	sbc	r26, r1
    7bb4:	b1 09       	sbc	r27, r1
    7bb6:	a8 16       	cp	r10, r24
    7bb8:	b9 06       	cpc	r11, r25
    7bba:	ca 06       	cpc	r12, r26
    7bbc:	db 06       	cpc	r13, r27
    7bbe:	c0 f4       	brcc	.+48     	; 0x7bf0 <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    7bc0:	22 81       	ldd	r18, Z+2	; 0x02
    7bc2:	30 e0       	ldi	r19, 0x00	; 0
    7bc4:	40 e0       	ldi	r20, 0x00	; 0
    7bc6:	50 e0       	ldi	r21, 0x00	; 0
    7bc8:	c6 01       	movw	r24, r12
    7bca:	b5 01       	movw	r22, r10
    7bcc:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    7bd0:	9b 01       	movw	r18, r22
    7bd2:	ac 01       	movw	r20, r24
    7bd4:	f4 01       	movw	r30, r8
    7bd6:	82 a5       	ldd	r24, Z+42	; 0x2a
    7bd8:	93 a5       	ldd	r25, Z+43	; 0x2b
    7bda:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7bdc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7bde:	28 0f       	add	r18, r24
    7be0:	39 1f       	adc	r19, r25
    7be2:	4a 1f       	adc	r20, r26
    7be4:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    7be6:	21 15       	cp	r18, r1
    7be8:	31 05       	cpc	r19, r1
    7bea:	41 05       	cpc	r20, r1
    7bec:	51 05       	cpc	r21, r1
    7bee:	69 f4       	brne	.+26     	; 0x7c0a <f_lseek+0x342>
    7bf0:	ad 81       	ldd	r26, Y+5	; 0x05
    7bf2:	be 81       	ldd	r27, Y+6	; 0x06
    7bf4:	14 96       	adiw	r26, 0x04	; 4
    7bf6:	8c 91       	ld	r24, X
    7bf8:	14 97       	sbiw	r26, 0x04	; 4
    7bfa:	80 68       	ori	r24, 0x80	; 128
    7bfc:	14 96       	adiw	r26, 0x04	; 4
    7bfe:	8c 93       	st	X, r24
    7c00:	e2 e0       	ldi	r30, 0x02	; 2
    7c02:	f0 e0       	ldi	r31, 0x00	; 0
    7c04:	eb 83       	std	Y+3, r30	; 0x03
    7c06:	fc 83       	std	Y+4, r31	; 0x04
    7c08:	3e c0       	rjmp	.+124    	; 0x7c86 <f_lseek+0x3be>
				nsect += fp->csect;
    7c0a:	2e 0d       	add	r18, r14
    7c0c:	31 1d       	adc	r19, r1
    7c0e:	41 1d       	adc	r20, r1
    7c10:	51 1d       	adc	r21, r1
				fp->csect++;
    7c12:	e3 94       	inc	r14
    7c14:	ad 81       	ldd	r26, Y+5	; 0x05
    7c16:	be 81       	ldd	r27, Y+6	; 0x06
    7c18:	15 96       	adiw	r26, 0x05	; 5
    7c1a:	ec 92       	st	X, r14
    7c1c:	04 c0       	rjmp	.+8      	; 0x7c26 <f_lseek+0x35e>
    7c1e:	20 e0       	ldi	r18, 0x00	; 0
    7c20:	30 e0       	ldi	r19, 0x00	; 0
    7c22:	40 e0       	ldi	r20, 0x00	; 0
    7c24:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    7c26:	ed 81       	ldd	r30, Y+5	; 0x05
    7c28:	fe 81       	ldd	r31, Y+6	; 0x06
    7c2a:	86 81       	ldd	r24, Z+6	; 0x06
    7c2c:	97 81       	ldd	r25, Z+7	; 0x07
    7c2e:	a0 85       	ldd	r26, Z+8	; 0x08
    7c30:	b1 85       	ldd	r27, Z+9	; 0x09
    7c32:	91 70       	andi	r25, 0x01	; 1
    7c34:	a0 70       	andi	r26, 0x00	; 0
    7c36:	b0 70       	andi	r27, 0x00	; 0
    7c38:	00 97       	sbiw	r24, 0x00	; 0
    7c3a:	a1 05       	cpc	r26, r1
    7c3c:	b1 05       	cpc	r27, r1
    7c3e:	69 f0       	breq	.+26     	; 0x7c5a <f_lseek+0x392>
    7c40:	86 89       	ldd	r24, Z+22	; 0x16
    7c42:	97 89       	ldd	r25, Z+23	; 0x17
    7c44:	a0 8d       	ldd	r26, Z+24	; 0x18
    7c46:	b1 8d       	ldd	r27, Z+25	; 0x19
    7c48:	28 17       	cp	r18, r24
    7c4a:	39 07       	cpc	r19, r25
    7c4c:	4a 07       	cpc	r20, r26
    7c4e:	5b 07       	cpc	r21, r27
    7c50:	21 f0       	breq	.+8      	; 0x7c5a <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    7c52:	26 8b       	std	Z+22, r18	; 0x16
    7c54:	37 8b       	std	Z+23, r19	; 0x17
    7c56:	40 8f       	std	Z+24, r20	; 0x18
    7c58:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    7c5a:	ed 81       	ldd	r30, Y+5	; 0x05
    7c5c:	fe 81       	ldd	r31, Y+6	; 0x06
    7c5e:	26 81       	ldd	r18, Z+6	; 0x06
    7c60:	37 81       	ldd	r19, Z+7	; 0x07
    7c62:	40 85       	ldd	r20, Z+8	; 0x08
    7c64:	51 85       	ldd	r21, Z+9	; 0x09
    7c66:	82 85       	ldd	r24, Z+10	; 0x0a
    7c68:	93 85       	ldd	r25, Z+11	; 0x0b
    7c6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    7c6c:	b5 85       	ldd	r27, Z+13	; 0x0d
    7c6e:	82 17       	cp	r24, r18
    7c70:	93 07       	cpc	r25, r19
    7c72:	a4 07       	cpc	r26, r20
    7c74:	b5 07       	cpc	r27, r21
    7c76:	38 f4       	brcc	.+14     	; 0x7c86 <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    7c78:	22 87       	std	Z+10, r18	; 0x0a
    7c7a:	33 87       	std	Z+11, r19	; 0x0b
    7c7c:	44 87       	std	Z+12, r20	; 0x0c
    7c7e:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7c80:	84 81       	ldd	r24, Z+4	; 0x04
    7c82:	80 62       	ori	r24, 0x20	; 32
    7c84:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    7c86:	8b 81       	ldd	r24, Y+3	; 0x03
    7c88:	9c 81       	ldd	r25, Y+4	; 0x04
    7c8a:	26 96       	adiw	r28, 0x06	; 6
    7c8c:	e2 e1       	ldi	r30, 0x12	; 18
    7c8e:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

00007c92 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7c92:	a0 e0       	ldi	r26, 0x00	; 0
    7c94:	b0 e0       	ldi	r27, 0x00	; 0
    7c96:	ef e4       	ldi	r30, 0x4F	; 79
    7c98:	fe e3       	ldi	r31, 0x3E	; 62
    7c9a:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <__prologue_saves__+0xe>
    7c9e:	ec 01       	movw	r28, r24
    7ca0:	7a 01       	movw	r14, r20
    7ca2:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    7ca4:	42 30       	cpi	r20, 0x02	; 2
    7ca6:	51 05       	cpc	r21, r1
    7ca8:	61 05       	cpc	r22, r1
    7caa:	71 05       	cpc	r23, r1
    7cac:	08 f4       	brcc	.+2      	; 0x7cb0 <remove_chain+0x1e>
    7cae:	5a c0       	rjmp	.+180    	; 0x7d64 <remove_chain+0xd2>
    7cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7cb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7cb4:	a8 a1       	ldd	r26, Y+32	; 0x20
    7cb6:	b9 a1       	ldd	r27, Y+33	; 0x21
    7cb8:	48 17       	cp	r20, r24
    7cba:	59 07       	cpc	r21, r25
    7cbc:	6a 07       	cpc	r22, r26
    7cbe:	7b 07       	cpc	r23, r27
    7cc0:	08 f4       	brcc	.+2      	; 0x7cc4 <remove_chain+0x32>
    7cc2:	43 c0       	rjmp	.+134    	; 0x7d4a <remove_chain+0xb8>
    7cc4:	4f c0       	rjmp	.+158    	; 0x7d64 <remove_chain+0xd2>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7cc6:	ce 01       	movw	r24, r28
    7cc8:	b8 01       	movw	r22, r16
    7cca:	a7 01       	movw	r20, r14
    7ccc:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    7cd0:	5b 01       	movw	r10, r22
    7cd2:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    7cd4:	61 15       	cp	r22, r1
    7cd6:	71 05       	cpc	r23, r1
    7cd8:	81 05       	cpc	r24, r1
    7cda:	91 05       	cpc	r25, r1
    7cdc:	09 f4       	brne	.+2      	; 0x7ce0 <remove_chain+0x4e>
    7cde:	45 c0       	rjmp	.+138    	; 0x7d6a <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7ce0:	81 e0       	ldi	r24, 0x01	; 1
    7ce2:	a8 16       	cp	r10, r24
    7ce4:	b1 04       	cpc	r11, r1
    7ce6:	c1 04       	cpc	r12, r1
    7ce8:	d1 04       	cpc	r13, r1
    7cea:	e1 f1       	breq	.+120    	; 0x7d64 <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7cec:	2f ef       	ldi	r18, 0xFF	; 255
    7cee:	a2 16       	cp	r10, r18
    7cf0:	2f ef       	ldi	r18, 0xFF	; 255
    7cf2:	b2 06       	cpc	r11, r18
    7cf4:	2f ef       	ldi	r18, 0xFF	; 255
    7cf6:	c2 06       	cpc	r12, r18
    7cf8:	2f ef       	ldi	r18, 0xFF	; 255
    7cfa:	d2 06       	cpc	r13, r18
    7cfc:	19 f4       	brne	.+6      	; 0x7d04 <remove_chain+0x72>
    7cfe:	21 e0       	ldi	r18, 0x01	; 1
    7d00:	30 e0       	ldi	r19, 0x00	; 0
    7d02:	35 c0       	rjmp	.+106    	; 0x7d6e <remove_chain+0xdc>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7d04:	ce 01       	movw	r24, r28
    7d06:	b8 01       	movw	r22, r16
    7d08:	a7 01       	movw	r20, r14
    7d0a:	00 e0       	ldi	r16, 0x00	; 0
    7d0c:	10 e0       	ldi	r17, 0x00	; 0
    7d0e:	20 e0       	ldi	r18, 0x00	; 0
    7d10:	30 e0       	ldi	r19, 0x00	; 0
    7d12:	0e 94 c9 3a 	call	0x7592	; 0x7592 <put_fat>
    7d16:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    7d18:	00 97       	sbiw	r24, 0x00	; 0
    7d1a:	49 f5       	brne	.+82     	; 0x7d6e <remove_chain+0xdc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7d1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    7d1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7d20:	a8 89       	ldd	r26, Y+16	; 0x10
    7d22:	b9 89       	ldd	r27, Y+17	; 0x11
    7d24:	8f 3f       	cpi	r24, 0xFF	; 255
    7d26:	2f ef       	ldi	r18, 0xFF	; 255
    7d28:	92 07       	cpc	r25, r18
    7d2a:	2f ef       	ldi	r18, 0xFF	; 255
    7d2c:	a2 07       	cpc	r26, r18
    7d2e:	2f ef       	ldi	r18, 0xFF	; 255
    7d30:	b2 07       	cpc	r27, r18
    7d32:	41 f0       	breq	.+16     	; 0x7d44 <remove_chain+0xb2>
				fs->free_clust++;
    7d34:	01 96       	adiw	r24, 0x01	; 1
    7d36:	a1 1d       	adc	r26, r1
    7d38:	b1 1d       	adc	r27, r1
    7d3a:	8e 87       	std	Y+14, r24	; 0x0e
    7d3c:	9f 87       	std	Y+15, r25	; 0x0f
    7d3e:	a8 8b       	std	Y+16, r26	; 0x10
    7d40:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    7d42:	99 86       	std	Y+9, r9	; 0x09
    7d44:	86 01       	movw	r16, r12
    7d46:	75 01       	movw	r14, r10
    7d48:	02 c0       	rjmp	.+4      	; 0x7d4e <remove_chain+0xbc>
    7d4a:	99 24       	eor	r9, r9
    7d4c:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    7d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7d52:	a8 a1       	ldd	r26, Y+32	; 0x20
    7d54:	b9 a1       	ldd	r27, Y+33	; 0x21
    7d56:	e8 16       	cp	r14, r24
    7d58:	f9 06       	cpc	r15, r25
    7d5a:	0a 07       	cpc	r16, r26
    7d5c:	1b 07       	cpc	r17, r27
    7d5e:	08 f4       	brcc	.+2      	; 0x7d62 <remove_chain+0xd0>
    7d60:	b2 cf       	rjmp	.-156    	; 0x7cc6 <remove_chain+0x34>
    7d62:	03 c0       	rjmp	.+6      	; 0x7d6a <remove_chain+0xd8>
    7d64:	22 e0       	ldi	r18, 0x02	; 2
    7d66:	30 e0       	ldi	r19, 0x00	; 0
    7d68:	02 c0       	rjmp	.+4      	; 0x7d6e <remove_chain+0xdc>
    7d6a:	20 e0       	ldi	r18, 0x00	; 0
    7d6c:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    7d6e:	c9 01       	movw	r24, r18
    7d70:	cd b7       	in	r28, 0x3d	; 61
    7d72:	de b7       	in	r29, 0x3e	; 62
    7d74:	eb e0       	ldi	r30, 0x0B	; 11
    7d76:	0c 94 6e 58 	jmp	0xb0dc	; 0xb0dc <__epilogue_restores__+0xe>

00007d7a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    7d7a:	a0 e0       	ldi	r26, 0x00	; 0
    7d7c:	b0 e0       	ldi	r27, 0x00	; 0
    7d7e:	e3 ec       	ldi	r30, 0xC3	; 195
    7d80:	fe e3       	ldi	r31, 0x3E	; 62
    7d82:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    7d86:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7d88:	6a 81       	ldd	r22, Y+2	; 0x02
    7d8a:	7b 81       	ldd	r23, Y+3	; 0x03
    7d8c:	88 81       	ld	r24, Y
    7d8e:	99 81       	ldd	r25, Y+1	; 0x01
    7d90:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <validate>
    7d94:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7d96:	00 97       	sbiw	r24, 0x00	; 0
    7d98:	09 f0       	breq	.+2      	; 0x7d9c <f_truncate+0x22>
    7d9a:	72 c0       	rjmp	.+228    	; 0x7e80 <f_truncate+0x106>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7d9c:	6c 81       	ldd	r22, Y+4	; 0x04
    7d9e:	67 ff       	sbrs	r22, 7
    7da0:	03 c0       	rjmp	.+6      	; 0x7da8 <f_truncate+0x2e>
    7da2:	02 e0       	ldi	r16, 0x02	; 2
    7da4:	10 e0       	ldi	r17, 0x00	; 0
    7da6:	6c c0       	rjmp	.+216    	; 0x7e80 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    7da8:	61 fd       	sbrc	r22, 1
    7daa:	03 c0       	rjmp	.+6      	; 0x7db2 <f_truncate+0x38>
    7dac:	07 e0       	ldi	r16, 0x07	; 7
    7dae:	10 e0       	ldi	r17, 0x00	; 0
    7db0:	67 c0       	rjmp	.+206    	; 0x7e80 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    7db2:	2e 81       	ldd	r18, Y+6	; 0x06
    7db4:	3f 81       	ldd	r19, Y+7	; 0x07
    7db6:	48 85       	ldd	r20, Y+8	; 0x08
    7db8:	59 85       	ldd	r21, Y+9	; 0x09
    7dba:	8a 85       	ldd	r24, Y+10	; 0x0a
    7dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    7dbe:	ac 85       	ldd	r26, Y+12	; 0x0c
    7dc0:	bd 85       	ldd	r27, Y+13	; 0x0d
    7dc2:	28 17       	cp	r18, r24
    7dc4:	39 07       	cpc	r19, r25
    7dc6:	4a 07       	cpc	r20, r26
    7dc8:	5b 07       	cpc	r21, r27
    7dca:	08 f0       	brcs	.+2      	; 0x7dce <f_truncate+0x54>
    7dcc:	59 c0       	rjmp	.+178    	; 0x7e80 <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    7dce:	2a 87       	std	Y+10, r18	; 0x0a
    7dd0:	3b 87       	std	Y+11, r19	; 0x0b
    7dd2:	4c 87       	std	Y+12, r20	; 0x0c
    7dd4:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7dd6:	60 62       	ori	r22, 0x20	; 32
    7dd8:	6c 83       	std	Y+4, r22	; 0x04
    7dda:	88 81       	ld	r24, Y
    7ddc:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    7dde:	21 15       	cp	r18, r1
    7de0:	31 05       	cpc	r19, r1
    7de2:	41 05       	cpc	r20, r1
    7de4:	51 05       	cpc	r21, r1
    7de6:	61 f4       	brne	.+24     	; 0x7e00 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    7de8:	4e 85       	ldd	r20, Y+14	; 0x0e
    7dea:	5f 85       	ldd	r21, Y+15	; 0x0f
    7dec:	68 89       	ldd	r22, Y+16	; 0x10
    7dee:	79 89       	ldd	r23, Y+17	; 0x11
    7df0:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <remove_chain>
    7df4:	8c 01       	movw	r16, r24
			fp->org_clust = 0;
    7df6:	1e 86       	std	Y+14, r1	; 0x0e
    7df8:	1f 86       	std	Y+15, r1	; 0x0f
    7dfa:	18 8a       	std	Y+16, r1	; 0x10
    7dfc:	19 8a       	std	Y+17, r1	; 0x11
    7dfe:	3a c0       	rjmp	.+116    	; 0x7e74 <f_truncate+0xfa>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    7e00:	4a 89       	ldd	r20, Y+18	; 0x12
    7e02:	5b 89       	ldd	r21, Y+19	; 0x13
    7e04:	6c 89       	ldd	r22, Y+20	; 0x14
    7e06:	7d 89       	ldd	r23, Y+21	; 0x15
    7e08:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    7e0c:	6b 01       	movw	r12, r22
    7e0e:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    7e10:	8f ef       	ldi	r24, 0xFF	; 255
    7e12:	c8 16       	cp	r12, r24
    7e14:	8f ef       	ldi	r24, 0xFF	; 255
    7e16:	d8 06       	cpc	r13, r24
    7e18:	8f ef       	ldi	r24, 0xFF	; 255
    7e1a:	e8 06       	cpc	r14, r24
    7e1c:	8f ef       	ldi	r24, 0xFF	; 255
    7e1e:	f8 06       	cpc	r15, r24
    7e20:	a9 f1       	breq	.+106    	; 0x7e8c <f_truncate+0x112>
			if (ncl == 1) res = FR_INT_ERR;
    7e22:	81 e0       	ldi	r24, 0x01	; 1
    7e24:	c8 16       	cp	r12, r24
    7e26:	d1 04       	cpc	r13, r1
    7e28:	e1 04       	cpc	r14, r1
    7e2a:	f1 04       	cpc	r15, r1
    7e2c:	19 f4       	brne	.+6      	; 0x7e34 <f_truncate+0xba>
    7e2e:	02 e0       	ldi	r16, 0x02	; 2
    7e30:	10 e0       	ldi	r17, 0x00	; 0
    7e32:	23 c0       	rjmp	.+70     	; 0x7e7a <f_truncate+0x100>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    7e34:	e8 81       	ld	r30, Y
    7e36:	f9 81       	ldd	r31, Y+1	; 0x01
    7e38:	86 8d       	ldd	r24, Z+30	; 0x1e
    7e3a:	97 8d       	ldd	r25, Z+31	; 0x1f
    7e3c:	a0 a1       	ldd	r26, Z+32	; 0x20
    7e3e:	b1 a1       	ldd	r27, Z+33	; 0x21
    7e40:	c8 16       	cp	r12, r24
    7e42:	d9 06       	cpc	r13, r25
    7e44:	ea 06       	cpc	r14, r26
    7e46:	fb 06       	cpc	r15, r27
    7e48:	d8 f4       	brcc	.+54     	; 0x7e80 <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    7e4a:	4a 89       	ldd	r20, Y+18	; 0x12
    7e4c:	5b 89       	ldd	r21, Y+19	; 0x13
    7e4e:	6c 89       	ldd	r22, Y+20	; 0x14
    7e50:	7d 89       	ldd	r23, Y+21	; 0x15
    7e52:	cf 01       	movw	r24, r30
    7e54:	0f ef       	ldi	r16, 0xFF	; 255
    7e56:	1f ef       	ldi	r17, 0xFF	; 255
    7e58:	2f ef       	ldi	r18, 0xFF	; 255
    7e5a:	3f e0       	ldi	r19, 0x0F	; 15
    7e5c:	0e 94 c9 3a 	call	0x7592	; 0x7592 <put_fat>
    7e60:	8c 01       	movw	r16, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    7e62:	00 97       	sbiw	r24, 0x00	; 0
    7e64:	51 f4       	brne	.+20     	; 0x7e7a <f_truncate+0x100>
    7e66:	88 81       	ld	r24, Y
    7e68:	99 81       	ldd	r25, Y+1	; 0x01
    7e6a:	b7 01       	movw	r22, r14
    7e6c:	a6 01       	movw	r20, r12
    7e6e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <remove_chain>
    7e72:	8c 01       	movw	r16, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    7e74:	01 15       	cp	r16, r1
    7e76:	11 05       	cpc	r17, r1
    7e78:	19 f0       	breq	.+6      	; 0x7e80 <f_truncate+0x106>
    7e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    7e7c:	80 68       	ori	r24, 0x80	; 128
    7e7e:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    7e80:	c8 01       	movw	r24, r16
    7e82:	cd b7       	in	r28, 0x3d	; 61
    7e84:	de b7       	in	r29, 0x3e	; 62
    7e86:	e8 e0       	ldi	r30, 0x08	; 8
    7e88:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <__epilogue_restores__+0x14>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    7e8c:	01 e0       	ldi	r16, 0x01	; 1
    7e8e:	10 e0       	ldi	r17, 0x00	; 0
    7e90:	f4 cf       	rjmp	.-24     	; 0x7e7a <f_truncate+0x100>

00007e92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    7e92:	a0 e0       	ldi	r26, 0x00	; 0
    7e94:	b0 e0       	ldi	r27, 0x00	; 0
    7e96:	ef e4       	ldi	r30, 0x4F	; 79
    7e98:	ff e3       	ldi	r31, 0x3F	; 63
    7e9a:	0c 94 4d 58 	jmp	0xb09a	; 0xb09a <__prologue_saves__+0x4>
    7e9e:	ec 01       	movw	r28, r24
    7ea0:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    7ea2:	6c 80       	ldd	r6, Y+4	; 0x04
    7ea4:	7d 80       	ldd	r7, Y+5	; 0x05
    7ea6:	08 94       	sec
    7ea8:	61 1c       	adc	r6, r1
    7eaa:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7eac:	61 14       	cp	r6, r1
    7eae:	71 04       	cpc	r7, r1
    7eb0:	09 f4       	brne	.+2      	; 0x7eb4 <dir_next+0x22>
    7eb2:	4d c1       	rjmp	.+666    	; 0x814e <dir_next+0x2bc>
    7eb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    7eb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    7eb8:	a8 89       	ldd	r26, Y+16	; 0x10
    7eba:	b9 89       	ldd	r27, Y+17	; 0x11
    7ebc:	00 97       	sbiw	r24, 0x00	; 0
    7ebe:	a1 05       	cpc	r26, r1
    7ec0:	b1 05       	cpc	r27, r1
    7ec2:	09 f4       	brne	.+2      	; 0x7ec6 <dir_next+0x34>
    7ec4:	44 c1       	rjmp	.+648    	; 0x814e <dir_next+0x2bc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    7ec6:	2f e0       	ldi	r18, 0x0F	; 15
    7ec8:	42 2e       	mov	r4, r18
    7eca:	51 2c       	mov	r5, r1
    7ecc:	46 20       	and	r4, r6
    7ece:	57 20       	and	r5, r7
    7ed0:	41 14       	cp	r4, r1
    7ed2:	51 04       	cpc	r5, r1
    7ed4:	09 f0       	breq	.+2      	; 0x7ed8 <dir_next+0x46>
    7ed6:	27 c1       	rjmp	.+590    	; 0x8126 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    7ed8:	01 96       	adiw	r24, 0x01	; 1
    7eda:	a1 1d       	adc	r26, r1
    7edc:	b1 1d       	adc	r27, r1
    7ede:	8e 87       	std	Y+14, r24	; 0x0e
    7ee0:	9f 87       	std	Y+15, r25	; 0x0f
    7ee2:	a8 8b       	std	Y+16, r26	; 0x10
    7ee4:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    7ee6:	4a 85       	ldd	r20, Y+10	; 0x0a
    7ee8:	5b 85       	ldd	r21, Y+11	; 0x0b
    7eea:	6c 85       	ldd	r22, Y+12	; 0x0c
    7eec:	7d 85       	ldd	r23, Y+13	; 0x0d
    7eee:	e8 81       	ld	r30, Y
    7ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    7ef2:	41 15       	cp	r20, r1
    7ef4:	51 05       	cpc	r21, r1
    7ef6:	61 05       	cpc	r22, r1
    7ef8:	71 05       	cpc	r23, r1
    7efa:	39 f4       	brne	.+14     	; 0x7f0a <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7efc:	87 81       	ldd	r24, Z+7	; 0x07
    7efe:	90 85       	ldd	r25, Z+8	; 0x08
    7f00:	68 16       	cp	r6, r24
    7f02:	79 06       	cpc	r7, r25
    7f04:	08 f4       	brcc	.+2      	; 0x7f08 <dir_next+0x76>
    7f06:	0f c1       	rjmp	.+542    	; 0x8126 <dir_next+0x294>
    7f08:	22 c1       	rjmp	.+580    	; 0x814e <dir_next+0x2bc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7f0a:	82 81       	ldd	r24, Z+2	; 0x02
    7f0c:	90 e0       	ldi	r25, 0x00	; 0
    7f0e:	01 97       	sbiw	r24, 0x01	; 1
    7f10:	93 01       	movw	r18, r6
    7f12:	a4 e0       	ldi	r26, 0x04	; 4
    7f14:	36 95       	lsr	r19
    7f16:	27 95       	ror	r18
    7f18:	aa 95       	dec	r26
    7f1a:	e1 f7       	brne	.-8      	; 0x7f14 <dir_next+0x82>
    7f1c:	82 23       	and	r24, r18
    7f1e:	93 23       	and	r25, r19
    7f20:	89 2b       	or	r24, r25
    7f22:	09 f0       	breq	.+2      	; 0x7f26 <dir_next+0x94>
    7f24:	00 c1       	rjmp	.+512    	; 0x8126 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7f26:	cf 01       	movw	r24, r30
    7f28:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
    7f2c:	7b 01       	movw	r14, r22
    7f2e:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    7f30:	82 e0       	ldi	r24, 0x02	; 2
    7f32:	e8 16       	cp	r14, r24
    7f34:	f1 04       	cpc	r15, r1
    7f36:	01 05       	cpc	r16, r1
    7f38:	11 05       	cpc	r17, r1
    7f3a:	08 f4       	brcc	.+2      	; 0x7f3e <dir_next+0xac>
    7f3c:	0b c1       	rjmp	.+534    	; 0x8154 <dir_next+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7f3e:	9f ef       	ldi	r25, 0xFF	; 255
    7f40:	e9 16       	cp	r14, r25
    7f42:	9f ef       	ldi	r25, 0xFF	; 255
    7f44:	f9 06       	cpc	r15, r25
    7f46:	9f ef       	ldi	r25, 0xFF	; 255
    7f48:	09 07       	cpc	r16, r25
    7f4a:	9f ef       	ldi	r25, 0xFF	; 255
    7f4c:	19 07       	cpc	r17, r25
    7f4e:	09 f4       	brne	.+2      	; 0x7f52 <dir_next+0xc0>
    7f50:	04 c1       	rjmp	.+520    	; 0x815a <dir_next+0x2c8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    7f52:	e8 81       	ld	r30, Y
    7f54:	f9 81       	ldd	r31, Y+1	; 0x01
    7f56:	86 8d       	ldd	r24, Z+30	; 0x1e
    7f58:	97 8d       	ldd	r25, Z+31	; 0x1f
    7f5a:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f5c:	b1 a1       	ldd	r27, Z+33	; 0x21
    7f5e:	e8 16       	cp	r14, r24
    7f60:	f9 06       	cpc	r15, r25
    7f62:	0a 07       	cpc	r16, r26
    7f64:	1b 07       	cpc	r17, r27
    7f66:	08 f4       	brcc	.+2      	; 0x7f6a <dir_next+0xd8>
    7f68:	a5 c0       	rjmp	.+330    	; 0x80b4 <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    7f6a:	c1 14       	cp	r12, r1
    7f6c:	d1 04       	cpc	r13, r1
    7f6e:	09 f4       	brne	.+2      	; 0x7f72 <dir_next+0xe0>
    7f70:	ee c0       	rjmp	.+476    	; 0x814e <dir_next+0x2bc>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    7f72:	4a 85       	ldd	r20, Y+10	; 0x0a
    7f74:	5b 85       	ldd	r21, Y+11	; 0x0b
    7f76:	6c 85       	ldd	r22, Y+12	; 0x0c
    7f78:	7d 85       	ldd	r23, Y+13	; 0x0d
    7f7a:	cf 01       	movw	r24, r30
    7f7c:	0e 94 93 3b 	call	0x7726	; 0x7726 <create_chain>
    7f80:	7b 01       	movw	r14, r22
    7f82:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7f84:	61 15       	cp	r22, r1
    7f86:	71 05       	cpc	r23, r1
    7f88:	81 05       	cpc	r24, r1
    7f8a:	91 05       	cpc	r25, r1
    7f8c:	19 f4       	brne	.+6      	; 0x7f94 <dir_next+0x102>
    7f8e:	27 e0       	ldi	r18, 0x07	; 7
    7f90:	30 e0       	ldi	r19, 0x00	; 0
    7f92:	e5 c0       	rjmp	.+458    	; 0x815e <dir_next+0x2cc>
					if (clst == 1) return FR_INT_ERR;
    7f94:	61 30       	cpi	r22, 0x01	; 1
    7f96:	71 05       	cpc	r23, r1
    7f98:	81 05       	cpc	r24, r1
    7f9a:	91 05       	cpc	r25, r1
    7f9c:	09 f4       	brne	.+2      	; 0x7fa0 <dir_next+0x10e>
    7f9e:	da c0       	rjmp	.+436    	; 0x8154 <dir_next+0x2c2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7fa0:	6f 3f       	cpi	r22, 0xFF	; 255
    7fa2:	bf ef       	ldi	r27, 0xFF	; 255
    7fa4:	7b 07       	cpc	r23, r27
    7fa6:	bf ef       	ldi	r27, 0xFF	; 255
    7fa8:	8b 07       	cpc	r24, r27
    7faa:	bf ef       	ldi	r27, 0xFF	; 255
    7fac:	9b 07       	cpc	r25, r27
    7fae:	09 f4       	brne	.+2      	; 0x7fb2 <dir_next+0x120>
    7fb0:	d4 c0       	rjmp	.+424    	; 0x815a <dir_next+0x2c8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7fb2:	88 81       	ld	r24, Y
    7fb4:	99 81       	ldd	r25, Y+1	; 0x01
    7fb6:	40 e0       	ldi	r20, 0x00	; 0
    7fb8:	50 e0       	ldi	r21, 0x00	; 0
    7fba:	60 e0       	ldi	r22, 0x00	; 0
    7fbc:	70 e0       	ldi	r23, 0x00	; 0
    7fbe:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    7fc2:	89 2b       	or	r24, r25
    7fc4:	09 f0       	breq	.+2      	; 0x7fc8 <dir_next+0x136>
    7fc6:	c9 c0       	rjmp	.+402    	; 0x815a <dir_next+0x2c8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    7fc8:	88 81       	ld	r24, Y
    7fca:	99 81       	ldd	r25, Y+1	; 0x01
    7fcc:	fc 01       	movw	r30, r24
    7fce:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    7fd0:	8e 5c       	subi	r24, 0xCE	; 206
    7fd2:	9d 4f       	sbci	r25, 0xFD	; 253
    7fd4:	01 c0       	rjmp	.+2      	; 0x7fd8 <dir_next+0x146>
    7fd6:	11 92       	st	Z+, r1
    7fd8:	e8 17       	cp	r30, r24
    7fda:	f9 07       	cpc	r31, r25
    7fdc:	e1 f7       	brne	.-8      	; 0x7fd6 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7fde:	88 80       	ld	r8, Y
    7fe0:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7fe2:	ee ef       	ldi	r30, 0xFE	; 254
    7fe4:	ae 2e       	mov	r10, r30
    7fe6:	ef ef       	ldi	r30, 0xFF	; 255
    7fe8:	be 2e       	mov	r11, r30
    7fea:	ef ef       	ldi	r30, 0xFF	; 255
    7fec:	ce 2e       	mov	r12, r30
    7fee:	ef ef       	ldi	r30, 0xFF	; 255
    7ff0:	de 2e       	mov	r13, r30
    7ff2:	ae 0c       	add	r10, r14
    7ff4:	bf 1c       	adc	r11, r15
    7ff6:	c0 1e       	adc	r12, r16
    7ff8:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7ffa:	f4 01       	movw	r30, r8
    7ffc:	86 8d       	ldd	r24, Z+30	; 0x1e
    7ffe:	97 8d       	ldd	r25, Z+31	; 0x1f
    8000:	a0 a1       	ldd	r26, Z+32	; 0x20
    8002:	b1 a1       	ldd	r27, Z+33	; 0x21
    8004:	02 97       	sbiw	r24, 0x02	; 2
    8006:	a1 09       	sbc	r26, r1
    8008:	b1 09       	sbc	r27, r1
    800a:	a8 16       	cp	r10, r24
    800c:	b9 06       	cpc	r11, r25
    800e:	ca 06       	cpc	r12, r26
    8010:	db 06       	cpc	r13, r27
    8012:	28 f0       	brcs	.+10     	; 0x801e <dir_next+0x18c>
    8014:	20 e0       	ldi	r18, 0x00	; 0
    8016:	30 e0       	ldi	r19, 0x00	; 0
    8018:	40 e0       	ldi	r20, 0x00	; 0
    801a:	50 e0       	ldi	r21, 0x00	; 0
    801c:	15 c0       	rjmp	.+42     	; 0x8048 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    801e:	d4 01       	movw	r26, r8
    8020:	12 96       	adiw	r26, 0x02	; 2
    8022:	2c 91       	ld	r18, X
    8024:	30 e0       	ldi	r19, 0x00	; 0
    8026:	40 e0       	ldi	r20, 0x00	; 0
    8028:	50 e0       	ldi	r21, 0x00	; 0
    802a:	c6 01       	movw	r24, r12
    802c:	b5 01       	movw	r22, r10
    802e:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    8032:	9b 01       	movw	r18, r22
    8034:	ac 01       	movw	r20, r24
    8036:	f4 01       	movw	r30, r8
    8038:	82 a5       	ldd	r24, Z+42	; 0x2a
    803a:	93 a5       	ldd	r25, Z+43	; 0x2b
    803c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    803e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8040:	28 0f       	add	r18, r24
    8042:	39 1f       	adc	r19, r25
    8044:	4a 1f       	adc	r20, r26
    8046:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    8048:	d4 01       	movw	r26, r8
    804a:	9e 96       	adiw	r26, 0x2e	; 46
    804c:	2d 93       	st	X+, r18
    804e:	3d 93       	st	X+, r19
    8050:	4d 93       	st	X+, r20
    8052:	5c 93       	st	X, r21
    8054:	d1 97       	sbiw	r26, 0x31	; 49
    8056:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    8058:	cc 24       	eor	r12, r12
    805a:	c3 94       	inc	r12
    805c:	1a c0       	rjmp	.+52     	; 0x8092 <dir_next+0x200>
    805e:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    8060:	88 81       	ld	r24, Y
    8062:	99 81       	ldd	r25, Y+1	; 0x01
    8064:	40 e0       	ldi	r20, 0x00	; 0
    8066:	50 e0       	ldi	r21, 0x00	; 0
    8068:	60 e0       	ldi	r22, 0x00	; 0
    806a:	70 e0       	ldi	r23, 0x00	; 0
    806c:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    8070:	89 2b       	or	r24, r25
    8072:	09 f0       	breq	.+2      	; 0x8076 <dir_next+0x1e4>
    8074:	72 c0       	rjmp	.+228    	; 0x815a <dir_next+0x2c8>
						dj->fs->winsect++;
    8076:	e8 81       	ld	r30, Y
    8078:	f9 81       	ldd	r31, Y+1	; 0x01
    807a:	86 a5       	ldd	r24, Z+46	; 0x2e
    807c:	97 a5       	ldd	r25, Z+47	; 0x2f
    807e:	a0 a9       	ldd	r26, Z+48	; 0x30
    8080:	b1 a9       	ldd	r27, Z+49	; 0x31
    8082:	01 96       	adiw	r24, 0x01	; 1
    8084:	a1 1d       	adc	r26, r1
    8086:	b1 1d       	adc	r27, r1
    8088:	86 a7       	std	Z+46, r24	; 0x2e
    808a:	97 a7       	std	Z+47, r25	; 0x2f
    808c:	a0 ab       	std	Z+48, r26	; 0x30
    808e:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8090:	d3 94       	inc	r13
    8092:	e8 81       	ld	r30, Y
    8094:	f9 81       	ldd	r31, Y+1	; 0x01
    8096:	82 81       	ldd	r24, Z+2	; 0x02
    8098:	d8 16       	cp	r13, r24
    809a:	08 f3       	brcs	.-62     	; 0x805e <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    809c:	86 a5       	ldd	r24, Z+46	; 0x2e
    809e:	97 a5       	ldd	r25, Z+47	; 0x2f
    80a0:	a0 a9       	ldd	r26, Z+48	; 0x30
    80a2:	b1 a9       	ldd	r27, Z+49	; 0x31
    80a4:	8d 19       	sub	r24, r13
    80a6:	91 09       	sbc	r25, r1
    80a8:	a1 09       	sbc	r26, r1
    80aa:	b1 09       	sbc	r27, r1
    80ac:	86 a7       	std	Z+46, r24	; 0x2e
    80ae:	97 a7       	std	Z+47, r25	; 0x2f
    80b0:	a0 ab       	std	Z+48, r26	; 0x30
    80b2:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    80b4:	ea 86       	std	Y+10, r14	; 0x0a
    80b6:	fb 86       	std	Y+11, r15	; 0x0b
    80b8:	0c 87       	std	Y+12, r16	; 0x0c
    80ba:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    80bc:	c8 80       	ld	r12, Y
    80be:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    80c0:	8e ef       	ldi	r24, 0xFE	; 254
    80c2:	9f ef       	ldi	r25, 0xFF	; 255
    80c4:	af ef       	ldi	r26, 0xFF	; 255
    80c6:	bf ef       	ldi	r27, 0xFF	; 255
    80c8:	e8 0e       	add	r14, r24
    80ca:	f9 1e       	adc	r15, r25
    80cc:	0a 1f       	adc	r16, r26
    80ce:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    80d0:	f6 01       	movw	r30, r12
    80d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    80d4:	97 8d       	ldd	r25, Z+31	; 0x1f
    80d6:	a0 a1       	ldd	r26, Z+32	; 0x20
    80d8:	b1 a1       	ldd	r27, Z+33	; 0x21
    80da:	02 97       	sbiw	r24, 0x02	; 2
    80dc:	a1 09       	sbc	r26, r1
    80de:	b1 09       	sbc	r27, r1
    80e0:	e8 16       	cp	r14, r24
    80e2:	f9 06       	cpc	r15, r25
    80e4:	0a 07       	cpc	r16, r26
    80e6:	1b 07       	cpc	r17, r27
    80e8:	28 f0       	brcs	.+10     	; 0x80f4 <dir_next+0x262>
    80ea:	20 e0       	ldi	r18, 0x00	; 0
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	40 e0       	ldi	r20, 0x00	; 0
    80f0:	50 e0       	ldi	r21, 0x00	; 0
    80f2:	15 c0       	rjmp	.+42     	; 0x811e <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    80f4:	d6 01       	movw	r26, r12
    80f6:	12 96       	adiw	r26, 0x02	; 2
    80f8:	2c 91       	ld	r18, X
    80fa:	30 e0       	ldi	r19, 0x00	; 0
    80fc:	40 e0       	ldi	r20, 0x00	; 0
    80fe:	50 e0       	ldi	r21, 0x00	; 0
    8100:	c8 01       	movw	r24, r16
    8102:	b7 01       	movw	r22, r14
    8104:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    8108:	9b 01       	movw	r18, r22
    810a:	ac 01       	movw	r20, r24
    810c:	f6 01       	movw	r30, r12
    810e:	82 a5       	ldd	r24, Z+42	; 0x2a
    8110:	93 a5       	ldd	r25, Z+43	; 0x2b
    8112:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8114:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8116:	28 0f       	add	r18, r24
    8118:	39 1f       	adc	r19, r25
    811a:	4a 1f       	adc	r20, r26
    811c:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    811e:	2e 87       	std	Y+14, r18	; 0x0e
    8120:	3f 87       	std	Y+15, r19	; 0x0f
    8122:	48 8b       	std	Y+16, r20	; 0x10
    8124:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    8126:	6c 82       	std	Y+4, r6	; 0x04
    8128:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    812a:	75 e0       	ldi	r23, 0x05	; 5
    812c:	44 0c       	add	r4, r4
    812e:	55 1c       	adc	r5, r5
    8130:	7a 95       	dec	r23
    8132:	e1 f7       	brne	.-8      	; 0x812c <dir_next+0x29a>
    8134:	82 e3       	ldi	r24, 0x32	; 50
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	48 0e       	add	r4, r24
    813a:	59 1e       	adc	r5, r25
    813c:	88 81       	ld	r24, Y
    813e:	99 81       	ldd	r25, Y+1	; 0x01
    8140:	84 0d       	add	r24, r4
    8142:	95 1d       	adc	r25, r5
    8144:	8a 8b       	std	Y+18, r24	; 0x12
    8146:	9b 8b       	std	Y+19, r25	; 0x13
    8148:	20 e0       	ldi	r18, 0x00	; 0
    814a:	30 e0       	ldi	r19, 0x00	; 0
    814c:	08 c0       	rjmp	.+16     	; 0x815e <dir_next+0x2cc>

	return FR_OK;
    814e:	24 e0       	ldi	r18, 0x04	; 4
    8150:	30 e0       	ldi	r19, 0x00	; 0
    8152:	05 c0       	rjmp	.+10     	; 0x815e <dir_next+0x2cc>
    8154:	22 e0       	ldi	r18, 0x02	; 2
    8156:	30 e0       	ldi	r19, 0x00	; 0
    8158:	02 c0       	rjmp	.+4      	; 0x815e <dir_next+0x2cc>
    815a:	21 e0       	ldi	r18, 0x01	; 1
    815c:	30 e0       	ldi	r19, 0x00	; 0
}
    815e:	c9 01       	movw	r24, r18
    8160:	cd b7       	in	r28, 0x3d	; 61
    8162:	de b7       	in	r29, 0x3e	; 62
    8164:	e0 e1       	ldi	r30, 0x10	; 16
    8166:	0c 94 69 58 	jmp	0xb0d2	; 0xb0d2 <__epilogue_restores__+0x4>

0000816a <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    816a:	a0 e0       	ldi	r26, 0x00	; 0
    816c:	b0 e0       	ldi	r27, 0x00	; 0
    816e:	eb eb       	ldi	r30, 0xBB	; 187
    8170:	f0 e4       	ldi	r31, 0x40	; 64
    8172:	0c 94 53 58 	jmp	0xb0a6	; 0xb0a6 <__prologue_saves__+0x10>
    8176:	ec 01       	movw	r28, r24
    8178:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    817a:	fb 01       	movw	r30, r22
    817c:	80 81       	ld	r24, Z
    817e:	8f 32       	cpi	r24, 0x2F	; 47
    8180:	11 f0       	breq	.+4      	; 0x8186 <follow_path+0x1c>
    8182:	8c 35       	cpi	r24, 0x5C	; 92
    8184:	41 f4       	brne	.+16     	; 0x8196 <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    8186:	08 94       	sec
    8188:	e1 1c       	adc	r14, r1
    818a:	f1 1c       	adc	r15, r1
    818c:	1e 82       	std	Y+6, r1	; 0x06
    818e:	1f 82       	std	Y+7, r1	; 0x07
    8190:	18 86       	std	Y+8, r1	; 0x08
    8192:	19 86       	std	Y+9, r1	; 0x09
    8194:	0a c0       	rjmp	.+20     	; 0x81aa <follow_path+0x40>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    8196:	e8 81       	ld	r30, Y
    8198:	f9 81       	ldd	r31, Y+1	; 0x01
    819a:	86 89       	ldd	r24, Z+22	; 0x16
    819c:	97 89       	ldd	r25, Z+23	; 0x17
    819e:	a0 8d       	ldd	r26, Z+24	; 0x18
    81a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    81a2:	8e 83       	std	Y+6, r24	; 0x06
    81a4:	9f 83       	std	Y+7, r25	; 0x07
    81a6:	a8 87       	std	Y+8, r26	; 0x08
    81a8:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    81aa:	f7 01       	movw	r30, r14
    81ac:	80 81       	ld	r24, Z
    81ae:	80 32       	cpi	r24, 0x20	; 32
    81b0:	48 f4       	brcc	.+18     	; 0x81c4 <follow_path+0x5a>
		res = dir_seek(dj, 0);
    81b2:	ce 01       	movw	r24, r28
    81b4:	60 e0       	ldi	r22, 0x00	; 0
    81b6:	70 e0       	ldi	r23, 0x00	; 0
    81b8:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    81bc:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    81be:	1a 8a       	std	Y+18, r1	; 0x12
    81c0:	1b 8a       	std	Y+19, r1	; 0x13
    81c2:	02 c1       	rjmp	.+516    	; 0x83c8 <follow_path+0x25e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    81c4:	50 e2       	ldi	r21, 0x20	; 32
    81c6:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    81c8:	45 e0       	ldi	r20, 0x05	; 5
    81ca:	a4 2e       	mov	r10, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    81cc:	0c 89       	ldd	r16, Y+20	; 0x14
    81ce:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    81d0:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    81d2:	c8 01       	movw	r24, r16
    81d4:	0b 96       	adiw	r24, 0x0b	; 11
    81d6:	01 c0       	rjmp	.+2      	; 0x81da <follow_path+0x70>
    81d8:	b1 92       	st	Z+, r11
    81da:	e8 17       	cp	r30, r24
    81dc:	f9 07       	cpc	r31, r25
    81de:	e1 f7       	brne	.-8      	; 0x81d8 <follow_path+0x6e>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    81e0:	f7 01       	movw	r30, r14
    81e2:	80 81       	ld	r24, Z
    81e4:	8e 32       	cpi	r24, 0x2E	; 46
    81e6:	41 f0       	breq	.+16     	; 0x81f8 <follow_path+0x8e>
    81e8:	60 e0       	ldi	r22, 0x00	; 0
    81ea:	70 e0       	ldi	r23, 0x00	; 0
    81ec:	cc 24       	eor	r12, r12
    81ee:	dd 24       	eor	r13, r13
    81f0:	a8 e0       	ldi	r26, 0x08	; 8
    81f2:	b0 e0       	ldi	r27, 0x00	; 0
    81f4:	30 e0       	ldi	r19, 0x00	; 0
    81f6:	21 c0       	rjmp	.+66     	; 0x823a <follow_path+0xd0>
    81f8:	d8 01       	movw	r26, r16
    81fa:	80 e0       	ldi	r24, 0x00	; 0
    81fc:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    81fe:	f7 01       	movw	r30, r14
    8200:	e8 0f       	add	r30, r24
    8202:	f9 1f       	adc	r31, r25
    8204:	e0 81       	ld	r30, Z
    8206:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    8208:	ee 32       	cpi	r30, 0x2E	; 46
    820a:	31 f4       	brne	.+12     	; 0x8218 <follow_path+0xae>
    820c:	83 30       	cpi	r24, 0x03	; 3
    820e:	91 05       	cpc	r25, r1
    8210:	09 f4       	brne	.+2      	; 0x8214 <follow_path+0xaa>
    8212:	d3 c0       	rjmp	.+422    	; 0x83ba <follow_path+0x250>
			sfn[i++] = c;
    8214:	ed 93       	st	X+, r30
    8216:	f3 cf       	rjmp	.-26     	; 0x81fe <follow_path+0x94>
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
    8218:	ef 32       	cpi	r30, 0x2F	; 47
    821a:	29 f0       	breq	.+10     	; 0x8226 <follow_path+0xbc>
    821c:	ec 35       	cpi	r30, 0x5C	; 92
    821e:	39 f0       	breq	.+14     	; 0x822e <follow_path+0xc4>
    8220:	e0 32       	cpi	r30, 0x20	; 32
    8222:	08 f0       	brcs	.+2      	; 0x8226 <follow_path+0xbc>
    8224:	ca c0       	rjmp	.+404    	; 0x83ba <follow_path+0x250>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    8226:	e0 32       	cpi	r30, 0x20	; 32
    8228:	10 f4       	brcc	.+4      	; 0x822e <follow_path+0xc4>
    822a:	24 e2       	ldi	r18, 0x24	; 36
    822c:	01 c0       	rjmp	.+2      	; 0x8230 <follow_path+0xc6>
    822e:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    8230:	e8 0e       	add	r14, r24
    8232:	f9 1e       	adc	r15, r25
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    8234:	f8 01       	movw	r30, r16
    8236:	23 87       	std	Z+11, r18	; 0x0b
    8238:	cd c0       	rjmp	.+410    	; 0x83d4 <follow_path+0x26a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    823a:	f7 01       	movw	r30, r14
    823c:	ec 0d       	add	r30, r12
    823e:	fd 1d       	adc	r31, r13
    8240:	20 81       	ld	r18, Z
    8242:	08 94       	sec
    8244:	c1 1c       	adc	r12, r1
    8246:	d1 1c       	adc	r13, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    8248:	20 32       	cpi	r18, 0x20	; 32
    824a:	08 f4       	brcc	.+2      	; 0x824e <follow_path+0xe4>
    824c:	42 c0       	rjmp	.+132    	; 0x82d2 <follow_path+0x168>
    824e:	2f 32       	cpi	r18, 0x2F	; 47
    8250:	09 f4       	brne	.+2      	; 0x8254 <follow_path+0xea>
    8252:	ca c0       	rjmp	.+404    	; 0x83e8 <follow_path+0x27e>
    8254:	2c 35       	cpi	r18, 0x5C	; 92
    8256:	09 f4       	brne	.+2      	; 0x825a <follow_path+0xf0>
    8258:	c7 c0       	rjmp	.+398    	; 0x83e8 <follow_path+0x27e>
		if (c == '.' || i >= ni) {
    825a:	2e 32       	cpi	r18, 0x2E	; 46
    825c:	19 f0       	breq	.+6      	; 0x8264 <follow_path+0xfa>
    825e:	6a 17       	cp	r22, r26
    8260:	7b 07       	cpc	r23, r27
    8262:	6c f0       	brlt	.+26     	; 0x827e <follow_path+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    8264:	18 97       	sbiw	r26, 0x08	; 8
    8266:	09 f0       	breq	.+2      	; 0x826a <follow_path+0x100>
    8268:	a8 c0       	rjmp	.+336    	; 0x83ba <follow_path+0x250>
    826a:	2e 32       	cpi	r18, 0x2E	; 46
    826c:	09 f0       	breq	.+2      	; 0x8270 <follow_path+0x106>
    826e:	a5 c0       	rjmp	.+330    	; 0x83ba <follow_path+0x250>
			i = 8; ni = 11;
			b <<= 2; continue;
    8270:	33 0f       	add	r19, r19
    8272:	33 0f       	add	r19, r19
    8274:	68 e0       	ldi	r22, 0x08	; 8
    8276:	70 e0       	ldi	r23, 0x00	; 0
    8278:	ab e0       	ldi	r26, 0x0B	; 11
    827a:	b0 e0       	ldi	r27, 0x00	; 0
    827c:	de cf       	rjmp	.-68     	; 0x823a <follow_path+0xd0>
		}
		if (c >= 0x80) {				/* Extended char */
    827e:	27 ff       	sbrs	r18, 7
    8280:	05 c0       	rjmp	.+10     	; 0x828c <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
    8282:	e2 2f       	mov	r30, r18
    8284:	f0 e0       	ldi	r31, 0x00	; 0
    8286:	e7 52       	subi	r30, 0x27	; 39
    8288:	fc 4d       	sbci	r31, 0xDC	; 220
    828a:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
    828c:	42 2f       	mov	r20, r18
    828e:	50 e0       	ldi	r21, 0x00	; 0
    8290:	e8 e0       	ldi	r30, 0x08	; 8
    8292:	f4 e2       	ldi	r31, 0x24	; 36
    8294:	01 c0       	rjmp	.+2      	; 0x8298 <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    8296:	31 96       	adiw	r30, 0x01	; 1
    8298:	80 81       	ld	r24, Z
    829a:	88 23       	and	r24, r24
    829c:	39 f0       	breq	.+14     	; 0x82ac <follow_path+0x142>
    829e:	99 27       	eor	r25, r25
    82a0:	87 fd       	sbrc	r24, 7
    82a2:	90 95       	com	r25
    82a4:	84 17       	cp	r24, r20
    82a6:	95 07       	cpc	r25, r21
    82a8:	b1 f7       	brne	.-20     	; 0x8296 <follow_path+0x12c>
    82aa:	87 c0       	rjmp	.+270    	; 0x83ba <follow_path+0x250>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    82ac:	82 2f       	mov	r24, r18
    82ae:	81 54       	subi	r24, 0x41	; 65
    82b0:	8a 31       	cpi	r24, 0x1A	; 26
    82b2:	10 f4       	brcc	.+4      	; 0x82b8 <follow_path+0x14e>
				b |= 2;
    82b4:	32 60       	ori	r19, 0x02	; 2
    82b6:	06 c0       	rjmp	.+12     	; 0x82c4 <follow_path+0x15a>
			} else {
				if (IsLower(c)) {
    82b8:	82 2f       	mov	r24, r18
    82ba:	81 56       	subi	r24, 0x61	; 97
    82bc:	8a 31       	cpi	r24, 0x1A	; 26
    82be:	10 f4       	brcc	.+4      	; 0x82c4 <follow_path+0x15a>
					b |= 1; c -= 0x20;
    82c0:	31 60       	ori	r19, 0x01	; 1
    82c2:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    82c4:	f8 01       	movw	r30, r16
    82c6:	e6 0f       	add	r30, r22
    82c8:	f7 1f       	adc	r31, r23
    82ca:	20 83       	st	Z, r18
    82cc:	6f 5f       	subi	r22, 0xFF	; 255
    82ce:	7f 4f       	sbci	r23, 0xFF	; 255
    82d0:	b4 cf       	rjmp	.-152    	; 0x823a <follow_path+0xd0>
    82d2:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    82d4:	67 2b       	or	r22, r23
    82d6:	09 f4       	brne	.+2      	; 0x82da <follow_path+0x170>
    82d8:	70 c0       	rjmp	.+224    	; 0x83ba <follow_path+0x250>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    82da:	f8 01       	movw	r30, r16
    82dc:	80 81       	ld	r24, Z
    82de:	85 3e       	cpi	r24, 0xE5	; 229
    82e0:	09 f4       	brne	.+2      	; 0x82e4 <follow_path+0x17a>
    82e2:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    82e4:	18 97       	sbiw	r26, 0x08	; 8
    82e6:	11 f4       	brne	.+4      	; 0x82ec <follow_path+0x182>
    82e8:	33 0f       	add	r19, r19
    82ea:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    82ec:	23 2f       	mov	r18, r19
    82ee:	30 e0       	ldi	r19, 0x00	; 0
    82f0:	c9 01       	movw	r24, r18
    82f2:	83 70       	andi	r24, 0x03	; 3
    82f4:	90 70       	andi	r25, 0x00	; 0
    82f6:	01 97       	sbiw	r24, 0x01	; 1
    82f8:	09 f4       	brne	.+2      	; 0x82fc <follow_path+0x192>
    82fa:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    82fc:	2c 70       	andi	r18, 0x0C	; 12
    82fe:	30 70       	andi	r19, 0x00	; 0
    8300:	24 30       	cpi	r18, 0x04	; 4
    8302:	31 05       	cpc	r19, r1
    8304:	09 f4       	brne	.+2      	; 0x8308 <follow_path+0x19e>
    8306:	48 60       	ori	r20, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    8308:	ec 0c       	add	r14, r12
    830a:	fd 1c       	adc	r15, r13

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[11] = c;		/* Store NT flag, File name is created */
    830c:	f8 01       	movw	r30, r16
    830e:	43 87       	std	Z+11, r20	; 0x0b
    8310:	61 c0       	rjmp	.+194    	; 0x83d4 <follow_path+0x26a>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8312:	4e 85       	ldd	r20, Y+14	; 0x0e
    8314:	5f 85       	ldd	r21, Y+15	; 0x0f
    8316:	68 89       	ldd	r22, Y+16	; 0x10
    8318:	79 89       	ldd	r23, Y+17	; 0x11
    831a:	88 81       	ld	r24, Y
    831c:	99 81       	ldd	r25, Y+1	; 0x01
    831e:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    8322:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    8324:	00 97       	sbiw	r24, 0x00	; 0
    8326:	01 f5       	brne	.+64     	; 0x8368 <follow_path+0x1fe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8328:	ea 89       	ldd	r30, Y+18	; 0x12
    832a:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    832c:	80 81       	ld	r24, Z
    832e:	88 23       	and	r24, r24
    8330:	19 f4       	brne	.+6      	; 0x8338 <follow_path+0x1ce>
    8332:	44 e0       	ldi	r20, 0x04	; 4
    8334:	50 e0       	ldi	r21, 0x00	; 0
    8336:	18 c0       	rjmp	.+48     	; 0x8368 <follow_path+0x1fe>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    8338:	83 85       	ldd	r24, Z+11	; 0x0b
    833a:	83 fd       	sbrc	r24, 3
    833c:	0f c0       	rjmp	.+30     	; 0x835c <follow_path+0x1f2>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    833e:	ac 89       	ldd	r26, Y+20	; 0x14
    8340:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    8342:	9f 01       	movw	r18, r30
    8344:	25 5f       	subi	r18, 0xF5	; 245
    8346:	3f 4f       	sbci	r19, 0xFF	; 255
    8348:	e2 17       	cp	r30, r18
    834a:	f3 07       	cpc	r31, r19
    834c:	69 f0       	breq	.+26     	; 0x8368 <follow_path+0x1fe>
    834e:	90 81       	ld	r25, Z
    8350:	8c 91       	ld	r24, X
    8352:	98 17       	cp	r25, r24
    8354:	19 f4       	brne	.+6      	; 0x835c <follow_path+0x1f2>
    8356:	31 96       	adiw	r30, 0x01	; 1
    8358:	11 96       	adiw	r26, 0x01	; 1
    835a:	f6 cf       	rjmp	.-20     	; 0x8348 <follow_path+0x1de>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    835c:	ce 01       	movw	r24, r28
    835e:	60 e0       	ldi	r22, 0x00	; 0
    8360:	70 e0       	ldi	r23, 0x00	; 0
    8362:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <dir_next>
    8366:	3b c0       	rjmp	.+118    	; 0x83de <follow_path+0x274>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
    8368:	ec 89       	ldd	r30, Y+20	; 0x14
    836a:	fd 89       	ldd	r31, Y+21	; 0x15
    836c:	83 85       	ldd	r24, Z+11	; 0x0b
    836e:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    8370:	41 15       	cp	r20, r1
    8372:	51 05       	cpc	r21, r1
    8374:	39 f0       	breq	.+14     	; 0x8384 <follow_path+0x21a>
    8376:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    8378:	44 30       	cpi	r20, 0x04	; 4
    837a:	51 05       	cpc	r21, r1
    837c:	09 f5       	brne	.+66     	; 0x83c0 <follow_path+0x256>
    837e:	88 23       	and	r24, r24
    8380:	09 f1       	breq	.+66     	; 0x83c4 <follow_path+0x25a>
    8382:	22 c0       	rjmp	.+68     	; 0x83c8 <follow_path+0x25e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    8384:	88 23       	and	r24, r24
    8386:	e1 f4       	brne	.+56     	; 0x83c0 <follow_path+0x256>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    8388:	ea 89       	ldd	r30, Y+18	; 0x12
    838a:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    838c:	83 85       	ldd	r24, Z+11	; 0x0b
    838e:	84 ff       	sbrs	r24, 4
    8390:	19 c0       	rjmp	.+50     	; 0x83c4 <follow_path+0x25a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8392:	84 89       	ldd	r24, Z+20	; 0x14
    8394:	95 89       	ldd	r25, Z+21	; 0x15
    8396:	a0 e0       	ldi	r26, 0x00	; 0
    8398:	b0 e0       	ldi	r27, 0x00	; 0
    839a:	dc 01       	movw	r26, r24
    839c:	99 27       	eor	r25, r25
    839e:	88 27       	eor	r24, r24
    83a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    83a2:	33 8d       	ldd	r19, Z+27	; 0x1b
    83a4:	40 e0       	ldi	r20, 0x00	; 0
    83a6:	50 e0       	ldi	r21, 0x00	; 0
    83a8:	82 2b       	or	r24, r18
    83aa:	93 2b       	or	r25, r19
    83ac:	a4 2b       	or	r26, r20
    83ae:	b5 2b       	or	r27, r21
    83b0:	8e 83       	std	Y+6, r24	; 0x06
    83b2:	9f 83       	std	Y+7, r25	; 0x07
    83b4:	a8 87       	std	Y+8, r26	; 0x08
    83b6:	b9 87       	std	Y+9, r27	; 0x09
    83b8:	09 cf       	rjmp	.-494    	; 0x81cc <follow_path+0x62>
		}
    83ba:	26 e0       	ldi	r18, 0x06	; 6
    83bc:	30 e0       	ldi	r19, 0x00	; 0
    83be:	04 c0       	rjmp	.+8      	; 0x83c8 <follow_path+0x25e>
    83c0:	9a 01       	movw	r18, r20
    83c2:	02 c0       	rjmp	.+4      	; 0x83c8 <follow_path+0x25e>
    83c4:	25 e0       	ldi	r18, 0x05	; 5
    83c6:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    83c8:	c9 01       	movw	r24, r18
    83ca:	cd b7       	in	r28, 0x3d	; 61
    83cc:	de b7       	in	r29, 0x3e	; 62
    83ce:	ea e0       	ldi	r30, 0x0A	; 10
    83d0:	0c 94 6f 58 	jmp	0xb0de	; 0xb0de <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    83d4:	ce 01       	movw	r24, r28
    83d6:	60 e0       	ldi	r22, 0x00	; 0
    83d8:	70 e0       	ldi	r23, 0x00	; 0
    83da:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    83de:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    83e0:	00 97       	sbiw	r24, 0x00	; 0
    83e2:	09 f4       	brne	.+2      	; 0x83e6 <follow_path+0x27c>
    83e4:	96 cf       	rjmp	.-212    	; 0x8312 <follow_path+0x1a8>
    83e6:	c0 cf       	rjmp	.-128    	; 0x8368 <follow_path+0x1fe>
    83e8:	40 e0       	ldi	r20, 0x00	; 0
    83ea:	74 cf       	rjmp	.-280    	; 0x82d4 <follow_path+0x16a>

000083ec <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    83ec:	a4 e2       	ldi	r26, 0x24	; 36
    83ee:	b0 e0       	ldi	r27, 0x00	; 0
    83f0:	ec ef       	ldi	r30, 0xFC	; 252
    83f2:	f1 e4       	ldi	r31, 0x41	; 65
    83f4:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    83f8:	8b a3       	std	Y+35, r24	; 0x23
    83fa:	9c a3       	std	Y+36, r25	; 0x24
    83fc:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
    83fe:	6d e0       	ldi	r22, 0x0D	; 13
    8400:	e6 2e       	mov	r14, r22
    8402:	f1 2c       	mov	r15, r1
    8404:	ec 0e       	add	r14, r28
    8406:	fd 1e       	adc	r15, r29
    8408:	ce 01       	movw	r24, r28
    840a:	83 96       	adiw	r24, 0x23	; 35
    840c:	b7 01       	movw	r22, r14
    840e:	40 e0       	ldi	r20, 0x00	; 0
    8410:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    8414:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    8416:	00 97       	sbiw	r24, 0x00	; 0
    8418:	b9 f4       	brne	.+46     	; 0x8448 <f_stat+0x5c>
		INITBUF(dj, sfn, lfn);
    841a:	ce 01       	movw	r24, r28
    841c:	01 96       	adiw	r24, 0x01	; 1
    841e:	89 a3       	std	Y+33, r24	; 0x21
    8420:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    8422:	6b a1       	ldd	r22, Y+35	; 0x23
    8424:	7c a1       	ldd	r23, Y+36	; 0x24
    8426:	c7 01       	movw	r24, r14
    8428:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    842c:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follwo completed */
    842e:	00 97       	sbiw	r24, 0x00	; 0
    8430:	59 f4       	brne	.+22     	; 0x8448 <f_stat+0x5c>
			if (dj.dir)	/* Found an object */
    8432:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8434:	98 a1       	ldd	r25, Y+32	; 0x20
    8436:	89 2b       	or	r24, r25
    8438:	19 f4       	brne	.+6      	; 0x8440 <f_stat+0x54>
    843a:	06 e0       	ldi	r16, 0x06	; 6
    843c:	10 e0       	ldi	r17, 0x00	; 0
    843e:	04 c0       	rjmp	.+8      	; 0x8448 <f_stat+0x5c>
				get_fileinfo(&dj, fno);
    8440:	c7 01       	movw	r24, r14
    8442:	b6 01       	movw	r22, r12
    8444:	0e 94 42 31 	call	0x6284	; 0x6284 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8448:	c8 01       	movw	r24, r16
    844a:	a4 96       	adiw	r28, 0x24	; 36
    844c:	e8 e0       	ldi	r30, 0x08	; 8
    844e:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <__epilogue_restores__+0x14>

00008452 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    8452:	ae e0       	ldi	r26, 0x0E	; 14
    8454:	b0 e0       	ldi	r27, 0x00	; 0
    8456:	ef e2       	ldi	r30, 0x2F	; 47
    8458:	f2 e4       	ldi	r31, 0x42	; 66
    845a:	0c 94 59 58 	jmp	0xb0b2	; 0xb0b2 <__prologue_saves__+0x1c>
    845e:	8c 01       	movw	r16, r24
    8460:	6d 87       	std	Y+13, r22	; 0x0d
    8462:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    8464:	ce 01       	movw	r24, r28
    8466:	0d 96       	adiw	r24, 0x0d	; 13
    8468:	b8 01       	movw	r22, r16
    846a:	40 e0       	ldi	r20, 0x00	; 0
    846c:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    8470:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8472:	00 97       	sbiw	r24, 0x00	; 0
    8474:	09 f0       	breq	.+2      	; 0x8478 <f_opendir+0x26>
    8476:	42 c0       	rjmp	.+132    	; 0x84fc <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    8478:	ce 01       	movw	r24, r28
    847a:	01 96       	adiw	r24, 0x01	; 1
    847c:	d8 01       	movw	r26, r16
    847e:	54 96       	adiw	r26, 0x14	; 20
    8480:	8d 93       	st	X+, r24
    8482:	9c 93       	st	X, r25
    8484:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    8486:	6d 85       	ldd	r22, Y+13	; 0x0d
    8488:	7e 85       	ldd	r23, Y+14	; 0x0e
    848a:	c8 01       	movw	r24, r16
    848c:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    8490:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    8492:	00 97       	sbiw	r24, 0x00	; 0
    8494:	71 f5       	brne	.+92     	; 0x84f2 <f_opendir+0xa0>
			dir = dj->dir;
    8496:	d8 01       	movw	r26, r16
    8498:	52 96       	adiw	r26, 0x12	; 18
    849a:	ed 91       	ld	r30, X+
    849c:	fc 91       	ld	r31, X
    849e:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    84a0:	30 97       	sbiw	r30, 0x00	; 0
    84a2:	b9 f0       	breq	.+46     	; 0x84d2 <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    84a4:	83 85       	ldd	r24, Z+11	; 0x0b
    84a6:	84 ff       	sbrs	r24, 4
    84a8:	27 c0       	rjmp	.+78     	; 0x84f8 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    84aa:	84 89       	ldd	r24, Z+20	; 0x14
    84ac:	95 89       	ldd	r25, Z+21	; 0x15
    84ae:	a0 e0       	ldi	r26, 0x00	; 0
    84b0:	b0 e0       	ldi	r27, 0x00	; 0
    84b2:	dc 01       	movw	r26, r24
    84b4:	99 27       	eor	r25, r25
    84b6:	88 27       	eor	r24, r24
    84b8:	22 8d       	ldd	r18, Z+26	; 0x1a
    84ba:	33 8d       	ldd	r19, Z+27	; 0x1b
    84bc:	40 e0       	ldi	r20, 0x00	; 0
    84be:	50 e0       	ldi	r21, 0x00	; 0
    84c0:	82 2b       	or	r24, r18
    84c2:	93 2b       	or	r25, r19
    84c4:	a4 2b       	or	r26, r20
    84c6:	b5 2b       	or	r27, r21
    84c8:	f8 01       	movw	r30, r16
    84ca:	86 83       	std	Z+6, r24	; 0x06
    84cc:	97 83       	std	Z+7, r25	; 0x07
    84ce:	a0 87       	std	Z+8, r26	; 0x08
    84d0:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    84d2:	d8 01       	movw	r26, r16
    84d4:	ed 91       	ld	r30, X+
    84d6:	fc 91       	ld	r31, X
    84d8:	11 97       	sbiw	r26, 0x01	; 1
    84da:	85 81       	ldd	r24, Z+5	; 0x05
    84dc:	96 81       	ldd	r25, Z+6	; 0x06
    84de:	12 96       	adiw	r26, 0x02	; 2
    84e0:	8d 93       	st	X+, r24
    84e2:	9c 93       	st	X, r25
    84e4:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    84e6:	c8 01       	movw	r24, r16
    84e8:	60 e0       	ldi	r22, 0x00	; 0
    84ea:	70 e0       	ldi	r23, 0x00	; 0
    84ec:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    84f0:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    84f2:	24 30       	cpi	r18, 0x04	; 4
    84f4:	31 05       	cpc	r19, r1
    84f6:	11 f4       	brne	.+4      	; 0x84fc <f_opendir+0xaa>
    84f8:	25 e0       	ldi	r18, 0x05	; 5
    84fa:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    84fc:	c9 01       	movw	r24, r18
    84fe:	2e 96       	adiw	r28, 0x0e	; 14
    8500:	e4 e0       	ldi	r30, 0x04	; 4
    8502:	0c 94 75 58 	jmp	0xb0ea	; 0xb0ea <__epilogue_restores__+0x1c>

00008506 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    8506:	a4 e2       	ldi	r26, 0x24	; 36
    8508:	b0 e0       	ldi	r27, 0x00	; 0
    850a:	e9 e8       	ldi	r30, 0x89	; 137
    850c:	f2 e4       	ldi	r31, 0x42	; 66
    850e:	0c 94 59 58 	jmp	0xb0b2	; 0xb0b2 <__prologue_saves__+0x1c>
    8512:	8b a3       	std	Y+35, r24	; 0x23
    8514:	9c a3       	std	Y+36, r25	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
    8516:	8e 01       	movw	r16, r28
    8518:	03 5f       	subi	r16, 0xF3	; 243
    851a:	1f 4f       	sbci	r17, 0xFF	; 255
    851c:	ce 01       	movw	r24, r28
    851e:	83 96       	adiw	r24, 0x23	; 35
    8520:	b8 01       	movw	r22, r16
    8522:	40 e0       	ldi	r20, 0x00	; 0
    8524:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    8528:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    852a:	00 97       	sbiw	r24, 0x00	; 0
    852c:	e9 f5       	brne	.+122    	; 0x85a8 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    852e:	ce 01       	movw	r24, r28
    8530:	01 96       	adiw	r24, 0x01	; 1
    8532:	89 a3       	std	Y+33, r24	; 0x21
    8534:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8536:	6b a1       	ldd	r22, Y+35	; 0x23
    8538:	7c a1       	ldd	r23, Y+36	; 0x24
    853a:	c8 01       	movw	r24, r16
    853c:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    8540:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    8542:	00 97       	sbiw	r24, 0x00	; 0
    8544:	61 f5       	brne	.+88     	; 0x859e <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    8546:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8548:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    854a:	21 15       	cp	r18, r1
    854c:	31 05       	cpc	r19, r1
    854e:	39 f4       	brne	.+14     	; 0x855e <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    8550:	ed 85       	ldd	r30, Y+13	; 0x0d
    8552:	fe 85       	ldd	r31, Y+14	; 0x0e
    8554:	16 8a       	std	Z+22, r1	; 0x16
    8556:	17 8a       	std	Z+23, r1	; 0x17
    8558:	10 8e       	std	Z+24, r1	; 0x18
    855a:	11 8e       	std	Z+25, r1	; 0x19
    855c:	25 c0       	rjmp	.+74     	; 0x85a8 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    855e:	d9 01       	movw	r26, r18
    8560:	1b 96       	adiw	r26, 0x0b	; 11
    8562:	8c 91       	ld	r24, X
    8564:	1b 97       	sbiw	r26, 0x0b	; 11
    8566:	84 ff       	sbrs	r24, 4
    8568:	1d c0       	rjmp	.+58     	; 0x85a4 <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    856a:	0d 85       	ldd	r16, Y+13	; 0x0d
    856c:	1e 85       	ldd	r17, Y+14	; 0x0e
    856e:	54 96       	adiw	r26, 0x14	; 20
    8570:	8d 91       	ld	r24, X+
    8572:	9c 91       	ld	r25, X
    8574:	55 97       	sbiw	r26, 0x15	; 21
    8576:	a0 e0       	ldi	r26, 0x00	; 0
    8578:	b0 e0       	ldi	r27, 0x00	; 0
    857a:	dc 01       	movw	r26, r24
    857c:	99 27       	eor	r25, r25
    857e:	88 27       	eor	r24, r24
    8580:	f9 01       	movw	r30, r18
    8582:	22 8d       	ldd	r18, Z+26	; 0x1a
    8584:	33 8d       	ldd	r19, Z+27	; 0x1b
    8586:	40 e0       	ldi	r20, 0x00	; 0
    8588:	50 e0       	ldi	r21, 0x00	; 0
    858a:	82 2b       	or	r24, r18
    858c:	93 2b       	or	r25, r19
    858e:	a4 2b       	or	r26, r20
    8590:	b5 2b       	or	r27, r21
    8592:	f8 01       	movw	r30, r16
    8594:	86 8b       	std	Z+22, r24	; 0x16
    8596:	97 8b       	std	Z+23, r25	; 0x17
    8598:	a0 8f       	std	Z+24, r26	; 0x18
    859a:	b1 8f       	std	Z+25, r27	; 0x19
    859c:	05 c0       	rjmp	.+10     	; 0x85a8 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    859e:	84 30       	cpi	r24, 0x04	; 4
    85a0:	91 05       	cpc	r25, r1
    85a2:	11 f4       	brne	.+4      	; 0x85a8 <f_chdir+0xa2>
    85a4:	65 e0       	ldi	r22, 0x05	; 5
    85a6:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    85a8:	cb 01       	movw	r24, r22
    85aa:	a4 96       	adiw	r28, 0x24	; 36
    85ac:	e4 e0       	ldi	r30, 0x04	; 4
    85ae:	0c 94 75 58 	jmp	0xb0ea	; 0xb0ea <__epilogue_restores__+0x1c>

000085b2 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    85b2:	0f 93       	push	r16
    85b4:	1f 93       	push	r17
    85b6:	cf 93       	push	r28
    85b8:	df 93       	push	r29
    85ba:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    85bc:	60 e0       	ldi	r22, 0x00	; 0
    85be:	70 e0       	ldi	r23, 0x00	; 0
    85c0:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    85c4:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    85c6:	00 97       	sbiw	r24, 0x00	; 0
    85c8:	e1 f5       	brne	.+120    	; 0x8642 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    85ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    85cc:	5f 85       	ldd	r21, Y+15	; 0x0f
    85ce:	68 89       	ldd	r22, Y+16	; 0x10
    85d0:	79 89       	ldd	r23, Y+17	; 0x11
    85d2:	88 81       	ld	r24, Y
    85d4:	99 81       	ldd	r25, Y+1	; 0x01
    85d6:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    85da:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    85dc:	00 97       	sbiw	r24, 0x00	; 0
    85de:	89 f5       	brne	.+98     	; 0x8642 <dir_register+0x90>
			c = *dj->dir;
    85e0:	ea 89       	ldd	r30, Y+18	; 0x12
    85e2:	fb 89       	ldd	r31, Y+19	; 0x13
    85e4:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    85e6:	e5 3e       	cpi	r30, 0xE5	; 229
    85e8:	91 f1       	breq	.+100    	; 0x864e <dir_register+0x9c>
    85ea:	ee 23       	and	r30, r30
    85ec:	81 f1       	breq	.+96     	; 0x864e <dir_register+0x9c>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    85ee:	ce 01       	movw	r24, r28
    85f0:	61 e0       	ldi	r22, 0x01	; 1
    85f2:	70 e0       	ldi	r23, 0x00	; 0
    85f4:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <dir_next>
    85f8:	e5 cf       	rjmp	.-54     	; 0x85c4 <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    85fa:	aa 89       	ldd	r26, Y+18	; 0x12
    85fc:	bb 89       	ldd	r27, Y+19	; 0x13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    85fe:	bd 01       	movw	r22, r26
    8600:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    8602:	cd 01       	movw	r24, r26
    8604:	80 96       	adiw	r24, 0x20	; 32
    8606:	01 c0       	rjmp	.+2      	; 0x860a <dir_register+0x58>
    8608:	11 92       	st	Z+, r1
    860a:	e8 17       	cp	r30, r24
    860c:	f9 07       	cpc	r31, r25
    860e:	e1 f7       	brne	.-8      	; 0x8608 <dir_register+0x56>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    8610:	0c 89       	ldd	r16, Y+20	; 0x14
    8612:	1d 89       	ldd	r17, Y+21	; 0x15
	while (cnt--) *d++ = *s++;
    8614:	a8 01       	movw	r20, r16
    8616:	45 5f       	subi	r20, 0xF5	; 245
    8618:	5f 4f       	sbci	r21, 0xFF	; 255
    861a:	06 c0       	rjmp	.+12     	; 0x8628 <dir_register+0x76>
    861c:	f8 01       	movw	r30, r16
    861e:	81 91       	ld	r24, Z+
    8620:	8f 01       	movw	r16, r30
    8622:	fb 01       	movw	r30, r22
    8624:	81 93       	st	Z+, r24
    8626:	bf 01       	movw	r22, r30
    8628:	04 17       	cp	r16, r20
    862a:	15 07       	cpc	r17, r21
    862c:	b9 f7       	brne	.-18     	; 0x861c <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
    862e:	ec 89       	ldd	r30, Y+20	; 0x14
    8630:	fd 89       	ldd	r31, Y+21	; 0x15
    8632:	83 85       	ldd	r24, Z+11	; 0x0b
    8634:	88 71       	andi	r24, 0x18	; 24
    8636:	1c 96       	adiw	r26, 0x0c	; 12
    8638:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    863a:	e8 81       	ld	r30, Y
    863c:	f9 81       	ldd	r31, Y+1	; 0x01
    863e:	81 e0       	ldi	r24, 0x01	; 1
    8640:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    8642:	c9 01       	movw	r24, r18
    8644:	df 91       	pop	r29
    8646:	cf 91       	pop	r28
    8648:	1f 91       	pop	r17
    864a:	0f 91       	pop	r16
    864c:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    864e:	4e 85       	ldd	r20, Y+14	; 0x0e
    8650:	5f 85       	ldd	r21, Y+15	; 0x0f
    8652:	68 89       	ldd	r22, Y+16	; 0x10
    8654:	79 89       	ldd	r23, Y+17	; 0x11
    8656:	88 81       	ld	r24, Y
    8658:	99 81       	ldd	r25, Y+1	; 0x01
    865a:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    865e:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8660:	00 97       	sbiw	r24, 0x00	; 0
    8662:	59 f2       	breq	.-106    	; 0x85fa <dir_register+0x48>
    8664:	ee cf       	rjmp	.-36     	; 0x8642 <dir_register+0x90>

00008666 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8666:	cf 93       	push	r28
    8668:	df 93       	push	r29
    866a:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    866c:	6c 81       	ldd	r22, Y+4	; 0x04
    866e:	7d 81       	ldd	r23, Y+5	; 0x05
    8670:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    8674:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8676:	00 97       	sbiw	r24, 0x00	; 0
    8678:	99 f4       	brne	.+38     	; 0x86a0 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    867a:	4e 85       	ldd	r20, Y+14	; 0x0e
    867c:	5f 85       	ldd	r21, Y+15	; 0x0f
    867e:	68 89       	ldd	r22, Y+16	; 0x10
    8680:	79 89       	ldd	r23, Y+17	; 0x11
    8682:	88 81       	ld	r24, Y
    8684:	99 81       	ldd	r25, Y+1	; 0x01
    8686:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    868a:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    868c:	00 97       	sbiw	r24, 0x00	; 0
    868e:	41 f4       	brne	.+16     	; 0x86a0 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    8690:	ea 89       	ldd	r30, Y+18	; 0x12
    8692:	fb 89       	ldd	r31, Y+19	; 0x13
    8694:	85 ee       	ldi	r24, 0xE5	; 229
    8696:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    8698:	e8 81       	ld	r30, Y
    869a:	f9 81       	ldd	r31, Y+1	; 0x01
    869c:	81 e0       	ldi	r24, 0x01	; 1
    869e:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    86a0:	c9 01       	movw	r24, r18
    86a2:	df 91       	pop	r29
    86a4:	cf 91       	pop	r28
    86a6:	08 95       	ret

000086a8 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    86a8:	0f 93       	push	r16
    86aa:	cf 93       	push	r28
    86ac:	df 93       	push	r29
    86ae:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    86b0:	40 e0       	ldi	r20, 0x00	; 0
    86b2:	50 e0       	ldi	r21, 0x00	; 0
    86b4:	60 e0       	ldi	r22, 0x00	; 0
    86b6:	70 e0       	ldi	r23, 0x00	; 0
    86b8:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    86bc:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    86be:	00 97       	sbiw	r24, 0x00	; 0
    86c0:	09 f0       	breq	.+2      	; 0x86c4 <sync+0x1c>
    86c2:	60 c0       	rjmp	.+192    	; 0x8784 <sync+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    86c4:	88 81       	ld	r24, Y
    86c6:	83 30       	cpi	r24, 0x03	; 3
    86c8:	09 f0       	breq	.+2      	; 0x86cc <sync+0x24>
    86ca:	51 c0       	rjmp	.+162    	; 0x876e <sync+0xc6>
    86cc:	89 85       	ldd	r24, Y+9	; 0x09
    86ce:	88 23       	and	r24, r24
    86d0:	09 f4       	brne	.+2      	; 0x86d4 <sync+0x2c>
    86d2:	4d c0       	rjmp	.+154    	; 0x876e <sync+0xc6>
			fs->winsect = 0;
    86d4:	1e a6       	std	Y+46, r1	; 0x2e
    86d6:	1f a6       	std	Y+47, r1	; 0x2f
    86d8:	18 aa       	std	Y+48, r1	; 0x30
    86da:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    86dc:	be 01       	movw	r22, r28
    86de:	6e 5c       	subi	r22, 0xCE	; 206
    86e0:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    86e2:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    86e4:	ce 01       	movw	r24, r28
    86e6:	8e 5c       	subi	r24, 0xCE	; 206
    86e8:	9d 4f       	sbci	r25, 0xFD	; 253
    86ea:	01 c0       	rjmp	.+2      	; 0x86ee <sync+0x46>
    86ec:	11 92       	st	Z+, r1
    86ee:	e8 17       	cp	r30, r24
    86f0:	f9 07       	cpc	r31, r25
    86f2:	e1 f7       	brne	.-8      	; 0x86ec <sync+0x44>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    86f4:	c0 5d       	subi	r28, 0xD0	; 208
    86f6:	dd 4f       	sbci	r29, 0xFD	; 253
    86f8:	85 e5       	ldi	r24, 0x55	; 85
    86fa:	9a ea       	ldi	r25, 0xAA	; 170
    86fc:	88 83       	st	Y, r24
    86fe:	99 83       	std	Y+1, r25	; 0x01
    8700:	c0 53       	subi	r28, 0x30	; 48
    8702:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    8704:	82 e5       	ldi	r24, 0x52	; 82
    8706:	92 e5       	ldi	r25, 0x52	; 82
    8708:	a1 e6       	ldi	r26, 0x61	; 97
    870a:	b1 e4       	ldi	r27, 0x41	; 65
    870c:	8a ab       	std	Y+50, r24	; 0x32
    870e:	9b ab       	std	Y+51, r25	; 0x33
    8710:	ac ab       	std	Y+52, r26	; 0x34
    8712:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    8714:	ca 5e       	subi	r28, 0xEA	; 234
    8716:	dd 4f       	sbci	r29, 0xFD	; 253
    8718:	82 e7       	ldi	r24, 0x72	; 114
    871a:	92 e7       	ldi	r25, 0x72	; 114
    871c:	a1 e4       	ldi	r26, 0x41	; 65
    871e:	b1 e6       	ldi	r27, 0x61	; 97
    8720:	88 83       	st	Y, r24
    8722:	99 83       	std	Y+1, r25	; 0x01
    8724:	aa 83       	std	Y+2, r26	; 0x02
    8726:	bb 83       	std	Y+3, r27	; 0x03
    8728:	c6 51       	subi	r28, 0x16	; 22
    872a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    872c:	8e 85       	ldd	r24, Y+14	; 0x0e
    872e:	9f 85       	ldd	r25, Y+15	; 0x0f
    8730:	a8 89       	ldd	r26, Y+16	; 0x10
    8732:	b9 89       	ldd	r27, Y+17	; 0x11
    8734:	c6 5e       	subi	r28, 0xE6	; 230
    8736:	dd 4f       	sbci	r29, 0xFD	; 253
    8738:	88 83       	st	Y, r24
    873a:	99 83       	std	Y+1, r25	; 0x01
    873c:	aa 83       	std	Y+2, r26	; 0x02
    873e:	bb 83       	std	Y+3, r27	; 0x03
    8740:	ca 51       	subi	r28, 0x1A	; 26
    8742:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    8744:	8a 85       	ldd	r24, Y+10	; 0x0a
    8746:	9b 85       	ldd	r25, Y+11	; 0x0b
    8748:	ac 85       	ldd	r26, Y+12	; 0x0c
    874a:	bd 85       	ldd	r27, Y+13	; 0x0d
    874c:	c2 5e       	subi	r28, 0xE2	; 226
    874e:	dd 4f       	sbci	r29, 0xFD	; 253
    8750:	88 83       	st	Y, r24
    8752:	99 83       	std	Y+1, r25	; 0x01
    8754:	aa 83       	std	Y+2, r26	; 0x02
    8756:	bb 83       	std	Y+3, r27	; 0x03
    8758:	ce 51       	subi	r28, 0x1E	; 30
    875a:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    875c:	2a 89       	ldd	r18, Y+18	; 0x12
    875e:	3b 89       	ldd	r19, Y+19	; 0x13
    8760:	4c 89       	ldd	r20, Y+20	; 0x14
    8762:	5d 89       	ldd	r21, Y+21	; 0x15
    8764:	89 81       	ldd	r24, Y+1	; 0x01
    8766:	01 e0       	ldi	r16, 0x01	; 1
    8768:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
			fs->fsi_flag = 0;
    876c:	19 86       	std	Y+9, r1	; 0x09
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    876e:	89 81       	ldd	r24, Y+1	; 0x01
    8770:	60 e0       	ldi	r22, 0x00	; 0
    8772:	40 e0       	ldi	r20, 0x00	; 0
    8774:	50 e0       	ldi	r21, 0x00	; 0
    8776:	0e 94 18 52 	call	0xa430	; 0xa430 <disk_ioctl>
    877a:	00 97       	sbiw	r24, 0x00	; 0
    877c:	11 f0       	breq	.+4      	; 0x8782 <sync+0xda>
    877e:	81 e0       	ldi	r24, 0x01	; 1
    8780:	90 e0       	ldi	r25, 0x00	; 0
    8782:	9c 01       	movw	r18, r24
			res = FR_DISK_ERR;
	}

	return res;
}
    8784:	c9 01       	movw	r24, r18
    8786:	df 91       	pop	r29
    8788:	cf 91       	pop	r28
    878a:	0f 91       	pop	r16
    878c:	08 95       	ret

0000878e <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    878e:	a4 e2       	ldi	r26, 0x24	; 36
    8790:	b0 e0       	ldi	r27, 0x00	; 0
    8792:	ed ec       	ldi	r30, 0xCD	; 205
    8794:	f3 e4       	ldi	r31, 0x43	; 67
    8796:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
    879a:	8b a3       	std	Y+35, r24	; 0x23
    879c:	9c a3       	std	Y+36, r25	; 0x24
    879e:	7b 01       	movw	r14, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    87a0:	8e 01       	movw	r16, r28
    87a2:	03 5f       	subi	r16, 0xF3	; 243
    87a4:	1f 4f       	sbci	r17, 0xFF	; 255
    87a6:	ce 01       	movw	r24, r28
    87a8:	83 96       	adiw	r24, 0x23	; 35
    87aa:	b8 01       	movw	r22, r16
    87ac:	41 e0       	ldi	r20, 0x01	; 1
    87ae:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    87b2:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    87b4:	00 97       	sbiw	r24, 0x00	; 0
    87b6:	69 f5       	brne	.+90     	; 0x8812 <f_utime+0x84>
		INITBUF(dj, sfn, lfn);
    87b8:	ce 01       	movw	r24, r28
    87ba:	01 96       	adiw	r24, 0x01	; 1
    87bc:	89 a3       	std	Y+33, r24	; 0x21
    87be:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    87c0:	6b a1       	ldd	r22, Y+35	; 0x23
    87c2:	7c a1       	ldd	r23, Y+36	; 0x24
    87c4:	c8 01       	movw	r24, r16
    87c6:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    87ca:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    87cc:	00 97       	sbiw	r24, 0x00	; 0
    87ce:	09 f5       	brne	.+66     	; 0x8812 <f_utime+0x84>
    87d0:	e9 a1       	ldd	r30, Y+33	; 0x21
    87d2:	fa a1       	ldd	r31, Y+34	; 0x22
    87d4:	83 85       	ldd	r24, Z+11	; 0x0b
    87d6:	85 fd       	sbrc	r24, 5
    87d8:	1a c0       	rjmp	.+52     	; 0x880e <f_utime+0x80>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    87da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    87dc:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    87de:	30 97       	sbiw	r30, 0x00	; 0
    87e0:	b1 f0       	breq	.+44     	; 0x880e <f_utime+0x80>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    87e2:	d7 01       	movw	r26, r14
    87e4:	16 96       	adiw	r26, 0x06	; 6
    87e6:	8d 91       	ld	r24, X+
    87e8:	9c 91       	ld	r25, X
    87ea:	17 97       	sbiw	r26, 0x07	; 7
    87ec:	86 8b       	std	Z+22, r24	; 0x16
    87ee:	97 8b       	std	Z+23, r25	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    87f0:	14 96       	adiw	r26, 0x04	; 4
    87f2:	8d 91       	ld	r24, X+
    87f4:	9c 91       	ld	r25, X
    87f6:	15 97       	sbiw	r26, 0x05	; 5
    87f8:	80 8f       	std	Z+24, r24	; 0x18
    87fa:	91 8f       	std	Z+25, r25	; 0x19
				dj.fs->wflag = 1;
    87fc:	ed 85       	ldd	r30, Y+13	; 0x0d
    87fe:	fe 85       	ldd	r31, Y+14	; 0x0e
    8800:	81 e0       	ldi	r24, 0x01	; 1
    8802:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8804:	cf 01       	movw	r24, r30
    8806:	0e 94 54 43 	call	0x86a8	; 0x86a8 <sync>
    880a:	9c 01       	movw	r18, r24
    880c:	02 c0       	rjmp	.+4      	; 0x8812 <f_utime+0x84>
    880e:	26 e0       	ldi	r18, 0x06	; 6
    8810:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8812:	c9 01       	movw	r24, r18
    8814:	a4 96       	adiw	r28, 0x24	; 36
    8816:	e6 e0       	ldi	r30, 0x06	; 6
    8818:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

0000881c <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    881c:	a4 e2       	ldi	r26, 0x24	; 36
    881e:	b0 e0       	ldi	r27, 0x00	; 0
    8820:	e4 e1       	ldi	r30, 0x14	; 20
    8822:	f4 e4       	ldi	r31, 0x44	; 68
    8824:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
    8828:	8b a3       	std	Y+35, r24	; 0x23
    882a:	9c a3       	std	Y+36, r25	; 0x24
    882c:	e6 2e       	mov	r14, r22
    882e:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8830:	8e 01       	movw	r16, r28
    8832:	03 5f       	subi	r16, 0xF3	; 243
    8834:	1f 4f       	sbci	r17, 0xFF	; 255
    8836:	ce 01       	movw	r24, r28
    8838:	83 96       	adiw	r24, 0x23	; 35
    883a:	b8 01       	movw	r22, r16
    883c:	41 e0       	ldi	r20, 0x01	; 1
    883e:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    8842:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8844:	00 97       	sbiw	r24, 0x00	; 0
    8846:	49 f5       	brne	.+82     	; 0x889a <f_chmod+0x7e>
		INITBUF(dj, sfn, lfn);
    8848:	ce 01       	movw	r24, r28
    884a:	01 96       	adiw	r24, 0x01	; 1
    884c:	89 a3       	std	Y+33, r24	; 0x21
    884e:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8850:	6b a1       	ldd	r22, Y+35	; 0x23
    8852:	7c a1       	ldd	r23, Y+36	; 0x24
    8854:	c8 01       	movw	r24, r16
    8856:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    885a:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    885c:	00 97       	sbiw	r24, 0x00	; 0
    885e:	e9 f4       	brne	.+58     	; 0x889a <f_chmod+0x7e>
    8860:	e9 a1       	ldd	r30, Y+33	; 0x21
    8862:	fa a1       	ldd	r31, Y+34	; 0x22
    8864:	83 85       	ldd	r24, Z+11	; 0x0b
    8866:	85 fd       	sbrc	r24, 5
    8868:	16 c0       	rjmp	.+44     	; 0x8896 <f_chmod+0x7a>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    886a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    886c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    886e:	30 97       	sbiw	r30, 0x00	; 0
    8870:	91 f0       	breq	.+36     	; 0x8896 <f_chmod+0x7a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    8872:	9f 2d       	mov	r25, r15
    8874:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8876:	89 2f       	mov	r24, r25
    8878:	80 95       	com	r24
    887a:	23 85       	ldd	r18, Z+11	; 0x0b
    887c:	82 23       	and	r24, r18
    887e:	9e 21       	and	r25, r14
    8880:	89 2b       	or	r24, r25
    8882:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    8884:	ed 85       	ldd	r30, Y+13	; 0x0d
    8886:	fe 85       	ldd	r31, Y+14	; 0x0e
    8888:	81 e0       	ldi	r24, 0x01	; 1
    888a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    888c:	cf 01       	movw	r24, r30
    888e:	0e 94 54 43 	call	0x86a8	; 0x86a8 <sync>
    8892:	9c 01       	movw	r18, r24
    8894:	02 c0       	rjmp	.+4      	; 0x889a <f_chmod+0x7e>
    8896:	26 e0       	ldi	r18, 0x06	; 6
    8898:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    889a:	c9 01       	movw	r24, r18
    889c:	a4 96       	adiw	r28, 0x24	; 36
    889e:	e6 e0       	ldi	r30, 0x06	; 6
    88a0:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

000088a4 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    88a4:	af e4       	ldi	r26, 0x4F	; 79
    88a6:	b0 e0       	ldi	r27, 0x00	; 0
    88a8:	e8 e5       	ldi	r30, 0x58	; 88
    88aa:	f4 e4       	ldi	r31, 0x44	; 68
    88ac:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    88b0:	8e 01       	movw	r16, r28
    88b2:	02 5b       	subi	r16, 0xB2	; 178
    88b4:	1f 4f       	sbci	r17, 0xFF	; 255
    88b6:	d8 01       	movw	r26, r16
    88b8:	8d 93       	st	X+, r24
    88ba:	9c 93       	st	X, r25
    88bc:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    88be:	ce 01       	movw	r24, r28
    88c0:	01 96       	adiw	r24, 0x01	; 1
    88c2:	8e ab       	std	Y+54, r24	; 0x36
    88c4:	9f ab       	std	Y+55, r25	; 0x37
	res = auto_mount(&path_old, &dj_old.fs, 1);
    88c6:	32 e2       	ldi	r19, 0x22	; 34
    88c8:	e3 2e       	mov	r14, r19
    88ca:	f1 2c       	mov	r15, r1
    88cc:	ec 0e       	add	r14, r28
    88ce:	fd 1e       	adc	r15, r29
    88d0:	c8 01       	movw	r24, r16
    88d2:	b7 01       	movw	r22, r14
    88d4:	41 e0       	ldi	r20, 0x01	; 1
    88d6:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    88da:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    88dc:	00 97       	sbiw	r24, 0x00	; 0
    88de:	09 f0       	breq	.+2      	; 0x88e2 <f_rename+0x3e>
    88e0:	f0 c0       	rjmp	.+480    	; 0x8ac2 <f_rename+0x21e>
		dj_new.fs = dj_old.fs;
    88e2:	8a a1       	ldd	r24, Y+34	; 0x22
    88e4:	9b a1       	ldd	r25, Y+35	; 0x23
    88e6:	88 af       	std	Y+56, r24	; 0x38
    88e8:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    88ea:	f8 01       	movw	r30, r16
    88ec:	60 81       	ld	r22, Z
    88ee:	71 81       	ldd	r23, Z+1	; 0x01
    88f0:	c7 01       	movw	r24, r14
    88f2:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    88f6:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
    88f8:	00 97       	sbiw	r24, 0x00	; 0
    88fa:	09 f0       	breq	.+2      	; 0x88fe <f_rename+0x5a>
    88fc:	e2 c0       	rjmp	.+452    	; 0x8ac2 <f_rename+0x21e>
    88fe:	ee a9       	ldd	r30, Y+54	; 0x36
    8900:	ff a9       	ldd	r31, Y+55	; 0x37
    8902:	83 85       	ldd	r24, Z+11	; 0x0b
    8904:	85 ff       	sbrs	r24, 5
    8906:	03 c0       	rjmp	.+6      	; 0x890e <f_rename+0x6a>
    8908:	26 e0       	ldi	r18, 0x06	; 6
    890a:	30 e0       	ldi	r19, 0x00	; 0
    890c:	da c0       	rjmp	.+436    	; 0x8ac2 <f_rename+0x21e>
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    890e:	8c a9       	ldd	r24, Y+52	; 0x34
    8910:	9d a9       	ldd	r25, Y+53	; 0x35
    8912:	00 97       	sbiw	r24, 0x00	; 0
    8914:	19 f4       	brne	.+6      	; 0x891c <f_rename+0x78>
    8916:	24 e0       	ldi	r18, 0x04	; 4
    8918:	30 e0       	ldi	r19, 0x00	; 0
    891a:	d3 c0       	rjmp	.+422    	; 0x8ac2 <f_rename+0x21e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    891c:	de 01       	movw	r26, r28
    891e:	1d 96       	adiw	r26, 0x0d	; 13
    8920:	fc 01       	movw	r30, r24
    8922:	02 c0       	rjmp	.+4      	; 0x8928 <f_rename+0x84>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8924:	82 85       	ldd	r24, Z+10	; 0x0a
    8926:	8d 93       	st	X+, r24
    8928:	31 96       	adiw	r30, 0x01	; 1
    892a:	ae 15       	cp	r26, r14
    892c:	bf 05       	cpc	r27, r15
    892e:	d1 f7       	brne	.-12     	; 0x8924 <f_rename+0x80>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8930:	de 01       	movw	r26, r28
    8932:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    8934:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    8936:	9d 01       	movw	r18, r26
    8938:	02 c0       	rjmp	.+4      	; 0x893e <f_rename+0x9a>
    893a:	81 91       	ld	r24, Z+
    893c:	8d 93       	st	X+, r24
    893e:	e2 17       	cp	r30, r18
    8940:	f3 07       	cpc	r31, r19
    8942:	d9 f7       	brne	.-10     	; 0x893a <f_rename+0x96>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    8944:	8e 01       	movw	r16, r28
    8946:	08 5c       	subi	r16, 0xC8	; 200
    8948:	1f 4f       	sbci	r17, 0xFF	; 255
    894a:	c8 01       	movw	r24, r16
    894c:	b6 01       	movw	r22, r12
    894e:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    8952:	9c 01       	movw	r18, r24
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    8954:	00 97       	sbiw	r24, 0x00	; 0
    8956:	19 f4       	brne	.+6      	; 0x895e <f_rename+0xba>
    8958:	28 e0       	ldi	r18, 0x08	; 8
    895a:	30 e0       	ldi	r19, 0x00	; 0
    895c:	b2 c0       	rjmp	.+356    	; 0x8ac2 <f_rename+0x21e>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    895e:	84 30       	cpi	r24, 0x04	; 4
    8960:	91 05       	cpc	r25, r1
    8962:	09 f0       	breq	.+2      	; 0x8966 <f_rename+0xc2>
    8964:	ae c0       	rjmp	.+348    	; 0x8ac2 <f_rename+0x21e>
		res = dir_register(&dj_new);			/* Register the new object */
    8966:	c8 01       	movw	r24, r16
    8968:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <dir_register>
    896c:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    896e:	00 97       	sbiw	r24, 0x00	; 0
    8970:	09 f0       	breq	.+2      	; 0x8974 <f_rename+0xd0>
    8972:	a7 c0       	rjmp	.+334    	; 0x8ac2 <f_rename+0x21e>
			dir = dj_new.dir;					/* Copy object information into new entry */
    8974:	fe 01       	movw	r30, r28
    8976:	e6 5b       	subi	r30, 0xB6	; 182
    8978:	ff 4f       	sbci	r31, 0xFF	; 255
    897a:	20 81       	ld	r18, Z
    897c:	31 81       	ldd	r19, Z+1	; 0x01

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    897e:	de 01       	movw	r26, r28
    8980:	1f 96       	adiw	r26, 0x0f	; 15
    8982:	f9 01       	movw	r30, r18
    8984:	02 c0       	rjmp	.+4      	; 0x898a <f_rename+0xe6>
	while (cnt--) *d++ = *s++;
    8986:	8d 91       	ld	r24, X+
    8988:	84 87       	std	Z+12, r24	; 0x0c
    898a:	31 96       	adiw	r30, 0x01	; 1
    898c:	ae 15       	cp	r26, r14
    898e:	bf 05       	cpc	r27, r15
    8990:	d1 f7       	brne	.-12     	; 0x8986 <f_rename+0xe2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    8992:	8d 85       	ldd	r24, Y+13	; 0x0d
    8994:	80 62       	ori	r24, 0x20	; 32
    8996:	d9 01       	movw	r26, r18
    8998:	1b 96       	adiw	r26, 0x0b	; 11
    899a:	8c 93       	st	X, r24
    899c:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    899e:	ea a1       	ldd	r30, Y+34	; 0x22
    89a0:	fb a1       	ldd	r31, Y+35	; 0x23
    89a2:	81 e0       	ldi	r24, 0x01	; 1
    89a4:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    89a6:	1b 96       	adiw	r26, 0x0b	; 11
    89a8:	8c 91       	ld	r24, X
    89aa:	1b 97       	sbiw	r26, 0x0b	; 11
    89ac:	84 ff       	sbrs	r24, 4
    89ae:	7a c0       	rjmp	.+244    	; 0x8aa4 <f_rename+0x200>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    89b0:	c8 ac       	ldd	r12, Y+56	; 0x38
    89b2:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    89b4:	5a 96       	adiw	r26, 0x1a	; 26
    89b6:	8d 91       	ld	r24, X+
    89b8:	9c 91       	ld	r25, X
    89ba:	5b 97       	sbiw	r26, 0x1b	; 27
    89bc:	54 96       	adiw	r26, 0x14	; 20
    89be:	2d 91       	ld	r18, X+
    89c0:	3c 91       	ld	r19, X
    89c2:	55 97       	sbiw	r26, 0x15	; 21
    89c4:	82 2b       	or	r24, r18
    89c6:	93 2b       	or	r25, r19
    89c8:	7c 01       	movw	r14, r24
    89ca:	00 e0       	ldi	r16, 0x00	; 0
    89cc:	10 e0       	ldi	r17, 0x00	; 0
    89ce:	8e ef       	ldi	r24, 0xFE	; 254
    89d0:	9f ef       	ldi	r25, 0xFF	; 255
    89d2:	af ef       	ldi	r26, 0xFF	; 255
    89d4:	bf ef       	ldi	r27, 0xFF	; 255
    89d6:	e8 0e       	add	r14, r24
    89d8:	f9 1e       	adc	r15, r25
    89da:	0a 1f       	adc	r16, r26
    89dc:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    89de:	f6 01       	movw	r30, r12
    89e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    89e2:	97 8d       	ldd	r25, Z+31	; 0x1f
    89e4:	a0 a1       	ldd	r26, Z+32	; 0x20
    89e6:	b1 a1       	ldd	r27, Z+33	; 0x21
    89e8:	02 97       	sbiw	r24, 0x02	; 2
    89ea:	a1 09       	sbc	r26, r1
    89ec:	b1 09       	sbc	r27, r1
    89ee:	e8 16       	cp	r14, r24
    89f0:	f9 06       	cpc	r15, r25
    89f2:	0a 07       	cpc	r16, r26
    89f4:	1b 07       	cpc	r17, r27
    89f6:	08 f0       	brcs	.+2      	; 0x89fa <f_rename+0x156>
    89f8:	62 c0       	rjmp	.+196    	; 0x8abe <f_rename+0x21a>
	return clst * fs->csize + fs->database;
    89fa:	22 81       	ldd	r18, Z+2	; 0x02
    89fc:	30 e0       	ldi	r19, 0x00	; 0
    89fe:	40 e0       	ldi	r20, 0x00	; 0
    8a00:	50 e0       	ldi	r21, 0x00	; 0
    8a02:	c8 01       	movw	r24, r16
    8a04:	b7 01       	movw	r22, r14
    8a06:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    8a0a:	ab 01       	movw	r20, r22
    8a0c:	bc 01       	movw	r22, r24
    8a0e:	f6 01       	movw	r30, r12
    8a10:	82 a5       	ldd	r24, Z+42	; 0x2a
    8a12:	93 a5       	ldd	r25, Z+43	; 0x2b
    8a14:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8a16:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8a18:	48 0f       	add	r20, r24
    8a1a:	59 1f       	adc	r21, r25
    8a1c:	6a 1f       	adc	r22, r26
    8a1e:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    8a20:	41 15       	cp	r20, r1
    8a22:	51 05       	cpc	r21, r1
    8a24:	61 05       	cpc	r22, r1
    8a26:	71 05       	cpc	r23, r1
    8a28:	09 f4       	brne	.+2      	; 0x8a2c <f_rename+0x188>
    8a2a:	49 c0       	rjmp	.+146    	; 0x8abe <f_rename+0x21a>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    8a2c:	c6 01       	movw	r24, r12
    8a2e:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    8a32:	9c 01       	movw	r18, r24
					dir = dj_new.fs->win+32;
    8a34:	08 ad       	ldd	r16, Y+56	; 0x38
    8a36:	19 ad       	ldd	r17, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    8a38:	00 97       	sbiw	r24, 0x00	; 0
    8a3a:	09 f0       	breq	.+2      	; 0x8a3e <f_rename+0x19a>
    8a3c:	42 c0       	rjmp	.+132    	; 0x8ac2 <f_rename+0x21e>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    8a3e:	b8 01       	movw	r22, r16
    8a40:	6e 5a       	subi	r22, 0xAE	; 174
    8a42:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    8a44:	db 01       	movw	r26, r22
    8a46:	11 96       	adiw	r26, 0x01	; 1
    8a48:	8c 91       	ld	r24, X
    8a4a:	8e 32       	cpi	r24, 0x2E	; 46
    8a4c:	59 f5       	brne	.+86     	; 0x8aa4 <f_rename+0x200>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    8a4e:	f8 01       	movw	r30, r16
    8a50:	80 81       	ld	r24, Z
    8a52:	83 30       	cpi	r24, 0x03	; 3
    8a54:	a9 f4       	brne	.+42     	; 0x8a80 <f_rename+0x1dc>
    8a56:	fe 01       	movw	r30, r28
    8a58:	fe 96       	adiw	r30, 0x3e	; 62
    8a5a:	20 81       	ld	r18, Z
    8a5c:	31 81       	ldd	r19, Z+1	; 0x01
    8a5e:	42 81       	ldd	r20, Z+2	; 0x02
    8a60:	53 81       	ldd	r21, Z+3	; 0x03
    8a62:	f8 01       	movw	r30, r16
    8a64:	86 a1       	ldd	r24, Z+38	; 0x26
    8a66:	97 a1       	ldd	r25, Z+39	; 0x27
    8a68:	a0 a5       	ldd	r26, Z+40	; 0x28
    8a6a:	b1 a5       	ldd	r27, Z+41	; 0x29
    8a6c:	28 17       	cp	r18, r24
    8a6e:	39 07       	cpc	r19, r25
    8a70:	4a 07       	cpc	r20, r26
    8a72:	5b 07       	cpc	r21, r27
    8a74:	29 f4       	brne	.+10     	; 0x8a80 <f_rename+0x1dc>
    8a76:	80 e0       	ldi	r24, 0x00	; 0
    8a78:	90 e0       	ldi	r25, 0x00	; 0
    8a7a:	a0 e0       	ldi	r26, 0x00	; 0
    8a7c:	b0 e0       	ldi	r27, 0x00	; 0
    8a7e:	06 c0       	rjmp	.+12     	; 0x8a8c <f_rename+0x1e8>
    8a80:	fe 01       	movw	r30, r28
    8a82:	fe 96       	adiw	r30, 0x3e	; 62
    8a84:	80 81       	ld	r24, Z
    8a86:	91 81       	ldd	r25, Z+1	; 0x01
    8a88:	a2 81       	ldd	r26, Z+2	; 0x02
    8a8a:	b3 81       	ldd	r27, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    8a8c:	fb 01       	movw	r30, r22
    8a8e:	82 8f       	std	Z+26, r24	; 0x1a
    8a90:	93 8f       	std	Z+27, r25	; 0x1b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    8a92:	cd 01       	movw	r24, r26
    8a94:	aa 27       	eor	r26, r26
    8a96:	bb 27       	eor	r27, r27
    8a98:	84 8b       	std	Z+20, r24	; 0x14
    8a9a:	95 8b       	std	Z+21, r25	; 0x15
						dj_new.fs->wflag = 1;
    8a9c:	81 e0       	ldi	r24, 0x01	; 1
    8a9e:	d8 01       	movw	r26, r16
    8aa0:	14 96       	adiw	r26, 0x04	; 4
    8aa2:	8c 93       	st	X, r24
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    8aa4:	ce 01       	movw	r24, r28
    8aa6:	82 96       	adiw	r24, 0x22	; 34
    8aa8:	0e 94 33 43 	call	0x8666	; 0x8666 <dir_remove>
    8aac:	9c 01       	movw	r18, r24
				if (res == FR_OK)
    8aae:	00 97       	sbiw	r24, 0x00	; 0
    8ab0:	41 f4       	brne	.+16     	; 0x8ac2 <f_rename+0x21e>
					res = sync(dj_old.fs);
    8ab2:	8a a1       	ldd	r24, Y+34	; 0x22
    8ab4:	9b a1       	ldd	r25, Y+35	; 0x23
    8ab6:	0e 94 54 43 	call	0x86a8	; 0x86a8 <sync>
    8aba:	9c 01       	movw	r18, r24
    8abc:	02 c0       	rjmp	.+4      	; 0x8ac2 <f_rename+0x21e>
    8abe:	22 e0       	ldi	r18, 0x02	; 2
    8ac0:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    8ac2:	c9 01       	movw	r24, r18
    8ac4:	c1 5b       	subi	r28, 0xB1	; 177
    8ac6:	df 4f       	sbci	r29, 0xFF	; 255
    8ac8:	e8 e0       	ldi	r30, 0x08	; 8
    8aca:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <__epilogue_restores__+0x14>

00008ace <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    8ace:	ae e2       	ldi	r26, 0x2E	; 46
    8ad0:	b0 e0       	ldi	r27, 0x00	; 0
    8ad2:	ed e6       	ldi	r30, 0x6D	; 109
    8ad4:	f5 e4       	ldi	r31, 0x45	; 69
    8ad6:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    8ada:	8b a3       	std	Y+35, r24	; 0x23
    8adc:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
    8ade:	ad e0       	ldi	r26, 0x0D	; 13
    8ae0:	ea 2e       	mov	r14, r26
    8ae2:	f1 2c       	mov	r15, r1
    8ae4:	ec 0e       	add	r14, r28
    8ae6:	fd 1e       	adc	r15, r29
    8ae8:	ce 01       	movw	r24, r28
    8aea:	83 96       	adiw	r24, 0x23	; 35
    8aec:	b7 01       	movw	r22, r14
    8aee:	41 e0       	ldi	r20, 0x01	; 1
    8af0:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    8af4:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8af6:	00 97       	sbiw	r24, 0x00	; 0
    8af8:	09 f0       	breq	.+2      	; 0x8afc <f_mkdir+0x2e>
    8afa:	3a c1       	rjmp	.+628    	; 0x8d70 <f_mkdir+0x2a2>

	INITBUF(dj, sfn, lfn);
    8afc:	ce 01       	movw	r24, r28
    8afe:	01 96       	adiw	r24, 0x01	; 1
    8b00:	89 a3       	std	Y+33, r24	; 0x21
    8b02:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    8b04:	6b a1       	ldd	r22, Y+35	; 0x23
    8b06:	7c a1       	ldd	r23, Y+36	; 0x24
    8b08:	c7 01       	movw	r24, r14
    8b0a:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    8b0e:	8c 01       	movw	r16, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    8b10:	00 97       	sbiw	r24, 0x00	; 0
    8b12:	61 f0       	breq	.+24     	; 0x8b2c <f_mkdir+0x5e>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
    8b14:	84 30       	cpi	r24, 0x04	; 4
    8b16:	91 05       	cpc	r25, r1
    8b18:	09 f0       	breq	.+2      	; 0x8b1c <f_mkdir+0x4e>
    8b1a:	2a c1       	rjmp	.+596    	; 0x8d70 <f_mkdir+0x2a2>
    8b1c:	e9 a1       	ldd	r30, Y+33	; 0x21
    8b1e:	fa a1       	ldd	r31, Y+34	; 0x22
    8b20:	83 85       	ldd	r24, Z+11	; 0x0b
    8b22:	85 ff       	sbrs	r24, 5
    8b24:	06 c0       	rjmp	.+12     	; 0x8b32 <f_mkdir+0x64>
    8b26:	06 e0       	ldi	r16, 0x06	; 6
    8b28:	10 e0       	ldi	r17, 0x00	; 0
    8b2a:	22 c1       	rjmp	.+580    	; 0x8d70 <f_mkdir+0x2a2>
    8b2c:	08 e0       	ldi	r16, 0x08	; 8
    8b2e:	10 e0       	ldi	r17, 0x00	; 0
    8b30:	1f c1       	rjmp	.+574    	; 0x8d70 <f_mkdir+0x2a2>
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    8b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b36:	40 e0       	ldi	r20, 0x00	; 0
    8b38:	50 e0       	ldi	r21, 0x00	; 0
    8b3a:	60 e0       	ldi	r22, 0x00	; 0
    8b3c:	70 e0       	ldi	r23, 0x00	; 0
    8b3e:	0e 94 93 3b 	call	0x7726	; 0x7726 <create_chain>
    8b42:	3b 01       	movw	r6, r22
    8b44:	4c 01       	movw	r8, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    8b46:	61 15       	cp	r22, r1
    8b48:	71 05       	cpc	r23, r1
    8b4a:	81 05       	cpc	r24, r1
    8b4c:	91 05       	cpc	r25, r1
    8b4e:	19 f4       	brne	.+6      	; 0x8b56 <f_mkdir+0x88>
    8b50:	07 e0       	ldi	r16, 0x07	; 7
    8b52:	10 e0       	ldi	r17, 0x00	; 0
    8b54:	0d c1       	rjmp	.+538    	; 0x8d70 <f_mkdir+0x2a2>
	if (dclst == 1) res = FR_INT_ERR;
    8b56:	61 30       	cpi	r22, 0x01	; 1
    8b58:	71 05       	cpc	r23, r1
    8b5a:	81 05       	cpc	r24, r1
    8b5c:	91 05       	cpc	r25, r1
    8b5e:	19 f4       	brne	.+6      	; 0x8b66 <f_mkdir+0x98>
    8b60:	02 e0       	ldi	r16, 0x02	; 2
    8b62:	10 e0       	ldi	r17, 0x00	; 0
    8b64:	05 c1       	rjmp	.+522    	; 0x8d70 <f_mkdir+0x2a2>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    8b66:	6f 3f       	cpi	r22, 0xFF	; 255
    8b68:	3f ef       	ldi	r19, 0xFF	; 255
    8b6a:	73 07       	cpc	r23, r19
    8b6c:	3f ef       	ldi	r19, 0xFF	; 255
    8b6e:	83 07       	cpc	r24, r19
    8b70:	3f ef       	ldi	r19, 0xFF	; 255
    8b72:	93 07       	cpc	r25, r19
    8b74:	09 f4       	brne	.+2      	; 0x8b78 <f_mkdir+0xaa>
    8b76:	01 c1       	rjmp	.+514    	; 0x8d7a <f_mkdir+0x2ac>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    8b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b7c:	40 e0       	ldi	r20, 0x00	; 0
    8b7e:	50 e0       	ldi	r21, 0x00	; 0
    8b80:	60 e0       	ldi	r22, 0x00	; 0
    8b82:	70 e0       	ldi	r23, 0x00	; 0
    8b84:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    8b88:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8b8a:	00 97       	sbiw	r24, 0x00	; 0
    8b8c:	09 f0       	breq	.+2      	; 0x8b90 <f_mkdir+0xc2>
    8b8e:	f0 c0       	rjmp	.+480    	; 0x8d70 <f_mkdir+0x2a2>
	dsect = clust2sect(dj.fs, dclst);
    8b90:	cd 84       	ldd	r12, Y+13	; 0x0d
    8b92:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8b94:	fe ef       	ldi	r31, 0xFE	; 254
    8b96:	ef 2e       	mov	r14, r31
    8b98:	ff ef       	ldi	r31, 0xFF	; 255
    8b9a:	ff 2e       	mov	r15, r31
    8b9c:	ff ef       	ldi	r31, 0xFF	; 255
    8b9e:	0f 2f       	mov	r16, r31
    8ba0:	ff ef       	ldi	r31, 0xFF	; 255
    8ba2:	1f 2f       	mov	r17, r31
    8ba4:	e6 0c       	add	r14, r6
    8ba6:	f7 1c       	adc	r15, r7
    8ba8:	08 1d       	adc	r16, r8
    8baa:	19 1d       	adc	r17, r9
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8bac:	f6 01       	movw	r30, r12
    8bae:	86 8d       	ldd	r24, Z+30	; 0x1e
    8bb0:	97 8d       	ldd	r25, Z+31	; 0x1f
    8bb2:	a0 a1       	ldd	r26, Z+32	; 0x20
    8bb4:	b1 a1       	ldd	r27, Z+33	; 0x21
    8bb6:	02 97       	sbiw	r24, 0x02	; 2
    8bb8:	a1 09       	sbc	r26, r1
    8bba:	b1 09       	sbc	r27, r1
    8bbc:	e8 16       	cp	r14, r24
    8bbe:	f9 06       	cpc	r15, r25
    8bc0:	0a 07       	cpc	r16, r26
    8bc2:	1b 07       	cpc	r17, r27
    8bc4:	20 f0       	brcs	.+8      	; 0x8bce <f_mkdir+0x100>
    8bc6:	22 24       	eor	r2, r2
    8bc8:	33 24       	eor	r3, r3
    8bca:	21 01       	movw	r4, r2
    8bcc:	15 c0       	rjmp	.+42     	; 0x8bf8 <f_mkdir+0x12a>
	return clst * fs->csize + fs->database;
    8bce:	d6 01       	movw	r26, r12
    8bd0:	12 96       	adiw	r26, 0x02	; 2
    8bd2:	2c 91       	ld	r18, X
    8bd4:	30 e0       	ldi	r19, 0x00	; 0
    8bd6:	40 e0       	ldi	r20, 0x00	; 0
    8bd8:	50 e0       	ldi	r21, 0x00	; 0
    8bda:	c8 01       	movw	r24, r16
    8bdc:	b7 01       	movw	r22, r14
    8bde:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    8be2:	1b 01       	movw	r2, r22
    8be4:	2c 01       	movw	r4, r24
    8be6:	f6 01       	movw	r30, r12
    8be8:	82 a5       	ldd	r24, Z+42	; 0x2a
    8bea:	93 a5       	ldd	r25, Z+43	; 0x2b
    8bec:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8bee:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8bf0:	28 0e       	add	r2, r24
    8bf2:	39 1e       	adc	r3, r25
    8bf4:	4a 1e       	adc	r4, r26
    8bf6:	5b 1e       	adc	r5, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    8bf8:	e2 e3       	ldi	r30, 0x32	; 50
    8bfa:	ae 2e       	mov	r10, r30
    8bfc:	b1 2c       	mov	r11, r1
    8bfe:	ac 0c       	add	r10, r12
    8c00:	bd 1c       	adc	r11, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8c02:	ad a2       	std	Y+37, r10	; 0x25
    8c04:	be a2       	std	Y+38, r11	; 0x26
	while (cnt--) *d++ = (char)val;
    8c06:	c6 01       	movw	r24, r12
    8c08:	8e 5c       	subi	r24, 0xCE	; 206
    8c0a:	9d 4f       	sbci	r25, 0xFD	; 253
    8c0c:	05 c0       	rjmp	.+10     	; 0x8c18 <f_mkdir+0x14a>
    8c0e:	ad a1       	ldd	r26, Y+37	; 0x25
    8c10:	be a1       	ldd	r27, Y+38	; 0x26
    8c12:	1d 92       	st	X+, r1
    8c14:	ad a3       	std	Y+37, r26	; 0x25
    8c16:	be a3       	std	Y+38, r27	; 0x26
    8c18:	ed a1       	ldd	r30, Y+37	; 0x25
    8c1a:	fe a1       	ldd	r31, Y+38	; 0x26
    8c1c:	e8 17       	cp	r30, r24
    8c1e:	f9 07       	cpc	r31, r25
    8c20:	b1 f7       	brne	.-20     	; 0x8c0e <f_mkdir+0x140>
    8c22:	f5 01       	movw	r30, r10
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    8c24:	c5 01       	movw	r24, r10
    8c26:	0b 96       	adiw	r24, 0x0b	; 11
    8c28:	20 e2       	ldi	r18, 0x20	; 32
    8c2a:	01 c0       	rjmp	.+2      	; 0x8c2e <f_mkdir+0x160>
    8c2c:	21 93       	st	Z+, r18
    8c2e:	e8 17       	cp	r30, r24
    8c30:	f9 07       	cpc	r31, r25
    8c32:	e1 f7       	brne	.-8      	; 0x8c2c <f_mkdir+0x15e>
    8c34:	8e e2       	ldi	r24, 0x2E	; 46
    8c36:	d6 01       	movw	r26, r12
    8c38:	d2 96       	adiw	r26, 0x32	; 50
    8c3a:	8c 93       	st	X, r24
    8c3c:	d2 97       	sbiw	r26, 0x32	; 50
	dir[DIR_Attr] = AM_DIR;
    8c3e:	80 e1       	ldi	r24, 0x10	; 16
    8c40:	dd 96       	adiw	r26, 0x3d	; 61
    8c42:	8c 93       	st	X, r24
	tim = get_fattime();
    8c44:	0e 94 22 55 	call	0xaa44	; 0xaa44 <get_fattime>
    8c48:	6f a3       	std	Y+39, r22	; 0x27
    8c4a:	78 a7       	std	Y+40, r23	; 0x28
    8c4c:	89 a7       	std	Y+41, r24	; 0x29
    8c4e:	9a a7       	std	Y+42, r25	; 0x2a
	ST_DWORD(dir+DIR_WrtTime, tim);
    8c50:	f5 01       	movw	r30, r10
    8c52:	66 8b       	std	Z+22, r22	; 0x16
    8c54:	77 8b       	std	Z+23, r23	; 0x17
    8c56:	80 8f       	std	Z+24, r24	; 0x18
    8c58:	91 8f       	std	Z+25, r25	; 0x19
	ST_WORD(dir+DIR_FstClusLO, dclst);
    8c5a:	6d a6       	std	Y+45, r6	; 0x2d
    8c5c:	7e a6       	std	Y+46, r7	; 0x2e
    8c5e:	62 8e       	std	Z+26, r6	; 0x1a
    8c60:	73 8e       	std	Z+27, r7	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8c62:	c4 01       	movw	r24, r8
    8c64:	aa 27       	eor	r26, r26
    8c66:	bb 27       	eor	r27, r27
    8c68:	8b a7       	std	Y+43, r24	; 0x2b
    8c6a:	9c a7       	std	Y+44, r25	; 0x2c
    8c6c:	84 8b       	std	Z+20, r24	; 0x14
    8c6e:	95 8b       	std	Z+21, r25	; 0x15
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8c70:	95 01       	movw	r18, r10
    8c72:	20 5e       	subi	r18, 0xE0	; 224
    8c74:	3f 4f       	sbci	r19, 0xFF	; 255
    8c76:	03 c0       	rjmp	.+6      	; 0x8c7e <f_mkdir+0x1b0>
    8c78:	80 81       	ld	r24, Z
    8c7a:	80 a3       	std	Z+32, r24	; 0x20
    8c7c:	31 96       	adiw	r30, 0x01	; 1
    8c7e:	e2 17       	cp	r30, r18
    8c80:	f3 07       	cpc	r31, r19
    8c82:	d1 f7       	brne	.-12     	; 0x8c78 <f_mkdir+0x1aa>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    8c84:	23 e5       	ldi	r18, 0x53	; 83
    8c86:	30 e0       	ldi	r19, 0x00	; 0
    8c88:	c2 0e       	add	r12, r18
    8c8a:	d3 1e       	adc	r13, r19
    8c8c:	8e e2       	ldi	r24, 0x2E	; 46
    8c8e:	d6 01       	movw	r26, r12
    8c90:	8c 93       	st	X, r24
	pclst = dj.sclust;
    8c92:	2b 89       	ldd	r18, Y+19	; 0x13
    8c94:	3c 89       	ldd	r19, Y+20	; 0x14
    8c96:	4d 89       	ldd	r20, Y+21	; 0x15
    8c98:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    8c9a:	ed 85       	ldd	r30, Y+13	; 0x0d
    8c9c:	fe 85       	ldd	r31, Y+14	; 0x0e
    8c9e:	80 81       	ld	r24, Z
    8ca0:	83 30       	cpi	r24, 0x03	; 3
    8ca2:	69 f4       	brne	.+26     	; 0x8cbe <f_mkdir+0x1f0>
    8ca4:	86 a1       	ldd	r24, Z+38	; 0x26
    8ca6:	97 a1       	ldd	r25, Z+39	; 0x27
    8ca8:	a0 a5       	ldd	r26, Z+40	; 0x28
    8caa:	b1 a5       	ldd	r27, Z+41	; 0x29
    8cac:	28 17       	cp	r18, r24
    8cae:	39 07       	cpc	r19, r25
    8cb0:	4a 07       	cpc	r20, r26
    8cb2:	5b 07       	cpc	r21, r27
    8cb4:	21 f4       	brne	.+8      	; 0x8cbe <f_mkdir+0x1f0>
    8cb6:	20 e0       	ldi	r18, 0x00	; 0
    8cb8:	30 e0       	ldi	r19, 0x00	; 0
    8cba:	40 e0       	ldi	r20, 0x00	; 0
    8cbc:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    8cbe:	f5 01       	movw	r30, r10
    8cc0:	22 af       	std	Z+58, r18	; 0x3a
    8cc2:	33 af       	std	Z+59, r19	; 0x3b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    8cc4:	ca 01       	movw	r24, r20
    8cc6:	aa 27       	eor	r26, r26
    8cc8:	bb 27       	eor	r27, r27
    8cca:	84 ab       	std	Z+52, r24	; 0x34
    8ccc:	95 ab       	std	Z+53, r25	; 0x35
    8cce:	72 01       	movw	r14, r4
    8cd0:	61 01       	movw	r12, r2
    8cd2:	1d c0       	rjmp	.+58     	; 0x8d0e <f_mkdir+0x240>
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8cd4:	c6 a6       	std	Z+46, r12	; 0x2e
    8cd6:	d7 a6       	std	Z+47, r13	; 0x2f
    8cd8:	e0 aa       	std	Z+48, r14	; 0x30
    8cda:	f1 aa       	std	Z+49, r15	; 0x31
		dj.fs->wflag = 1;
    8cdc:	21 e0       	ldi	r18, 0x01	; 1
    8cde:	24 83       	std	Z+4, r18	; 0x04
		res = move_window(dj.fs, 0);
    8ce0:	cf 01       	movw	r24, r30
    8ce2:	40 e0       	ldi	r20, 0x00	; 0
    8ce4:	50 e0       	ldi	r21, 0x00	; 0
    8ce6:	60 e0       	ldi	r22, 0x00	; 0
    8ce8:	70 e0       	ldi	r23, 0x00	; 0
    8cea:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    8cee:	8c 01       	movw	r16, r24
		if (res) LEAVE_FF(dj.fs, res);
    8cf0:	00 97       	sbiw	r24, 0x00	; 0
    8cf2:	f1 f5       	brne	.+124    	; 0x8d70 <f_mkdir+0x2a2>
    8cf4:	f5 01       	movw	r30, r10
    8cf6:	01 c0       	rjmp	.+2      	; 0x8cfa <f_mkdir+0x22c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    8cf8:	11 92       	st	Z+, r1
    8cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    8cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    8cfe:	e8 17       	cp	r30, r24
    8d00:	f9 07       	cpc	r31, r25
    8d02:	d1 f7       	brne	.-12     	; 0x8cf8 <f_mkdir+0x22a>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8d04:	08 94       	sec
    8d06:	c1 1c       	adc	r12, r1
    8d08:	d1 1c       	adc	r13, r1
    8d0a:	e1 1c       	adc	r14, r1
    8d0c:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    8d0e:	ed 85       	ldd	r30, Y+13	; 0x0d
    8d10:	fe 85       	ldd	r31, Y+14	; 0x0e
    8d12:	9c 2d       	mov	r25, r12
    8d14:	92 19       	sub	r25, r2
    8d16:	82 81       	ldd	r24, Z+2	; 0x02
    8d18:	98 17       	cp	r25, r24
    8d1a:	e0 f2       	brcs	.-72     	; 0x8cd4 <f_mkdir+0x206>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    8d1c:	ce 01       	movw	r24, r28
    8d1e:	0d 96       	adiw	r24, 0x0d	; 13
    8d20:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <dir_register>
    8d24:	8c 01       	movw	r16, r24
	if (res != FR_OK) {
    8d26:	00 97       	sbiw	r24, 0x00	; 0
    8d28:	39 f0       	breq	.+14     	; 0x8d38 <f_mkdir+0x26a>
		remove_chain(dj.fs, dclst);
    8d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d2e:	b4 01       	movw	r22, r8
    8d30:	a3 01       	movw	r20, r6
    8d32:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <remove_chain>
    8d36:	1c c0       	rjmp	.+56     	; 0x8d70 <f_mkdir+0x2a2>
	} else {
		dir = dj.dir;
    8d38:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8d3a:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    8d3c:	80 e1       	ldi	r24, 0x10	; 16
    8d3e:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    8d40:	8f a1       	ldd	r24, Y+39	; 0x27
    8d42:	98 a5       	ldd	r25, Y+40	; 0x28
    8d44:	a9 a5       	ldd	r26, Y+41	; 0x29
    8d46:	ba a5       	ldd	r27, Y+42	; 0x2a
    8d48:	86 8b       	std	Z+22, r24	; 0x16
    8d4a:	97 8b       	std	Z+23, r25	; 0x17
    8d4c:	a0 8f       	std	Z+24, r26	; 0x18
    8d4e:	b1 8f       	std	Z+25, r27	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    8d50:	ad a5       	ldd	r26, Y+45	; 0x2d
    8d52:	be a5       	ldd	r27, Y+46	; 0x2e
    8d54:	a2 8f       	std	Z+26, r26	; 0x1a
    8d56:	b3 8f       	std	Z+27, r27	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8d58:	2b a5       	ldd	r18, Y+43	; 0x2b
    8d5a:	3c a5       	ldd	r19, Y+44	; 0x2c
    8d5c:	24 8b       	std	Z+20, r18	; 0x14
    8d5e:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    8d60:	ed 85       	ldd	r30, Y+13	; 0x0d
    8d62:	fe 85       	ldd	r31, Y+14	; 0x0e
    8d64:	81 e0       	ldi	r24, 0x01	; 1
    8d66:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    8d68:	cf 01       	movw	r24, r30
    8d6a:	0e 94 54 43 	call	0x86a8	; 0x86a8 <sync>
    8d6e:	8c 01       	movw	r16, r24
	}

	LEAVE_FF(dj.fs, res);
}
    8d70:	c8 01       	movw	r24, r16
    8d72:	ae 96       	adiw	r28, 0x2e	; 46
    8d74:	e2 e1       	ldi	r30, 0x12	; 18
    8d76:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    8d7a:	01 e0       	ldi	r16, 0x01	; 1
    8d7c:	10 e0       	ldi	r17, 0x00	; 0
    8d7e:	f8 cf       	rjmp	.-16     	; 0x8d70 <f_mkdir+0x2a2>

00008d80 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    8d80:	cf 93       	push	r28
    8d82:	df 93       	push	r29
    8d84:	ec 01       	movw	r28, r24
    8d86:	24 e0       	ldi	r18, 0x04	; 4
    8d88:	30 e0       	ldi	r19, 0x00	; 0
    8d8a:	19 c0       	rjmp	.+50     	; 0x8dbe <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    8d8c:	88 81       	ld	r24, Y
    8d8e:	99 81       	ldd	r25, Y+1	; 0x01
    8d90:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    8d94:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8d96:	00 97       	sbiw	r24, 0x00	; 0
    8d98:	f1 f4       	brne	.+60     	; 0x8dd6 <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8d9a:	ea 89       	ldd	r30, Y+18	; 0x12
    8d9c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    8d9e:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8da0:	88 23       	and	r24, r24
    8da2:	09 f1       	breq	.+66     	; 0x8de6 <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    8da4:	85 3e       	cpi	r24, 0xE5	; 229
    8da6:	19 f0       	breq	.+6      	; 0x8dae <dir_read+0x2e>
    8da8:	83 85       	ldd	r24, Z+11	; 0x0b
    8daa:	83 ff       	sbrs	r24, 3
    8dac:	18 c0       	rjmp	.+48     	; 0x8dde <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    8dae:	ce 01       	movw	r24, r28
    8db0:	60 e0       	ldi	r22, 0x00	; 0
    8db2:	70 e0       	ldi	r23, 0x00	; 0
    8db4:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <dir_next>
    8db8:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8dba:	00 97       	sbiw	r24, 0x00	; 0
    8dbc:	61 f4       	brne	.+24     	; 0x8dd6 <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    8dbe:	4e 85       	ldd	r20, Y+14	; 0x0e
    8dc0:	5f 85       	ldd	r21, Y+15	; 0x0f
    8dc2:	68 89       	ldd	r22, Y+16	; 0x10
    8dc4:	79 89       	ldd	r23, Y+17	; 0x11
    8dc6:	41 15       	cp	r20, r1
    8dc8:	51 05       	cpc	r21, r1
    8dca:	61 05       	cpc	r22, r1
    8dcc:	71 05       	cpc	r23, r1
    8dce:	f1 f6       	brne	.-68     	; 0x8d8c <dir_read+0xc>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8dd0:	21 15       	cp	r18, r1
    8dd2:	31 05       	cpc	r19, r1
    8dd4:	21 f0       	breq	.+8      	; 0x8dde <dir_read+0x5e>
    8dd6:	1e 86       	std	Y+14, r1	; 0x0e
    8dd8:	1f 86       	std	Y+15, r1	; 0x0f
    8dda:	18 8a       	std	Y+16, r1	; 0x10
    8ddc:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    8dde:	c9 01       	movw	r24, r18
    8de0:	df 91       	pop	r29
    8de2:	cf 91       	pop	r28
    8de4:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8de6:	24 e0       	ldi	r18, 0x04	; 4
    8de8:	30 e0       	ldi	r19, 0x00	; 0
    8dea:	f5 cf       	rjmp	.-22     	; 0x8dd6 <dir_read+0x56>

00008dec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    8dec:	aa e3       	ldi	r26, 0x3A	; 58
    8dee:	b0 e0       	ldi	r27, 0x00	; 0
    8df0:	ec ef       	ldi	r30, 0xFC	; 252
    8df2:	f6 e4       	ldi	r31, 0x46	; 70
    8df4:	0c 94 55 58 	jmp	0xb0aa	; 0xb0aa <__prologue_saves__+0x14>
    8df8:	89 af       	std	Y+57, r24	; 0x39
    8dfa:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
    8dfc:	8d e0       	ldi	r24, 0x0D	; 13
    8dfe:	c8 2e       	mov	r12, r24
    8e00:	d1 2c       	mov	r13, r1
    8e02:	cc 0e       	add	r12, r28
    8e04:	dd 1e       	adc	r13, r29
    8e06:	ce 01       	movw	r24, r28
    8e08:	c9 96       	adiw	r24, 0x39	; 57
    8e0a:	b6 01       	movw	r22, r12
    8e0c:	41 e0       	ldi	r20, 0x01	; 1
    8e0e:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
    8e12:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8e14:	00 97       	sbiw	r24, 0x00	; 0
    8e16:	09 f0       	breq	.+2      	; 0x8e1a <f_unlink+0x2e>
    8e18:	79 c0       	rjmp	.+242    	; 0x8f0c <f_unlink+0x120>

	INITBUF(dj, sfn, lfn);
    8e1a:	ce 01       	movw	r24, r28
    8e1c:	01 96       	adiw	r24, 0x01	; 1
    8e1e:	89 a3       	std	Y+33, r24	; 0x21
    8e20:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    8e22:	69 ad       	ldd	r22, Y+57	; 0x39
    8e24:	7a ad       	ldd	r23, Y+58	; 0x3a
    8e26:	c6 01       	movw	r24, r12
    8e28:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    8e2c:	9c 01       	movw	r18, r24
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8e2e:	00 97       	sbiw	r24, 0x00	; 0
    8e30:	09 f0       	breq	.+2      	; 0x8e34 <f_unlink+0x48>
    8e32:	6c c0       	rjmp	.+216    	; 0x8f0c <f_unlink+0x120>
    8e34:	e9 a1       	ldd	r30, Y+33	; 0x21
    8e36:	fa a1       	ldd	r31, Y+34	; 0x22
    8e38:	83 85       	ldd	r24, Z+11	; 0x0b
    8e3a:	85 fd       	sbrc	r24, 5
    8e3c:	62 c0       	rjmp	.+196    	; 0x8f02 <f_unlink+0x116>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
    8e3e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8e40:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    8e42:	30 97       	sbiw	r30, 0x00	; 0
    8e44:	09 f4       	brne	.+2      	; 0x8e48 <f_unlink+0x5c>
    8e46:	5d c0       	rjmp	.+186    	; 0x8f02 <f_unlink+0x116>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    8e48:	83 85       	ldd	r24, Z+11	; 0x0b
    8e4a:	28 2f       	mov	r18, r24
    8e4c:	80 fd       	sbrc	r24, 0
    8e4e:	5c c0       	rjmp	.+184    	; 0x8f08 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8e50:	84 89       	ldd	r24, Z+20	; 0x14
    8e52:	95 89       	ldd	r25, Z+21	; 0x15
    8e54:	a0 e0       	ldi	r26, 0x00	; 0
    8e56:	b0 e0       	ldi	r27, 0x00	; 0
    8e58:	8c 01       	movw	r16, r24
    8e5a:	ff 24       	eor	r15, r15
    8e5c:	ee 24       	eor	r14, r14
    8e5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    8e60:	93 8d       	ldd	r25, Z+27	; 0x1b
    8e62:	a0 e0       	ldi	r26, 0x00	; 0
    8e64:	b0 e0       	ldi	r27, 0x00	; 0
    8e66:	e8 2a       	or	r14, r24
    8e68:	f9 2a       	or	r15, r25
    8e6a:	0a 2b       	or	r16, r26
    8e6c:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    8e6e:	24 ff       	sbrs	r18, 4
    8e70:	2d c0       	rjmp	.+90     	; 0x8ecc <f_unlink+0xe0>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    8e72:	82 e0       	ldi	r24, 0x02	; 2
    8e74:	e8 16       	cp	r14, r24
    8e76:	f1 04       	cpc	r15, r1
    8e78:	01 05       	cpc	r16, r1
    8e7a:	11 05       	cpc	r17, r1
    8e7c:	18 f4       	brcc	.+6      	; 0x8e84 <f_unlink+0x98>
    8e7e:	22 e0       	ldi	r18, 0x02	; 2
    8e80:	30 e0       	ldi	r19, 0x00	; 0
    8e82:	44 c0       	rjmp	.+136    	; 0x8f0c <f_unlink+0x120>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8e84:	de 01       	movw	r26, r28
    8e86:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    8e88:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    8e8a:	9d 01       	movw	r18, r26
    8e8c:	02 c0       	rjmp	.+4      	; 0x8e92 <f_unlink+0xa6>
    8e8e:	81 91       	ld	r24, Z+
    8e90:	8d 93       	st	X+, r24
    8e92:	e2 17       	cp	r30, r18
    8e94:	f3 07       	cpc	r31, r19
    8e96:	d9 f7       	brne	.-10     	; 0x8e8e <f_unlink+0xa2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    8e98:	e9 a6       	std	Y+41, r14	; 0x29
    8e9a:	fa a6       	std	Y+42, r15	; 0x2a
    8e9c:	0b a7       	std	Y+43, r16	; 0x2b
    8e9e:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    8ea0:	b3 e2       	ldi	r27, 0x23	; 35
    8ea2:	cb 2e       	mov	r12, r27
    8ea4:	d1 2c       	mov	r13, r1
    8ea6:	cc 0e       	add	r12, r28
    8ea8:	dd 1e       	adc	r13, r29
    8eaa:	c6 01       	movw	r24, r12
    8eac:	62 e0       	ldi	r22, 0x02	; 2
    8eae:	70 e0       	ldi	r23, 0x00	; 0
    8eb0:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    8eb4:	9c 01       	movw	r18, r24
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8eb6:	00 97       	sbiw	r24, 0x00	; 0
    8eb8:	49 f5       	brne	.+82     	; 0x8f0c <f_unlink+0x120>
		res = dir_read(&sdj);
    8eba:	c6 01       	movw	r24, r12
    8ebc:	0e 94 c0 46 	call	0x8d80	; 0x8d80 <dir_read>
    8ec0:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    8ec2:	00 97       	sbiw	r24, 0x00	; 0
    8ec4:	09 f1       	breq	.+66     	; 0x8f08 <f_unlink+0x11c>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    8ec6:	84 30       	cpi	r24, 0x04	; 4
    8ec8:	91 05       	cpc	r25, r1
    8eca:	01 f5       	brne	.+64     	; 0x8f0c <f_unlink+0x120>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    8ecc:	ce 01       	movw	r24, r28
    8ece:	0d 96       	adiw	r24, 0x0d	; 13
    8ed0:	0e 94 33 43 	call	0x8666	; 0x8666 <dir_remove>
    8ed4:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8ed6:	00 97       	sbiw	r24, 0x00	; 0
    8ed8:	c9 f4       	brne	.+50     	; 0x8f0c <f_unlink+0x120>
		if (dclst)
    8eda:	e1 14       	cp	r14, r1
    8edc:	f1 04       	cpc	r15, r1
    8ede:	01 05       	cpc	r16, r1
    8ee0:	11 05       	cpc	r17, r1
    8ee2:	49 f0       	breq	.+18     	; 0x8ef6 <f_unlink+0x10a>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    8ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    8ee8:	b8 01       	movw	r22, r16
    8eea:	a7 01       	movw	r20, r14
    8eec:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <remove_chain>
    8ef0:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = sync(dj.fs);
    8ef2:	00 97       	sbiw	r24, 0x00	; 0
    8ef4:	59 f4       	brne	.+22     	; 0x8f0c <f_unlink+0x120>
    8ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    8efa:	0e 94 54 43 	call	0x86a8	; 0x86a8 <sync>
    8efe:	9c 01       	movw	r18, r24
    8f00:	05 c0       	rjmp	.+10     	; 0x8f0c <f_unlink+0x120>
    8f02:	26 e0       	ldi	r18, 0x06	; 6
    8f04:	30 e0       	ldi	r19, 0x00	; 0
    8f06:	02 c0       	rjmp	.+4      	; 0x8f0c <f_unlink+0x120>
    8f08:	27 e0       	ldi	r18, 0x07	; 7
    8f0a:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8f0c:	c9 01       	movw	r24, r18
    8f0e:	ea 96       	adiw	r28, 0x3a	; 58
    8f10:	e8 e0       	ldi	r30, 0x08	; 8
    8f12:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <__epilogue_restores__+0x14>

00008f16 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8f16:	ac e0       	ldi	r26, 0x0C	; 12
    8f18:	b0 e0       	ldi	r27, 0x00	; 0
    8f1a:	e1 e9       	ldi	r30, 0x91	; 145
    8f1c:	f7 e4       	ldi	r31, 0x47	; 71
    8f1e:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
    8f22:	8c 01       	movw	r16, r24
    8f24:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    8f26:	fc 01       	movw	r30, r24
    8f28:	62 81       	ldd	r22, Z+2	; 0x02
    8f2a:	73 81       	ldd	r23, Z+3	; 0x03
    8f2c:	80 81       	ld	r24, Z
    8f2e:	91 81       	ldd	r25, Z+1	; 0x01
    8f30:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <validate>
	if (res == FR_OK) {
    8f34:	00 97       	sbiw	r24, 0x00	; 0
    8f36:	69 f4       	brne	.+26     	; 0x8f52 <f_readdir+0x3c>
		INITBUF((*dj), sfn, lfn);
    8f38:	ce 01       	movw	r24, r28
    8f3a:	01 96       	adiw	r24, 0x01	; 1
    8f3c:	f8 01       	movw	r30, r16
    8f3e:	84 8b       	std	Z+20, r24	; 0x14
    8f40:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    8f42:	e1 14       	cp	r14, r1
    8f44:	f1 04       	cpc	r15, r1
    8f46:	39 f4       	brne	.+14     	; 0x8f56 <f_readdir+0x40>
			res = dir_seek(dj, 0);
    8f48:	c8 01       	movw	r24, r16
    8f4a:	60 e0       	ldi	r22, 0x00	; 0
    8f4c:	70 e0       	ldi	r23, 0x00	; 0
    8f4e:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <dir_seek>
    8f52:	9c 01       	movw	r18, r24
    8f54:	23 c0       	rjmp	.+70     	; 0x8f9c <f_readdir+0x86>
		} else {
			res = dir_read(dj);
    8f56:	c8 01       	movw	r24, r16
    8f58:	0e 94 c0 46 	call	0x8d80	; 0x8d80 <dir_read>
    8f5c:	9c 01       	movw	r18, r24
			if (res == FR_NO_FILE) {
    8f5e:	84 30       	cpi	r24, 0x04	; 4
    8f60:	91 05       	cpc	r25, r1
    8f62:	31 f4       	brne	.+12     	; 0x8f70 <f_readdir+0x5a>
				dj->sect = 0;
    8f64:	f8 01       	movw	r30, r16
    8f66:	16 86       	std	Z+14, r1	; 0x0e
    8f68:	17 86       	std	Z+15, r1	; 0x0f
    8f6a:	10 8a       	std	Z+16, r1	; 0x10
    8f6c:	11 8a       	std	Z+17, r1	; 0x11
    8f6e:	02 c0       	rjmp	.+4      	; 0x8f74 <f_readdir+0x5e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    8f70:	00 97       	sbiw	r24, 0x00	; 0
    8f72:	a1 f4       	brne	.+40     	; 0x8f9c <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    8f74:	c8 01       	movw	r24, r16
    8f76:	b7 01       	movw	r22, r14
    8f78:	0e 94 42 31 	call	0x6284	; 0x6284 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    8f7c:	c8 01       	movw	r24, r16
    8f7e:	60 e0       	ldi	r22, 0x00	; 0
    8f80:	70 e0       	ldi	r23, 0x00	; 0
    8f82:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <dir_next>
    8f86:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    8f88:	84 30       	cpi	r24, 0x04	; 4
    8f8a:	91 05       	cpc	r25, r1
    8f8c:	39 f4       	brne	.+14     	; 0x8f9c <f_readdir+0x86>
					dj->sect = 0;
    8f8e:	f8 01       	movw	r30, r16
    8f90:	16 86       	std	Z+14, r1	; 0x0e
    8f92:	17 86       	std	Z+15, r1	; 0x0f
    8f94:	10 8a       	std	Z+16, r1	; 0x10
    8f96:	11 8a       	std	Z+17, r1	; 0x11
    8f98:	20 e0       	ldi	r18, 0x00	; 0
    8f9a:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    8f9c:	c9 01       	movw	r24, r18
    8f9e:	2c 96       	adiw	r28, 0x0c	; 12
    8fa0:	e6 e0       	ldi	r30, 0x06	; 6
    8fa2:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

00008fa6 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    8fa6:	a4 e0       	ldi	r26, 0x04	; 4
    8fa8:	b0 e0       	ldi	r27, 0x00	; 0
    8faa:	e9 ed       	ldi	r30, 0xD9	; 217
    8fac:	f7 e4       	ldi	r31, 0x47	; 71
    8fae:	0c 94 4c 58 	jmp	0xb098	; 0xb098 <__prologue_saves__+0x2>
    8fb2:	89 83       	std	Y+1, r24	; 0x01
    8fb4:	9a 83       	std	Y+2, r25	; 0x02
    8fb6:	6b 83       	std	Y+3, r22	; 0x03
    8fb8:	7c 83       	std	Y+4, r23	; 0x04
    8fba:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
    8fbc:	ce 01       	movw	r24, r28
    8fbe:	01 96       	adiw	r24, 0x01	; 1
    8fc0:	ba 01       	movw	r22, r20
    8fc2:	40 e0       	ldi	r20, 0x00	; 0
    8fc4:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    8fc8:	00 97       	sbiw	r24, 0x00	; 0
    8fca:	11 f0       	breq	.+4      	; 0x8fd0 <f_getfree+0x2a>
    8fcc:	9c 01       	movw	r18, r24
    8fce:	c1 c0       	rjmp	.+386    	; 0x9152 <f_getfree+0x1ac>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    8fd0:	d2 01       	movw	r26, r4
    8fd2:	ed 91       	ld	r30, X+
    8fd4:	fc 91       	ld	r31, X
    8fd6:	26 85       	ldd	r18, Z+14	; 0x0e
    8fd8:	37 85       	ldd	r19, Z+15	; 0x0f
    8fda:	40 89       	ldd	r20, Z+16	; 0x10
    8fdc:	51 89       	ldd	r21, Z+17	; 0x11
    8fde:	e6 8c       	ldd	r14, Z+30	; 0x1e
    8fe0:	f7 8c       	ldd	r15, Z+31	; 0x1f
    8fe2:	00 a1       	ldd	r16, Z+32	; 0x20
    8fe4:	11 a1       	ldd	r17, Z+33	; 0x21
    8fe6:	d8 01       	movw	r26, r16
    8fe8:	c7 01       	movw	r24, r14
    8fea:	02 97       	sbiw	r24, 0x02	; 2
    8fec:	a1 09       	sbc	r26, r1
    8fee:	b1 09       	sbc	r27, r1
    8ff0:	82 17       	cp	r24, r18
    8ff2:	93 07       	cpc	r25, r19
    8ff4:	a4 07       	cpc	r26, r20
    8ff6:	b5 07       	cpc	r27, r21
    8ff8:	38 f0       	brcs	.+14     	; 0x9008 <f_getfree+0x62>
		*nclst = (*fatfs)->free_clust;
    8ffa:	eb 81       	ldd	r30, Y+3	; 0x03
    8ffc:	fc 81       	ldd	r31, Y+4	; 0x04
    8ffe:	20 83       	st	Z, r18
    9000:	31 83       	std	Z+1, r19	; 0x01
    9002:	42 83       	std	Z+2, r20	; 0x02
    9004:	53 83       	std	Z+3, r21	; 0x03
    9006:	a3 c0       	rjmp	.+326    	; 0x914e <f_getfree+0x1a8>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    9008:	30 80       	ld	r3, Z
	n = 0;
	if (fat == FS_FAT12) {
    900a:	21 e0       	ldi	r18, 0x01	; 1
    900c:	32 16       	cp	r3, r18
    900e:	f1 f5       	brne	.+124    	; 0x908c <f_getfree+0xe6>
    9010:	aa 24       	eor	r10, r10
    9012:	bb 24       	eor	r11, r11
    9014:	65 01       	movw	r12, r10
    9016:	92 e0       	ldi	r25, 0x02	; 2
    9018:	e9 2e       	mov	r14, r25
    901a:	f1 2c       	mov	r15, r1
    901c:	01 2d       	mov	r16, r1
    901e:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    9020:	d2 01       	movw	r26, r4
    9022:	8d 91       	ld	r24, X+
    9024:	9c 91       	ld	r25, X
    9026:	b8 01       	movw	r22, r16
    9028:	a7 01       	movw	r20, r14
    902a:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    902e:	6f 3f       	cpi	r22, 0xFF	; 255
    9030:	bf ef       	ldi	r27, 0xFF	; 255
    9032:	7b 07       	cpc	r23, r27
    9034:	bf ef       	ldi	r27, 0xFF	; 255
    9036:	8b 07       	cpc	r24, r27
    9038:	bf ef       	ldi	r27, 0xFF	; 255
    903a:	9b 07       	cpc	r25, r27
    903c:	19 f4       	brne	.+6      	; 0x9044 <f_getfree+0x9e>
    903e:	21 e0       	ldi	r18, 0x01	; 1
    9040:	30 e0       	ldi	r19, 0x00	; 0
    9042:	87 c0       	rjmp	.+270    	; 0x9152 <f_getfree+0x1ac>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    9044:	61 30       	cpi	r22, 0x01	; 1
    9046:	71 05       	cpc	r23, r1
    9048:	81 05       	cpc	r24, r1
    904a:	91 05       	cpc	r25, r1
    904c:	19 f4       	brne	.+6      	; 0x9054 <f_getfree+0xae>
    904e:	22 e0       	ldi	r18, 0x02	; 2
    9050:	30 e0       	ldi	r19, 0x00	; 0
    9052:	7f c0       	rjmp	.+254    	; 0x9152 <f_getfree+0x1ac>
			if (stat == 0) n++;
    9054:	61 15       	cp	r22, r1
    9056:	71 05       	cpc	r23, r1
    9058:	81 05       	cpc	r24, r1
    905a:	91 05       	cpc	r25, r1
    905c:	29 f4       	brne	.+10     	; 0x9068 <f_getfree+0xc2>
    905e:	08 94       	sec
    9060:	a1 1c       	adc	r10, r1
    9062:	b1 1c       	adc	r11, r1
    9064:	c1 1c       	adc	r12, r1
    9066:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    9068:	08 94       	sec
    906a:	e1 1c       	adc	r14, r1
    906c:	f1 1c       	adc	r15, r1
    906e:	01 1d       	adc	r16, r1
    9070:	11 1d       	adc	r17, r1
    9072:	d2 01       	movw	r26, r4
    9074:	ed 91       	ld	r30, X+
    9076:	fc 91       	ld	r31, X
    9078:	86 8d       	ldd	r24, Z+30	; 0x1e
    907a:	97 8d       	ldd	r25, Z+31	; 0x1f
    907c:	a0 a1       	ldd	r26, Z+32	; 0x20
    907e:	b1 a1       	ldd	r27, Z+33	; 0x21
    9080:	e8 16       	cp	r14, r24
    9082:	f9 06       	cpc	r15, r25
    9084:	0a 07       	cpc	r16, r26
    9086:	1b 07       	cpc	r17, r27
    9088:	58 f2       	brcs	.-106    	; 0x9020 <f_getfree+0x7a>
    908a:	4f c0       	rjmp	.+158    	; 0x912a <f_getfree+0x184>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    908c:	62 a0       	ldd	r6, Z+34	; 0x22
    908e:	73 a0       	ldd	r7, Z+35	; 0x23
    9090:	84 a0       	ldd	r8, Z+36	; 0x24
    9092:	95 a0       	ldd	r9, Z+37	; 0x25
    9094:	aa 24       	eor	r10, r10
    9096:	bb 24       	eor	r11, r11
    9098:	65 01       	movw	r12, r10
    909a:	20 e0       	ldi	r18, 0x00	; 0
    909c:	30 e0       	ldi	r19, 0x00	; 0
    909e:	e0 e0       	ldi	r30, 0x00	; 0
    90a0:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    90a2:	21 15       	cp	r18, r1
    90a4:	31 05       	cpc	r19, r1
    90a6:	b1 f4       	brne	.+44     	; 0x90d4 <f_getfree+0x12e>
				res = move_window(*fatfs, sect++);
    90a8:	f2 01       	movw	r30, r4
    90aa:	80 81       	ld	r24, Z
    90ac:	91 81       	ldd	r25, Z+1	; 0x01
    90ae:	b4 01       	movw	r22, r8
    90b0:	a3 01       	movw	r20, r6
    90b2:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    90b6:	9c 01       	movw	r18, r24
				if (res != FR_OK)
    90b8:	00 97       	sbiw	r24, 0x00	; 0
    90ba:	09 f0       	breq	.+2      	; 0x90be <f_getfree+0x118>
    90bc:	4a c0       	rjmp	.+148    	; 0x9152 <f_getfree+0x1ac>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    90be:	08 94       	sec
    90c0:	61 1c       	adc	r6, r1
    90c2:	71 1c       	adc	r7, r1
    90c4:	81 1c       	adc	r8, r1
    90c6:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    90c8:	d2 01       	movw	r26, r4
    90ca:	ed 91       	ld	r30, X+
    90cc:	fc 91       	ld	r31, X
    90ce:	f2 96       	adiw	r30, 0x32	; 50
    90d0:	20 e0       	ldi	r18, 0x00	; 0
    90d2:	32 e0       	ldi	r19, 0x02	; 2
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    90d4:	b2 e0       	ldi	r27, 0x02	; 2
    90d6:	3b 16       	cp	r3, r27
    90d8:	69 f4       	brne	.+26     	; 0x90f4 <f_getfree+0x14e>
				if (LD_WORD(p) == 0) n++;
    90da:	80 81       	ld	r24, Z
    90dc:	91 81       	ldd	r25, Z+1	; 0x01
    90de:	89 2b       	or	r24, r25
    90e0:	29 f4       	brne	.+10     	; 0x90ec <f_getfree+0x146>
    90e2:	08 94       	sec
    90e4:	a1 1c       	adc	r10, r1
    90e6:	b1 1c       	adc	r11, r1
    90e8:	c1 1c       	adc	r12, r1
    90ea:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    90ec:	32 96       	adiw	r30, 0x02	; 2
    90ee:	22 50       	subi	r18, 0x02	; 2
    90f0:	30 40       	sbci	r19, 0x00	; 0
    90f2:	10 c0       	rjmp	.+32     	; 0x9114 <f_getfree+0x16e>
			} else {
				if (LD_DWORD(p) == 0) n++;
    90f4:	80 81       	ld	r24, Z
    90f6:	91 81       	ldd	r25, Z+1	; 0x01
    90f8:	a2 81       	ldd	r26, Z+2	; 0x02
    90fa:	b3 81       	ldd	r27, Z+3	; 0x03
    90fc:	00 97       	sbiw	r24, 0x00	; 0
    90fe:	a1 05       	cpc	r26, r1
    9100:	b1 05       	cpc	r27, r1
    9102:	29 f4       	brne	.+10     	; 0x910e <f_getfree+0x168>
    9104:	08 94       	sec
    9106:	a1 1c       	adc	r10, r1
    9108:	b1 1c       	adc	r11, r1
    910a:	c1 1c       	adc	r12, r1
    910c:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    910e:	34 96       	adiw	r30, 0x04	; 4
    9110:	24 50       	subi	r18, 0x04	; 4
    9112:	30 40       	sbci	r19, 0x00	; 0
			}
		} while (--clst);
    9114:	08 94       	sec
    9116:	e1 08       	sbc	r14, r1
    9118:	f1 08       	sbc	r15, r1
    911a:	01 09       	sbc	r16, r1
    911c:	11 09       	sbc	r17, r1
    911e:	e1 14       	cp	r14, r1
    9120:	f1 04       	cpc	r15, r1
    9122:	01 05       	cpc	r16, r1
    9124:	11 05       	cpc	r17, r1
    9126:	09 f0       	breq	.+2      	; 0x912a <f_getfree+0x184>
    9128:	bc cf       	rjmp	.-136    	; 0x90a2 <f_getfree+0xfc>
	}
	(*fatfs)->free_clust = n;
    912a:	d2 01       	movw	r26, r4
    912c:	ed 91       	ld	r30, X+
    912e:	fc 91       	ld	r31, X
    9130:	a6 86       	std	Z+14, r10	; 0x0e
    9132:	b7 86       	std	Z+15, r11	; 0x0f
    9134:	c0 8a       	std	Z+16, r12	; 0x10
    9136:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    9138:	b3 e0       	ldi	r27, 0x03	; 3
    913a:	3b 16       	cp	r3, r27
    913c:	11 f4       	brne	.+4      	; 0x9142 <f_getfree+0x19c>
    913e:	81 e0       	ldi	r24, 0x01	; 1
    9140:	81 87       	std	Z+9, r24	; 0x09
	*nclst = n;
    9142:	eb 81       	ldd	r30, Y+3	; 0x03
    9144:	fc 81       	ldd	r31, Y+4	; 0x04
    9146:	a0 82       	st	Z, r10
    9148:	b1 82       	std	Z+1, r11	; 0x01
    914a:	c2 82       	std	Z+2, r12	; 0x02
    914c:	d3 82       	std	Z+3, r13	; 0x03
    914e:	20 e0       	ldi	r18, 0x00	; 0
    9150:	30 e0       	ldi	r19, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    9152:	c9 01       	movw	r24, r18
    9154:	24 96       	adiw	r28, 0x04	; 4
    9156:	e1 e1       	ldi	r30, 0x11	; 17
    9158:	0c 94 68 58 	jmp	0xb0d0	; 0xb0d0 <__epilogue_restores__+0x2>

0000915c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    915c:	0f 93       	push	r16
    915e:	1f 93       	push	r17
    9160:	cf 93       	push	r28
    9162:	df 93       	push	r29
    9164:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    9166:	6a 81       	ldd	r22, Y+2	; 0x02
    9168:	7b 81       	ldd	r23, Y+3	; 0x03
    916a:	88 81       	ld	r24, Y
    916c:	99 81       	ldd	r25, Y+1	; 0x01
    916e:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <validate>
    9172:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    9174:	00 97       	sbiw	r24, 0x00	; 0
    9176:	e1 f5       	brne	.+120    	; 0x91f0 <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    9178:	8c 81       	ldd	r24, Y+4	; 0x04
    917a:	85 ff       	sbrs	r24, 5
    917c:	39 c0       	rjmp	.+114    	; 0x91f0 <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    917e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9180:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9182:	6c 8d       	ldd	r22, Y+28	; 0x1c
    9184:	7d 8d       	ldd	r23, Y+29	; 0x1d
    9186:	88 81       	ld	r24, Y
    9188:	99 81       	ldd	r25, Y+1	; 0x01
    918a:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    918e:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    9190:	00 97       	sbiw	r24, 0x00	; 0
    9192:	71 f5       	brne	.+92     	; 0x91f0 <f_sync+0x94>
				dir = fp->dir_ptr;
    9194:	0e 8d       	ldd	r16, Y+30	; 0x1e
    9196:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    9198:	f8 01       	movw	r30, r16
    919a:	83 85       	ldd	r24, Z+11	; 0x0b
    919c:	80 62       	ori	r24, 0x20	; 32
    919e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    91a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    91a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    91a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    91a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    91a8:	84 8f       	std	Z+28, r24	; 0x1c
    91aa:	95 8f       	std	Z+29, r25	; 0x1d
    91ac:	a6 8f       	std	Z+30, r26	; 0x1e
    91ae:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    91b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    91b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    91b4:	82 8f       	std	Z+26, r24	; 0x1a
    91b6:	93 8f       	std	Z+27, r25	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    91b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    91ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    91bc:	a8 89       	ldd	r26, Y+16	; 0x10
    91be:	b9 89       	ldd	r27, Y+17	; 0x11
    91c0:	cd 01       	movw	r24, r26
    91c2:	aa 27       	eor	r26, r26
    91c4:	bb 27       	eor	r27, r27
    91c6:	84 8b       	std	Z+20, r24	; 0x14
    91c8:	95 8b       	std	Z+21, r25	; 0x15
				tim = get_fattime();			/* Updated time */
    91ca:	0e 94 22 55 	call	0xaa44	; 0xaa44 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    91ce:	f8 01       	movw	r30, r16
    91d0:	66 8b       	std	Z+22, r22	; 0x16
    91d2:	77 8b       	std	Z+23, r23	; 0x17
    91d4:	80 8f       	std	Z+24, r24	; 0x18
    91d6:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    91d8:	8c 81       	ldd	r24, Y+4	; 0x04
    91da:	8f 7d       	andi	r24, 0xDF	; 223
    91dc:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    91de:	e8 81       	ld	r30, Y
    91e0:	f9 81       	ldd	r31, Y+1	; 0x01
    91e2:	81 e0       	ldi	r24, 0x01	; 1
    91e4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    91e6:	88 81       	ld	r24, Y
    91e8:	99 81       	ldd	r25, Y+1	; 0x01
    91ea:	0e 94 54 43 	call	0x86a8	; 0x86a8 <sync>
    91ee:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    91f0:	c9 01       	movw	r24, r18
    91f2:	df 91       	pop	r29
    91f4:	cf 91       	pop	r28
    91f6:	1f 91       	pop	r17
    91f8:	0f 91       	pop	r16
    91fa:	08 95       	ret

000091fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    91fc:	cf 93       	push	r28
    91fe:	df 93       	push	r29
    9200:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    9202:	0e 94 ae 48 	call	0x915c	; 0x915c <f_sync>
    9206:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    9208:	00 97       	sbiw	r24, 0x00	; 0
    920a:	11 f4       	brne	.+4      	; 0x9210 <f_close+0x14>
    920c:	18 82       	st	Y, r1
    920e:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    9210:	c9 01       	movw	r24, r18
    9212:	df 91       	pop	r29
    9214:	cf 91       	pop	r28
    9216:	08 95       	ret

00009218 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    9218:	a4 e0       	ldi	r26, 0x04	; 4
    921a:	b0 e0       	ldi	r27, 0x00	; 0
    921c:	e2 e1       	ldi	r30, 0x12	; 18
    921e:	f9 e4       	ldi	r31, 0x49	; 73
    9220:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    9224:	8b 83       	std	Y+3, r24	; 0x03
    9226:	9c 83       	std	Y+4, r25	; 0x04
    9228:	16 2f       	mov	r17, r22
    922a:	07 2f       	mov	r16, r23
    922c:	3a 01       	movw	r6, r20
    922e:	29 83       	std	Y+1, r18	; 0x01
    9230:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
    9232:	d9 01       	movw	r26, r18
    9234:	1d 92       	st	X+, r1
    9236:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    9238:	fc 01       	movw	r30, r24
    923a:	62 81       	ldd	r22, Z+2	; 0x02
    923c:	73 81       	ldd	r23, Z+3	; 0x03
    923e:	80 81       	ld	r24, Z
    9240:	91 81       	ldd	r25, Z+1	; 0x01
    9242:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <validate>
    9246:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9248:	00 97       	sbiw	r24, 0x00	; 0
    924a:	09 f0       	breq	.+2      	; 0x924e <f_write+0x36>
    924c:	09 c2       	rjmp	.+1042   	; 0x9660 <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    924e:	ab 81       	ldd	r26, Y+3	; 0x03
    9250:	bc 81       	ldd	r27, Y+4	; 0x04
    9252:	14 96       	adiw	r26, 0x04	; 4
    9254:	8c 91       	ld	r24, X
    9256:	87 fd       	sbrc	r24, 7
    9258:	78 c0       	rjmp	.+240    	; 0x934a <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    925a:	81 fd       	sbrc	r24, 1
    925c:	04 c0       	rjmp	.+8      	; 0x9266 <f_write+0x4e>
    925e:	f7 e0       	ldi	r31, 0x07	; 7
    9260:	8f 2e       	mov	r8, r31
    9262:	91 2c       	mov	r9, r1
    9264:	fd c1       	rjmp	.+1018   	; 0x9660 <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    9266:	eb 81       	ldd	r30, Y+3	; 0x03
    9268:	fc 81       	ldd	r31, Y+4	; 0x04
    926a:	22 85       	ldd	r18, Z+10	; 0x0a
    926c:	33 85       	ldd	r19, Z+11	; 0x0b
    926e:	44 85       	ldd	r20, Z+12	; 0x0c
    9270:	55 85       	ldd	r21, Z+13	; 0x0d
    9272:	c3 01       	movw	r24, r6
    9274:	a0 e0       	ldi	r26, 0x00	; 0
    9276:	b0 e0       	ldi	r27, 0x00	; 0
    9278:	82 0f       	add	r24, r18
    927a:	93 1f       	adc	r25, r19
    927c:	a4 1f       	adc	r26, r20
    927e:	b5 1f       	adc	r27, r21
    9280:	82 17       	cp	r24, r18
    9282:	93 07       	cpc	r25, r19
    9284:	a4 07       	cpc	r26, r20
    9286:	b5 07       	cpc	r27, r21
    9288:	10 f4       	brcc	.+4      	; 0x928e <f_write+0x76>
    928a:	66 24       	eor	r6, r6
    928c:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    928e:	81 2f       	mov	r24, r17
    9290:	90 2f       	mov	r25, r16
    9292:	9c 01       	movw	r18, r24
    9294:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9296:	22 24       	eor	r2, r2
    9298:	23 94       	inc	r2
    929a:	bd c1       	rjmp	.+890    	; 0x9616 <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    929c:	ab 81       	ldd	r26, Y+3	; 0x03
    929e:	bc 81       	ldd	r27, Y+4	; 0x04
    92a0:	16 96       	adiw	r26, 0x06	; 6
    92a2:	2d 91       	ld	r18, X+
    92a4:	3d 91       	ld	r19, X+
    92a6:	4d 91       	ld	r20, X+
    92a8:	5c 91       	ld	r21, X
    92aa:	19 97       	sbiw	r26, 0x09	; 9
    92ac:	da 01       	movw	r26, r20
    92ae:	c9 01       	movw	r24, r18
    92b0:	91 70       	andi	r25, 0x01	; 1
    92b2:	a0 70       	andi	r26, 0x00	; 0
    92b4:	b0 70       	andi	r27, 0x00	; 0
    92b6:	00 97       	sbiw	r24, 0x00	; 0
    92b8:	a1 05       	cpc	r26, r1
    92ba:	b1 05       	cpc	r27, r1
    92bc:	09 f0       	breq	.+2      	; 0x92c0 <f_write+0xa8>
    92be:	4a c1       	rjmp	.+660    	; 0x9554 <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    92c0:	ab 81       	ldd	r26, Y+3	; 0x03
    92c2:	bc 81       	ldd	r27, Y+4	; 0x04
    92c4:	ed 91       	ld	r30, X+
    92c6:	fc 91       	ld	r31, X
    92c8:	11 97       	sbiw	r26, 0x01	; 1
    92ca:	15 96       	adiw	r26, 0x05	; 5
    92cc:	9c 91       	ld	r25, X
    92ce:	15 97       	sbiw	r26, 0x05	; 5
    92d0:	82 81       	ldd	r24, Z+2	; 0x02
    92d2:	98 17       	cp	r25, r24
    92d4:	08 f4       	brcc	.+2      	; 0x92d8 <f_write+0xc0>
    92d6:	55 c0       	rjmp	.+170    	; 0x9382 <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    92d8:	21 15       	cp	r18, r1
    92da:	31 05       	cpc	r19, r1
    92dc:	41 05       	cpc	r20, r1
    92de:	51 05       	cpc	r21, r1
    92e0:	c9 f4       	brne	.+50     	; 0x9314 <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    92e2:	1e 96       	adiw	r26, 0x0e	; 14
    92e4:	6d 91       	ld	r22, X+
    92e6:	7d 91       	ld	r23, X+
    92e8:	8d 91       	ld	r24, X+
    92ea:	9c 91       	ld	r25, X
    92ec:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    92ee:	61 15       	cp	r22, r1
    92f0:	71 05       	cpc	r23, r1
    92f2:	81 05       	cpc	r24, r1
    92f4:	91 05       	cpc	r25, r1
    92f6:	f9 f4       	brne	.+62     	; 0x9336 <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    92f8:	cf 01       	movw	r24, r30
    92fa:	40 e0       	ldi	r20, 0x00	; 0
    92fc:	50 e0       	ldi	r21, 0x00	; 0
    92fe:	60 e0       	ldi	r22, 0x00	; 0
    9300:	70 e0       	ldi	r23, 0x00	; 0
    9302:	0e 94 93 3b 	call	0x7726	; 0x7726 <create_chain>
    9306:	eb 81       	ldd	r30, Y+3	; 0x03
    9308:	fc 81       	ldd	r31, Y+4	; 0x04
    930a:	66 87       	std	Z+14, r22	; 0x0e
    930c:	77 87       	std	Z+15, r23	; 0x0f
    930e:	80 8b       	std	Z+16, r24	; 0x10
    9310:	91 8b       	std	Z+17, r25	; 0x11
    9312:	0b c0       	rjmp	.+22     	; 0x932a <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    9314:	ab 81       	ldd	r26, Y+3	; 0x03
    9316:	bc 81       	ldd	r27, Y+4	; 0x04
    9318:	52 96       	adiw	r26, 0x12	; 18
    931a:	4d 91       	ld	r20, X+
    931c:	5d 91       	ld	r21, X+
    931e:	6d 91       	ld	r22, X+
    9320:	7c 91       	ld	r23, X
    9322:	55 97       	sbiw	r26, 0x15	; 21
    9324:	cf 01       	movw	r24, r30
    9326:	0e 94 93 3b 	call	0x7726	; 0x7726 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    932a:	61 15       	cp	r22, r1
    932c:	71 05       	cpc	r23, r1
    932e:	81 05       	cpc	r24, r1
    9330:	91 05       	cpc	r25, r1
    9332:	09 f4       	brne	.+2      	; 0x9336 <f_write+0x11e>
    9334:	74 c1       	rjmp	.+744    	; 0x961e <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    9336:	61 30       	cpi	r22, 0x01	; 1
    9338:	71 05       	cpc	r23, r1
    933a:	81 05       	cpc	r24, r1
    933c:	91 05       	cpc	r25, r1
    933e:	49 f4       	brne	.+18     	; 0x9352 <f_write+0x13a>
    9340:	eb 81       	ldd	r30, Y+3	; 0x03
    9342:	fc 81       	ldd	r31, Y+4	; 0x04
    9344:	84 81       	ldd	r24, Z+4	; 0x04
    9346:	80 68       	ori	r24, 0x80	; 128
    9348:	84 83       	std	Z+4, r24	; 0x04
    934a:	e2 e0       	ldi	r30, 0x02	; 2
    934c:	8e 2e       	mov	r8, r30
    934e:	91 2c       	mov	r9, r1
    9350:	87 c1       	rjmp	.+782    	; 0x9660 <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9352:	6f 3f       	cpi	r22, 0xFF	; 255
    9354:	ff ef       	ldi	r31, 0xFF	; 255
    9356:	7f 07       	cpc	r23, r31
    9358:	ff ef       	ldi	r31, 0xFF	; 255
    935a:	8f 07       	cpc	r24, r31
    935c:	ff ef       	ldi	r31, 0xFF	; 255
    935e:	9f 07       	cpc	r25, r31
    9360:	49 f4       	brne	.+18     	; 0x9374 <f_write+0x15c>
    9362:	ab 81       	ldd	r26, Y+3	; 0x03
    9364:	bc 81       	ldd	r27, Y+4	; 0x04
    9366:	14 96       	adiw	r26, 0x04	; 4
    9368:	8c 91       	ld	r24, X
    936a:	14 97       	sbiw	r26, 0x04	; 4
    936c:	80 68       	ori	r24, 0x80	; 128
    936e:	14 96       	adiw	r26, 0x04	; 4
    9370:	8c 93       	st	X, r24
    9372:	09 c1       	rjmp	.+530    	; 0x9586 <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    9374:	eb 81       	ldd	r30, Y+3	; 0x03
    9376:	fc 81       	ldd	r31, Y+4	; 0x04
    9378:	62 8b       	std	Z+18, r22	; 0x12
    937a:	73 8b       	std	Z+19, r23	; 0x13
    937c:	84 8b       	std	Z+20, r24	; 0x14
    937e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    9380:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    9382:	ab 81       	ldd	r26, Y+3	; 0x03
    9384:	bc 81       	ldd	r27, Y+4	; 0x04
    9386:	ed 91       	ld	r30, X+
    9388:	fc 91       	ld	r31, X
    938a:	11 97       	sbiw	r26, 0x01	; 1
    938c:	26 a5       	ldd	r18, Z+46	; 0x2e
    938e:	37 a5       	ldd	r19, Z+47	; 0x2f
    9390:	40 a9       	ldd	r20, Z+48	; 0x30
    9392:	51 a9       	ldd	r21, Z+49	; 0x31
    9394:	56 96       	adiw	r26, 0x16	; 22
    9396:	ed 90       	ld	r14, X+
    9398:	fd 90       	ld	r15, X+
    939a:	0d 91       	ld	r16, X+
    939c:	1c 91       	ld	r17, X
    939e:	59 97       	sbiw	r26, 0x19	; 25
    93a0:	2e 15       	cp	r18, r14
    93a2:	3f 05       	cpc	r19, r15
    93a4:	40 07       	cpc	r20, r16
    93a6:	51 07       	cpc	r21, r17
    93a8:	51 f4       	brne	.+20     	; 0x93be <f_write+0x1a6>
    93aa:	cf 01       	movw	r24, r30
    93ac:	40 e0       	ldi	r20, 0x00	; 0
    93ae:	50 e0       	ldi	r21, 0x00	; 0
    93b0:	60 e0       	ldi	r22, 0x00	; 0
    93b2:	70 e0       	ldi	r23, 0x00	; 0
    93b4:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    93b8:	89 2b       	or	r24, r25
    93ba:	09 f0       	breq	.+2      	; 0x93be <f_write+0x1a6>
    93bc:	df c0       	rjmp	.+446    	; 0x957c <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    93be:	ab 81       	ldd	r26, Y+3	; 0x03
    93c0:	bc 81       	ldd	r27, Y+4	; 0x04
    93c2:	0d 91       	ld	r16, X+
    93c4:	1c 91       	ld	r17, X
    93c6:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    93c8:	52 96       	adiw	r26, 0x12	; 18
    93ca:	2d 91       	ld	r18, X+
    93cc:	3d 91       	ld	r19, X+
    93ce:	4d 91       	ld	r20, X+
    93d0:	5c 91       	ld	r21, X
    93d2:	55 97       	sbiw	r26, 0x15	; 21
    93d4:	22 50       	subi	r18, 0x02	; 2
    93d6:	30 40       	sbci	r19, 0x00	; 0
    93d8:	40 40       	sbci	r20, 0x00	; 0
    93da:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    93dc:	f8 01       	movw	r30, r16
    93de:	86 8d       	ldd	r24, Z+30	; 0x1e
    93e0:	97 8d       	ldd	r25, Z+31	; 0x1f
    93e2:	a0 a1       	ldd	r26, Z+32	; 0x20
    93e4:	b1 a1       	ldd	r27, Z+33	; 0x21
    93e6:	02 97       	sbiw	r24, 0x02	; 2
    93e8:	a1 09       	sbc	r26, r1
    93ea:	b1 09       	sbc	r27, r1
    93ec:	28 17       	cp	r18, r24
    93ee:	39 07       	cpc	r19, r25
    93f0:	4a 07       	cpc	r20, r26
    93f2:	5b 07       	cpc	r21, r27
    93f4:	b8 f4       	brcc	.+46     	; 0x9424 <f_write+0x20c>
	return clst * fs->csize + fs->database;
    93f6:	32 80       	ldd	r3, Z+2	; 0x02
    93f8:	63 2d       	mov	r22, r3
    93fa:	70 e0       	ldi	r23, 0x00	; 0
    93fc:	80 e0       	ldi	r24, 0x00	; 0
    93fe:	90 e0       	ldi	r25, 0x00	; 0
    9400:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    9404:	9b 01       	movw	r18, r22
    9406:	ac 01       	movw	r20, r24
    9408:	f8 01       	movw	r30, r16
    940a:	82 a5       	ldd	r24, Z+42	; 0x2a
    940c:	93 a5       	ldd	r25, Z+43	; 0x2b
    940e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9410:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9412:	28 0f       	add	r18, r24
    9414:	39 1f       	adc	r19, r25
    9416:	4a 1f       	adc	r20, r26
    9418:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    941a:	21 15       	cp	r18, r1
    941c:	31 05       	cpc	r19, r1
    941e:	41 05       	cpc	r20, r1
    9420:	51 05       	cpc	r21, r1
    9422:	49 f4       	brne	.+18     	; 0x9436 <f_write+0x21e>
    9424:	ab 81       	ldd	r26, Y+3	; 0x03
    9426:	bc 81       	ldd	r27, Y+4	; 0x04
    9428:	14 96       	adiw	r26, 0x04	; 4
    942a:	8c 91       	ld	r24, X
    942c:	14 97       	sbiw	r26, 0x04	; 4
    942e:	80 68       	ori	r24, 0x80	; 128
    9430:	14 96       	adiw	r26, 0x04	; 4
    9432:	8c 93       	st	X, r24
    9434:	8a cf       	rjmp	.-236    	; 0x934a <f_write+0x132>
			sect += fp->csect;
    9436:	eb 81       	ldd	r30, Y+3	; 0x03
    9438:	fc 81       	ldd	r31, Y+4	; 0x04
    943a:	85 81       	ldd	r24, Z+5	; 0x05
    943c:	59 01       	movw	r10, r18
    943e:	6a 01       	movw	r12, r20
    9440:	a8 0e       	add	r10, r24
    9442:	b1 1c       	adc	r11, r1
    9444:	c1 1c       	adc	r12, r1
    9446:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9448:	73 01       	movw	r14, r6
    944a:	ef 2c       	mov	r14, r15
    944c:	ff 24       	eor	r15, r15
    944e:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    9450:	e1 14       	cp	r14, r1
    9452:	f1 04       	cpc	r15, r1
    9454:	09 f4       	brne	.+2      	; 0x9458 <f_write+0x240>
    9456:	51 c0       	rjmp	.+162    	; 0x94fa <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9458:	28 2f       	mov	r18, r24
    945a:	30 e0       	ldi	r19, 0x00	; 0
    945c:	c7 01       	movw	r24, r14
    945e:	82 0f       	add	r24, r18
    9460:	93 1f       	adc	r25, r19
    9462:	63 2d       	mov	r22, r3
    9464:	70 e0       	ldi	r23, 0x00	; 0
    9466:	68 17       	cp	r22, r24
    9468:	79 07       	cpc	r23, r25
    946a:	18 f4       	brcc	.+6      	; 0x9472 <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    946c:	7b 01       	movw	r14, r22
    946e:	e2 1a       	sub	r14, r18
    9470:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    9472:	d8 01       	movw	r26, r16
    9474:	11 96       	adiw	r26, 0x01	; 1
    9476:	8c 91       	ld	r24, X
    9478:	b2 01       	movw	r22, r4
    947a:	a6 01       	movw	r20, r12
    947c:	95 01       	movw	r18, r10
    947e:	0e 2d       	mov	r16, r14
    9480:	0e 94 9a 51 	call	0xa334	; 0xa334 <disk_write>
    9484:	89 2b       	or	r24, r25
    9486:	09 f0       	breq	.+2      	; 0x948a <f_write+0x272>
    9488:	79 c0       	rjmp	.+242    	; 0x957c <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    948a:	ab 81       	ldd	r26, Y+3	; 0x03
    948c:	bc 81       	ldd	r27, Y+4	; 0x04
    948e:	ed 91       	ld	r30, X+
    9490:	fc 91       	ld	r31, X
    9492:	26 a5       	ldd	r18, Z+46	; 0x2e
    9494:	37 a5       	ldd	r19, Z+47	; 0x2f
    9496:	40 a9       	ldd	r20, Z+48	; 0x30
    9498:	51 a9       	ldd	r21, Z+49	; 0x31
    949a:	2a 19       	sub	r18, r10
    949c:	3b 09       	sbc	r19, r11
    949e:	4c 09       	sbc	r20, r12
    94a0:	5d 09       	sbc	r21, r13
    94a2:	c7 01       	movw	r24, r14
    94a4:	a0 e0       	ldi	r26, 0x00	; 0
    94a6:	b0 e0       	ldi	r27, 0x00	; 0
    94a8:	28 17       	cp	r18, r24
    94aa:	39 07       	cpc	r19, r25
    94ac:	4a 07       	cpc	r20, r26
    94ae:	5b 07       	cpc	r21, r27
    94b0:	d0 f4       	brcc	.+52     	; 0x94e6 <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    94b2:	df 01       	movw	r26, r30
    94b4:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    94b6:	69 e0       	ldi	r22, 0x09	; 9
    94b8:	22 0f       	add	r18, r18
    94ba:	33 1f       	adc	r19, r19
    94bc:	44 1f       	adc	r20, r20
    94be:	55 1f       	adc	r21, r21
    94c0:	6a 95       	dec	r22
    94c2:	d1 f7       	brne	.-12     	; 0x94b8 <f_write+0x2a0>
    94c4:	f2 01       	movw	r30, r4
    94c6:	e2 0f       	add	r30, r18
    94c8:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    94ca:	9f 01       	movw	r18, r30
    94cc:	20 50       	subi	r18, 0x00	; 0
    94ce:	3e 4f       	sbci	r19, 0xFE	; 254
    94d0:	02 c0       	rjmp	.+4      	; 0x94d6 <f_write+0x2be>
    94d2:	81 91       	ld	r24, Z+
    94d4:	8d 93       	st	X+, r24
    94d6:	e2 17       	cp	r30, r18
    94d8:	f3 07       	cpc	r31, r19
    94da:	d9 f7       	brne	.-10     	; 0x94d2 <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    94dc:	ab 81       	ldd	r26, Y+3	; 0x03
    94de:	bc 81       	ldd	r27, Y+4	; 0x04
    94e0:	ed 91       	ld	r30, X+
    94e2:	fc 91       	ld	r31, X
    94e4:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    94e6:	eb 81       	ldd	r30, Y+3	; 0x03
    94e8:	fc 81       	ldd	r31, Y+4	; 0x04
    94ea:	85 81       	ldd	r24, Z+5	; 0x05
    94ec:	8e 0d       	add	r24, r14
    94ee:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    94f0:	b7 01       	movw	r22, r14
    94f2:	76 2f       	mov	r23, r22
    94f4:	66 27       	eor	r22, r22
    94f6:	77 0f       	add	r23, r23
    94f8:	71 c0       	rjmp	.+226    	; 0x95dc <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    94fa:	ab 81       	ldd	r26, Y+3	; 0x03
    94fc:	bc 81       	ldd	r27, Y+4	; 0x04
    94fe:	16 96       	adiw	r26, 0x06	; 6
    9500:	2d 91       	ld	r18, X+
    9502:	3d 91       	ld	r19, X+
    9504:	4d 91       	ld	r20, X+
    9506:	5c 91       	ld	r21, X
    9508:	19 97       	sbiw	r26, 0x09	; 9
    950a:	1a 96       	adiw	r26, 0x0a	; 10
    950c:	8d 91       	ld	r24, X+
    950e:	9d 91       	ld	r25, X+
    9510:	0d 90       	ld	r0, X+
    9512:	bc 91       	ld	r27, X
    9514:	a0 2d       	mov	r26, r0
    9516:	28 17       	cp	r18, r24
    9518:	39 07       	cpc	r19, r25
    951a:	4a 07       	cpc	r20, r26
    951c:	5b 07       	cpc	r21, r27
    951e:	88 f0       	brcs	.+34     	; 0x9542 <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    9520:	c8 01       	movw	r24, r16
    9522:	40 e0       	ldi	r20, 0x00	; 0
    9524:	50 e0       	ldi	r21, 0x00	; 0
    9526:	60 e0       	ldi	r22, 0x00	; 0
    9528:	70 e0       	ldi	r23, 0x00	; 0
    952a:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    952e:	89 2b       	or	r24, r25
    9530:	29 f5       	brne	.+74     	; 0x957c <f_write+0x364>
				fp->fs->winsect = sect;
    9532:	ab 81       	ldd	r26, Y+3	; 0x03
    9534:	bc 81       	ldd	r27, Y+4	; 0x04
    9536:	ed 91       	ld	r30, X+
    9538:	fc 91       	ld	r31, X
    953a:	a6 a6       	std	Z+46, r10	; 0x2e
    953c:	b7 a6       	std	Z+47, r11	; 0x2f
    953e:	c0 aa       	std	Z+48, r12	; 0x30
    9540:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9542:	eb 81       	ldd	r30, Y+3	; 0x03
    9544:	fc 81       	ldd	r31, Y+4	; 0x04
    9546:	a6 8a       	std	Z+22, r10	; 0x16
    9548:	b7 8a       	std	Z+23, r11	; 0x17
    954a:	c0 8e       	std	Z+24, r12	; 0x18
    954c:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    954e:	85 81       	ldd	r24, Z+5	; 0x05
    9550:	8f 5f       	subi	r24, 0xFF	; 255
    9552:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9554:	ab 81       	ldd	r26, Y+3	; 0x03
    9556:	bc 81       	ldd	r27, Y+4	; 0x04
    9558:	16 96       	adiw	r26, 0x06	; 6
    955a:	cd 90       	ld	r12, X+
    955c:	dd 90       	ld	r13, X+
    955e:	ed 90       	ld	r14, X+
    9560:	fc 90       	ld	r15, X
    9562:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9564:	56 96       	adiw	r26, 0x16	; 22
    9566:	4d 91       	ld	r20, X+
    9568:	5d 91       	ld	r21, X+
    956a:	6d 91       	ld	r22, X+
    956c:	7c 91       	ld	r23, X
    956e:	59 97       	sbiw	r26, 0x19	; 25
    9570:	8d 91       	ld	r24, X+
    9572:	9c 91       	ld	r25, X
    9574:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    9578:	89 2b       	or	r24, r25
    957a:	49 f0       	breq	.+18     	; 0x958e <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    957c:	eb 81       	ldd	r30, Y+3	; 0x03
    957e:	fc 81       	ldd	r31, Y+4	; 0x04
    9580:	84 81       	ldd	r24, Z+4	; 0x04
    9582:	80 68       	ori	r24, 0x80	; 128
    9584:	84 83       	std	Z+4, r24	; 0x04
    9586:	31 e0       	ldi	r19, 0x01	; 1
    9588:	83 2e       	mov	r8, r19
    958a:	91 2c       	mov	r9, r1
    958c:	69 c0       	rjmp	.+210    	; 0x9660 <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    958e:	c6 01       	movw	r24, r12
    9590:	91 70       	andi	r25, 0x01	; 1
    9592:	20 e0       	ldi	r18, 0x00	; 0
    9594:	32 e0       	ldi	r19, 0x02	; 2
    9596:	28 1b       	sub	r18, r24
    9598:	39 0b       	sbc	r19, r25
    959a:	b3 01       	movw	r22, r6
    959c:	26 15       	cp	r18, r6
    959e:	37 05       	cpc	r19, r7
    95a0:	08 f4       	brcc	.+2      	; 0x95a4 <f_write+0x38c>
    95a2:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    95a4:	ab 81       	ldd	r26, Y+3	; 0x03
    95a6:	bc 81       	ldd	r27, Y+4	; 0x04
    95a8:	16 96       	adiw	r26, 0x06	; 6
    95aa:	8d 91       	ld	r24, X+
    95ac:	9c 91       	ld	r25, X
    95ae:	17 97       	sbiw	r26, 0x07	; 7
    95b0:	91 70       	andi	r25, 0x01	; 1
    95b2:	c2 96       	adiw	r24, 0x32	; 50
    95b4:	0d 90       	ld	r0, X+
    95b6:	bc 91       	ld	r27, X
    95b8:	a0 2d       	mov	r26, r0
    95ba:	a8 0f       	add	r26, r24
    95bc:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    95be:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    95c0:	92 01       	movw	r18, r4
    95c2:	26 0f       	add	r18, r22
    95c4:	37 1f       	adc	r19, r23
    95c6:	02 c0       	rjmp	.+4      	; 0x95cc <f_write+0x3b4>
    95c8:	81 91       	ld	r24, Z+
    95ca:	8d 93       	st	X+, r24
    95cc:	e2 17       	cp	r30, r18
    95ce:	f3 07       	cpc	r31, r19
    95d0:	d9 f7       	brne	.-10     	; 0x95c8 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    95d2:	ab 81       	ldd	r26, Y+3	; 0x03
    95d4:	bc 81       	ldd	r27, Y+4	; 0x04
    95d6:	ed 91       	ld	r30, X+
    95d8:	fc 91       	ld	r31, X
    95da:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    95dc:	46 0e       	add	r4, r22
    95de:	57 1e       	adc	r5, r23
    95e0:	cb 01       	movw	r24, r22
    95e2:	a0 e0       	ldi	r26, 0x00	; 0
    95e4:	b0 e0       	ldi	r27, 0x00	; 0
    95e6:	eb 81       	ldd	r30, Y+3	; 0x03
    95e8:	fc 81       	ldd	r31, Y+4	; 0x04
    95ea:	26 81       	ldd	r18, Z+6	; 0x06
    95ec:	37 81       	ldd	r19, Z+7	; 0x07
    95ee:	40 85       	ldd	r20, Z+8	; 0x08
    95f0:	51 85       	ldd	r21, Z+9	; 0x09
    95f2:	28 0f       	add	r18, r24
    95f4:	39 1f       	adc	r19, r25
    95f6:	4a 1f       	adc	r20, r26
    95f8:	5b 1f       	adc	r21, r27
    95fa:	26 83       	std	Z+6, r18	; 0x06
    95fc:	37 83       	std	Z+7, r19	; 0x07
    95fe:	40 87       	std	Z+8, r20	; 0x08
    9600:	51 87       	std	Z+9, r21	; 0x09
    9602:	e9 81       	ldd	r30, Y+1	; 0x01
    9604:	fa 81       	ldd	r31, Y+2	; 0x02
    9606:	80 81       	ld	r24, Z
    9608:	91 81       	ldd	r25, Z+1	; 0x01
    960a:	86 0f       	add	r24, r22
    960c:	97 1f       	adc	r25, r23
    960e:	80 83       	st	Z, r24
    9610:	91 83       	std	Z+1, r25	; 0x01
    9612:	66 1a       	sub	r6, r22
    9614:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    9616:	61 14       	cp	r6, r1
    9618:	71 04       	cpc	r7, r1
    961a:	09 f0       	breq	.+2      	; 0x961e <f_write+0x406>
    961c:	3f ce       	rjmp	.-898    	; 0x929c <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    961e:	ab 81       	ldd	r26, Y+3	; 0x03
    9620:	bc 81       	ldd	r27, Y+4	; 0x04
    9622:	16 96       	adiw	r26, 0x06	; 6
    9624:	2d 91       	ld	r18, X+
    9626:	3d 91       	ld	r19, X+
    9628:	4d 91       	ld	r20, X+
    962a:	5c 91       	ld	r21, X
    962c:	19 97       	sbiw	r26, 0x09	; 9
    962e:	1a 96       	adiw	r26, 0x0a	; 10
    9630:	8d 91       	ld	r24, X+
    9632:	9d 91       	ld	r25, X+
    9634:	0d 90       	ld	r0, X+
    9636:	bc 91       	ld	r27, X
    9638:	a0 2d       	mov	r26, r0
    963a:	82 17       	cp	r24, r18
    963c:	93 07       	cpc	r25, r19
    963e:	a4 07       	cpc	r26, r20
    9640:	b5 07       	cpc	r27, r21
    9642:	30 f4       	brcc	.+12     	; 0x9650 <f_write+0x438>
    9644:	eb 81       	ldd	r30, Y+3	; 0x03
    9646:	fc 81       	ldd	r31, Y+4	; 0x04
    9648:	22 87       	std	Z+10, r18	; 0x0a
    964a:	33 87       	std	Z+11, r19	; 0x0b
    964c:	44 87       	std	Z+12, r20	; 0x0c
    964e:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    9650:	ab 81       	ldd	r26, Y+3	; 0x03
    9652:	bc 81       	ldd	r27, Y+4	; 0x04
    9654:	14 96       	adiw	r26, 0x04	; 4
    9656:	8c 91       	ld	r24, X
    9658:	14 97       	sbiw	r26, 0x04	; 4
    965a:	80 62       	ori	r24, 0x20	; 32
    965c:	14 96       	adiw	r26, 0x04	; 4
    965e:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    9660:	c4 01       	movw	r24, r8
    9662:	24 96       	adiw	r28, 0x04	; 4
    9664:	e2 e1       	ldi	r30, 0x12	; 18
    9666:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

0000966a <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    966a:	a3 e0       	ldi	r26, 0x03	; 3
    966c:	b0 e0       	ldi	r27, 0x00	; 0
    966e:	eb e3       	ldi	r30, 0x3B	; 59
    9670:	fb e4       	ldi	r31, 0x4B	; 75
    9672:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
    9676:	7c 01       	movw	r14, r24
    9678:	8b 01       	movw	r16, r22
	UINT bw;
	char c;


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
    967a:	8a e0       	ldi	r24, 0x0A	; 10
    967c:	e8 16       	cp	r14, r24
    967e:	f1 04       	cpc	r15, r1
    9680:	21 f4       	brne	.+8      	; 0x968a <f_putc+0x20>
    9682:	8d e0       	ldi	r24, 0x0D	; 13
    9684:	90 e0       	ldi	r25, 0x00	; 0
    9686:	0e 94 35 4b 	call	0x966a	; 0x966a <f_putc>
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    968a:	01 15       	cp	r16, r1
    968c:	11 05       	cpc	r17, r1
    968e:	99 f0       	breq	.+38     	; 0x96b6 <f_putc+0x4c>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    9690:	e9 82       	std	Y+1, r14	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    9692:	c8 01       	movw	r24, r16
    9694:	be 01       	movw	r22, r28
    9696:	6f 5f       	subi	r22, 0xFF	; 255
    9698:	7f 4f       	sbci	r23, 0xFF	; 255
    969a:	41 e0       	ldi	r20, 0x01	; 1
    969c:	50 e0       	ldi	r21, 0x00	; 0
    969e:	9e 01       	movw	r18, r28
    96a0:	2e 5f       	subi	r18, 0xFE	; 254
    96a2:	3f 4f       	sbci	r19, 0xFF	; 255
    96a4:	0e 94 0c 49 	call	0x9218	; 0x9218 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    96a8:	8a 81       	ldd	r24, Y+2	; 0x02
    96aa:	9b 81       	ldd	r25, Y+3	; 0x03
    96ac:	89 2b       	or	r24, r25
    96ae:	19 f4       	brne	.+6      	; 0x96b6 <f_putc+0x4c>
    96b0:	ee 24       	eor	r14, r14
    96b2:	ea 94       	dec	r14
    96b4:	fe 2c       	mov	r15, r14
}
    96b6:	c7 01       	movw	r24, r14
    96b8:	23 96       	adiw	r28, 0x03	; 3
    96ba:	e6 e0       	ldi	r30, 0x06	; 6
    96bc:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

000096c0 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    96c0:	ef 92       	push	r14
    96c2:	ff 92       	push	r15
    96c4:	0f 93       	push	r16
    96c6:	1f 93       	push	r17
    96c8:	cf 93       	push	r28
    96ca:	df 93       	push	r29
    96cc:	8c 01       	movw	r16, r24
    96ce:	7b 01       	movw	r14, r22
    96d0:	c0 e0       	ldi	r28, 0x00	; 0
    96d2:	d0 e0       	ldi	r29, 0x00	; 0
    96d4:	0f c0       	rjmp	.+30     	; 0x96f4 <f_puts+0x34>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    96d6:	99 27       	eor	r25, r25
    96d8:	87 fd       	sbrc	r24, 7
    96da:	90 95       	com	r25
    96dc:	b7 01       	movw	r22, r14
    96de:	0e 94 35 4b 	call	0x966a	; 0x966a <f_putc>
    96e2:	8f 5f       	subi	r24, 0xFF	; 255
    96e4:	9f 4f       	sbci	r25, 0xFF	; 255
    96e6:	19 f4       	brne	.+6      	; 0x96ee <f_puts+0x2e>
    96e8:	cf ef       	ldi	r28, 0xFF	; 255
    96ea:	df ef       	ldi	r29, 0xFF	; 255
    96ec:	07 c0       	rjmp	.+14     	; 0x96fc <f_puts+0x3c>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    96ee:	0f 5f       	subi	r16, 0xFF	; 255
    96f0:	1f 4f       	sbci	r17, 0xFF	; 255
    96f2:	21 96       	adiw	r28, 0x01	; 1
    96f4:	f8 01       	movw	r30, r16
    96f6:	80 81       	ld	r24, Z
    96f8:	88 23       	and	r24, r24
    96fa:	69 f7       	brne	.-38     	; 0x96d6 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    96fc:	ce 01       	movw	r24, r28
    96fe:	cd b7       	in	r28, 0x3d	; 61
    9700:	de b7       	in	r29, 0x3e	; 62
    9702:	e6 e0       	ldi	r30, 0x06	; 6
    9704:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

00009708 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9708:	a3 e1       	ldi	r26, 0x13	; 19
    970a:	b0 e0       	ldi	r27, 0x00	; 0
    970c:	ea e8       	ldi	r30, 0x8A	; 138
    970e:	fb e4       	ldi	r31, 0x4B	; 75
    9710:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <__prologue_saves__>
    9714:	6b a4       	ldd	r6, Y+43	; 0x2b
    9716:	7c a4       	ldd	r7, Y+44	; 0x2c
    9718:	8e 01       	movw	r16, r28
    971a:	03 5d       	subi	r16, 0xD3	; 211
    971c:	1f 4f       	sbci	r17, 0xFF	; 255
    971e:	19 8a       	std	Y+17, r1	; 0x11
    9720:	1a 8a       	std	Y+18, r1	; 0x12
    9722:	20 e0       	ldi	r18, 0x00	; 0
    9724:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9726:	d3 01       	movw	r26, r6
    9728:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    972a:	88 23       	and	r24, r24
    972c:	09 f4       	brne	.+2      	; 0x9730 <f_printf+0x28>
    972e:	17 c1       	rjmp	.+558    	; 0x995e <f_printf+0x256>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9730:	08 94       	sec
    9732:	61 1c       	adc	r6, r1
    9734:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9736:	85 32       	cpi	r24, 0x25	; 37
    9738:	71 f0       	breq	.+28     	; 0x9756 <f_printf+0x4e>
			cc = f_putc(c, fil);
    973a:	90 e0       	ldi	r25, 0x00	; 0
    973c:	69 a5       	ldd	r22, Y+41	; 0x29
    973e:	7a a5       	ldd	r23, Y+42	; 0x2a
    9740:	0e 94 35 4b 	call	0x966a	; 0x966a <f_putc>
    9744:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9746:	bf ef       	ldi	r27, 0xFF	; 255
    9748:	8f 3f       	cpi	r24, 0xFF	; 255
    974a:	9b 07       	cpc	r25, r27
    974c:	11 f4       	brne	.+4      	; 0x9752 <f_printf+0x4a>
    974e:	48 01       	movw	r8, r16
    9750:	fa c0       	rjmp	.+500    	; 0x9946 <f_printf+0x23e>
    9752:	48 01       	movw	r8, r16
    9754:	4c c0       	rjmp	.+152    	; 0x97ee <f_printf+0xe6>
			continue;
		}
		w = f = 0;
		c = *str++;
    9756:	d3 01       	movw	r26, r6
    9758:	ed 91       	ld	r30, X+
    975a:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    975c:	e0 33       	cpi	r30, 0x30	; 48
    975e:	11 f0       	breq	.+4      	; 0x9764 <f_printf+0x5c>
    9760:	1b 8a       	std	Y+19, r1	; 0x13
    9762:	04 c0       	rjmp	.+8      	; 0x976c <f_printf+0x64>
			f = 1; c = *str++;
    9764:	ed 91       	ld	r30, X+
    9766:	3d 01       	movw	r6, r26
    9768:	b1 e0       	ldi	r27, 0x01	; 1
    976a:	bb 8b       	std	Y+19, r27	; 0x13
    976c:	aa 24       	eor	r10, r10
    976e:	bb 24       	eor	r11, r11
    9770:	13 c0       	rjmp	.+38     	; 0x9798 <f_printf+0x90>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9772:	c5 01       	movw	r24, r10
    9774:	53 e0       	ldi	r21, 0x03	; 3
    9776:	88 0f       	add	r24, r24
    9778:	99 1f       	adc	r25, r25
    977a:	5a 95       	dec	r21
    977c:	e1 f7       	brne	.-8      	; 0x9776 <f_printf+0x6e>
    977e:	aa 0c       	add	r10, r10
    9780:	bb 1c       	adc	r11, r11
    9782:	a8 0e       	add	r10, r24
    9784:	b9 1e       	adc	r11, r25
    9786:	ae 0e       	add	r10, r30
    9788:	b1 1c       	adc	r11, r1
    978a:	e0 ed       	ldi	r30, 0xD0	; 208
    978c:	ff ef       	ldi	r31, 0xFF	; 255
    978e:	ae 0e       	add	r10, r30
    9790:	bf 1e       	adc	r11, r31
			c = *str++;
    9792:	d3 01       	movw	r26, r6
    9794:	ed 91       	ld	r30, X+
    9796:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9798:	8e 2f       	mov	r24, r30
    979a:	80 53       	subi	r24, 0x30	; 48
    979c:	8a 30       	cpi	r24, 0x0A	; 10
    979e:	48 f3       	brcs	.-46     	; 0x9772 <f_printf+0x6a>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    97a0:	ec 36       	cpi	r30, 0x6C	; 108
    97a2:	31 f4       	brne	.+12     	; 0x97b0 <f_printf+0xa8>
			f |= 2; c = *str++;
    97a4:	bb 89       	ldd	r27, Y+19	; 0x13
    97a6:	b2 60       	ori	r27, 0x02	; 2
    97a8:	bb 8b       	std	Y+19, r27	; 0x13
    97aa:	d3 01       	movw	r26, r6
    97ac:	ed 91       	ld	r30, X+
    97ae:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    97b0:	e3 37       	cpi	r30, 0x73	; 115
    97b2:	49 f4       	brne	.+18     	; 0x97c6 <f_printf+0xbe>
			cc = f_puts(va_arg(arp, char*), fil);
    97b4:	92 e0       	ldi	r25, 0x02	; 2
    97b6:	89 2e       	mov	r8, r25
    97b8:	91 2c       	mov	r9, r1
    97ba:	80 0e       	add	r8, r16
    97bc:	91 1e       	adc	r9, r17
    97be:	f8 01       	movw	r30, r16
    97c0:	80 81       	ld	r24, Z
    97c2:	91 81       	ldd	r25, Z+1	; 0x01
    97c4:	bb c0       	rjmp	.+374    	; 0x993c <f_printf+0x234>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    97c6:	e3 36       	cpi	r30, 0x63	; 99
    97c8:	a9 f4       	brne	.+42     	; 0x97f4 <f_printf+0xec>
			cc = f_putc(va_arg(arp, int), fil);
    97ca:	82 e0       	ldi	r24, 0x02	; 2
    97cc:	88 2e       	mov	r8, r24
    97ce:	91 2c       	mov	r9, r1
    97d0:	80 0e       	add	r8, r16
    97d2:	91 1e       	adc	r9, r17
    97d4:	d8 01       	movw	r26, r16
    97d6:	8d 91       	ld	r24, X+
    97d8:	9c 91       	ld	r25, X
    97da:	69 a5       	ldd	r22, Y+41	; 0x29
    97dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    97de:	0e 94 35 4b 	call	0x966a	; 0x966a <f_putc>
    97e2:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    97e4:	bf ef       	ldi	r27, 0xFF	; 255
    97e6:	8f 3f       	cpi	r24, 0xFF	; 255
    97e8:	9b 07       	cpc	r25, r27
    97ea:	09 f4       	brne	.+2      	; 0x97ee <f_printf+0xe6>
    97ec:	ac c0       	rjmp	.+344    	; 0x9946 <f_printf+0x23e>
    97ee:	21 e0       	ldi	r18, 0x01	; 1
    97f0:	30 e0       	ldi	r19, 0x00	; 0
    97f2:	a9 c0       	rjmp	.+338    	; 0x9946 <f_printf+0x23e>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    97f4:	e4 36       	cpi	r30, 0x64	; 100
    97f6:	39 f0       	breq	.+14     	; 0x9806 <f_printf+0xfe>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    97f8:	e5 37       	cpi	r30, 0x75	; 117
    97fa:	29 f0       	breq	.+10     	; 0x9806 <f_printf+0xfe>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    97fc:	e8 35       	cpi	r30, 0x58	; 88
    97fe:	09 f0       	breq	.+2      	; 0x9802 <f_printf+0xfa>
    9800:	ae c0       	rjmp	.+348    	; 0x995e <f_printf+0x256>
    9802:	20 e1       	ldi	r18, 0x10	; 16
    9804:	01 c0       	rjmp	.+2      	; 0x9808 <f_printf+0x100>
    9806:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    9808:	fb 89       	ldd	r31, Y+19	; 0x13
    980a:	f1 ff       	sbrs	r31, 1
    980c:	0d c0       	rjmp	.+26     	; 0x9828 <f_printf+0x120>
			val = (ULONG)va_arg(arp, long);
    980e:	b4 e0       	ldi	r27, 0x04	; 4
    9810:	8b 2e       	mov	r8, r27
    9812:	91 2c       	mov	r9, r1
    9814:	80 0e       	add	r8, r16
    9816:	91 1e       	adc	r9, r17
    9818:	d8 01       	movw	r26, r16
    981a:	ed 90       	ld	r14, X+
    981c:	fd 90       	ld	r15, X+
    981e:	0d 91       	ld	r16, X+
    9820:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    9822:	e4 36       	cpi	r30, 0x64	; 100
    9824:	09 f5       	brne	.+66     	; 0x9868 <f_printf+0x160>
    9826:	13 c0       	rjmp	.+38     	; 0x984e <f_printf+0x146>
    9828:	c8 01       	movw	r24, r16
    982a:	02 96       	adiw	r24, 0x02	; 2
    982c:	d8 01       	movw	r26, r16
    982e:	6d 91       	ld	r22, X+
    9830:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    9832:	e4 36       	cpi	r30, 0x64	; 100
    9834:	39 f4       	brne	.+14     	; 0x9844 <f_printf+0x13c>
    9836:	4c 01       	movw	r8, r24
    9838:	7b 01       	movw	r14, r22
    983a:	00 27       	eor	r16, r16
    983c:	f7 fc       	sbrc	r15, 7
    983e:	00 95       	com	r16
    9840:	10 2f       	mov	r17, r16
    9842:	05 c0       	rjmp	.+10     	; 0x984e <f_printf+0x146>
    9844:	4c 01       	movw	r8, r24
    9846:	7b 01       	movw	r14, r22
    9848:	00 e0       	ldi	r16, 0x00	; 0
    984a:	10 e0       	ldi	r17, 0x00	; 0
    984c:	0d c0       	rjmp	.+26     	; 0x9868 <f_printf+0x160>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    984e:	17 ff       	sbrs	r17, 7
    9850:	0b c0       	rjmp	.+22     	; 0x9868 <f_printf+0x160>
				val = 0 - val;
    9852:	10 95       	com	r17
    9854:	00 95       	com	r16
    9856:	f0 94       	com	r15
    9858:	e0 94       	com	r14
    985a:	e1 1c       	adc	r14, r1
    985c:	f1 1c       	adc	r15, r1
    985e:	01 1d       	adc	r16, r1
    9860:	11 1d       	adc	r17, r1
				f |= 4;
    9862:	bb 89       	ldd	r27, Y+19	; 0x13
    9864:	b4 60       	ori	r27, 0x04	; 4
    9866:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9868:	18 8a       	std	Y+16, r1	; 0x10
    986a:	af e0       	ldi	r26, 0x0F	; 15
    986c:	ca 2e       	mov	r12, r26
    986e:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9870:	22 2e       	mov	r2, r18
    9872:	33 24       	eor	r3, r3
    9874:	44 24       	eor	r4, r4
    9876:	55 24       	eor	r5, r5
    9878:	c8 01       	movw	r24, r16
    987a:	b7 01       	movw	r22, r14
    987c:	a2 01       	movw	r20, r4
    987e:	91 01       	movw	r18, r2
    9880:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    9884:	86 2f       	mov	r24, r22
    9886:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9888:	8a 33       	cpi	r24, 0x3A	; 58
    988a:	08 f0       	brcs	.+2      	; 0x988e <f_printf+0x186>
    988c:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    988e:	08 94       	sec
    9890:	c1 08       	sbc	r12, r1
    9892:	d1 08       	sbc	r13, r1
    9894:	e1 e0       	ldi	r30, 0x01	; 1
    9896:	f0 e0       	ldi	r31, 0x00	; 0
    9898:	ec 0f       	add	r30, r28
    989a:	fd 1f       	adc	r31, r29
    989c:	ec 0d       	add	r30, r12
    989e:	fd 1d       	adc	r31, r13
    98a0:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    98a2:	c1 14       	cp	r12, r1
    98a4:	d1 04       	cpc	r13, r1
    98a6:	e9 f0       	breq	.+58     	; 0x98e2 <f_printf+0x1da>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    98a8:	c8 01       	movw	r24, r16
    98aa:	b7 01       	movw	r22, r14
    98ac:	a2 01       	movw	r20, r4
    98ae:	91 01       	movw	r18, r2
    98b0:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    98b4:	c9 01       	movw	r24, r18
    98b6:	da 01       	movw	r26, r20
    98b8:	7c 01       	movw	r14, r24
    98ba:	8d 01       	movw	r16, r26
		} while (i && val);
    98bc:	e1 14       	cp	r14, r1
    98be:	f1 04       	cpc	r15, r1
    98c0:	01 05       	cpc	r16, r1
    98c2:	11 05       	cpc	r17, r1
    98c4:	c9 f6       	brne	.-78     	; 0x9878 <f_printf+0x170>
		if (i && (f & 4)) s[--i] = '-';
    98c6:	eb 89       	ldd	r30, Y+19	; 0x13
    98c8:	e2 ff       	sbrs	r30, 2
    98ca:	0b c0       	rjmp	.+22     	; 0x98e2 <f_printf+0x1da>
    98cc:	08 94       	sec
    98ce:	c1 08       	sbc	r12, r1
    98d0:	d1 08       	sbc	r13, r1
    98d2:	e1 e0       	ldi	r30, 0x01	; 1
    98d4:	f0 e0       	ldi	r31, 0x00	; 0
    98d6:	ec 0f       	add	r30, r28
    98d8:	fd 1f       	adc	r31, r29
    98da:	ec 0d       	add	r30, r12
    98dc:	fd 1d       	adc	r31, r13
    98de:	4d e2       	ldi	r20, 0x2D	; 45
    98e0:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    98e2:	8f e0       	ldi	r24, 0x0F	; 15
    98e4:	90 e0       	ldi	r25, 0x00	; 0
    98e6:	8a 19       	sub	r24, r10
    98e8:	9b 09       	sbc	r25, r11
    98ea:	08 94       	sec
    98ec:	c1 08       	sbc	r12, r1
    98ee:	d1 08       	sbc	r13, r1
    98f0:	e1 e0       	ldi	r30, 0x01	; 1
    98f2:	f0 e0       	ldi	r31, 0x00	; 0
    98f4:	ec 0f       	add	r30, r28
    98f6:	fd 1f       	adc	r31, r29
    98f8:	ec 0d       	add	r30, r12
    98fa:	fd 1d       	adc	r31, r13
    98fc:	08 94       	sec
    98fe:	c1 1c       	adc	r12, r1
    9900:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    9902:	ab 89       	ldd	r26, Y+19	; 0x13
    9904:	2a 2f       	mov	r18, r26
    9906:	30 e0       	ldi	r19, 0x00	; 0
    9908:	21 70       	andi	r18, 0x01	; 1
    990a:	30 70       	andi	r19, 0x00	; 0
    990c:	0b c0       	rjmp	.+22     	; 0x9924 <f_printf+0x21c>
    990e:	08 94       	sec
    9910:	c1 08       	sbc	r12, r1
    9912:	d1 08       	sbc	r13, r1
    9914:	21 15       	cp	r18, r1
    9916:	31 05       	cpc	r19, r1
    9918:	11 f4       	brne	.+4      	; 0x991e <f_printf+0x216>
    991a:	40 e2       	ldi	r20, 0x20	; 32
    991c:	01 c0       	rjmp	.+2      	; 0x9920 <f_printf+0x218>
    991e:	40 e3       	ldi	r20, 0x30	; 48
    9920:	40 83       	st	Z, r20
    9922:	31 97       	sbiw	r30, 0x01	; 1
    9924:	c1 14       	cp	r12, r1
    9926:	d1 04       	cpc	r13, r1
    9928:	19 f0       	breq	.+6      	; 0x9930 <f_printf+0x228>
    992a:	8c 15       	cp	r24, r12
    992c:	9d 05       	cpc	r25, r13
    992e:	7c f3       	brlt	.-34     	; 0x990e <f_printf+0x206>
		cc = f_puts(&s[i], fil);
    9930:	81 e0       	ldi	r24, 0x01	; 1
    9932:	90 e0       	ldi	r25, 0x00	; 0
    9934:	8c 0f       	add	r24, r28
    9936:	9d 1f       	adc	r25, r29
    9938:	8c 0d       	add	r24, r12
    993a:	9d 1d       	adc	r25, r13
    993c:	69 a5       	ldd	r22, Y+41	; 0x29
    993e:	7a a5       	ldd	r23, Y+42	; 0x2a
    9940:	0e 94 60 4b 	call	0x96c0	; 0x96c0 <f_puts>
    9944:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9946:	e9 89       	ldd	r30, Y+17	; 0x11
    9948:	fa 89       	ldd	r31, Y+18	; 0x12
    994a:	e2 0f       	add	r30, r18
    994c:	f3 1f       	adc	r31, r19
    994e:	e9 8b       	std	Y+17, r30	; 0x11
    9950:	fa 8b       	std	Y+18, r31	; 0x12
    9952:	ff ef       	ldi	r31, 0xFF	; 255
    9954:	2f 3f       	cpi	r18, 0xFF	; 255
    9956:	3f 07       	cpc	r19, r31
    9958:	41 f0       	breq	.+16     	; 0x996a <f_printf+0x262>
    995a:	84 01       	movw	r16, r8
    995c:	e4 ce       	rjmp	.-568    	; 0x9726 <f_printf+0x1e>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    995e:	4f ef       	ldi	r20, 0xFF	; 255
    9960:	2f 3f       	cpi	r18, 0xFF	; 255
    9962:	34 07       	cpc	r19, r20
    9964:	11 f0       	breq	.+4      	; 0x996a <f_printf+0x262>
    9966:	29 89       	ldd	r18, Y+17	; 0x11
    9968:	3a 89       	ldd	r19, Y+18	; 0x12
}
    996a:	c9 01       	movw	r24, r18
    996c:	63 96       	adiw	r28, 0x13	; 19
    996e:	e2 e1       	ldi	r30, 0x12	; 18
    9970:	0c 94 67 58 	jmp	0xb0ce	; 0xb0ce <__epilogue_restores__>

00009974 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9974:	a4 e2       	ldi	r26, 0x24	; 36
    9976:	b0 e0       	ldi	r27, 0x00	; 0
    9978:	e0 ec       	ldi	r30, 0xC0	; 192
    997a:	fc e4       	ldi	r31, 0x4C	; 76
    997c:	0c 94 4e 58 	jmp	0xb09c	; 0xb09c <__prologue_saves__+0x6>
    9980:	5c 01       	movw	r10, r24
    9982:	6b a3       	std	Y+35, r22	; 0x23
    9984:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    9986:	dc 01       	movw	r26, r24
    9988:	1d 92       	st	X+, r1
    998a:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    998c:	0f e1       	ldi	r16, 0x1F	; 31
    998e:	50 2e       	mov	r5, r16
    9990:	54 22       	and	r5, r20
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    9992:	8e 01       	movw	r16, r28
    9994:	03 5f       	subi	r16, 0xF3	; 243
    9996:	1f 4f       	sbci	r17, 0xFF	; 255
    9998:	4e 71       	andi	r20, 0x1E	; 30
    999a:	ce 01       	movw	r24, r28
    999c:	83 96       	adiw	r24, 0x23	; 35
    999e:	b8 01       	movw	r22, r16
    99a0:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    99a4:	00 97       	sbiw	r24, 0x00	; 0
    99a6:	11 f0       	breq	.+4      	; 0x99ac <f_open+0x38>
    99a8:	9c 01       	movw	r18, r24
    99aa:	f6 c0       	rjmp	.+492    	; 0x9b98 <f_open+0x224>
	INITBUF(dj, sfn, lfn);
    99ac:	ce 01       	movw	r24, r28
    99ae:	01 96       	adiw	r24, 0x01	; 1
    99b0:	89 a3       	std	Y+33, r24	; 0x21
    99b2:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    99b4:	6b a1       	ldd	r22, Y+35	; 0x23
    99b6:	7c a1       	ldd	r23, Y+36	; 0x24
    99b8:	c8 01       	movw	r24, r16
    99ba:	0e 94 b5 40 	call	0x816a	; 0x816a <follow_path>
    99be:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    99c0:	45 2d       	mov	r20, r5
    99c2:	50 e0       	ldi	r21, 0x00	; 0
    99c4:	ca 01       	movw	r24, r20
    99c6:	8c 71       	andi	r24, 0x1C	; 28
    99c8:	90 70       	andi	r25, 0x00	; 0
    99ca:	89 2b       	or	r24, r25
    99cc:	09 f4       	brne	.+2      	; 0x99d0 <f_open+0x5c>
    99ce:	7e c0       	rjmp	.+252    	; 0x9acc <f_open+0x158>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    99d0:	21 15       	cp	r18, r1
    99d2:	31 05       	cpc	r19, r1
    99d4:	81 f0       	breq	.+32     	; 0x99f6 <f_open+0x82>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    99d6:	24 30       	cpi	r18, 0x04	; 4
    99d8:	31 05       	cpc	r19, r1
    99da:	09 f0       	breq	.+2      	; 0x99de <f_open+0x6a>
    99dc:	dd c0       	rjmp	.+442    	; 0x9b98 <f_open+0x224>
				res = dir_register(&dj);
    99de:	c8 01       	movw	r24, r16
    99e0:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <dir_register>
    99e4:	9c 01       	movw	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    99e6:	00 97       	sbiw	r24, 0x00	; 0
    99e8:	09 f0       	breq	.+2      	; 0x99ec <f_open+0x78>
    99ea:	d6 c0       	rjmp	.+428    	; 0x9b98 <f_open+0x224>
			mode |= FA_CREATE_ALWAYS;
    99ec:	b8 e0       	ldi	r27, 0x08	; 8
    99ee:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    99f0:	cf 8c       	ldd	r12, Y+31	; 0x1f
    99f2:	d8 a0       	ldd	r13, Y+32	; 0x20
    99f4:	57 c0       	rjmp	.+174    	; 0x9aa4 <f_open+0x130>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    99f6:	52 fe       	sbrs	r5, 2
    99f8:	03 c0       	rjmp	.+6      	; 0x9a00 <f_open+0x8c>
    99fa:	28 e0       	ldi	r18, 0x08	; 8
    99fc:	30 e0       	ldi	r19, 0x00	; 0
    99fe:	cc c0       	rjmp	.+408    	; 0x9b98 <f_open+0x224>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    9a00:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9a02:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    9a04:	c1 14       	cp	r12, r1
    9a06:	d1 04       	cpc	r13, r1
    9a08:	09 f4       	brne	.+2      	; 0x9a0c <f_open+0x98>
    9a0a:	c1 c0       	rjmp	.+386    	; 0x9b8e <f_open+0x21a>
    9a0c:	f6 01       	movw	r30, r12
    9a0e:	83 85       	ldd	r24, Z+11	; 0x0b
    9a10:	81 71       	andi	r24, 0x11	; 17
    9a12:	09 f0       	breq	.+2      	; 0x9a16 <f_open+0xa2>
    9a14:	bc c0       	rjmp	.+376    	; 0x9b8e <f_open+0x21a>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    9a16:	53 fe       	sbrs	r5, 3
    9a18:	45 c0       	rjmp	.+138    	; 0x9aa4 <f_open+0x130>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    9a1a:	84 89       	ldd	r24, Z+20	; 0x14
    9a1c:	95 89       	ldd	r25, Z+21	; 0x15
    9a1e:	a0 e0       	ldi	r26, 0x00	; 0
    9a20:	b0 e0       	ldi	r27, 0x00	; 0
    9a22:	8c 01       	movw	r16, r24
    9a24:	ff 24       	eor	r15, r15
    9a26:	ee 24       	eor	r14, r14
    9a28:	82 8d       	ldd	r24, Z+26	; 0x1a
    9a2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    9a2c:	a0 e0       	ldi	r26, 0x00	; 0
    9a2e:	b0 e0       	ldi	r27, 0x00	; 0
    9a30:	e8 2a       	or	r14, r24
    9a32:	f9 2a       	or	r15, r25
    9a34:	0a 2b       	or	r16, r26
    9a36:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    9a38:	14 8a       	std	Z+20, r1	; 0x14
    9a3a:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    9a3c:	12 8e       	std	Z+26, r1	; 0x1a
    9a3e:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    9a40:	d6 01       	movw	r26, r12
    9a42:	5c 96       	adiw	r26, 0x1c	; 28
    9a44:	1d 92       	st	X+, r1
    9a46:	1d 92       	st	X+, r1
    9a48:	1d 92       	st	X+, r1
    9a4a:	1c 92       	st	X, r1
    9a4c:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    9a4e:	ed 85       	ldd	r30, Y+13	; 0x0d
    9a50:	fe 85       	ldd	r31, Y+14	; 0x0e
    9a52:	81 e0       	ldi	r24, 0x01	; 1
    9a54:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    9a56:	66 a4       	ldd	r6, Z+46	; 0x2e
    9a58:	77 a4       	ldd	r7, Z+47	; 0x2f
    9a5a:	80 a8       	ldd	r8, Z+48	; 0x30
    9a5c:	91 a8       	ldd	r9, Z+49	; 0x31
				if (cl) {
    9a5e:	e1 14       	cp	r14, r1
    9a60:	f1 04       	cpc	r15, r1
    9a62:	01 05       	cpc	r16, r1
    9a64:	11 05       	cpc	r17, r1
    9a66:	a1 f0       	breq	.+40     	; 0x9a90 <f_open+0x11c>
					res = remove_chain(dj.fs, cl);
    9a68:	cf 01       	movw	r24, r30
    9a6a:	b8 01       	movw	r22, r16
    9a6c:	a7 01       	movw	r20, r14
    9a6e:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <remove_chain>
    9a72:	9c 01       	movw	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    9a74:	00 97       	sbiw	r24, 0x00	; 0
    9a76:	09 f0       	breq	.+2      	; 0x9a7a <f_open+0x106>
    9a78:	8f c0       	rjmp	.+286    	; 0x9b98 <f_open+0x224>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9a7a:	ed 85       	ldd	r30, Y+13	; 0x0d
    9a7c:	fe 85       	ldd	r31, Y+14	; 0x0e
    9a7e:	08 94       	sec
    9a80:	e1 08       	sbc	r14, r1
    9a82:	f1 08       	sbc	r15, r1
    9a84:	01 09       	sbc	r16, r1
    9a86:	11 09       	sbc	r17, r1
    9a88:	e2 86       	std	Z+10, r14	; 0x0a
    9a8a:	f3 86       	std	Z+11, r15	; 0x0b
    9a8c:	04 87       	std	Z+12, r16	; 0x0c
    9a8e:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    9a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    9a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    9a94:	b4 01       	movw	r22, r8
    9a96:	a3 01       	movw	r20, r6
    9a98:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    9a9c:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9a9e:	00 97       	sbiw	r24, 0x00	; 0
    9aa0:	09 f0       	breq	.+2      	; 0x9aa4 <f_open+0x130>
    9aa2:	7a c0       	rjmp	.+244    	; 0x9b98 <f_open+0x224>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    9aa4:	53 fe       	sbrs	r5, 3
    9aa6:	24 c0       	rjmp	.+72     	; 0x9af0 <f_open+0x17c>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9aa8:	f6 01       	movw	r30, r12
    9aaa:	13 86       	std	Z+11, r1	; 0x0b
			ps = get_fattime();
    9aac:	0e 94 22 55 	call	0xaa44	; 0xaa44 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    9ab0:	d6 01       	movw	r26, r12
    9ab2:	1e 96       	adiw	r26, 0x0e	; 14
    9ab4:	6d 93       	st	X+, r22
    9ab6:	7d 93       	st	X+, r23
    9ab8:	8d 93       	st	X+, r24
    9aba:	9c 93       	st	X, r25
    9abc:	51 97       	sbiw	r26, 0x11	; 17
			dj.fs->wflag = 1;
    9abe:	ed 85       	ldd	r30, Y+13	; 0x0d
    9ac0:	fe 85       	ldd	r31, Y+14	; 0x0e
    9ac2:	81 e0       	ldi	r24, 0x01	; 1
    9ac4:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    9ac6:	b0 e2       	ldi	r27, 0x20	; 32
    9ac8:	5b 2a       	or	r5, r27
    9aca:	12 c0       	rjmp	.+36     	; 0x9af0 <f_open+0x17c>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    9acc:	21 15       	cp	r18, r1
    9ace:	31 05       	cpc	r19, r1
    9ad0:	09 f0       	breq	.+2      	; 0x9ad4 <f_open+0x160>
    9ad2:	62 c0       	rjmp	.+196    	; 0x9b98 <f_open+0x224>
		dir = dj.dir;
    9ad4:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9ad6:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    9ad8:	c1 14       	cp	r12, r1
    9ada:	d1 04       	cpc	r13, r1
    9adc:	09 f4       	brne	.+2      	; 0x9ae0 <f_open+0x16c>
    9ade:	5a c0       	rjmp	.+180    	; 0x9b94 <f_open+0x220>
    9ae0:	f6 01       	movw	r30, r12
    9ae2:	83 85       	ldd	r24, Z+11	; 0x0b
    9ae4:	84 fd       	sbrc	r24, 4
    9ae6:	56 c0       	rjmp	.+172    	; 0x9b94 <f_open+0x220>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9ae8:	51 fe       	sbrs	r5, 1
    9aea:	02 c0       	rjmp	.+4      	; 0x9af0 <f_open+0x17c>
    9aec:	80 fd       	sbrc	r24, 0
    9aee:	4f c0       	rjmp	.+158    	; 0x9b8e <f_open+0x21a>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    9af0:	6d 85       	ldd	r22, Y+13	; 0x0d
    9af2:	7e 85       	ldd	r23, Y+14	; 0x0e
    9af4:	db 01       	movw	r26, r22
    9af6:	9e 96       	adiw	r26, 0x2e	; 46
    9af8:	2d 91       	ld	r18, X+
    9afa:	3d 91       	ld	r19, X+
    9afc:	4d 91       	ld	r20, X+
    9afe:	5c 91       	ld	r21, X
    9b00:	d1 97       	sbiw	r26, 0x31	; 49
    9b02:	f5 01       	movw	r30, r10
    9b04:	22 8f       	std	Z+26, r18	; 0x1a
    9b06:	33 8f       	std	Z+27, r19	; 0x1b
    9b08:	44 8f       	std	Z+28, r20	; 0x1c
    9b0a:	55 8f       	std	Z+29, r21	; 0x1d
	fp->dir_ptr = dj.dir;
    9b0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9b0e:	98 a1       	ldd	r25, Y+32	; 0x20
    9b10:	86 8f       	std	Z+30, r24	; 0x1e
    9b12:	97 8f       	std	Z+31, r25	; 0x1f
#endif
	fp->flag = mode;					/* File access mode */
    9b14:	54 82       	std	Z+4, r5	; 0x04
	fp->org_clust =						/* File start cluster */
    9b16:	d6 01       	movw	r26, r12
    9b18:	54 96       	adiw	r26, 0x14	; 20
    9b1a:	8d 91       	ld	r24, X+
    9b1c:	9c 91       	ld	r25, X
    9b1e:	55 97       	sbiw	r26, 0x15	; 21
    9b20:	a0 e0       	ldi	r26, 0x00	; 0
    9b22:	b0 e0       	ldi	r27, 0x00	; 0
    9b24:	dc 01       	movw	r26, r24
    9b26:	99 27       	eor	r25, r25
    9b28:	88 27       	eor	r24, r24
    9b2a:	f6 01       	movw	r30, r12
    9b2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    9b2e:	33 8d       	ldd	r19, Z+27	; 0x1b
    9b30:	40 e0       	ldi	r20, 0x00	; 0
    9b32:	50 e0       	ldi	r21, 0x00	; 0
    9b34:	82 2b       	or	r24, r18
    9b36:	93 2b       	or	r25, r19
    9b38:	a4 2b       	or	r26, r20
    9b3a:	b5 2b       	or	r27, r21
    9b3c:	f5 01       	movw	r30, r10
    9b3e:	86 87       	std	Z+14, r24	; 0x0e
    9b40:	97 87       	std	Z+15, r25	; 0x0f
    9b42:	a0 8b       	std	Z+16, r26	; 0x10
    9b44:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9b46:	f6 01       	movw	r30, r12
    9b48:	84 8d       	ldd	r24, Z+28	; 0x1c
    9b4a:	95 8d       	ldd	r25, Z+29	; 0x1d
    9b4c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    9b4e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9b50:	f5 01       	movw	r30, r10
    9b52:	82 87       	std	Z+10, r24	; 0x0a
    9b54:	93 87       	std	Z+11, r25	; 0x0b
    9b56:	a4 87       	std	Z+12, r26	; 0x0c
    9b58:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    9b5a:	d5 01       	movw	r26, r10
    9b5c:	16 96       	adiw	r26, 0x06	; 6
    9b5e:	1d 92       	st	X+, r1
    9b60:	1d 92       	st	X+, r1
    9b62:	1d 92       	st	X+, r1
    9b64:	1c 92       	st	X, r1
    9b66:	19 97       	sbiw	r26, 0x09	; 9
    9b68:	8f ef       	ldi	r24, 0xFF	; 255
    9b6a:	15 96       	adiw	r26, 0x05	; 5
    9b6c:	8c 93       	st	X, r24
	fp->dsect = 0;
    9b6e:	16 8a       	std	Z+22, r1	; 0x16
    9b70:	17 8a       	std	Z+23, r1	; 0x17
    9b72:	10 8e       	std	Z+24, r1	; 0x18
    9b74:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    9b76:	60 83       	st	Z, r22
    9b78:	71 83       	std	Z+1, r23	; 0x01
    9b7a:	db 01       	movw	r26, r22
    9b7c:	15 96       	adiw	r26, 0x05	; 5
    9b7e:	8d 91       	ld	r24, X+
    9b80:	9c 91       	ld	r25, X
    9b82:	16 97       	sbiw	r26, 0x06	; 6
    9b84:	82 83       	std	Z+2, r24	; 0x02
    9b86:	93 83       	std	Z+3, r25	; 0x03
    9b88:	20 e0       	ldi	r18, 0x00	; 0
    9b8a:	30 e0       	ldi	r19, 0x00	; 0
    9b8c:	05 c0       	rjmp	.+10     	; 0x9b98 <f_open+0x224>

	LEAVE_FF(dj.fs, FR_OK);
    9b8e:	27 e0       	ldi	r18, 0x07	; 7
    9b90:	30 e0       	ldi	r19, 0x00	; 0
    9b92:	02 c0       	rjmp	.+4      	; 0x9b98 <f_open+0x224>
    9b94:	24 e0       	ldi	r18, 0x04	; 4
    9b96:	30 e0       	ldi	r19, 0x00	; 0
}
    9b98:	c9 01       	movw	r24, r18
    9b9a:	a4 96       	adiw	r28, 0x24	; 36
    9b9c:	ef e0       	ldi	r30, 0x0F	; 15
    9b9e:	0c 94 6a 58 	jmp	0xb0d4	; 0xb0d4 <__epilogue_restores__+0x6>

00009ba2 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9ba2:	a4 e0       	ldi	r26, 0x04	; 4
    9ba4:	b0 e0       	ldi	r27, 0x00	; 0
    9ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    9ba8:	fd e4       	ldi	r31, 0x4D	; 77
    9baa:	0c 94 4c 58 	jmp	0xb098	; 0xb098 <__prologue_saves__+0x2>
    9bae:	8b 83       	std	Y+3, r24	; 0x03
    9bb0:	9c 83       	std	Y+4, r25	; 0x04
    9bb2:	16 2f       	mov	r17, r22
    9bb4:	07 2f       	mov	r16, r23
    9bb6:	3a 01       	movw	r6, r20
    9bb8:	29 83       	std	Y+1, r18	; 0x01
    9bba:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    9bbc:	d9 01       	movw	r26, r18
    9bbe:	1d 92       	st	X+, r1
    9bc0:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    9bc2:	fc 01       	movw	r30, r24
    9bc4:	62 81       	ldd	r22, Z+2	; 0x02
    9bc6:	73 81       	ldd	r23, Z+3	; 0x03
    9bc8:	80 81       	ld	r24, Z
    9bca:	91 81       	ldd	r25, Z+1	; 0x01
    9bcc:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <validate>
    9bd0:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9bd2:	00 97       	sbiw	r24, 0x00	; 0
    9bd4:	09 f0       	breq	.+2      	; 0x9bd8 <f_read+0x36>
    9bd6:	8a c1       	rjmp	.+788    	; 0x9eec <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    9bd8:	ab 81       	ldd	r26, Y+3	; 0x03
    9bda:	bc 81       	ldd	r27, Y+4	; 0x04
    9bdc:	14 96       	adiw	r26, 0x04	; 4
    9bde:	8c 91       	ld	r24, X
    9be0:	87 fd       	sbrc	r24, 7
    9be2:	60 c0       	rjmp	.+192    	; 0x9ca4 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    9be4:	80 fd       	sbrc	r24, 0
    9be6:	04 c0       	rjmp	.+8      	; 0x9bf0 <f_read+0x4e>
    9be8:	97 e0       	ldi	r25, 0x07	; 7
    9bea:	89 2e       	mov	r8, r25
    9bec:	91 2c       	mov	r9, r1
    9bee:	7e c1       	rjmp	.+764    	; 0x9eec <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    9bf0:	eb 81       	ldd	r30, Y+3	; 0x03
    9bf2:	fc 81       	ldd	r31, Y+4	; 0x04
    9bf4:	22 85       	ldd	r18, Z+10	; 0x0a
    9bf6:	33 85       	ldd	r19, Z+11	; 0x0b
    9bf8:	44 85       	ldd	r20, Z+12	; 0x0c
    9bfa:	55 85       	ldd	r21, Z+13	; 0x0d
    9bfc:	86 81       	ldd	r24, Z+6	; 0x06
    9bfe:	97 81       	ldd	r25, Z+7	; 0x07
    9c00:	a0 85       	ldd	r26, Z+8	; 0x08
    9c02:	b1 85       	ldd	r27, Z+9	; 0x09
    9c04:	28 1b       	sub	r18, r24
    9c06:	39 0b       	sbc	r19, r25
    9c08:	4a 0b       	sbc	r20, r26
    9c0a:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    9c0c:	c3 01       	movw	r24, r6
    9c0e:	a0 e0       	ldi	r26, 0x00	; 0
    9c10:	b0 e0       	ldi	r27, 0x00	; 0
    9c12:	28 17       	cp	r18, r24
    9c14:	39 07       	cpc	r19, r25
    9c16:	4a 07       	cpc	r20, r26
    9c18:	5b 07       	cpc	r21, r27
    9c1a:	08 f4       	brcc	.+2      	; 0x9c1e <f_read+0x7c>
    9c1c:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    9c1e:	81 2f       	mov	r24, r17
    9c20:	90 2f       	mov	r25, r16
    9c22:	9c 01       	movw	r18, r24
    9c24:	29 01       	movw	r4, r18
    9c26:	5e c1       	rjmp	.+700    	; 0x9ee4 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9c28:	ab 81       	ldd	r26, Y+3	; 0x03
    9c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    9c2c:	16 96       	adiw	r26, 0x06	; 6
    9c2e:	2d 91       	ld	r18, X+
    9c30:	3d 91       	ld	r19, X+
    9c32:	4d 91       	ld	r20, X+
    9c34:	5c 91       	ld	r21, X
    9c36:	19 97       	sbiw	r26, 0x09	; 9
    9c38:	da 01       	movw	r26, r20
    9c3a:	c9 01       	movw	r24, r18
    9c3c:	91 70       	andi	r25, 0x01	; 1
    9c3e:	a0 70       	andi	r26, 0x00	; 0
    9c40:	b0 70       	andi	r27, 0x00	; 0
    9c42:	00 97       	sbiw	r24, 0x00	; 0
    9c44:	a1 05       	cpc	r26, r1
    9c46:	b1 05       	cpc	r27, r1
    9c48:	09 f0       	breq	.+2      	; 0x9c4c <f_read+0xaa>
    9c4a:	ef c0       	rjmp	.+478    	; 0x9e2a <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9c4c:	ab 81       	ldd	r26, Y+3	; 0x03
    9c4e:	bc 81       	ldd	r27, Y+4	; 0x04
    9c50:	ed 91       	ld	r30, X+
    9c52:	fc 91       	ld	r31, X
    9c54:	11 97       	sbiw	r26, 0x01	; 1
    9c56:	15 96       	adiw	r26, 0x05	; 5
    9c58:	9c 91       	ld	r25, X
    9c5a:	15 97       	sbiw	r26, 0x05	; 5
    9c5c:	82 81       	ldd	r24, Z+2	; 0x02
    9c5e:	98 17       	cp	r25, r24
    9c60:	e8 f1       	brcs	.+122    	; 0x9cdc <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    9c62:	21 15       	cp	r18, r1
    9c64:	31 05       	cpc	r19, r1
    9c66:	41 05       	cpc	r20, r1
    9c68:	51 05       	cpc	r21, r1
    9c6a:	39 f4       	brne	.+14     	; 0x9c7a <f_read+0xd8>
    9c6c:	1e 96       	adiw	r26, 0x0e	; 14
    9c6e:	6d 91       	ld	r22, X+
    9c70:	7d 91       	ld	r23, X+
    9c72:	8d 91       	ld	r24, X+
    9c74:	9c 91       	ld	r25, X
    9c76:	51 97       	sbiw	r26, 0x11	; 17
    9c78:	0b c0       	rjmp	.+22     	; 0x9c90 <f_read+0xee>
    9c7a:	ab 81       	ldd	r26, Y+3	; 0x03
    9c7c:	bc 81       	ldd	r27, Y+4	; 0x04
    9c7e:	52 96       	adiw	r26, 0x12	; 18
    9c80:	4d 91       	ld	r20, X+
    9c82:	5d 91       	ld	r21, X+
    9c84:	6d 91       	ld	r22, X+
    9c86:	7c 91       	ld	r23, X
    9c88:	55 97       	sbiw	r26, 0x15	; 21
    9c8a:	cf 01       	movw	r24, r30
    9c8c:	0e 94 1d 39 	call	0x723a	; 0x723a <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    9c90:	62 30       	cpi	r22, 0x02	; 2
    9c92:	71 05       	cpc	r23, r1
    9c94:	81 05       	cpc	r24, r1
    9c96:	91 05       	cpc	r25, r1
    9c98:	48 f4       	brcc	.+18     	; 0x9cac <f_read+0x10a>
    9c9a:	eb 81       	ldd	r30, Y+3	; 0x03
    9c9c:	fc 81       	ldd	r31, Y+4	; 0x04
    9c9e:	84 81       	ldd	r24, Z+4	; 0x04
    9ca0:	80 68       	ori	r24, 0x80	; 128
    9ca2:	84 83       	std	Z+4, r24	; 0x04
    9ca4:	82 e0       	ldi	r24, 0x02	; 2
    9ca6:	88 2e       	mov	r8, r24
    9ca8:	91 2c       	mov	r9, r1
    9caa:	20 c1       	rjmp	.+576    	; 0x9eec <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9cac:	6f 3f       	cpi	r22, 0xFF	; 255
    9cae:	ff ef       	ldi	r31, 0xFF	; 255
    9cb0:	7f 07       	cpc	r23, r31
    9cb2:	ff ef       	ldi	r31, 0xFF	; 255
    9cb4:	8f 07       	cpc	r24, r31
    9cb6:	ff ef       	ldi	r31, 0xFF	; 255
    9cb8:	9f 07       	cpc	r25, r31
    9cba:	49 f4       	brne	.+18     	; 0x9cce <f_read+0x12c>
    9cbc:	ab 81       	ldd	r26, Y+3	; 0x03
    9cbe:	bc 81       	ldd	r27, Y+4	; 0x04
    9cc0:	14 96       	adiw	r26, 0x04	; 4
    9cc2:	8c 91       	ld	r24, X
    9cc4:	14 97       	sbiw	r26, 0x04	; 4
    9cc6:	80 68       	ori	r24, 0x80	; 128
    9cc8:	14 96       	adiw	r26, 0x04	; 4
    9cca:	8c 93       	st	X, r24
    9ccc:	c7 c0       	rjmp	.+398    	; 0x9e5c <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    9cce:	eb 81       	ldd	r30, Y+3	; 0x03
    9cd0:	fc 81       	ldd	r31, Y+4	; 0x04
    9cd2:	62 8b       	std	Z+18, r22	; 0x12
    9cd4:	73 8b       	std	Z+19, r23	; 0x13
    9cd6:	84 8b       	std	Z+20, r24	; 0x14
    9cd8:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    9cda:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9cdc:	ab 81       	ldd	r26, Y+3	; 0x03
    9cde:	bc 81       	ldd	r27, Y+4	; 0x04
    9ce0:	0d 91       	ld	r16, X+
    9ce2:	1c 91       	ld	r17, X
    9ce4:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9ce6:	52 96       	adiw	r26, 0x12	; 18
    9ce8:	2d 91       	ld	r18, X+
    9cea:	3d 91       	ld	r19, X+
    9cec:	4d 91       	ld	r20, X+
    9cee:	5c 91       	ld	r21, X
    9cf0:	55 97       	sbiw	r26, 0x15	; 21
    9cf2:	22 50       	subi	r18, 0x02	; 2
    9cf4:	30 40       	sbci	r19, 0x00	; 0
    9cf6:	40 40       	sbci	r20, 0x00	; 0
    9cf8:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9cfa:	f8 01       	movw	r30, r16
    9cfc:	86 8d       	ldd	r24, Z+30	; 0x1e
    9cfe:	97 8d       	ldd	r25, Z+31	; 0x1f
    9d00:	a0 a1       	ldd	r26, Z+32	; 0x20
    9d02:	b1 a1       	ldd	r27, Z+33	; 0x21
    9d04:	02 97       	sbiw	r24, 0x02	; 2
    9d06:	a1 09       	sbc	r26, r1
    9d08:	b1 09       	sbc	r27, r1
    9d0a:	28 17       	cp	r18, r24
    9d0c:	39 07       	cpc	r19, r25
    9d0e:	4a 07       	cpc	r20, r26
    9d10:	5b 07       	cpc	r21, r27
    9d12:	b8 f4       	brcc	.+46     	; 0x9d42 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    9d14:	32 80       	ldd	r3, Z+2	; 0x02
    9d16:	63 2d       	mov	r22, r3
    9d18:	70 e0       	ldi	r23, 0x00	; 0
    9d1a:	80 e0       	ldi	r24, 0x00	; 0
    9d1c:	90 e0       	ldi	r25, 0x00	; 0
    9d1e:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    9d22:	9b 01       	movw	r18, r22
    9d24:	ac 01       	movw	r20, r24
    9d26:	f8 01       	movw	r30, r16
    9d28:	82 a5       	ldd	r24, Z+42	; 0x2a
    9d2a:	93 a5       	ldd	r25, Z+43	; 0x2b
    9d2c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9d2e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9d30:	28 0f       	add	r18, r24
    9d32:	39 1f       	adc	r19, r25
    9d34:	4a 1f       	adc	r20, r26
    9d36:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9d38:	21 15       	cp	r18, r1
    9d3a:	31 05       	cpc	r19, r1
    9d3c:	41 05       	cpc	r20, r1
    9d3e:	51 05       	cpc	r21, r1
    9d40:	49 f4       	brne	.+18     	; 0x9d54 <f_read+0x1b2>
    9d42:	ab 81       	ldd	r26, Y+3	; 0x03
    9d44:	bc 81       	ldd	r27, Y+4	; 0x04
    9d46:	14 96       	adiw	r26, 0x04	; 4
    9d48:	8c 91       	ld	r24, X
    9d4a:	14 97       	sbiw	r26, 0x04	; 4
    9d4c:	80 68       	ori	r24, 0x80	; 128
    9d4e:	14 96       	adiw	r26, 0x04	; 4
    9d50:	8c 93       	st	X, r24
    9d52:	a8 cf       	rjmp	.-176    	; 0x9ca4 <f_read+0x102>
			sect += fp->csect;
    9d54:	eb 81       	ldd	r30, Y+3	; 0x03
    9d56:	fc 81       	ldd	r31, Y+4	; 0x04
    9d58:	85 81       	ldd	r24, Z+5	; 0x05
    9d5a:	69 01       	movw	r12, r18
    9d5c:	7a 01       	movw	r14, r20
    9d5e:	c8 0e       	add	r12, r24
    9d60:	d1 1c       	adc	r13, r1
    9d62:	e1 1c       	adc	r14, r1
    9d64:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9d66:	53 01       	movw	r10, r6
    9d68:	ab 2c       	mov	r10, r11
    9d6a:	bb 24       	eor	r11, r11
    9d6c:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    9d6e:	a1 14       	cp	r10, r1
    9d70:	b1 04       	cpc	r11, r1
    9d72:	09 f4       	brne	.+2      	; 0x9d76 <f_read+0x1d4>
    9d74:	52 c0       	rjmp	.+164    	; 0x9e1a <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9d76:	28 2f       	mov	r18, r24
    9d78:	30 e0       	ldi	r19, 0x00	; 0
    9d7a:	c5 01       	movw	r24, r10
    9d7c:	82 0f       	add	r24, r18
    9d7e:	93 1f       	adc	r25, r19
    9d80:	63 2d       	mov	r22, r3
    9d82:	70 e0       	ldi	r23, 0x00	; 0
    9d84:	68 17       	cp	r22, r24
    9d86:	79 07       	cpc	r23, r25
    9d88:	18 f4       	brcc	.+6      	; 0x9d90 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    9d8a:	5b 01       	movw	r10, r22
    9d8c:	a2 1a       	sub	r10, r18
    9d8e:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    9d90:	d8 01       	movw	r26, r16
    9d92:	11 96       	adiw	r26, 0x01	; 1
    9d94:	8c 91       	ld	r24, X
    9d96:	b2 01       	movw	r22, r4
    9d98:	a7 01       	movw	r20, r14
    9d9a:	96 01       	movw	r18, r12
    9d9c:	0a 2d       	mov	r16, r10
    9d9e:	0e 94 35 51 	call	0xa26a	; 0xa26a <disk_read>
    9da2:	89 2b       	or	r24, r25
    9da4:	09 f0       	breq	.+2      	; 0x9da8 <f_read+0x206>
    9da6:	55 c0       	rjmp	.+170    	; 0x9e52 <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    9da8:	ab 81       	ldd	r26, Y+3	; 0x03
    9daa:	bc 81       	ldd	r27, Y+4	; 0x04
    9dac:	6d 91       	ld	r22, X+
    9dae:	7c 91       	ld	r23, X
    9db0:	fb 01       	movw	r30, r22
    9db2:	84 81       	ldd	r24, Z+4	; 0x04
    9db4:	88 23       	and	r24, r24
    9db6:	21 f1       	breq	.+72     	; 0x9e00 <f_read+0x25e>
    9db8:	26 a5       	ldd	r18, Z+46	; 0x2e
    9dba:	37 a5       	ldd	r19, Z+47	; 0x2f
    9dbc:	40 a9       	ldd	r20, Z+48	; 0x30
    9dbe:	51 a9       	ldd	r21, Z+49	; 0x31
    9dc0:	2c 19       	sub	r18, r12
    9dc2:	3d 09       	sbc	r19, r13
    9dc4:	4e 09       	sbc	r20, r14
    9dc6:	5f 09       	sbc	r21, r15
    9dc8:	c5 01       	movw	r24, r10
    9dca:	a0 e0       	ldi	r26, 0x00	; 0
    9dcc:	b0 e0       	ldi	r27, 0x00	; 0
    9dce:	28 17       	cp	r18, r24
    9dd0:	39 07       	cpc	r19, r25
    9dd2:	4a 07       	cpc	r20, r26
    9dd4:	5b 07       	cpc	r21, r27
    9dd6:	a0 f4       	brcc	.+40     	; 0x9e00 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9dd8:	a9 e0       	ldi	r26, 0x09	; 9
    9dda:	22 0f       	add	r18, r18
    9ddc:	33 1f       	adc	r19, r19
    9dde:	44 1f       	adc	r20, r20
    9de0:	55 1f       	adc	r21, r21
    9de2:	aa 95       	dec	r26
    9de4:	d1 f7       	brne	.-12     	; 0x9dda <f_read+0x238>
    9de6:	d2 01       	movw	r26, r4
    9de8:	a2 0f       	add	r26, r18
    9dea:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    9dec:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    9dee:	9b 01       	movw	r18, r22
    9df0:	2e 5c       	subi	r18, 0xCE	; 206
    9df2:	3d 4f       	sbci	r19, 0xFD	; 253
    9df4:	02 c0       	rjmp	.+4      	; 0x9dfa <f_read+0x258>
    9df6:	81 91       	ld	r24, Z+
    9df8:	8d 93       	st	X+, r24
    9dfa:	e2 17       	cp	r30, r18
    9dfc:	f3 07       	cpc	r31, r19
    9dfe:	d9 f7       	brne	.-10     	; 0x9df6 <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9e00:	ab 81       	ldd	r26, Y+3	; 0x03
    9e02:	bc 81       	ldd	r27, Y+4	; 0x04
    9e04:	15 96       	adiw	r26, 0x05	; 5
    9e06:	8c 91       	ld	r24, X
    9e08:	15 97       	sbiw	r26, 0x05	; 5
    9e0a:	8a 0d       	add	r24, r10
    9e0c:	15 96       	adiw	r26, 0x05	; 5
    9e0e:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9e10:	b5 01       	movw	r22, r10
    9e12:	76 2f       	mov	r23, r22
    9e14:	66 27       	eor	r22, r22
    9e16:	77 0f       	add	r23, r23
    9e18:	48 c0       	rjmp	.+144    	; 0x9eaa <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    9e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    9e1e:	c6 8a       	std	Z+22, r12	; 0x16
    9e20:	d7 8a       	std	Z+23, r13	; 0x17
    9e22:	e0 8e       	std	Z+24, r14	; 0x18
    9e24:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9e26:	8f 5f       	subi	r24, 0xFF	; 255
    9e28:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9e2a:	ab 81       	ldd	r26, Y+3	; 0x03
    9e2c:	bc 81       	ldd	r27, Y+4	; 0x04
    9e2e:	16 96       	adiw	r26, 0x06	; 6
    9e30:	cd 90       	ld	r12, X+
    9e32:	dd 90       	ld	r13, X+
    9e34:	ed 90       	ld	r14, X+
    9e36:	fc 90       	ld	r15, X
    9e38:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9e3a:	56 96       	adiw	r26, 0x16	; 22
    9e3c:	4d 91       	ld	r20, X+
    9e3e:	5d 91       	ld	r21, X+
    9e40:	6d 91       	ld	r22, X+
    9e42:	7c 91       	ld	r23, X
    9e44:	59 97       	sbiw	r26, 0x19	; 25
    9e46:	8d 91       	ld	r24, X+
    9e48:	9c 91       	ld	r25, X
    9e4a:	0e 94 b3 38 	call	0x7166	; 0x7166 <move_window>
    9e4e:	89 2b       	or	r24, r25
    9e50:	49 f0       	breq	.+18     	; 0x9e64 <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    9e52:	eb 81       	ldd	r30, Y+3	; 0x03
    9e54:	fc 81       	ldd	r31, Y+4	; 0x04
    9e56:	84 81       	ldd	r24, Z+4	; 0x04
    9e58:	80 68       	ori	r24, 0x80	; 128
    9e5a:	84 83       	std	Z+4, r24	; 0x04
    9e5c:	81 e0       	ldi	r24, 0x01	; 1
    9e5e:	88 2e       	mov	r8, r24
    9e60:	91 2c       	mov	r9, r1
    9e62:	44 c0       	rjmp	.+136    	; 0x9eec <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9e64:	c6 01       	movw	r24, r12
    9e66:	91 70       	andi	r25, 0x01	; 1
    9e68:	20 e0       	ldi	r18, 0x00	; 0
    9e6a:	32 e0       	ldi	r19, 0x02	; 2
    9e6c:	28 1b       	sub	r18, r24
    9e6e:	39 0b       	sbc	r19, r25
    9e70:	b3 01       	movw	r22, r6
    9e72:	26 15       	cp	r18, r6
    9e74:	37 05       	cpc	r19, r7
    9e76:	08 f4       	brcc	.+2      	; 0x9e7a <f_read+0x2d8>
    9e78:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9e7a:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    9e7c:	ab 81       	ldd	r26, Y+3	; 0x03
    9e7e:	bc 81       	ldd	r27, Y+4	; 0x04
    9e80:	16 96       	adiw	r26, 0x06	; 6
    9e82:	8d 91       	ld	r24, X+
    9e84:	9c 91       	ld	r25, X
    9e86:	17 97       	sbiw	r26, 0x07	; 7
    9e88:	91 70       	andi	r25, 0x01	; 1
    9e8a:	c2 96       	adiw	r24, 0x32	; 50
    9e8c:	ed 91       	ld	r30, X+
    9e8e:	fc 91       	ld	r31, X
    9e90:	e8 0f       	add	r30, r24
    9e92:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    9e94:	9f 01       	movw	r18, r30
    9e96:	26 0f       	add	r18, r22
    9e98:	37 1f       	adc	r19, r23
    9e9a:	04 c0       	rjmp	.+8      	; 0x9ea4 <f_read+0x302>
    9e9c:	81 91       	ld	r24, Z+
    9e9e:	da 01       	movw	r26, r20
    9ea0:	8d 93       	st	X+, r24
    9ea2:	ad 01       	movw	r20, r26
    9ea4:	e2 17       	cp	r30, r18
    9ea6:	f3 07       	cpc	r31, r19
    9ea8:	c9 f7       	brne	.-14     	; 0x9e9c <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    9eaa:	46 0e       	add	r4, r22
    9eac:	57 1e       	adc	r5, r23
    9eae:	cb 01       	movw	r24, r22
    9eb0:	a0 e0       	ldi	r26, 0x00	; 0
    9eb2:	b0 e0       	ldi	r27, 0x00	; 0
    9eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    9eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    9eb8:	26 81       	ldd	r18, Z+6	; 0x06
    9eba:	37 81       	ldd	r19, Z+7	; 0x07
    9ebc:	40 85       	ldd	r20, Z+8	; 0x08
    9ebe:	51 85       	ldd	r21, Z+9	; 0x09
    9ec0:	28 0f       	add	r18, r24
    9ec2:	39 1f       	adc	r19, r25
    9ec4:	4a 1f       	adc	r20, r26
    9ec6:	5b 1f       	adc	r21, r27
    9ec8:	26 83       	std	Z+6, r18	; 0x06
    9eca:	37 83       	std	Z+7, r19	; 0x07
    9ecc:	40 87       	std	Z+8, r20	; 0x08
    9ece:	51 87       	std	Z+9, r21	; 0x09
    9ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    9ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    9ed4:	80 81       	ld	r24, Z
    9ed6:	91 81       	ldd	r25, Z+1	; 0x01
    9ed8:	86 0f       	add	r24, r22
    9eda:	97 1f       	adc	r25, r23
    9edc:	80 83       	st	Z, r24
    9ede:	91 83       	std	Z+1, r25	; 0x01
    9ee0:	66 1a       	sub	r6, r22
    9ee2:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    9ee4:	61 14       	cp	r6, r1
    9ee6:	71 04       	cpc	r7, r1
    9ee8:	09 f0       	breq	.+2      	; 0x9eec <f_read+0x34a>
    9eea:	9e ce       	rjmp	.-708    	; 0x9c28 <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    9eec:	c4 01       	movw	r24, r8
    9eee:	24 96       	adiw	r28, 0x04	; 4
    9ef0:	e1 e1       	ldi	r30, 0x11	; 17
    9ef2:	0c 94 68 58 	jmp	0xb0d0	; 0xb0d0 <__epilogue_restores__+0x2>

00009ef6 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    9ef6:	a2 e0       	ldi	r26, 0x02	; 2
    9ef8:	b0 e0       	ldi	r27, 0x00	; 0
    9efa:	e1 e8       	ldi	r30, 0x81	; 129
    9efc:	ff e4       	ldi	r31, 0x4F	; 79
    9efe:	0c 94 4f 58 	jmp	0xb09e	; 0xb09e <__prologue_saves__+0x8>
    9f02:	6c 01       	movw	r12, r24
    9f04:	5b 01       	movw	r10, r22
    9f06:	4a 01       	movw	r8, r20
    9f08:	8c 01       	movw	r16, r24
    9f0a:	ee 24       	eor	r14, r14
    9f0c:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    9f0e:	08 94       	sec
    9f10:	a1 08       	sbc	r10, r1
    9f12:	b1 08       	sbc	r11, r1
		f_read(fil, p, 1, &rc);
    9f14:	3e 01       	movw	r6, r28
    9f16:	08 94       	sec
    9f18:	61 1c       	adc	r6, r1
    9f1a:	71 1c       	adc	r7, r1
    9f1c:	16 c0       	rjmp	.+44     	; 0x9f4a <f_gets+0x54>
    9f1e:	c4 01       	movw	r24, r8
    9f20:	b8 01       	movw	r22, r16
    9f22:	41 e0       	ldi	r20, 0x01	; 1
    9f24:	50 e0       	ldi	r21, 0x00	; 0
    9f26:	93 01       	movw	r18, r6
    9f28:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    9f2c:	89 81       	ldd	r24, Y+1	; 0x01
    9f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    9f30:	01 97       	sbiw	r24, 0x01	; 1
    9f32:	71 f4       	brne	.+28     	; 0x9f50 <f_gets+0x5a>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
    9f34:	f8 01       	movw	r30, r16
    9f36:	80 81       	ld	r24, Z
    9f38:	8d 30       	cpi	r24, 0x0D	; 13
    9f3a:	39 f0       	breq	.+14     	; 0x9f4a <f_gets+0x54>
#endif
		i++;
    9f3c:	08 94       	sec
    9f3e:	e1 1c       	adc	r14, r1
    9f40:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    9f42:	0f 5f       	subi	r16, 0xFF	; 255
    9f44:	1f 4f       	sbci	r17, 0xFF	; 255
    9f46:	8a 30       	cpi	r24, 0x0A	; 10
    9f48:	19 f0       	breq	.+6      	; 0x9f50 <f_gets+0x5a>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    9f4a:	ea 14       	cp	r14, r10
    9f4c:	fb 04       	cpc	r15, r11
    9f4e:	3c f3       	brlt	.-50     	; 0x9f1e <f_gets+0x28>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    9f50:	f8 01       	movw	r30, r16
    9f52:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    9f54:	e1 14       	cp	r14, r1
    9f56:	f1 04       	cpc	r15, r1
    9f58:	11 f4       	brne	.+4      	; 0x9f5e <f_gets+0x68>
    9f5a:	cc 24       	eor	r12, r12
    9f5c:	dd 24       	eor	r13, r13
}
    9f5e:	c6 01       	movw	r24, r12
    9f60:	22 96       	adiw	r28, 0x02	; 2
    9f62:	ee e0       	ldi	r30, 0x0E	; 14
    9f64:	0c 94 6b 58 	jmp	0xb0d6	; 0xb0d6 <__epilogue_restores__+0x8>

00009f68 <wait_ready>:
BYTE wait_ready (void)
{
  BYTE res;


  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
    9f68:	82 e3       	ldi	r24, 0x32	; 50
    9f6a:	80 93 6e 25 	sts	0x256E, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9f6e:	8f ef       	ldi	r24, 0xFF	; 255
    9f70:	e0 ec       	ldi	r30, 0xC0	; 192
    9f72:	fa e0       	ldi	r31, 0x0A	; 10
    9f74:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9f76:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f7a:	87 ff       	sbrs	r24, 7
    9f7c:	fc cf       	rjmp	.-8      	; 0x9f76 <wait_ready+0xe>
  return SPIE.DATA;
    9f7e:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9f82:	e0 ec       	ldi	r30, 0xC0	; 192
    9f84:	fa e0       	ldi	r31, 0x0A	; 10
    9f86:	2f ef       	ldi	r18, 0xFF	; 255
    9f88:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9f8a:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f8e:	87 ff       	sbrs	r24, 7
    9f90:	fc cf       	rjmp	.-8      	; 0x9f8a <wait_ready+0x22>
  return SPIE.DATA;
    9f92:	90 91 c3 0a 	lds	r25, 0x0AC3

  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
  rcvr_spi();
  do
    res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
    9f96:	9f 3f       	cpi	r25, 0xFF	; 255
    9f98:	21 f0       	breq	.+8      	; 0x9fa2 <wait_ready+0x3a>
    9f9a:	80 91 6e 25 	lds	r24, 0x256E
    9f9e:	88 23       	and	r24, r24
    9fa0:	99 f7       	brne	.-26     	; 0x9f88 <wait_ready+0x20>

  return res;
}
    9fa2:	89 2f       	mov	r24, r25
    9fa4:	08 95       	ret

00009fa6 <power_off>:
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
}

static
void power_off (void)
{
    9fa6:	ff 92       	push	r15
    9fa8:	0f 93       	push	r16
    9faa:	1f 93       	push	r17
  SELECT();        /* Wait for card ready */
    9fac:	00 e8       	ldi	r16, 0x80	; 128
    9fae:	16 e0       	ldi	r17, 0x06	; 6
    9fb0:	80 e1       	ldi	r24, 0x10	; 16
    9fb2:	f8 2e       	mov	r15, r24
    9fb4:	f8 01       	movw	r30, r16
    9fb6:	f6 82       	std	Z+6, r15	; 0x06
  wait_ready();
    9fb8:	0e 94 b4 4f 	call	0x9f68	; 0x9f68 <wait_ready>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    9fbc:	f8 01       	movw	r30, r16
    9fbe:	f5 82       	std	Z+5, r15	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9fc0:	8f ef       	ldi	r24, 0xFF	; 255
    9fc2:	e0 ec       	ldi	r30, 0xC0	; 192
    9fc4:	fa e0       	ldi	r31, 0x0A	; 10
    9fc6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9fc8:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fcc:	87 ff       	sbrs	r24, 7
    9fce:	fc cf       	rjmp	.-8      	; 0x9fc8 <power_off+0x22>
  return SPIE.DATA;
    9fd0:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  SELECT();        /* Wait for card ready */
  wait_ready();
  release_spi();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    9fd4:	80 91 d9 24 	lds	r24, 0x24D9
    9fd8:	81 60       	ori	r24, 0x01	; 1
    9fda:	80 93 d9 24 	sts	0x24D9, r24
}
    9fde:	1f 91       	pop	r17
    9fe0:	0f 91       	pop	r16
    9fe2:	ff 90       	pop	r15
    9fe4:	08 95       	ret

00009fe6 <rcvr_datablock>:
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    9fe6:	fc 01       	movw	r30, r24
  BYTE token;


  Timer1 = 20;
    9fe8:	84 e1       	ldi	r24, 0x14	; 20
    9fea:	80 93 6d 25 	sts	0x256D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9fee:	a0 ec       	ldi	r26, 0xC0	; 192
    9ff0:	ba e0       	ldi	r27, 0x0A	; 10
    9ff2:	9f ef       	ldi	r25, 0xFF	; 255
    9ff4:	13 96       	adiw	r26, 0x03	; 3
    9ff6:	9c 93       	st	X, r25
    9ff8:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9ffa:	80 91 c2 0a 	lds	r24, 0x0AC2
    9ffe:	87 ff       	sbrs	r24, 7
    a000:	fc cf       	rjmp	.-8      	; 0x9ffa <rcvr_datablock+0x14>
  return SPIE.DATA;
    a002:	80 91 c3 0a 	lds	r24, 0x0AC3


  Timer1 = 20;
  do {              /* Wait for data packet in timeout of 200ms */
    token = rcvr_spi();
  } while ((token == 0xFF) && Timer1);
    a006:	8f 3f       	cpi	r24, 0xFF	; 255
    a008:	29 f4       	brne	.+10     	; 0xa014 <rcvr_datablock+0x2e>
    a00a:	80 91 6d 25 	lds	r24, 0x256D
    a00e:	88 23       	and	r24, r24
    a010:	89 f7       	brne	.-30     	; 0x9ff4 <rcvr_datablock+0xe>
    a012:	4a c0       	rjmp	.+148    	; 0xa0a8 <rcvr_datablock+0xc2>
  if(token != 0xFE) return FALSE;  /* If not valid data token, retutn with error */
    a014:	8e 3f       	cpi	r24, 0xFE	; 254
    a016:	09 f0       	breq	.+2      	; 0xa01a <rcvr_datablock+0x34>
    a018:	47 c0       	rjmp	.+142    	; 0xa0a8 <rcvr_datablock+0xc2>

  do {              /* Receive the data block into buffer */
    rcvr_spi_m(buff++);
    a01a:	a0 ec       	ldi	r26, 0xC0	; 192
    a01c:	ba e0       	ldi	r27, 0x0A	; 10
    a01e:	9f ef       	ldi	r25, 0xFF	; 255
    a020:	13 96       	adiw	r26, 0x03	; 3
    a022:	9c 93       	st	X, r25
    a024:	13 97       	sbiw	r26, 0x03	; 3
    a026:	80 91 c2 0a 	lds	r24, 0x0AC2
    a02a:	87 ff       	sbrs	r24, 7
    a02c:	fc cf       	rjmp	.-8      	; 0xa026 <rcvr_datablock+0x40>
    a02e:	80 91 c3 0a 	lds	r24, 0x0AC3
    a032:	80 83       	st	Z, r24
    rcvr_spi_m(buff++);
    a034:	13 96       	adiw	r26, 0x03	; 3
    a036:	9c 93       	st	X, r25
    a038:	13 97       	sbiw	r26, 0x03	; 3
    a03a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a03e:	87 ff       	sbrs	r24, 7
    a040:	fc cf       	rjmp	.-8      	; 0xa03a <rcvr_datablock+0x54>
    a042:	80 91 c3 0a 	lds	r24, 0x0AC3
    a046:	81 83       	std	Z+1, r24	; 0x01
    rcvr_spi_m(buff++);
    a048:	13 96       	adiw	r26, 0x03	; 3
    a04a:	9c 93       	st	X, r25
    a04c:	13 97       	sbiw	r26, 0x03	; 3
    a04e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a052:	87 ff       	sbrs	r24, 7
    a054:	fc cf       	rjmp	.-8      	; 0xa04e <rcvr_datablock+0x68>
    a056:	80 91 c3 0a 	lds	r24, 0x0AC3
    a05a:	82 83       	std	Z+2, r24	; 0x02
    rcvr_spi_m(buff++);
    a05c:	13 96       	adiw	r26, 0x03	; 3
    a05e:	9c 93       	st	X, r25
    a060:	13 97       	sbiw	r26, 0x03	; 3
    a062:	80 91 c2 0a 	lds	r24, 0x0AC2
    a066:	87 ff       	sbrs	r24, 7
    a068:	fc cf       	rjmp	.-8      	; 0xa062 <rcvr_datablock+0x7c>
    a06a:	80 91 c3 0a 	lds	r24, 0x0AC3
    a06e:	83 83       	std	Z+3, r24	; 0x03
  } while (btr -= 4);
    a070:	64 50       	subi	r22, 0x04	; 4
    a072:	70 40       	sbci	r23, 0x00	; 0
    a074:	11 f0       	breq	.+4      	; 0xa07a <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a076:	34 96       	adiw	r30, 0x04	; 4
    a078:	d3 cf       	rjmp	.-90     	; 0xa020 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a07a:	8f ef       	ldi	r24, 0xFF	; 255
    a07c:	e0 ec       	ldi	r30, 0xC0	; 192
    a07e:	fa e0       	ldi	r31, 0x0A	; 10
    a080:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a082:	80 91 c2 0a 	lds	r24, 0x0AC2
    a086:	87 ff       	sbrs	r24, 7
    a088:	fc cf       	rjmp	.-8      	; 0xa082 <rcvr_datablock+0x9c>
  return SPIE.DATA;
    a08a:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a08e:	8f ef       	ldi	r24, 0xFF	; 255
    a090:	e0 ec       	ldi	r30, 0xC0	; 192
    a092:	fa e0       	ldi	r31, 0x0A	; 10
    a094:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a096:	80 91 c2 0a 	lds	r24, 0x0AC2
    a09a:	87 ff       	sbrs	r24, 7
    a09c:	fc cf       	rjmp	.-8      	; 0xa096 <rcvr_datablock+0xb0>
  return SPIE.DATA;
    a09e:	80 91 c3 0a 	lds	r24, 0x0AC3
    a0a2:	21 e0       	ldi	r18, 0x01	; 1
    a0a4:	30 e0       	ldi	r19, 0x00	; 0
    a0a6:	02 c0       	rjmp	.+4      	; 0xa0ac <rcvr_datablock+0xc6>
    rcvr_spi_m(buff++);
  } while (btr -= 4);
  rcvr_spi();            /* Discard CRC */
  rcvr_spi();

  return TRUE;          /* Return with success */
    a0a8:	20 e0       	ldi	r18, 0x00	; 0
    a0aa:	30 e0       	ldi	r19, 0x00	; 0
}
    a0ac:	c9 01       	movw	r24, r18
    a0ae:	08 95       	ret

0000a0b0 <xmit_datablock>:
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a0b0:	1f 93       	push	r17
    a0b2:	cf 93       	push	r28
    a0b4:	df 93       	push	r29
    a0b6:	ec 01       	movw	r28, r24
    a0b8:	16 2f       	mov	r17, r22
  BYTE resp, wc;


  if (wait_ready() != 0xFF) return FALSE;
    a0ba:	0e 94 b4 4f 	call	0x9f68	; 0x9f68 <wait_ready>
    a0be:	8f 3f       	cpi	r24, 0xFF	; 255
    a0c0:	19 f0       	breq	.+6      	; 0xa0c8 <xmit_datablock+0x18>
    a0c2:	20 e0       	ldi	r18, 0x00	; 0
    a0c4:	30 e0       	ldi	r19, 0x00	; 0
    a0c6:	42 c0       	rjmp	.+132    	; 0xa14c <xmit_datablock+0x9c>

  xmit_spi(token);          /* Xmit data token */
    a0c8:	e0 ec       	ldi	r30, 0xC0	; 192
    a0ca:	fa e0       	ldi	r31, 0x0A	; 10
    a0cc:	13 83       	std	Z+3, r17	; 0x03
    a0ce:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0d2:	87 ff       	sbrs	r24, 7
    a0d4:	fc cf       	rjmp	.-8      	; 0xa0ce <xmit_datablock+0x1e>
  if (token != 0xFD) {  /* Is data token */
    a0d6:	1d 3f       	cpi	r17, 0xFD	; 253
    a0d8:	19 f4       	brne	.+6      	; 0xa0e0 <xmit_datablock+0x30>
    a0da:	21 e0       	ldi	r18, 0x01	; 1
    a0dc:	30 e0       	ldi	r19, 0x00	; 0
    a0de:	36 c0       	rjmp	.+108    	; 0xa14c <xmit_datablock+0x9c>
    a0e0:	90 e0       	ldi	r25, 0x00	; 0
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
    a0e2:	e0 ec       	ldi	r30, 0xC0	; 192
    a0e4:	fa e0       	ldi	r31, 0x0A	; 10
    a0e6:	88 81       	ld	r24, Y
    a0e8:	83 83       	std	Z+3, r24	; 0x03
    a0ea:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0ee:	87 ff       	sbrs	r24, 7
    a0f0:	fc cf       	rjmp	.-8      	; 0xa0ea <xmit_datablock+0x3a>
      xmit_spi(*buff++);
    a0f2:	89 81       	ldd	r24, Y+1	; 0x01
    a0f4:	83 83       	std	Z+3, r24	; 0x03
    a0f6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0fa:	87 ff       	sbrs	r24, 7
    a0fc:	fc cf       	rjmp	.-8      	; 0xa0f6 <xmit_datablock+0x46>
    } while (--wc);
    a0fe:	91 50       	subi	r25, 0x01	; 1
    a100:	11 f0       	breq	.+4      	; 0xa106 <xmit_datablock+0x56>
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a102:	22 96       	adiw	r28, 0x02	; 2
    a104:	f0 cf       	rjmp	.-32     	; 0xa0e6 <xmit_datablock+0x36>
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
      xmit_spi(*buff++);
    } while (--wc);
    xmit_spi(0xFF);          /* CRC (Dummy) */
    a106:	8f ef       	ldi	r24, 0xFF	; 255
    a108:	e0 ec       	ldi	r30, 0xC0	; 192
    a10a:	fa e0       	ldi	r31, 0x0A	; 10
    a10c:	83 83       	std	Z+3, r24	; 0x03
    a10e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a112:	87 ff       	sbrs	r24, 7
    a114:	fc cf       	rjmp	.-8      	; 0xa10e <xmit_datablock+0x5e>
    xmit_spi(0xFF);
    a116:	8f ef       	ldi	r24, 0xFF	; 255
    a118:	e0 ec       	ldi	r30, 0xC0	; 192
    a11a:	fa e0       	ldi	r31, 0x0A	; 10
    a11c:	83 83       	std	Z+3, r24	; 0x03
    a11e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a122:	87 ff       	sbrs	r24, 7
    a124:	fc cf       	rjmp	.-8      	; 0xa11e <xmit_datablock+0x6e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a126:	8f ef       	ldi	r24, 0xFF	; 255
    a128:	e0 ec       	ldi	r30, 0xC0	; 192
    a12a:	fa e0       	ldi	r31, 0x0A	; 10
    a12c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a12e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a132:	87 ff       	sbrs	r24, 7
    a134:	fc cf       	rjmp	.-8      	; 0xa12e <xmit_datablock+0x7e>
  return SPIE.DATA;
    a136:	80 91 c3 0a 	lds	r24, 0x0AC3
    a13a:	90 e0       	ldi	r25, 0x00	; 0
    a13c:	8f 71       	andi	r24, 0x1F	; 31
    a13e:	85 30       	cpi	r24, 0x05	; 5
    a140:	09 f0       	breq	.+2      	; 0xa144 <xmit_datablock+0x94>
    a142:	91 e0       	ldi	r25, 0x01	; 1
    a144:	81 e0       	ldi	r24, 0x01	; 1
    a146:	98 27       	eor	r25, r24
    a148:	29 2f       	mov	r18, r25
    a14a:	30 e0       	ldi	r19, 0x00	; 0
    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
      return FALSE;
  }

  return TRUE;
}
    a14c:	c9 01       	movw	r24, r18
    a14e:	df 91       	pop	r29
    a150:	cf 91       	pop	r28
    a152:	1f 91       	pop	r17
    a154:	08 95       	ret

0000a156 <send_cmd>:
static
BYTE send_cmd (
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    a156:	df 92       	push	r13
    a158:	ef 92       	push	r14
    a15a:	ff 92       	push	r15
    a15c:	0f 93       	push	r16
    a15e:	1f 93       	push	r17
    a160:	d8 2e       	mov	r13, r24
    a162:	7a 01       	movw	r14, r20
    a164:	8b 01       	movw	r16, r22
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a166:	87 ff       	sbrs	r24, 7
    a168:	0c c0       	rjmp	.+24     	; 0xa182 <send_cmd+0x2c>
    cmd &= 0x7F;
    res = send_cmd(CMD55, 0);
    a16a:	87 e7       	ldi	r24, 0x77	; 119
    a16c:	40 e0       	ldi	r20, 0x00	; 0
    a16e:	50 e0       	ldi	r21, 0x00	; 0
    a170:	60 e0       	ldi	r22, 0x00	; 0
    a172:	70 e0       	ldi	r23, 0x00	; 0
    a174:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    if (res > 1) return res;
    a178:	82 30       	cpi	r24, 0x02	; 2
    a17a:	08 f0       	brcs	.+2      	; 0xa17e <send_cmd+0x28>
    a17c:	69 c0       	rjmp	.+210    	; 0xa250 <send_cmd+0xfa>
{
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    a17e:	8f e7       	ldi	r24, 0x7F	; 127
    a180:	d8 22       	and	r13, r24
    res = send_cmd(CMD55, 0);
    if (res > 1) return res;
  }

  /* Select the card and wait for ready */
  DESELECT();
    a182:	e0 e8       	ldi	r30, 0x80	; 128
    a184:	f6 e0       	ldi	r31, 0x06	; 6
    a186:	80 e1       	ldi	r24, 0x10	; 16
    a188:	85 83       	std	Z+5, r24	; 0x05
  SELECT();
    a18a:	86 83       	std	Z+6, r24	; 0x06
  if (wait_ready() != 0xFF) return 0xFF;
    a18c:	0e 94 b4 4f 	call	0x9f68	; 0x9f68 <wait_ready>
    a190:	8f 3f       	cpi	r24, 0xFF	; 255
    a192:	11 f0       	breq	.+4      	; 0xa198 <send_cmd+0x42>
    a194:	8f ef       	ldi	r24, 0xFF	; 255
    a196:	5c c0       	rjmp	.+184    	; 0xa250 <send_cmd+0xfa>

  /* Send command packet */
  xmit_spi(cmd);            /* Start + Command index */
    a198:	e0 ec       	ldi	r30, 0xC0	; 192
    a19a:	fa e0       	ldi	r31, 0x0A	; 10
    a19c:	d3 82       	std	Z+3, r13	; 0x03
    a19e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1a2:	87 ff       	sbrs	r24, 7
    a1a4:	fc cf       	rjmp	.-8      	; 0xa19e <send_cmd+0x48>
  xmit_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
    a1a6:	81 2f       	mov	r24, r17
    a1a8:	99 27       	eor	r25, r25
    a1aa:	aa 27       	eor	r26, r26
    a1ac:	bb 27       	eor	r27, r27
    a1ae:	e0 ec       	ldi	r30, 0xC0	; 192
    a1b0:	fa e0       	ldi	r31, 0x0A	; 10
    a1b2:	83 83       	std	Z+3, r24	; 0x03
    a1b4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1b8:	87 ff       	sbrs	r24, 7
    a1ba:	fc cf       	rjmp	.-8      	; 0xa1b4 <send_cmd+0x5e>
  xmit_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
    a1bc:	c8 01       	movw	r24, r16
    a1be:	aa 27       	eor	r26, r26
    a1c0:	bb 27       	eor	r27, r27
    a1c2:	e0 ec       	ldi	r30, 0xC0	; 192
    a1c4:	fa e0       	ldi	r31, 0x0A	; 10
    a1c6:	83 83       	std	Z+3, r24	; 0x03
    a1c8:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1cc:	87 ff       	sbrs	r24, 7
    a1ce:	fc cf       	rjmp	.-8      	; 0xa1c8 <send_cmd+0x72>
  xmit_spi((BYTE)(arg >> 8));      /* Argument[15..8] */
    a1d0:	bb 27       	eor	r27, r27
    a1d2:	a1 2f       	mov	r26, r17
    a1d4:	90 2f       	mov	r25, r16
    a1d6:	8f 2d       	mov	r24, r15
    a1d8:	e0 ec       	ldi	r30, 0xC0	; 192
    a1da:	fa e0       	ldi	r31, 0x0A	; 10
    a1dc:	83 83       	std	Z+3, r24	; 0x03
    a1de:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1e2:	87 ff       	sbrs	r24, 7
    a1e4:	fc cf       	rjmp	.-8      	; 0xa1de <send_cmd+0x88>
  xmit_spi((BYTE)arg);        /* Argument[7..0] */
    a1e6:	e0 ec       	ldi	r30, 0xC0	; 192
    a1e8:	fa e0       	ldi	r31, 0x0A	; 10
    a1ea:	e3 82       	std	Z+3, r14	; 0x03
    a1ec:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1f0:	87 ff       	sbrs	r24, 7
    a1f2:	fc cf       	rjmp	.-8      	; 0xa1ec <send_cmd+0x96>
  n = 0x01;              /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
    a1f4:	80 e4       	ldi	r24, 0x40	; 64
    a1f6:	d8 16       	cp	r13, r24
    a1f8:	11 f4       	brne	.+4      	; 0xa1fe <send_cmd+0xa8>
    a1fa:	85 e9       	ldi	r24, 0x95	; 149
    a1fc:	06 c0       	rjmp	.+12     	; 0xa20a <send_cmd+0xb4>
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
    a1fe:	88 e4       	ldi	r24, 0x48	; 72
    a200:	d8 16       	cp	r13, r24
    a202:	11 f4       	brne	.+4      	; 0xa208 <send_cmd+0xb2>
    a204:	87 e8       	ldi	r24, 0x87	; 135
    a206:	01 c0       	rjmp	.+2      	; 0xa20a <send_cmd+0xb4>
    a208:	81 e0       	ldi	r24, 0x01	; 1
  xmit_spi(n);
    a20a:	e0 ec       	ldi	r30, 0xC0	; 192
    a20c:	fa e0       	ldi	r31, 0x0A	; 10
    a20e:	83 83       	std	Z+3, r24	; 0x03
    a210:	80 91 c2 0a 	lds	r24, 0x0AC2
    a214:	87 ff       	sbrs	r24, 7
    a216:	fc cf       	rjmp	.-8      	; 0xa210 <send_cmd+0xba>

  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
    a218:	8c e4       	ldi	r24, 0x4C	; 76
    a21a:	d8 16       	cp	r13, r24
    a21c:	51 f4       	brne	.+20     	; 0xa232 <send_cmd+0xdc>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a21e:	8f ef       	ldi	r24, 0xFF	; 255
    a220:	e0 ec       	ldi	r30, 0xC0	; 192
    a222:	fa e0       	ldi	r31, 0x0A	; 10
    a224:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a226:	80 91 c2 0a 	lds	r24, 0x0AC2
    a22a:	87 ff       	sbrs	r24, 7
    a22c:	fc cf       	rjmp	.-8      	; 0xa226 <send_cmd+0xd0>
  return SPIE.DATA;
    a22e:	80 91 c3 0a 	lds	r24, 0x0AC3
    a232:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a234:	e0 ec       	ldi	r30, 0xC0	; 192
    a236:	fa e0       	ldi	r31, 0x0A	; 10
    a238:	2f ef       	ldi	r18, 0xFF	; 255
    a23a:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a23c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a240:	87 ff       	sbrs	r24, 7
    a242:	fc cf       	rjmp	.-8      	; 0xa23c <send_cmd+0xe6>
  return SPIE.DATA;
    a244:	80 91 c3 0a 	lds	r24, 0x0AC3
  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    res = rcvr_spi();
  while ((res & 0x80) && --n);
    a248:	87 ff       	sbrs	r24, 7
    a24a:	02 c0       	rjmp	.+4      	; 0xa250 <send_cmd+0xfa>
    a24c:	91 50       	subi	r25, 0x01	; 1
    a24e:	a9 f7       	brne	.-22     	; 0xa23a <send_cmd+0xe4>

  return res;      /* Return with the response value */
}
    a250:	1f 91       	pop	r17
    a252:	0f 91       	pop	r16
    a254:	ff 90       	pop	r15
    a256:	ef 90       	pop	r14
    a258:	df 90       	pop	r13
    a25a:	08 95       	ret

0000a25c <disk_status>:

DSTATUS disk_status (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;    /* Supports only single drive */
    a25c:	88 23       	and	r24, r24
    a25e:	11 f0       	breq	.+4      	; 0xa264 <disk_status+0x8>
    a260:	81 e0       	ldi	r24, 0x01	; 1
    a262:	08 95       	ret
  return Stat;
    a264:	80 91 d9 24 	lds	r24, 0x24D9
}
    a268:	08 95       	ret

0000a26a <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a26a:	0f 93       	push	r16
    a26c:	cf 93       	push	r28
    a26e:	df 93       	push	r29
    a270:	eb 01       	movw	r28, r22
  if (drv || !count) return RES_PARERR;
    a272:	88 23       	and	r24, r24
    a274:	09 f0       	breq	.+2      	; 0xa278 <disk_read+0xe>
    a276:	57 c0       	rjmp	.+174    	; 0xa326 <disk_read+0xbc>
    a278:	00 23       	and	r16, r16
    a27a:	09 f4       	brne	.+2      	; 0xa27e <disk_read+0x14>
    a27c:	54 c0       	rjmp	.+168    	; 0xa326 <disk_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a27e:	80 91 d9 24 	lds	r24, 0x24D9
    a282:	80 ff       	sbrs	r24, 0
    a284:	03 c0       	rjmp	.+6      	; 0xa28c <disk_read+0x22>
    a286:	23 e0       	ldi	r18, 0x03	; 3
    a288:	30 e0       	ldi	r19, 0x00	; 0
    a28a:	4f c0       	rjmp	.+158    	; 0xa32a <disk_read+0xc0>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a28c:	80 91 6f 25 	lds	r24, 0x256F
    a290:	83 fd       	sbrc	r24, 3
    a292:	07 c0       	rjmp	.+14     	; 0xa2a2 <disk_read+0x38>
    a294:	69 e0       	ldi	r22, 0x09	; 9
    a296:	22 0f       	add	r18, r18
    a298:	33 1f       	adc	r19, r19
    a29a:	44 1f       	adc	r20, r20
    a29c:	55 1f       	adc	r21, r21
    a29e:	6a 95       	dec	r22
    a2a0:	d1 f7       	brne	.-12     	; 0xa296 <disk_read+0x2c>

  if (count == 1) {  /* Single block read */
    a2a2:	01 30       	cpi	r16, 0x01	; 1
    a2a4:	89 f4       	brne	.+34     	; 0xa2c8 <disk_read+0x5e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
    a2a6:	81 e5       	ldi	r24, 0x51	; 81
    a2a8:	ba 01       	movw	r22, r20
    a2aa:	a9 01       	movw	r20, r18
    a2ac:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a2b0:	88 23       	and	r24, r24
    a2b2:	21 f5       	brne	.+72     	; 0xa2fc <disk_read+0x92>
    a2b4:	ce 01       	movw	r24, r28
    a2b6:	60 e0       	ldi	r22, 0x00	; 0
    a2b8:	72 e0       	ldi	r23, 0x02	; 2
    a2ba:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <rcvr_datablock>
    a2be:	00 e0       	ldi	r16, 0x00	; 0
    a2c0:	89 2b       	or	r24, r25
    a2c2:	e1 f4       	brne	.+56     	; 0xa2fc <disk_read+0x92>
    a2c4:	01 e0       	ldi	r16, 0x01	; 1
    a2c6:	1a c0       	rjmp	.+52     	; 0xa2fc <disk_read+0x92>
      && rcvr_datablock(buff, 512))
      count = 0;
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    a2c8:	82 e5       	ldi	r24, 0x52	; 82
    a2ca:	ba 01       	movw	r22, r20
    a2cc:	a9 01       	movw	r20, r18
    a2ce:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a2d2:	88 23       	and	r24, r24
    a2d4:	99 f4       	brne	.+38     	; 0xa2fc <disk_read+0x92>
      do {
        if (!rcvr_datablock(buff, 512)) break;
    a2d6:	ce 01       	movw	r24, r28
    a2d8:	60 e0       	ldi	r22, 0x00	; 0
    a2da:	72 e0       	ldi	r23, 0x02	; 2
    a2dc:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <rcvr_datablock>
    a2e0:	89 2b       	or	r24, r25
    a2e2:	29 f0       	breq	.+10     	; 0xa2ee <disk_read+0x84>
        buff += 512;
      } while (--count);
    a2e4:	01 50       	subi	r16, 0x01	; 1
    a2e6:	19 f0       	breq	.+6      	; 0xa2ee <disk_read+0x84>
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!rcvr_datablock(buff, 512)) break;
        buff += 512;
    a2e8:	c0 50       	subi	r28, 0x00	; 0
    a2ea:	de 4f       	sbci	r29, 0xFE	; 254
    a2ec:	f4 cf       	rjmp	.-24     	; 0xa2d6 <disk_read+0x6c>
      } while (--count);
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    a2ee:	8c e4       	ldi	r24, 0x4C	; 76
    a2f0:	40 e0       	ldi	r20, 0x00	; 0
    a2f2:	50 e0       	ldi	r21, 0x00	; 0
    a2f4:	60 e0       	ldi	r22, 0x00	; 0
    a2f6:	70 e0       	ldi	r23, 0x00	; 0
    a2f8:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a2fc:	80 e1       	ldi	r24, 0x10	; 16
    a2fe:	e0 e8       	ldi	r30, 0x80	; 128
    a300:	f6 e0       	ldi	r31, 0x06	; 6
    a302:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a304:	8f ef       	ldi	r24, 0xFF	; 255
    a306:	e0 ec       	ldi	r30, 0xC0	; 192
    a308:	fa e0       	ldi	r31, 0x0A	; 10
    a30a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a30c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a310:	87 ff       	sbrs	r24, 7
    a312:	fc cf       	rjmp	.-8      	; 0xa30c <disk_read+0xa2>
  return SPIE.DATA;
    a314:	80 91 c3 0a 	lds	r24, 0x0AC3
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a318:	20 e0       	ldi	r18, 0x00	; 0
    a31a:	30 e0       	ldi	r19, 0x00	; 0
    a31c:	00 23       	and	r16, r16
    a31e:	29 f0       	breq	.+10     	; 0xa32a <disk_read+0xc0>
    a320:	21 e0       	ldi	r18, 0x01	; 1
    a322:	30 e0       	ldi	r19, 0x00	; 0
    a324:	02 c0       	rjmp	.+4      	; 0xa32a <disk_read+0xc0>
    a326:	24 e0       	ldi	r18, 0x04	; 4
    a328:	30 e0       	ldi	r19, 0x00	; 0
}
    a32a:	c9 01       	movw	r24, r18
    a32c:	df 91       	pop	r29
    a32e:	cf 91       	pop	r28
    a330:	0f 91       	pop	r16
    a332:	08 95       	ret

0000a334 <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a334:	cf 92       	push	r12
    a336:	df 92       	push	r13
    a338:	ef 92       	push	r14
    a33a:	ff 92       	push	r15
    a33c:	0f 93       	push	r16
    a33e:	cf 93       	push	r28
    a340:	df 93       	push	r29
    a342:	eb 01       	movw	r28, r22
    a344:	69 01       	movw	r12, r18
    a346:	7a 01       	movw	r14, r20
  if (drv || !count) return RES_PARERR;
    a348:	88 23       	and	r24, r24
    a34a:	09 f0       	breq	.+2      	; 0xa34e <disk_write+0x1a>
    a34c:	66 c0       	rjmp	.+204    	; 0xa41a <disk_write+0xe6>
    a34e:	00 23       	and	r16, r16
    a350:	09 f4       	brne	.+2      	; 0xa354 <disk_write+0x20>
    a352:	63 c0       	rjmp	.+198    	; 0xa41a <disk_write+0xe6>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a354:	80 91 d9 24 	lds	r24, 0x24D9
    a358:	80 ff       	sbrs	r24, 0
    a35a:	03 c0       	rjmp	.+6      	; 0xa362 <disk_write+0x2e>
    a35c:	23 e0       	ldi	r18, 0x03	; 3
    a35e:	30 e0       	ldi	r19, 0x00	; 0
    a360:	5e c0       	rjmp	.+188    	; 0xa41e <disk_write+0xea>
  if (Stat & STA_PROTECT) return RES_WRPRT;
    a362:	80 91 d9 24 	lds	r24, 0x24D9
    a366:	82 ff       	sbrs	r24, 2
    a368:	03 c0       	rjmp	.+6      	; 0xa370 <disk_write+0x3c>
    a36a:	22 e0       	ldi	r18, 0x02	; 2
    a36c:	30 e0       	ldi	r19, 0x00	; 0
    a36e:	57 c0       	rjmp	.+174    	; 0xa41e <disk_write+0xea>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a370:	80 91 6f 25 	lds	r24, 0x256F
    a374:	90 e0       	ldi	r25, 0x00	; 0
    a376:	83 fd       	sbrc	r24, 3
    a378:	07 c0       	rjmp	.+14     	; 0xa388 <disk_write+0x54>
    a37a:	79 e0       	ldi	r23, 0x09	; 9
    a37c:	cc 0c       	add	r12, r12
    a37e:	dd 1c       	adc	r13, r13
    a380:	ee 1c       	adc	r14, r14
    a382:	ff 1c       	adc	r15, r15
    a384:	7a 95       	dec	r23
    a386:	d1 f7       	brne	.-12     	; 0xa37c <disk_write+0x48>

  if (count == 1) {  /* Single block write */
    a388:	01 30       	cpi	r16, 0x01	; 1
    a38a:	69 f4       	brne	.+26     	; 0xa3a6 <disk_write+0x72>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    a38c:	88 e5       	ldi	r24, 0x58	; 88
    a38e:	b7 01       	movw	r22, r14
    a390:	a6 01       	movw	r20, r12
    a392:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a396:	88 23       	and	r24, r24
    a398:	59 f5       	brne	.+86     	; 0xa3f0 <disk_write+0xbc>
    a39a:	ce 01       	movw	r24, r28
    a39c:	6e ef       	ldi	r22, 0xFE	; 254
    a39e:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <xmit_datablock>
    a3a2:	00 e0       	ldi	r16, 0x00	; 0
    a3a4:	22 c0       	rjmp	.+68     	; 0xa3ea <disk_write+0xb6>
      && xmit_datablock(buff, 0xFE))
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    a3a6:	86 70       	andi	r24, 0x06	; 6
    a3a8:	90 70       	andi	r25, 0x00	; 0
    a3aa:	89 2b       	or	r24, r25
    a3ac:	39 f0       	breq	.+14     	; 0xa3bc <disk_write+0x88>
    a3ae:	40 2f       	mov	r20, r16
    a3b0:	50 e0       	ldi	r21, 0x00	; 0
    a3b2:	60 e0       	ldi	r22, 0x00	; 0
    a3b4:	70 e0       	ldi	r23, 0x00	; 0
    a3b6:	87 ed       	ldi	r24, 0xD7	; 215
    a3b8:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    a3bc:	89 e5       	ldi	r24, 0x59	; 89
    a3be:	b7 01       	movw	r22, r14
    a3c0:	a6 01       	movw	r20, r12
    a3c2:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a3c6:	88 23       	and	r24, r24
    a3c8:	99 f4       	brne	.+38     	; 0xa3f0 <disk_write+0xbc>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    a3ca:	ce 01       	movw	r24, r28
    a3cc:	6c ef       	ldi	r22, 0xFC	; 252
    a3ce:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <xmit_datablock>
    a3d2:	89 2b       	or	r24, r25
    a3d4:	29 f0       	breq	.+10     	; 0xa3e0 <disk_write+0xac>
        buff += 512;
      } while (--count);
    a3d6:	01 50       	subi	r16, 0x01	; 1
    a3d8:	19 f0       	breq	.+6      	; 0xa3e0 <disk_write+0xac>
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
        buff += 512;
    a3da:	c0 50       	subi	r28, 0x00	; 0
    a3dc:	de 4f       	sbci	r29, 0xFE	; 254
    a3de:	f5 cf       	rjmp	.-22     	; 0xa3ca <disk_write+0x96>
      } while (--count);
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    a3e0:	80 e0       	ldi	r24, 0x00	; 0
    a3e2:	90 e0       	ldi	r25, 0x00	; 0
    a3e4:	6d ef       	ldi	r22, 0xFD	; 253
    a3e6:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <xmit_datablock>
    a3ea:	89 2b       	or	r24, r25
    a3ec:	09 f4       	brne	.+2      	; 0xa3f0 <disk_write+0xbc>
    a3ee:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a3f0:	80 e1       	ldi	r24, 0x10	; 16
    a3f2:	e0 e8       	ldi	r30, 0x80	; 128
    a3f4:	f6 e0       	ldi	r31, 0x06	; 6
    a3f6:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a3f8:	8f ef       	ldi	r24, 0xFF	; 255
    a3fa:	e0 ec       	ldi	r30, 0xC0	; 192
    a3fc:	fa e0       	ldi	r31, 0x0A	; 10
    a3fe:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a400:	80 91 c2 0a 	lds	r24, 0x0AC2
    a404:	87 ff       	sbrs	r24, 7
    a406:	fc cf       	rjmp	.-8      	; 0xa400 <disk_write+0xcc>
  return SPIE.DATA;
    a408:	80 91 c3 0a 	lds	r24, 0x0AC3
        count = 1;
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a40c:	20 e0       	ldi	r18, 0x00	; 0
    a40e:	30 e0       	ldi	r19, 0x00	; 0
    a410:	00 23       	and	r16, r16
    a412:	29 f0       	breq	.+10     	; 0xa41e <disk_write+0xea>
    a414:	21 e0       	ldi	r18, 0x01	; 1
    a416:	30 e0       	ldi	r19, 0x00	; 0
    a418:	02 c0       	rjmp	.+4      	; 0xa41e <disk_write+0xea>
    a41a:	24 e0       	ldi	r18, 0x04	; 4
    a41c:	30 e0       	ldi	r19, 0x00	; 0
}
    a41e:	c9 01       	movw	r24, r18
    a420:	df 91       	pop	r29
    a422:	cf 91       	pop	r28
    a424:	0f 91       	pop	r16
    a426:	ff 90       	pop	r15
    a428:	ef 90       	pop	r14
    a42a:	df 90       	pop	r13
    a42c:	cf 90       	pop	r12
    a42e:	08 95       	ret

0000a430 <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    a430:	a0 e1       	ldi	r26, 0x10	; 16
    a432:	b0 e0       	ldi	r27, 0x00	; 0
    a434:	ee e1       	ldi	r30, 0x1E	; 30
    a436:	f2 e5       	ldi	r31, 0x52	; 82
    a438:	0c 94 58 58 	jmp	0xb0b0	; 0xb0b0 <__prologue_saves__+0x1a>
    a43c:	8a 01       	movw	r16, r20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;


  if (drv) return RES_PARERR;
    a43e:	88 23       	and	r24, r24
    a440:	09 f0       	breq	.+2      	; 0xa444 <disk_ioctl+0x14>
    a442:	a2 c1       	rjmp	.+836    	; 0xa788 <disk_ioctl+0x358>

  res = RES_ERROR;

  if (ctrl == CTRL_POWER) {
    a444:	64 30       	cpi	r22, 0x04	; 4
    a446:	f1 f4       	brne	.+60     	; 0xa484 <disk_ioctl+0x54>
    switch (*ptr) {
    a448:	fa 01       	movw	r30, r20
    a44a:	80 81       	ld	r24, Z
    a44c:	81 30       	cpi	r24, 0x01	; 1
    a44e:	49 f0       	breq	.+18     	; 0xa462 <disk_ioctl+0x32>
    a450:	81 30       	cpi	r24, 0x01	; 1
    a452:	20 f0       	brcs	.+8      	; 0xa45c <disk_ioctl+0x2c>
    a454:	82 30       	cpi	r24, 0x02	; 2
    a456:	09 f0       	breq	.+2      	; 0xa45a <disk_ioctl+0x2a>
    a458:	97 c1       	rjmp	.+814    	; 0xa788 <disk_ioctl+0x358>
    a45a:	0e c0       	rjmp	.+28     	; 0xa478 <disk_ioctl+0x48>
    case 0:    /* Sub control code == 0 (POWER_OFF) */
      if (chk_power())
        power_off();    /* Power off */
    a45c:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <power_off>
    a460:	0e c0       	rjmp	.+28     	; 0xa47e <disk_ioctl+0x4e>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a462:	83 e0       	ldi	r24, 0x03	; 3
    a464:	80 93 6d 25 	sts	0x256D, r24
    a468:	80 91 6d 25 	lds	r24, 0x256D
    a46c:	88 23       	and	r24, r24
    a46e:	e1 f7       	brne	.-8      	; 0xa468 <disk_ioctl+0x38>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a470:	83 e5       	ldi	r24, 0x53	; 83
    a472:	80 93 c0 0a 	sts	0x0AC0, r24
    a476:	03 c0       	rjmp	.+6      	; 0xa47e <disk_ioctl+0x4e>
    case 1:    /* Sub control code == 1 (POWER_ON) */
      power_on();        /* Power on */
      res = RES_OK;
      break;
    case 2:    /* Sub control code == 2 (POWER_GET) */
      *(ptr+1) = (BYTE)chk_power();
    a478:	81 e0       	ldi	r24, 0x01	; 1
    a47a:	fa 01       	movw	r30, r20
    a47c:	81 83       	std	Z+1, r24	; 0x01
    a47e:	20 e0       	ldi	r18, 0x00	; 0
    a480:	30 e0       	ldi	r19, 0x00	; 0
    a482:	84 c1       	rjmp	.+776    	; 0xa78c <disk_ioctl+0x35c>
    default :
      res = RES_PARERR;
    }
  }
  else {
    if (Stat & STA_NOINIT) return RES_NOTRDY;
    a484:	80 91 d9 24 	lds	r24, 0x24D9
    a488:	80 ff       	sbrs	r24, 0
    a48a:	03 c0       	rjmp	.+6      	; 0xa492 <disk_ioctl+0x62>
    a48c:	23 e0       	ldi	r18, 0x03	; 3
    a48e:	30 e0       	ldi	r19, 0x00	; 0
    a490:	7d c1       	rjmp	.+762    	; 0xa78c <disk_ioctl+0x35c>

    switch (ctrl) {
    a492:	e6 2f       	mov	r30, r22
    a494:	f0 e0       	ldi	r31, 0x00	; 0
    a496:	ef 30       	cpi	r30, 0x0F	; 15
    a498:	f1 05       	cpc	r31, r1
    a49a:	20 f4       	brcc	.+8      	; 0xa4a4 <disk_ioctl+0x74>
    a49c:	ed 5f       	subi	r30, 0xFD	; 253
    a49e:	fe 4f       	sbci	r31, 0xFE	; 254
    a4a0:	0c 94 82 58 	jmp	0xb104	; 0xb104 <__tablejump2__>
    a4a4:	24 e0       	ldi	r18, 0x04	; 4
    a4a6:	30 e0       	ldi	r19, 0x00	; 0
    a4a8:	60 c1       	rjmp	.+704    	; 0xa76a <disk_ioctl+0x33a>
    case CTRL_SYNC :    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
      SELECT();
    a4aa:	80 e1       	ldi	r24, 0x10	; 16
    a4ac:	e0 e8       	ldi	r30, 0x80	; 128
    a4ae:	f6 e0       	ldi	r31, 0x06	; 6
    a4b0:	86 83       	std	Z+6, r24	; 0x06
      if (wait_ready() == 0xFF)
    a4b2:	0e 94 b4 4f 	call	0x9f68	; 0x9f68 <wait_ready>
    a4b6:	20 e0       	ldi	r18, 0x00	; 0
    a4b8:	30 e0       	ldi	r19, 0x00	; 0
    a4ba:	8f 3f       	cpi	r24, 0xFF	; 255
    a4bc:	09 f0       	breq	.+2      	; 0xa4c0 <disk_ioctl+0x90>
    a4be:	53 c1       	rjmp	.+678    	; 0xa766 <disk_ioctl+0x336>
    a4c0:	54 c1       	rjmp	.+680    	; 0xa76a <disk_ioctl+0x33a>
        res = RES_OK;
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    a4c2:	89 e4       	ldi	r24, 0x49	; 73
    a4c4:	40 e0       	ldi	r20, 0x00	; 0
    a4c6:	50 e0       	ldi	r21, 0x00	; 0
    a4c8:	60 e0       	ldi	r22, 0x00	; 0
    a4ca:	70 e0       	ldi	r23, 0x00	; 0
    a4cc:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a4d0:	88 23       	and	r24, r24
    a4d2:	09 f0       	breq	.+2      	; 0xa4d6 <disk_ioctl+0xa6>
    a4d4:	48 c1       	rjmp	.+656    	; 0xa766 <disk_ioctl+0x336>
    a4d6:	ce 01       	movw	r24, r28
    a4d8:	01 96       	adiw	r24, 0x01	; 1
    a4da:	60 e1       	ldi	r22, 0x10	; 16
    a4dc:	70 e0       	ldi	r23, 0x00	; 0
    a4de:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <rcvr_datablock>
    a4e2:	89 2b       	or	r24, r25
    a4e4:	09 f4       	brne	.+2      	; 0xa4e8 <disk_ioctl+0xb8>
    a4e6:	3f c1       	rjmp	.+638    	; 0xa766 <disk_ioctl+0x336>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    a4e8:	89 81       	ldd	r24, Y+1	; 0x01
    a4ea:	82 95       	swap	r24
    a4ec:	86 95       	lsr	r24
    a4ee:	86 95       	lsr	r24
    a4f0:	83 70       	andi	r24, 0x03	; 3
    a4f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    a4f4:	49 85       	ldd	r20, Y+9	; 0x09
    a4f6:	81 30       	cpi	r24, 0x01	; 1
    a4f8:	89 f4       	brne	.+34     	; 0xa51c <disk_ioctl+0xec>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
    a4fa:	87 2f       	mov	r24, r23
    a4fc:	90 e0       	ldi	r25, 0x00	; 0
    a4fe:	01 96       	adiw	r24, 0x01	; 1
    a500:	34 2f       	mov	r19, r20
    a502:	20 e0       	ldi	r18, 0x00	; 0
    a504:	82 0f       	add	r24, r18
    a506:	93 1f       	adc	r25, r19
    a508:	a0 e0       	ldi	r26, 0x00	; 0
    a50a:	b0 e0       	ldi	r27, 0x00	; 0
    a50c:	2a e0       	ldi	r18, 0x0A	; 10
    a50e:	88 0f       	add	r24, r24
    a510:	99 1f       	adc	r25, r25
    a512:	aa 1f       	adc	r26, r26
    a514:	bb 1f       	adc	r27, r27
    a516:	2a 95       	dec	r18
    a518:	d1 f7       	brne	.-12     	; 0xa50e <disk_ioctl+0xde>
    a51a:	cd c0       	rjmp	.+410    	; 0xa6b6 <disk_ioctl+0x286>
        } else {          /* SDC ver 1.XX or MMC*/
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    a51c:	42 95       	swap	r20
    a51e:	46 95       	lsr	r20
    a520:	46 95       	lsr	r20
    a522:	43 70       	andi	r20, 0x03	; 3
    a524:	28 85       	ldd	r18, Y+8	; 0x08
    a526:	30 e0       	ldi	r19, 0x00	; 0
    a528:	22 0f       	add	r18, r18
    a52a:	33 1f       	adc	r19, r19
    a52c:	22 0f       	add	r18, r18
    a52e:	33 1f       	adc	r19, r19
    a530:	24 0f       	add	r18, r20
    a532:	31 1d       	adc	r19, r1
    a534:	2f 5f       	subi	r18, 0xFF	; 255
    a536:	3f 4f       	sbci	r19, 0xFF	; 255
    a538:	8f 81       	ldd	r24, Y+7	; 0x07
    a53a:	90 e0       	ldi	r25, 0x00	; 0
    a53c:	83 70       	andi	r24, 0x03	; 3
    a53e:	90 70       	andi	r25, 0x00	; 0
    a540:	98 2f       	mov	r25, r24
    a542:	88 27       	eor	r24, r24
    a544:	99 0f       	add	r25, r25
    a546:	99 0f       	add	r25, r25
    a548:	28 0f       	add	r18, r24
    a54a:	39 1f       	adc	r19, r25
    a54c:	40 e0       	ldi	r20, 0x00	; 0
    a54e:	50 e0       	ldi	r21, 0x00	; 0
    a550:	8e 81       	ldd	r24, Y+6	; 0x06
    a552:	8f 70       	andi	r24, 0x0F	; 15
    a554:	6b 85       	ldd	r22, Y+11	; 0x0b
    a556:	66 1f       	adc	r22, r22
    a558:	66 27       	eor	r22, r22
    a55a:	66 1f       	adc	r22, r22
    a55c:	86 0f       	add	r24, r22
    a55e:	8e 5f       	subi	r24, 0xFE	; 254
    a560:	73 70       	andi	r23, 0x03	; 3
    a562:	77 0f       	add	r23, r23
    a564:	87 0f       	add	r24, r23
    a566:	90 e0       	ldi	r25, 0x00	; 0
    a568:	09 97       	sbiw	r24, 0x09	; 9
    a56a:	04 c0       	rjmp	.+8      	; 0xa574 <disk_ioctl+0x144>
    a56c:	22 0f       	add	r18, r18
    a56e:	33 1f       	adc	r19, r19
    a570:	44 1f       	adc	r20, r20
    a572:	55 1f       	adc	r21, r21
    a574:	8a 95       	dec	r24
    a576:	d2 f7       	brpl	.-12     	; 0xa56c <disk_ioctl+0x13c>
    a578:	f8 01       	movw	r30, r16
    a57a:	20 83       	st	Z, r18
    a57c:	31 83       	std	Z+1, r19	; 0x01
    a57e:	42 83       	std	Z+2, r20	; 0x02
    a580:	53 83       	std	Z+3, r21	; 0x03
    a582:	9e c0       	rjmp	.+316    	; 0xa6c0 <disk_ioctl+0x290>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :  /* Get R/W sector size (WORD) */
      *(WORD*)buff = 512;
    a584:	80 e0       	ldi	r24, 0x00	; 0
    a586:	92 e0       	ldi	r25, 0x02	; 2
    a588:	fa 01       	movw	r30, r20
    a58a:	80 83       	st	Z, r24
    a58c:	91 83       	std	Z+1, r25	; 0x01
    a58e:	98 c0       	rjmp	.+304    	; 0xa6c0 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
    a590:	80 91 6f 25 	lds	r24, 0x256F
    a594:	f8 2e       	mov	r15, r24
    a596:	82 ff       	sbrs	r24, 2
    a598:	39 c0       	rjmp	.+114    	; 0xa60c <disk_ioctl+0x1dc>
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
    a59a:	8d ec       	ldi	r24, 0xCD	; 205
    a59c:	40 e0       	ldi	r20, 0x00	; 0
    a59e:	50 e0       	ldi	r21, 0x00	; 0
    a5a0:	60 e0       	ldi	r22, 0x00	; 0
    a5a2:	70 e0       	ldi	r23, 0x00	; 0
    a5a4:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a5a8:	88 23       	and	r24, r24
    a5aa:	09 f0       	breq	.+2      	; 0xa5ae <disk_ioctl+0x17e>
    a5ac:	dc c0       	rjmp	.+440    	; 0xa766 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5ae:	8f ef       	ldi	r24, 0xFF	; 255
    a5b0:	e0 ec       	ldi	r30, 0xC0	; 192
    a5b2:	fa e0       	ldi	r31, 0x0A	; 10
    a5b4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5b6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5ba:	87 ff       	sbrs	r24, 7
    a5bc:	fc cf       	rjmp	.-8      	; 0xa5b6 <disk_ioctl+0x186>
  return SPIE.DATA;
    a5be:	80 91 c3 0a 	lds	r24, 0x0AC3

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
    a5c2:	ce 01       	movw	r24, r28
    a5c4:	01 96       	adiw	r24, 0x01	; 1
    a5c6:	60 e1       	ldi	r22, 0x10	; 16
    a5c8:	70 e0       	ldi	r23, 0x00	; 0
    a5ca:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <rcvr_datablock>
    a5ce:	89 2b       	or	r24, r25
    a5d0:	09 f4       	brne	.+2      	; 0xa5d4 <disk_ioctl+0x1a4>
    a5d2:	c9 c0       	rjmp	.+402    	; 0xa766 <disk_ioctl+0x336>
    a5d4:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5d6:	e0 ec       	ldi	r30, 0xC0	; 192
    a5d8:	fa e0       	ldi	r31, 0x0A	; 10
    a5da:	2f ef       	ldi	r18, 0xFF	; 255
    a5dc:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5de:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5e2:	87 ff       	sbrs	r24, 7
    a5e4:	fc cf       	rjmp	.-8      	; 0xa5de <disk_ioctl+0x1ae>
  return SPIE.DATA;
    a5e6:	80 91 c3 0a 	lds	r24, 0x0AC3
    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
            for (n = 64 - 16; n; n--) rcvr_spi();  /* Purge trailing data */
    a5ea:	91 50       	subi	r25, 0x01	; 1
    a5ec:	b9 f7       	brne	.-18     	; 0xa5dc <disk_ioctl+0x1ac>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    a5ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    a5f0:	22 95       	swap	r18
    a5f2:	2f 70       	andi	r18, 0x0F	; 15
    a5f4:	80 e1       	ldi	r24, 0x10	; 16
    a5f6:	90 e0       	ldi	r25, 0x00	; 0
    a5f8:	a0 e0       	ldi	r26, 0x00	; 0
    a5fa:	b0 e0       	ldi	r27, 0x00	; 0
    a5fc:	04 c0       	rjmp	.+8      	; 0xa606 <disk_ioctl+0x1d6>
    a5fe:	88 0f       	add	r24, r24
    a600:	99 1f       	adc	r25, r25
    a602:	aa 1f       	adc	r26, r26
    a604:	bb 1f       	adc	r27, r27
    a606:	2a 95       	dec	r18
    a608:	d2 f7       	brpl	.-12     	; 0xa5fe <disk_ioctl+0x1ce>
    a60a:	55 c0       	rjmp	.+170    	; 0xa6b6 <disk_ioctl+0x286>
            res = RES_OK;
          }
        }
      } else {          /* SDC ver 1.XX or MMC */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
    a60c:	89 e4       	ldi	r24, 0x49	; 73
    a60e:	40 e0       	ldi	r20, 0x00	; 0
    a610:	50 e0       	ldi	r21, 0x00	; 0
    a612:	60 e0       	ldi	r22, 0x00	; 0
    a614:	70 e0       	ldi	r23, 0x00	; 0
    a616:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a61a:	88 23       	and	r24, r24
    a61c:	09 f0       	breq	.+2      	; 0xa620 <disk_ioctl+0x1f0>
    a61e:	a3 c0       	rjmp	.+326    	; 0xa766 <disk_ioctl+0x336>
    a620:	ce 01       	movw	r24, r28
    a622:	01 96       	adiw	r24, 0x01	; 1
    a624:	60 e1       	ldi	r22, 0x10	; 16
    a626:	70 e0       	ldi	r23, 0x00	; 0
    a628:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <rcvr_datablock>
    a62c:	89 2b       	or	r24, r25
    a62e:	09 f4       	brne	.+2      	; 0xa632 <disk_ioctl+0x202>
    a630:	9a c0       	rjmp	.+308    	; 0xa766 <disk_ioctl+0x336>
    a632:	4b 85       	ldd	r20, Y+11	; 0x0b
    a634:	8c 85       	ldd	r24, Y+12	; 0x0c
          if (CardType & CT_SD1) {  /* SDC ver 1.XX */
    a636:	f1 fe       	sbrs	r15, 1
    a638:	1b c0       	rjmp	.+54     	; 0xa670 <disk_ioctl+0x240>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    a63a:	88 1f       	adc	r24, r24
    a63c:	88 27       	eor	r24, r24
    a63e:	88 1f       	adc	r24, r24
    a640:	90 e0       	ldi	r25, 0x00	; 0
    a642:	01 96       	adiw	r24, 0x01	; 1
    a644:	24 2f       	mov	r18, r20
    a646:	30 e0       	ldi	r19, 0x00	; 0
    a648:	2f 73       	andi	r18, 0x3F	; 63
    a64a:	30 70       	andi	r19, 0x00	; 0
    a64c:	22 0f       	add	r18, r18
    a64e:	33 1f       	adc	r19, r19
    a650:	82 0f       	add	r24, r18
    a652:	93 1f       	adc	r25, r19
    a654:	2e 85       	ldd	r18, Y+14	; 0x0e
    a656:	22 95       	swap	r18
    a658:	26 95       	lsr	r18
    a65a:	26 95       	lsr	r18
    a65c:	23 70       	andi	r18, 0x03	; 3
    a65e:	30 e0       	ldi	r19, 0x00	; 0
    a660:	21 50       	subi	r18, 0x01	; 1
    a662:	30 40       	sbci	r19, 0x00	; 0
    a664:	02 c0       	rjmp	.+4      	; 0xa66a <disk_ioctl+0x23a>
    a666:	88 0f       	add	r24, r24
    a668:	99 1f       	adc	r25, r25
    a66a:	2a 95       	dec	r18
    a66c:	e2 f7       	brpl	.-8      	; 0xa666 <disk_ioctl+0x236>
    a66e:	21 c0       	rjmp	.+66     	; 0xa6b2 <disk_ioctl+0x282>
          } else {          /* MMC */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    a670:	28 2f       	mov	r18, r24
    a672:	30 e0       	ldi	r19, 0x00	; 0
    a674:	23 70       	andi	r18, 0x03	; 3
    a676:	30 70       	andi	r19, 0x00	; 0
    a678:	f3 e0       	ldi	r31, 0x03	; 3
    a67a:	22 0f       	add	r18, r18
    a67c:	33 1f       	adc	r19, r19
    a67e:	fa 95       	dec	r31
    a680:	e1 f7       	brne	.-8      	; 0xa67a <disk_ioctl+0x24a>
    a682:	82 95       	swap	r24
    a684:	86 95       	lsr	r24
    a686:	87 70       	andi	r24, 0x07	; 7
    a688:	28 0f       	add	r18, r24
    a68a:	31 1d       	adc	r19, r1
    a68c:	2f 5f       	subi	r18, 0xFF	; 255
    a68e:	3f 4f       	sbci	r19, 0xFF	; 255
    a690:	84 2f       	mov	r24, r20
    a692:	90 e0       	ldi	r25, 0x00	; 0
    a694:	8c 77       	andi	r24, 0x7C	; 124
    a696:	90 70       	andi	r25, 0x00	; 0
    a698:	95 95       	asr	r25
    a69a:	87 95       	ror	r24
    a69c:	95 95       	asr	r25
    a69e:	87 95       	ror	r24
    a6a0:	01 96       	adiw	r24, 0x01	; 1
    a6a2:	ac 01       	movw	r20, r24
    a6a4:	24 9f       	mul	r18, r20
    a6a6:	c0 01       	movw	r24, r0
    a6a8:	25 9f       	mul	r18, r21
    a6aa:	90 0d       	add	r25, r0
    a6ac:	34 9f       	mul	r19, r20
    a6ae:	90 0d       	add	r25, r0
    a6b0:	11 24       	eor	r1, r1
    a6b2:	a0 e0       	ldi	r26, 0x00	; 0
    a6b4:	b0 e0       	ldi	r27, 0x00	; 0
    a6b6:	f8 01       	movw	r30, r16
    a6b8:	80 83       	st	Z, r24
    a6ba:	91 83       	std	Z+1, r25	; 0x01
    a6bc:	a2 83       	std	Z+2, r26	; 0x02
    a6be:	b3 83       	std	Z+3, r27	; 0x03
    a6c0:	20 e0       	ldi	r18, 0x00	; 0
    a6c2:	30 e0       	ldi	r19, 0x00	; 0
    a6c4:	52 c0       	rjmp	.+164    	; 0xa76a <disk_ioctl+0x33a>
        }
      }
      break;

    case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
      *ptr = CardType;
    a6c6:	80 91 6f 25 	lds	r24, 0x256F
    a6ca:	fa 01       	movw	r30, r20
    a6cc:	80 83       	st	Z, r24
    a6ce:	f8 cf       	rjmp	.-16     	; 0xa6c0 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
      if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
    a6d0:	89 e4       	ldi	r24, 0x49	; 73
    a6d2:	01 c0       	rjmp	.+2      	; 0xa6d6 <disk_ioctl+0x2a6>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
      if (send_cmd(CMD10, 0) == 0    /* READ_CID */
    a6d4:	8a e4       	ldi	r24, 0x4A	; 74
    a6d6:	40 e0       	ldi	r20, 0x00	; 0
    a6d8:	50 e0       	ldi	r21, 0x00	; 0
    a6da:	60 e0       	ldi	r22, 0x00	; 0
    a6dc:	70 e0       	ldi	r23, 0x00	; 0
    a6de:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a6e2:	88 23       	and	r24, r24
    a6e4:	09 f0       	breq	.+2      	; 0xa6e8 <disk_ioctl+0x2b8>
    a6e6:	3f c0       	rjmp	.+126    	; 0xa766 <disk_ioctl+0x336>
    a6e8:	c8 01       	movw	r24, r16
    a6ea:	60 e1       	ldi	r22, 0x10	; 16
    a6ec:	70 e0       	ldi	r23, 0x00	; 0
    a6ee:	35 c0       	rjmp	.+106    	; 0xa75a <disk_ioctl+0x32a>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
    a6f0:	8a e7       	ldi	r24, 0x7A	; 122
    a6f2:	40 e0       	ldi	r20, 0x00	; 0
    a6f4:	50 e0       	ldi	r21, 0x00	; 0
    a6f6:	60 e0       	ldi	r22, 0x00	; 0
    a6f8:	70 e0       	ldi	r23, 0x00	; 0
    a6fa:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a6fe:	88 23       	and	r24, r24
    a700:	91 f5       	brne	.+100    	; 0xa766 <disk_ioctl+0x336>
    a702:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a704:	a0 ec       	ldi	r26, 0xC0	; 192
    a706:	ba e0       	ldi	r27, 0x0A	; 10
    a708:	9f ef       	ldi	r25, 0xFF	; 255
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a70a:	98 01       	movw	r18, r16
    a70c:	2d 5f       	subi	r18, 0xFD	; 253
    a70e:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a710:	13 96       	adiw	r26, 0x03	; 3
    a712:	9c 93       	st	X, r25
    a714:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a716:	80 91 c2 0a 	lds	r24, 0x0AC2
    a71a:	87 ff       	sbrs	r24, 7
    a71c:	fc cf       	rjmp	.-8      	; 0xa716 <disk_ioctl+0x2e6>
  return SPIE.DATA;
    a71e:	80 91 c3 0a 	lds	r24, 0x0AC3
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a722:	80 83       	st	Z, r24
    a724:	e2 17       	cp	r30, r18
    a726:	f3 07       	cpc	r31, r19
    a728:	59 f2       	breq	.-106    	; 0xa6c0 <disk_ioctl+0x290>
    a72a:	31 96       	adiw	r30, 0x01	; 1
    a72c:	f1 cf       	rjmp	.-30     	; 0xa710 <disk_ioctl+0x2e0>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
    a72e:	8d ec       	ldi	r24, 0xCD	; 205
    a730:	40 e0       	ldi	r20, 0x00	; 0
    a732:	50 e0       	ldi	r21, 0x00	; 0
    a734:	60 e0       	ldi	r22, 0x00	; 0
    a736:	70 e0       	ldi	r23, 0x00	; 0
    a738:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a73c:	88 23       	and	r24, r24
    a73e:	99 f4       	brne	.+38     	; 0xa766 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a740:	8f ef       	ldi	r24, 0xFF	; 255
    a742:	e0 ec       	ldi	r30, 0xC0	; 192
    a744:	fa e0       	ldi	r31, 0x0A	; 10
    a746:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a748:	80 91 c2 0a 	lds	r24, 0x0AC2
    a74c:	87 ff       	sbrs	r24, 7
    a74e:	fc cf       	rjmp	.-8      	; 0xa748 <disk_ioctl+0x318>
  return SPIE.DATA;
    a750:	80 91 c3 0a 	lds	r24, 0x0AC3
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
        rcvr_spi();
        if (rcvr_datablock(ptr, 64))
    a754:	c8 01       	movw	r24, r16
    a756:	60 e4       	ldi	r22, 0x40	; 64
    a758:	70 e0       	ldi	r23, 0x00	; 0
    a75a:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <rcvr_datablock>
    a75e:	20 e0       	ldi	r18, 0x00	; 0
    a760:	30 e0       	ldi	r19, 0x00	; 0
    a762:	89 2b       	or	r24, r25
    a764:	11 f4       	brne	.+4      	; 0xa76a <disk_ioctl+0x33a>
    a766:	21 e0       	ldi	r18, 0x01	; 1
    a768:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a76a:	80 e1       	ldi	r24, 0x10	; 16
    a76c:	e0 e8       	ldi	r30, 0x80	; 128
    a76e:	f6 e0       	ldi	r31, 0x06	; 6
    a770:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a772:	8f ef       	ldi	r24, 0xFF	; 255
    a774:	e0 ec       	ldi	r30, 0xC0	; 192
    a776:	fa e0       	ldi	r31, 0x0A	; 10
    a778:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a77a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a77e:	87 ff       	sbrs	r24, 7
    a780:	fc cf       	rjmp	.-8      	; 0xa77a <disk_ioctl+0x34a>
  return SPIE.DATA;
    a782:	80 91 c3 0a 	lds	r24, 0x0AC3
    a786:	02 c0       	rjmp	.+4      	; 0xa78c <disk_ioctl+0x35c>
    a788:	24 e0       	ldi	r18, 0x04	; 4
    a78a:	30 e0       	ldi	r19, 0x00	; 0

    release_spi();
  }

  return res;
}
    a78c:	c9 01       	movw	r24, r18
    a78e:	60 96       	adiw	r28, 0x10	; 16
    a790:	e5 e0       	ldi	r30, 0x05	; 5
    a792:	0c 94 74 58 	jmp	0xb0e8	; 0xb0e8 <__epilogue_restores__+0x1a>

0000a796 <disk_timerproc>:
{
  static BYTE pv;
  BYTE n, s;


  n = Timer1;            /* 100Hz decrement timer */
    a796:	80 91 6d 25 	lds	r24, 0x256D
  if (n) Timer1 = --n;
    a79a:	88 23       	and	r24, r24
    a79c:	19 f0       	breq	.+6      	; 0xa7a4 <disk_timerproc+0xe>
    a79e:	81 50       	subi	r24, 0x01	; 1
    a7a0:	80 93 6d 25 	sts	0x256D, r24
  n = Timer2;
    a7a4:	80 91 6e 25 	lds	r24, 0x256E
  if (n) Timer2 = --n;
    a7a8:	88 23       	and	r24, r24
    a7aa:	19 f0       	breq	.+6      	; 0xa7b2 <disk_timerproc+0x1c>
    a7ac:	81 50       	subi	r24, 0x01	; 1
    a7ae:	80 93 6e 25 	sts	0x256E, r24

  n = pv;
    a7b2:	90 91 6c 25 	lds	r25, 0x256C
  pv = SOCKPORT & (SOCKWP | SOCKINS);  /* Sample socket switch */
    a7b6:	80 91 e8 06 	lds	r24, 0x06E8
    a7ba:	83 70       	andi	r24, 0x03	; 3
    a7bc:	80 93 6c 25 	sts	0x256C, r24

  if (n == pv) {          /* Have contacts stabled? */
    a7c0:	98 17       	cp	r25, r24
    a7c2:	71 f4       	brne	.+28     	; 0xa7e0 <disk_timerproc+0x4a>
    s = Stat;
    a7c4:	80 91 d9 24 	lds	r24, 0x24D9

    if (pv & SOCKWP)      /* WP is H (write protected) */
    a7c8:	90 ff       	sbrs	r25, 0
    a7ca:	02 c0       	rjmp	.+4      	; 0xa7d0 <disk_timerproc+0x3a>
      s |= STA_PROTECT;
    a7cc:	84 60       	ori	r24, 0x04	; 4
    a7ce:	01 c0       	rjmp	.+2      	; 0xa7d2 <disk_timerproc+0x3c>
    else            /* WP is L (write enabled) */
      s &= ~STA_PROTECT;
    a7d0:	8b 7f       	andi	r24, 0xFB	; 251

    if (pv & SOCKINS)      /* INS = H (Socket empty) */
    a7d2:	91 ff       	sbrs	r25, 1
    a7d4:	02 c0       	rjmp	.+4      	; 0xa7da <disk_timerproc+0x44>
      s |= (STA_NODISK | STA_NOINIT);
    a7d6:	83 60       	ori	r24, 0x03	; 3
    a7d8:	01 c0       	rjmp	.+2      	; 0xa7dc <disk_timerproc+0x46>
    else            /* INS = L (Card inserted) */
      s &= ~STA_NODISK;
    a7da:	8d 7f       	andi	r24, 0xFD	; 253

    Stat = s;
    a7dc:	80 93 d9 24 	sts	0x24D9, r24
    a7e0:	08 95       	ret

0000a7e2 <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    a7e2:	1f 92       	push	r1
    a7e4:	0f 92       	push	r0
    a7e6:	0f b6       	in	r0, 0x3f	; 63
    a7e8:	0f 92       	push	r0
    a7ea:	08 b6       	in	r0, 0x38	; 56
    a7ec:	0f 92       	push	r0
    a7ee:	09 b6       	in	r0, 0x39	; 57
    a7f0:	0f 92       	push	r0
    a7f2:	0b b6       	in	r0, 0x3b	; 59
    a7f4:	0f 92       	push	r0
    a7f6:	11 24       	eor	r1, r1
    a7f8:	18 be       	out	0x38, r1	; 56
    a7fa:	19 be       	out	0x39, r1	; 57
    a7fc:	1b be       	out	0x3b, r1	; 59
    a7fe:	2f 93       	push	r18
    a800:	3f 93       	push	r19
    a802:	4f 93       	push	r20
    a804:	5f 93       	push	r21
    a806:	6f 93       	push	r22
    a808:	7f 93       	push	r23
    a80a:	8f 93       	push	r24
    a80c:	9f 93       	push	r25
    a80e:	af 93       	push	r26
    a810:	bf 93       	push	r27
    a812:	ef 93       	push	r30
    a814:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    a816:	0e 94 cb 53 	call	0xa796	; 0xa796 <disk_timerproc>
}
    a81a:	ff 91       	pop	r31
    a81c:	ef 91       	pop	r30
    a81e:	bf 91       	pop	r27
    a820:	af 91       	pop	r26
    a822:	9f 91       	pop	r25
    a824:	8f 91       	pop	r24
    a826:	7f 91       	pop	r23
    a828:	6f 91       	pop	r22
    a82a:	5f 91       	pop	r21
    a82c:	4f 91       	pop	r20
    a82e:	3f 91       	pop	r19
    a830:	2f 91       	pop	r18
    a832:	0f 90       	pop	r0
    a834:	0b be       	out	0x3b, r0	; 59
    a836:	0f 90       	pop	r0
    a838:	09 be       	out	0x39, r0	; 57
    a83a:	0f 90       	pop	r0
    a83c:	08 be       	out	0x38, r0	; 56
    a83e:	0f 90       	pop	r0
    a840:	0f be       	out	0x3f, r0	; 63
    a842:	0f 90       	pop	r0
    a844:	1f 90       	pop	r1
    a846:	18 95       	reti

0000a848 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    a848:	a4 e0       	ldi	r26, 0x04	; 4
    a84a:	b0 e0       	ldi	r27, 0x00	; 0
    a84c:	ea e2       	ldi	r30, 0x2A	; 42
    a84e:	f4 e5       	ldi	r31, 0x54	; 84
    a850:	0c 94 57 58 	jmp	0xb0ae	; 0xb0ae <__prologue_saves__+0x18>
  BYTE n, cmd, ty, ocr[4];


  if (drv) return STA_NOINIT;      /* Supports only single drive */
    a854:	88 23       	and	r24, r24
    a856:	11 f0       	breq	.+4      	; 0xa85c <disk_initialize+0x14>
    a858:	81 e0       	ldi	r24, 0x01	; 1
    a85a:	d8 c0       	rjmp	.+432    	; 0xaa0c <disk_initialize+0x1c4>
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */
    a85c:	80 91 d9 24 	lds	r24, 0x24D9
    a860:	81 fd       	sbrc	r24, 1
    a862:	d2 c0       	rjmp	.+420    	; 0xaa08 <disk_initialize+0x1c0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a864:	83 e0       	ldi	r24, 0x03	; 3
    a866:	80 93 6d 25 	sts	0x256D, r24
    a86a:	80 91 6d 25 	lds	r24, 0x256D
    a86e:	88 23       	and	r24, r24
    a870:	e1 f7       	brne	.-8      	; 0xa86a <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a872:	13 e5       	ldi	r17, 0x53	; 83
    a874:	10 93 c0 0a 	sts	0x0AC0, r17

  if (drv) return STA_NOINIT;      /* Supports only single drive */
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
    a878:	81 e4       	ldi	r24, 0x41	; 65
    a87a:	90 e0       	ldi	r25, 0x00	; 0
    a87c:	64 e0       	ldi	r22, 0x04	; 4
    a87e:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <CCPWrite>
  FCLK_SLOW();
    a882:	10 93 c0 0a 	sts	0x0AC0, r17
    a886:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a888:	e0 ec       	ldi	r30, 0xC0	; 192
    a88a:	fa e0       	ldi	r31, 0x0A	; 10
    a88c:	2f ef       	ldi	r18, 0xFF	; 255
    a88e:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a890:	80 91 c2 0a 	lds	r24, 0x0AC2
    a894:	87 ff       	sbrs	r24, 7
    a896:	fc cf       	rjmp	.-8      	; 0xa890 <disk_initialize+0x48>
  return SPIE.DATA;
    a898:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
  FCLK_SLOW();
  for (n = 10; n; n--) rcvr_spi();  /* 80 dummy clocks */
    a89c:	91 50       	subi	r25, 0x01	; 1
    a89e:	b9 f7       	brne	.-18     	; 0xa88e <disk_initialize+0x46>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    a8a0:	80 e4       	ldi	r24, 0x40	; 64
    a8a2:	40 e0       	ldi	r20, 0x00	; 0
    a8a4:	50 e0       	ldi	r21, 0x00	; 0
    a8a6:	60 e0       	ldi	r22, 0x00	; 0
    a8a8:	70 e0       	ldi	r23, 0x00	; 0
    a8aa:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a8ae:	81 30       	cpi	r24, 0x01	; 1
    a8b0:	09 f0       	breq	.+2      	; 0xa8b4 <disk_initialize+0x6c>
    a8b2:	87 c0       	rjmp	.+270    	; 0xa9c2 <disk_initialize+0x17a>
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    a8b4:	84 e6       	ldi	r24, 0x64	; 100
    a8b6:	80 93 6d 25 	sts	0x256D, r24
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
    a8ba:	88 e4       	ldi	r24, 0x48	; 72
    a8bc:	4a ea       	ldi	r20, 0xAA	; 170
    a8be:	51 e0       	ldi	r21, 0x01	; 1
    a8c0:	60 e0       	ldi	r22, 0x00	; 0
    a8c2:	70 e0       	ldi	r23, 0x00	; 0
    a8c4:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a8c8:	81 30       	cpi	r24, 0x01	; 1
    a8ca:	09 f0       	breq	.+2      	; 0xa8ce <disk_initialize+0x86>
    a8cc:	53 c0       	rjmp	.+166    	; 0xa974 <disk_initialize+0x12c>
    a8ce:	7e 01       	movw	r14, r28
    a8d0:	08 94       	sec
    a8d2:	e1 1c       	adc	r14, r1
    a8d4:	f1 1c       	adc	r15, r1
    a8d6:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8d8:	e0 ec       	ldi	r30, 0xC0	; 192
    a8da:	fa e0       	ldi	r31, 0x0A	; 10
    a8dc:	9f ef       	ldi	r25, 0xFF	; 255

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    a8de:	9e 01       	movw	r18, r28
    a8e0:	2b 5f       	subi	r18, 0xFB	; 251
    a8e2:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8e4:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a8e6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a8ea:	87 ff       	sbrs	r24, 7
    a8ec:	fc cf       	rjmp	.-8      	; 0xa8e6 <disk_initialize+0x9e>
  return SPIE.DATA;
    a8ee:	80 91 c3 0a 	lds	r24, 0x0AC3

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    a8f2:	d8 01       	movw	r26, r16
    a8f4:	8d 93       	st	X+, r24
    a8f6:	8d 01       	movw	r16, r26
    a8f8:	a2 17       	cp	r26, r18
    a8fa:	b3 07       	cpc	r27, r19
    a8fc:	99 f7       	brne	.-26     	; 0xa8e4 <disk_initialize+0x9c>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
    a8fe:	8b 81       	ldd	r24, Y+3	; 0x03
    a900:	81 30       	cpi	r24, 0x01	; 1
    a902:	09 f0       	breq	.+2      	; 0xa906 <disk_initialize+0xbe>
    a904:	5e c0       	rjmp	.+188    	; 0xa9c2 <disk_initialize+0x17a>
    a906:	8c 81       	ldd	r24, Y+4	; 0x04
    a908:	8a 3a       	cpi	r24, 0xAA	; 170
    a90a:	09 f0       	breq	.+2      	; 0xa90e <disk_initialize+0xc6>
    a90c:	5a c0       	rjmp	.+180    	; 0xa9c2 <disk_initialize+0x17a>
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    a90e:	80 91 6d 25 	lds	r24, 0x256D
    a912:	88 23       	and	r24, r24
    a914:	49 f0       	breq	.+18     	; 0xa928 <disk_initialize+0xe0>
    a916:	89 ee       	ldi	r24, 0xE9	; 233
    a918:	40 e0       	ldi	r20, 0x00	; 0
    a91a:	50 e0       	ldi	r21, 0x00	; 0
    a91c:	60 e0       	ldi	r22, 0x00	; 0
    a91e:	70 e4       	ldi	r23, 0x40	; 64
    a920:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a924:	88 23       	and	r24, r24
    a926:	99 f7       	brne	.-26     	; 0xa90e <disk_initialize+0xc6>
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
    a928:	80 91 6d 25 	lds	r24, 0x256D
    a92c:	88 23       	and	r24, r24
    a92e:	09 f4       	brne	.+2      	; 0xa932 <disk_initialize+0xea>
    a930:	48 c0       	rjmp	.+144    	; 0xa9c2 <disk_initialize+0x17a>
    a932:	8a e7       	ldi	r24, 0x7A	; 122
    a934:	40 e0       	ldi	r20, 0x00	; 0
    a936:	50 e0       	ldi	r21, 0x00	; 0
    a938:	60 e0       	ldi	r22, 0x00	; 0
    a93a:	70 e0       	ldi	r23, 0x00	; 0
    a93c:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a940:	88 23       	and	r24, r24
    a942:	09 f0       	breq	.+2      	; 0xa946 <disk_initialize+0xfe>
    a944:	3e c0       	rjmp	.+124    	; 0xa9c2 <disk_initialize+0x17a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a946:	e0 ec       	ldi	r30, 0xC0	; 192
    a948:	fa e0       	ldi	r31, 0x0A	; 10
    a94a:	9f ef       	ldi	r25, 0xFF	; 255
    a94c:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a94e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a952:	87 ff       	sbrs	r24, 7
    a954:	fc cf       	rjmp	.-8      	; 0xa94e <disk_initialize+0x106>
  return SPIE.DATA;
    a956:	80 91 c3 0a 	lds	r24, 0x0AC3
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
          for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    a95a:	d7 01       	movw	r26, r14
    a95c:	8d 93       	st	X+, r24
    a95e:	7d 01       	movw	r14, r26
    a960:	a0 17       	cp	r26, r16
    a962:	b1 07       	cpc	r27, r17
    a964:	99 f7       	brne	.-26     	; 0xa94c <disk_initialize+0x104>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    a966:	89 81       	ldd	r24, Y+1	; 0x01
    a968:	86 fd       	sbrc	r24, 6
    a96a:	02 c0       	rjmp	.+4      	; 0xa970 <disk_initialize+0x128>
    a96c:	14 e0       	ldi	r17, 0x04	; 4
    a96e:	2a c0       	rjmp	.+84     	; 0xa9c4 <disk_initialize+0x17c>
    a970:	1c e0       	ldi	r17, 0x0C	; 12
    a972:	28 c0       	rjmp	.+80     	; 0xa9c4 <disk_initialize+0x17c>
        }
      }
    } else {              /* SDSC or MMC */
      if (send_cmd(ACMD41, 0) <= 1)   {
    a974:	89 ee       	ldi	r24, 0xE9	; 233
    a976:	40 e0       	ldi	r20, 0x00	; 0
    a978:	50 e0       	ldi	r21, 0x00	; 0
    a97a:	60 e0       	ldi	r22, 0x00	; 0
    a97c:	70 e0       	ldi	r23, 0x00	; 0
    a97e:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a982:	82 30       	cpi	r24, 0x02	; 2
    a984:	18 f0       	brcs	.+6      	; 0xa98c <disk_initialize+0x144>
    a986:	01 e4       	ldi	r16, 0x41	; 65
    a988:	11 e0       	ldi	r17, 0x01	; 1
    a98a:	02 c0       	rjmp	.+4      	; 0xa990 <disk_initialize+0x148>
    a98c:	09 ee       	ldi	r16, 0xE9	; 233
    a98e:	12 e0       	ldi	r17, 0x02	; 2
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      while (Timer1 && send_cmd(cmd, 0));      /* Wait for leaving idle state */
    a990:	80 91 6d 25 	lds	r24, 0x256D
    a994:	88 23       	and	r24, r24
    a996:	49 f0       	breq	.+18     	; 0xa9aa <disk_initialize+0x162>
    a998:	80 2f       	mov	r24, r16
    a99a:	40 e0       	ldi	r20, 0x00	; 0
    a99c:	50 e0       	ldi	r21, 0x00	; 0
    a99e:	60 e0       	ldi	r22, 0x00	; 0
    a9a0:	70 e0       	ldi	r23, 0x00	; 0
    a9a2:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a9a6:	88 23       	and	r24, r24
    a9a8:	99 f7       	brne	.-26     	; 0xa990 <disk_initialize+0x148>
      if (!Timer1 || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    a9aa:	80 91 6d 25 	lds	r24, 0x256D
    a9ae:	88 23       	and	r24, r24
    a9b0:	41 f0       	breq	.+16     	; 0xa9c2 <disk_initialize+0x17a>
    a9b2:	80 e5       	ldi	r24, 0x50	; 80
    a9b4:	40 e0       	ldi	r20, 0x00	; 0
    a9b6:	52 e0       	ldi	r21, 0x02	; 2
    a9b8:	60 e0       	ldi	r22, 0x00	; 0
    a9ba:	70 e0       	ldi	r23, 0x00	; 0
    a9bc:	0e 94 ab 50 	call	0xa156	; 0xa156 <send_cmd>
    a9c0:	81 11       	cpse	r24, r1
    a9c2:	10 e0       	ldi	r17, 0x00	; 0
        ty = 0;
    }
  }
  CardType = ty;
    a9c4:	10 93 6f 25 	sts	0x256F, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a9c8:	80 e1       	ldi	r24, 0x10	; 16
    a9ca:	e0 e8       	ldi	r30, 0x80	; 128
    a9cc:	f6 e0       	ldi	r31, 0x06	; 6
    a9ce:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a9d0:	8f ef       	ldi	r24, 0xFF	; 255
    a9d2:	e0 ec       	ldi	r30, 0xC0	; 192
    a9d4:	fa e0       	ldi	r31, 0x0A	; 10
    a9d6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a9d8:	80 91 c2 0a 	lds	r24, 0x0AC2
    a9dc:	87 ff       	sbrs	r24, 7
    a9de:	fc cf       	rjmp	.-8      	; 0xa9d8 <disk_initialize+0x190>
  return SPIE.DATA;
    a9e0:	80 91 c3 0a 	lds	r24, 0x0AC3
    }
  }
  CardType = ty;
  release_spi();

  if (ty) {      /* Initialization succeded */
    a9e4:	11 23       	and	r17, r17
    a9e6:	49 f0       	breq	.+18     	; 0xa9fa <disk_initialize+0x1b2>
    Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT */
    a9e8:	80 91 d9 24 	lds	r24, 0x24D9
    a9ec:	8e 7f       	andi	r24, 0xFE	; 254
    a9ee:	80 93 d9 24 	sts	0x24D9, r24
    FCLK_FAST();
    a9f2:	80 ed       	ldi	r24, 0xD0	; 208
    a9f4:	80 93 c0 0a 	sts	0x0AC0, r24
    a9f8:	02 c0       	rjmp	.+4      	; 0xa9fe <disk_initialize+0x1b6>
  } else {      /* Initialization failed */
    power_off();
    a9fa:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <power_off>
  }

  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
    a9fe:	81 e4       	ldi	r24, 0x41	; 65
    aa00:	90 e0       	ldi	r25, 0x00	; 0
    aa02:	60 e0       	ldi	r22, 0x00	; 0
    aa04:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <CCPWrite>
  return Stat;
    aa08:	80 91 d9 24 	lds	r24, 0x24D9
}
    aa0c:	24 96       	adiw	r28, 0x04	; 4
    aa0e:	e6 e0       	ldi	r30, 0x06	; 6
    aa10:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__epilogue_restores__+0x18>

0000aa14 <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    aa14:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    aa16:	8e e1       	ldi	r24, 0x1E	; 30
    aa18:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    aa1a:	8b e3       	ldi	r24, 0x3B	; 59
    aa1c:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    aa1e:	8b e0       	ldi	r24, 0x0B	; 11
    aa20:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    aa22:	83 e0       	ldi	r24, 0x03	; 3
    aa24:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    aa26:	89 e0       	ldi	r24, 0x09	; 9
    aa28:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    aa2a:	89 ed       	ldi	r24, 0xD9	; 217
    aa2c:	97 e0       	ldi	r25, 0x07	; 7
    aa2e:	80 83       	st	Z, r24
    aa30:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    aa32:	81 e0       	ldi	r24, 0x01	; 1
    aa34:	90 e0       	ldi	r25, 0x00	; 0
    aa36:	08 95       	ret

0000aa38 <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    aa38:	81 e0       	ldi	r24, 0x01	; 1
    aa3a:	90 e0       	ldi	r25, 0x00	; 0
    aa3c:	08 95       	ret

0000aa3e <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    aa3e:	81 e0       	ldi	r24, 0x01	; 1
    aa40:	90 e0       	ldi	r25, 0x00	; 0
    aa42:	08 95       	ret

0000aa44 <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    aa44:	6f e6       	ldi	r22, 0x6F	; 111
    aa46:	7f e5       	ldi	r23, 0x5F	; 95
    aa48:	83 e2       	ldi	r24, 0x23	; 35
    aa4a:	9b e3       	ldi	r25, 0x3B	; 59
    aa4c:	08 95       	ret

0000aa4e <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    aa4e:	1f 92       	push	r1
    aa50:	0f 92       	push	r0
    aa52:	0f b6       	in	r0, 0x3f	; 63
    aa54:	0f 92       	push	r0
    aa56:	08 b6       	in	r0, 0x38	; 56
    aa58:	0f 92       	push	r0
    aa5a:	09 b6       	in	r0, 0x39	; 57
    aa5c:	0f 92       	push	r0
    aa5e:	11 24       	eor	r1, r1
    aa60:	18 be       	out	0x38, r1	; 56
    aa62:	19 be       	out	0x39, r1	; 57
    aa64:	8f 93       	push	r24
    aa66:	9f 93       	push	r25
    aa68:	af 93       	push	r26
    aa6a:	bf 93       	push	r27
	ticks++;
    aa6c:	80 91 70 25 	lds	r24, 0x2570
    aa70:	90 91 71 25 	lds	r25, 0x2571
    aa74:	a0 91 72 25 	lds	r26, 0x2572
    aa78:	b0 91 73 25 	lds	r27, 0x2573
    aa7c:	01 96       	adiw	r24, 0x01	; 1
    aa7e:	a1 1d       	adc	r26, r1
    aa80:	b1 1d       	adc	r27, r1
    aa82:	80 93 70 25 	sts	0x2570, r24
    aa86:	90 93 71 25 	sts	0x2571, r25
    aa8a:	a0 93 72 25 	sts	0x2572, r26
    aa8e:	b0 93 73 25 	sts	0x2573, r27
}
    aa92:	bf 91       	pop	r27
    aa94:	af 91       	pop	r26
    aa96:	9f 91       	pop	r25
    aa98:	8f 91       	pop	r24
    aa9a:	0f 90       	pop	r0
    aa9c:	09 be       	out	0x39, r0	; 57
    aa9e:	0f 90       	pop	r0
    aaa0:	08 be       	out	0x38, r0	; 56
    aaa2:	0f 90       	pop	r0
    aaa4:	0f be       	out	0x3f, r0	; 63
    aaa6:	0f 90       	pop	r0
    aaa8:	1f 90       	pop	r1
    aaaa:	18 95       	reti

0000aaac <timer_init>:


void timer_init(void)
{	
	ticks=0;
    aaac:	10 92 70 25 	sts	0x2570, r1
    aab0:	10 92 71 25 	sts	0x2571, r1
    aab4:	10 92 72 25 	sts	0x2572, r1
    aab8:	10 92 73 25 	sts	0x2573, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    aabc:	e0 e0       	ldi	r30, 0x00	; 0
    aabe:	fb e0       	ldi	r31, 0x0B	; 11
    aac0:	84 e0       	ldi	r24, 0x04	; 4
    aac2:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    aac4:	8f e9       	ldi	r24, 0x9F	; 159
    aac6:	9f e0       	ldi	r25, 0x0F	; 15
    aac8:	86 a3       	std	Z+38, r24	; 0x26
    aaca:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    aacc:	82 e0       	ldi	r24, 0x02	; 2
    aace:	86 83       	std	Z+6, r24	; 0x06
}
    aad0:	08 95       	ret

0000aad2 <Wait>:

void Wait(uint16_t delay)
{
    aad2:	ef 92       	push	r14
    aad4:	ff 92       	push	r15
    aad6:	0f 93       	push	r16
    aad8:	1f 93       	push	r17
	uint32_t temp=ticks;
    aada:	e0 90 70 25 	lds	r14, 0x2570
    aade:	f0 90 71 25 	lds	r15, 0x2571
    aae2:	00 91 72 25 	lds	r16, 0x2572
    aae6:	10 91 73 25 	lds	r17, 0x2573

	while(ticks - temp < delay);
    aaea:	9c 01       	movw	r18, r24
    aaec:	40 e0       	ldi	r20, 0x00	; 0
    aaee:	50 e0       	ldi	r21, 0x00	; 0
    aaf0:	80 91 70 25 	lds	r24, 0x2570
    aaf4:	90 91 71 25 	lds	r25, 0x2571
    aaf8:	a0 91 72 25 	lds	r26, 0x2572
    aafc:	b0 91 73 25 	lds	r27, 0x2573
    ab00:	8e 19       	sub	r24, r14
    ab02:	9f 09       	sbc	r25, r15
    ab04:	a0 0b       	sbc	r26, r16
    ab06:	b1 0b       	sbc	r27, r17
    ab08:	82 17       	cp	r24, r18
    ab0a:	93 07       	cpc	r25, r19
    ab0c:	a4 07       	cpc	r26, r20
    ab0e:	b5 07       	cpc	r27, r21
    ab10:	78 f3       	brcs	.-34     	; 0xaaf0 <Wait+0x1e>
}
    ab12:	1f 91       	pop	r17
    ab14:	0f 91       	pop	r16
    ab16:	ff 90       	pop	r15
    ab18:	ef 90       	pop	r14
    ab1a:	08 95       	ret

0000ab1c <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    ab1c:	e0 e4       	ldi	r30, 0x40	; 64
    ab1e:	fb e0       	ldi	r31, 0x0B	; 11
    ab20:	85 e0       	ldi	r24, 0x05	; 5
    ab22:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    ab24:	10 a2       	std	Z+32, r1	; 0x20
    ab26:	11 a2       	std	Z+33, r1	; 0x21
}
    ab28:	08 95       	ret

0000ab2a <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    ab2a:	e0 e4       	ldi	r30, 0x40	; 64
    ab2c:	fb e0       	ldi	r31, 0x0B	; 11
    ab2e:	20 a1       	ldd	r18, Z+32	; 0x20
    ab30:	31 a1       	ldd	r19, Z+33	; 0x21
    ab32:	22 0f       	add	r18, r18
    ab34:	33 1f       	adc	r19, r19
	return del_t;
}	
    ab36:	c9 01       	movw	r24, r18
    ab38:	08 95       	ret

0000ab3a <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    ab3a:	10 92 70 25 	sts	0x2570, r1
    ab3e:	10 92 71 25 	sts	0x2571, r1
    ab42:	10 92 72 25 	sts	0x2572, r1
    ab46:	10 92 73 25 	sts	0x2573, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    ab4a:	e0 e0       	ldi	r30, 0x00	; 0
    ab4c:	fb e0       	ldi	r31, 0x0B	; 11
    ab4e:	84 e0       	ldi	r24, 0x04	; 4
    ab50:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    ab52:	8f e9       	ldi	r24, 0x9F	; 159
    ab54:	9f e0       	ldi	r25, 0x0F	; 15
    ab56:	86 a3       	std	Z+38, r24	; 0x26
    ab58:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    ab5a:	82 e0       	ldi	r24, 0x02	; 2
    ab5c:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    ab5e:	10 a2       	std	Z+32, r1	; 0x20
    ab60:	11 a2       	std	Z+33, r1	; 0x21
}
    ab62:	08 95       	ret

0000ab64 <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    ab64:	20 91 70 25 	lds	r18, 0x2570
    ab68:	30 91 71 25 	lds	r19, 0x2571
    ab6c:	40 91 72 25 	lds	r20, 0x2572
    ab70:	50 91 73 25 	lds	r21, 0x2573
	return del_t;
}	
    ab74:	b9 01       	movw	r22, r18
    ab76:	ca 01       	movw	r24, r20
    ab78:	08 95       	ret

0000ab7a <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    ab7a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab7c:	e0 ec       	ldi	r30, 0xC0	; 192
    ab7e:	f1 e0       	ldi	r31, 0x01	; 1
    ab80:	80 91 cf 01 	lds	r24, 0x01CF
    ab84:	87 fd       	sbrc	r24, 7
    ab86:	fa cf       	rjmp	.-12     	; 0xab7c <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    ab88:	26 2f       	mov	r18, r22
    ab8a:	30 e0       	ldi	r19, 0x00	; 0
    ab8c:	2f 71       	andi	r18, 0x1F	; 31
    ab8e:	30 70       	andi	r19, 0x00	; 0
    ab90:	89 2f       	mov	r24, r25
    ab92:	90 e0       	ldi	r25, 0x00	; 0
    ab94:	45 e0       	ldi	r20, 0x05	; 5
    ab96:	88 0f       	add	r24, r24
    ab98:	99 1f       	adc	r25, r25
    ab9a:	4a 95       	dec	r20
    ab9c:	e1 f7       	brne	.-8      	; 0xab96 <EEPROM_ReadByte+0x1c>
    ab9e:	28 2b       	or	r18, r24
    aba0:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    aba2:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aba6:	83 2f       	mov	r24, r19
    aba8:	8f 71       	andi	r24, 0x1F	; 31
    abaa:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    abac:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    abae:	86 e0       	ldi	r24, 0x06	; 6
    abb0:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    abb2:	eb ec       	ldi	r30, 0xCB	; 203
    abb4:	f1 e0       	ldi	r31, 0x01	; 1
    abb6:	21 e0       	ldi	r18, 0x01	; 1
    abb8:	30 e0       	ldi	r19, 0x00	; 0
    abba:	88 ed       	ldi	r24, 0xD8	; 216
    abbc:	90 e0       	ldi	r25, 0x00	; 0
    abbe:	84 bf       	out	0x34, r24	; 52
    abc0:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    abc2:	80 91 c4 01 	lds	r24, 0x01C4
}
    abc6:	08 95       	ret

0000abc8 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    abc8:	80 91 cf 01 	lds	r24, 0x01CF
    abcc:	87 fd       	sbrc	r24, 7
    abce:	fc cf       	rjmp	.-8      	; 0xabc8 <EEPROM_WaitForNVM>
}
    abd0:	08 95       	ret

0000abd2 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    abd2:	80 91 cf 01 	lds	r24, 0x01CF
    abd6:	87 fd       	sbrc	r24, 7
    abd8:	fc cf       	rjmp	.-8      	; 0xabd2 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    abda:	80 91 cf 01 	lds	r24, 0x01CF
    abde:	81 ff       	sbrs	r24, 1
    abe0:	0c c0       	rjmp	.+24     	; 0xabfa <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    abe2:	86 e3       	ldi	r24, 0x36	; 54
    abe4:	e0 ec       	ldi	r30, 0xC0	; 192
    abe6:	f1 e0       	ldi	r31, 0x01	; 1
    abe8:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    abea:	eb ec       	ldi	r30, 0xCB	; 203
    abec:	f1 e0       	ldi	r31, 0x01	; 1
    abee:	21 e0       	ldi	r18, 0x01	; 1
    abf0:	30 e0       	ldi	r19, 0x00	; 0
    abf2:	88 ed       	ldi	r24, 0xD8	; 216
    abf4:	90 e0       	ldi	r25, 0x00	; 0
    abf6:	84 bf       	out	0x34, r24	; 52
    abf8:	20 83       	st	Z, r18
    abfa:	08 95       	ret

0000abfc <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    abfc:	df 92       	push	r13
    abfe:	ef 92       	push	r14
    ac00:	ff 92       	push	r15
    ac02:	0f 93       	push	r16
    ac04:	1f 93       	push	r17
    ac06:	e8 2e       	mov	r14, r24
    ac08:	06 2f       	mov	r16, r22
    ac0a:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    ac0c:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ac10:	e0 ec       	ldi	r30, 0xC0	; 192
    ac12:	f1 e0       	ldi	r31, 0x01	; 1
    ac14:	83 e3       	ldi	r24, 0x33	; 51
    ac16:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    ac18:	10 e0       	ldi	r17, 0x00	; 0
    ac1a:	0f 71       	andi	r16, 0x1F	; 31
    ac1c:	10 70       	andi	r17, 0x00	; 0
    ac1e:	ff 24       	eor	r15, r15
    ac20:	55 e0       	ldi	r21, 0x05	; 5
    ac22:	ee 0c       	add	r14, r14
    ac24:	ff 1c       	adc	r15, r15
    ac26:	5a 95       	dec	r21
    ac28:	e1 f7       	brne	.-8      	; 0xac22 <EEPROM_WriteByte+0x26>
    ac2a:	0e 29       	or	r16, r14
    ac2c:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    ac2e:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    ac30:	81 2f       	mov	r24, r17
    ac32:	8f 71       	andi	r24, 0x1F	; 31
    ac34:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ac36:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    ac38:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    ac3a:	85 e3       	ldi	r24, 0x35	; 53
    ac3c:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ac3e:	eb ec       	ldi	r30, 0xCB	; 203
    ac40:	f1 e0       	ldi	r31, 0x01	; 1
    ac42:	21 e0       	ldi	r18, 0x01	; 1
    ac44:	30 e0       	ldi	r19, 0x00	; 0
    ac46:	88 ed       	ldi	r24, 0xD8	; 216
    ac48:	90 e0       	ldi	r25, 0x00	; 0
    ac4a:	84 bf       	out	0x34, r24	; 52
    ac4c:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    ac4e:	1f 91       	pop	r17
    ac50:	0f 91       	pop	r16
    ac52:	ff 90       	pop	r15
    ac54:	ef 90       	pop	r14
    ac56:	df 90       	pop	r13
    ac58:	08 95       	ret

0000ac5a <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    ac5a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ac5c:	e0 ec       	ldi	r30, 0xC0	; 192
    ac5e:	f1 e0       	ldi	r31, 0x01	; 1
    ac60:	80 91 cf 01 	lds	r24, 0x01CF
    ac64:	87 fd       	sbrc	r24, 7
    ac66:	fa cf       	rjmp	.-12     	; 0xac5c <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ac68:	83 e3       	ldi	r24, 0x33	; 51
    ac6a:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    ac6c:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    ac70:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ac72:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    ac74:	64 83       	std	Z+4, r22	; 0x04
}
    ac76:	08 95       	ret

0000ac78 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    ac78:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ac7a:	e0 ec       	ldi	r30, 0xC0	; 192
    ac7c:	f1 e0       	ldi	r31, 0x01	; 1
    ac7e:	80 91 cf 01 	lds	r24, 0x01CF
    ac82:	87 fd       	sbrc	r24, 7
    ac84:	fa cf       	rjmp	.-12     	; 0xac7a <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ac86:	83 e3       	ldi	r24, 0x33	; 51
    ac88:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    ac8a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ac8c:	12 82       	std	Z+2, r1	; 0x02
    ac8e:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    ac90:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    ac94:	8d 91       	ld	r24, X+
    ac96:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    ac98:	9f 5f       	subi	r25, 0xFF	; 255
    ac9a:	90 32       	cpi	r25, 0x20	; 32
    ac9c:	c9 f7       	brne	.-14     	; 0xac90 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    ac9e:	08 95       	ret

0000aca0 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    aca0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aca2:	e0 ec       	ldi	r30, 0xC0	; 192
    aca4:	f1 e0       	ldi	r31, 0x01	; 1
    aca6:	80 91 cf 01 	lds	r24, 0x01CF
    acaa:	87 fd       	sbrc	r24, 7
    acac:	fa cf       	rjmp	.-12     	; 0xaca2 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    acae:	89 2f       	mov	r24, r25
    acb0:	90 e0       	ldi	r25, 0x00	; 0
    acb2:	65 e0       	ldi	r22, 0x05	; 5
    acb4:	88 0f       	add	r24, r24
    acb6:	99 1f       	adc	r25, r25
    acb8:	6a 95       	dec	r22
    acba:	e1 f7       	brne	.-8      	; 0xacb4 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    acbc:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    acc0:	89 2f       	mov	r24, r25
    acc2:	8f 71       	andi	r24, 0x1F	; 31
    acc4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    acc6:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    acc8:	85 e3       	ldi	r24, 0x35	; 53
    acca:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    accc:	eb ec       	ldi	r30, 0xCB	; 203
    acce:	f1 e0       	ldi	r31, 0x01	; 1
    acd0:	21 e0       	ldi	r18, 0x01	; 1
    acd2:	30 e0       	ldi	r19, 0x00	; 0
    acd4:	88 ed       	ldi	r24, 0xD8	; 216
    acd6:	90 e0       	ldi	r25, 0x00	; 0
    acd8:	84 bf       	out	0x34, r24	; 52
    acda:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    acdc:	08 95       	ret

0000acde <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    acde:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ace0:	e0 ec       	ldi	r30, 0xC0	; 192
    ace2:	f1 e0       	ldi	r31, 0x01	; 1
    ace4:	80 91 cf 01 	lds	r24, 0x01CF
    ace8:	87 fd       	sbrc	r24, 7
    acea:	fa cf       	rjmp	.-12     	; 0xace0 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    acec:	89 2f       	mov	r24, r25
    acee:	90 e0       	ldi	r25, 0x00	; 0
    acf0:	75 e0       	ldi	r23, 0x05	; 5
    acf2:	88 0f       	add	r24, r24
    acf4:	99 1f       	adc	r25, r25
    acf6:	7a 95       	dec	r23
    acf8:	e1 f7       	brne	.-8      	; 0xacf2 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    acfa:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    acfe:	89 2f       	mov	r24, r25
    ad00:	8f 71       	andi	r24, 0x1F	; 31
    ad02:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ad04:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    ad06:	82 e3       	ldi	r24, 0x32	; 50
    ad08:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ad0a:	eb ec       	ldi	r30, 0xCB	; 203
    ad0c:	f1 e0       	ldi	r31, 0x01	; 1
    ad0e:	21 e0       	ldi	r18, 0x01	; 1
    ad10:	30 e0       	ldi	r19, 0x00	; 0
    ad12:	88 ed       	ldi	r24, 0xD8	; 216
    ad14:	90 e0       	ldi	r25, 0x00	; 0
    ad16:	84 bf       	out	0x34, r24	; 52
    ad18:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    ad1a:	08 95       	ret

0000ad1c <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    ad1c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ad1e:	e0 ec       	ldi	r30, 0xC0	; 192
    ad20:	f1 e0       	ldi	r31, 0x01	; 1
    ad22:	80 91 cf 01 	lds	r24, 0x01CF
    ad26:	87 fd       	sbrc	r24, 7
    ad28:	fa cf       	rjmp	.-12     	; 0xad1e <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    ad2a:	89 2f       	mov	r24, r25
    ad2c:	90 e0       	ldi	r25, 0x00	; 0
    ad2e:	a5 e0       	ldi	r26, 0x05	; 5
    ad30:	88 0f       	add	r24, r24
    ad32:	99 1f       	adc	r25, r25
    ad34:	aa 95       	dec	r26
    ad36:	e1 f7       	brne	.-8      	; 0xad30 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    ad38:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    ad3c:	89 2f       	mov	r24, r25
    ad3e:	8f 71       	andi	r24, 0x1F	; 31
    ad40:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ad42:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    ad44:	84 e3       	ldi	r24, 0x34	; 52
    ad46:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ad48:	eb ec       	ldi	r30, 0xCB	; 203
    ad4a:	f1 e0       	ldi	r31, 0x01	; 1
    ad4c:	21 e0       	ldi	r18, 0x01	; 1
    ad4e:	30 e0       	ldi	r19, 0x00	; 0
    ad50:	88 ed       	ldi	r24, 0xD8	; 216
    ad52:	90 e0       	ldi	r25, 0x00	; 0
    ad54:	84 bf       	out	0x34, r24	; 52
    ad56:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    ad58:	08 95       	ret

0000ad5a <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ad5a:	80 91 cf 01 	lds	r24, 0x01CF
    ad5e:	87 fd       	sbrc	r24, 7
    ad60:	fc cf       	rjmp	.-8      	; 0xad5a <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    ad62:	80 e3       	ldi	r24, 0x30	; 48
    ad64:	e0 ec       	ldi	r30, 0xC0	; 192
    ad66:	f1 e0       	ldi	r31, 0x01	; 1
    ad68:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ad6a:	eb ec       	ldi	r30, 0xCB	; 203
    ad6c:	f1 e0       	ldi	r31, 0x01	; 1
    ad6e:	21 e0       	ldi	r18, 0x01	; 1
    ad70:	30 e0       	ldi	r19, 0x00	; 0
    ad72:	88 ed       	ldi	r24, 0xD8	; 216
    ad74:	90 e0       	ldi	r25, 0x00	; 0
    ad76:	84 bf       	out	0x34, r24	; 52
    ad78:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    ad7a:	08 95       	ret

0000ad7c <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    ad7c:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    ad7e:	19 f4       	brne	.+6      	; 0xad86 <xputc+0xa>
	ldi	r24, 13		;
    ad80:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    ad82:	01 d0       	rcall	.+2      	; 0xad86 <xputc+0xa>
	ldi	r24, 10		;/
    ad84:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    ad86:	ff 93       	push	r31
	push	ZL
    ad88:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    ad8a:	e0 91 74 25 	lds	r30, 0x2574
	lds	ZH, xfunc_out+1	;/
    ad8e:	f0 91 75 25 	lds	r31, 0x2575
	icall
    ad92:	09 95       	icall
	pop	ZL
    ad94:	ef 91       	pop	r30
	pop	ZH
    ad96:	ff 91       	pop	r31
	ret
    ad98:	08 95       	ret

0000ad9a <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    ad9a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    ad9c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    ad9e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    ada0:	11 f0       	breq	.+4      	; 0xada6 <xputs+0xc>
	rcall	xputc
    ada2:	ec df       	rcall	.-40     	; 0xad7c <xputc>
	rjmp	1b
    ada4:	fb cf       	rjmp	.-10     	; 0xad9c <xputs+0x2>
2:	ret
    ada6:	08 95       	ret

0000ada8 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    ada8:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    adaa:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    adac:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    adae:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    adb0:	0c c0       	rjmp	.+24     	; 0xadca <xitoa+0x22>
	neg	r20		;
    adb2:	41 95       	neg	r20
	sbrs	r25, 7		;
    adb4:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    adb6:	09 c0       	rjmp	.+18     	; 0xadca <xitoa+0x22>
	ldi	r30, '-'	;
    adb8:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    adba:	60 95       	com	r22
	com	r23		;
    adbc:	70 95       	com	r23
	com	r24		;
    adbe:	80 95       	com	r24
	com	r25		;
    adc0:	90 95       	com	r25
	adc	r22, r1		;
    adc2:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    adc4:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    adc6:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    adc8:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    adca:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    adcc:	02 c0       	rjmp	.+4      	; 0xadd2 <xitoa+0x2a>
	neg	r18		;
    adce:	21 95       	neg	r18
	ldi	r19, '0'	;/
    add0:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    add2:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    add4:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    add6:	66 0f       	add	r22, r22
	rol	r23		;
    add8:	77 1f       	adc	r23, r23
	rol	r24		;
    adda:	88 1f       	adc	r24, r24
	rol	r25		;
    addc:	99 1f       	adc	r25, r25
	rol	r26		;
    adde:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    ade0:	a4 17       	cp	r26, r20
	brcs	3f		;
    ade2:	10 f0       	brcs	.+4      	; 0xade8 <xitoa+0x40>
	sub	r26, r20	;
    ade4:	a4 1b       	sub	r26, r20
	inc	r22		;
    ade6:	63 95       	inc	r22
3:	dec	r21		;
    ade8:	5a 95       	dec	r21
	brne	2b		;/
    adea:	a9 f7       	brne	.-22     	; 0xadd6 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    adec:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    adee:	08 f0       	brcs	.+2      	; 0xadf2 <xitoa+0x4a>
	subi	r26, -7		;
    adf0:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    adf2:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    adf4:	af 93       	push	r26
	inc	r31		;/
    adf6:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    adf8:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    adfa:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    adfc:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    adfe:	91 05       	cpc	r25, r1
	brne	1b		;/
    ae00:	41 f7       	brne	.-48     	; 0xadd2 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    ae02:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    ae04:	11 f4       	brne	.+4      	; 0xae0a <xitoa+0x62>
	push	r30		;
    ae06:	ef 93       	push	r30
	inc	r31		;/
    ae08:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    ae0a:	f2 17       	cp	r31, r18
	brcc	6f		;
    ae0c:	18 f4       	brcc	.+6      	; 0xae14 <xitoa+0x6c>
	push	r19		;
    ae0e:	3f 93       	push	r19
	inc	r31		;
    ae10:	f3 95       	inc	r31
	rjmp	5b		;/
    ae12:	fb cf       	rjmp	.-10     	; 0xae0a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    ae14:	8f 91       	pop	r24
	rcall	xputc		;
    ae16:	b2 df       	rcall	.-156    	; 0xad7c <xputc>
	dec	r31		;
    ae18:	fa 95       	dec	r31
	brne	6b		;/
    ae1a:	e1 f7       	brne	.-8      	; 0xae14 <xitoa+0x6c>

	ret
    ae1c:	08 95       	ret

0000ae1e <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    ae1e:	df 93       	push	r29
	push	YL
    ae20:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    ae22:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    ae24:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    ae26:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    ae28:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    ae2a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    ae2c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    ae2e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    ae30:	21 f0       	breq	.+8      	; 0xae3a <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    ae32:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    ae34:	29 f0       	breq	.+10     	; 0xae40 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    ae36:	a2 df       	rcall	.-188    	; 0xad7c <xputc>
	rjmp	0b		;/
    ae38:	f9 cf       	rjmp	.-14     	; 0xae2c <xprintf+0xe>
90:	pop	YL
    ae3a:	cf 91       	pop	r28
	pop	YH
    ae3c:	df 91       	pop	r29
	ret
    ae3e:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    ae40:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    ae42:	e8 94       	clt
	_LPMI	r21		;Get flags
    ae44:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    ae46:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    ae48:	b1 f3       	breq	.-20     	; 0xae36 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    ae4a:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    ae4c:	11 f4       	brne	.+4      	; 0xae52 <xprintf+0x34>
	set			;/
    ae4e:	68 94       	set
22:	_LPMI	r21		;Get width
    ae50:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    ae52:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    ae54:	48 f4       	brcc	.+18     	; 0xae68 <xprintf+0x4a>
	subi	r21, '0'	;
    ae56:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    ae58:	80 f3       	brcs	.-32     	; 0xae3a <xprintf+0x1c>
	lsl	r18		;
    ae5a:	22 0f       	add	r18, r18
	mov	r0, r18		;
    ae5c:	02 2e       	mov	r0, r18
	lsl	r18		;
    ae5e:	22 0f       	add	r18, r18
	lsl	r18		;
    ae60:	22 0f       	add	r18, r18
	add	r18, r0		;
    ae62:	20 0d       	add	r18, r0
	add	r18, r21	;
    ae64:	25 0f       	add	r18, r21
	rjmp	22b		;/
    ae66:	f4 cf       	rjmp	.-24     	; 0xae50 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    ae68:	0e f4       	brtc	.+2      	; 0xae6c <xprintf+0x4e>
	neg	r18		;
    ae6a:	21 95       	neg	r18
25:	ld	r24, Y+		;
    ae6c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    ae6e:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    ae70:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    ae72:	09 f3       	breq	.-62     	; 0xae36 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    ae74:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    ae76:	29 f1       	breq	.+74     	; 0xaec2 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    ae78:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    ae7a:	59 f1       	breq	.+86     	; 0xaed2 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    ae7c:	bc 01       	movw	r22, r24
	clr	r24		;
    ae7e:	88 27       	eor	r24, r24
	clr	r25		;
    ae80:	99 27       	eor	r25, r25
	clt			;/
    ae82:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    ae84:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    ae86:	21 f4       	brne	.+8      	; 0xae90 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    ae88:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    ae8a:	99 91       	ld	r25, Y+
	set			;
    ae8c:	68 94       	set
	_LPMI	r21		;/
    ae8e:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    ae90:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    ae92:	39 f4       	brne	.+14     	; 0xaea2 <xprintf+0x84>
	ldi	r20, -10	;
    ae94:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    ae96:	7e f0       	brts	.+30     	; 0xaeb6 <xprintf+0x98>
	sbrs	r23, 7		;
    ae98:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    ae9a:	0d c0       	rjmp	.+26     	; 0xaeb6 <xprintf+0x98>
	ldi	r24, -1		;
    ae9c:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    ae9e:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    aea0:	0a c0       	rjmp	.+20     	; 0xaeb6 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    aea2:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    aea4:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    aea6:	39 f0       	breq	.+14     	; 0xaeb6 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    aea8:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    aeaa:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    aeac:	21 f0       	breq	.+8      	; 0xaeb6 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    aeae:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    aeb0:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    aeb2:	09 f0       	breq	.+2      	; 0xaeb6 <xprintf+0x98>
	rjmp	90b		;abort
    aeb4:	c2 cf       	rjmp	.-124    	; 0xae3a <xprintf+0x1c>
40:	push	ZH		;Output the value
    aeb6:	ff 93       	push	r31
	push	ZL		;
    aeb8:	ef 93       	push	r30
	rcall	xitoa		;
    aeba:	76 df       	rcall	.-276    	; 0xada8 <xitoa>
42:	pop	ZL		;
    aebc:	ef 91       	pop	r30
	pop	ZH		;
    aebe:	ff 91       	pop	r31
	rjmp	0b		;/
    aec0:	b5 cf       	rjmp	.-150    	; 0xae2c <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    aec2:	ff 93       	push	r31
	push	ZL
    aec4:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    aec6:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    aec8:	81 91       	ld	r24, Z+
	cpi	r24, 0
    aeca:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    aecc:	b9 f3       	breq	.-18     	; 0xaebc <xprintf+0x9e>
	rcall	xputc
    aece:	56 df       	rcall	.-340    	; 0xad7c <xputc>
	rjmp	51b
    aed0:	fb cf       	rjmp	.-10     	; 0xaec8 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    aed2:	ff 93       	push	r31
	push	ZL
    aed4:	ef 93       	push	r30
	rcall	xputs
    aed6:	61 df       	rcall	.-318    	; 0xad9a <xputs>
	rjmp	42b
    aed8:	f1 cf       	rjmp	.-30     	; 0xaebc <xprintf+0x9e>

0000aeda <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    aeda:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    aedc:	dc 01       	movw	r26, r24
	ld	ZL, X+
    aede:	ed 91       	ld	r30, X+
	ld	ZH, X+
    aee0:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    aee2:	22 27       	eor	r18, r18
	clr	r19		;
    aee4:	33 27       	eor	r19, r19
	clr	r20		;
    aee6:	44 27       	eor	r20, r20
	clr	r21		;/
    aee8:	55 27       	eor	r21, r21
	clt			;T = 0;
    aeea:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    aeec:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    aeee:	01 c0       	rjmp	.+2      	; 0xaef2 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    aef0:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    aef2:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    aef4:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    aef6:	e1 f3       	breq	.-8      	; 0xaef0 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    aef8:	a8 f1       	brcs	.+106    	; 0xaf64 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    aefa:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    aefc:	11 f4       	brne	.+4      	; 0xaf02 <xatoi+0x28>
	set			; continue;
    aefe:	68 94       	set
	rjmp	40b		;}
    af00:	f7 cf       	rjmp	.-18     	; 0xaef0 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    af02:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    af04:	78 f5       	brcc	.+94     	; 0xaf64 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    af06:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    af08:	68 f1       	brcs	.+90     	; 0xaf64 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    af0a:	71 f4       	brne	.+28     	; 0xaf28 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    af0c:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    af0e:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    af10:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    af12:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    af14:	48 f1       	brcs	.+82     	; 0xaf68 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    af16:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    af18:	11 f4       	brne	.+4      	; 0xaf1e <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    af1a:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    af1c:	03 c0       	rjmp	.+6      	; 0xaf24 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    af1e:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    af20:	19 f4       	brne	.+6      	; 0xaf28 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    af22:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    af24:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    af26:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    af28:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    af2a:	f0 f0       	brcs	.+60     	; 0xaf68 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    af2c:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    af2e:	08 f0       	brcs	.+2      	; 0xaf32 <xatoi+0x58>
	subi	r22, 0x20	;/
    af30:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    af32:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    af34:	b8 f0       	brcs	.+46     	; 0xaf64 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    af36:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    af38:	18 f0       	brcs	.+6      	; 0xaf40 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    af3a:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    af3c:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    af3e:	90 f0       	brcs	.+36     	; 0xaf64 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    af40:	69 17       	cp	r22, r25
	brcc	70f		;/
    af42:	80 f4       	brcc	.+32     	; 0xaf64 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    af44:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    af46:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    af48:	08 f4       	brcc	.+2      	; 0xaf4c <xatoi+0x72>
	add	r23, r25	;
    af4a:	79 0f       	add	r23, r25
62:	lsr	r23		;
    af4c:	76 95       	lsr	r23
	ror	r21		;
    af4e:	57 95       	ror	r21
	ror	r20		;
    af50:	47 95       	ror	r20
	ror	r19		;
    af52:	37 95       	ror	r19
	ror	r18		;
    af54:	27 95       	ror	r18
	dec	r24		;
    af56:	8a 95       	dec	r24
	brne	61b		;/
    af58:	b9 f7       	brne	.-18     	; 0xaf48 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    af5a:	26 0f       	add	r18, r22
	adc	r19, r24	;
    af5c:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    af5e:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    af60:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    af62:	e0 cf       	rjmp	.-64     	; 0xaf24 <xatoi+0x4a>

70:	ldi	r24, 0
    af64:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    af66:	01 c0       	rjmp	.+2      	; 0xaf6a <xatoi+0x90>
80:	ldi	r24, 1
    af68:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    af6a:	4e f4       	brtc	.+18     	; 0xaf7e <xatoi+0xa4>
	clr	r22
    af6c:	66 27       	eor	r22, r22
	com	r18
    af6e:	20 95       	com	r18
	com	r19
    af70:	30 95       	com	r19
	com	r20
    af72:	40 95       	com	r20
	com	r21
    af74:	50 95       	com	r21
	adc	r18, r22
    af76:	26 1f       	adc	r18, r22
	adc	r19, r22
    af78:	36 1f       	adc	r19, r22
	adc	r20, r22
    af7a:	46 1f       	adc	r20, r22
	adc	r21, r22
    af7c:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    af7e:	fe 93       	st	-X, r31
	st	-X, ZL
    af80:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    af82:	d0 01       	movw	r26, r0
	st	X+, r18
    af84:	2d 93       	st	X+, r18
	st	X+, r19
    af86:	3d 93       	st	X+, r19
	st	X+, r20
    af88:	4d 93       	st	X+, r20
	st	X+, r21
    af8a:	5d 93       	st	X+, r21
	clr	r1
    af8c:	11 24       	eor	r1, r1
	ret
    af8e:	08 95       	ret

0000af90 <__mulsi3>:
    af90:	62 9f       	mul	r22, r18
    af92:	d0 01       	movw	r26, r0
    af94:	73 9f       	mul	r23, r19
    af96:	f0 01       	movw	r30, r0
    af98:	82 9f       	mul	r24, r18
    af9a:	e0 0d       	add	r30, r0
    af9c:	f1 1d       	adc	r31, r1
    af9e:	64 9f       	mul	r22, r20
    afa0:	e0 0d       	add	r30, r0
    afa2:	f1 1d       	adc	r31, r1
    afa4:	92 9f       	mul	r25, r18
    afa6:	f0 0d       	add	r31, r0
    afa8:	83 9f       	mul	r24, r19
    afaa:	f0 0d       	add	r31, r0
    afac:	74 9f       	mul	r23, r20
    afae:	f0 0d       	add	r31, r0
    afb0:	65 9f       	mul	r22, r21
    afb2:	f0 0d       	add	r31, r0
    afb4:	99 27       	eor	r25, r25
    afb6:	72 9f       	mul	r23, r18
    afb8:	b0 0d       	add	r27, r0
    afba:	e1 1d       	adc	r30, r1
    afbc:	f9 1f       	adc	r31, r25
    afbe:	63 9f       	mul	r22, r19
    afc0:	b0 0d       	add	r27, r0
    afc2:	e1 1d       	adc	r30, r1
    afc4:	f9 1f       	adc	r31, r25
    afc6:	bd 01       	movw	r22, r26
    afc8:	cf 01       	movw	r24, r30
    afca:	11 24       	eor	r1, r1
    afcc:	08 95       	ret

0000afce <__udivmodhi4>:
    afce:	aa 1b       	sub	r26, r26
    afd0:	bb 1b       	sub	r27, r27
    afd2:	51 e1       	ldi	r21, 0x11	; 17
    afd4:	07 c0       	rjmp	.+14     	; 0xafe4 <__udivmodhi4_ep>

0000afd6 <__udivmodhi4_loop>:
    afd6:	aa 1f       	adc	r26, r26
    afd8:	bb 1f       	adc	r27, r27
    afda:	a6 17       	cp	r26, r22
    afdc:	b7 07       	cpc	r27, r23
    afde:	10 f0       	brcs	.+4      	; 0xafe4 <__udivmodhi4_ep>
    afe0:	a6 1b       	sub	r26, r22
    afe2:	b7 0b       	sbc	r27, r23

0000afe4 <__udivmodhi4_ep>:
    afe4:	88 1f       	adc	r24, r24
    afe6:	99 1f       	adc	r25, r25
    afe8:	5a 95       	dec	r21
    afea:	a9 f7       	brne	.-22     	; 0xafd6 <__udivmodhi4_loop>
    afec:	80 95       	com	r24
    afee:	90 95       	com	r25
    aff0:	bc 01       	movw	r22, r24
    aff2:	cd 01       	movw	r24, r26
    aff4:	08 95       	ret

0000aff6 <__divmodhi4>:
    aff6:	97 fb       	bst	r25, 7
    aff8:	09 2e       	mov	r0, r25
    affa:	07 26       	eor	r0, r23
    affc:	0a d0       	rcall	.+20     	; 0xb012 <__divmodhi4_neg1>
    affe:	77 fd       	sbrc	r23, 7
    b000:	04 d0       	rcall	.+8      	; 0xb00a <__divmodhi4_neg2>
    b002:	e5 df       	rcall	.-54     	; 0xafce <__udivmodhi4>
    b004:	06 d0       	rcall	.+12     	; 0xb012 <__divmodhi4_neg1>
    b006:	00 20       	and	r0, r0
    b008:	1a f4       	brpl	.+6      	; 0xb010 <__divmodhi4_exit>

0000b00a <__divmodhi4_neg2>:
    b00a:	70 95       	com	r23
    b00c:	61 95       	neg	r22
    b00e:	7f 4f       	sbci	r23, 0xFF	; 255

0000b010 <__divmodhi4_exit>:
    b010:	08 95       	ret

0000b012 <__divmodhi4_neg1>:
    b012:	f6 f7       	brtc	.-4      	; 0xb010 <__divmodhi4_exit>
    b014:	90 95       	com	r25
    b016:	81 95       	neg	r24
    b018:	9f 4f       	sbci	r25, 0xFF	; 255
    b01a:	08 95       	ret

0000b01c <__udivmodsi4>:
    b01c:	a1 e2       	ldi	r26, 0x21	; 33
    b01e:	1a 2e       	mov	r1, r26
    b020:	aa 1b       	sub	r26, r26
    b022:	bb 1b       	sub	r27, r27
    b024:	fd 01       	movw	r30, r26
    b026:	0d c0       	rjmp	.+26     	; 0xb042 <__udivmodsi4_ep>

0000b028 <__udivmodsi4_loop>:
    b028:	aa 1f       	adc	r26, r26
    b02a:	bb 1f       	adc	r27, r27
    b02c:	ee 1f       	adc	r30, r30
    b02e:	ff 1f       	adc	r31, r31
    b030:	a2 17       	cp	r26, r18
    b032:	b3 07       	cpc	r27, r19
    b034:	e4 07       	cpc	r30, r20
    b036:	f5 07       	cpc	r31, r21
    b038:	20 f0       	brcs	.+8      	; 0xb042 <__udivmodsi4_ep>
    b03a:	a2 1b       	sub	r26, r18
    b03c:	b3 0b       	sbc	r27, r19
    b03e:	e4 0b       	sbc	r30, r20
    b040:	f5 0b       	sbc	r31, r21

0000b042 <__udivmodsi4_ep>:
    b042:	66 1f       	adc	r22, r22
    b044:	77 1f       	adc	r23, r23
    b046:	88 1f       	adc	r24, r24
    b048:	99 1f       	adc	r25, r25
    b04a:	1a 94       	dec	r1
    b04c:	69 f7       	brne	.-38     	; 0xb028 <__udivmodsi4_loop>
    b04e:	60 95       	com	r22
    b050:	70 95       	com	r23
    b052:	80 95       	com	r24
    b054:	90 95       	com	r25
    b056:	9b 01       	movw	r18, r22
    b058:	ac 01       	movw	r20, r24
    b05a:	bd 01       	movw	r22, r26
    b05c:	cf 01       	movw	r24, r30
    b05e:	08 95       	ret

0000b060 <__divmodsi4>:
    b060:	97 fb       	bst	r25, 7
    b062:	09 2e       	mov	r0, r25
    b064:	05 26       	eor	r0, r21
    b066:	0e d0       	rcall	.+28     	; 0xb084 <__divmodsi4_neg1>
    b068:	57 fd       	sbrc	r21, 7
    b06a:	04 d0       	rcall	.+8      	; 0xb074 <__divmodsi4_neg2>
    b06c:	d7 df       	rcall	.-82     	; 0xb01c <__udivmodsi4>
    b06e:	0a d0       	rcall	.+20     	; 0xb084 <__divmodsi4_neg1>
    b070:	00 1c       	adc	r0, r0
    b072:	38 f4       	brcc	.+14     	; 0xb082 <__divmodsi4_exit>

0000b074 <__divmodsi4_neg2>:
    b074:	50 95       	com	r21
    b076:	40 95       	com	r20
    b078:	30 95       	com	r19
    b07a:	21 95       	neg	r18
    b07c:	3f 4f       	sbci	r19, 0xFF	; 255
    b07e:	4f 4f       	sbci	r20, 0xFF	; 255
    b080:	5f 4f       	sbci	r21, 0xFF	; 255

0000b082 <__divmodsi4_exit>:
    b082:	08 95       	ret

0000b084 <__divmodsi4_neg1>:
    b084:	f6 f7       	brtc	.-4      	; 0xb082 <__divmodsi4_exit>
    b086:	90 95       	com	r25
    b088:	80 95       	com	r24
    b08a:	70 95       	com	r23
    b08c:	61 95       	neg	r22
    b08e:	7f 4f       	sbci	r23, 0xFF	; 255
    b090:	8f 4f       	sbci	r24, 0xFF	; 255
    b092:	9f 4f       	sbci	r25, 0xFF	; 255
    b094:	08 95       	ret

0000b096 <__prologue_saves__>:
    b096:	2f 92       	push	r2
    b098:	3f 92       	push	r3
    b09a:	4f 92       	push	r4
    b09c:	5f 92       	push	r5
    b09e:	6f 92       	push	r6
    b0a0:	7f 92       	push	r7
    b0a2:	8f 92       	push	r8
    b0a4:	9f 92       	push	r9
    b0a6:	af 92       	push	r10
    b0a8:	bf 92       	push	r11
    b0aa:	cf 92       	push	r12
    b0ac:	df 92       	push	r13
    b0ae:	ef 92       	push	r14
    b0b0:	ff 92       	push	r15
    b0b2:	0f 93       	push	r16
    b0b4:	1f 93       	push	r17
    b0b6:	cf 93       	push	r28
    b0b8:	df 93       	push	r29
    b0ba:	cd b7       	in	r28, 0x3d	; 61
    b0bc:	de b7       	in	r29, 0x3e	; 62
    b0be:	ca 1b       	sub	r28, r26
    b0c0:	db 0b       	sbc	r29, r27
    b0c2:	0f b6       	in	r0, 0x3f	; 63
    b0c4:	f8 94       	cli
    b0c6:	de bf       	out	0x3e, r29	; 62
    b0c8:	0f be       	out	0x3f, r0	; 63
    b0ca:	cd bf       	out	0x3d, r28	; 61
    b0cc:	19 94       	eijmp

0000b0ce <__epilogue_restores__>:
    b0ce:	2a 88       	ldd	r2, Y+18	; 0x12
    b0d0:	39 88       	ldd	r3, Y+17	; 0x11
    b0d2:	48 88       	ldd	r4, Y+16	; 0x10
    b0d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    b0d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    b0d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    b0da:	8c 84       	ldd	r8, Y+12	; 0x0c
    b0dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    b0de:	aa 84       	ldd	r10, Y+10	; 0x0a
    b0e0:	b9 84       	ldd	r11, Y+9	; 0x09
    b0e2:	c8 84       	ldd	r12, Y+8	; 0x08
    b0e4:	df 80       	ldd	r13, Y+7	; 0x07
    b0e6:	ee 80       	ldd	r14, Y+6	; 0x06
    b0e8:	fd 80       	ldd	r15, Y+5	; 0x05
    b0ea:	0c 81       	ldd	r16, Y+4	; 0x04
    b0ec:	1b 81       	ldd	r17, Y+3	; 0x03
    b0ee:	aa 81       	ldd	r26, Y+2	; 0x02
    b0f0:	b9 81       	ldd	r27, Y+1	; 0x01
    b0f2:	ce 0f       	add	r28, r30
    b0f4:	d1 1d       	adc	r29, r1
    b0f6:	0f b6       	in	r0, 0x3f	; 63
    b0f8:	f8 94       	cli
    b0fa:	de bf       	out	0x3e, r29	; 62
    b0fc:	0f be       	out	0x3f, r0	; 63
    b0fe:	cd bf       	out	0x3d, r28	; 61
    b100:	ed 01       	movw	r28, r26
    b102:	08 95       	ret

0000b104 <__tablejump2__>:
    b104:	ee 0f       	add	r30, r30
    b106:	ff 1f       	adc	r31, r31

0000b108 <__tablejump__>:
    b108:	05 90       	lpm	r0, Z+
    b10a:	f4 91       	lpm	r31, Z+
    b10c:	e0 2d       	mov	r30, r0
    b10e:	19 94       	eijmp

0000b110 <malloc>:
    b110:	cf 93       	push	r28
    b112:	df 93       	push	r29
    b114:	bc 01       	movw	r22, r24
    b116:	82 30       	cpi	r24, 0x02	; 2
    b118:	91 05       	cpc	r25, r1
    b11a:	10 f4       	brcc	.+4      	; 0xb120 <malloc+0x10>
    b11c:	62 e0       	ldi	r22, 0x02	; 2
    b11e:	70 e0       	ldi	r23, 0x00	; 0
    b120:	a0 91 f9 2b 	lds	r26, 0x2BF9
    b124:	b0 91 fa 2b 	lds	r27, 0x2BFA
    b128:	ed 01       	movw	r28, r26
    b12a:	e0 e0       	ldi	r30, 0x00	; 0
    b12c:	f0 e0       	ldi	r31, 0x00	; 0
    b12e:	40 e0       	ldi	r20, 0x00	; 0
    b130:	50 e0       	ldi	r21, 0x00	; 0
    b132:	21 c0       	rjmp	.+66     	; 0xb176 <malloc+0x66>
    b134:	88 81       	ld	r24, Y
    b136:	99 81       	ldd	r25, Y+1	; 0x01
    b138:	86 17       	cp	r24, r22
    b13a:	97 07       	cpc	r25, r23
    b13c:	69 f4       	brne	.+26     	; 0xb158 <malloc+0x48>
    b13e:	8a 81       	ldd	r24, Y+2	; 0x02
    b140:	9b 81       	ldd	r25, Y+3	; 0x03
    b142:	30 97       	sbiw	r30, 0x00	; 0
    b144:	19 f0       	breq	.+6      	; 0xb14c <malloc+0x3c>
    b146:	82 83       	std	Z+2, r24	; 0x02
    b148:	93 83       	std	Z+3, r25	; 0x03
    b14a:	04 c0       	rjmp	.+8      	; 0xb154 <malloc+0x44>
    b14c:	80 93 f9 2b 	sts	0x2BF9, r24
    b150:	90 93 fa 2b 	sts	0x2BFA, r25
    b154:	fe 01       	movw	r30, r28
    b156:	34 c0       	rjmp	.+104    	; 0xb1c0 <malloc+0xb0>
    b158:	68 17       	cp	r22, r24
    b15a:	79 07       	cpc	r23, r25
    b15c:	38 f4       	brcc	.+14     	; 0xb16c <malloc+0x5c>
    b15e:	41 15       	cp	r20, r1
    b160:	51 05       	cpc	r21, r1
    b162:	19 f0       	breq	.+6      	; 0xb16a <malloc+0x5a>
    b164:	84 17       	cp	r24, r20
    b166:	95 07       	cpc	r25, r21
    b168:	08 f4       	brcc	.+2      	; 0xb16c <malloc+0x5c>
    b16a:	ac 01       	movw	r20, r24
    b16c:	fe 01       	movw	r30, r28
    b16e:	8a 81       	ldd	r24, Y+2	; 0x02
    b170:	9b 81       	ldd	r25, Y+3	; 0x03
    b172:	9c 01       	movw	r18, r24
    b174:	e9 01       	movw	r28, r18
    b176:	20 97       	sbiw	r28, 0x00	; 0
    b178:	e9 f6       	brne	.-70     	; 0xb134 <malloc+0x24>
    b17a:	41 15       	cp	r20, r1
    b17c:	51 05       	cpc	r21, r1
    b17e:	a9 f1       	breq	.+106    	; 0xb1ea <malloc+0xda>
    b180:	ca 01       	movw	r24, r20
    b182:	86 1b       	sub	r24, r22
    b184:	97 0b       	sbc	r25, r23
    b186:	04 97       	sbiw	r24, 0x04	; 4
    b188:	08 f4       	brcc	.+2      	; 0xb18c <malloc+0x7c>
    b18a:	ba 01       	movw	r22, r20
    b18c:	e0 e0       	ldi	r30, 0x00	; 0
    b18e:	f0 e0       	ldi	r31, 0x00	; 0
    b190:	2a c0       	rjmp	.+84     	; 0xb1e6 <malloc+0xd6>
    b192:	8d 91       	ld	r24, X+
    b194:	9c 91       	ld	r25, X
    b196:	11 97       	sbiw	r26, 0x01	; 1
    b198:	84 17       	cp	r24, r20
    b19a:	95 07       	cpc	r25, r21
    b19c:	f9 f4       	brne	.+62     	; 0xb1dc <malloc+0xcc>
    b19e:	64 17       	cp	r22, r20
    b1a0:	75 07       	cpc	r23, r21
    b1a2:	81 f4       	brne	.+32     	; 0xb1c4 <malloc+0xb4>
    b1a4:	12 96       	adiw	r26, 0x02	; 2
    b1a6:	8d 91       	ld	r24, X+
    b1a8:	9c 91       	ld	r25, X
    b1aa:	13 97       	sbiw	r26, 0x03	; 3
    b1ac:	30 97       	sbiw	r30, 0x00	; 0
    b1ae:	19 f0       	breq	.+6      	; 0xb1b6 <malloc+0xa6>
    b1b0:	82 83       	std	Z+2, r24	; 0x02
    b1b2:	93 83       	std	Z+3, r25	; 0x03
    b1b4:	04 c0       	rjmp	.+8      	; 0xb1be <malloc+0xae>
    b1b6:	80 93 f9 2b 	sts	0x2BF9, r24
    b1ba:	90 93 fa 2b 	sts	0x2BFA, r25
    b1be:	fd 01       	movw	r30, r26
    b1c0:	32 96       	adiw	r30, 0x02	; 2
    b1c2:	4f c0       	rjmp	.+158    	; 0xb262 <malloc+0x152>
    b1c4:	ca 01       	movw	r24, r20
    b1c6:	86 1b       	sub	r24, r22
    b1c8:	97 0b       	sbc	r25, r23
    b1ca:	fd 01       	movw	r30, r26
    b1cc:	e8 0f       	add	r30, r24
    b1ce:	f9 1f       	adc	r31, r25
    b1d0:	61 93       	st	Z+, r22
    b1d2:	71 93       	st	Z+, r23
    b1d4:	02 97       	sbiw	r24, 0x02	; 2
    b1d6:	8d 93       	st	X+, r24
    b1d8:	9c 93       	st	X, r25
    b1da:	43 c0       	rjmp	.+134    	; 0xb262 <malloc+0x152>
    b1dc:	fd 01       	movw	r30, r26
    b1de:	82 81       	ldd	r24, Z+2	; 0x02
    b1e0:	93 81       	ldd	r25, Z+3	; 0x03
    b1e2:	9c 01       	movw	r18, r24
    b1e4:	d9 01       	movw	r26, r18
    b1e6:	10 97       	sbiw	r26, 0x00	; 0
    b1e8:	a1 f6       	brne	.-88     	; 0xb192 <malloc+0x82>
    b1ea:	80 91 f7 2b 	lds	r24, 0x2BF7
    b1ee:	90 91 f8 2b 	lds	r25, 0x2BF8
    b1f2:	89 2b       	or	r24, r25
    b1f4:	41 f4       	brne	.+16     	; 0xb206 <malloc+0xf6>
    b1f6:	80 91 dc 24 	lds	r24, 0x24DC
    b1fa:	90 91 dd 24 	lds	r25, 0x24DD
    b1fe:	80 93 f7 2b 	sts	0x2BF7, r24
    b202:	90 93 f8 2b 	sts	0x2BF8, r25
    b206:	40 91 de 24 	lds	r20, 0x24DE
    b20a:	50 91 df 24 	lds	r21, 0x24DF
    b20e:	41 15       	cp	r20, r1
    b210:	51 05       	cpc	r21, r1
    b212:	41 f4       	brne	.+16     	; 0xb224 <malloc+0x114>
    b214:	4d b7       	in	r20, 0x3d	; 61
    b216:	5e b7       	in	r21, 0x3e	; 62
    b218:	80 91 da 24 	lds	r24, 0x24DA
    b21c:	90 91 db 24 	lds	r25, 0x24DB
    b220:	48 1b       	sub	r20, r24
    b222:	59 0b       	sbc	r21, r25
    b224:	20 91 f7 2b 	lds	r18, 0x2BF7
    b228:	30 91 f8 2b 	lds	r19, 0x2BF8
    b22c:	24 17       	cp	r18, r20
    b22e:	35 07       	cpc	r19, r21
    b230:	b0 f4       	brcc	.+44     	; 0xb25e <malloc+0x14e>
    b232:	ca 01       	movw	r24, r20
    b234:	82 1b       	sub	r24, r18
    b236:	93 0b       	sbc	r25, r19
    b238:	86 17       	cp	r24, r22
    b23a:	97 07       	cpc	r25, r23
    b23c:	80 f0       	brcs	.+32     	; 0xb25e <malloc+0x14e>
    b23e:	ab 01       	movw	r20, r22
    b240:	4e 5f       	subi	r20, 0xFE	; 254
    b242:	5f 4f       	sbci	r21, 0xFF	; 255
    b244:	84 17       	cp	r24, r20
    b246:	95 07       	cpc	r25, r21
    b248:	50 f0       	brcs	.+20     	; 0xb25e <malloc+0x14e>
    b24a:	42 0f       	add	r20, r18
    b24c:	53 1f       	adc	r21, r19
    b24e:	40 93 f7 2b 	sts	0x2BF7, r20
    b252:	50 93 f8 2b 	sts	0x2BF8, r21
    b256:	f9 01       	movw	r30, r18
    b258:	61 93       	st	Z+, r22
    b25a:	71 93       	st	Z+, r23
    b25c:	02 c0       	rjmp	.+4      	; 0xb262 <malloc+0x152>
    b25e:	e0 e0       	ldi	r30, 0x00	; 0
    b260:	f0 e0       	ldi	r31, 0x00	; 0
    b262:	cf 01       	movw	r24, r30
    b264:	df 91       	pop	r29
    b266:	cf 91       	pop	r28
    b268:	08 95       	ret

0000b26a <free>:
    b26a:	cf 93       	push	r28
    b26c:	df 93       	push	r29
    b26e:	00 97       	sbiw	r24, 0x00	; 0
    b270:	09 f4       	brne	.+2      	; 0xb274 <free+0xa>
    b272:	50 c0       	rjmp	.+160    	; 0xb314 <free+0xaa>
    b274:	ec 01       	movw	r28, r24
    b276:	22 97       	sbiw	r28, 0x02	; 2
    b278:	1a 82       	std	Y+2, r1	; 0x02
    b27a:	1b 82       	std	Y+3, r1	; 0x03
    b27c:	a0 91 f9 2b 	lds	r26, 0x2BF9
    b280:	b0 91 fa 2b 	lds	r27, 0x2BFA
    b284:	10 97       	sbiw	r26, 0x00	; 0
    b286:	09 f1       	breq	.+66     	; 0xb2ca <free+0x60>
    b288:	40 e0       	ldi	r20, 0x00	; 0
    b28a:	50 e0       	ldi	r21, 0x00	; 0
    b28c:	ac 17       	cp	r26, r28
    b28e:	bd 07       	cpc	r27, r29
    b290:	08 f1       	brcs	.+66     	; 0xb2d4 <free+0x6a>
    b292:	aa 83       	std	Y+2, r26	; 0x02
    b294:	bb 83       	std	Y+3, r27	; 0x03
    b296:	fe 01       	movw	r30, r28
    b298:	21 91       	ld	r18, Z+
    b29a:	31 91       	ld	r19, Z+
    b29c:	e2 0f       	add	r30, r18
    b29e:	f3 1f       	adc	r31, r19
    b2a0:	ae 17       	cp	r26, r30
    b2a2:	bf 07       	cpc	r27, r31
    b2a4:	79 f4       	brne	.+30     	; 0xb2c4 <free+0x5a>
    b2a6:	8d 91       	ld	r24, X+
    b2a8:	9c 91       	ld	r25, X
    b2aa:	11 97       	sbiw	r26, 0x01	; 1
    b2ac:	28 0f       	add	r18, r24
    b2ae:	39 1f       	adc	r19, r25
    b2b0:	2e 5f       	subi	r18, 0xFE	; 254
    b2b2:	3f 4f       	sbci	r19, 0xFF	; 255
    b2b4:	28 83       	st	Y, r18
    b2b6:	39 83       	std	Y+1, r19	; 0x01
    b2b8:	12 96       	adiw	r26, 0x02	; 2
    b2ba:	8d 91       	ld	r24, X+
    b2bc:	9c 91       	ld	r25, X
    b2be:	13 97       	sbiw	r26, 0x03	; 3
    b2c0:	8a 83       	std	Y+2, r24	; 0x02
    b2c2:	9b 83       	std	Y+3, r25	; 0x03
    b2c4:	41 15       	cp	r20, r1
    b2c6:	51 05       	cpc	r21, r1
    b2c8:	71 f4       	brne	.+28     	; 0xb2e6 <free+0x7c>
    b2ca:	c0 93 f9 2b 	sts	0x2BF9, r28
    b2ce:	d0 93 fa 2b 	sts	0x2BFA, r29
    b2d2:	20 c0       	rjmp	.+64     	; 0xb314 <free+0xaa>
    b2d4:	12 96       	adiw	r26, 0x02	; 2
    b2d6:	8d 91       	ld	r24, X+
    b2d8:	9c 91       	ld	r25, X
    b2da:	13 97       	sbiw	r26, 0x03	; 3
    b2dc:	ad 01       	movw	r20, r26
    b2de:	00 97       	sbiw	r24, 0x00	; 0
    b2e0:	11 f0       	breq	.+4      	; 0xb2e6 <free+0x7c>
    b2e2:	dc 01       	movw	r26, r24
    b2e4:	d3 cf       	rjmp	.-90     	; 0xb28c <free+0x22>
    b2e6:	fa 01       	movw	r30, r20
    b2e8:	c2 83       	std	Z+2, r28	; 0x02
    b2ea:	d3 83       	std	Z+3, r29	; 0x03
    b2ec:	21 91       	ld	r18, Z+
    b2ee:	31 91       	ld	r19, Z+
    b2f0:	e2 0f       	add	r30, r18
    b2f2:	f3 1f       	adc	r31, r19
    b2f4:	ce 17       	cp	r28, r30
    b2f6:	df 07       	cpc	r29, r31
    b2f8:	69 f4       	brne	.+26     	; 0xb314 <free+0xaa>
    b2fa:	88 81       	ld	r24, Y
    b2fc:	99 81       	ldd	r25, Y+1	; 0x01
    b2fe:	28 0f       	add	r18, r24
    b300:	39 1f       	adc	r19, r25
    b302:	2e 5f       	subi	r18, 0xFE	; 254
    b304:	3f 4f       	sbci	r19, 0xFF	; 255
    b306:	fa 01       	movw	r30, r20
    b308:	20 83       	st	Z, r18
    b30a:	31 83       	std	Z+1, r19	; 0x01
    b30c:	8a 81       	ldd	r24, Y+2	; 0x02
    b30e:	9b 81       	ldd	r25, Y+3	; 0x03
    b310:	82 83       	std	Z+2, r24	; 0x02
    b312:	93 83       	std	Z+3, r25	; 0x03
    b314:	df 91       	pop	r29
    b316:	cf 91       	pop	r28
    b318:	08 95       	ret

0000b31a <strtoul>:
    b31a:	3f 92       	push	r3
    b31c:	4f 92       	push	r4
    b31e:	5f 92       	push	r5
    b320:	6f 92       	push	r6
    b322:	7f 92       	push	r7
    b324:	8f 92       	push	r8
    b326:	9f 92       	push	r9
    b328:	af 92       	push	r10
    b32a:	bf 92       	push	r11
    b32c:	cf 92       	push	r12
    b32e:	df 92       	push	r13
    b330:	ef 92       	push	r14
    b332:	ff 92       	push	r15
    b334:	0f 93       	push	r16
    b336:	1f 93       	push	r17
    b338:	cf 93       	push	r28
    b33a:	df 93       	push	r29
    b33c:	ec 01       	movw	r28, r24
    b33e:	2b 01       	movw	r4, r22
    b340:	6a 01       	movw	r12, r20
    b342:	61 15       	cp	r22, r1
    b344:	71 05       	cpc	r23, r1
    b346:	19 f0       	breq	.+6      	; 0xb34e <strtoul+0x34>
    b348:	fb 01       	movw	r30, r22
    b34a:	80 83       	st	Z, r24
    b34c:	91 83       	std	Z+1, r25	; 0x01
    b34e:	c1 14       	cp	r12, r1
    b350:	d1 04       	cpc	r13, r1
    b352:	49 f0       	breq	.+18     	; 0xb366 <strtoul+0x4c>
    b354:	c6 01       	movw	r24, r12
    b356:	02 97       	sbiw	r24, 0x02	; 2
    b358:	83 97       	sbiw	r24, 0x23	; 35
    b35a:	28 f0       	brcs	.+10     	; 0xb366 <strtoul+0x4c>
    b35c:	20 e0       	ldi	r18, 0x00	; 0
    b35e:	30 e0       	ldi	r19, 0x00	; 0
    b360:	40 e0       	ldi	r20, 0x00	; 0
    b362:	50 e0       	ldi	r21, 0x00	; 0
    b364:	dc c0       	rjmp	.+440    	; 0xb51e <strtoul+0x204>
    b366:	a9 90       	ld	r10, Y+
    b368:	8a 2d       	mov	r24, r10
    b36a:	90 e0       	ldi	r25, 0x00	; 0
    b36c:	0e 94 a3 5a 	call	0xb546	; 0xb546 <isspace>
    b370:	89 2b       	or	r24, r25
    b372:	c9 f7       	brne	.-14     	; 0xb366 <strtoul+0x4c>
    b374:	fd e2       	ldi	r31, 0x2D	; 45
    b376:	af 16       	cp	r10, r31
    b378:	21 f4       	brne	.+8      	; 0xb382 <strtoul+0x68>
    b37a:	a9 90       	ld	r10, Y+
    b37c:	33 24       	eor	r3, r3
    b37e:	33 94       	inc	r3
    b380:	05 c0       	rjmp	.+10     	; 0xb38c <strtoul+0x72>
    b382:	8b e2       	ldi	r24, 0x2B	; 43
    b384:	a8 16       	cp	r10, r24
    b386:	09 f4       	brne	.+2      	; 0xb38a <strtoul+0x70>
    b388:	a9 90       	ld	r10, Y+
    b38a:	33 24       	eor	r3, r3
    b38c:	c1 14       	cp	r12, r1
    b38e:	d1 04       	cpc	r13, r1
    b390:	21 f0       	breq	.+8      	; 0xb39a <strtoul+0x80>
    b392:	e0 e1       	ldi	r30, 0x10	; 16
    b394:	ce 16       	cp	r12, r30
    b396:	d1 04       	cpc	r13, r1
    b398:	11 f5       	brne	.+68     	; 0xb3de <strtoul+0xc4>
    b39a:	f0 e3       	ldi	r31, 0x30	; 48
    b39c:	af 16       	cp	r10, r31
    b39e:	69 f4       	brne	.+26     	; 0xb3ba <strtoul+0xa0>
    b3a0:	88 81       	ld	r24, Y
    b3a2:	88 37       	cpi	r24, 0x78	; 120
    b3a4:	11 f0       	breq	.+4      	; 0xb3aa <strtoul+0x90>
    b3a6:	88 35       	cpi	r24, 0x58	; 88
    b3a8:	41 f4       	brne	.+16     	; 0xb3ba <strtoul+0xa0>
    b3aa:	a9 80       	ldd	r10, Y+1	; 0x01
    b3ac:	22 96       	adiw	r28, 0x02	; 2
    b3ae:	82 e0       	ldi	r24, 0x02	; 2
    b3b0:	38 2a       	or	r3, r24
    b3b2:	20 e1       	ldi	r18, 0x10	; 16
    b3b4:	c2 2e       	mov	r12, r18
    b3b6:	d1 2c       	mov	r13, r1
    b3b8:	12 c0       	rjmp	.+36     	; 0xb3de <strtoul+0xc4>
    b3ba:	c1 14       	cp	r12, r1
    b3bc:	d1 04       	cpc	r13, r1
    b3be:	79 f4       	brne	.+30     	; 0xb3de <strtoul+0xc4>
    b3c0:	e0 e3       	ldi	r30, 0x30	; 48
    b3c2:	ae 16       	cp	r10, r30
    b3c4:	59 f1       	breq	.+86     	; 0xb41c <strtoul+0x102>
    b3c6:	99 e9       	ldi	r25, 0x99	; 153
    b3c8:	e9 2e       	mov	r14, r25
    b3ca:	99 e9       	ldi	r25, 0x99	; 153
    b3cc:	f9 2e       	mov	r15, r25
    b3ce:	99 e9       	ldi	r25, 0x99	; 153
    b3d0:	09 2f       	mov	r16, r25
    b3d2:	99 e1       	ldi	r25, 0x19	; 25
    b3d4:	19 2f       	mov	r17, r25
    b3d6:	8a e0       	ldi	r24, 0x0A	; 10
    b3d8:	c8 2e       	mov	r12, r24
    b3da:	d1 2c       	mov	r13, r1
    b3dc:	3a c0       	rjmp	.+116    	; 0xb452 <strtoul+0x138>
    b3de:	fa e0       	ldi	r31, 0x0A	; 10
    b3e0:	cf 16       	cp	r12, r31
    b3e2:	d1 04       	cpc	r13, r1
    b3e4:	91 f0       	breq	.+36     	; 0xb40a <strtoul+0xf0>
    b3e6:	80 e1       	ldi	r24, 0x10	; 16
    b3e8:	c8 16       	cp	r12, r24
    b3ea:	d1 04       	cpc	r13, r1
    b3ec:	29 f0       	breq	.+10     	; 0xb3f8 <strtoul+0xde>
    b3ee:	e8 e0       	ldi	r30, 0x08	; 8
    b3f0:	ce 16       	cp	r12, r30
    b3f2:	d1 04       	cpc	r13, r1
    b3f4:	f9 f4       	brne	.+62     	; 0xb434 <strtoul+0x11a>
    b3f6:	15 c0       	rjmp	.+42     	; 0xb422 <strtoul+0x108>
    b3f8:	bf ef       	ldi	r27, 0xFF	; 255
    b3fa:	eb 2e       	mov	r14, r27
    b3fc:	bf ef       	ldi	r27, 0xFF	; 255
    b3fe:	fb 2e       	mov	r15, r27
    b400:	bf ef       	ldi	r27, 0xFF	; 255
    b402:	0b 2f       	mov	r16, r27
    b404:	bf e0       	ldi	r27, 0x0F	; 15
    b406:	1b 2f       	mov	r17, r27
    b408:	24 c0       	rjmp	.+72     	; 0xb452 <strtoul+0x138>
    b40a:	a9 e9       	ldi	r26, 0x99	; 153
    b40c:	ea 2e       	mov	r14, r26
    b40e:	a9 e9       	ldi	r26, 0x99	; 153
    b410:	fa 2e       	mov	r15, r26
    b412:	a9 e9       	ldi	r26, 0x99	; 153
    b414:	0a 2f       	mov	r16, r26
    b416:	a9 e1       	ldi	r26, 0x19	; 25
    b418:	1a 2f       	mov	r17, r26
    b41a:	1b c0       	rjmp	.+54     	; 0xb452 <strtoul+0x138>
    b41c:	f8 e0       	ldi	r31, 0x08	; 8
    b41e:	cf 2e       	mov	r12, r31
    b420:	d1 2c       	mov	r13, r1
    b422:	ef ef       	ldi	r30, 0xFF	; 255
    b424:	ee 2e       	mov	r14, r30
    b426:	ef ef       	ldi	r30, 0xFF	; 255
    b428:	fe 2e       	mov	r15, r30
    b42a:	ef ef       	ldi	r30, 0xFF	; 255
    b42c:	0e 2f       	mov	r16, r30
    b42e:	ef e1       	ldi	r30, 0x1F	; 31
    b430:	1e 2f       	mov	r17, r30
    b432:	0f c0       	rjmp	.+30     	; 0xb452 <strtoul+0x138>
    b434:	96 01       	movw	r18, r12
    b436:	44 27       	eor	r20, r20
    b438:	37 fd       	sbrc	r19, 7
    b43a:	40 95       	com	r20
    b43c:	54 2f       	mov	r21, r20
    b43e:	6f ef       	ldi	r22, 0xFF	; 255
    b440:	7f ef       	ldi	r23, 0xFF	; 255
    b442:	8f ef       	ldi	r24, 0xFF	; 255
    b444:	9f ef       	ldi	r25, 0xFF	; 255
    b446:	0e 94 0e 58 	call	0xb01c	; 0xb01c <__udivmodsi4>
    b44a:	c9 01       	movw	r24, r18
    b44c:	da 01       	movw	r26, r20
    b44e:	7c 01       	movw	r14, r24
    b450:	8d 01       	movw	r16, r26
    b452:	20 e0       	ldi	r18, 0x00	; 0
    b454:	30 e0       	ldi	r19, 0x00	; 0
    b456:	40 e0       	ldi	r20, 0x00	; 0
    b458:	50 e0       	ldi	r21, 0x00	; 0
    b45a:	60 e0       	ldi	r22, 0x00	; 0
    b45c:	36 01       	movw	r6, r12
    b45e:	88 24       	eor	r8, r8
    b460:	77 fc       	sbrc	r7, 7
    b462:	80 94       	com	r8
    b464:	98 2c       	mov	r9, r8
    b466:	70 ed       	ldi	r23, 0xD0	; 208
    b468:	b7 2e       	mov	r11, r23
    b46a:	ba 0c       	add	r11, r10
    b46c:	f9 e0       	ldi	r31, 0x09	; 9
    b46e:	fb 15       	cp	r31, r11
    b470:	70 f4       	brcc	.+28     	; 0xb48e <strtoul+0x174>
    b472:	8a 2d       	mov	r24, r10
    b474:	81 54       	subi	r24, 0x41	; 65
    b476:	8a 31       	cpi	r24, 0x1A	; 26
    b478:	18 f4       	brcc	.+6      	; 0xb480 <strtoul+0x166>
    b47a:	99 ec       	ldi	r25, 0xC9	; 201
    b47c:	b9 2e       	mov	r11, r25
    b47e:	06 c0       	rjmp	.+12     	; 0xb48c <strtoul+0x172>
    b480:	8a 2d       	mov	r24, r10
    b482:	81 56       	subi	r24, 0x61	; 97
    b484:	8a 31       	cpi	r24, 0x1A	; 26
    b486:	48 f5       	brcc	.+82     	; 0xb4da <strtoul+0x1c0>
    b488:	89 ea       	ldi	r24, 0xA9	; 169
    b48a:	b8 2e       	mov	r11, r24
    b48c:	ba 0c       	add	r11, r10
    b48e:	8b 2d       	mov	r24, r11
    b490:	90 e0       	ldi	r25, 0x00	; 0
    b492:	8c 15       	cp	r24, r12
    b494:	9d 05       	cpc	r25, r13
    b496:	0c f5       	brge	.+66     	; 0xb4da <strtoul+0x1c0>
    b498:	6f 3f       	cpi	r22, 0xFF	; 255
    b49a:	e9 f0       	breq	.+58     	; 0xb4d6 <strtoul+0x1bc>
    b49c:	e2 16       	cp	r14, r18
    b49e:	f3 06       	cpc	r15, r19
    b4a0:	04 07       	cpc	r16, r20
    b4a2:	15 07       	cpc	r17, r21
    b4a4:	b8 f0       	brcs	.+46     	; 0xb4d4 <strtoul+0x1ba>
    b4a6:	ca 01       	movw	r24, r20
    b4a8:	b9 01       	movw	r22, r18
    b4aa:	a4 01       	movw	r20, r8
    b4ac:	93 01       	movw	r18, r6
    b4ae:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <__mulsi3>
    b4b2:	9b 01       	movw	r18, r22
    b4b4:	ac 01       	movw	r20, r24
    b4b6:	8b 2d       	mov	r24, r11
    b4b8:	90 e0       	ldi	r25, 0x00	; 0
    b4ba:	a0 e0       	ldi	r26, 0x00	; 0
    b4bc:	b0 e0       	ldi	r27, 0x00	; 0
    b4be:	28 0f       	add	r18, r24
    b4c0:	39 1f       	adc	r19, r25
    b4c2:	4a 1f       	adc	r20, r26
    b4c4:	5b 1f       	adc	r21, r27
    b4c6:	28 17       	cp	r18, r24
    b4c8:	39 07       	cpc	r19, r25
    b4ca:	4a 07       	cpc	r20, r26
    b4cc:	5b 07       	cpc	r21, r27
    b4ce:	10 f0       	brcs	.+4      	; 0xb4d4 <strtoul+0x1ba>
    b4d0:	61 e0       	ldi	r22, 0x01	; 1
    b4d2:	01 c0       	rjmp	.+2      	; 0xb4d6 <strtoul+0x1bc>
    b4d4:	6f ef       	ldi	r22, 0xFF	; 255
    b4d6:	a9 90       	ld	r10, Y+
    b4d8:	c6 cf       	rjmp	.-116    	; 0xb466 <strtoul+0x14c>
    b4da:	41 14       	cp	r4, r1
    b4dc:	51 04       	cpc	r5, r1
    b4de:	51 f0       	breq	.+20     	; 0xb4f4 <strtoul+0x1da>
    b4e0:	66 23       	and	r22, r22
    b4e2:	11 f0       	breq	.+4      	; 0xb4e8 <strtoul+0x1ce>
    b4e4:	21 97       	sbiw	r28, 0x01	; 1
    b4e6:	03 c0       	rjmp	.+6      	; 0xb4ee <strtoul+0x1d4>
    b4e8:	31 fe       	sbrs	r3, 1
    b4ea:	04 c0       	rjmp	.+8      	; 0xb4f4 <strtoul+0x1da>
    b4ec:	22 97       	sbiw	r28, 0x02	; 2
    b4ee:	f2 01       	movw	r30, r4
    b4f0:	c0 83       	st	Z, r28
    b4f2:	d1 83       	std	Z+1, r29	; 0x01
    b4f4:	30 fe       	sbrs	r3, 0
    b4f6:	07 c0       	rjmp	.+14     	; 0xb506 <strtoul+0x1ec>
    b4f8:	50 95       	com	r21
    b4fa:	40 95       	com	r20
    b4fc:	30 95       	com	r19
    b4fe:	21 95       	neg	r18
    b500:	3f 4f       	sbci	r19, 0xFF	; 255
    b502:	4f 4f       	sbci	r20, 0xFF	; 255
    b504:	5f 4f       	sbci	r21, 0xFF	; 255
    b506:	67 ff       	sbrs	r22, 7
    b508:	0a c0       	rjmp	.+20     	; 0xb51e <strtoul+0x204>
    b50a:	82 e2       	ldi	r24, 0x22	; 34
    b50c:	90 e0       	ldi	r25, 0x00	; 0
    b50e:	80 93 fb 2b 	sts	0x2BFB, r24
    b512:	90 93 fc 2b 	sts	0x2BFC, r25
    b516:	2f ef       	ldi	r18, 0xFF	; 255
    b518:	3f ef       	ldi	r19, 0xFF	; 255
    b51a:	4f ef       	ldi	r20, 0xFF	; 255
    b51c:	5f ef       	ldi	r21, 0xFF	; 255
    b51e:	b9 01       	movw	r22, r18
    b520:	ca 01       	movw	r24, r20
    b522:	df 91       	pop	r29
    b524:	cf 91       	pop	r28
    b526:	1f 91       	pop	r17
    b528:	0f 91       	pop	r16
    b52a:	ff 90       	pop	r15
    b52c:	ef 90       	pop	r14
    b52e:	df 90       	pop	r13
    b530:	cf 90       	pop	r12
    b532:	bf 90       	pop	r11
    b534:	af 90       	pop	r10
    b536:	9f 90       	pop	r9
    b538:	8f 90       	pop	r8
    b53a:	7f 90       	pop	r7
    b53c:	6f 90       	pop	r6
    b53e:	5f 90       	pop	r5
    b540:	4f 90       	pop	r4
    b542:	3f 90       	pop	r3
    b544:	08 95       	ret

0000b546 <isspace>:
    b546:	91 11       	cpse	r25, r1
    b548:	64 c2       	rjmp	.+1224   	; 0xba12 <__ctype_isfalse>
    b54a:	80 32       	cpi	r24, 0x20	; 32
    b54c:	19 f0       	breq	.+6      	; 0xb554 <isspace+0xe>
    b54e:	89 50       	subi	r24, 0x09	; 9
    b550:	85 50       	subi	r24, 0x05	; 5
    b552:	d0 f7       	brcc	.-12     	; 0xb548 <isspace+0x2>
    b554:	08 95       	ret

0000b556 <sprintf>:
    b556:	0f 93       	push	r16
    b558:	1f 93       	push	r17
    b55a:	df 93       	push	r29
    b55c:	cf 93       	push	r28
    b55e:	cd b7       	in	r28, 0x3d	; 61
    b560:	de b7       	in	r29, 0x3e	; 62
    b562:	2e 97       	sbiw	r28, 0x0e	; 14
    b564:	cd bf       	out	0x3d, r28	; 61
    b566:	de bf       	out	0x3e, r29	; 62
    b568:	0e 89       	ldd	r16, Y+22	; 0x16
    b56a:	1f 89       	ldd	r17, Y+23	; 0x17
    b56c:	86 e0       	ldi	r24, 0x06	; 6
    b56e:	8c 83       	std	Y+4, r24	; 0x04
    b570:	09 83       	std	Y+1, r16	; 0x01
    b572:	1a 83       	std	Y+2, r17	; 0x02
    b574:	8f ef       	ldi	r24, 0xFF	; 255
    b576:	9f e7       	ldi	r25, 0x7F	; 127
    b578:	8d 83       	std	Y+5, r24	; 0x05
    b57a:	9e 83       	std	Y+6, r25	; 0x06
    b57c:	9e 01       	movw	r18, r28
    b57e:	26 5e       	subi	r18, 0xE6	; 230
    b580:	3f 4f       	sbci	r19, 0xFF	; 255
    b582:	ce 01       	movw	r24, r28
    b584:	01 96       	adiw	r24, 0x01	; 1
    b586:	68 8d       	ldd	r22, Y+24	; 0x18
    b588:	79 8d       	ldd	r23, Y+25	; 0x19
    b58a:	a9 01       	movw	r20, r18
    b58c:	0e 94 d6 5a 	call	0xb5ac	; 0xb5ac <vfprintf>
    b590:	2f 81       	ldd	r18, Y+7	; 0x07
    b592:	38 85       	ldd	r19, Y+8	; 0x08
    b594:	02 0f       	add	r16, r18
    b596:	13 1f       	adc	r17, r19
    b598:	f8 01       	movw	r30, r16
    b59a:	10 82       	st	Z, r1
    b59c:	2e 96       	adiw	r28, 0x0e	; 14
    b59e:	cd bf       	out	0x3d, r28	; 61
    b5a0:	de bf       	out	0x3e, r29	; 62
    b5a2:	cf 91       	pop	r28
    b5a4:	df 91       	pop	r29
    b5a6:	1f 91       	pop	r17
    b5a8:	0f 91       	pop	r16
    b5aa:	08 95       	ret

0000b5ac <vfprintf>:
    b5ac:	2f 92       	push	r2
    b5ae:	3f 92       	push	r3
    b5b0:	4f 92       	push	r4
    b5b2:	5f 92       	push	r5
    b5b4:	6f 92       	push	r6
    b5b6:	7f 92       	push	r7
    b5b8:	8f 92       	push	r8
    b5ba:	9f 92       	push	r9
    b5bc:	af 92       	push	r10
    b5be:	bf 92       	push	r11
    b5c0:	cf 92       	push	r12
    b5c2:	df 92       	push	r13
    b5c4:	ef 92       	push	r14
    b5c6:	ff 92       	push	r15
    b5c8:	0f 93       	push	r16
    b5ca:	1f 93       	push	r17
    b5cc:	df 93       	push	r29
    b5ce:	cf 93       	push	r28
    b5d0:	cd b7       	in	r28, 0x3d	; 61
    b5d2:	de b7       	in	r29, 0x3e	; 62
    b5d4:	2b 97       	sbiw	r28, 0x0b	; 11
    b5d6:	cd bf       	out	0x3d, r28	; 61
    b5d8:	de bf       	out	0x3e, r29	; 62
    b5da:	3c 01       	movw	r6, r24
    b5dc:	2b 01       	movw	r4, r22
    b5de:	5a 01       	movw	r10, r20
    b5e0:	fc 01       	movw	r30, r24
    b5e2:	16 82       	std	Z+6, r1	; 0x06
    b5e4:	17 82       	std	Z+7, r1	; 0x07
    b5e6:	83 81       	ldd	r24, Z+3	; 0x03
    b5e8:	81 fd       	sbrc	r24, 1
    b5ea:	03 c0       	rjmp	.+6      	; 0xb5f2 <vfprintf+0x46>
    b5ec:	6f ef       	ldi	r22, 0xFF	; 255
    b5ee:	7f ef       	ldi	r23, 0xFF	; 255
    b5f0:	c6 c1       	rjmp	.+908    	; 0xb97e <vfprintf+0x3d2>
    b5f2:	9a e0       	ldi	r25, 0x0A	; 10
    b5f4:	89 2e       	mov	r8, r25
    b5f6:	1e 01       	movw	r2, r28
    b5f8:	08 94       	sec
    b5fa:	21 1c       	adc	r2, r1
    b5fc:	31 1c       	adc	r3, r1
    b5fe:	f3 01       	movw	r30, r6
    b600:	23 81       	ldd	r18, Z+3	; 0x03
    b602:	f2 01       	movw	r30, r4
    b604:	23 fd       	sbrc	r18, 3
    b606:	85 91       	lpm	r24, Z+
    b608:	23 ff       	sbrs	r18, 3
    b60a:	81 91       	ld	r24, Z+
    b60c:	2f 01       	movw	r4, r30
    b60e:	88 23       	and	r24, r24
    b610:	09 f4       	brne	.+2      	; 0xb614 <vfprintf+0x68>
    b612:	b2 c1       	rjmp	.+868    	; 0xb978 <vfprintf+0x3cc>
    b614:	85 32       	cpi	r24, 0x25	; 37
    b616:	39 f4       	brne	.+14     	; 0xb626 <vfprintf+0x7a>
    b618:	23 fd       	sbrc	r18, 3
    b61a:	85 91       	lpm	r24, Z+
    b61c:	23 ff       	sbrs	r18, 3
    b61e:	81 91       	ld	r24, Z+
    b620:	2f 01       	movw	r4, r30
    b622:	85 32       	cpi	r24, 0x25	; 37
    b624:	29 f4       	brne	.+10     	; 0xb630 <vfprintf+0x84>
    b626:	90 e0       	ldi	r25, 0x00	; 0
    b628:	b3 01       	movw	r22, r6
    b62a:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b62e:	e7 cf       	rjmp	.-50     	; 0xb5fe <vfprintf+0x52>
    b630:	98 2f       	mov	r25, r24
    b632:	ff 24       	eor	r15, r15
    b634:	ee 24       	eor	r14, r14
    b636:	99 24       	eor	r9, r9
    b638:	ff e1       	ldi	r31, 0x1F	; 31
    b63a:	ff 15       	cp	r31, r15
    b63c:	d0 f0       	brcs	.+52     	; 0xb672 <vfprintf+0xc6>
    b63e:	9b 32       	cpi	r25, 0x2B	; 43
    b640:	69 f0       	breq	.+26     	; 0xb65c <vfprintf+0xb0>
    b642:	9c 32       	cpi	r25, 0x2C	; 44
    b644:	28 f4       	brcc	.+10     	; 0xb650 <vfprintf+0xa4>
    b646:	90 32       	cpi	r25, 0x20	; 32
    b648:	59 f0       	breq	.+22     	; 0xb660 <vfprintf+0xb4>
    b64a:	93 32       	cpi	r25, 0x23	; 35
    b64c:	91 f4       	brne	.+36     	; 0xb672 <vfprintf+0xc6>
    b64e:	0e c0       	rjmp	.+28     	; 0xb66c <vfprintf+0xc0>
    b650:	9d 32       	cpi	r25, 0x2D	; 45
    b652:	49 f0       	breq	.+18     	; 0xb666 <vfprintf+0xba>
    b654:	90 33       	cpi	r25, 0x30	; 48
    b656:	69 f4       	brne	.+26     	; 0xb672 <vfprintf+0xc6>
    b658:	41 e0       	ldi	r20, 0x01	; 1
    b65a:	24 c0       	rjmp	.+72     	; 0xb6a4 <vfprintf+0xf8>
    b65c:	52 e0       	ldi	r21, 0x02	; 2
    b65e:	f5 2a       	or	r15, r21
    b660:	84 e0       	ldi	r24, 0x04	; 4
    b662:	f8 2a       	or	r15, r24
    b664:	28 c0       	rjmp	.+80     	; 0xb6b6 <vfprintf+0x10a>
    b666:	98 e0       	ldi	r25, 0x08	; 8
    b668:	f9 2a       	or	r15, r25
    b66a:	25 c0       	rjmp	.+74     	; 0xb6b6 <vfprintf+0x10a>
    b66c:	e0 e1       	ldi	r30, 0x10	; 16
    b66e:	fe 2a       	or	r15, r30
    b670:	22 c0       	rjmp	.+68     	; 0xb6b6 <vfprintf+0x10a>
    b672:	f7 fc       	sbrc	r15, 7
    b674:	29 c0       	rjmp	.+82     	; 0xb6c8 <vfprintf+0x11c>
    b676:	89 2f       	mov	r24, r25
    b678:	80 53       	subi	r24, 0x30	; 48
    b67a:	8a 30       	cpi	r24, 0x0A	; 10
    b67c:	70 f4       	brcc	.+28     	; 0xb69a <vfprintf+0xee>
    b67e:	f6 fe       	sbrs	r15, 6
    b680:	05 c0       	rjmp	.+10     	; 0xb68c <vfprintf+0xe0>
    b682:	98 9c       	mul	r9, r8
    b684:	90 2c       	mov	r9, r0
    b686:	11 24       	eor	r1, r1
    b688:	98 0e       	add	r9, r24
    b68a:	15 c0       	rjmp	.+42     	; 0xb6b6 <vfprintf+0x10a>
    b68c:	e8 9c       	mul	r14, r8
    b68e:	e0 2c       	mov	r14, r0
    b690:	11 24       	eor	r1, r1
    b692:	e8 0e       	add	r14, r24
    b694:	f0 e2       	ldi	r31, 0x20	; 32
    b696:	ff 2a       	or	r15, r31
    b698:	0e c0       	rjmp	.+28     	; 0xb6b6 <vfprintf+0x10a>
    b69a:	9e 32       	cpi	r25, 0x2E	; 46
    b69c:	29 f4       	brne	.+10     	; 0xb6a8 <vfprintf+0xfc>
    b69e:	f6 fc       	sbrc	r15, 6
    b6a0:	6b c1       	rjmp	.+726    	; 0xb978 <vfprintf+0x3cc>
    b6a2:	40 e4       	ldi	r20, 0x40	; 64
    b6a4:	f4 2a       	or	r15, r20
    b6a6:	07 c0       	rjmp	.+14     	; 0xb6b6 <vfprintf+0x10a>
    b6a8:	9c 36       	cpi	r25, 0x6C	; 108
    b6aa:	19 f4       	brne	.+6      	; 0xb6b2 <vfprintf+0x106>
    b6ac:	50 e8       	ldi	r21, 0x80	; 128
    b6ae:	f5 2a       	or	r15, r21
    b6b0:	02 c0       	rjmp	.+4      	; 0xb6b6 <vfprintf+0x10a>
    b6b2:	98 36       	cpi	r25, 0x68	; 104
    b6b4:	49 f4       	brne	.+18     	; 0xb6c8 <vfprintf+0x11c>
    b6b6:	f2 01       	movw	r30, r4
    b6b8:	23 fd       	sbrc	r18, 3
    b6ba:	95 91       	lpm	r25, Z+
    b6bc:	23 ff       	sbrs	r18, 3
    b6be:	91 91       	ld	r25, Z+
    b6c0:	2f 01       	movw	r4, r30
    b6c2:	99 23       	and	r25, r25
    b6c4:	09 f0       	breq	.+2      	; 0xb6c8 <vfprintf+0x11c>
    b6c6:	b8 cf       	rjmp	.-144    	; 0xb638 <vfprintf+0x8c>
    b6c8:	89 2f       	mov	r24, r25
    b6ca:	85 54       	subi	r24, 0x45	; 69
    b6cc:	83 30       	cpi	r24, 0x03	; 3
    b6ce:	18 f0       	brcs	.+6      	; 0xb6d6 <vfprintf+0x12a>
    b6d0:	80 52       	subi	r24, 0x20	; 32
    b6d2:	83 30       	cpi	r24, 0x03	; 3
    b6d4:	38 f4       	brcc	.+14     	; 0xb6e4 <vfprintf+0x138>
    b6d6:	44 e0       	ldi	r20, 0x04	; 4
    b6d8:	50 e0       	ldi	r21, 0x00	; 0
    b6da:	a4 0e       	add	r10, r20
    b6dc:	b5 1e       	adc	r11, r21
    b6de:	5f e3       	ldi	r21, 0x3F	; 63
    b6e0:	59 83       	std	Y+1, r21	; 0x01
    b6e2:	0f c0       	rjmp	.+30     	; 0xb702 <vfprintf+0x156>
    b6e4:	93 36       	cpi	r25, 0x63	; 99
    b6e6:	31 f0       	breq	.+12     	; 0xb6f4 <vfprintf+0x148>
    b6e8:	93 37       	cpi	r25, 0x73	; 115
    b6ea:	79 f0       	breq	.+30     	; 0xb70a <vfprintf+0x15e>
    b6ec:	93 35       	cpi	r25, 0x53	; 83
    b6ee:	09 f0       	breq	.+2      	; 0xb6f2 <vfprintf+0x146>
    b6f0:	56 c0       	rjmp	.+172    	; 0xb79e <vfprintf+0x1f2>
    b6f2:	20 c0       	rjmp	.+64     	; 0xb734 <vfprintf+0x188>
    b6f4:	f5 01       	movw	r30, r10
    b6f6:	80 81       	ld	r24, Z
    b6f8:	89 83       	std	Y+1, r24	; 0x01
    b6fa:	42 e0       	ldi	r20, 0x02	; 2
    b6fc:	50 e0       	ldi	r21, 0x00	; 0
    b6fe:	a4 0e       	add	r10, r20
    b700:	b5 1e       	adc	r11, r21
    b702:	61 01       	movw	r12, r2
    b704:	01 e0       	ldi	r16, 0x01	; 1
    b706:	10 e0       	ldi	r17, 0x00	; 0
    b708:	12 c0       	rjmp	.+36     	; 0xb72e <vfprintf+0x182>
    b70a:	f5 01       	movw	r30, r10
    b70c:	c0 80       	ld	r12, Z
    b70e:	d1 80       	ldd	r13, Z+1	; 0x01
    b710:	f6 fc       	sbrc	r15, 6
    b712:	03 c0       	rjmp	.+6      	; 0xb71a <vfprintf+0x16e>
    b714:	6f ef       	ldi	r22, 0xFF	; 255
    b716:	7f ef       	ldi	r23, 0xFF	; 255
    b718:	02 c0       	rjmp	.+4      	; 0xb71e <vfprintf+0x172>
    b71a:	69 2d       	mov	r22, r9
    b71c:	70 e0       	ldi	r23, 0x00	; 0
    b71e:	42 e0       	ldi	r20, 0x02	; 2
    b720:	50 e0       	ldi	r21, 0x00	; 0
    b722:	a4 0e       	add	r10, r20
    b724:	b5 1e       	adc	r11, r21
    b726:	c6 01       	movw	r24, r12
    b728:	0e 94 17 5d 	call	0xba2e	; 0xba2e <strnlen>
    b72c:	8c 01       	movw	r16, r24
    b72e:	5f e7       	ldi	r21, 0x7F	; 127
    b730:	f5 22       	and	r15, r21
    b732:	14 c0       	rjmp	.+40     	; 0xb75c <vfprintf+0x1b0>
    b734:	f5 01       	movw	r30, r10
    b736:	c0 80       	ld	r12, Z
    b738:	d1 80       	ldd	r13, Z+1	; 0x01
    b73a:	f6 fc       	sbrc	r15, 6
    b73c:	03 c0       	rjmp	.+6      	; 0xb744 <vfprintf+0x198>
    b73e:	6f ef       	ldi	r22, 0xFF	; 255
    b740:	7f ef       	ldi	r23, 0xFF	; 255
    b742:	02 c0       	rjmp	.+4      	; 0xb748 <vfprintf+0x19c>
    b744:	69 2d       	mov	r22, r9
    b746:	70 e0       	ldi	r23, 0x00	; 0
    b748:	42 e0       	ldi	r20, 0x02	; 2
    b74a:	50 e0       	ldi	r21, 0x00	; 0
    b74c:	a4 0e       	add	r10, r20
    b74e:	b5 1e       	adc	r11, r21
    b750:	c6 01       	movw	r24, r12
    b752:	0e 94 0c 5d 	call	0xba18	; 0xba18 <strnlen_P>
    b756:	8c 01       	movw	r16, r24
    b758:	50 e8       	ldi	r21, 0x80	; 128
    b75a:	f5 2a       	or	r15, r21
    b75c:	f3 fe       	sbrs	r15, 3
    b75e:	07 c0       	rjmp	.+14     	; 0xb76e <vfprintf+0x1c2>
    b760:	1a c0       	rjmp	.+52     	; 0xb796 <vfprintf+0x1ea>
    b762:	80 e2       	ldi	r24, 0x20	; 32
    b764:	90 e0       	ldi	r25, 0x00	; 0
    b766:	b3 01       	movw	r22, r6
    b768:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b76c:	ea 94       	dec	r14
    b76e:	8e 2d       	mov	r24, r14
    b770:	90 e0       	ldi	r25, 0x00	; 0
    b772:	08 17       	cp	r16, r24
    b774:	19 07       	cpc	r17, r25
    b776:	a8 f3       	brcs	.-22     	; 0xb762 <vfprintf+0x1b6>
    b778:	0e c0       	rjmp	.+28     	; 0xb796 <vfprintf+0x1ea>
    b77a:	f6 01       	movw	r30, r12
    b77c:	f7 fc       	sbrc	r15, 7
    b77e:	85 91       	lpm	r24, Z+
    b780:	f7 fe       	sbrs	r15, 7
    b782:	81 91       	ld	r24, Z+
    b784:	6f 01       	movw	r12, r30
    b786:	90 e0       	ldi	r25, 0x00	; 0
    b788:	b3 01       	movw	r22, r6
    b78a:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b78e:	e1 10       	cpse	r14, r1
    b790:	ea 94       	dec	r14
    b792:	01 50       	subi	r16, 0x01	; 1
    b794:	10 40       	sbci	r17, 0x00	; 0
    b796:	01 15       	cp	r16, r1
    b798:	11 05       	cpc	r17, r1
    b79a:	79 f7       	brne	.-34     	; 0xb77a <vfprintf+0x1ce>
    b79c:	ea c0       	rjmp	.+468    	; 0xb972 <vfprintf+0x3c6>
    b79e:	94 36       	cpi	r25, 0x64	; 100
    b7a0:	11 f0       	breq	.+4      	; 0xb7a6 <vfprintf+0x1fa>
    b7a2:	99 36       	cpi	r25, 0x69	; 105
    b7a4:	69 f5       	brne	.+90     	; 0xb800 <vfprintf+0x254>
    b7a6:	f7 fe       	sbrs	r15, 7
    b7a8:	08 c0       	rjmp	.+16     	; 0xb7ba <vfprintf+0x20e>
    b7aa:	f5 01       	movw	r30, r10
    b7ac:	20 81       	ld	r18, Z
    b7ae:	31 81       	ldd	r19, Z+1	; 0x01
    b7b0:	42 81       	ldd	r20, Z+2	; 0x02
    b7b2:	53 81       	ldd	r21, Z+3	; 0x03
    b7b4:	84 e0       	ldi	r24, 0x04	; 4
    b7b6:	90 e0       	ldi	r25, 0x00	; 0
    b7b8:	0a c0       	rjmp	.+20     	; 0xb7ce <vfprintf+0x222>
    b7ba:	f5 01       	movw	r30, r10
    b7bc:	80 81       	ld	r24, Z
    b7be:	91 81       	ldd	r25, Z+1	; 0x01
    b7c0:	9c 01       	movw	r18, r24
    b7c2:	44 27       	eor	r20, r20
    b7c4:	37 fd       	sbrc	r19, 7
    b7c6:	40 95       	com	r20
    b7c8:	54 2f       	mov	r21, r20
    b7ca:	82 e0       	ldi	r24, 0x02	; 2
    b7cc:	90 e0       	ldi	r25, 0x00	; 0
    b7ce:	a8 0e       	add	r10, r24
    b7d0:	b9 1e       	adc	r11, r25
    b7d2:	9f e6       	ldi	r25, 0x6F	; 111
    b7d4:	f9 22       	and	r15, r25
    b7d6:	57 ff       	sbrs	r21, 7
    b7d8:	09 c0       	rjmp	.+18     	; 0xb7ec <vfprintf+0x240>
    b7da:	50 95       	com	r21
    b7dc:	40 95       	com	r20
    b7de:	30 95       	com	r19
    b7e0:	21 95       	neg	r18
    b7e2:	3f 4f       	sbci	r19, 0xFF	; 255
    b7e4:	4f 4f       	sbci	r20, 0xFF	; 255
    b7e6:	5f 4f       	sbci	r21, 0xFF	; 255
    b7e8:	e0 e8       	ldi	r30, 0x80	; 128
    b7ea:	fe 2a       	or	r15, r30
    b7ec:	ca 01       	movw	r24, r20
    b7ee:	b9 01       	movw	r22, r18
    b7f0:	a1 01       	movw	r20, r2
    b7f2:	2a e0       	ldi	r18, 0x0A	; 10
    b7f4:	30 e0       	ldi	r19, 0x00	; 0
    b7f6:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__ultoa_invert>
    b7fa:	d8 2e       	mov	r13, r24
    b7fc:	d2 18       	sub	r13, r2
    b7fe:	40 c0       	rjmp	.+128    	; 0xb880 <vfprintf+0x2d4>
    b800:	95 37       	cpi	r25, 0x75	; 117
    b802:	29 f4       	brne	.+10     	; 0xb80e <vfprintf+0x262>
    b804:	1f 2d       	mov	r17, r15
    b806:	1f 7e       	andi	r17, 0xEF	; 239
    b808:	2a e0       	ldi	r18, 0x0A	; 10
    b80a:	30 e0       	ldi	r19, 0x00	; 0
    b80c:	1d c0       	rjmp	.+58     	; 0xb848 <vfprintf+0x29c>
    b80e:	1f 2d       	mov	r17, r15
    b810:	19 7f       	andi	r17, 0xF9	; 249
    b812:	9f 36       	cpi	r25, 0x6F	; 111
    b814:	61 f0       	breq	.+24     	; 0xb82e <vfprintf+0x282>
    b816:	90 37       	cpi	r25, 0x70	; 112
    b818:	20 f4       	brcc	.+8      	; 0xb822 <vfprintf+0x276>
    b81a:	98 35       	cpi	r25, 0x58	; 88
    b81c:	09 f0       	breq	.+2      	; 0xb820 <vfprintf+0x274>
    b81e:	ac c0       	rjmp	.+344    	; 0xb978 <vfprintf+0x3cc>
    b820:	0f c0       	rjmp	.+30     	; 0xb840 <vfprintf+0x294>
    b822:	90 37       	cpi	r25, 0x70	; 112
    b824:	39 f0       	breq	.+14     	; 0xb834 <vfprintf+0x288>
    b826:	98 37       	cpi	r25, 0x78	; 120
    b828:	09 f0       	breq	.+2      	; 0xb82c <vfprintf+0x280>
    b82a:	a6 c0       	rjmp	.+332    	; 0xb978 <vfprintf+0x3cc>
    b82c:	04 c0       	rjmp	.+8      	; 0xb836 <vfprintf+0x28a>
    b82e:	28 e0       	ldi	r18, 0x08	; 8
    b830:	30 e0       	ldi	r19, 0x00	; 0
    b832:	0a c0       	rjmp	.+20     	; 0xb848 <vfprintf+0x29c>
    b834:	10 61       	ori	r17, 0x10	; 16
    b836:	14 fd       	sbrc	r17, 4
    b838:	14 60       	ori	r17, 0x04	; 4
    b83a:	20 e1       	ldi	r18, 0x10	; 16
    b83c:	30 e0       	ldi	r19, 0x00	; 0
    b83e:	04 c0       	rjmp	.+8      	; 0xb848 <vfprintf+0x29c>
    b840:	14 fd       	sbrc	r17, 4
    b842:	16 60       	ori	r17, 0x06	; 6
    b844:	20 e1       	ldi	r18, 0x10	; 16
    b846:	32 e0       	ldi	r19, 0x02	; 2
    b848:	17 ff       	sbrs	r17, 7
    b84a:	08 c0       	rjmp	.+16     	; 0xb85c <vfprintf+0x2b0>
    b84c:	f5 01       	movw	r30, r10
    b84e:	60 81       	ld	r22, Z
    b850:	71 81       	ldd	r23, Z+1	; 0x01
    b852:	82 81       	ldd	r24, Z+2	; 0x02
    b854:	93 81       	ldd	r25, Z+3	; 0x03
    b856:	44 e0       	ldi	r20, 0x04	; 4
    b858:	50 e0       	ldi	r21, 0x00	; 0
    b85a:	08 c0       	rjmp	.+16     	; 0xb86c <vfprintf+0x2c0>
    b85c:	f5 01       	movw	r30, r10
    b85e:	80 81       	ld	r24, Z
    b860:	91 81       	ldd	r25, Z+1	; 0x01
    b862:	bc 01       	movw	r22, r24
    b864:	80 e0       	ldi	r24, 0x00	; 0
    b866:	90 e0       	ldi	r25, 0x00	; 0
    b868:	42 e0       	ldi	r20, 0x02	; 2
    b86a:	50 e0       	ldi	r21, 0x00	; 0
    b86c:	a4 0e       	add	r10, r20
    b86e:	b5 1e       	adc	r11, r21
    b870:	a1 01       	movw	r20, r2
    b872:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__ultoa_invert>
    b876:	d8 2e       	mov	r13, r24
    b878:	d2 18       	sub	r13, r2
    b87a:	8f e7       	ldi	r24, 0x7F	; 127
    b87c:	f8 2e       	mov	r15, r24
    b87e:	f1 22       	and	r15, r17
    b880:	f6 fe       	sbrs	r15, 6
    b882:	0b c0       	rjmp	.+22     	; 0xb89a <vfprintf+0x2ee>
    b884:	5e ef       	ldi	r21, 0xFE	; 254
    b886:	f5 22       	and	r15, r21
    b888:	d9 14       	cp	r13, r9
    b88a:	38 f4       	brcc	.+14     	; 0xb89a <vfprintf+0x2ee>
    b88c:	f4 fe       	sbrs	r15, 4
    b88e:	07 c0       	rjmp	.+14     	; 0xb89e <vfprintf+0x2f2>
    b890:	f2 fc       	sbrc	r15, 2
    b892:	05 c0       	rjmp	.+10     	; 0xb89e <vfprintf+0x2f2>
    b894:	8f ee       	ldi	r24, 0xEF	; 239
    b896:	f8 22       	and	r15, r24
    b898:	02 c0       	rjmp	.+4      	; 0xb89e <vfprintf+0x2f2>
    b89a:	1d 2d       	mov	r17, r13
    b89c:	01 c0       	rjmp	.+2      	; 0xb8a0 <vfprintf+0x2f4>
    b89e:	19 2d       	mov	r17, r9
    b8a0:	f4 fe       	sbrs	r15, 4
    b8a2:	0d c0       	rjmp	.+26     	; 0xb8be <vfprintf+0x312>
    b8a4:	fe 01       	movw	r30, r28
    b8a6:	ed 0d       	add	r30, r13
    b8a8:	f1 1d       	adc	r31, r1
    b8aa:	80 81       	ld	r24, Z
    b8ac:	80 33       	cpi	r24, 0x30	; 48
    b8ae:	19 f4       	brne	.+6      	; 0xb8b6 <vfprintf+0x30a>
    b8b0:	99 ee       	ldi	r25, 0xE9	; 233
    b8b2:	f9 22       	and	r15, r25
    b8b4:	08 c0       	rjmp	.+16     	; 0xb8c6 <vfprintf+0x31a>
    b8b6:	1f 5f       	subi	r17, 0xFF	; 255
    b8b8:	f2 fe       	sbrs	r15, 2
    b8ba:	05 c0       	rjmp	.+10     	; 0xb8c6 <vfprintf+0x31a>
    b8bc:	03 c0       	rjmp	.+6      	; 0xb8c4 <vfprintf+0x318>
    b8be:	8f 2d       	mov	r24, r15
    b8c0:	86 78       	andi	r24, 0x86	; 134
    b8c2:	09 f0       	breq	.+2      	; 0xb8c6 <vfprintf+0x31a>
    b8c4:	1f 5f       	subi	r17, 0xFF	; 255
    b8c6:	0f 2d       	mov	r16, r15
    b8c8:	f3 fc       	sbrc	r15, 3
    b8ca:	14 c0       	rjmp	.+40     	; 0xb8f4 <vfprintf+0x348>
    b8cc:	f0 fe       	sbrs	r15, 0
    b8ce:	0f c0       	rjmp	.+30     	; 0xb8ee <vfprintf+0x342>
    b8d0:	1e 15       	cp	r17, r14
    b8d2:	10 f0       	brcs	.+4      	; 0xb8d8 <vfprintf+0x32c>
    b8d4:	9d 2c       	mov	r9, r13
    b8d6:	0b c0       	rjmp	.+22     	; 0xb8ee <vfprintf+0x342>
    b8d8:	9d 2c       	mov	r9, r13
    b8da:	9e 0c       	add	r9, r14
    b8dc:	91 1a       	sub	r9, r17
    b8de:	1e 2d       	mov	r17, r14
    b8e0:	06 c0       	rjmp	.+12     	; 0xb8ee <vfprintf+0x342>
    b8e2:	80 e2       	ldi	r24, 0x20	; 32
    b8e4:	90 e0       	ldi	r25, 0x00	; 0
    b8e6:	b3 01       	movw	r22, r6
    b8e8:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b8ec:	1f 5f       	subi	r17, 0xFF	; 255
    b8ee:	1e 15       	cp	r17, r14
    b8f0:	c0 f3       	brcs	.-16     	; 0xb8e2 <vfprintf+0x336>
    b8f2:	04 c0       	rjmp	.+8      	; 0xb8fc <vfprintf+0x350>
    b8f4:	1e 15       	cp	r17, r14
    b8f6:	10 f4       	brcc	.+4      	; 0xb8fc <vfprintf+0x350>
    b8f8:	e1 1a       	sub	r14, r17
    b8fa:	01 c0       	rjmp	.+2      	; 0xb8fe <vfprintf+0x352>
    b8fc:	ee 24       	eor	r14, r14
    b8fe:	04 ff       	sbrs	r16, 4
    b900:	0f c0       	rjmp	.+30     	; 0xb920 <vfprintf+0x374>
    b902:	80 e3       	ldi	r24, 0x30	; 48
    b904:	90 e0       	ldi	r25, 0x00	; 0
    b906:	b3 01       	movw	r22, r6
    b908:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b90c:	02 ff       	sbrs	r16, 2
    b90e:	1d c0       	rjmp	.+58     	; 0xb94a <vfprintf+0x39e>
    b910:	01 fd       	sbrc	r16, 1
    b912:	03 c0       	rjmp	.+6      	; 0xb91a <vfprintf+0x36e>
    b914:	88 e7       	ldi	r24, 0x78	; 120
    b916:	90 e0       	ldi	r25, 0x00	; 0
    b918:	0e c0       	rjmp	.+28     	; 0xb936 <vfprintf+0x38a>
    b91a:	88 e5       	ldi	r24, 0x58	; 88
    b91c:	90 e0       	ldi	r25, 0x00	; 0
    b91e:	0b c0       	rjmp	.+22     	; 0xb936 <vfprintf+0x38a>
    b920:	80 2f       	mov	r24, r16
    b922:	86 78       	andi	r24, 0x86	; 134
    b924:	91 f0       	breq	.+36     	; 0xb94a <vfprintf+0x39e>
    b926:	01 ff       	sbrs	r16, 1
    b928:	02 c0       	rjmp	.+4      	; 0xb92e <vfprintf+0x382>
    b92a:	8b e2       	ldi	r24, 0x2B	; 43
    b92c:	01 c0       	rjmp	.+2      	; 0xb930 <vfprintf+0x384>
    b92e:	80 e2       	ldi	r24, 0x20	; 32
    b930:	f7 fc       	sbrc	r15, 7
    b932:	8d e2       	ldi	r24, 0x2D	; 45
    b934:	90 e0       	ldi	r25, 0x00	; 0
    b936:	b3 01       	movw	r22, r6
    b938:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b93c:	06 c0       	rjmp	.+12     	; 0xb94a <vfprintf+0x39e>
    b93e:	80 e3       	ldi	r24, 0x30	; 48
    b940:	90 e0       	ldi	r25, 0x00	; 0
    b942:	b3 01       	movw	r22, r6
    b944:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b948:	9a 94       	dec	r9
    b94a:	d9 14       	cp	r13, r9
    b94c:	c0 f3       	brcs	.-16     	; 0xb93e <vfprintf+0x392>
    b94e:	da 94       	dec	r13
    b950:	f1 01       	movw	r30, r2
    b952:	ed 0d       	add	r30, r13
    b954:	f1 1d       	adc	r31, r1
    b956:	80 81       	ld	r24, Z
    b958:	90 e0       	ldi	r25, 0x00	; 0
    b95a:	b3 01       	movw	r22, r6
    b95c:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b960:	dd 20       	and	r13, r13
    b962:	a9 f7       	brne	.-22     	; 0xb94e <vfprintf+0x3a2>
    b964:	06 c0       	rjmp	.+12     	; 0xb972 <vfprintf+0x3c6>
    b966:	80 e2       	ldi	r24, 0x20	; 32
    b968:	90 e0       	ldi	r25, 0x00	; 0
    b96a:	b3 01       	movw	r22, r6
    b96c:	0e 94 22 5d 	call	0xba44	; 0xba44 <fputc>
    b970:	ea 94       	dec	r14
    b972:	ee 20       	and	r14, r14
    b974:	c1 f7       	brne	.-16     	; 0xb966 <vfprintf+0x3ba>
    b976:	43 ce       	rjmp	.-890    	; 0xb5fe <vfprintf+0x52>
    b978:	f3 01       	movw	r30, r6
    b97a:	66 81       	ldd	r22, Z+6	; 0x06
    b97c:	77 81       	ldd	r23, Z+7	; 0x07
    b97e:	cb 01       	movw	r24, r22
    b980:	2b 96       	adiw	r28, 0x0b	; 11
    b982:	cd bf       	out	0x3d, r28	; 61
    b984:	de bf       	out	0x3e, r29	; 62
    b986:	cf 91       	pop	r28
    b988:	df 91       	pop	r29
    b98a:	1f 91       	pop	r17
    b98c:	0f 91       	pop	r16
    b98e:	ff 90       	pop	r15
    b990:	ef 90       	pop	r14
    b992:	df 90       	pop	r13
    b994:	cf 90       	pop	r12
    b996:	bf 90       	pop	r11
    b998:	af 90       	pop	r10
    b99a:	9f 90       	pop	r9
    b99c:	8f 90       	pop	r8
    b99e:	7f 90       	pop	r7
    b9a0:	6f 90       	pop	r6
    b9a2:	5f 90       	pop	r5
    b9a4:	4f 90       	pop	r4
    b9a6:	3f 90       	pop	r3
    b9a8:	2f 90       	pop	r2
    b9aa:	08 95       	ret

0000b9ac <__eerd_byte_x128a1>:
    b9ac:	03 d0       	rcall	.+6      	; 0xb9b4 <eeprom_mapen>
    b9ae:	80 81       	ld	r24, Z
    b9b0:	99 27       	eor	r25, r25
    b9b2:	08 95       	ret

0000b9b4 <eeprom_mapen>:
    b9b4:	e0 ec       	ldi	r30, 0xC0	; 192
    b9b6:	f1 e0       	ldi	r31, 0x01	; 1
    b9b8:	37 85       	ldd	r19, Z+15	; 0x0f
    b9ba:	37 fd       	sbrc	r19, 7
    b9bc:	fd cf       	rjmp	.-6      	; 0xb9b8 <eeprom_mapen+0x4>
    b9be:	34 85       	ldd	r19, Z+12	; 0x0c
    b9c0:	38 60       	ori	r19, 0x08	; 8
    b9c2:	34 87       	std	Z+12, r19	; 0x0c
    b9c4:	fc 01       	movw	r30, r24
    b9c6:	e0 50       	subi	r30, 0x00	; 0
    b9c8:	f0 4f       	sbci	r31, 0xF0	; 240
    b9ca:	08 95       	ret

0000b9cc <__eewr_byte_x128a1>:
    b9cc:	26 2f       	mov	r18, r22

0000b9ce <__eewr_r18_x128a1>:
    b9ce:	e0 ec       	ldi	r30, 0xC0	; 192
    b9d0:	f1 e0       	ldi	r31, 0x01	; 1
    b9d2:	37 85       	ldd	r19, Z+15	; 0x0f
    b9d4:	37 fd       	sbrc	r19, 7
    b9d6:	fd cf       	rjmp	.-6      	; 0xb9d2 <__eewr_r18_x128a1+0x4>
    b9d8:	34 85       	ldd	r19, Z+12	; 0x0c
    b9da:	37 7f       	andi	r19, 0xF7	; 247
    b9dc:	34 87       	std	Z+12, r19	; 0x0c
    b9de:	37 85       	ldd	r19, Z+15	; 0x0f
    b9e0:	31 ff       	sbrs	r19, 1
    b9e2:	09 c0       	rjmp	.+18     	; 0xb9f6 <__eewr_r18_x128a1+0x28>
    b9e4:	36 e3       	ldi	r19, 0x36	; 54
    b9e6:	32 87       	std	Z+10, r19	; 0x0a
    b9e8:	38 ed       	ldi	r19, 0xD8	; 216
    b9ea:	34 bf       	out	0x34, r19	; 52
    b9ec:	31 e0       	ldi	r19, 0x01	; 1
    b9ee:	33 87       	std	Z+11, r19	; 0x0b
    b9f0:	37 85       	ldd	r19, Z+15	; 0x0f
    b9f2:	37 fd       	sbrc	r19, 7
    b9f4:	fd cf       	rjmp	.-6      	; 0xb9f0 <__eewr_r18_x128a1+0x22>
    b9f6:	33 e3       	ldi	r19, 0x33	; 51
    b9f8:	32 87       	std	Z+10, r19	; 0x0a
    b9fa:	80 83       	st	Z, r24
    b9fc:	91 83       	std	Z+1, r25	; 0x01
    b9fe:	12 82       	std	Z+2, r1	; 0x02
    ba00:	24 83       	std	Z+4, r18	; 0x04
    ba02:	25 e3       	ldi	r18, 0x35	; 53
    ba04:	22 87       	std	Z+10, r18	; 0x0a
    ba06:	28 ed       	ldi	r18, 0xD8	; 216
    ba08:	31 e0       	ldi	r19, 0x01	; 1
    ba0a:	24 bf       	out	0x34, r18	; 52
    ba0c:	33 87       	std	Z+11, r19	; 0x0b
    ba0e:	01 96       	adiw	r24, 0x01	; 1
    ba10:	08 95       	ret

0000ba12 <__ctype_isfalse>:
    ba12:	99 27       	eor	r25, r25
    ba14:	88 27       	eor	r24, r24

0000ba16 <__ctype_istrue>:
    ba16:	08 95       	ret

0000ba18 <strnlen_P>:
    ba18:	fc 01       	movw	r30, r24
    ba1a:	05 90       	lpm	r0, Z+
    ba1c:	61 50       	subi	r22, 0x01	; 1
    ba1e:	70 40       	sbci	r23, 0x00	; 0
    ba20:	01 10       	cpse	r0, r1
    ba22:	d8 f7       	brcc	.-10     	; 0xba1a <strnlen_P+0x2>
    ba24:	80 95       	com	r24
    ba26:	90 95       	com	r25
    ba28:	8e 0f       	add	r24, r30
    ba2a:	9f 1f       	adc	r25, r31
    ba2c:	08 95       	ret

0000ba2e <strnlen>:
    ba2e:	fc 01       	movw	r30, r24
    ba30:	61 50       	subi	r22, 0x01	; 1
    ba32:	70 40       	sbci	r23, 0x00	; 0
    ba34:	01 90       	ld	r0, Z+
    ba36:	01 10       	cpse	r0, r1
    ba38:	d8 f7       	brcc	.-10     	; 0xba30 <strnlen+0x2>
    ba3a:	80 95       	com	r24
    ba3c:	90 95       	com	r25
    ba3e:	8e 0f       	add	r24, r30
    ba40:	9f 1f       	adc	r25, r31
    ba42:	08 95       	ret

0000ba44 <fputc>:
    ba44:	0f 93       	push	r16
    ba46:	1f 93       	push	r17
    ba48:	cf 93       	push	r28
    ba4a:	df 93       	push	r29
    ba4c:	8c 01       	movw	r16, r24
    ba4e:	eb 01       	movw	r28, r22
    ba50:	8b 81       	ldd	r24, Y+3	; 0x03
    ba52:	81 ff       	sbrs	r24, 1
    ba54:	1b c0       	rjmp	.+54     	; 0xba8c <fputc+0x48>
    ba56:	82 ff       	sbrs	r24, 2
    ba58:	0d c0       	rjmp	.+26     	; 0xba74 <fputc+0x30>
    ba5a:	2e 81       	ldd	r18, Y+6	; 0x06
    ba5c:	3f 81       	ldd	r19, Y+7	; 0x07
    ba5e:	8c 81       	ldd	r24, Y+4	; 0x04
    ba60:	9d 81       	ldd	r25, Y+5	; 0x05
    ba62:	28 17       	cp	r18, r24
    ba64:	39 07       	cpc	r19, r25
    ba66:	64 f4       	brge	.+24     	; 0xba80 <fputc+0x3c>
    ba68:	e8 81       	ld	r30, Y
    ba6a:	f9 81       	ldd	r31, Y+1	; 0x01
    ba6c:	01 93       	st	Z+, r16
    ba6e:	e8 83       	st	Y, r30
    ba70:	f9 83       	std	Y+1, r31	; 0x01
    ba72:	06 c0       	rjmp	.+12     	; 0xba80 <fputc+0x3c>
    ba74:	e8 85       	ldd	r30, Y+8	; 0x08
    ba76:	f9 85       	ldd	r31, Y+9	; 0x09
    ba78:	80 2f       	mov	r24, r16
    ba7a:	19 95       	eicall
    ba7c:	89 2b       	or	r24, r25
    ba7e:	31 f4       	brne	.+12     	; 0xba8c <fputc+0x48>
    ba80:	8e 81       	ldd	r24, Y+6	; 0x06
    ba82:	9f 81       	ldd	r25, Y+7	; 0x07
    ba84:	01 96       	adiw	r24, 0x01	; 1
    ba86:	8e 83       	std	Y+6, r24	; 0x06
    ba88:	9f 83       	std	Y+7, r25	; 0x07
    ba8a:	02 c0       	rjmp	.+4      	; 0xba90 <fputc+0x4c>
    ba8c:	0f ef       	ldi	r16, 0xFF	; 255
    ba8e:	1f ef       	ldi	r17, 0xFF	; 255
    ba90:	c8 01       	movw	r24, r16
    ba92:	df 91       	pop	r29
    ba94:	cf 91       	pop	r28
    ba96:	1f 91       	pop	r17
    ba98:	0f 91       	pop	r16
    ba9a:	08 95       	ret

0000ba9c <__ultoa_invert>:
    ba9c:	fa 01       	movw	r30, r20
    ba9e:	aa 27       	eor	r26, r26
    baa0:	28 30       	cpi	r18, 0x08	; 8
    baa2:	51 f1       	breq	.+84     	; 0xbaf8 <__ultoa_invert+0x5c>
    baa4:	20 31       	cpi	r18, 0x10	; 16
    baa6:	81 f1       	breq	.+96     	; 0xbb08 <__ultoa_invert+0x6c>
    baa8:	e8 94       	clt
    baaa:	6f 93       	push	r22
    baac:	6e 7f       	andi	r22, 0xFE	; 254
    baae:	6e 5f       	subi	r22, 0xFE	; 254
    bab0:	7f 4f       	sbci	r23, 0xFF	; 255
    bab2:	8f 4f       	sbci	r24, 0xFF	; 255
    bab4:	9f 4f       	sbci	r25, 0xFF	; 255
    bab6:	af 4f       	sbci	r26, 0xFF	; 255
    bab8:	b1 e0       	ldi	r27, 0x01	; 1
    baba:	3e d0       	rcall	.+124    	; 0xbb38 <__ultoa_invert+0x9c>
    babc:	b4 e0       	ldi	r27, 0x04	; 4
    babe:	3c d0       	rcall	.+120    	; 0xbb38 <__ultoa_invert+0x9c>
    bac0:	67 0f       	add	r22, r23
    bac2:	78 1f       	adc	r23, r24
    bac4:	89 1f       	adc	r24, r25
    bac6:	9a 1f       	adc	r25, r26
    bac8:	a1 1d       	adc	r26, r1
    baca:	68 0f       	add	r22, r24
    bacc:	79 1f       	adc	r23, r25
    bace:	8a 1f       	adc	r24, r26
    bad0:	91 1d       	adc	r25, r1
    bad2:	a1 1d       	adc	r26, r1
    bad4:	6a 0f       	add	r22, r26
    bad6:	71 1d       	adc	r23, r1
    bad8:	81 1d       	adc	r24, r1
    bada:	91 1d       	adc	r25, r1
    badc:	a1 1d       	adc	r26, r1
    bade:	20 d0       	rcall	.+64     	; 0xbb20 <__ultoa_invert+0x84>
    bae0:	09 f4       	brne	.+2      	; 0xbae4 <__ultoa_invert+0x48>
    bae2:	68 94       	set
    bae4:	3f 91       	pop	r19
    bae6:	2a e0       	ldi	r18, 0x0A	; 10
    bae8:	26 9f       	mul	r18, r22
    baea:	11 24       	eor	r1, r1
    baec:	30 19       	sub	r19, r0
    baee:	30 5d       	subi	r19, 0xD0	; 208
    baf0:	31 93       	st	Z+, r19
    baf2:	de f6       	brtc	.-74     	; 0xbaaa <__ultoa_invert+0xe>
    baf4:	cf 01       	movw	r24, r30
    baf6:	08 95       	ret
    baf8:	46 2f       	mov	r20, r22
    bafa:	47 70       	andi	r20, 0x07	; 7
    bafc:	40 5d       	subi	r20, 0xD0	; 208
    bafe:	41 93       	st	Z+, r20
    bb00:	b3 e0       	ldi	r27, 0x03	; 3
    bb02:	0f d0       	rcall	.+30     	; 0xbb22 <__ultoa_invert+0x86>
    bb04:	c9 f7       	brne	.-14     	; 0xbaf8 <__ultoa_invert+0x5c>
    bb06:	f6 cf       	rjmp	.-20     	; 0xbaf4 <__ultoa_invert+0x58>
    bb08:	46 2f       	mov	r20, r22
    bb0a:	4f 70       	andi	r20, 0x0F	; 15
    bb0c:	40 5d       	subi	r20, 0xD0	; 208
    bb0e:	4a 33       	cpi	r20, 0x3A	; 58
    bb10:	18 f0       	brcs	.+6      	; 0xbb18 <__ultoa_invert+0x7c>
    bb12:	49 5d       	subi	r20, 0xD9	; 217
    bb14:	31 fd       	sbrc	r19, 1
    bb16:	40 52       	subi	r20, 0x20	; 32
    bb18:	41 93       	st	Z+, r20
    bb1a:	02 d0       	rcall	.+4      	; 0xbb20 <__ultoa_invert+0x84>
    bb1c:	a9 f7       	brne	.-22     	; 0xbb08 <__ultoa_invert+0x6c>
    bb1e:	ea cf       	rjmp	.-44     	; 0xbaf4 <__ultoa_invert+0x58>
    bb20:	b4 e0       	ldi	r27, 0x04	; 4
    bb22:	a6 95       	lsr	r26
    bb24:	97 95       	ror	r25
    bb26:	87 95       	ror	r24
    bb28:	77 95       	ror	r23
    bb2a:	67 95       	ror	r22
    bb2c:	ba 95       	dec	r27
    bb2e:	c9 f7       	brne	.-14     	; 0xbb22 <__ultoa_invert+0x86>
    bb30:	00 97       	sbiw	r24, 0x00	; 0
    bb32:	61 05       	cpc	r22, r1
    bb34:	71 05       	cpc	r23, r1
    bb36:	08 95       	ret
    bb38:	9b 01       	movw	r18, r22
    bb3a:	ac 01       	movw	r20, r24
    bb3c:	0a 2e       	mov	r0, r26
    bb3e:	06 94       	lsr	r0
    bb40:	57 95       	ror	r21
    bb42:	47 95       	ror	r20
    bb44:	37 95       	ror	r19
    bb46:	27 95       	ror	r18
    bb48:	ba 95       	dec	r27
    bb4a:	c9 f7       	brne	.-14     	; 0xbb3e <__ultoa_invert+0xa2>
    bb4c:	62 0f       	add	r22, r18
    bb4e:	73 1f       	adc	r23, r19
    bb50:	84 1f       	adc	r24, r20
    bb52:	95 1f       	adc	r25, r21
    bb54:	a0 1d       	adc	r26, r0
    bb56:	08 95       	ret

0000bb58 <_exit>:
    bb58:	f8 94       	cli

0000bb5a <__stop_program>:
    bb5a:	ff cf       	rjmp	.-2      	; 0xbb5a <__stop_program>
