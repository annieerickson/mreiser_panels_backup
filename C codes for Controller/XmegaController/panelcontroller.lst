
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c1f4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004e8  00802000  0000c1f4  0000c2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000733  008024e8  008024e8  0000c790  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000c790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000c814  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000d58c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000e8a  00000000  00000000  0000d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009bd2  00000000  00000000  0000e556  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001621  00000000  00000000  00018128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000693f  00000000  00000000  00019749  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a80  00000000  00000000  00020088  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000220c  00000000  00000000  00020b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007c5c  00000000  00000000  00022d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a0  00000000  00000000  0002a970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__ctors_end>
       4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
       8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
       c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      10:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      14:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      18:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      1c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      20:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      24:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      28:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      2c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      30:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      34:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__vector_13>
      38:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      3c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      40:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      44:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      48:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      4c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      50:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      54:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      58:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      5c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      60:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      64:	0c 94 7d 31 	jmp	0x62fa	; 0x62fa <__vector_25>
      68:	0c 94 cd 31 	jmp	0x639a	; 0x639a <__vector_26>
      6c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      70:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      74:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      78:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      7c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      80:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      84:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      88:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      8c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      90:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      94:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      98:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      9c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      a0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      a4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      a8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      ac:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      b0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      b4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      b8:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__vector_46>
      bc:	0c 94 42 32 	jmp	0x6484	; 0x6484 <__vector_47>
      c0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      c4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      c8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      cc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      d0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      d4:	0c 94 3d 57 	jmp	0xae7a	; 0xae7a <__vector_53>
      d8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      dc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      e0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      e4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      e8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      ec:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      f0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      f4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      f8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
      fc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     100:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     104:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     108:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     10c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     110:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     114:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     118:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     11c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     120:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     124:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     128:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     12c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     130:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <__vector_76>
     134:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     138:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     13c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     140:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     144:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     148:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     14c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     150:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     154:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     158:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     15c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     160:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     164:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     168:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     16c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     170:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     174:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     178:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     17c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     180:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     184:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     188:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     18c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     190:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_100>
     194:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     198:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     19c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1a0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1a4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1a8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1ac:	0c 94 5f 23 	jmp	0x46be	; 0x46be <__vector_107>
     1b0:	0c 94 73 58 	jmp	0xb0e6	; 0xb0e6 <__vector_108>
     1b4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1b8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1bc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1c0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1c4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1c8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1cc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1d0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1d4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1d8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1dc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1e0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1e4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1e8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1ec:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1f0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__bad_interrupt>
     1f4:	c0 1c       	adc	r12, r0
     1f6:	c5 1c       	adc	r12, r5
     1f8:	ca 1c       	adc	r12, r10
     1fa:	ce 1c       	adc	r12, r14
     1fc:	d2 1c       	adc	r13, r2
     1fe:	d6 1c       	adc	r13, r6
     200:	df 1c       	adc	r13, r15
     202:	e3 1c       	adc	r14, r3
     204:	e7 1c       	adc	r14, r7
     206:	00 1d       	adc	r16, r0
     208:	00 1d       	adc	r16, r0
     20a:	00 1d       	adc	r16, r0
     20c:	00 1d       	adc	r16, r0
     20e:	00 1d       	adc	r16, r0
     210:	00 1d       	adc	r16, r0
     212:	eb 1c       	adc	r14, r11
     214:	a1 55       	subi	r26, 0x51	; 81
     216:	ad 55       	subi	r26, 0x5D	; 93
     218:	0e 56       	subi	r16, 0x6E	; 110
     21a:	14 56       	subi	r17, 0x64	; 100
     21c:	9e 55       	subi	r25, 0x5E	; 94
     21e:	9e 55       	subi	r25, 0x5E	; 94
     220:	9e 55       	subi	r25, 0x5E	; 94
     222:	9e 55       	subi	r25, 0x5E	; 94
     224:	9e 55       	subi	r25, 0x5E	; 94
     226:	9e 55       	subi	r25, 0x5E	; 94
     228:	af 56       	subi	r26, 0x6F	; 111
     22a:	b4 56       	subi	r27, 0x64	; 100
     22c:	b6 56       	subi	r27, 0x66	; 102
     22e:	c4 56       	subi	r28, 0x64	; 100
     230:	e3 56       	subi	r30, 0x63	; 99

00000232 <__c.5823>:
     232:	49 4e 54 33 20 63 61 74 63 68 65 73 20 61 20 72     INT3 catches a r
     242:	69 73 69 6e 67 20 65 64 67 65 20 74 72 69 67 67     ising edge trigg
     252:	65 72 21 0a 00                                      er!..

00000257 <__c.5794>:
     257:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     267:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000274 <__c.5792>:
     274:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     284:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000295 <__c.5787>:
     295:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     2a5:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

000002b3 <__c.5738>:
     2b3:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     2c3:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     2d3:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     2e3:	75 66 66 65 72 0a 00                                uffer..

000002ea <__c.5736>:
     2ea:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002f5 <__c.5731>:
     2f5:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     305:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     315:	63 43 6e 74 5f 79 0a 00                             cCnt_y..

0000031d <__c.5729>:
     31d:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000328 <__c.5727>:
     328:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     338:	74 69 6f 6e 5f 59 20 69 73 20 66 75 6c 6c 0a 00     tion_Y is full..

00000348 <__c.5665>:
     348:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     358:	74 69 6f 6e 5f 59 20 69 73 20 65 6d 70 74 79 0a     tion_Y is empty.
	...

00000369 <__c.5619>:
     369:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     379:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     389:	6e 74 5f 78 0a 00                                   nt_x..

0000038f <__c.5617>:
     38f:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

0000039a <__c.5612>:
     39a:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     3aa:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     3ba:	63 43 6e 74 5f 78 0a 00                             cCnt_x..

000003c2 <__c.5610>:
     3c2:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000003cd <__c.5608>:
     3cd:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     3dd:	74 69 6f 6e 5f 78 20 69 73 20 66 75 6c 6c 0a 00     tion_x is full..

000003ed <__c.5547>:
     3ed:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     3fd:	74 69 6f 6e 5f 78 20 69 73 20 65 6d 70 74 79 0a     tion_x is empty.
	...

0000040e <__c.5493>:
     40e:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     41e:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     42e:	2e 0a 00                                            ...

00000431 <__c.5490>:
     431:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     441:	79 20 3d 20 25 75 0a 00                             y = %u..

00000449 <__c.5488>:
     449:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     459:	79 20 3d 20 25 75 0a 00                             y = %u..

00000461 <__c.5486>:
     461:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     471:	0a 00                                               ..

00000473 <__c.5484>:
     473:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

00000484 <__c.5482>:
     484:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     494:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000004a5 <__c.5480>:
     4a5:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     4b5:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000004c6 <__c.5478>:
     4c6:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     4d6:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4e6:	20 59 0a 00                                          Y..

000004ea <__c.5474>:
     4ea:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     4fa:	78 20 3d 20 25 75 0a 00                             x = %u..

00000502 <__c.5472>:
     502:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     512:	78 20 3d 20 25 75 0a 00                             x = %u..

0000051a <__c.5470>:
     51a:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     52a:	0a 00                                               ..

0000052c <__c.5468>:
     52c:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

0000053d <__c.5466>:
     53d:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     54d:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

0000055e <__c.5464>:
     55e:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     56e:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

0000057f <__c.5462>:
     57f:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     58f:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     59f:	72 20 58 0a 00                                      r X..

000005a4 <__c.5400>:
     5a4:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     5b4:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     5c4:	2e 0a 00                                            ...

000005c7 <__c.5397>:
     5c7:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     5d7:	79 20 3d 20 25 75 0a 00                             y = %u..

000005df <__c.5395>:
     5df:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     5ef:	20 0a 00                                             ..

000005f2 <__c.5393>:
     5f2:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

00000603 <__c.5391>:
     603:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     613:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

00000624 <__c.5389>:
     624:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     634:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

00000642 <__c.5387>:
     642:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     652:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     662:	20 59 0a 00                                          Y..

00000666 <__c.5383>:
     666:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     676:	78 20 3d 20 25 75 0a 00                             x = %u..

0000067e <__c.5381>:
     67e:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     68e:	0a 00                                               ..

00000690 <__c.5379>:
     690:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

000006a1 <__c.5377>:
     6a1:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     6b1:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000006c2 <__c.5375>:
     6c2:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     6d2:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

000006df <__c.5373>:
     6df:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     6ef:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     6ff:	20 58 0a 00                                          X..

00000703 <__c.5353>:
     703:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     713:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

00000723 <__c.5347>:
     723:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     733:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

00000744 <__c.5340>:
     744:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     754:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

00000765 <__c.5289>:
     765:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     775:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     785:	20 3d 20 25 75 0a 00                                 = %u..

0000078c <__c.5266>:
     78c:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     79c:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     7ac:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     7bc:	61 72 64 2e 0a 00                                   ard...

000007c2 <__c.5264>:
     7c2:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     7d2:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     7e2:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     7f2:	50 52 4f 4d 0a 00                                   PROM..

000007f8 <__c.5213>:
     7f8:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     808:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

00000814 <__c.5211>:
     814:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     824:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000833 <__c.5209>:
     833:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     843:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     853:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     863:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     873:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     883:	75 0a 00                                            u..

00000886 <__c.5207>:
     886:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     896:	25 75 3a 0a 00                                      %u:..

0000089b <__c.4909>:
     89b:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     8ab:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     8bb:	75 0a 00                                            u..

000008be <__c.4907>:
     8be:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     8ce:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     8de:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

000008e8 <__c.4905>:
     8e8:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     8f8:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000906 <__c.4903>:
     906:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     916:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     926:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

0000092f <__c.4829>:
     92f:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     93f:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     94f:	6e 2e 0a 00                                         n...

00000953 <__c.4759>:
     953:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     963:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     973:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     983:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

00000992 <__c.4755>:
     992:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     9a2:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     9b2:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     9c2:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

000009ce <__c.4692>:
     9ce:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     9de:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     9ee:	2e 0a 00                                            ...

000009f1 <__c.4689>:
     9f1:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     a01:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     a11:	2e 0a 00                                            ...

00000a14 <__c.4640>:
     a14:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     a24:	0a 00                                               ..

00000a26 <__c.4551>:
     a26:	72 65 73 6f 6c 75 74 69 6f 6e 5f 79 20 3d 20 20     resolution_y =  
     a36:	25 64 3a 0a 00                                      %d:..

00000a3b <__c.4549>:
     a3b:	72 65 73 6f 6c 75 74 69 6f 6e 5f 78 20 3d 20 20     resolution_x =  
     a4b:	25 64 3a 0a 00                                      %d:..

00000a50 <__c.4543>:
     a50:	44 69 73 61 62 6c 65 64 20 49 6e 74 33 20 65 78     Disabled Int3 ex
     a60:	74 65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d     ternal trigger m
     a70:	6f 64 65 21 0a 00                                   ode!..

00000a76 <__c.4540>:
     a76:	45 6e 61 62 6c 65 64 20 49 6e 74 33 20 65 78 74     Enabled Int3 ext
     a86:	65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d 6f     ernal trigger mo
     a96:	64 65 20 69 73 20 6f 6e 21 0a 00                    de is on!..

00000aa1 <__c.4537>:
     aa1:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     ab1:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     ac1:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     ad1:	0a 00                                               ..

00000ad3 <__c.4534>:
     ad3:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     ae3:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     af3:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     b03:	0a 00                                               ..

00000b05 <__c.4531>:
     b05:	75 70 64 61 74 65 3a 20 25 64 20 25 64 20 25 64     update: %d %d %d
     b15:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 3a      %d %d %d %d %d:
     b25:	0a 00                                               ..

00000b27 <__c.4522>:
     b27:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     b37:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

00000b46 <__c.4397>:
     b46:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     b56:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     b66:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00000b74 <__c.4384>:
     b74:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     b84:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     b94:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000ba2 <__c.4381>:
     ba2:	3f 3f 3f 0a 00                                      ???..

00000ba7 <__c.4378>:
     ba7:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000bb4 <__c.4375>:
     bb4:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     bc4:	21 0a 00                                            !..

00000bc7 <__c.4372>:
     bc7:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

00000bd0 <__c.4368>:
     bd0:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00000bda <__c.4365>:
     bda:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     bea:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00000bf3 <__c.4363>:
     bf3:	3f 3f 3f 0a 00                                      ???..

00000bf8 <__c.4360>:
     bf8:	53 44 48 43 0a 00                                   SDHC..

00000bfe <__c.4357>:
     bfe:	42 4c 4b 0a 00                                      BLK..

00000c03 <__c.4354>:
     c03:	53 44 43 0a 00                                      SDC..

00000c08 <__c.4351>:
     c08:	53 44 32 0a 00                                      SD2..

00000c0d <__c.4348>:
     c0d:	53 44 0a 00                                         SD..

00000c11 <__c.4344>:
     c11:	4d 4d 43 0a 00                                      MMC..

00000c16 <__c.4341>:
     c16:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

00000c22 <__c.4339>:
     c22:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     c32:	61 6c 69 7a 65 64 0a 00                             alized..

00000c3a <__c.4331>:
     c3a:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     c4a:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

00000c54 <__c.4326>:
     c54:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     c64:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

00000c71 <__c.4321>:
     c71:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

00000c80 <__c.4319>:
     c80:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     c90:	20 57 6f 72 6b 73 0a 00                              Works..

00000c98 <__c.4518>:
     c98:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     ca8:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000cb3 <__c.4516>:
     cb3:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     cc3:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000cce <__c.4510>:
     cce:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     cde:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     cee:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     cfe:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000d0f <__c.4508>:
     d0f:	0a 00                                               ..

00000d11 <__c.4506>:
     d11:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d21:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d2e <__c.4501>:
     d2e:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d3e:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d4b <__c.4499>:
     d4b:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     d5b:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     d6b:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000d76 <__c.4497>:
     d76:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     d86:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     d96:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     da6:	78 0a 00                                            x..

00000da9 <__c.4491>:
     da9:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000db6 <__c.4489>:
     db6:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     dc6:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000dd4 <__c.4486>:
     dd4:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     de4:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     df4:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     e04:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     e14:	0a 00                                               ..

00000e16 <__c.4481>:
     e16:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     e26:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     e36:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000e41 <__c.4479>:
     e41:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     e51:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     e61:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     e71:	78 2e 0a 00                                         x...

00000e75 <__c.4473>:
     e75:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000e82 <__c.4471>:
     e82:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     e92:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000ea0 <__c.4466>:
     ea0:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
     eb0:	0a 00                                               ..

00000eb2 <__c.4464>:
     eb2:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     ec2:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00000ecf <__c.4587>:
     ecf:	25 53 0a 00                                         %S..

00000ed3 <str.4573>:
     ed3:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     ee3:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     ef3:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     f03:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     f13:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     f23:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     f33:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     f43:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     f53:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     f63:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     f73:	45 4f 55 54 00 00                                   EOUT..

00000f79 <__c.4386>:
     f79:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     f89:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000f94 <__c.4384>:
     f94:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     fa4:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000faf <__c.4378>:
     faf:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     fbf:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     fcf:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     fdf:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000fef <__c.4376>:
     fef:	0a 00                                               ..

00000ff1 <__c.4374>:
     ff1:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    1001:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

0000100e <__c.4369>:
    100e:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    101e:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

0000102b <__c.4367>:
    102b:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    103b:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    104b:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00001056 <__c.4365>:
    1056:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    1066:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    1076:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    1086:	0a 00                                               ..

00001088 <__c.4359>:
    1088:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00001095 <__c.4357>:
    1095:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    10a5:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

000010b2 <__c.4354>:
    10b2:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    10c2:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    10d2:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    10e2:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

000010f2 <__c.4349>:
    10f2:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    1102:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    1112:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

0000111d <__c.4347>:
    111d:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    112d:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    113d:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    114d:	2e 0a 00                                            ...

00001150 <__c.4341>:
    1150:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

0000115d <__c.4339>:
    115d:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    116d:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

0000117b <__c.4334>:
    117b:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

0000118c <__c.4332>:
    118c:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    119c:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

000011a8 <__c.4282>:
    11a8:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    11b8:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000011c5 <__c.4277>:
    11c5:	23 00                                               #.

000011c7 <__c.4247>:
    11c7:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    11d7:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000011e4 <__c.4242>:
    11e4:	23 00                                               #.

000011e6 <__c.4221>:
    11e6:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
    11f6:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00001205 <__c.4216>:
    1205:	23 00                                               #.

00001207 <__c.4185>:
    1207:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1217:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001224 <__c.4180>:
    1224:	23 00                                               #.

00001226 <__c.4149>:
    1226:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1236:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001243 <__c.4144>:
    1243:	23 00                                               #.

00001245 <__c.4122>:
    1245:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
    1255:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00001263 <__c.4117>:
    1263:	23 00 00                                            #..

00001266 <__ctors_end>:
    1266:	11 24       	eor	r1, r1
    1268:	1f be       	out	0x3f, r1	; 63
    126a:	cf ef       	ldi	r28, 0xFF	; 255
    126c:	df e3       	ldi	r29, 0x3F	; 63
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	00 e0       	ldi	r16, 0x00	; 0
    1274:	0c bf       	out	0x3c, r16	; 60
    1276:	18 be       	out	0x38, r1	; 56
    1278:	19 be       	out	0x39, r1	; 57
    127a:	1a be       	out	0x3a, r1	; 58
    127c:	1b be       	out	0x3b, r1	; 59

0000127e <__do_copy_data>:
    127e:	14 e2       	ldi	r17, 0x24	; 36
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e2       	ldi	r27, 0x20	; 32
    1284:	e4 ef       	ldi	r30, 0xF4	; 244
    1286:	f1 ec       	ldi	r31, 0xC1	; 193
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	0b bf       	out	0x3b, r16	; 59
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <__do_copy_data+0x14>
    128e:	07 90       	elpm	r0, Z+
    1290:	0d 92       	st	X+, r0
    1292:	a8 3e       	cpi	r26, 0xE8	; 232
    1294:	b1 07       	cpc	r27, r17
    1296:	d9 f7       	brne	.-10     	; 0x128e <__do_copy_data+0x10>
    1298:	1b be       	out	0x3b, r1	; 59

0000129a <__do_clear_bss>:
    129a:	1c e2       	ldi	r17, 0x2C	; 44
    129c:	a8 ee       	ldi	r26, 0xE8	; 232
    129e:	b4 e2       	ldi	r27, 0x24	; 36
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <.do_clear_bss_start>

000012a2 <.do_clear_bss_loop>:
    12a2:	1d 92       	st	X+, r1

000012a4 <.do_clear_bss_start>:
    12a4:	ab 31       	cpi	r26, 0x1B	; 27
    12a6:	b1 07       	cpc	r27, r17
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <.do_clear_bss_loop>
    12aa:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <main>
    12ae:	0c 94 f8 60 	jmp	0xc1f0	; 0xc1f0 <_exit>

000012b2 <__bad_interrupt>:
    12b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000012b6 <handle_message_length_62>:
//load laser trigger pattern first 62 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_62(uint8_t *msg_buffer)
{   
    12b6:	ac 01       	movw	r20, r24
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    12bc:	f9 01       	movw	r30, r18
    12be:	e9 57       	subi	r30, 0x79	; 121
    12c0:	f9 4d       	sbci	r31, 0xD9	; 217
    12c2:	da 01       	movw	r26, r20
    12c4:	a2 0f       	add	r26, r18
    12c6:	b3 1f       	adc	r27, r19
    12c8:	8c 91       	ld	r24, X
    12ca:	80 83       	st	Z, r24
    12cc:	2f 5f       	subi	r18, 0xFF	; 255
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    12d0:	2e 33       	cpi	r18, 0x3E	; 62
    12d2:	31 05       	cpc	r19, r1
    12d4:	99 f7       	brne	.-26     	; 0x12bc <handle_message_length_62+0x6>
	{
		laserPattern[i] = msg_buffer[i];
	}

}
    12d6:	08 95       	ret

000012d8 <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    12d8:	80 91 b9 27 	lds	r24, 0x27B9
    12dc:	90 91 ba 27 	lds	r25, 0x27BA
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	80 93 b9 27 	sts	0x27B9, r24
    12e6:	90 93 ba 27 	sts	0x27BA, r25
    if (index_x >= x_num)
    12ea:	80 91 b9 27 	lds	r24, 0x27B9
    12ee:	90 91 ba 27 	lds	r25, 0x27BA
    12f2:	40 91 23 28 	lds	r20, 0x2823
    12f6:	50 91 24 28 	lds	r21, 0x2824
    12fa:	84 17       	cp	r24, r20
    12fc:	95 07       	cpc	r25, r21
    12fe:	20 f0       	brcs	.+8      	; 0x1308 <increment_index_x+0x30>
    {index_x = 0;}
    1300:	10 92 b9 27 	sts	0x27B9, r1
    1304:	10 92 ba 27 	sts	0x27BA, r1
    
    
    frame_num = index_y*x_num + index_x;
    1308:	80 91 6e 29 	lds	r24, 0x296E
    130c:	90 91 6f 29 	lds	r25, 0x296F
    1310:	20 91 b9 27 	lds	r18, 0x27B9
    1314:	30 91 ba 27 	lds	r19, 0x27BA
    1318:	bc 01       	movw	r22, r24
    131a:	64 9f       	mul	r22, r20
    131c:	c0 01       	movw	r24, r0
    131e:	65 9f       	mul	r22, r21
    1320:	90 0d       	add	r25, r0
    1322:	74 9f       	mul	r23, r20
    1324:	90 0d       	add	r25, r0
    1326:	11 24       	eor	r1, r1
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	80 93 ed 24 	sts	0x24ED, r24
    1330:	90 93 ee 24 	sts	0x24EE, r25
	
    if (x_gt_y) display_flag++;
    1334:	80 91 e9 24 	lds	r24, 0x24E9
    1338:	88 23       	and	r24, r24
    133a:	29 f0       	breq	.+10     	; 0x1346 <increment_index_x+0x6e>
    133c:	80 91 e8 24 	lds	r24, 0x24E8
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	80 93 e8 24 	sts	0x24E8, r24
    1346:	08 95       	ret

00001348 <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    1348:	80 91 6e 29 	lds	r24, 0x296E
    134c:	90 91 6f 29 	lds	r25, 0x296F
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	80 93 6e 29 	sts	0x296E, r24
    1356:	90 93 6f 29 	sts	0x296F, r25
    if (index_y >= y_num)
    135a:	20 91 6e 29 	lds	r18, 0x296E
    135e:	30 91 6f 29 	lds	r19, 0x296F
    1362:	80 91 ab 25 	lds	r24, 0x25AB
    1366:	90 91 ac 25 	lds	r25, 0x25AC
    136a:	28 17       	cp	r18, r24
    136c:	39 07       	cpc	r19, r25
    136e:	20 f0       	brcs	.+8      	; 0x1378 <increment_index_y+0x30>
    {index_y = 0;}
    1370:	10 92 6e 29 	sts	0x296E, r1
    1374:	10 92 6f 29 	sts	0x296F, r1
    
    frame_num = index_y*x_num + index_x;
    1378:	20 91 6e 29 	lds	r18, 0x296E
    137c:	30 91 6f 29 	lds	r19, 0x296F
    1380:	40 91 b9 27 	lds	r20, 0x27B9
    1384:	50 91 ba 27 	lds	r21, 0x27BA
    1388:	80 91 23 28 	lds	r24, 0x2823
    138c:	90 91 24 28 	lds	r25, 0x2824
    1390:	bc 01       	movw	r22, r24
    1392:	26 9f       	mul	r18, r22
    1394:	c0 01       	movw	r24, r0
    1396:	27 9f       	mul	r18, r23
    1398:	90 0d       	add	r25, r0
    139a:	36 9f       	mul	r19, r22
    139c:	90 0d       	add	r25, r0
    139e:	11 24       	eor	r1, r1
    13a0:	84 0f       	add	r24, r20
    13a2:	95 1f       	adc	r25, r21
    13a4:	80 93 ed 24 	sts	0x24ED, r24
    13a8:	90 93 ee 24 	sts	0x24EE, r25
	
    if (x_gt_y == 0) display_flag++;
    13ac:	80 91 e9 24 	lds	r24, 0x24E9
    13b0:	88 23       	and	r24, r24
    13b2:	29 f4       	brne	.+10     	; 0x13be <increment_index_y+0x76>
    13b4:	80 91 e8 24 	lds	r24, 0x24E8
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	80 93 e8 24 	sts	0x24E8, r24
    13be:	08 95       	ret

000013c0 <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    13c0:	80 91 b9 27 	lds	r24, 0x27B9
    13c4:	90 91 ba 27 	lds	r25, 0x27BA
    13c8:	89 2b       	or	r24, r25
    13ca:	29 f4       	brne	.+10     	; 0x13d6 <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    13cc:	80 91 23 28 	lds	r24, 0x2823
    13d0:	90 91 24 28 	lds	r25, 0x2824
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <decrement_index_x+0x1e>
    else
    {index_x--;}
    13d6:	80 91 b9 27 	lds	r24, 0x27B9
    13da:	90 91 ba 27 	lds	r25, 0x27BA
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	80 93 b9 27 	sts	0x27B9, r24
    13e4:	90 93 ba 27 	sts	0x27BA, r25
    
    frame_num = index_y*x_num + index_x;
    13e8:	20 91 6e 29 	lds	r18, 0x296E
    13ec:	30 91 6f 29 	lds	r19, 0x296F
    13f0:	40 91 b9 27 	lds	r20, 0x27B9
    13f4:	50 91 ba 27 	lds	r21, 0x27BA
    13f8:	80 91 23 28 	lds	r24, 0x2823
    13fc:	90 91 24 28 	lds	r25, 0x2824
    1400:	bc 01       	movw	r22, r24
    1402:	26 9f       	mul	r18, r22
    1404:	c0 01       	movw	r24, r0
    1406:	27 9f       	mul	r18, r23
    1408:	90 0d       	add	r25, r0
    140a:	36 9f       	mul	r19, r22
    140c:	90 0d       	add	r25, r0
    140e:	11 24       	eor	r1, r1
    1410:	84 0f       	add	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	80 93 ed 24 	sts	0x24ED, r24
    1418:	90 93 ee 24 	sts	0x24EE, r25
    if (x_gt_y) display_flag++;
    141c:	80 91 e9 24 	lds	r24, 0x24E9
    1420:	88 23       	and	r24, r24
    1422:	29 f0       	breq	.+10     	; 0x142e <decrement_index_x+0x6e>
    1424:	80 91 e8 24 	lds	r24, 0x24E8
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	80 93 e8 24 	sts	0x24E8, r24
    142e:	08 95       	ret

00001430 <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    1430:	80 91 6e 29 	lds	r24, 0x296E
    1434:	90 91 6f 29 	lds	r25, 0x296F
    1438:	89 2b       	or	r24, r25
    143a:	29 f4       	brne	.+10     	; 0x1446 <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    143c:	80 91 ab 25 	lds	r24, 0x25AB
    1440:	90 91 ac 25 	lds	r25, 0x25AC
    1444:	04 c0       	rjmp	.+8      	; 0x144e <decrement_index_y+0x1e>
    else
    {index_y--;}
    1446:	80 91 6e 29 	lds	r24, 0x296E
    144a:	90 91 6f 29 	lds	r25, 0x296F
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	80 93 6e 29 	sts	0x296E, r24
    1454:	90 93 6f 29 	sts	0x296F, r25
    
    frame_num = index_y*x_num + index_x;
    1458:	20 91 6e 29 	lds	r18, 0x296E
    145c:	30 91 6f 29 	lds	r19, 0x296F
    1460:	40 91 b9 27 	lds	r20, 0x27B9
    1464:	50 91 ba 27 	lds	r21, 0x27BA
    1468:	80 91 23 28 	lds	r24, 0x2823
    146c:	90 91 24 28 	lds	r25, 0x2824
    1470:	bc 01       	movw	r22, r24
    1472:	26 9f       	mul	r18, r22
    1474:	c0 01       	movw	r24, r0
    1476:	27 9f       	mul	r18, r23
    1478:	90 0d       	add	r25, r0
    147a:	36 9f       	mul	r19, r22
    147c:	90 0d       	add	r25, r0
    147e:	11 24       	eor	r1, r1
    1480:	84 0f       	add	r24, r20
    1482:	95 1f       	adc	r25, r21
    1484:	80 93 ed 24 	sts	0x24ED, r24
    1488:	90 93 ee 24 	sts	0x24EE, r25
    if (x_gt_y == 0) display_flag++;
    148c:	80 91 e9 24 	lds	r24, 0x24E9
    1490:	88 23       	and	r24, r24
    1492:	29 f4       	brne	.+10     	; 0x149e <decrement_index_y+0x6e>
    1494:	80 91 e8 24 	lds	r24, 0x24E8
    1498:	8f 5f       	subi	r24, 0xFF	; 255
    149a:	80 93 e8 24 	sts	0x24E8, r24
    149e:	08 95       	ret

000014a0 <__vector_100>:
}

//external trigger mode for int2 to start playing pattern

ISR(PORTK_INT0_vect)
{
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	08 b6       	in	r0, 0x38	; 56
    14aa:	0f 92       	push	r0
    14ac:	09 b6       	in	r0, 0x39	; 57
    14ae:	0f 92       	push	r0
    14b0:	0b b6       	in	r0, 0x3b	; 59
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	18 be       	out	0x38, r1	; 56
    14b8:	19 be       	out	0x39, r1	; 57
    14ba:	1b be       	out	0x3b, r1	; 59
    14bc:	0f 93       	push	r16
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31

//set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
func_read_index_x = 0;
    14d6:	10 92 ef 24 	sts	0x24EF, r1
func_read_index_y = 0;
    14da:	10 92 f0 24 	sts	0x24F0, r1
Stop = 0;
    14de:	10 92 9c 20 	sts	0x209C, r1
display_flag = 0;  //clear the display flag
    14e2:	10 92 e8 24 	sts	0x24E8, r1
Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    14e6:	80 ea       	ldi	r24, 0xA0	; 160
    14e8:	95 e1       	ldi	r25, 0x15	; 21
    14ea:	4e e4       	ldi	r20, 0x4E	; 78
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	01 e0       	ldi	r16, 0x01	; 1
    14f6:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    14fa:	8c e6       	ldi	r24, 0x6C	; 108
    14fc:	99 e0       	ldi	r25, 0x09	; 9
    14fe:	4e e4       	ldi	r20, 0x4E	; 78
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	22 e0       	ldi	r18, 0x02	; 2
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    150e:	84 ea       	ldi	r24, 0xA4	; 164
    1510:	99 e0       	ldi	r25, 0x09	; 9
    1512:	4e e4       	ldi	r20, 0x4E	; 78
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	23 e0       	ldi	r18, 0x03	; 3
    151c:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
													//by the Update_display interupt.
Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    1520:	40 91 a5 20 	lds	r20, 0x20A5
    1524:	50 91 a6 20 	lds	r21, 0x20A6
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	88 e6       	ldi	r24, 0x68	; 104
    152e:	9e e0       	ldi	r25, 0x0E	; 14
    1530:	24 e0       	ldi	r18, 0x04	; 4
    1532:	01 e0       	ldi	r16, 0x01	; 1
    1534:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 
    1538:	40 91 a7 20 	lds	r20, 0x20A7
    153c:	50 91 a8 20 	lds	r21, 0x20A8
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	88 e9       	ldi	r24, 0x98	; 152
    1546:	9d e0       	ldi	r25, 0x0D	; 13
    1548:	25 e0       	ldi	r18, 0x05	; 5
    154a:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			

xputs(PSTR("INT3 catches a rising edge trigger!\n"));
    154e:	82 e3       	ldi	r24, 0x32	; 50
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
}
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	0f 91       	pop	r16
    1570:	0f 90       	pop	r0
    1572:	0b be       	out	0x3b, r0	; 59
    1574:	0f 90       	pop	r0
    1576:	09 be       	out	0x39, r0	; 57
    1578:	0f 90       	pop	r0
    157a:	08 be       	out	0x38, r0	; 56
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <set_default_func>:
}

void set_default_func(uint8_t func_channel) {
    uint16_t funcCnt;
    
    switch (func_channel) {
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	21 f0       	breq	.+8      	; 0x1592 <set_default_func+0xc>
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	09 f0       	breq	.+2      	; 0x1590 <set_default_func+0xa>
    158e:	65 c0       	rjmp	.+202    	; 0x165a <set_default_func+0xd4>
    1590:	32 c0       	rjmp	.+100    	; 0x15f6 <set_default_func+0x70>
        case 1:
            if (quiet_mode_on == 0)
    1592:	80 91 b3 20 	lds	r24, 0x20B3
    1596:	88 23       	and	r24, r24
    1598:	21 f4       	brne	.+8      	; 0x15a2 <set_default_func+0x1c>
                xputs(PSTR("Setting default function for X.\n"));
    159a:	84 e4       	ldi	r24, 0x44	; 68
    159c:	97 e0       	ldi	r25, 0x07	; 7
    159e:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
    15a2:	10 92 f5 24 	sts	0x24F5, r1
    15a6:	10 92 f6 24 	sts	0x24F6, r1
            funcSize_x = FUNCTION_LENGTH;
    15aa:	84 e6       	ldi	r24, 0x64	; 100
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 e0       	ldi	r26, 0x00	; 0
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	80 93 ab 20 	sts	0x20AB, r24
    15b6:	90 93 ac 20 	sts	0x20AC, r25
    15ba:	a0 93 ad 20 	sts	0x20AD, r26
    15be:	b0 93 ae 20 	sts	0x20AE, r27
    15c2:	e5 e2       	ldi	r30, 0x25	; 37
    15c4:	f8 e2       	ldi	r31, 0x28	; 40
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
				{ function_X[funcCnt] = 10; }
    15c6:	8a e0       	ldi	r24, 0x0A	; 10
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	81 93       	st	Z+, r24
    15cc:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    15ce:	28 e2       	ldi	r18, 0x28	; 40
    15d0:	ed 3e       	cpi	r30, 0xED	; 237
    15d2:	f2 07       	cpc	r31, r18
    15d4:	d1 f7       	brne	.-12     	; 0x15ca <set_default_func+0x44>
				{ function_X[funcCnt] = 10; }
            func_read_index_x = 0;
    15d6:	10 92 ef 24 	sts	0x24EF, r1
			default_func_x = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 a3 20 	sts	0x20A3, r24
			num_buffer_load_x = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	80 93 b4 20 	sts	0x20B4, r24
    15e8:	90 93 b5 20 	sts	0x20B5, r25
			last_load_x = 0;
    15ec:	10 92 f9 24 	sts	0x24F9, r1
    15f0:	10 92 fa 24 	sts	0x24FA, r1
    15f4:	08 95       	ret
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    15f6:	80 91 b3 20 	lds	r24, 0x20B3
    15fa:	88 23       	and	r24, r24
    15fc:	21 f4       	brne	.+8      	; 0x1606 <set_default_func+0x80>
                xputs(PSTR("Setting default function for Y.\n"));
    15fe:	83 e2       	ldi	r24, 0x23	; 35
    1600:	97 e0       	ldi	r25, 0x07	; 7
    1602:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
    1606:	10 92 f7 24 	sts	0x24F7, r1
    160a:	10 92 f8 24 	sts	0x24F8, r1
            funcSize_y = FUNCTION_LENGTH;
    160e:	84 e6       	ldi	r24, 0x64	; 100
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	80 93 af 20 	sts	0x20AF, r24
    161a:	90 93 b0 20 	sts	0x20B0, r25
    161e:	a0 93 b1 20 	sts	0x20B1, r26
    1622:	b0 93 b2 20 	sts	0x20B2, r27
    1626:	ee ea       	ldi	r30, 0xAE	; 174
    1628:	f5 e2       	ldi	r31, 0x25	; 37
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    162a:	8a e0       	ldi	r24, 0x0A	; 10
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	81 93       	st	Z+, r24
    1630:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1632:	26 e2       	ldi	r18, 0x26	; 38
    1634:	e6 37       	cpi	r30, 0x76	; 118
    1636:	f2 07       	cpc	r31, r18
    1638:	d1 f7       	brne	.-12     	; 0x162e <set_default_func+0xa8>
            { function_Y[funcCnt] = 10; }
			func_read_index_y = 0;
    163a:	10 92 f0 24 	sts	0x24F0, r1
			default_func_y = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	80 93 a4 20 	sts	0x20A4, r24
			num_buffer_load_y = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	80 93 b6 20 	sts	0x20B6, r24
    164c:	90 93 b7 20 	sts	0x20B7, r25
			last_load_y = 0;
    1650:	10 92 fb 24 	sts	0x24FB, r1
    1654:	10 92 fc 24 	sts	0x24FC, r1
    1658:	08 95       	ret
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            xputs(PSTR("Wrong function channel number.\n"));
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	97 e0       	ldi	r25, 0x07	; 7
    165e:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    1662:	08 95       	ret

00001664 <handle_message_length_63>:
//load laser trigger pattern second 63 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_63(uint8_t *msg_buffer)
{   
    1664:	ac 01       	movw	r20, r24
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	 for (i = 0; i<63; i++)
	{
	laserPattern[62 + i] = msg_buffer[i];
    166a:	f9 01       	movw	r30, r18
    166c:	e9 57       	subi	r30, 0x79	; 121
    166e:	f9 4d       	sbci	r31, 0xD9	; 217
    1670:	da 01       	movw	r26, r20
    1672:	a2 0f       	add	r26, r18
    1674:	b3 1f       	adc	r27, r19
    1676:	8c 91       	ld	r24, X
    1678:	86 af       	std	Z+62, r24	; 0x3e
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_63(uint8_t *msg_buffer)
{   
	uint8_t i;
	
	 for (i = 0; i<63; i++)
    167e:	2f 33       	cpi	r18, 0x3F	; 63
    1680:	31 05       	cpc	r19, r1
    1682:	99 f7       	brne	.-26     	; 0x166a <handle_message_length_63+0x6>
	{
	laserPattern[62 + i] = msg_buffer[i];
	}
	
	if (quiet_mode_on == 0)
    1684:	80 91 b3 20 	lds	r24, 0x20B3
    1688:	88 23       	and	r24, r24
    168a:	21 f4       	brne	.+8      	; 0x1694 <handle_message_length_63+0x30>
        xputs(PSTR("Success set the new laser pattern.\n"));
    168c:	8f e2       	ldi	r24, 0x2F	; 47
    168e:	99 e0       	ldi	r25, 0x09	; 9
    1690:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    1694:	08 95       	ret

00001696 <dump_mat>:
			xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
	}
} 

//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    1696:	a4 e3       	ldi	r26, 0x34	; 52
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e5       	ldi	r30, 0x51	; 81
    169c:	fb e0       	ldi	r31, 0x0B	; 11
    169e:	0c 94 98 5b 	jmp	0xb730	; 0xb730 <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	98 e2       	ldi	r25, 0x28	; 40
    16a6:	68 eb       	ldi	r22, 0xB8	; 184
    16a8:	70 e2       	ldi	r23, 0x20	; 32
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
    if (res == FR_OK) {
    16b0:	88 23       	and	r24, r24
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <dump_mat+0x20>
    16b4:	ad c0       	rjmp	.+346    	; 0x1810 <dump_mat+0x17a>
        // looks good
        iteration = file4.fsize/50;
    16b6:	80 90 0d 28 	lds	r8, 0x280D
    16ba:	70 91 0e 28 	lds	r23, 0x280E
    16be:	68 2d       	mov	r22, r8
    16c0:	80 91 0f 28 	lds	r24, 0x280F
    16c4:	90 91 10 28 	lds	r25, 0x2810
    16c8:	22 e3       	ldi	r18, 0x32	; 50
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    16d4:	79 01       	movw	r14, r18
    16d6:	8a 01       	movw	r16, r20
    16d8:	99 24       	eor	r9, r9
    16da:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    16dc:	22 e3       	ldi	r18, 0x32	; 50
    16de:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    16e0:	93 e0       	ldi	r25, 0x03	; 3
    16e2:	69 2e       	mov	r6, r25
    16e4:	71 2c       	mov	r7, r1
    16e6:	6c 0e       	add	r6, r28
    16e8:	7d 1e       	adc	r7, r29
    16ea:	2e 01       	movw	r4, r28
    16ec:	08 94       	sec
    16ee:	41 1c       	adc	r4, r1
    16f0:	51 1c       	adc	r5, r1
    16f2:	36 c0       	rjmp	.+108    	; 0x1760 <dump_mat+0xca>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    16f4:	93 9c       	mul	r9, r3
    16f6:	c0 01       	movw	r24, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	c2 97       	sbiw	r24, 0x32	; 50
    16fc:	5c 01       	movw	r10, r24
    16fe:	cc 24       	eor	r12, r12
    1700:	b7 fc       	sbrc	r11, 7
    1702:	c0 94       	com	r12
    1704:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	98 e2       	ldi	r25, 0x28	; 40
    170a:	b6 01       	movw	r22, r12
    170c:	a5 01       	movw	r20, r10
    170e:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    1712:	88 23       	and	r24, r24
    1714:	01 f5       	brne	.+64     	; 0x1756 <dump_mat+0xc0>
    1716:	80 91 09 28 	lds	r24, 0x2809
    171a:	90 91 0a 28 	lds	r25, 0x280A
    171e:	a0 91 0b 28 	lds	r26, 0x280B
    1722:	b0 91 0c 28 	lds	r27, 0x280C
    1726:	8a 15       	cp	r24, r10
    1728:	9b 05       	cpc	r25, r11
    172a:	ac 05       	cpc	r26, r12
    172c:	bd 05       	cpc	r27, r13
    172e:	99 f4       	brne	.+38     	; 0x1756 <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    1730:	83 e0       	ldi	r24, 0x03	; 3
    1732:	98 e2       	ldi	r25, 0x28	; 40
    1734:	b3 01       	movw	r22, r6
    1736:	42 e3       	ldi	r20, 0x32	; 50
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	92 01       	movw	r18, r4
    173c:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    1740:	88 23       	and	r24, r24
    1742:	69 f4       	brne	.+26     	; 0x175e <dump_mat+0xc8>
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	c2 97       	sbiw	r24, 0x32	; 50
    174a:	49 f4       	brne	.+18     	; 0x175e <dump_mat+0xc8>
                    send_Tx_buffer(matBuff, 50);
    174c:	c3 01       	movw	r24, r6
    174e:	62 e3       	ldi	r22, 0x32	; 50
    1750:	0e 94 61 31 	call	0x62c2	; 0x62c2 <send_Tx_buffer>
    1754:	04 c0       	rjmp	.+8      	; 0x175e <dump_mat+0xc8>
                }
            }else 
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    1756:	85 e9       	ldi	r24, 0x95	; 149
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    175e:	93 94       	inc	r9
    1760:	89 2d       	mov	r24, r9
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e8 16       	cp	r14, r24
    176a:	f9 06       	cpc	r15, r25
    176c:	0a 07       	cpc	r16, r26
    176e:	1b 07       	cpc	r17, r27
    1770:	08 f0       	brcs	.+2      	; 0x1774 <dump_mat+0xde>
    1772:	c0 cf       	rjmp	.-128    	; 0x16f4 <dump_mat+0x5e>
                }
            }else 
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
        }
        //send the remained data
        offset = (b1-1)*50;
    1774:	82 e3       	ldi	r24, 0x32	; 50
    1776:	98 9e       	mul	r9, r24
    1778:	c0 01       	movw	r24, r0
    177a:	11 24       	eor	r1, r1
    177c:	c2 97       	sbiw	r24, 0x32	; 50
    177e:	5c 01       	movw	r10, r24
    1780:	cc 24       	eor	r12, r12
    1782:	b7 fc       	sbrc	r11, 7
    1784:	c0 94       	com	r12
    1786:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	98 e2       	ldi	r25, 0x28	; 40
    178c:	b6 01       	movw	r22, r12
    178e:	a5 01       	movw	r20, r10
    1790:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    1794:	88 23       	and	r24, r24
    1796:	99 f5       	brne	.+102    	; 0x17fe <dump_mat+0x168>
    1798:	80 91 09 28 	lds	r24, 0x2809
    179c:	90 91 0a 28 	lds	r25, 0x280A
    17a0:	a0 91 0b 28 	lds	r26, 0x280B
    17a4:	b0 91 0c 28 	lds	r27, 0x280C
    17a8:	8a 15       	cp	r24, r10
    17aa:	9b 05       	cpc	r25, r11
    17ac:	ac 05       	cpc	r26, r12
    17ae:	bd 05       	cpc	r27, r13
    17b0:	31 f5       	brne	.+76     	; 0x17fe <dump_mat+0x168>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    17b2:	c8 01       	movw	r24, r16
    17b4:	b7 01       	movw	r22, r14
    17b6:	22 e3       	ldi	r18, 0x32	; 50
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    17c2:	d8 2c       	mov	r13, r8
    17c4:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    17c6:	0d 2d       	mov	r16, r13
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	e8 2e       	mov	r14, r24
    17ce:	f1 2c       	mov	r15, r1
    17d0:	ec 0e       	add	r14, r28
    17d2:	fd 1e       	adc	r15, r29
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	98 e2       	ldi	r25, 0x28	; 40
    17d8:	b7 01       	movw	r22, r14
    17da:	a8 01       	movw	r20, r16
    17dc:	9e 01       	movw	r18, r28
    17de:	2f 5f       	subi	r18, 0xFF	; 255
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    17e6:	88 23       	and	r24, r24
    17e8:	71 f4       	brne	.+28     	; 0x1806 <dump_mat+0x170>
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	80 17       	cp	r24, r16
    17f0:	91 07       	cpc	r25, r17
    17f2:	49 f4       	brne	.+18     	; 0x1806 <dump_mat+0x170>
                send_Tx_buffer(matBuff, fileRemain);
    17f4:	c7 01       	movw	r24, r14
    17f6:	6d 2d       	mov	r22, r13
    17f8:	0e 94 61 31 	call	0x62c2	; 0x62c2 <send_Tx_buffer>
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <dump_mat+0x170>
            }
        }else
            xputs(PSTR("Error f_lseek in remained data.\n"));
    17fe:	84 e7       	ldi	r24, 0x74	; 116
    1800:	92 e0       	ldi	r25, 0x02	; 2
    1802:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        
        f_close(&file4);
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	98 e2       	ldi	r25, 0x28	; 40
    180a:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <dump_mat+0x182>
    } else 
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK
    1810:	87 e5       	ldi	r24, 0x57	; 87
    1812:	92 e0       	ldi	r25, 0x02	; 2
    1814:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    
}
    1818:	e4 96       	adiw	r28, 0x34	; 52
    181a:	e1 e1       	ldi	r30, 0x11	; 17
    181c:	0c 94 b4 5b 	jmp	0xb768	; 0xb768 <__epilogue_restores__+0x2>

00001820 <fetch_update_funcY>:
			break;
		
    }
}

void fetch_update_funcY(uint8_t fReset, uint8_t num_of_load_y) {
    1820:	a6 e6       	ldi	r26, 0x66	; 102
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e6 e1       	ldi	r30, 0x16	; 22
    1826:	fc e0       	ldi	r31, 0x0C	; 12
    1828:	0c 94 a2 5b 	jmp	0xb744	; 0xb744 <__prologue_saves__+0x16>
    182c:	98 2f       	mov	r25, r24
    182e:	d6 2e       	mov	r13, r22
	uint8_t res;
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	uint8_t tempBuff[FUNCTION_LENGTH];
    uint16_t loadYBufferSize;
    //xprintf(PSTR("num_of_load_y =  %u\n"), num_of_load_y);		
	if (func_buffer_size_y >= BUFFER_LENGTH/2){
    1830:	80 91 f4 24 	lds	r24, 0x24F4
    1834:	84 36       	cpi	r24, 0x64	; 100
    1836:	18 f0       	brcs	.+6      	; 0x183e <fetch_update_funcY+0x1e>
		xputs(PSTR("Ring buffer function_Y is full\n"));
    1838:	88 e2       	ldi	r24, 0x28	; 40
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	ae c0       	rjmp	.+348    	; 0x199a <fetch_update_funcY+0x17a>
		return;
		}
		
	if (fReset == 1){
    183e:	91 30       	cpi	r25, 0x01	; 1
    1840:	31 f4       	brne	.+12     	; 0x184e <fetch_update_funcY+0x2e>
        func_buffer_size_y = 0;
    1842:	10 92 f4 24 	sts	0x24F4, r1
		func_read_index_y = 0;
    1846:	10 92 f0 24 	sts	0x24F0, r1
		func_write_index_y = 0;        
    184a:	10 92 f2 24 	sts	0x24F2, r1
	}
	
	offset = 512 + num_of_load_y * FUNCTION_LENGTH;
            
	res = f_lseek(&file3, offset);
    184e:	84 e6       	ldi	r24, 0x64	; 100
    1850:	d8 9e       	mul	r13, r24
    1852:	c0 01       	movw	r24, r0
    1854:	11 24       	eor	r1, r1
    1856:	80 50       	subi	r24, 0x00	; 0
    1858:	9e 4f       	sbci	r25, 0xFE	; 254
    185a:	7c 01       	movw	r14, r24
    185c:	00 e0       	ldi	r16, 0x00	; 0
    185e:	10 e0       	ldi	r17, 0x00	; 0
    1860:	86 e0       	ldi	r24, 0x06	; 6
    1862:	97 e2       	ldi	r25, 0x27	; 39
    1864:	b8 01       	movw	r22, r16
    1866:	a7 01       	movw	r20, r14
    1868:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
    186c:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file3.fptr == offset)) {
    186e:	88 23       	and	r24, r24
    1870:	09 f0       	breq	.+2      	; 0x1874 <fetch_update_funcY+0x54>
    1872:	7c c0       	rjmp	.+248    	; 0x196c <fetch_update_funcY+0x14c>
    1874:	80 91 0c 27 	lds	r24, 0x270C
    1878:	90 91 0d 27 	lds	r25, 0x270D
    187c:	a0 91 0e 27 	lds	r26, 0x270E
    1880:	b0 91 0f 27 	lds	r27, 0x270F
    1884:	8e 15       	cp	r24, r14
    1886:	9f 05       	cpc	r25, r15
    1888:	a0 07       	cpc	r26, r16
    188a:	b1 07       	cpc	r27, r17
    188c:	09 f0       	breq	.+2      	; 0x1890 <fetch_update_funcY+0x70>
    188e:	6e c0       	rjmp	.+220    	; 0x196c <fetch_update_funcY+0x14c>
		
		if ((num_of_load_y ==  num_buffer_load_y - 1) && (last_load_y != 0))
    1890:	2d 2d       	mov	r18, r13
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	80 91 b6 20 	lds	r24, 0x20B6
    1898:	90 91 b7 20 	lds	r25, 0x20B7
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	39 f4       	brne	.+14     	; 0x18b2 <fetch_update_funcY+0x92>
    18a4:	00 91 fb 24 	lds	r16, 0x24FB
    18a8:	10 91 fc 24 	lds	r17, 0x24FC
    18ac:	01 15       	cp	r16, r1
    18ae:	11 05       	cpc	r17, r1
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <fetch_update_funcY+0x96>
    18b2:	04 e6       	ldi	r16, 0x64	; 100
    18b4:	10 e0       	ldi	r17, 0x00	; 0
			loadYBufferSize = last_load_y;
		else 
			loadYBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file3, tempBuff, loadYBufferSize, &cnt);
    18b6:	86 e0       	ldi	r24, 0x06	; 6
    18b8:	97 e2       	ldi	r25, 0x27	; 39
    18ba:	be 01       	movw	r22, r28
    18bc:	6d 5f       	subi	r22, 0xFD	; 253
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	a8 01       	movw	r20, r16
    18c2:	9e 01       	movw	r18, r28
    18c4:	2f 5f       	subi	r18, 0xFF	; 255
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
    18cc:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadYBufferSize))) {
    18ce:	88 23       	and	r24, r24
    18d0:	29 f4       	brne	.+10     	; 0x18dc <fetch_update_funcY+0xbc>
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	80 17       	cp	r24, r16
    18d8:	91 07       	cpc	r25, r17
    18da:	c9 f0       	breq	.+50     	; 0x190e <fetch_update_funcY+0xee>
		
			xprintf(PSTR("res =  %u\n"), res);
    18dc:	00 d0       	rcall	.+0      	; 0x18de <fetch_update_funcY+0xbe>
    18de:	0f 92       	push	r0
    18e0:	ed b7       	in	r30, 0x3d	; 61
    18e2:	fe b7       	in	r31, 0x3e	; 62
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	8d e1       	ldi	r24, 0x1D	; 29
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	ad b7       	in	r26, 0x3d	; 61
    18ec:	be b7       	in	r27, 0x3e	; 62
    18ee:	11 96       	adiw	r26, 0x01	; 1
    18f0:	8d 93       	st	X+, r24
    18f2:	9c 93       	st	X, r25
    18f4:	12 97       	sbiw	r26, 0x02	; 2
    18f6:	22 83       	std	Z+2, r18	; 0x02
    18f8:	13 82       	std	Z+3, r1	; 0x03
    18fa:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
			xputs(PSTR("Error in f_read in in update_funcCnt_y\n"));
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	85 ef       	ldi	r24, 0xF5	; 245
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
		}
		
		for (j = 0; j< cnt; j+=2){
    190e:	69 81       	ldd	r22, Y+1	; 0x01
    1910:	7a 81       	ldd	r23, Y+2	; 0x02
    1912:	de 01       	movw	r26, r28
    1914:	13 96       	adiw	r26, 0x03	; 3
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	24 c0       	rjmp	.+72     	; 0x1964 <fetch_update_funcY+0x144>
			function_Y[func_write_index_y] = (uint16_t)tempBuff[j] + tempBuff[j+1]*256; 
    191c:	e0 91 f2 24 	lds	r30, 0x24F2
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	ee 0f       	add	r30, r30
    1924:	ff 1f       	adc	r31, r31
    1926:	e2 55       	subi	r30, 0x52	; 82
    1928:	fa 4d       	sbci	r31, 0xDA	; 218
    192a:	11 96       	adiw	r26, 0x01	; 1
    192c:	3c 91       	ld	r19, X
    192e:	11 97       	sbiw	r26, 0x01	; 1
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	8c 91       	ld	r24, X
    1934:	89 01       	movw	r16, r18
    1936:	08 0f       	add	r16, r24
    1938:	11 1d       	adc	r17, r1
    193a:	00 83       	st	Z, r16
    193c:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_y++; 
    193e:	80 91 f2 24 	lds	r24, 0x24F2
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	80 93 f2 24 	sts	0x24F2, r24
			if (func_write_index_y >= BUFFER_LENGTH/2)
    1948:	80 91 f2 24 	lds	r24, 0x24F2
    194c:	84 36       	cpi	r24, 0x64	; 100
    194e:	10 f0       	brcs	.+4      	; 0x1954 <fetch_update_funcY+0x134>
				func_write_index_y = 0;
    1950:	10 92 f2 24 	sts	0x24F2, r1
			func_buffer_size_y++;  //atomic operation
    1954:	80 91 f4 24 	lds	r24, 0x24F4
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	80 93 f4 24 	sts	0x24F4, r24
		
			xprintf(PSTR("res =  %u\n"), res);
			xputs(PSTR("Error in f_read in in update_funcCnt_y\n"));
		}
		
		for (j = 0; j< cnt; j+=2){
    195e:	4e 5f       	subi	r20, 0xFE	; 254
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	12 96       	adiw	r26, 0x02	; 2
    1964:	46 17       	cp	r20, r22
    1966:	57 07       	cpc	r21, r23
    1968:	c8 f2       	brcs	.-78     	; 0x191c <fetch_update_funcY+0xfc>
    196a:	19 c0       	rjmp	.+50     	; 0x199e <fetch_update_funcY+0x17e>
				func_write_index_y = 0;
			func_buffer_size_y++;  //atomic operation
		}
//xprintf(PSTR("func_write_index_y =  %u\n"), func_write_index_y);			
	} else {
			xprintf(PSTR("res =  %u\n"), res);
    196c:	00 d0       	rcall	.+0      	; 0x196e <fetch_update_funcY+0x14e>
    196e:	0f 92       	push	r0
    1970:	ed b7       	in	r30, 0x3d	; 61
    1972:	fe b7       	in	r31, 0x3e	; 62
    1974:	31 96       	adiw	r30, 0x01	; 1
    1976:	8a ee       	ldi	r24, 0xEA	; 234
    1978:	92 e0       	ldi	r25, 0x02	; 2
    197a:	ad b7       	in	r26, 0x3d	; 61
    197c:	be b7       	in	r27, 0x3e	; 62
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	8d 93       	st	X+, r24
    1982:	9c 93       	st	X, r25
    1984:	12 97       	sbiw	r26, 0x02	; 2
    1986:	22 83       	std	Z+2, r18	; 0x02
    1988:	13 82       	std	Z+3, r1	; 0x03
    198a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
			xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	83 eb       	ldi	r24, 0xB3	; 179
    1998:	92 e0       	ldi	r25, 0x02	; 2
    199a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
	}
} 
    199e:	ca 59       	subi	r28, 0x9A	; 154
    19a0:	df 4f       	sbci	r29, 0xFF	; 255
    19a2:	e7 e0       	ldi	r30, 0x07	; 7
    19a4:	0c 94 be 5b 	jmp	0xb77c	; 0xb77c <__epilogue_restores__+0x16>

000019a8 <fetch_update_funcX>:
			break;
		
    }
}

void fetch_update_funcX(uint8_t fReset, uint8_t num_of_load_x) {
    19a8:	a6 e6       	ldi	r26, 0x66	; 102
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea ed       	ldi	r30, 0xDA	; 218
    19ae:	fc e0       	ldi	r31, 0x0C	; 12
    19b0:	0c 94 a2 5b 	jmp	0xb744	; 0xb744 <__prologue_saves__+0x16>
    19b4:	98 2f       	mov	r25, r24
    19b6:	d6 2e       	mov	r13, r22
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	uint8_t tempBuff[FUNCTION_LENGTH];
	uint16_t loadXBufferSize;
				
    //xprintf(PSTR("num_of_load_x =  %u\n"), num_of_load_x);			
	if (func_buffer_size_x >= BUFFER_LENGTH/2){
    19b8:	80 91 f3 24 	lds	r24, 0x24F3
    19bc:	84 36       	cpi	r24, 0x64	; 100
    19be:	18 f0       	brcs	.+6      	; 0x19c6 <fetch_update_funcX+0x1e>
		xputs(PSTR("Ring buffer function_x is full\n"));
    19c0:	8d ec       	ldi	r24, 0xCD	; 205
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	ae c0       	rjmp	.+348    	; 0x1b22 <fetch_update_funcX+0x17a>
		return;
		}
		
	if (fReset == 1){ 
    19c6:	91 30       	cpi	r25, 0x01	; 1
    19c8:	31 f4       	brne	.+12     	; 0x19d6 <fetch_update_funcX+0x2e>
		func_read_index_x = 0;
    19ca:	10 92 ef 24 	sts	0x24EF, r1
		func_write_index_x = 0;
    19ce:	10 92 f1 24 	sts	0x24F1, r1
		func_buffer_size_x = 0;       
    19d2:	10 92 f3 24 	sts	0x24F3, r1
	}
	
	offset = 512 + num_of_load_x * FUNCTION_LENGTH;
            
	res = f_lseek(&file2, offset);
    19d6:	84 e6       	ldi	r24, 0x64	; 100
    19d8:	d8 9e       	mul	r13, r24
    19da:	c0 01       	movw	r24, r0
    19dc:	11 24       	eor	r1, r1
    19de:	80 50       	subi	r24, 0x00	; 0
    19e0:	9e 4f       	sbci	r25, 0xFE	; 254
    19e2:	7c 01       	movw	r14, r24
    19e4:	00 e0       	ldi	r16, 0x00	; 0
    19e6:	10 e0       	ldi	r17, 0x00	; 0
    19e8:	8b e7       	ldi	r24, 0x7B	; 123
    19ea:	95 e2       	ldi	r25, 0x25	; 37
    19ec:	b8 01       	movw	r22, r16
    19ee:	a7 01       	movw	r20, r14
    19f0:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
    19f4:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file2.fptr == offset)) {
    19f6:	88 23       	and	r24, r24
    19f8:	09 f0       	breq	.+2      	; 0x19fc <fetch_update_funcX+0x54>
    19fa:	7c c0       	rjmp	.+248    	; 0x1af4 <fetch_update_funcX+0x14c>
    19fc:	80 91 81 25 	lds	r24, 0x2581
    1a00:	90 91 82 25 	lds	r25, 0x2582
    1a04:	a0 91 83 25 	lds	r26, 0x2583
    1a08:	b0 91 84 25 	lds	r27, 0x2584
    1a0c:	8e 15       	cp	r24, r14
    1a0e:	9f 05       	cpc	r25, r15
    1a10:	a0 07       	cpc	r26, r16
    1a12:	b1 07       	cpc	r27, r17
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <fetch_update_funcX+0x70>
    1a16:	6e c0       	rjmp	.+220    	; 0x1af4 <fetch_update_funcX+0x14c>
		//num_of_load_x ranges from 0 to num_buffer_load_x - 1
		if ((num_of_load_x ==  num_buffer_load_x - 1) && (last_load_x != 0))
    1a18:	2d 2d       	mov	r18, r13
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	80 91 b4 20 	lds	r24, 0x20B4
    1a20:	90 91 b5 20 	lds	r25, 0x20B5
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	28 17       	cp	r18, r24
    1a28:	39 07       	cpc	r19, r25
    1a2a:	39 f4       	brne	.+14     	; 0x1a3a <fetch_update_funcX+0x92>
    1a2c:	00 91 f9 24 	lds	r16, 0x24F9
    1a30:	10 91 fa 24 	lds	r17, 0x24FA
    1a34:	01 15       	cp	r16, r1
    1a36:	11 05       	cpc	r17, r1
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <fetch_update_funcX+0x96>
    1a3a:	04 e6       	ldi	r16, 0x64	; 100
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
			loadXBufferSize = last_load_x;
		else 
			loadXBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file2, tempBuff, loadXBufferSize, &cnt);
    1a3e:	8b e7       	ldi	r24, 0x7B	; 123
    1a40:	95 e2       	ldi	r25, 0x25	; 37
    1a42:	be 01       	movw	r22, r28
    1a44:	6d 5f       	subi	r22, 0xFD	; 253
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	a8 01       	movw	r20, r16
    1a4a:	9e 01       	movw	r18, r28
    1a4c:	2f 5f       	subi	r18, 0xFF	; 255
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
    1a54:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadXBufferSize))) {
    1a56:	88 23       	and	r24, r24
    1a58:	29 f4       	brne	.+10     	; 0x1a64 <fetch_update_funcX+0xbc>
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	80 17       	cp	r24, r16
    1a60:	91 07       	cpc	r25, r17
    1a62:	c9 f0       	breq	.+50     	; 0x1a96 <fetch_update_funcX+0xee>
			xprintf(PSTR("res =  %u\n"), res);
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <fetch_update_funcX+0xbe>
    1a66:	0f 92       	push	r0
    1a68:	ed b7       	in	r30, 0x3d	; 61
    1a6a:	fe b7       	in	r31, 0x3e	; 62
    1a6c:	31 96       	adiw	r30, 0x01	; 1
    1a6e:	82 ec       	ldi	r24, 0xC2	; 194
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	ad b7       	in	r26, 0x3d	; 61
    1a74:	be b7       	in	r27, 0x3e	; 62
    1a76:	11 96       	adiw	r26, 0x01	; 1
    1a78:	8d 93       	st	X+, r24
    1a7a:	9c 93       	st	X, r25
    1a7c:	12 97       	sbiw	r26, 0x02	; 2
    1a7e:	22 83       	std	Z+2, r18	; 0x02
    1a80:	13 82       	std	Z+3, r1	; 0x03
    1a82:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
			xputs(PSTR("Error in f_read in in update_funcCnt_x\n"));
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	8a e9       	ldi	r24, 0x9A	; 154
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
		}
		
		for (j = 0; j< cnt; j+=2){
    1a96:	69 81       	ldd	r22, Y+1	; 0x01
    1a98:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9a:	de 01       	movw	r26, r28
    1a9c:	13 96       	adiw	r26, 0x03	; 3
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	24 c0       	rjmp	.+72     	; 0x1aec <fetch_update_funcX+0x144>
			function_X[func_write_index_x] = (uint16_t)tempBuff[j] + tempBuff[j+1]*256 ; 		
    1aa4:	e0 91 f1 24 	lds	r30, 0x24F1
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	eb 5d       	subi	r30, 0xDB	; 219
    1ab0:	f7 4d       	sbci	r31, 0xD7	; 215
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	3c 91       	ld	r19, X
    1ab6:	11 97       	sbiw	r26, 0x01	; 1
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	8c 91       	ld	r24, X
    1abc:	89 01       	movw	r16, r18
    1abe:	08 0f       	add	r16, r24
    1ac0:	11 1d       	adc	r17, r1
    1ac2:	00 83       	st	Z, r16
    1ac4:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_x++;  
    1ac6:	80 91 f1 24 	lds	r24, 0x24F1
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	80 93 f1 24 	sts	0x24F1, r24
			if (func_write_index_x >= BUFFER_LENGTH/2) //0-127
    1ad0:	80 91 f1 24 	lds	r24, 0x24F1
    1ad4:	84 36       	cpi	r24, 0x64	; 100
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <fetch_update_funcX+0x134>
				func_write_index_x = 0;
    1ad8:	10 92 f1 24 	sts	0x24F1, r1
				
			func_buffer_size_x ++;  //atomic operation
    1adc:	80 91 f3 24 	lds	r24, 0x24F3
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	80 93 f3 24 	sts	0x24F3, r24
		if (!((res == FR_OK) && (cnt == loadXBufferSize))) {
			xprintf(PSTR("res =  %u\n"), res);
			xputs(PSTR("Error in f_read in in update_funcCnt_x\n"));
		}
		
		for (j = 0; j< cnt; j+=2){
    1ae6:	4e 5f       	subi	r20, 0xFE	; 254
    1ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aea:	12 96       	adiw	r26, 0x02	; 2
    1aec:	46 17       	cp	r20, r22
    1aee:	57 07       	cpc	r21, r23
    1af0:	c8 f2       	brcs	.-78     	; 0x1aa4 <fetch_update_funcX+0xfc>
    1af2:	19 c0       	rjmp	.+50     	; 0x1b26 <fetch_update_funcX+0x17e>
			func_buffer_size_x ++;  //atomic operation
		}
		
            //xprintf(PSTR("func_write_index_x =  %u\n"), func_write_index_x);
	} else {
			xprintf(PSTR("res =  %u\n"), res);
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <fetch_update_funcX+0x14e>
    1af6:	0f 92       	push	r0
    1af8:	ed b7       	in	r30, 0x3d	; 61
    1afa:	fe b7       	in	r31, 0x3e	; 62
    1afc:	31 96       	adiw	r30, 0x01	; 1
    1afe:	8f e8       	ldi	r24, 0x8F	; 143
    1b00:	93 e0       	ldi	r25, 0x03	; 3
    1b02:	ad b7       	in	r26, 0x3d	; 61
    1b04:	be b7       	in	r27, 0x3e	; 62
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	8d 93       	st	X+, r24
    1b0a:	9c 93       	st	X, r25
    1b0c:	12 97       	sbiw	r26, 0x02	; 2
    1b0e:	22 83       	std	Z+2, r18	; 0x02
    1b10:	13 82       	std	Z+3, r1	; 0x03
    1b12:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
			xputs(PSTR("Error in f_lseek in update_funcCnt_x\n"));
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	89 e6       	ldi	r24, 0x69	; 105
    1b20:	93 e0       	ldi	r25, 0x03	; 3
    1b22:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
	}
}
    1b26:	ca 59       	subi	r28, 0x9A	; 154
    1b28:	df 4f       	sbci	r29, 0xFF	; 255
    1b2a:	e7 e0       	ldi	r30, 0x07	; 7
    1b2c:	0c 94 be 5b 	jmp	0xb77c	; 0xb77c <__epilogue_restores__+0x16>

00001b30 <update_funcCnt_y>:

void update_funcCnt_y(void) {
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ee e9       	ldi	r30, 0x9E	; 158
    1b36:	fd e0       	ldi	r31, 0x0D	; 13
    1b38:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <__prologue_saves__+0x8>
    int16_t temp_ADC_val;
	int32_t temp_index_y;
	uint16_t Y_ADC2;

	
	if (!func_buffer_size_y){
    1b3c:	80 91 f4 24 	lds	r24, 0x24F4
    1b40:	88 23       	and	r24, r24
    1b42:	29 f4       	brne	.+10     	; 0x1b4e <update_funcCnt_y+0x1e>
		xputs(PSTR("Ring buffer function_Y is empty\n"));
    1b44:	88 e4       	ldi	r24, 0x48	; 72
    1b46:	93 e0       	ldi	r25, 0x03	; 3
    1b48:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    1b4c:	bc c0       	rjmp	.+376    	; 0x1cc6 <update_funcCnt_y+0x196>
		return;
		}
	
    func_read_index_y++; 
    1b4e:	80 91 f0 24 	lds	r24, 0x24F0
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	80 93 f0 24 	sts	0x24F0, r24
	if (func_read_index_y >= BUFFER_LENGTH/2)
    1b58:	80 91 f0 24 	lds	r24, 0x24F0
    1b5c:	84 36       	cpi	r24, 0x64	; 100
    1b5e:	10 f0       	brcs	.+4      	; 0x1b64 <update_funcCnt_y+0x34>
		func_read_index_y = 0;
    1b60:	10 92 f0 24 	sts	0x24F0, r1
	func_buffer_size_y--;
    1b64:	80 91 f4 24 	lds	r24, 0x24F4
    1b68:	81 50       	subi	r24, 0x01	; 1
    1b6a:	80 93 f4 24 	sts	0x24F4, r24
    
	switch(y_mode){
    1b6e:	80 91 01 28 	lds	r24, 0x2801
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <update_funcCnt_y+0x48>
    1b76:	48 c0       	rjmp	.+144    	; 0x1c08 <update_funcCnt_y+0xd8>
    1b78:	85 30       	cpi	r24, 0x05	; 5
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <update_funcCnt_y+0x4e>
    1b7c:	90 c0       	rjmp	.+288    	; 0x1c9e <update_funcCnt_y+0x16e>
    1b7e:	83 30       	cpi	r24, 0x03	; 3
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <update_funcCnt_y+0x54>
    1b82:	a1 c0       	rjmp	.+322    	; 0x1cc6 <update_funcCnt_y+0x196>
	    case 3: // POS mode, use CH3 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC2 = analogRead(3);   //Y_ADC2 ranges from 0-4095 when input 0-10V
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
			
			if (Y_ADC2>resolution_y) {Y_ADC2 = resolution_y;}
    1b8a:	40 91 9f 20 	lds	r20, 0x209F
    1b8e:	50 91 a0 20 	lds	r21, 0x20A0
			
			//calculate the index_x                                               
			temp_index_y = ((int32_t)Y_ADC2 * y_num * 2 + resolution_y) / ((int32_t) resolution_y * 2) - 1;
    1b92:	c0 91 ab 25 	lds	r28, 0x25AB
    1b96:	d0 91 ac 25 	lds	r29, 0x25AC
    1b9a:	3e 01       	movw	r6, r28
    1b9c:	88 24       	eor	r8, r8
    1b9e:	99 24       	eor	r9, r9
    1ba0:	7a 01       	movw	r14, r20
    1ba2:	00 e0       	ldi	r16, 0x00	; 0
    1ba4:	10 e0       	ldi	r17, 0x00	; 0
    1ba6:	64 01       	movw	r12, r8
    1ba8:	53 01       	movw	r10, r6
    1baa:	aa 0c       	add	r10, r10
    1bac:	bb 1c       	adc	r11, r11
    1bae:	cc 1c       	adc	r12, r12
    1bb0:	dd 1c       	adc	r13, r13
    1bb2:	48 17       	cp	r20, r24
    1bb4:	59 07       	cpc	r21, r25
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <update_funcCnt_y+0x8a>
    1bb8:	ca 01       	movw	r24, r20
    1bba:	9c 01       	movw	r18, r24
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	c6 01       	movw	r24, r12
    1bc2:	b5 01       	movw	r22, r10
    1bc4:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    1bc8:	6e 0d       	add	r22, r14
    1bca:	7f 1d       	adc	r23, r15
    1bcc:	80 1f       	adc	r24, r16
    1bce:	91 1f       	adc	r25, r17
    1bd0:	ee 0c       	add	r14, r14
    1bd2:	ff 1c       	adc	r15, r15
    1bd4:	00 1f       	adc	r16, r16
    1bd6:	11 1f       	adc	r17, r17
    1bd8:	a8 01       	movw	r20, r16
    1bda:	97 01       	movw	r18, r14
    1bdc:	0e 94 7c 5b 	call	0xb6f8	; 0xb6f8 <__divmodsi4>
    1be0:	21 50       	subi	r18, 0x01	; 1
    1be2:	30 40       	sbci	r19, 0x00	; 0
    1be4:	40 40       	sbci	r20, 0x00	; 0
    1be6:	50 40       	sbci	r21, 0x00	; 0
			
            if (temp_index_y >= y_num)  {temp_index_y = y_num - 1;} //check if too big
    1be8:	26 15       	cp	r18, r6
    1bea:	37 05       	cpc	r19, r7
    1bec:	48 05       	cpc	r20, r8
    1bee:	59 05       	cpc	r21, r9
    1bf0:	24 f0       	brlt	.+8      	; 0x1bfa <update_funcCnt_y+0xca>
    1bf2:	21 97       	sbiw	r28, 0x01	; 1
    1bf4:	9e 01       	movw	r18, r28
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
            if (temp_index_y <= 0)  {temp_index_y = 0;} //or too small
			index_y = temp_index_y;
    1bfa:	57 ff       	sbrs	r21, 7
    1bfc:	20 c0       	rjmp	.+64     	; 0x1c3e <update_funcCnt_y+0x10e>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	1b c0       	rjmp	.+54     	; 0x1c3e <update_funcCnt_y+0x10e>
            frame_num = index_y*x_num + index_x;
            break;
			
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[func_read_index_y]);
    1c08:	e0 91 f0 24 	lds	r30, 0x24F0
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	e2 55       	subi	r30, 0x52	; 82
    1c14:	fa 4d       	sbci	r31, 0xDA	; 218
    1c16:	01 90       	ld	r0, Z+
    1c18:	f0 81       	ld	r31, Z
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	80 91 76 26 	lds	r24, 0x2676
    1c20:	90 91 77 26 	lds	r25, 0x2677
    1c24:	e8 0f       	add	r30, r24
    1c26:	f9 1f       	adc	r31, r25
    1c28:	20 91 ab 25 	lds	r18, 0x25AB
    1c2c:	30 91 ac 25 	lds	r19, 0x25AC
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    1c30:	f7 fd       	sbrc	r31, 7
    1c32:	0a c0       	rjmp	.+20     	; 0x1c48 <update_funcCnt_y+0x118>
    1c34:	cf 01       	movw	r24, r30
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	20 93 6e 29 	sts	0x296E, r18
    1c42:	30 93 6f 29 	sts	0x296F, r19
    1c46:	10 c0       	rjmp	.+32     	; 0x1c68 <update_funcCnt_y+0x138>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    1c48:	88 27       	eor	r24, r24
    1c4a:	99 27       	eor	r25, r25
    1c4c:	8e 1b       	sub	r24, r30
    1c4e:	9f 0b       	sbc	r25, r31
    1c50:	b9 01       	movw	r22, r18
    1c52:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    1c56:	21 50       	subi	r18, 0x01	; 1
    1c58:	30 40       	sbci	r19, 0x00	; 0
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	48 1b       	sub	r20, r24
    1c5e:	59 0b       	sbc	r21, r25
    1c60:	40 93 6e 29 	sts	0x296E, r20
    1c64:	50 93 6f 29 	sts	0x296F, r21
            frame_num = index_y*x_num + index_x;
    1c68:	20 91 6e 29 	lds	r18, 0x296E
    1c6c:	30 91 6f 29 	lds	r19, 0x296F
    1c70:	40 91 b9 27 	lds	r20, 0x27B9
    1c74:	50 91 ba 27 	lds	r21, 0x27BA
    1c78:	80 91 23 28 	lds	r24, 0x2823
    1c7c:	90 91 24 28 	lds	r25, 0x2824
    1c80:	bc 01       	movw	r22, r24
    1c82:	26 9f       	mul	r18, r22
    1c84:	c0 01       	movw	r24, r0
    1c86:	27 9f       	mul	r18, r23
    1c88:	90 0d       	add	r25, r0
    1c8a:	36 9f       	mul	r19, r22
    1c8c:	90 0d       	add	r25, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	84 0f       	add	r24, r20
    1c92:	95 1f       	adc	r25, r21
    1c94:	80 93 ed 24 	sts	0x24ED, r24
    1c98:	90 93 ee 24 	sts	0x24EE, r25
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <update_funcCnt_y+0x196>
            break;
	
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			Y_dac_val = function_Y[func_read_index_y]*33;  
    1c9e:	e0 91 f0 24 	lds	r30, 0x24F0
			analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	e2 55       	subi	r30, 0x52	; 82
    1caa:	fa 4d       	sbci	r31, 0xDA	; 218
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	25 e0       	ldi	r18, 0x05	; 5
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	2a 95       	dec	r18
    1cba:	e1 f7       	brne	.-8      	; 0x1cb4 <update_funcCnt_y+0x184>
    1cbc:	68 0f       	add	r22, r24
    1cbe:	79 1f       	adc	r23, r25
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
			break;
		
    }
}
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	ee e0       	ldi	r30, 0x0E	; 14
    1ccc:	0c 94 b7 5b 	jmp	0xb76e	; 0xb76e <__epilogue_restores__+0x8>

00001cd0 <update_funcCnt_x>:
            break;
    }
}
	

void update_funcCnt_x(void) {
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	ee e6       	ldi	r30, 0x6E	; 110
    1cd6:	fe e0       	ldi	r31, 0x0E	; 14
    1cd8:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <__prologue_saves__+0x8>
    int16_t temp_ADC_val;
	int32_t temp_index_x;
	uint16_t X_ADC2;

	
	if (!func_buffer_size_x){
    1cdc:	80 91 f3 24 	lds	r24, 0x24F3
    1ce0:	88 23       	and	r24, r24
    1ce2:	29 f4       	brne	.+10     	; 0x1cee <update_funcCnt_x+0x1e>
		xputs(PSTR("Ring buffer function_x is empty\n"));
    1ce4:	8d ee       	ldi	r24, 0xED	; 237
    1ce6:	93 e0       	ldi	r25, 0x03	; 3
    1ce8:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    1cec:	d2 c0       	rjmp	.+420    	; 0x1e92 <update_funcCnt_x+0x1c2>
		return;
	}
	

    func_read_index_x++; 
    1cee:	80 91 ef 24 	lds	r24, 0x24EF
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	80 93 ef 24 	sts	0x24EF, r24
	if (func_read_index_x >= BUFFER_LENGTH/2)
    1cf8:	80 91 ef 24 	lds	r24, 0x24EF
    1cfc:	84 36       	cpi	r24, 0x64	; 100
    1cfe:	10 f0       	brcs	.+4      	; 0x1d04 <update_funcCnt_x+0x34>
		func_read_index_x = 0;
    1d00:	10 92 ef 24 	sts	0x24EF, r1
		
    func_buffer_size_x--;
    1d04:	80 91 f3 24 	lds	r24, 0x24F3
    1d08:	81 50       	subi	r24, 0x01	; 1
    1d0a:	80 93 f3 24 	sts	0x24F3, r24
	
	switch(x_mode){
    1d0e:	80 91 b7 27 	lds	r24, 0x27B7
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <update_funcCnt_x+0x48>
    1d16:	5f c0       	rjmp	.+190    	; 0x1dd6 <update_funcCnt_x+0x106>
    1d18:	85 30       	cpi	r24, 0x05	; 5
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <update_funcCnt_x+0x4e>
    1d1c:	a6 c0       	rjmp	.+332    	; 0x1e6a <update_funcCnt_x+0x19a>
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <update_funcCnt_x+0x54>
    1d22:	b7 c0       	rjmp	.+366    	; 0x1e92 <update_funcCnt_x+0x1c2>
	
		case 3:
	        X_ADC2 = analogRead(2);  //X_ADC2 ranges from 0-4095 (12bit ADC) when input 0-10V
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>

			if (X_ADC2>resolution_x) {X_ADC2 = resolution_x;}
    1d2a:	40 91 9d 20 	lds	r20, 0x209D
    1d2e:	50 91 9e 20 	lds	r21, 0x209E
			
			//calculate the index_x                                               
			temp_index_x = ((int32_t)X_ADC2 * x_num * 2 + resolution_x) / ((int32_t) resolution_x * 2) - 1;
    1d32:	c0 91 23 28 	lds	r28, 0x2823
    1d36:	d0 91 24 28 	lds	r29, 0x2824
    1d3a:	3e 01       	movw	r6, r28
    1d3c:	88 24       	eor	r8, r8
    1d3e:	99 24       	eor	r9, r9
    1d40:	7a 01       	movw	r14, r20
    1d42:	00 e0       	ldi	r16, 0x00	; 0
    1d44:	10 e0       	ldi	r17, 0x00	; 0
    1d46:	64 01       	movw	r12, r8
    1d48:	53 01       	movw	r10, r6
    1d4a:	aa 0c       	add	r10, r10
    1d4c:	bb 1c       	adc	r11, r11
    1d4e:	cc 1c       	adc	r12, r12
    1d50:	dd 1c       	adc	r13, r13
    1d52:	48 17       	cp	r20, r24
    1d54:	59 07       	cpc	r21, r25
    1d56:	08 f4       	brcc	.+2      	; 0x1d5a <update_funcCnt_x+0x8a>
    1d58:	ca 01       	movw	r24, r20
    1d5a:	9c 01       	movw	r18, r24
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	c6 01       	movw	r24, r12
    1d62:	b5 01       	movw	r22, r10
    1d64:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    1d68:	6e 0d       	add	r22, r14
    1d6a:	7f 1d       	adc	r23, r15
    1d6c:	80 1f       	adc	r24, r16
    1d6e:	91 1f       	adc	r25, r17
    1d70:	ee 0c       	add	r14, r14
    1d72:	ff 1c       	adc	r15, r15
    1d74:	00 1f       	adc	r16, r16
    1d76:	11 1f       	adc	r17, r17
    1d78:	a8 01       	movw	r20, r16
    1d7a:	97 01       	movw	r18, r14
    1d7c:	0e 94 7c 5b 	call	0xb6f8	; 0xb6f8 <__divmodsi4>
    1d80:	21 50       	subi	r18, 0x01	; 1
    1d82:	30 40       	sbci	r19, 0x00	; 0
    1d84:	40 40       	sbci	r20, 0x00	; 0
    1d86:	50 40       	sbci	r21, 0x00	; 0
				
            if (temp_index_x >= x_num)  {temp_index_x = x_num - 1;} //check if too big
    1d88:	26 15       	cp	r18, r6
    1d8a:	37 05       	cpc	r19, r7
    1d8c:	48 05       	cpc	r20, r8
    1d8e:	59 05       	cpc	r21, r9
    1d90:	2c f0       	brlt	.+10     	; 0x1d9c <update_funcCnt_x+0xcc>
    1d92:	21 97       	sbiw	r28, 0x01	; 1
    1d94:	9e 01       	movw	r18, r28
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	21 96       	adiw	r28, 0x01	; 1
            if (temp_index_x <= 0)  {temp_index_x = 0;} //or too small
			index_x = temp_index_x;
    1d9c:	57 ff       	sbrs	r21, 7
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <update_funcCnt_x+0xd8>
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	20 93 b9 27 	sts	0x27B9, r18
    1dac:	30 93 ba 27 	sts	0x27BA, r19
			
            frame_num = index_y*x_num + index_x;
    1db0:	80 91 6e 29 	lds	r24, 0x296E
    1db4:	90 91 6f 29 	lds	r25, 0x296F
    1db8:	20 91 b9 27 	lds	r18, 0x27B9
    1dbc:	30 91 ba 27 	lds	r19, 0x27BA
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	4c 9f       	mul	r20, r28
    1dc4:	c0 01       	movw	r24, r0
    1dc6:	4d 9f       	mul	r20, r29
    1dc8:	90 0d       	add	r25, r0
    1dca:	5c 9f       	mul	r21, r28
    1dcc:	90 0d       	add	r25, r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	82 0f       	add	r24, r18
    1dd2:	93 1f       	adc	r25, r19
    1dd4:	45 c0       	rjmp	.+138    	; 0x1e60 <update_funcCnt_x+0x190>
			break;
			
		case 4:
			temp_ADC_val = X_pos_index + function_X[func_read_index_x];
    1dd6:	e0 91 ef 24 	lds	r30, 0x24EF
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	eb 5d       	subi	r30, 0xDB	; 219
    1de2:	f7 4d       	sbci	r31, 0xD7	; 215
    1de4:	01 90       	ld	r0, Z+
    1de6:	f0 81       	ld	r31, Z
    1de8:	e0 2d       	mov	r30, r0
    1dea:	80 91 04 27 	lds	r24, 0x2704
    1dee:	90 91 05 27 	lds	r25, 0x2705
    1df2:	e8 0f       	add	r30, r24
    1df4:	f9 1f       	adc	r31, r25
    1df6:	20 91 23 28 	lds	r18, 0x2823
    1dfa:	30 91 24 28 	lds	r19, 0x2824
			if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    1dfe:	f7 fd       	sbrc	r31, 7
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <update_funcCnt_x+0x144>
    1e02:	cf 01       	movw	r24, r30
    1e04:	b9 01       	movw	r22, r18
    1e06:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    1e0a:	80 93 b9 27 	sts	0x27B9, r24
    1e0e:	90 93 ba 27 	sts	0x27BA, r25
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <update_funcCnt_x+0x164>
			if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    1e14:	88 27       	eor	r24, r24
    1e16:	99 27       	eor	r25, r25
    1e18:	8e 1b       	sub	r24, r30
    1e1a:	9f 0b       	sbc	r25, r31
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    1e22:	21 50       	subi	r18, 0x01	; 1
    1e24:	30 40       	sbci	r19, 0x00	; 0
    1e26:	b9 01       	movw	r22, r18
    1e28:	68 1b       	sub	r22, r24
    1e2a:	79 0b       	sbc	r23, r25
    1e2c:	60 93 b9 27 	sts	0x27B9, r22
    1e30:	70 93 ba 27 	sts	0x27BA, r23
			frame_num = index_y*x_num + index_x;
    1e34:	20 91 6e 29 	lds	r18, 0x296E
    1e38:	30 91 6f 29 	lds	r19, 0x296F
    1e3c:	40 91 b9 27 	lds	r20, 0x27B9
    1e40:	50 91 ba 27 	lds	r21, 0x27BA
    1e44:	80 91 23 28 	lds	r24, 0x2823
    1e48:	90 91 24 28 	lds	r25, 0x2824
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	26 9f       	mul	r18, r22
    1e50:	c0 01       	movw	r24, r0
    1e52:	27 9f       	mul	r18, r23
    1e54:	90 0d       	add	r25, r0
    1e56:	36 9f       	mul	r19, r22
    1e58:	90 0d       	add	r25, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	84 0f       	add	r24, r20
    1e5e:	95 1f       	adc	r25, r21
    1e60:	80 93 ed 24 	sts	0x24ED, r24
    1e64:	90 93 ee 24 	sts	0x24EE, r25
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <update_funcCnt_x+0x1c2>
			break;
			
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			X_dac_val = function_X[func_read_index_x]*33;
    1e6a:	e0 91 ef 24 	lds	r30, 0x24EF
			analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	eb 5d       	subi	r30, 0xDB	; 219
    1e76:	f7 4d       	sbci	r31, 0xD7	; 215
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	e5 e0       	ldi	r30, 0x05	; 5
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	ea 95       	dec	r30
    1e86:	e1 f7       	brne	.-8      	; 0x1e80 <update_funcCnt_x+0x1b0>
    1e88:	68 0f       	add	r22, r24
    1e8a:	79 1f       	adc	r23, r25
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
			break;
		
    }
}
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	ee e0       	ldi	r30, 0x0E	; 14
    1e98:	0c 94 b7 5b 	jmp	0xb76e	; 0xb76e <__epilogue_restores__+0x8>

00001e9c <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    1e9c:	ae e0       	ldi	r26, 0x0E	; 14
    1e9e:	b2 e0       	ldi	r27, 0x02	; 2
    1ea0:	e4 e5       	ldi	r30, 0x54	; 84
    1ea2:	ff e0       	ldi	r31, 0x0F	; 15
    1ea4:	0c 94 a5 5b 	jmp	0xb74a	; 0xb74a <__prologue_saves__+0x1c>
    1ea8:	08 2f       	mov	r16, r24
    1eaa:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    1eac:	6a 30       	cpi	r22, 0x0A	; 10
    1eae:	80 f4       	brcc	.+32     	; 0x1ed0 <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <set_vel_func+0x16>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <set_vel_func+0x18>
    1eb4:	ed b7       	in	r30, 0x3d	; 61
    1eb6:	fe b7       	in	r31, 0x3e	; 62
    1eb8:	31 96       	adiw	r30, 0x01	; 1
    1eba:	ce 01       	movw	r24, r28
    1ebc:	03 96       	adiw	r24, 0x03	; 3
    1ebe:	ad b7       	in	r26, 0x3d	; 61
    1ec0:	be b7       	in	r27, 0x3e	; 62
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	8d 93       	st	X+, r24
    1ec6:	9c 93       	st	X, r25
    1ec8:	12 97       	sbiw	r26, 0x02	; 2
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e2       	ldi	r25, 0x20	; 32
    1ece:	1f c0       	rjmp	.+62     	; 0x1f0e <set_vel_func+0x72>
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1ed4:	64 36       	cpi	r22, 0x64	; 100
    1ed6:	70 f4       	brcc	.+28     	; 0x1ef4 <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <set_vel_func+0x3e>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <set_vel_func+0x40>
    1edc:	ed b7       	in	r30, 0x3d	; 61
    1ede:	fe b7       	in	r31, 0x3e	; 62
    1ee0:	31 96       	adiw	r30, 0x01	; 1
    1ee2:	ad b7       	in	r26, 0x3d	; 61
    1ee4:	be b7       	in	r27, 0x3e	; 62
    1ee6:	11 96       	adiw	r26, 0x01	; 1
    1ee8:	8d 93       	st	X+, r24
    1eea:	9c 93       	st	X, r25
    1eec:	12 97       	sbiw	r26, 0x02	; 2
    1eee:	8e e0       	ldi	r24, 0x0E	; 14
    1ef0:	90 e2       	ldi	r25, 0x20	; 32
    1ef2:	0d c0       	rjmp	.+26     	; 0x1f0e <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <set_vel_func+0x5a>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <set_vel_func+0x5c>
    1ef8:	ed b7       	in	r30, 0x3d	; 61
    1efa:	fe b7       	in	r31, 0x3e	; 62
    1efc:	31 96       	adiw	r30, 0x01	; 1
    1efe:	ad b7       	in	r26, 0x3d	; 61
    1f00:	be b7       	in	r27, 0x3e	; 62
    1f02:	11 96       	adiw	r26, 0x01	; 1
    1f04:	8d 93       	st	X+, r24
    1f06:	9c 93       	st	X, r25
    1f08:	12 97       	sbiw	r26, 0x02	; 2
    1f0a:	8b e1       	ldi	r24, 0x1B	; 27
    1f0c:	90 e2       	ldi	r25, 0x20	; 32
    1f0e:	82 83       	std	Z+2, r24	; 0x02
    1f10:	93 83       	std	Z+3, r25	; 0x03
    1f12:	14 83       	std	Z+4, r17	; 0x04
    1f14:	15 82       	std	Z+5, r1	; 0x05
    1f16:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <sprintf>
    1f1a:	ed b7       	in	r30, 0x3d	; 61
    1f1c:	fe b7       	in	r31, 0x3e	; 62
    1f1e:	36 96       	adiw	r30, 0x06	; 6
    1f20:	ed bf       	out	0x3d, r30	; 61
    1f22:	fe bf       	out	0x3e, r31	; 62
    else
        xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1f24:	01 30       	cpi	r16, 0x01	; 1
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <set_vel_func+0x94>
    1f28:	02 30       	cpi	r16, 0x02	; 2
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <set_vel_func+0x92>
    1f2c:	d2 c1       	rjmp	.+932    	; 0x22d2 <set_vel_func+0x436>
    1f2e:	e8 c0       	rjmp	.+464    	; 0x2100 <set_vel_func+0x264>
        case 1:    //channel x
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file2);
    1f30:	8b e7       	ldi	r24, 0x7B	; 123
    1f32:	95 e2       	ldi	r25, 0x25	; 37
    1f34:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1f38:	8b e7       	ldi	r24, 0x7B	; 123
    1f3a:	95 e2       	ldi	r25, 0x25	; 37
    1f3c:	be 01       	movw	r22, r28
    1f3e:	6d 5f       	subi	r22, 0xFD	; 253
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
            
            if (res == FR_OK) {
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <set_vel_func+0xb2>
    1f4c:	44 c0       	rjmp	.+136    	; 0x1fd6 <set_vel_func+0x13a>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    1f4e:	8b e7       	ldi	r24, 0x7B	; 123
    1f50:	95 e2       	ldi	r25, 0x25	; 37
    1f52:	be 01       	movw	r22, r28
    1f54:	61 5f       	subi	r22, 0xF1	; 241
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	52 e0       	ldi	r21, 0x02	; 2
    1f5c:	9e 01       	movw	r18, r28
    1f5e:	2f 5f       	subi	r18, 0xFF	; 255
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1f66:	88 23       	and	r24, r24
    1f68:	99 f5       	brne	.+102    	; 0x1fd0 <set_vel_func+0x134>
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	80 50       	subi	r24, 0x00	; 0
    1f70:	92 40       	sbci	r25, 0x02	; 2
    1f72:	71 f5       	brne	.+92     	; 0x1fd0 <set_vel_func+0x134>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    1f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f76:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    1f7a:	88 89       	ldd	r24, Y+16	; 0x10
    1f7c:	80 93 ac 20 	sts	0x20AC, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    1f80:	89 89       	ldd	r24, Y+17	; 0x11
    1f82:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    1f86:	8a 89       	ldd	r24, Y+18	; 0x12
    1f88:	80 93 ae 20 	sts	0x20AE, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    1f8c:	10 93 f5 24 	sts	0x24F5, r17
    1f90:	10 92 f6 24 	sts	0x24F6, r1
                    
                    Stop = 1;
    1f94:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    1f98:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    1f9c:	80 91 b3 20 	lds	r24, 0x20B3
    1fa0:	88 23       	and	r24, r24
    1fa2:	e9 f4       	brne	.+58     	; 0x1fde <set_vel_func+0x142>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <set_vel_func+0x10a>
    1fa6:	0f 92       	push	r0
    1fa8:	ed b7       	in	r30, 0x3d	; 61
    1faa:	fe b7       	in	r31, 0x3e	; 62
    1fac:	31 96       	adiw	r30, 0x01	; 1
    1fae:	8f e7       	ldi	r24, 0x7F	; 127
    1fb0:	95 e0       	ldi	r25, 0x05	; 5
    1fb2:	ad b7       	in	r26, 0x3d	; 61
    1fb4:	be b7       	in	r27, 0x3e	; 62
    1fb6:	11 96       	adiw	r26, 0x01	; 1
    1fb8:	8d 93       	st	X+, r24
    1fba:	9c 93       	st	X, r25
    1fbc:	12 97       	sbiw	r26, 0x02	; 2
    1fbe:	12 83       	std	Z+2, r17	; 0x02
    1fc0:	13 82       	std	Z+3, r1	; 0x03
    1fc2:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	07 c0       	rjmp	.+14     	; 0x1fde <set_vel_func+0x142>
                    
                } else {
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    1fd0:	8e e5       	ldi	r24, 0x5E	; 94
    1fd2:	95 e0       	ldi	r25, 0x05	; 5
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <set_vel_func+0x13e>
                }
            } else 
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    1fd6:	8d e3       	ldi	r24, 0x3D	; 61
    1fd8:	95 e0       	ldi	r25, 0x05	; 5
    1fda:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
			
			if (quiet_mode_on == 0)
    1fde:	80 91 b3 20 	lds	r24, 0x20B3
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <set_vel_func+0x14c>
    1fe6:	85 c0       	rjmp	.+266    	; 0x20f2 <set_vel_func+0x256>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <set_vel_func+0x14e>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <set_vel_func+0x150>
    1fec:	8c e2       	ldi	r24, 0x2C	; 44
    1fee:	95 e0       	ldi	r25, 0x05	; 5
    1ff0:	ed b7       	in	r30, 0x3d	; 61
    1ff2:	fe b7       	in	r31, 0x3e	; 62
    1ff4:	81 83       	std	Z+1, r24	; 0x01
    1ff6:	92 83       	std	Z+2, r25	; 0x02
    1ff8:	80 91 ab 20 	lds	r24, 0x20AB
    1ffc:	90 91 ac 20 	lds	r25, 0x20AC
    2000:	a0 91 ad 20 	lds	r26, 0x20AD
    2004:	b0 91 ae 20 	lds	r27, 0x20AE
    2008:	83 83       	std	Z+3, r24	; 0x03
    200a:	94 83       	std	Z+4, r25	; 0x04
    200c:	a5 83       	std	Z+5, r26	; 0x05
    200e:	b6 83       	std	Z+6, r27	; 0x06
    2010:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				last_load_x = funcSize_x % FUNCTION_LENGTH;
    2014:	60 91 ab 20 	lds	r22, 0x20AB
    2018:	70 91 ac 20 	lds	r23, 0x20AC
    201c:	80 91 ad 20 	lds	r24, 0x20AD
    2020:	90 91 ae 20 	lds	r25, 0x20AE
    2024:	24 e6       	ldi	r18, 0x64	; 100
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2030:	60 93 f9 24 	sts	0x24F9, r22
    2034:	70 93 fa 24 	sts	0x24FA, r23
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	ed b7       	in	r30, 0x3d	; 61
    203e:	fe b7       	in	r31, 0x3e	; 62
    2040:	31 96       	adiw	r30, 0x01	; 1
    2042:	2a e1       	ldi	r18, 0x1A	; 26
    2044:	35 e0       	ldi	r19, 0x05	; 5
    2046:	ad b7       	in	r26, 0x3d	; 61
    2048:	be b7       	in	r27, 0x3e	; 62
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	2d 93       	st	X+, r18
    204e:	3c 93       	st	X, r19
    2050:	12 97       	sbiw	r26, 0x02	; 2
    2052:	62 83       	std	Z+2, r22	; 0x02
    2054:	73 83       	std	Z+3, r23	; 0x03
    2056:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				if(!last_load_x){
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	80 91 f9 24 	lds	r24, 0x24F9
    2066:	90 91 fa 24 	lds	r25, 0x24FA
    206a:	20 91 ab 20 	lds	r18, 0x20AB
    206e:	30 91 ac 20 	lds	r19, 0x20AC
    2072:	40 91 ad 20 	lds	r20, 0x20AD
    2076:	50 91 ae 20 	lds	r21, 0x20AE
    207a:	89 2b       	or	r24, r25
    207c:	e1 f4       	brne	.+56     	; 0x20b6 <set_vel_func+0x21a>
					num_buffer_load_x = funcSize_x/FUNCTION_LENGTH;
    207e:	ca 01       	movw	r24, r20
    2080:	b9 01       	movw	r22, r18
    2082:	24 e6       	ldi	r18, 0x64	; 100
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    208e:	20 93 b4 20 	sts	0x20B4, r18
    2092:	30 93 b5 20 	sts	0x20B5, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    2096:	00 d0       	rcall	.+0      	; 0x2098 <set_vel_func+0x1fc>
    2098:	0f 92       	push	r0
    209a:	ed b7       	in	r30, 0x3d	; 61
    209c:	fe b7       	in	r31, 0x3e	; 62
    209e:	31 96       	adiw	r30, 0x01	; 1
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	95 e0       	ldi	r25, 0x05	; 5
    20a4:	ad b7       	in	r26, 0x3d	; 61
    20a6:	be b7       	in	r27, 0x3e	; 62
    20a8:	11 96       	adiw	r26, 0x01	; 1
    20aa:	8d 93       	st	X+, r24
    20ac:	9c 93       	st	X, r25
    20ae:	12 97       	sbiw	r26, 0x02	; 2
    20b0:	22 83       	std	Z+2, r18	; 0x02
    20b2:	33 83       	std	Z+3, r19	; 0x03
    20b4:	18 c0       	rjmp	.+48     	; 0x20e6 <set_vel_func+0x24a>
				}
				else{
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    20b6:	ca 01       	movw	r24, r20
    20b8:	b9 01       	movw	r22, r18
    20ba:	24 e6       	ldi	r18, 0x64	; 100
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    20c6:	2f 5f       	subi	r18, 0xFF	; 255
    20c8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ca:	20 93 b4 20 	sts	0x20B4, r18
    20ce:	30 93 b5 20 	sts	0x20B5, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <set_vel_func+0x238>
    20d4:	0f 92       	push	r0
    20d6:	8a ee       	ldi	r24, 0xEA	; 234
    20d8:	94 e0       	ldi	r25, 0x04	; 4
    20da:	ed b7       	in	r30, 0x3d	; 61
    20dc:	fe b7       	in	r31, 0x3e	; 62
    20de:	81 83       	std	Z+1, r24	; 0x01
    20e0:	92 83       	std	Z+2, r25	; 0x02
    20e2:	23 83       	std	Z+3, r18	; 0x03
    20e4:	34 83       	std	Z+4, r19	; 0x04
    20e6:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
				}
			}
			
			default_func_x = 0;
    20f2:	10 92 a3 20 	sts	0x20A3, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <fetch_update_funcX>
    20fe:	ed c0       	rjmp	.+474    	; 0x22da <set_vel_func+0x43e>
            
        case 2:
            
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            
            res = f_close(&file3);
    2100:	86 e0       	ldi	r24, 0x06	; 6
    2102:	97 e2       	ldi	r25, 0x27	; 39
    2104:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    2108:	86 e0       	ldi	r24, 0x06	; 6
    210a:	97 e2       	ldi	r25, 0x27	; 39
    210c:	be 01       	movw	r22, r28
    210e:	6d 5f       	subi	r22, 0xFD	; 253
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
            
            if (res == FR_OK) {
    2118:	88 23       	and	r24, r24
    211a:	09 f0       	breq	.+2      	; 0x211e <set_vel_func+0x282>
    211c:	45 c0       	rjmp	.+138    	; 0x21a8 <set_vel_func+0x30c>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    211e:	86 e0       	ldi	r24, 0x06	; 6
    2120:	97 e2       	ldi	r25, 0x27	; 39
    2122:	be 01       	movw	r22, r28
    2124:	61 5f       	subi	r22, 0xF1	; 241
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	52 e0       	ldi	r21, 0x02	; 2
    212c:	9e 01       	movw	r18, r28
    212e:	2f 5f       	subi	r18, 0xFF	; 255
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    2136:	88 23       	and	r24, r24
    2138:	a1 f5       	brne	.+104    	; 0x21a2 <set_vel_func+0x306>
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	80 50       	subi	r24, 0x00	; 0
    2140:	92 40       	sbci	r25, 0x02	; 2
    2142:	79 f5       	brne	.+94     	; 0x21a2 <set_vel_func+0x306>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    2144:	8f 85       	ldd	r24, Y+15	; 0x0f
    2146:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    214a:	88 89       	ldd	r24, Y+16	; 0x10
    214c:	80 93 b0 20 	sts	0x20B0, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    2150:	89 89       	ldd	r24, Y+17	; 0x11
    2152:	80 93 b1 20 	sts	0x20B1, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    2156:	8a 89       	ldd	r24, Y+18	; 0x12
    2158:	80 93 b2 20 	sts	0x20B2, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    215c:	10 93 f7 24 	sts	0x24F7, r17
    2160:	10 92 f8 24 	sts	0x24F8, r1
                    
                    Stop = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    216a:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    216e:	80 91 b3 20 	lds	r24, 0x20B3
    2172:	88 23       	and	r24, r24
    2174:	e9 f4       	brne	.+58     	; 0x21b0 <set_vel_func+0x314>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    2176:	00 d0       	rcall	.+0      	; 0x2178 <set_vel_func+0x2dc>
    2178:	0f 92       	push	r0
    217a:	ed b7       	in	r30, 0x3d	; 61
    217c:	fe b7       	in	r31, 0x3e	; 62
    217e:	31 96       	adiw	r30, 0x01	; 1
    2180:	86 ec       	ldi	r24, 0xC6	; 198
    2182:	94 e0       	ldi	r25, 0x04	; 4
    2184:	ad b7       	in	r26, 0x3d	; 61
    2186:	be b7       	in	r27, 0x3e	; 62
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	8d 93       	st	X+, r24
    218c:	9c 93       	st	X, r25
    218e:	12 97       	sbiw	r26, 0x02	; 2
    2190:	12 83       	std	Z+2, r17	; 0x02
    2192:	13 82       	std	Z+3, r1	; 0x03
    2194:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <set_vel_func+0x314>
                    
                } else
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    21a2:	85 ea       	ldi	r24, 0xA5	; 165
    21a4:	94 e0       	ldi	r25, 0x04	; 4
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <set_vel_func+0x310>
            } else
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    21a8:	84 e8       	ldi	r24, 0x84	; 132
    21aa:	94 e0       	ldi	r25, 0x04	; 4
    21ac:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        
			
			if (quiet_mode_on == 0){
    21b0:	80 91 b3 20 	lds	r24, 0x20B3
    21b4:	88 23       	and	r24, r24
    21b6:	09 f0       	breq	.+2      	; 0x21ba <set_vel_func+0x31e>
    21b8:	85 c0       	rjmp	.+266    	; 0x22c4 <set_vel_func+0x428>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <set_vel_func+0x320>
    21bc:	00 d0       	rcall	.+0      	; 0x21be <set_vel_func+0x322>
    21be:	83 e7       	ldi	r24, 0x73	; 115
    21c0:	94 e0       	ldi	r25, 0x04	; 4
    21c2:	ed b7       	in	r30, 0x3d	; 61
    21c4:	fe b7       	in	r31, 0x3e	; 62
    21c6:	81 83       	std	Z+1, r24	; 0x01
    21c8:	92 83       	std	Z+2, r25	; 0x02
    21ca:	80 91 af 20 	lds	r24, 0x20AF
    21ce:	90 91 b0 20 	lds	r25, 0x20B0
    21d2:	a0 91 b1 20 	lds	r26, 0x20B1
    21d6:	b0 91 b2 20 	lds	r27, 0x20B2
    21da:	83 83       	std	Z+3, r24	; 0x03
    21dc:	94 83       	std	Z+4, r25	; 0x04
    21de:	a5 83       	std	Z+5, r26	; 0x05
    21e0:	b6 83       	std	Z+6, r27	; 0x06
    21e2:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				last_load_y = funcSize_y % FUNCTION_LENGTH;
    21e6:	60 91 af 20 	lds	r22, 0x20AF
    21ea:	70 91 b0 20 	lds	r23, 0x20B0
    21ee:	80 91 b1 20 	lds	r24, 0x20B1
    21f2:	90 91 b2 20 	lds	r25, 0x20B2
    21f6:	24 e6       	ldi	r18, 0x64	; 100
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2202:	60 93 fb 24 	sts	0x24FB, r22
    2206:	70 93 fc 24 	sts	0x24FC, r23
				xprintf(PSTR("last_load_y = %u\n"), last_load_y);
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	ed b7       	in	r30, 0x3d	; 61
    2210:	fe b7       	in	r31, 0x3e	; 62
    2212:	31 96       	adiw	r30, 0x01	; 1
    2214:	21 e6       	ldi	r18, 0x61	; 97
    2216:	34 e0       	ldi	r19, 0x04	; 4
    2218:	ad b7       	in	r26, 0x3d	; 61
    221a:	be b7       	in	r27, 0x3e	; 62
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	2d 93       	st	X+, r18
    2220:	3c 93       	st	X, r19
    2222:	12 97       	sbiw	r26, 0x02	; 2
    2224:	62 83       	std	Z+2, r22	; 0x02
    2226:	73 83       	std	Z+3, r23	; 0x03
    2228:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				if (last_load_y == 0){
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	80 91 fb 24 	lds	r24, 0x24FB
    2238:	90 91 fc 24 	lds	r25, 0x24FC
    223c:	20 91 af 20 	lds	r18, 0x20AF
    2240:	30 91 b0 20 	lds	r19, 0x20B0
    2244:	40 91 b1 20 	lds	r20, 0x20B1
    2248:	50 91 b2 20 	lds	r21, 0x20B2
    224c:	89 2b       	or	r24, r25
    224e:	e1 f4       	brne	.+56     	; 0x2288 <set_vel_func+0x3ec>
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;
    2250:	ca 01       	movw	r24, r20
    2252:	b9 01       	movw	r22, r18
    2254:	24 e6       	ldi	r18, 0x64	; 100
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2260:	20 93 b6 20 	sts	0x20B6, r18
    2264:	30 93 b7 20 	sts	0x20B7, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    2268:	00 d0       	rcall	.+0      	; 0x226a <set_vel_func+0x3ce>
    226a:	0f 92       	push	r0
    226c:	ed b7       	in	r30, 0x3d	; 61
    226e:	fe b7       	in	r31, 0x3e	; 62
    2270:	31 96       	adiw	r30, 0x01	; 1
    2272:	89 e4       	ldi	r24, 0x49	; 73
    2274:	94 e0       	ldi	r25, 0x04	; 4
    2276:	ad b7       	in	r26, 0x3d	; 61
    2278:	be b7       	in	r27, 0x3e	; 62
    227a:	11 96       	adiw	r26, 0x01	; 1
    227c:	8d 93       	st	X+, r24
    227e:	9c 93       	st	X, r25
    2280:	12 97       	sbiw	r26, 0x02	; 2
    2282:	22 83       	std	Z+2, r18	; 0x02
    2284:	33 83       	std	Z+3, r19	; 0x03
    2286:	18 c0       	rjmp	.+48     	; 0x22b8 <set_vel_func+0x41c>
				}
				else{
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    2288:	ca 01       	movw	r24, r20
    228a:	b9 01       	movw	r22, r18
    228c:	24 e6       	ldi	r18, 0x64	; 100
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	20 93 b6 20 	sts	0x20B6, r18
    22a0:	30 93 b7 20 	sts	0x20B7, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <set_vel_func+0x40a>
    22a6:	0f 92       	push	r0
    22a8:	81 e3       	ldi	r24, 0x31	; 49
    22aa:	94 e0       	ldi	r25, 0x04	; 4
    22ac:	ed b7       	in	r30, 0x3d	; 61
    22ae:	fe b7       	in	r31, 0x3e	; 62
    22b0:	81 83       	std	Z+1, r24	; 0x01
    22b2:	92 83       	std	Z+2, r25	; 0x02
    22b4:	23 83       	std	Z+3, r18	; 0x03
    22b6:	34 83       	std	Z+4, r19	; 0x04
    22b8:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
				}
			}
			
			default_func_y = 0;
    22c4:	10 92 a4 20 	sts	0x20A4, r1
			
			//update function buffer
            fetch_update_funcY(1,0);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	0e 94 10 0c 	call	0x1820	; 0x1820 <fetch_update_funcY>
    22d0:	04 c0       	rjmp	.+8      	; 0x22da <set_vel_func+0x43e>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
            break;
            
        default:
                xputs(PSTR("Error input for function channel.\n"));
    22d2:	8e e0       	ldi	r24, 0x0E	; 14
    22d4:	94 e0       	ldi	r25, 0x04	; 4
    22d6:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            break;
    }
}
    22da:	c2 5f       	subi	r28, 0xF2	; 242
    22dc:	dd 4f       	sbci	r29, 0xFD	; 253
    22de:	e4 e0       	ldi	r30, 0x04	; 4
    22e0:	0c 94 c1 5b 	jmp	0xb782	; 0xb782 <__epilogue_restores__+0x1c>

000022e4 <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    22e4:	ae e0       	ldi	r26, 0x0E	; 14
    22e6:	b2 e0       	ldi	r27, 0x02	; 2
    22e8:	e8 e7       	ldi	r30, 0x78	; 120
    22ea:	f1 e1       	ldi	r31, 0x11	; 17
    22ec:	0c 94 a3 5b 	jmp	0xb746	; 0xb746 <__prologue_saves__+0x18>
    22f0:	08 2f       	mov	r16, r24
    22f2:	16 2f       	mov	r17, r22
    uint8_t posFuncBuff[512];
	uint16_t loadXBuffer = FUNCTION_LENGTH;
	uint16_t loadYBuffer = FUNCTION_LENGTH;
    
    
    if (func_id < 10)
    22f4:	6a 30       	cpi	r22, 0x0A	; 10
    22f6:	80 f4       	brcc	.+32     	; 0x2318 <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <set_pos_func+0x16>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <set_pos_func+0x18>
    22fc:	ed b7       	in	r30, 0x3d	; 61
    22fe:	fe b7       	in	r31, 0x3e	; 62
    2300:	31 96       	adiw	r30, 0x01	; 1
    2302:	ce 01       	movw	r24, r28
    2304:	03 96       	adiw	r24, 0x03	; 3
    2306:	ad b7       	in	r26, 0x3d	; 61
    2308:	be b7       	in	r27, 0x3e	; 62
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	8d 93       	st	X+, r24
    230e:	9c 93       	st	X, r25
    2310:	12 97       	sbiw	r26, 0x02	; 2
    2312:	87 e2       	ldi	r24, 0x27	; 39
    2314:	90 e2       	ldi	r25, 0x20	; 32
    2316:	1f c0       	rjmp	.+62     	; 0x2356 <set_pos_func+0x72>
    2318:	ce 01       	movw	r24, r28
    231a:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    231c:	64 36       	cpi	r22, 0x64	; 100
    231e:	70 f4       	brcc	.+28     	; 0x233c <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    2320:	00 d0       	rcall	.+0      	; 0x2322 <set_pos_func+0x3e>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <set_pos_func+0x40>
    2324:	ed b7       	in	r30, 0x3d	; 61
    2326:	fe b7       	in	r31, 0x3e	; 62
    2328:	31 96       	adiw	r30, 0x01	; 1
    232a:	ad b7       	in	r26, 0x3d	; 61
    232c:	be b7       	in	r27, 0x3e	; 62
    232e:	11 96       	adiw	r26, 0x01	; 1
    2330:	8d 93       	st	X+, r24
    2332:	9c 93       	st	X, r25
    2334:	12 97       	sbiw	r26, 0x02	; 2
    2336:	85 e3       	ldi	r24, 0x35	; 53
    2338:	90 e2       	ldi	r25, 0x20	; 32
    233a:	0d c0       	rjmp	.+26     	; 0x2356 <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    233c:	00 d0       	rcall	.+0      	; 0x233e <set_pos_func+0x5a>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <set_pos_func+0x5c>
    2340:	ed b7       	in	r30, 0x3d	; 61
    2342:	fe b7       	in	r31, 0x3e	; 62
    2344:	31 96       	adiw	r30, 0x01	; 1
    2346:	ad b7       	in	r26, 0x3d	; 61
    2348:	be b7       	in	r27, 0x3e	; 62
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	8d 93       	st	X+, r24
    234e:	9c 93       	st	X, r25
    2350:	12 97       	sbiw	r26, 0x02	; 2
    2352:	82 e4       	ldi	r24, 0x42	; 66
    2354:	90 e2       	ldi	r25, 0x20	; 32
    2356:	82 83       	std	Z+2, r24	; 0x02
    2358:	93 83       	std	Z+3, r25	; 0x03
    235a:	14 83       	std	Z+4, r17	; 0x04
    235c:	15 82       	std	Z+5, r1	; 0x05
    235e:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <sprintf>
    2362:	ed b7       	in	r30, 0x3d	; 61
    2364:	fe b7       	in	r31, 0x3e	; 62
    2366:	36 96       	adiw	r30, 0x06	; 6
    2368:	ed bf       	out	0x3d, r30	; 61
    236a:	fe bf       	out	0x3e, r31	; 62
    else
        xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    236c:	01 30       	cpi	r16, 0x01	; 1
    236e:	21 f0       	breq	.+8      	; 0x2378 <set_pos_func+0x94>
    2370:	02 30       	cpi	r16, 0x02	; 2
    2372:	09 f0       	breq	.+2      	; 0x2376 <set_pos_func+0x92>
    2374:	90 c1       	rjmp	.+800    	; 0x2696 <set_pos_func+0x3b2>
    2376:	c7 c0       	rjmp	.+398    	; 0x2506 <set_pos_func+0x222>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    2378:	8b e7       	ldi	r24, 0x7B	; 123
    237a:	95 e2       	ldi	r25, 0x25	; 37
    237c:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    2380:	8b e7       	ldi	r24, 0x7B	; 123
    2382:	95 e2       	ldi	r25, 0x25	; 37
    2384:	be 01       	movw	r22, r28
    2386:	6d 5f       	subi	r22, 0xFD	; 253
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
            if (res == FR_OK) {
    2390:	88 23       	and	r24, r24
    2392:	09 f0       	breq	.+2      	; 0x2396 <set_pos_func+0xb2>
    2394:	44 c0       	rjmp	.+136    	; 0x241e <set_pos_func+0x13a>
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    2396:	8b e7       	ldi	r24, 0x7B	; 123
    2398:	95 e2       	ldi	r25, 0x25	; 37
    239a:	be 01       	movw	r22, r28
    239c:	61 5f       	subi	r22, 0xF1	; 241
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	52 e0       	ldi	r21, 0x02	; 2
    23a4:	9e 01       	movw	r18, r28
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    23ae:	88 23       	and	r24, r24
    23b0:	99 f5       	brne	.+102    	; 0x2418 <set_pos_func+0x134>
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	9a 81       	ldd	r25, Y+2	; 0x02
    23b6:	80 50       	subi	r24, 0x00	; 0
    23b8:	92 40       	sbci	r25, 0x02	; 2
    23ba:	71 f5       	brne	.+92     	; 0x2418 <set_pos_func+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    23c2:	88 89       	ldd	r24, Y+16	; 0x10
    23c4:	80 93 ac 20 	sts	0x20AC, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    23c8:	89 89       	ldd	r24, Y+17	; 0x11
    23ca:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    23ce:	8a 89       	ldd	r24, Y+18	; 0x12
    23d0:	80 93 ae 20 	sts	0x20AE, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    23d4:	10 93 f5 24 	sts	0x24F5, r17
    23d8:	10 92 f6 24 	sts	0x24F6, r1
                    
                    Stop = 1;
    23dc:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    23e0:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    23e4:	80 91 b3 20 	lds	r24, 0x20B3
    23e8:	88 23       	and	r24, r24
    23ea:	e9 f4       	brne	.+58     	; 0x2426 <set_pos_func+0x142>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <set_pos_func+0x10a>
    23ee:	0f 92       	push	r0
    23f0:	ed b7       	in	r30, 0x3d	; 61
    23f2:	fe b7       	in	r31, 0x3e	; 62
    23f4:	31 96       	adiw	r30, 0x01	; 1
    23f6:	8f ed       	ldi	r24, 0xDF	; 223
    23f8:	96 e0       	ldi	r25, 0x06	; 6
    23fa:	ad b7       	in	r26, 0x3d	; 61
    23fc:	be b7       	in	r27, 0x3e	; 62
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	8d 93       	st	X+, r24
    2402:	9c 93       	st	X, r25
    2404:	12 97       	sbiw	r26, 0x02	; 2
    2406:	12 83       	std	Z+2, r17	; 0x02
    2408:	13 82       	std	Z+3, r1	; 0x03
    240a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	07 c0       	rjmp	.+14     	; 0x2426 <set_pos_func+0x142>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else 
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    2418:	82 ec       	ldi	r24, 0xC2	; 194
    241a:	96 e0       	ldi	r25, 0x06	; 6
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <set_pos_func+0x13e>
            } else 
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    241e:	81 ea       	ldi	r24, 0xA1	; 161
    2420:	96 e0       	ldi	r25, 0x06	; 6
    2422:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
				
			last_load_x = funcSize_x % loadXBuffer;
    2426:	e0 90 ab 20 	lds	r14, 0x20AB
    242a:	f0 90 ac 20 	lds	r15, 0x20AC
    242e:	00 91 ad 20 	lds	r16, 0x20AD
    2432:	10 91 ae 20 	lds	r17, 0x20AE
    2436:	c8 01       	movw	r24, r16
    2438:	b7 01       	movw	r22, r14
    243a:	24 e6       	ldi	r18, 0x64	; 100
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2446:	60 93 f9 24 	sts	0x24F9, r22
    244a:	70 93 fa 24 	sts	0x24FA, r23
			
			if (last_load_x == 0){
    244e:	67 2b       	or	r22, r23
    2450:	49 f4       	brne	.+18     	; 0x2464 <set_pos_func+0x180>
				num_buffer_load_x = funcSize_x / loadXBuffer;		
    2452:	c8 01       	movw	r24, r16
    2454:	b7 01       	movw	r22, r14
    2456:	24 e6       	ldi	r18, 0x64	; 100
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2462:	0a c0       	rjmp	.+20     	; 0x2478 <set_pos_func+0x194>
			}
			else{
				num_buffer_load_x = funcSize_x / loadXBuffer + 1;
    2464:	c8 01       	movw	r24, r16
    2466:	b7 01       	movw	r22, r14
    2468:	24 e6       	ldi	r18, 0x64	; 100
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2474:	2f 5f       	subi	r18, 0xFF	; 255
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	20 93 b4 20 	sts	0x20B4, r18
    247c:	30 93 b5 20 	sts	0x20B5, r19
			}					
			
			if (quiet_mode_on == 0)
    2480:	80 91 b3 20 	lds	r24, 0x20B3
    2484:	88 23       	and	r24, r24
    2486:	c1 f5       	brne	.+112    	; 0x24f8 <set_pos_func+0x214>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    2488:	00 d0       	rcall	.+0      	; 0x248a <set_pos_func+0x1a6>
    248a:	00 d0       	rcall	.+0      	; 0x248c <set_pos_func+0x1a8>
    248c:	80 e9       	ldi	r24, 0x90	; 144
    248e:	96 e0       	ldi	r25, 0x06	; 6
    2490:	ed b7       	in	r30, 0x3d	; 61
    2492:	fe b7       	in	r31, 0x3e	; 62
    2494:	81 83       	std	Z+1, r24	; 0x01
    2496:	92 83       	std	Z+2, r25	; 0x02
    2498:	ad b7       	in	r26, 0x3d	; 61
    249a:	be b7       	in	r27, 0x3e	; 62
    249c:	13 96       	adiw	r26, 0x03	; 3
    249e:	ed 92       	st	X+, r14
    24a0:	fd 92       	st	X+, r15
    24a2:	0d 93       	st	X+, r16
    24a4:	1c 93       	st	X, r17
    24a6:	16 97       	sbiw	r26, 0x06	; 6
    24a8:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	8e e7       	ldi	r24, 0x7E	; 126
    24b2:	96 e0       	ldi	r25, 0x06	; 6
    24b4:	ed b7       	in	r30, 0x3d	; 61
    24b6:	fe b7       	in	r31, 0x3e	; 62
    24b8:	81 83       	std	Z+1, r24	; 0x01
    24ba:	92 83       	std	Z+2, r25	; 0x02
    24bc:	80 91 f9 24 	lds	r24, 0x24F9
    24c0:	90 91 fa 24 	lds	r25, 0x24FA
    24c4:	83 83       	std	Z+3, r24	; 0x03
    24c6:	94 83       	std	Z+4, r25	; 0x04
    24c8:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);
    24cc:	86 e6       	ldi	r24, 0x66	; 102
    24ce:	96 e0       	ldi	r25, 0x06	; 6
    24d0:	ad b7       	in	r26, 0x3d	; 61
    24d2:	be b7       	in	r27, 0x3e	; 62
    24d4:	11 96       	adiw	r26, 0x01	; 1
    24d6:	8d 93       	st	X+, r24
    24d8:	9c 93       	st	X, r25
    24da:	12 97       	sbiw	r26, 0x02	; 2
    24dc:	80 91 b4 20 	lds	r24, 0x20B4
    24e0:	90 91 b5 20 	lds	r25, 0x20B5
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	8d 93       	st	X+, r24
    24e8:	9c 93       	st	X, r25
    24ea:	14 97       	sbiw	r26, 0x04	; 4
    24ec:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
			}
			
			default_func_x = 0;
    24f8:	10 92 a3 20 	sts	0x20A3, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <fetch_update_funcX>
    2504:	cc c0       	rjmp	.+408    	; 0x269e <set_pos_func+0x3ba>
            break;
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    2506:	86 e0       	ldi	r24, 0x06	; 6
    2508:	97 e2       	ldi	r25, 0x27	; 39
    250a:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    250e:	86 e0       	ldi	r24, 0x06	; 6
    2510:	97 e2       	ldi	r25, 0x27	; 39
    2512:	be 01       	movw	r22, r28
    2514:	6d 5f       	subi	r22, 0xFD	; 253
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
            if (res == FR_OK) {
    251e:	88 23       	and	r24, r24
    2520:	09 f0       	breq	.+2      	; 0x2524 <set_pos_func+0x240>
    2522:	45 c0       	rjmp	.+138    	; 0x25ae <set_pos_func+0x2ca>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    2524:	86 e0       	ldi	r24, 0x06	; 6
    2526:	97 e2       	ldi	r25, 0x27	; 39
    2528:	be 01       	movw	r22, r28
    252a:	61 5f       	subi	r22, 0xF1	; 241
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	52 e0       	ldi	r21, 0x02	; 2
    2532:	9e 01       	movw	r18, r28
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    253c:	88 23       	and	r24, r24
    253e:	a1 f5       	brne	.+104    	; 0x25a8 <set_pos_func+0x2c4>
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	80 50       	subi	r24, 0x00	; 0
    2546:	92 40       	sbci	r25, 0x02	; 2
    2548:	79 f5       	brne	.+94     	; 0x25a8 <set_pos_func+0x2c4>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    254a:	8f 85       	ldd	r24, Y+15	; 0x0f
    254c:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    2550:	88 89       	ldd	r24, Y+16	; 0x10
    2552:	80 93 b0 20 	sts	0x20B0, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    2556:	89 89       	ldd	r24, Y+17	; 0x11
    2558:	80 93 b1 20 	sts	0x20B1, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    255c:	8a 89       	ldd	r24, Y+18	; 0x12
    255e:	80 93 b2 20 	sts	0x20B2, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_Y = func_id;
    2562:	10 93 f7 24 	sts	0x24F7, r17
    2566:	10 92 f8 24 	sts	0x24F8, r1
                    
                    Stop = 1;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    2570:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    2574:	80 91 b3 20 	lds	r24, 0x20B3
    2578:	88 23       	and	r24, r24
    257a:	e9 f4       	brne	.+58     	; 0x25b6 <set_pos_func+0x2d2>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    257c:	00 d0       	rcall	.+0      	; 0x257e <set_pos_func+0x29a>
    257e:	0f 92       	push	r0
    2580:	ed b7       	in	r30, 0x3d	; 61
    2582:	fe b7       	in	r31, 0x3e	; 62
    2584:	31 96       	adiw	r30, 0x01	; 1
    2586:	82 e4       	ldi	r24, 0x42	; 66
    2588:	96 e0       	ldi	r25, 0x06	; 6
    258a:	ad b7       	in	r26, 0x3d	; 61
    258c:	be b7       	in	r27, 0x3e	; 62
    258e:	11 96       	adiw	r26, 0x01	; 1
    2590:	8d 93       	st	X+, r24
    2592:	9c 93       	st	X, r25
    2594:	12 97       	sbiw	r26, 0x02	; 2
    2596:	12 83       	std	Z+2, r17	; 0x02
    2598:	13 82       	std	Z+3, r1	; 0x03
    259a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	07 c0       	rjmp	.+14     	; 0x25b6 <set_pos_func+0x2d2>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else 
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    25a8:	84 e2       	ldi	r24, 0x24	; 36
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <set_pos_func+0x2ce>
            } else
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	96 e0       	ldi	r25, 0x06	; 6
    25b2:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
			
			last_load_y = funcSize_y % loadYBuffer;
    25b6:	e0 90 af 20 	lds	r14, 0x20AF
    25ba:	f0 90 b0 20 	lds	r15, 0x20B0
    25be:	00 91 b1 20 	lds	r16, 0x20B1
    25c2:	10 91 b2 20 	lds	r17, 0x20B2
    25c6:	c8 01       	movw	r24, r16
    25c8:	b7 01       	movw	r22, r14
    25ca:	24 e6       	ldi	r18, 0x64	; 100
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    25d6:	60 93 fb 24 	sts	0x24FB, r22
    25da:	70 93 fc 24 	sts	0x24FC, r23
			
			if (last_load_y == 0){
    25de:	67 2b       	or	r22, r23
    25e0:	49 f4       	brne	.+18     	; 0x25f4 <set_pos_func+0x310>
				num_buffer_load_y = funcSize_y / loadYBuffer;		
    25e2:	c8 01       	movw	r24, r16
    25e4:	b7 01       	movw	r22, r14
    25e6:	24 e6       	ldi	r18, 0x64	; 100
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    25f2:	0a c0       	rjmp	.+20     	; 0x2608 <set_pos_func+0x324>
			}
			else{
				num_buffer_load_y = funcSize_y / loadYBuffer + 1;
    25f4:	c8 01       	movw	r24, r16
    25f6:	b7 01       	movw	r22, r14
    25f8:	24 e6       	ldi	r18, 0x64	; 100
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2604:	2f 5f       	subi	r18, 0xFF	; 255
    2606:	3f 4f       	sbci	r19, 0xFF	; 255
    2608:	20 93 b6 20 	sts	0x20B6, r18
    260c:	30 93 b7 20 	sts	0x20B7, r19
			}
			
			if (quiet_mode_on == 0){
    2610:	80 91 b3 20 	lds	r24, 0x20B3
    2614:	88 23       	and	r24, r24
    2616:	c1 f5       	brne	.+112    	; 0x2688 <set_pos_func+0x3a4>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    2618:	00 d0       	rcall	.+0      	; 0x261a <set_pos_func+0x336>
    261a:	00 d0       	rcall	.+0      	; 0x261c <set_pos_func+0x338>
    261c:	82 ef       	ldi	r24, 0xF2	; 242
    261e:	95 e0       	ldi	r25, 0x05	; 5
    2620:	ed b7       	in	r30, 0x3d	; 61
    2622:	fe b7       	in	r31, 0x3e	; 62
    2624:	81 83       	std	Z+1, r24	; 0x01
    2626:	92 83       	std	Z+2, r25	; 0x02
    2628:	ad b7       	in	r26, 0x3d	; 61
    262a:	be b7       	in	r27, 0x3e	; 62
    262c:	13 96       	adiw	r26, 0x03	; 3
    262e:	ed 92       	st	X+, r14
    2630:	fd 92       	st	X+, r15
    2632:	0d 93       	st	X+, r16
    2634:	1c 93       	st	X, r17
    2636:	16 97       	sbiw	r26, 0x06	; 6
    2638:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				xprintf(PSTR("last_load_y = %u \n"), last_load_y);
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	8f ed       	ldi	r24, 0xDF	; 223
    2642:	95 e0       	ldi	r25, 0x05	; 5
    2644:	ed b7       	in	r30, 0x3d	; 61
    2646:	fe b7       	in	r31, 0x3e	; 62
    2648:	81 83       	std	Z+1, r24	; 0x01
    264a:	92 83       	std	Z+2, r25	; 0x02
    264c:	80 91 fb 24 	lds	r24, 0x24FB
    2650:	90 91 fc 24 	lds	r25, 0x24FC
    2654:	83 83       	std	Z+3, r24	; 0x03
    2656:	94 83       	std	Z+4, r25	; 0x04
    2658:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
				xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);				
    265c:	87 ec       	ldi	r24, 0xC7	; 199
    265e:	95 e0       	ldi	r25, 0x05	; 5
    2660:	ad b7       	in	r26, 0x3d	; 61
    2662:	be b7       	in	r27, 0x3e	; 62
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	8d 93       	st	X+, r24
    2668:	9c 93       	st	X, r25
    266a:	12 97       	sbiw	r26, 0x02	; 2
    266c:	80 91 b6 20 	lds	r24, 0x20B6
    2670:	90 91 b7 20 	lds	r25, 0x20B7
    2674:	13 96       	adiw	r26, 0x03	; 3
    2676:	8d 93       	st	X+, r24
    2678:	9c 93       	st	X, r25
    267a:	14 97       	sbiw	r26, 0x04	; 4
    267c:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
			}
			
			default_func_y = 0;
    2688:	10 92 a4 20 	sts	0x20A4, r1
			
			//update the function buffer
			fetch_update_funcY(1,0);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	0e 94 10 0c 	call	0x1820	; 0x1820 <fetch_update_funcY>
    2694:	04 c0       	rjmp	.+8      	; 0x269e <set_pos_func+0x3ba>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
                xputs(PSTR("Error input for function channel.\n"));
    2696:	84 ea       	ldi	r24, 0xA4	; 164
    2698:	95 e0       	ldi	r25, 0x05	; 5
    269a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            break;
    }
}
    269e:	c2 5f       	subi	r28, 0xF2	; 242
    26a0:	dd 4f       	sbci	r29, 0xFD	; 253
    26a2:	e6 e0       	ldi	r30, 0x06	; 6
    26a4:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

000026a8 <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	16 2f       	mov	r17, r22
    26b0:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    26b2:	88 23       	and	r24, r24
    26b4:	49 f5       	brne	.+82     	; 0x2708 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    26b6:	80 91 85 26 	lds	r24, 0x2685
    26ba:	88 23       	and	r24, r24
    26bc:	e1 f7       	brne	.-8      	; 0x26b6 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    26be:	88 e7       	ldi	r24, 0x78	; 120
    26c0:	96 e2       	ldi	r25, 0x26	; 38
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	ae 01       	movw	r20, r28
    26c6:	21 2f       	mov	r18, r17
    26c8:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    26cc:	80 91 9d 29 	lds	r24, 0x299D
    26d0:	88 23       	and	r24, r24
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    26d4:	80 e9       	ldi	r24, 0x90	; 144
    26d6:	99 e2       	ldi	r25, 0x29	; 41
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	ae 01       	movw	r20, r28
    26dc:	21 2f       	mov	r18, r17
    26de:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    26e2:	80 91 33 27 	lds	r24, 0x2733
    26e6:	88 23       	and	r24, r24
    26e8:	e1 f7       	brne	.-8      	; 0x26e2 <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    26ea:	86 e2       	ldi	r24, 0x26	; 38
    26ec:	97 e2       	ldi	r25, 0x27	; 39
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	ae 01       	movw	r20, r28
    26f2:	21 2f       	mov	r18, r17
    26f4:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    26f8:	80 91 a9 25 	lds	r24, 0x25A9
    26fc:	88 23       	and	r24, r24
    26fe:	e1 f7       	brne	.-8      	; 0x26f8 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    2700:	8c e9       	ldi	r24, 0x9C	; 156
    2702:	95 e2       	ldi	r25, 0x25	; 37
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	22 c0       	rjmp	.+68     	; 0x274c <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    2708:	e8 2f       	mov	r30, r24
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	df 01       	movw	r26, r30
    270e:	aa 5c       	subi	r26, 0xCA	; 202
    2710:	b8 4d       	sbci	r27, 0xD8	; 216
    2712:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    2714:	e3 51       	subi	r30, 0x13	; 19
    2716:	f7 4d       	sbci	r31, 0xD7	; 215
    2718:	60 81       	ld	r22, Z
        if (ch != 0){
    271a:	aa 23       	and	r26, r26
    271c:	d9 f0       	breq	.+54     	; 0x2754 <i2cMasterSend+0xac>
            
            switch (ch) {
    271e:	a3 30       	cpi	r26, 0x03	; 3
    2720:	51 f0       	breq	.+20     	; 0x2736 <i2cMasterSend+0x8e>
    2722:	a4 30       	cpi	r26, 0x04	; 4
    2724:	59 f0       	breq	.+22     	; 0x273c <i2cMasterSend+0x94>
    2726:	a2 30       	cpi	r26, 0x02	; 2
    2728:	19 f4       	brne	.+6      	; 0x2730 <i2cMasterSend+0x88>
    272a:	a0 e9       	ldi	r26, 0x90	; 144
    272c:	b9 e2       	ldi	r27, 0x29	; 41
    272e:	08 c0       	rjmp	.+16     	; 0x2740 <i2cMasterSend+0x98>
    2730:	a8 e7       	ldi	r26, 0x78	; 120
    2732:	b6 e2       	ldi	r27, 0x26	; 38
    2734:	05 c0       	rjmp	.+10     	; 0x2740 <i2cMasterSend+0x98>
    2736:	a6 e2       	ldi	r26, 0x26	; 38
    2738:	b7 e2       	ldi	r27, 0x27	; 39
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    273c:	ac e9       	ldi	r26, 0x9C	; 156
    273e:	b5 e2       	ldi	r27, 0x25	; 37
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    2740:	1d 96       	adiw	r26, 0x0d	; 13
    2742:	8c 91       	ld	r24, X
    2744:	1d 97       	sbiw	r26, 0x0d	; 13
    2746:	88 23       	and	r24, r24
    2748:	d9 f7       	brne	.-10     	; 0x2740 <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    274a:	cd 01       	movw	r24, r26
    274c:	ae 01       	movw	r20, r28
    274e:	21 2f       	mov	r18, r17
    2750:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
        }
    }
}
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	08 95       	ret

0000275c <handle_message_length_4>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_4(uint8_t *msg_buffer) {
    275c:	fc 01       	movw	r30, r24
    int16_t setVal;
	//'set_ao'
    switch(msg_buffer[0]) {
    275e:	80 81       	ld	r24, Z
    2760:	80 31       	cpi	r24, 0x10	; 16
    2762:	19 f0       	breq	.+6      	; 0x276a <handle_message_length_4+0xe>
    2764:	81 31       	cpi	r24, 0x11	; 17
    2766:	a9 f4       	brne	.+42     	; 0x2792 <handle_message_length_4+0x36>
    2768:	07 c0       	rjmp	.+14     	; 0x2778 <handle_message_length_4+0x1c>
        case 0x10: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4. 
		    setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    276a:	81 81       	ldd	r24, Z+1	; 0x01
    276c:	73 81       	ldd	r23, Z+3	; 0x03
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	92 81       	ldd	r25, Z+2	; 0x02
    2772:	69 0f       	add	r22, r25
    2774:	71 1d       	adc	r23, r1
    2776:	09 c0       	rjmp	.+18     	; 0x278a <handle_message_length_4+0x2e>
            break;
		case 0x11:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4 
			setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    2778:	73 81       	ldd	r23, Z+3	; 0x03
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	68 0f       	add	r22, r24
    2780:	71 1d       	adc	r23, r1
			setVal = -setVal;
            analogWrite(msg_buffer[1] - 1, setVal);
    2782:	81 81       	ldd	r24, Z+1	; 0x01
    2784:	70 95       	com	r23
    2786:	61 95       	neg	r22
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	81 50       	subi	r24, 0x01	; 1
    278c:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
    2790:	08 95       	ret
            break;
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	68 e0       	ldi	r22, 0x08	; 8
    2796:	40 ee       	ldi	r20, 0xE0	; 224
    2798:	50 e2       	ldi	r21, 0x20	; 32
    279a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    279e:	08 95       	ret

000027a0 <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    27a0:	a2 e0       	ldi	r26, 0x02	; 2
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e6 ed       	ldi	r30, 0xD6	; 214
    27a6:	f3 e1       	ldi	r31, 0x13	; 19
    27a8:	0c 94 a4 5b 	jmp	0xb748	; 0xb748 <__prologue_saves__+0x1a>
    27ac:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    27ae:	fc 01       	movw	r30, r24
    27b0:	80 81       	ld	r24, Z
    27b2:	85 32       	cpi	r24, 0x25	; 37
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <handle_message_length_3+0x18>
    27b6:	b5 c0       	rjmp	.+362    	; 0x2922 <handle_message_length_3+0x182>
    27b8:	86 32       	cpi	r24, 0x26	; 38
    27ba:	50 f4       	brcc	.+20     	; 0x27d0 <handle_message_length_3+0x30>
    27bc:	85 31       	cpi	r24, 0x15	; 21
    27be:	09 f4       	brne	.+2      	; 0x27c2 <handle_message_length_3+0x22>
    27c0:	9a c0       	rjmp	.+308    	; 0x28f6 <handle_message_length_3+0x156>
    27c2:	80 32       	cpi	r24, 0x20	; 32
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <handle_message_length_3+0x28>
    27c6:	a0 c0       	rjmp	.+320    	; 0x2908 <handle_message_length_3+0x168>
    27c8:	80 31       	cpi	r24, 0x10	; 16
    27ca:	09 f0       	breq	.+2      	; 0x27ce <handle_message_length_3+0x2e>
    27cc:	1d c1       	rjmp	.+570    	; 0x2a08 <handle_message_length_3+0x268>
    27ce:	8b c0       	rjmp	.+278    	; 0x28e6 <handle_message_length_3+0x146>
    27d0:	85 33       	cpi	r24, 0x35	; 53
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <handle_message_length_3+0x36>
    27d4:	ee c0       	rjmp	.+476    	; 0x29b2 <handle_message_length_3+0x212>
    27d6:	8f 3f       	cpi	r24, 0xFF	; 255
    27d8:	21 f0       	breq	.+8      	; 0x27e2 <handle_message_length_3+0x42>
    27da:	80 33       	cpi	r24, 0x30	; 48
    27dc:	09 f0       	breq	.+2      	; 0x27e0 <handle_message_length_3+0x40>
    27de:	14 c1       	rjmp	.+552    	; 0x2a08 <handle_message_length_3+0x268>
    27e0:	be c0       	rjmp	.+380    	; 0x295e <handle_message_length_3+0x1be>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    27e2:	f8 01       	movw	r30, r16
    27e4:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    27e6:	80 91 85 26 	lds	r24, 0x2685
    27ea:	88 23       	and	r24, r24
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <handle_message_length_3+0x46>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    27ee:	88 e7       	ldi	r24, 0x78	; 120
    27f0:	96 e2       	ldi	r25, 0x26	; 38
    27f2:	6f 2d       	mov	r22, r15
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	51 e2       	ldi	r21, 0x21	; 33
    27f8:	22 e0       	ldi	r18, 0x02	; 2
    27fa:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    27fe:	80 91 9d 29 	lds	r24, 0x299D
    2802:	88 23       	and	r24, r24
    2804:	e1 f7       	brne	.-8      	; 0x27fe <handle_message_length_3+0x5e>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    2806:	80 e9       	ldi	r24, 0x90	; 144
    2808:	99 e2       	ldi	r25, 0x29	; 41
    280a:	6f 2d       	mov	r22, r15
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	51 e2       	ldi	r21, 0x21	; 33
    2810:	22 e0       	ldi	r18, 0x02	; 2
    2812:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    2816:	80 91 33 27 	lds	r24, 0x2733
    281a:	88 23       	and	r24, r24
    281c:	e1 f7       	brne	.-8      	; 0x2816 <handle_message_length_3+0x76>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    281e:	86 e2       	ldi	r24, 0x26	; 38
    2820:	97 e2       	ldi	r25, 0x27	; 39
    2822:	6f 2d       	mov	r22, r15
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	51 e2       	ldi	r21, 0x21	; 33
    2828:	22 e0       	ldi	r18, 0x02	; 2
    282a:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    282e:	80 91 a9 25 	lds	r24, 0x25A9
    2832:	88 23       	and	r24, r24
    2834:	e1 f7       	brne	.-8      	; 0x282e <handle_message_length_3+0x8e>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    2836:	8c e9       	ldi	r24, 0x9C	; 156
    2838:	95 e2       	ldi	r25, 0x25	; 37
    283a:	6f 2d       	mov	r22, r15
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	51 e2       	ldi	r21, 0x21	; 33
    2840:	22 e0       	ldi	r18, 0x02	; 2
    2842:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
    2846:	80 ef       	ldi	r24, 0xF0	; 240
    2848:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    284a:	20 e2       	ldi	r18, 0x20	; 32
    284c:	33 e0       	ldi	r19, 0x03	; 3
    284e:	f9 01       	movw	r30, r18
    2850:	31 97       	sbiw	r30, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <handle_message_length_3+0xb0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	d9 f7       	brne	.-10     	; 0x284e <handle_message_length_3+0xae>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	f8 01       	movw	r30, r16
    285e:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2860:	80 91 85 26 	lds	r24, 0x2685
    2864:	88 23       	and	r24, r24
    2866:	e1 f7       	brne	.-8      	; 0x2860 <handle_message_length_3+0xc0>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2868:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    286a:	88 e7       	ldi	r24, 0x78	; 120
    286c:	96 e2       	ldi	r25, 0x26	; 38
    286e:	6f 2d       	mov	r22, r15
    2870:	ae 01       	movw	r20, r28
    2872:	4f 5f       	subi	r20, 0xFF	; 255
    2874:	5f 4f       	sbci	r21, 0xFF	; 255
    2876:	22 e0       	ldi	r18, 0x02	; 2
    2878:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    287c:	80 91 9d 29 	lds	r24, 0x299D
    2880:	88 23       	and	r24, r24
    2882:	e1 f7       	brne	.-8      	; 0x287c <handle_message_length_3+0xdc>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    2884:	80 e9       	ldi	r24, 0x90	; 144
    2886:	99 e2       	ldi	r25, 0x29	; 41
    2888:	6f 2d       	mov	r22, r15
    288a:	ae 01       	movw	r20, r28
    288c:	4f 5f       	subi	r20, 0xFF	; 255
    288e:	5f 4f       	sbci	r21, 0xFF	; 255
    2890:	22 e0       	ldi	r18, 0x02	; 2
    2892:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    2896:	80 91 33 27 	lds	r24, 0x2733
    289a:	88 23       	and	r24, r24
    289c:	e1 f7       	brne	.-8      	; 0x2896 <handle_message_length_3+0xf6>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    289e:	86 e2       	ldi	r24, 0x26	; 38
    28a0:	97 e2       	ldi	r25, 0x27	; 39
    28a2:	6f 2d       	mov	r22, r15
    28a4:	ae 01       	movw	r20, r28
    28a6:	4f 5f       	subi	r20, 0xFF	; 255
    28a8:	5f 4f       	sbci	r21, 0xFF	; 255
    28aa:	22 e0       	ldi	r18, 0x02	; 2
    28ac:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    28b0:	80 91 a9 25 	lds	r24, 0x25A9
    28b4:	88 23       	and	r24, r24
    28b6:	e1 f7       	brne	.-8      	; 0x28b0 <handle_message_length_3+0x110>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    28b8:	8c e9       	ldi	r24, 0x9C	; 156
    28ba:	95 e2       	ldi	r25, 0x25	; 37
    28bc:	6f 2d       	mov	r22, r15
    28be:	ae 01       	movw	r20, r28
    28c0:	4f 5f       	subi	r20, 0xFF	; 255
    28c2:	5f 4f       	sbci	r21, 0xFF	; 255
    28c4:	22 e0       	ldi	r18, 0x02	; 2
    28c6:	0e 94 9b 33 	call	0x6736	; 0x6736 <TWI_MasterWrite>
    28ca:	84 ef       	ldi	r24, 0xF4	; 244
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	20 e2       	ldi	r18, 0x20	; 32
    28d0:	33 e0       	ldi	r19, 0x03	; 3
    28d2:	f9 01       	movw	r30, r18
    28d4:	31 97       	sbiw	r30, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <handle_message_length_3+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	d9 f7       	brne	.-10     	; 0x28d2 <handle_message_length_3+0x132>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	62 e0       	ldi	r22, 0x02	; 2
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	51 e2       	ldi	r21, 0x21	; 33
    28e4:	95 c0       	rjmp	.+298    	; 0x2a10 <handle_message_length_3+0x270>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    28e6:	f8 01       	movw	r30, r16
    28e8:	81 81       	ldd	r24, Z+1	; 0x01
    28ea:	80 93 b7 27 	sts	0x27B7, r24
            y_mode = msg_buffer[2];
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	80 93 01 28 	sts	0x2801, r24
    28f4:	8f c0       	rjmp	.+286    	; 0x2a14 <handle_message_length_3+0x274>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    28f6:	f8 01       	movw	r30, r16
    28f8:	62 81       	ldd	r22, Z+2	; 0x02
    28fa:	66 23       	and	r22, r22
    28fc:	49 f0       	breq	.+18     	; 0x2910 <handle_message_length_3+0x170>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    28fe:	f8 01       	movw	r30, r16
    2900:	81 81       	ldd	r24, Z+1	; 0x01
    2902:	0e 94 72 11 	call	0x22e4	; 0x22e4 <set_pos_func>
    2906:	86 c0       	rjmp	.+268    	; 0x2a14 <handle_message_length_3+0x274>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    2908:	f8 01       	movw	r30, r16
    290a:	62 81       	ldd	r22, Z+2	; 0x02
    290c:	66 23       	and	r22, r22
    290e:	21 f4       	brne	.+8      	; 0x2918 <handle_message_length_3+0x178>
                set_default_func(msg_buffer[1]);}
    2910:	81 81       	ldd	r24, Z+1	; 0x01
    2912:	0e 94 c3 0a 	call	0x1586	; 0x1586 <set_default_func>
    2916:	7e c0       	rjmp	.+252    	; 0x2a14 <handle_message_length_3+0x274>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    2918:	f8 01       	movw	r30, r16
    291a:	81 81       	ldd	r24, Z+1	; 0x01
    291c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <set_vel_func>
    2920:	79 c0       	rjmp	.+242    	; 0x2a14 <handle_message_length_3+0x274>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2922:	f8 01       	movw	r30, r16
    2924:	92 81       	ldd	r25, Z+2	; 0x02
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	21 81       	ldd	r18, Z+1	; 0x01
    292a:	8c 01       	movw	r16, r24
    292c:	02 0f       	add	r16, r18
    292e:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    2930:	98 01       	movw	r18, r16
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	62 e1       	ldi	r22, 0x12	; 18
    2938:	7a e7       	ldi	r23, 0x7A	; 122
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 7c 5b 	call	0xb6f8	; 0xb6f8 <__divmodsi4>
    2942:	20 93 a5 20 	sts	0x20A5, r18
    2946:	30 93 a6 20 	sts	0x20A6, r19
            if (quiet_mode_on == 0)
    294a:	80 91 b3 20 	lds	r24, 0x20B3
    294e:	88 23       	and	r24, r24
    2950:	09 f0       	breq	.+2      	; 0x2954 <handle_message_length_3+0x1b4>
    2952:	60 c0       	rjmp	.+192    	; 0x2a14 <handle_message_length_3+0x274>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    2954:	00 d0       	rcall	.+0      	; 0x2956 <handle_message_length_3+0x1b6>
    2956:	0f 92       	push	r0
    2958:	81 ef       	ldi	r24, 0xF1	; 241
    295a:	99 e0       	ldi	r25, 0x09	; 9
    295c:	1d c0       	rjmp	.+58     	; 0x2998 <handle_message_length_3+0x1f8>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    295e:	f8 01       	movw	r30, r16
    2960:	92 81       	ldd	r25, Z+2	; 0x02
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	21 81       	ldd	r18, Z+1	; 0x01
    2966:	8c 01       	movw	r16, r24
    2968:	02 0f       	add	r16, r18
    296a:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    296c:	98 01       	movw	r18, r16
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	62 e1       	ldi	r22, 0x12	; 18
    2974:	7a e7       	ldi	r23, 0x7A	; 122
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	0e 94 7c 5b 	call	0xb6f8	; 0xb6f8 <__divmodsi4>
    297e:	20 93 a7 20 	sts	0x20A7, r18
    2982:	30 93 a8 20 	sts	0x20A8, r19
            if (quiet_mode_on == 0)
    2986:	80 91 b3 20 	lds	r24, 0x20B3
    298a:	88 23       	and	r24, r24
    298c:	09 f0       	breq	.+2      	; 0x2990 <handle_message_length_3+0x1f0>
    298e:	42 c0       	rjmp	.+132    	; 0x2a14 <handle_message_length_3+0x274>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    2990:	00 d0       	rcall	.+0      	; 0x2992 <handle_message_length_3+0x1f2>
    2992:	0f 92       	push	r0
    2994:	8e ec       	ldi	r24, 0xCE	; 206
    2996:	99 e0       	ldi	r25, 0x09	; 9
    2998:	ed b7       	in	r30, 0x3d	; 61
    299a:	fe b7       	in	r31, 0x3e	; 62
    299c:	81 83       	std	Z+1, r24	; 0x01
    299e:	92 83       	std	Z+2, r25	; 0x02
    29a0:	03 83       	std	Z+3, r16	; 0x03
    29a2:	14 83       	std	Z+4, r17	; 0x04
    29a4:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	31 c0       	rjmp	.+98     	; 0x2a14 <handle_message_length_3+0x274>
            break;
			
		case 0x35: //set resoultion_x and resolution_y	
			resolution_x = (uint32_t)msg_buffer[1] * 4095/10;
    29b2:	f8 01       	movw	r30, r16
    29b4:	61 81       	ldd	r22, Z+1	; 0x01
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	2f ef       	ldi	r18, 0xFF	; 255
    29be:	3f e0       	ldi	r19, 0x0F	; 15
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    29c8:	2a e0       	ldi	r18, 0x0A	; 10
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    29d4:	20 93 9d 20 	sts	0x209D, r18
    29d8:	30 93 9e 20 	sts	0x209E, r19
			resolution_y = (uint32_t)msg_buffer[2] * 4095/10;
    29dc:	f8 01       	movw	r30, r16
    29de:	62 81       	ldd	r22, Z+2	; 0x02
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	2f ef       	ldi	r18, 0xFF	; 255
    29e8:	3f e0       	ldi	r19, 0x0F	; 15
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    29f2:	2a e0       	ldi	r18, 0x0A	; 10
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    29fe:	20 93 9f 20 	sts	0x209F, r18
    2a02:	30 93 a0 20 	sts	0x20A0, r19
    2a06:	06 c0       	rjmp	.+12     	; 0x2a14 <handle_message_length_3+0x274>
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	68 e0       	ldi	r22, 0x08	; 8
    2a0c:	48 ed       	ldi	r20, 0xD8	; 216
    2a0e:	50 e2       	ldi	r21, 0x20	; 32
    2a10:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    }
}
    2a14:	22 96       	adiw	r28, 0x02	; 2
    2a16:	e5 e0       	ldi	r30, 0x05	; 5
    2a18:	0c 94 c0 5b 	jmp	0xb780	; 0xb780 <__epilogue_restores__+0x1a>

00002a1c <set_hwConfig>:
    } else
    xputs(PSTR("Error opening pattern file\n"));

}

void set_hwConfig(uint8_t config_num) {
    2a1c:	a2 e8       	ldi	r26, 0x82	; 130
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e4 e1       	ldi	r30, 0x14	; 20
    2a22:	f5 e1       	ldi	r31, 0x15	; 21
    2a24:	0c 94 a1 5b 	jmp	0xb742	; 0xb742 <__prologue_saves__+0x14>
    2a28:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    2a2a:	8a 30       	cpi	r24, 0x0A	; 10
    2a2c:	80 f4       	brcc	.+32     	; 0x2a4e <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <set_hwConfig+0x14>
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <set_hwConfig+0x16>
    2a32:	ed b7       	in	r30, 0x3d	; 61
    2a34:	fe b7       	in	r31, 0x3e	; 62
    2a36:	31 96       	adiw	r30, 0x01	; 1
    2a38:	8d ef       	ldi	r24, 0xFD	; 253
    2a3a:	94 e2       	ldi	r25, 0x24	; 36
    2a3c:	ad b7       	in	r26, 0x3d	; 61
    2a3e:	be b7       	in	r27, 0x3e	; 62
    2a40:	11 96       	adiw	r26, 0x01	; 1
    2a42:	8d 93       	st	X+, r24
    2a44:	9c 93       	st	X, r25
    2a46:	12 97       	sbiw	r26, 0x02	; 2
    2a48:	8e e4       	ldi	r24, 0x4E	; 78
    2a4a:	90 e2       	ldi	r25, 0x20	; 32
    2a4c:	1f c0       	rjmp	.+62     	; 0x2a8c <set_hwConfig+0x70>
    2a4e:	8d ef       	ldi	r24, 0xFD	; 253
    2a50:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    2a52:	24 36       	cpi	r18, 0x64	; 100
    2a54:	70 f4       	brcc	.+28     	; 0x2a72 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <set_hwConfig+0x3c>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <set_hwConfig+0x3e>
    2a5a:	ed b7       	in	r30, 0x3d	; 61
    2a5c:	fe b7       	in	r31, 0x3e	; 62
    2a5e:	31 96       	adiw	r30, 0x01	; 1
    2a60:	ad b7       	in	r26, 0x3d	; 61
    2a62:	be b7       	in	r27, 0x3e	; 62
    2a64:	11 96       	adiw	r26, 0x01	; 1
    2a66:	8d 93       	st	X+, r24
    2a68:	9c 93       	st	X, r25
    2a6a:	12 97       	sbiw	r26, 0x02	; 2
    2a6c:	8c e5       	ldi	r24, 0x5C	; 92
    2a6e:	90 e2       	ldi	r25, 0x20	; 32
    2a70:	0d c0       	rjmp	.+26     	; 0x2a8c <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <set_hwConfig+0x58>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <set_hwConfig+0x5a>
    2a76:	ed b7       	in	r30, 0x3d	; 61
    2a78:	fe b7       	in	r31, 0x3e	; 62
    2a7a:	31 96       	adiw	r30, 0x01	; 1
    2a7c:	ad b7       	in	r26, 0x3d	; 61
    2a7e:	be b7       	in	r27, 0x3e	; 62
    2a80:	11 96       	adiw	r26, 0x01	; 1
    2a82:	8d 93       	st	X+, r24
    2a84:	9c 93       	st	X, r25
    2a86:	12 97       	sbiw	r26, 0x02	; 2
    2a88:	89 e6       	ldi	r24, 0x69	; 105
    2a8a:	90 e2       	ldi	r25, 0x20	; 32
    2a8c:	82 83       	std	Z+2, r24	; 0x02
    2a8e:	93 83       	std	Z+3, r25	; 0x03
    2a90:	24 83       	std	Z+4, r18	; 0x04
    2a92:	15 82       	std	Z+5, r1	; 0x05
    2a94:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <sprintf>
    2a98:	ed b7       	in	r30, 0x3d	; 61
    2a9a:	fe b7       	in	r31, 0x3e	; 62
    2a9c:	36 96       	adiw	r30, 0x06	; 6
    2a9e:	ed bf       	out	0x3d, r30	; 61
    2aa0:	fe bf       	out	0x3e, r31	; 62
    else
        xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    2aa2:	83 e0       	ldi	r24, 0x03	; 3
    2aa4:	98 e2       	ldi	r25, 0x28	; 40
    2aa6:	6d ef       	ldi	r22, 0xFD	; 253
    2aa8:	74 e2       	ldi	r23, 0x24	; 36
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
    if (res == FR_OK) {
    2ab0:	88 23       	and	r24, r24
    2ab2:	c9 f5       	brne	.+114    	; 0x2b26 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    2ab4:	53 e0       	ldi	r21, 0x03	; 3
    2ab6:	c5 2e       	mov	r12, r21
    2ab8:	d1 2c       	mov	r13, r1
    2aba:	cc 0e       	add	r12, r28
    2abc:	dd 1e       	adc	r13, r29
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	98 e2       	ldi	r25, 0x28	; 40
    2ac2:	b6 01       	movw	r22, r12
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	9e 01       	movw	r18, r28
    2aca:	2f 5f       	subi	r18, 0xFF	; 255
    2acc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ace:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    2ad2:	88 23       	and	r24, r24
    2ad4:	09 f5       	brne	.+66     	; 0x2b18 <set_hwConfig+0xfc>
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	80 38       	cpi	r24, 0x80	; 128
    2adc:	91 05       	cpc	r25, r1
    2ade:	e1 f4       	brne	.+56     	; 0x2b18 <set_hwConfig+0xfc>
    2ae0:	47 e3       	ldi	r20, 0x37	; 55
    2ae2:	e4 2e       	mov	r14, r20
    2ae4:	47 e2       	ldi	r20, 0x27	; 39
    2ae6:	f4 2e       	mov	r15, r20
    2ae8:	00 e0       	ldi	r16, 0x00	; 0
    2aea:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    2aec:	f6 01       	movw	r30, r12
    2aee:	e0 0f       	add	r30, r16
    2af0:	f1 1f       	adc	r31, r17
    2af2:	60 81       	ld	r22, Z
    2af4:	d7 01       	movw	r26, r14
    2af6:	6d 93       	st	X+, r22
    2af8:	7d 01       	movw	r14, r26
    } else
    xputs(PSTR("Error opening pattern file\n"));

}

void set_hwConfig(uint8_t config_num) {
    2afa:	0f 5f       	subi	r16, 0xFF	; 255
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    2afe:	c8 01       	movw	r24, r16
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	9f 4f       	sbci	r25, 0xFF	; 255
    2b04:	0e 94 32 60 	call	0xc064	; 0xc064 <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2b08:	00 38       	cpi	r16, 0x80	; 128
    2b0a:	11 05       	cpc	r17, r1
    2b0c:	79 f7       	brne	.-34     	; 0x2aec <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	0e 94 32 60 	call	0xc064	; 0xc064 <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	98 e2       	ldi	r25, 0x28	; 40
    2b1c:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    2b20:	82 ec       	ldi	r24, 0xC2	; 194
    2b22:	97 e0       	ldi	r25, 0x07	; 7
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2b26:	8c e8       	ldi	r24, 0x8C	; 140
    2b28:	97 e0       	ldi	r25, 0x07	; 7
    2b2a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    }
}
    2b2e:	ce 57       	subi	r28, 0x7E	; 126
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
    2b32:	e8 e0       	ldi	r30, 0x08	; 8
    2b34:	0c 94 bd 5b 	jmp	0xb77a	; 0xb77a <__epilogue_restores__+0x14>

00002b38 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	0e 94 fe 24 	call	0x49fc	; 0x49fc <digitalToggle>
}
    2b3e:	08 95       	ret

00002b40 <Update_display>:
	
	digitalWrite(1, LOW); // set line low at end of frame write

}

void Update_display(void) {
    2b40:	ef 92       	push	r14
    2b42:	ff 92       	push	r15
    2b44:	0f 93       	push	r16
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    int16_t temp_ADC_val;
	int16_t  X_val, Y_val;

    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    2b4a:	80 91 b7 27 	lds	r24, 0x27B7
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	09 f1       	breq	.+66     	; 0x2b94 <Update_display+0x54>
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	30 f0       	brcs	.+12     	; 0x2b62 <Update_display+0x22>
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <Update_display+0x1c>
    2b5a:	47 c0       	rjmp	.+142    	; 0x2bea <Update_display+0xaa>
    2b5c:	ee 24       	eor	r14, r14
    2b5e:	ff 24       	eor	r15, r15
    2b60:	81 c0       	rjmp	.+258    	; 0x2c64 <Update_display+0x124>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[func_read_index_x];
    2b62:	e0 91 ef 24 	lds	r30, 0x24EF
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    2b66:	20 91 02 28 	lds	r18, 0x2802
    2b6a:	33 27       	eor	r19, r19
    2b6c:	27 fd       	sbrc	r18, 7
    2b6e:	30 95       	com	r19
    2b70:	22 0f       	add	r18, r18
    2b72:	33 1f       	adc	r19, r19
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	ee 0f       	add	r30, r30
    2b78:	ff 1f       	adc	r31, r31
    2b7a:	eb 5d       	subi	r30, 0xDB	; 219
    2b7c:	f7 4d       	sbci	r31, 0xD7	; 215
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	ac 01       	movw	r20, r24
    2b84:	24 9f       	mul	r18, r20
    2b86:	c0 01       	movw	r24, r0
    2b88:	25 9f       	mul	r18, r21
    2b8a:	90 0d       	add	r25, r0
    2b8c:	34 9f       	mul	r19, r20
    2b8e:	90 0d       	add	r25, r0
    2b90:	11 24       	eor	r1, r1
    2b92:	1d c0       	rjmp	.+58     	; 0x2bce <Update_display+0x8e>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  // 1 volt = 102 frames/sec
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    2b9a:	64 e0       	ldi	r22, 0x04	; 4
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2ba2:	cb 01       	movw	r24, r22
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	6a e0       	ldi	r22, 0x0A	; 10
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2bb4:	80 91 02 28 	lds	r24, 0x2802
    2bb8:	99 27       	eor	r25, r25
    2bba:	87 fd       	sbrc	r24, 7
    2bbc:	90 95       	com	r25
    2bbe:	9c 01       	movw	r18, r24
    2bc0:	62 9f       	mul	r22, r18
    2bc2:	c0 01       	movw	r24, r0
    2bc4:	63 9f       	mul	r22, r19
    2bc6:	90 0d       	add	r25, r0
    2bc8:	72 9f       	mul	r23, r18
    2bca:	90 0d       	add	r25, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	6a e0       	ldi	r22, 0x0A	; 10
    2bd0:	70 e0       	ldi	r23, 0x00	; 0
    2bd2:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	20 91 9b 25 	lds	r18, 0x259B
    2bdc:	45 e0       	ldi	r20, 0x05	; 5
    2bde:	24 02       	muls	r18, r20
    2be0:	90 01       	movw	r18, r0
    2be2:	11 24       	eor	r1, r1
    2be4:	82 0f       	add	r24, r18
    2be6:	93 1f       	adc	r25, r19
    2be8:	38 c0       	rjmp	.+112    	; 0x2c5a <Update_display+0x11a>
            //    X_rate = 256;
            //else if (X_rate < -256)
            //    X_rate = -256;
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4; // 1 volt = 102
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    2bf0:	64 e0       	ldi	r22, 0x04	; 4
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
    2bf4:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2bf8:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[func_read_index_x] + 5*bias_x)/2;
    2bfa:	e0 91 ef 24 	lds	r30, 0x24EF
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	ee 0f       	add	r30, r30
    2c02:	ff 1f       	adc	r31, r31
    2c04:	eb 5d       	subi	r30, 0xDB	; 219
    2c06:	f7 4d       	sbci	r31, 0xD7	; 215
    2c08:	01 90       	ld	r0, Z+
    2c0a:	f0 81       	ld	r31, Z
    2c0c:	e0 2d       	mov	r30, r0
    2c0e:	ee 0f       	add	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	20 91 9b 25 	lds	r18, 0x259B
    2c16:	45 e0       	ldi	r20, 0x05	; 5
    2c18:	24 02       	muls	r18, r20
    2c1a:	90 01       	movw	r18, r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	e2 0f       	add	r30, r18
    2c20:	f3 1f       	adc	r31, r19
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	6a e0       	ldi	r22, 0x0A	; 10
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2c32:	80 91 02 28 	lds	r24, 0x2802
    2c36:	99 27       	eor	r25, r25
    2c38:	87 fd       	sbrc	r24, 7
    2c3a:	90 95       	com	r25
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	64 9f       	mul	r22, r20
    2c40:	c0 01       	movw	r24, r0
    2c42:	65 9f       	mul	r22, r21
    2c44:	90 0d       	add	r25, r0
    2c46:	74 9f       	mul	r23, r20
    2c48:	90 0d       	add	r25, r0
    2c4a:	11 24       	eor	r1, r1
    2c4c:	6a e0       	ldi	r22, 0x0A	; 10
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2c54:	cf 01       	movw	r24, r30
    2c56:	86 0f       	add	r24, r22
    2c58:	97 1f       	adc	r25, r23
    2c5a:	62 e0       	ldi	r22, 0x02	; 2
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2c62:	7b 01       	movw	r14, r22
            break;
    }

	
    
    switch(y_mode) {
    2c64:	80 91 01 28 	lds	r24, 0x2801
    2c68:	81 30       	cpi	r24, 0x01	; 1
    2c6a:	09 f1       	breq	.+66     	; 0x2cae <Update_display+0x16e>
    2c6c:	81 30       	cpi	r24, 0x01	; 1
    2c6e:	30 f0       	brcs	.+12     	; 0x2c7c <Update_display+0x13c>
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <Update_display+0x136>
    2c74:	47 c0       	rjmp	.+142    	; 0x2d04 <Update_display+0x1c4>
    2c76:	c0 e0       	ldi	r28, 0x00	; 0
    2c78:	d0 e0       	ldi	r29, 0x00	; 0
    2c7a:	81 c0       	rjmp	.+258    	; 0x2d7e <Update_display+0x23e>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[func_read_index_y];
    2c7c:	e0 91 f0 24 	lds	r30, 0x24F0
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    2c80:	20 91 bb 27 	lds	r18, 0x27BB
    2c84:	33 27       	eor	r19, r19
    2c86:	27 fd       	sbrc	r18, 7
    2c88:	30 95       	com	r19
    2c8a:	22 0f       	add	r18, r18
    2c8c:	33 1f       	adc	r19, r19
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	ee 0f       	add	r30, r30
    2c92:	ff 1f       	adc	r31, r31
    2c94:	e2 55       	subi	r30, 0x52	; 82
    2c96:	fa 4d       	sbci	r31, 0xDA	; 218
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	ac 01       	movw	r20, r24
    2c9e:	24 9f       	mul	r18, r20
    2ca0:	c0 01       	movw	r24, r0
    2ca2:	25 9f       	mul	r18, r21
    2ca4:	90 0d       	add	r25, r0
    2ca6:	34 9f       	mul	r19, r20
    2ca8:	90 0d       	add	r25, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	1d c0       	rjmp	.+58     	; 0x2ce8 <Update_display+0x1a8>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102fps
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    2cb4:	64 e0       	ldi	r22, 0x04	; 4
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2cbc:	cb 01       	movw	r24, r22
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	6a e0       	ldi	r22, 0x0A	; 10
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2cce:	80 91 bb 27 	lds	r24, 0x27BB
    2cd2:	99 27       	eor	r25, r25
    2cd4:	87 fd       	sbrc	r24, 7
    2cd6:	90 95       	com	r25
    2cd8:	9c 01       	movw	r18, r24
    2cda:	62 9f       	mul	r22, r18
    2cdc:	c0 01       	movw	r24, r0
    2cde:	63 9f       	mul	r22, r19
    2ce0:	90 0d       	add	r25, r0
    2ce2:	72 9f       	mul	r23, r18
    2ce4:	90 0d       	add	r25, r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	6a e0       	ldi	r22, 0x0A	; 10
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	20 91 d2 2b 	lds	r18, 0x2BD2
    2cf6:	45 e0       	ldi	r20, 0x05	; 5
    2cf8:	24 02       	muls	r18, r20
    2cfa:	90 01       	movw	r18, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	82 0f       	add	r24, r18
    2d00:	93 1f       	adc	r25, r19
    2d02:	38 c0       	rjmp	.+112    	; 0x2d74 <Update_display+0x234>
            //else if (Y_rate < -256)
            //    Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    2d0a:	64 e0       	ldi	r22, 0x04	; 4
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2d12:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[func_read_index_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    2d14:	e0 91 f0 24 	lds	r30, 0x24F0
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	ee 0f       	add	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	e2 55       	subi	r30, 0x52	; 82
    2d20:	fa 4d       	sbci	r31, 0xDA	; 218
    2d22:	01 90       	ld	r0, Z+
    2d24:	f0 81       	ld	r31, Z
    2d26:	e0 2d       	mov	r30, r0
    2d28:	ee 0f       	add	r30, r30
    2d2a:	ff 1f       	adc	r31, r31
    2d2c:	20 91 d2 2b 	lds	r18, 0x2BD2
    2d30:	45 e0       	ldi	r20, 0x05	; 5
    2d32:	24 02       	muls	r18, r20
    2d34:	90 01       	movw	r18, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	e2 0f       	add	r30, r18
    2d3a:	f3 1f       	adc	r31, r19
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	6a e0       	ldi	r22, 0x0A	; 10
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2d4c:	80 91 bb 27 	lds	r24, 0x27BB
    2d50:	99 27       	eor	r25, r25
    2d52:	87 fd       	sbrc	r24, 7
    2d54:	90 95       	com	r25
    2d56:	ac 01       	movw	r20, r24
    2d58:	64 9f       	mul	r22, r20
    2d5a:	c0 01       	movw	r24, r0
    2d5c:	65 9f       	mul	r22, r21
    2d5e:	90 0d       	add	r25, r0
    2d60:	74 9f       	mul	r23, r20
    2d62:	90 0d       	add	r25, r0
    2d64:	11 24       	eor	r1, r1
    2d66:	6a e0       	ldi	r22, 0x0A	; 10
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2d6e:	cf 01       	movw	r24, r30
    2d70:	86 0f       	add	r24, r22
    2d72:	97 1f       	adc	r25, r23
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	0e 94 47 5b 	call	0xb68e	; 0xb68e <__divmodhi4>
    2d7c:	eb 01       	movw	r28, r22
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    2d7e:	80 91 9c 20 	lds	r24, 0x209C
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	59 f1       	breq	.+86     	; 0x2ddc <Update_display+0x29c>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    2d86:	1e 14       	cp	r1, r14
    2d88:	1f 04       	cpc	r1, r15
    2d8a:	74 f4       	brge	.+28     	; 0x2da8 <Update_display+0x268>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2d8c:	97 01       	movw	r18, r14
    2d8e:	44 27       	eor	r20, r20
    2d90:	37 fd       	sbrc	r19, 7
    2d92:	40 95       	com	r20
    2d94:	54 2f       	mov	r21, r20
    2d96:	62 e1       	ldi	r22, 0x12	; 18
    2d98:	7a e7       	ldi	r23, 0x7A	; 122
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2da2:	8c e6       	ldi	r24, 0x6C	; 108
    2da4:	99 e0       	ldi	r25, 0x09	; 9
    2da6:	13 c0       	rjmp	.+38     	; 0x2dce <Update_display+0x28e>
    else if (X_rate < 0)
    2da8:	e1 14       	cp	r14, r1
    2daa:	f1 04       	cpc	r15, r1
    2dac:	c9 f0       	breq	.+50     	; 0x2de0 <Update_display+0x2a0>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2dae:	22 27       	eor	r18, r18
    2db0:	33 27       	eor	r19, r19
    2db2:	2e 19       	sub	r18, r14
    2db4:	3f 09       	sbc	r19, r15
    2db6:	44 27       	eor	r20, r20
    2db8:	37 fd       	sbrc	r19, 7
    2dba:	40 95       	com	r20
    2dbc:	54 2f       	mov	r21, r20
    2dbe:	62 e1       	ldi	r22, 0x12	; 18
    2dc0:	7a e7       	ldi	r23, 0x7A	; 122
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2dca:	80 ee       	ldi	r24, 0xE0	; 224
    2dcc:	99 e0       	ldi	r25, 0x09	; 9
    2dce:	ba 01       	movw	r22, r20
    2dd0:	a9 01       	movw	r20, r18
    2dd2:	22 e0       	ldi	r18, 0x02	; 2
    2dd4:	01 e0       	ldi	r16, 0x01	; 1
    2dd6:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <Update_Reg_Handler>
    2dda:	0e c0       	rjmp	.+28     	; 0x2df8 <Update_display+0x2b8>
    2ddc:	c0 e0       	ldi	r28, 0x00	; 0
    2dde:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    2de0:	80 ee       	ldi	r24, 0xE0	; 224
    2de2:	99 e0       	ldi	r25, 0x09	; 9
    2de4:	4e e4       	ldi	r20, 0x4E	; 78
    2de6:	50 e0       	ldi	r21, 0x00	; 0
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	22 e0       	ldi	r18, 0x02	; 2
    2dee:	00 e0       	ldi	r16, 0x00	; 0
    2df0:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <Update_Reg_Handler>
    2df4:	ee 24       	eor	r14, r14
    2df6:	ff 24       	eor	r15, r15
    
    
    if (Y_rate > 0)
    2df8:	1c 16       	cp	r1, r28
    2dfa:	1d 06       	cpc	r1, r29
    2dfc:	74 f4       	brge	.+28     	; 0x2e1a <Update_display+0x2da>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2dfe:	9e 01       	movw	r18, r28
    2e00:	44 27       	eor	r20, r20
    2e02:	37 fd       	sbrc	r19, 7
    2e04:	40 95       	com	r20
    2e06:	54 2f       	mov	r21, r20
    2e08:	62 e1       	ldi	r22, 0x12	; 18
    2e0a:	7a e7       	ldi	r23, 0x7A	; 122
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2e14:	84 ea       	ldi	r24, 0xA4	; 164
    2e16:	99 e0       	ldi	r25, 0x09	; 9
    2e18:	12 c0       	rjmp	.+36     	; 0x2e3e <Update_display+0x2fe>
    else if (Y_rate < 0)
    2e1a:	20 97       	sbiw	r28, 0x00	; 0
    2e1c:	a9 f0       	breq	.+42     	; 0x2e48 <Update_display+0x308>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2e1e:	22 27       	eor	r18, r18
    2e20:	33 27       	eor	r19, r19
    2e22:	2c 1b       	sub	r18, r28
    2e24:	3d 0b       	sbc	r19, r29
    2e26:	44 27       	eor	r20, r20
    2e28:	37 fd       	sbrc	r19, 7
    2e2a:	40 95       	com	r20
    2e2c:	54 2f       	mov	r21, r20
    2e2e:	62 e1       	ldi	r22, 0x12	; 18
    2e30:	7a e7       	ldi	r23, 0x7A	; 122
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    2e3a:	88 e1       	ldi	r24, 0x18	; 24
    2e3c:	9a e0       	ldi	r25, 0x0A	; 10
    2e3e:	ba 01       	movw	r22, r20
    2e40:	a9 01       	movw	r20, r18
    2e42:	23 e0       	ldi	r18, 0x03	; 3
    2e44:	01 e0       	ldi	r16, 0x01	; 1
    2e46:	08 c0       	rjmp	.+16     	; 0x2e58 <Update_display+0x318>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    2e48:	88 e1       	ldi	r24, 0x18	; 24
    2e4a:	9a e0       	ldi	r25, 0x0A	; 10
    2e4c:	4e e4       	ldi	r20, 0x4E	; 78
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	23 e0       	ldi	r18, 0x03	; 3
    2e56:	00 e0       	ldi	r16, 0x00	; 0
    2e58:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    2e5c:	10 92 e9 24 	sts	0x24E9, r1
    2e60:	ec 16       	cp	r14, r28
    2e62:	fd 06       	cpc	r15, r29
    2e64:	1c f0       	brlt	.+6      	; 0x2e6c <Update_display+0x32c>
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	80 93 e9 24 	sts	0x24E9, r24
}
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	0f 91       	pop	r16
    2e72:	ff 90       	pop	r15
    2e74:	ef 90       	pop	r14
    2e76:	08 95       	ret

00002e78 <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    2e78:	a1 e0       	ldi	r26, 0x01	; 1
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e2 e4       	ldi	r30, 0x42	; 66
    2e7e:	f7 e1       	ldi	r31, 0x17	; 23
    2e80:	0c 94 9f 5b 	jmp	0xb73e	; 0xb73e <__prologue_saves__+0x10>
    2e84:	5c 01       	movw	r10, r24
    //The first two bytes are the x_dac_val, only support positive number 
    //The second two bytes are the y_dac_val, only support positive number 
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    2e86:	fc 01       	movw	r30, r24
    2e88:	e0 80       	ld	r14, Z
    2e8a:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    2e8c:	c2 80       	ldd	r12, Z+2	; 0x02
    2e8e:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    2e90:	84 81       	ldd	r24, Z+4	; 0x04
    2e92:	80 93 ec 24 	sts	0x24EC, r24
    gs_value =msg_buffer[5];
    2e96:	95 81       	ldd	r25, Z+5	; 0x05
    2e98:	90 93 35 27 	sts	0x2735, r25
    row_compress = msg_buffer[6];
    2e9c:	86 81       	ldd	r24, Z+6	; 0x06
    2e9e:	80 93 ad 25 	sts	0x25AD, r24


    if (row_compress)
    2ea2:	88 23       	and	r24, r24
    2ea4:	19 f0       	breq	.+6      	; 0x2eac <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    2ea6:	90 93 b8 27 	sts	0x27B8, r25
    2eaa:	09 c0       	rjmp	.+18     	; 0x2ebe <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    2eac:	89 2f       	mov	r24, r25
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	e3 e0       	ldi	r30, 0x03	; 3
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	ea 95       	dec	r30
    2eb8:	e1 f7       	brne	.-8      	; 0x2eb2 <display_dumped_frame+0x3a>
    2eba:	80 93 b8 27 	sts	0x27B8, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    2ebe:	10 92 e8 24 	sts	0x24E8, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	0e 94 dd 24 	call	0x49ba	; 0x49ba <digitalWrite>
    2eca:	91 e0       	ldi	r25, 0x01	; 1
    2ecc:	07 e0       	ldi	r16, 0x07	; 7
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	0f c0       	rjmp	.+30     	; 0x2ef0 <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    2ed2:	a5 01       	movw	r20, r10
    2ed4:	40 0f       	add	r20, r16
    2ed6:	51 1f       	adc	r21, r17
    2ed8:	89 2f       	mov	r24, r25
    2eda:	60 91 b8 27 	lds	r22, 0x27B8
    2ede:	99 83       	std	Y+1, r25	; 0x01
    2ee0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    2ee4:	80 91 b8 27 	lds	r24, 0x27B8
    2ee8:	08 0f       	add	r16, r24
    2eea:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2eec:	99 81       	ldd	r25, Y+1	; 0x01
    2eee:	9f 5f       	subi	r25, 0xFF	; 255
    2ef0:	80 91 ec 24 	lds	r24, 0x24EC
    2ef4:	89 17       	cp	r24, r25
    2ef6:	68 f7       	brcc	.-38     	; 0x2ed2 <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    2ef8:	7f 2d       	mov	r23, r15
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	6e 0d       	add	r22, r14
    2efe:	71 1d       	adc	r23, r1
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    2f06:	7d 2d       	mov	r23, r13
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	6c 0d       	add	r22, r12
    2f0c:	71 1d       	adc	r23, r1
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	0e 94 dd 24 	call	0x49ba	; 0x49ba <digitalWrite>
}
    2f1c:	21 96       	adiw	r28, 0x01	; 1
    2f1e:	ea e0       	ldi	r30, 0x0A	; 10
    2f20:	0c 94 bb 5b 	jmp	0xb776	; 0xb776 <__epilogue_restores__+0x10>

00002f24 <fetch_display_frame>:


void fetch_display_frame(uint16_t f_num, uint16_t Xindex, uint16_t Yindex){
    2f24:	2f 92       	push	r2
    2f26:	3f 92       	push	r3
    2f28:	4f 92       	push	r4
    2f2a:	5f 92       	push	r5
    2f2c:	6f 92       	push	r6
    2f2e:	7f 92       	push	r7
    2f30:	9f 92       	push	r9
    2f32:	af 92       	push	r10
    2f34:	bf 92       	push	r11
    2f36:	cf 92       	push	r12
    2f38:	df 92       	push	r13
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	28 97       	sbiw	r28, 0x08	; 8
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	de bf       	out	0x3e, r29	; 62
    2f50:	5c 01       	movw	r10, r24
    2f52:	2b 01       	movw	r4, r22
    2f54:	1a 01       	movw	r2, r20
			digitalWrite(0, HIGH);   // turn on laser
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write

}
    2f56:	8d b7       	in	r24, 0x3d	; 61
    2f58:	9e b7       	in	r25, 0x3e	; 62
    2f5a:	8f 83       	std	Y+7, r24	; 0x07
    2f5c:	98 87       	std	Y+8, r25	; 0x08
    uint8_t *FLASH;
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    2f5e:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
	uint8_t tempVal, bitIndex, arrayIndex;
    
    digitalWrite(1, HIGH); // set line high at start of frame write
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	0e 94 dd 24 	call	0x49ba	; 0x49ba <digitalWrite>
    len = num_panels * bytes_per_panel_frame;
    2f68:	80 91 b8 27 	lds	r24, 0x27B8
    2f6c:	90 91 ec 24 	lds	r25, 0x24EC
    2f70:	89 9f       	mul	r24, r25
    2f72:	60 01       	movw	r12, r0
    2f74:	11 24       	eor	r1, r1
	
	if (len%512 != 0)
    2f76:	c6 01       	movw	r24, r12
    2f78:	91 70       	andi	r25, 0x01	; 1
    2f7a:	6d 2d       	mov	r22, r13
    2f7c:	66 95       	lsr	r22
    2f7e:	89 2b       	or	r24, r25
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <fetch_display_frame+0x60>
		block_per_frame = len/512 + 1;
    2f82:	6f 5f       	subi	r22, 0xFF	; 255
	else
		block_per_frame = len/512;  //for gs=4 and rc=0
		
		
    uint8_t  frameBuff[len];
    2f84:	ad b7       	in	r26, 0x3d	; 61
    2f86:	be b7       	in	r27, 0x3e	; 62
    2f88:	ac 19       	sub	r26, r12
    2f8a:	bd 09       	sbc	r27, r13
    2f8c:	ad bf       	out	0x3d, r26	; 61
    2f8e:	be bf       	out	0x3e, r27	; 62
    2f90:	6d b6       	in	r6, 0x3d	; 61
    2f92:	7e b6       	in	r7, 0x3e	; 62
    2f94:	08 94       	sec
    2f96:	61 1c       	adc	r6, r1
    2f98:	71 1c       	adc	r7, r1
    offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	95 01       	movw	r18, r10
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    2faa:	7b 01       	movw	r14, r22
    2fac:	8c 01       	movw	r16, r24
    2fae:	08 94       	sec
    2fb0:	e1 1c       	adc	r14, r1
    2fb2:	f1 1c       	adc	r15, r1
    2fb4:	01 1d       	adc	r16, r1
    2fb6:	11 1d       	adc	r17, r1
    2fb8:	89 e0       	ldi	r24, 0x09	; 9
    2fba:	ee 0c       	add	r14, r14
    2fbc:	ff 1c       	adc	r15, r15
    2fbe:	00 1f       	adc	r16, r16
    2fc0:	11 1f       	adc	r17, r17
    2fc2:	8a 95       	dec	r24
    2fc4:	d1 f7       	brne	.-12     	; 0x2fba <fetch_display_frame+0x96>

    res = f_lseek(&file1, offset);
    2fc6:	80 e7       	ldi	r24, 0x70	; 112
    2fc8:	99 e2       	ldi	r25, 0x29	; 41
    2fca:	b8 01       	movw	r22, r16
    2fcc:	a7 01       	movw	r20, r14
    2fce:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
    2fd2:	98 2e       	mov	r9, r24
    if ((res == FR_OK) && (file1.fptr == offset)) {
    2fd4:	88 23       	and	r24, r24
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <fetch_display_frame+0xb6>
    2fd8:	e7 c1       	rjmp	.+974    	; 0x33a8 <fetch_display_frame+0x484>
    2fda:	80 91 76 29 	lds	r24, 0x2976
    2fde:	90 91 77 29 	lds	r25, 0x2977
    2fe2:	a0 91 78 29 	lds	r26, 0x2978
    2fe6:	b0 91 79 29 	lds	r27, 0x2979
    2fea:	8e 15       	cp	r24, r14
    2fec:	9f 05       	cpc	r25, r15
    2fee:	a0 07       	cpc	r26, r16
    2ff0:	b1 07       	cpc	r27, r17
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <fetch_display_frame+0xd2>
    2ff4:	d9 c1       	rjmp	.+946    	; 0x33a8 <fetch_display_frame+0x484>
        res = f_read(&file1, frameBuff, len, &cnt);
    2ff6:	80 e7       	ldi	r24, 0x70	; 112
    2ff8:	99 e2       	ldi	r25, 0x29	; 41
    2ffa:	b3 01       	movw	r22, r6
    2ffc:	a6 01       	movw	r20, r12
    2ffe:	9e 01       	movw	r18, r28
    3000:	2f 5f       	subi	r18, 0xFF	; 255
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
    3008:	18 2f       	mov	r17, r24
        if ((res == FR_OK) && (cnt == len)) {	
    300a:	88 23       	and	r24, r24
    300c:	09 f0       	breq	.+2      	; 0x3010 <fetch_display_frame+0xec>
    300e:	a7 c1       	rjmp	.+846    	; 0x335e <fetch_display_frame+0x43a>
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	8c 15       	cp	r24, r12
    3016:	9d 05       	cpc	r25, r13
    3018:	09 f0       	breq	.+2      	; 0x301c <fetch_display_frame+0xf8>
    301a:	a1 c1       	rjmp	.+834    	; 0x335e <fetch_display_frame+0x43a>
		
            if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    301c:	80 91 e8 24 	lds	r24, 0x24E8
    3020:	82 30       	cpi	r24, 0x02	; 2
    3022:	18 f0       	brcs	.+6      	; 0x302a <fetch_display_frame+0x106>
                ledToggle(1);    //toggle LED 1
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <ledToggle>
            }
            
            display_flag = 0;  //clear the display flag
    302a:	10 92 e8 24 	sts	0x24E8, r1
    302e:	dd 24       	eor	r13, r13
    3030:	d3 94       	inc	r13
    3032:	ee 24       	eor	r14, r14
    3034:	ff 24       	eor	r15, r15
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
                                                        gscale[0] = FLASH[0];
                                                        gscale[1] = FLASH[8];
                                                        gscale[2] = FLASH[16];
                                                        gscale[3] = FLASH[24];
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    3036:	b3 e0       	ldi	r27, 0x03	; 3
    3038:	ab 2e       	mov	r10, r27
    303a:	b1 2c       	mov	r11, r1
    303c:	ac 0e       	add	r10, r28
    303e:	bd 1e       	adc	r11, r29
    3040:	88 c1       	rjmp	.+784    	; 0x3352 <fetch_display_frame+0x42e>
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
				FLASH = &frameBuff[buff_index];
    3042:	83 01       	movw	r16, r6
    3044:	0e 0d       	add	r16, r14
    3046:	1f 1d       	adc	r17, r15
				buff_index = buff_index + bytes_per_panel_frame;
    3048:	c0 90 b8 27 	lds	r12, 0x27B8

                packet_sent = 0; //used with compression to simplify coniditionals.
                if (ident_compress == 1) {
    304c:	80 91 9f 29 	lds	r24, 0x299F
    3050:	81 30       	cpi	r24, 0x01	; 1
    3052:	09 f0       	breq	.+2      	; 0x3056 <fetch_display_frame+0x132>
    3054:	75 c1       	rjmp	.+746    	; 0x3340 <fetch_display_frame+0x41c>
                    if (bytes_per_panel_frame == 8){
    3056:	b8 e0       	ldi	r27, 0x08	; 8
    3058:	cb 16       	cp	r12, r27
    305a:	f1 f4       	brne	.+60     	; 0x3098 <fetch_display_frame+0x174>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    305c:	f8 01       	movw	r30, r16
    305e:	90 81       	ld	r25, Z
    3060:	81 81       	ldd	r24, Z+1	; 0x01
    3062:	98 17       	cp	r25, r24
    3064:	c9 f4       	brne	.+50     	; 0x3098 <fetch_display_frame+0x174>
    3066:	42 81       	ldd	r20, Z+2	; 0x02
    3068:	83 81       	ldd	r24, Z+3	; 0x03
    306a:	48 17       	cp	r20, r24
    306c:	a9 f4       	brne	.+42     	; 0x3098 <fetch_display_frame+0x174>
    306e:	34 81       	ldd	r19, Z+4	; 0x04
    3070:	85 81       	ldd	r24, Z+5	; 0x05
    3072:	38 17       	cp	r19, r24
    3074:	89 f4       	brne	.+34     	; 0x3098 <fetch_display_frame+0x174>
    3076:	26 81       	ldd	r18, Z+6	; 0x06
    3078:	87 81       	ldd	r24, Z+7	; 0x07
    307a:	28 17       	cp	r18, r24
    307c:	69 f4       	brne	.+26     	; 0x3098 <fetch_display_frame+0x174>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    307e:	94 17       	cp	r25, r20
    3080:	59 f4       	brne	.+22     	; 0x3098 <fetch_display_frame+0x174>
    3082:	93 17       	cp	r25, r19
    3084:	49 f4       	brne	.+18     	; 0x3098 <fetch_display_frame+0x174>
    3086:	92 17       	cp	r25, r18
    3088:	39 f4       	brne	.+14     	; 0x3098 <fetch_display_frame+0x174>
                                i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    308a:	8d 2d       	mov	r24, r13
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	a8 01       	movw	r20, r16
    3090:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    3094:	51 e0       	ldi	r21, 0x01	; 1
    3096:	01 c0       	rjmp	.+2      	; 0x309a <fetch_display_frame+0x176>
    3098:	50 e0       	ldi	r21, 0x00	; 0
                                packet_sent = 1;
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 8
                    
                    if (bytes_per_panel_frame == 24){
    309a:	80 91 b8 27 	lds	r24, 0x27B8
    309e:	88 31       	cpi	r24, 0x18	; 24
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <fetch_display_frame+0x180>
    30a2:	8c c0       	rjmp	.+280    	; 0x31bc <fetch_display_frame+0x298>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    30a4:	f3 01       	movw	r30, r6
    30a6:	ee 0d       	add	r30, r14
    30a8:	ff 1d       	adc	r31, r15
    30aa:	e0 81       	ld	r30, Z
    30ac:	d8 01       	movw	r26, r16
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	8c 91       	ld	r24, X
    30b2:	11 97       	sbiw	r26, 0x01	; 1
    30b4:	e8 17       	cp	r30, r24
    30b6:	09 f0       	breq	.+2      	; 0x30ba <fetch_display_frame+0x196>
    30b8:	81 c0       	rjmp	.+258    	; 0x31bc <fetch_display_frame+0x298>
    30ba:	12 96       	adiw	r26, 0x02	; 2
    30bc:	3c 91       	ld	r19, X
    30be:	12 97       	sbiw	r26, 0x02	; 2
    30c0:	13 96       	adiw	r26, 0x03	; 3
    30c2:	8c 91       	ld	r24, X
    30c4:	13 97       	sbiw	r26, 0x03	; 3
    30c6:	38 17       	cp	r19, r24
    30c8:	09 f0       	breq	.+2      	; 0x30cc <fetch_display_frame+0x1a8>
    30ca:	78 c0       	rjmp	.+240    	; 0x31bc <fetch_display_frame+0x298>
    30cc:	14 96       	adiw	r26, 0x04	; 4
    30ce:	2c 91       	ld	r18, X
    30d0:	14 97       	sbiw	r26, 0x04	; 4
    30d2:	15 96       	adiw	r26, 0x05	; 5
    30d4:	8c 91       	ld	r24, X
    30d6:	15 97       	sbiw	r26, 0x05	; 5
    30d8:	28 17       	cp	r18, r24
    30da:	09 f0       	breq	.+2      	; 0x30de <fetch_display_frame+0x1ba>
    30dc:	6f c0       	rjmp	.+222    	; 0x31bc <fetch_display_frame+0x298>
    30de:	16 96       	adiw	r26, 0x06	; 6
    30e0:	9c 91       	ld	r25, X
    30e2:	16 97       	sbiw	r26, 0x06	; 6
    30e4:	17 96       	adiw	r26, 0x07	; 7
    30e6:	8c 91       	ld	r24, X
    30e8:	17 97       	sbiw	r26, 0x07	; 7
    30ea:	98 17       	cp	r25, r24
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <fetch_display_frame+0x1cc>
    30ee:	66 c0       	rjmp	.+204    	; 0x31bc <fetch_display_frame+0x298>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    30f0:	e3 17       	cp	r30, r19
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <fetch_display_frame+0x1d2>
    30f4:	63 c0       	rjmp	.+198    	; 0x31bc <fetch_display_frame+0x298>
    30f6:	e2 17       	cp	r30, r18
    30f8:	09 f0       	breq	.+2      	; 0x30fc <fetch_display_frame+0x1d8>
    30fa:	60 c0       	rjmp	.+192    	; 0x31bc <fetch_display_frame+0x298>
    30fc:	e9 17       	cp	r30, r25
    30fe:	09 f0       	breq	.+2      	; 0x3102 <fetch_display_frame+0x1de>
    3100:	5d c0       	rjmp	.+186    	; 0x31bc <fetch_display_frame+0x298>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    3102:	18 96       	adiw	r26, 0x08	; 8
    3104:	9c 91       	ld	r25, X
    3106:	18 97       	sbiw	r26, 0x08	; 8
    3108:	19 96       	adiw	r26, 0x09	; 9
    310a:	8c 91       	ld	r24, X
    310c:	19 97       	sbiw	r26, 0x09	; 9
    310e:	98 17       	cp	r25, r24
    3110:	09 f0       	breq	.+2      	; 0x3114 <fetch_display_frame+0x1f0>
    3112:	54 c0       	rjmp	.+168    	; 0x31bc <fetch_display_frame+0x298>
    3114:	1a 96       	adiw	r26, 0x0a	; 10
    3116:	4c 91       	ld	r20, X
    3118:	1a 97       	sbiw	r26, 0x0a	; 10
    311a:	1b 96       	adiw	r26, 0x0b	; 11
    311c:	8c 91       	ld	r24, X
    311e:	1b 97       	sbiw	r26, 0x0b	; 11
    3120:	48 17       	cp	r20, r24
    3122:	09 f0       	breq	.+2      	; 0x3126 <fetch_display_frame+0x202>
    3124:	4b c0       	rjmp	.+150    	; 0x31bc <fetch_display_frame+0x298>
    3126:	1c 96       	adiw	r26, 0x0c	; 12
    3128:	3c 91       	ld	r19, X
    312a:	1c 97       	sbiw	r26, 0x0c	; 12
    312c:	1d 96       	adiw	r26, 0x0d	; 13
    312e:	8c 91       	ld	r24, X
    3130:	1d 97       	sbiw	r26, 0x0d	; 13
    3132:	38 17       	cp	r19, r24
    3134:	09 f0       	breq	.+2      	; 0x3138 <fetch_display_frame+0x214>
    3136:	42 c0       	rjmp	.+132    	; 0x31bc <fetch_display_frame+0x298>
    3138:	1e 96       	adiw	r26, 0x0e	; 14
    313a:	2c 91       	ld	r18, X
    313c:	1e 97       	sbiw	r26, 0x0e	; 14
    313e:	1f 96       	adiw	r26, 0x0f	; 15
    3140:	8c 91       	ld	r24, X
    3142:	1f 97       	sbiw	r26, 0x0f	; 15
    3144:	28 17       	cp	r18, r24
    3146:	d1 f5       	brne	.+116    	; 0x31bc <fetch_display_frame+0x298>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    3148:	94 17       	cp	r25, r20
    314a:	c1 f5       	brne	.+112    	; 0x31bc <fetch_display_frame+0x298>
    314c:	93 17       	cp	r25, r19
    314e:	b1 f5       	brne	.+108    	; 0x31bc <fetch_display_frame+0x298>
    3150:	92 17       	cp	r25, r18
    3152:	a1 f5       	brne	.+104    	; 0x31bc <fetch_display_frame+0x298>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    3154:	50 96       	adiw	r26, 0x10	; 16
    3156:	9c 91       	ld	r25, X
    3158:	50 97       	sbiw	r26, 0x10	; 16
    315a:	51 96       	adiw	r26, 0x11	; 17
    315c:	8c 91       	ld	r24, X
    315e:	51 97       	sbiw	r26, 0x11	; 17
    3160:	98 17       	cp	r25, r24
    3162:	61 f5       	brne	.+88     	; 0x31bc <fetch_display_frame+0x298>
    3164:	52 96       	adiw	r26, 0x12	; 18
    3166:	4c 91       	ld	r20, X
    3168:	52 97       	sbiw	r26, 0x12	; 18
    316a:	53 96       	adiw	r26, 0x13	; 19
    316c:	8c 91       	ld	r24, X
    316e:	53 97       	sbiw	r26, 0x13	; 19
    3170:	48 17       	cp	r20, r24
    3172:	21 f5       	brne	.+72     	; 0x31bc <fetch_display_frame+0x298>
    3174:	54 96       	adiw	r26, 0x14	; 20
    3176:	3c 91       	ld	r19, X
    3178:	54 97       	sbiw	r26, 0x14	; 20
    317a:	55 96       	adiw	r26, 0x15	; 21
    317c:	8c 91       	ld	r24, X
    317e:	55 97       	sbiw	r26, 0x15	; 21
    3180:	38 17       	cp	r19, r24
    3182:	e1 f4       	brne	.+56     	; 0x31bc <fetch_display_frame+0x298>
    3184:	56 96       	adiw	r26, 0x16	; 22
    3186:	2c 91       	ld	r18, X
    3188:	56 97       	sbiw	r26, 0x16	; 22
    318a:	57 96       	adiw	r26, 0x17	; 23
    318c:	8c 91       	ld	r24, X
    318e:	57 97       	sbiw	r26, 0x17	; 23
    3190:	28 17       	cp	r18, r24
    3192:	a1 f4       	brne	.+40     	; 0x31bc <fetch_display_frame+0x298>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    3194:	94 17       	cp	r25, r20
    3196:	91 f4       	brne	.+36     	; 0x31bc <fetch_display_frame+0x298>
    3198:	93 17       	cp	r25, r19
    319a:	81 f4       	brne	.+32     	; 0x31bc <fetch_display_frame+0x298>
    319c:	92 17       	cp	r25, r18
    319e:	71 f4       	brne	.+28     	; 0x31bc <fetch_display_frame+0x298>
                                                gscale[0] = FLASH[0];
    31a0:	eb 83       	std	Y+3, r30	; 0x03
                                                gscale[1] = FLASH[8];
    31a2:	18 96       	adiw	r26, 0x08	; 8
    31a4:	8c 91       	ld	r24, X
    31a6:	18 97       	sbiw	r26, 0x08	; 8
    31a8:	8c 83       	std	Y+4, r24	; 0x04
                                                gscale[2] = FLASH[16];
    31aa:	50 96       	adiw	r26, 0x10	; 16
    31ac:	8c 91       	ld	r24, X
    31ae:	8d 83       	std	Y+5, r24	; 0x05
                                                i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    31b0:	8d 2d       	mov	r24, r13
    31b2:	63 e0       	ldi	r22, 0x03	; 3
    31b4:	a5 01       	movw	r20, r10
    31b6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    31ba:	51 e0       	ldi	r21, 0x01	; 1
                                } //end of third round of comparisons
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 24
                    
                    if (bytes_per_panel_frame == 32){
    31bc:	80 91 b8 27 	lds	r24, 0x27B8
    31c0:	80 32       	cpi	r24, 0x20	; 32
    31c2:	09 f0       	breq	.+2      	; 0x31c6 <fetch_display_frame+0x2a2>
    31c4:	bb c0       	rjmp	.+374    	; 0x333c <fetch_display_frame+0x418>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    31c6:	f3 01       	movw	r30, r6
    31c8:	ee 0d       	add	r30, r14
    31ca:	ff 1d       	adc	r31, r15
    31cc:	e0 81       	ld	r30, Z
    31ce:	d8 01       	movw	r26, r16
    31d0:	11 96       	adiw	r26, 0x01	; 1
    31d2:	8c 91       	ld	r24, X
    31d4:	11 97       	sbiw	r26, 0x01	; 1
    31d6:	e8 17       	cp	r30, r24
    31d8:	09 f0       	breq	.+2      	; 0x31dc <fetch_display_frame+0x2b8>
    31da:	b0 c0       	rjmp	.+352    	; 0x333c <fetch_display_frame+0x418>
    31dc:	12 96       	adiw	r26, 0x02	; 2
    31de:	3c 91       	ld	r19, X
    31e0:	12 97       	sbiw	r26, 0x02	; 2
    31e2:	13 96       	adiw	r26, 0x03	; 3
    31e4:	8c 91       	ld	r24, X
    31e6:	13 97       	sbiw	r26, 0x03	; 3
    31e8:	38 17       	cp	r19, r24
    31ea:	09 f0       	breq	.+2      	; 0x31ee <fetch_display_frame+0x2ca>
    31ec:	a7 c0       	rjmp	.+334    	; 0x333c <fetch_display_frame+0x418>
    31ee:	14 96       	adiw	r26, 0x04	; 4
    31f0:	2c 91       	ld	r18, X
    31f2:	14 97       	sbiw	r26, 0x04	; 4
    31f4:	15 96       	adiw	r26, 0x05	; 5
    31f6:	8c 91       	ld	r24, X
    31f8:	15 97       	sbiw	r26, 0x05	; 5
    31fa:	28 17       	cp	r18, r24
    31fc:	09 f0       	breq	.+2      	; 0x3200 <fetch_display_frame+0x2dc>
    31fe:	9e c0       	rjmp	.+316    	; 0x333c <fetch_display_frame+0x418>
    3200:	16 96       	adiw	r26, 0x06	; 6
    3202:	9c 91       	ld	r25, X
    3204:	16 97       	sbiw	r26, 0x06	; 6
    3206:	17 96       	adiw	r26, 0x07	; 7
    3208:	8c 91       	ld	r24, X
    320a:	17 97       	sbiw	r26, 0x07	; 7
    320c:	98 17       	cp	r25, r24
    320e:	09 f0       	breq	.+2      	; 0x3212 <fetch_display_frame+0x2ee>
    3210:	95 c0       	rjmp	.+298    	; 0x333c <fetch_display_frame+0x418>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    3212:	e3 17       	cp	r30, r19
    3214:	09 f0       	breq	.+2      	; 0x3218 <fetch_display_frame+0x2f4>
    3216:	92 c0       	rjmp	.+292    	; 0x333c <fetch_display_frame+0x418>
    3218:	e2 17       	cp	r30, r18
    321a:	09 f0       	breq	.+2      	; 0x321e <fetch_display_frame+0x2fa>
    321c:	8f c0       	rjmp	.+286    	; 0x333c <fetch_display_frame+0x418>
    321e:	e9 17       	cp	r30, r25
    3220:	09 f0       	breq	.+2      	; 0x3224 <fetch_display_frame+0x300>
    3222:	8c c0       	rjmp	.+280    	; 0x333c <fetch_display_frame+0x418>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    3224:	18 96       	adiw	r26, 0x08	; 8
    3226:	9c 91       	ld	r25, X
    3228:	18 97       	sbiw	r26, 0x08	; 8
    322a:	19 96       	adiw	r26, 0x09	; 9
    322c:	8c 91       	ld	r24, X
    322e:	19 97       	sbiw	r26, 0x09	; 9
    3230:	98 17       	cp	r25, r24
    3232:	09 f0       	breq	.+2      	; 0x3236 <fetch_display_frame+0x312>
    3234:	83 c0       	rjmp	.+262    	; 0x333c <fetch_display_frame+0x418>
    3236:	1a 96       	adiw	r26, 0x0a	; 10
    3238:	4c 91       	ld	r20, X
    323a:	1a 97       	sbiw	r26, 0x0a	; 10
    323c:	1b 96       	adiw	r26, 0x0b	; 11
    323e:	8c 91       	ld	r24, X
    3240:	1b 97       	sbiw	r26, 0x0b	; 11
    3242:	48 17       	cp	r20, r24
    3244:	09 f0       	breq	.+2      	; 0x3248 <fetch_display_frame+0x324>
    3246:	7a c0       	rjmp	.+244    	; 0x333c <fetch_display_frame+0x418>
    3248:	1c 96       	adiw	r26, 0x0c	; 12
    324a:	3c 91       	ld	r19, X
    324c:	1c 97       	sbiw	r26, 0x0c	; 12
    324e:	1d 96       	adiw	r26, 0x0d	; 13
    3250:	8c 91       	ld	r24, X
    3252:	1d 97       	sbiw	r26, 0x0d	; 13
    3254:	38 17       	cp	r19, r24
    3256:	09 f0       	breq	.+2      	; 0x325a <fetch_display_frame+0x336>
    3258:	71 c0       	rjmp	.+226    	; 0x333c <fetch_display_frame+0x418>
    325a:	1e 96       	adiw	r26, 0x0e	; 14
    325c:	2c 91       	ld	r18, X
    325e:	1e 97       	sbiw	r26, 0x0e	; 14
    3260:	1f 96       	adiw	r26, 0x0f	; 15
    3262:	8c 91       	ld	r24, X
    3264:	1f 97       	sbiw	r26, 0x0f	; 15
    3266:	28 17       	cp	r18, r24
    3268:	09 f0       	breq	.+2      	; 0x326c <fetch_display_frame+0x348>
    326a:	68 c0       	rjmp	.+208    	; 0x333c <fetch_display_frame+0x418>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    326c:	94 17       	cp	r25, r20
    326e:	09 f0       	breq	.+2      	; 0x3272 <fetch_display_frame+0x34e>
    3270:	65 c0       	rjmp	.+202    	; 0x333c <fetch_display_frame+0x418>
    3272:	93 17       	cp	r25, r19
    3274:	09 f0       	breq	.+2      	; 0x3278 <fetch_display_frame+0x354>
    3276:	62 c0       	rjmp	.+196    	; 0x333c <fetch_display_frame+0x418>
    3278:	92 17       	cp	r25, r18
    327a:	09 f0       	breq	.+2      	; 0x327e <fetch_display_frame+0x35a>
    327c:	5f c0       	rjmp	.+190    	; 0x333c <fetch_display_frame+0x418>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    327e:	50 96       	adiw	r26, 0x10	; 16
    3280:	9c 91       	ld	r25, X
    3282:	50 97       	sbiw	r26, 0x10	; 16
    3284:	51 96       	adiw	r26, 0x11	; 17
    3286:	8c 91       	ld	r24, X
    3288:	51 97       	sbiw	r26, 0x11	; 17
    328a:	98 17       	cp	r25, r24
    328c:	09 f0       	breq	.+2      	; 0x3290 <fetch_display_frame+0x36c>
    328e:	56 c0       	rjmp	.+172    	; 0x333c <fetch_display_frame+0x418>
    3290:	52 96       	adiw	r26, 0x12	; 18
    3292:	4c 91       	ld	r20, X
    3294:	52 97       	sbiw	r26, 0x12	; 18
    3296:	53 96       	adiw	r26, 0x13	; 19
    3298:	8c 91       	ld	r24, X
    329a:	53 97       	sbiw	r26, 0x13	; 19
    329c:	48 17       	cp	r20, r24
    329e:	09 f0       	breq	.+2      	; 0x32a2 <fetch_display_frame+0x37e>
    32a0:	4d c0       	rjmp	.+154    	; 0x333c <fetch_display_frame+0x418>
    32a2:	54 96       	adiw	r26, 0x14	; 20
    32a4:	3c 91       	ld	r19, X
    32a6:	54 97       	sbiw	r26, 0x14	; 20
    32a8:	55 96       	adiw	r26, 0x15	; 21
    32aa:	8c 91       	ld	r24, X
    32ac:	55 97       	sbiw	r26, 0x15	; 21
    32ae:	38 17       	cp	r19, r24
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <fetch_display_frame+0x390>
    32b2:	44 c0       	rjmp	.+136    	; 0x333c <fetch_display_frame+0x418>
    32b4:	56 96       	adiw	r26, 0x16	; 22
    32b6:	2c 91       	ld	r18, X
    32b8:	56 97       	sbiw	r26, 0x16	; 22
    32ba:	57 96       	adiw	r26, 0x17	; 23
    32bc:	8c 91       	ld	r24, X
    32be:	57 97       	sbiw	r26, 0x17	; 23
    32c0:	28 17       	cp	r18, r24
    32c2:	e1 f5       	brne	.+120    	; 0x333c <fetch_display_frame+0x418>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    32c4:	94 17       	cp	r25, r20
    32c6:	d1 f5       	brne	.+116    	; 0x333c <fetch_display_frame+0x418>
    32c8:	93 17       	cp	r25, r19
    32ca:	c1 f5       	brne	.+112    	; 0x333c <fetch_display_frame+0x418>
    32cc:	92 17       	cp	r25, r18
    32ce:	b1 f5       	brne	.+108    	; 0x333c <fetch_display_frame+0x418>
                                                if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    32d0:	58 96       	adiw	r26, 0x18	; 24
    32d2:	9c 91       	ld	r25, X
    32d4:	58 97       	sbiw	r26, 0x18	; 24
    32d6:	59 96       	adiw	r26, 0x19	; 25
    32d8:	8c 91       	ld	r24, X
    32da:	59 97       	sbiw	r26, 0x19	; 25
    32dc:	98 17       	cp	r25, r24
    32de:	71 f5       	brne	.+92     	; 0x333c <fetch_display_frame+0x418>
    32e0:	5a 96       	adiw	r26, 0x1a	; 26
    32e2:	4c 91       	ld	r20, X
    32e4:	5a 97       	sbiw	r26, 0x1a	; 26
    32e6:	5b 96       	adiw	r26, 0x1b	; 27
    32e8:	8c 91       	ld	r24, X
    32ea:	5b 97       	sbiw	r26, 0x1b	; 27
    32ec:	48 17       	cp	r20, r24
    32ee:	31 f5       	brne	.+76     	; 0x333c <fetch_display_frame+0x418>
    32f0:	5c 96       	adiw	r26, 0x1c	; 28
    32f2:	3c 91       	ld	r19, X
    32f4:	5c 97       	sbiw	r26, 0x1c	; 28
    32f6:	5d 96       	adiw	r26, 0x1d	; 29
    32f8:	8c 91       	ld	r24, X
    32fa:	5d 97       	sbiw	r26, 0x1d	; 29
    32fc:	38 17       	cp	r19, r24
    32fe:	f1 f4       	brne	.+60     	; 0x333c <fetch_display_frame+0x418>
    3300:	5e 96       	adiw	r26, 0x1e	; 30
    3302:	2c 91       	ld	r18, X
    3304:	5e 97       	sbiw	r26, 0x1e	; 30
    3306:	5f 96       	adiw	r26, 0x1f	; 31
    3308:	8c 91       	ld	r24, X
    330a:	5f 97       	sbiw	r26, 0x1f	; 31
    330c:	28 17       	cp	r18, r24
    330e:	b1 f4       	brne	.+44     	; 0x333c <fetch_display_frame+0x418>
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    3310:	94 17       	cp	r25, r20
    3312:	a1 f4       	brne	.+40     	; 0x333c <fetch_display_frame+0x418>
    3314:	93 17       	cp	r25, r19
    3316:	91 f4       	brne	.+36     	; 0x333c <fetch_display_frame+0x418>
    3318:	92 17       	cp	r25, r18
    331a:	81 f4       	brne	.+32     	; 0x333c <fetch_display_frame+0x418>
                                                        gscale[0] = FLASH[0];
    331c:	eb 83       	std	Y+3, r30	; 0x03
                                                        gscale[1] = FLASH[8];
    331e:	18 96       	adiw	r26, 0x08	; 8
    3320:	8c 91       	ld	r24, X
    3322:	18 97       	sbiw	r26, 0x08	; 8
    3324:	8c 83       	std	Y+4, r24	; 0x04
                                                        gscale[2] = FLASH[16];
    3326:	50 96       	adiw	r26, 0x10	; 16
    3328:	8c 91       	ld	r24, X
    332a:	50 97       	sbiw	r26, 0x10	; 16
    332c:	8d 83       	std	Y+5, r24	; 0x05
                                                        gscale[3] = FLASH[24];
    332e:	58 96       	adiw	r26, 0x18	; 24
    3330:	8c 91       	ld	r24, X
    3332:	8e 83       	std	Y+6, r24	; 0x06
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    3334:	8d 2d       	mov	r24, r13
    3336:	64 e0       	ldi	r22, 0x04	; 4
    3338:	a5 01       	movw	r20, r10
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <fetch_display_frame+0x424>
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 32
                } //end of if ident_compress == 1
                
                if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    333c:	55 23       	and	r21, r21
    333e:	31 f4       	brne	.+12     	; 0x334c <fetch_display_frame+0x428>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    3340:	8d 2d       	mov	r24, r13
    3342:	60 91 b8 27 	lds	r22, 0x27B8
    3346:	a8 01       	movw	r20, r16
    3348:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
				FLASH = &frameBuff[buff_index];
				buff_index = buff_index + bytes_per_panel_frame;
    334c:	ec 0c       	add	r14, r12
    334e:	f1 1c       	adc	r15, r1
            }
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
    3350:	d3 94       	inc	r13
    3352:	80 91 ec 24 	lds	r24, 0x24EC
    3356:	8d 15       	cp	r24, r13
    3358:	08 f0       	brcs	.+2      	; 0x335c <fetch_display_frame+0x438>
    335a:	73 ce       	rjmp	.-794    	; 0x3042 <fetch_display_frame+0x11e>
    335c:	4c c0       	rjmp	.+152    	; 0x33f6 <fetch_display_frame+0x4d2>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
                }
            } //end of for all panels loop
        }
        else {
            if (quiet_mode_on == 0){
    335e:	80 91 b3 20 	lds	r24, 0x20B3
    3362:	88 23       	and	r24, r24
    3364:	09 f0       	breq	.+2      	; 0x3368 <fetch_display_frame+0x444>
    3366:	47 c0       	rjmp	.+142    	; 0x33f6 <fetch_display_frame+0x4d2>
                xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    3368:	86 e0       	ldi	r24, 0x06	; 6
    336a:	99 e0       	ldi	r25, 0x09	; 9
    336c:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
                xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    3370:	ed b7       	in	r30, 0x3d	; 61
    3372:	fe b7       	in	r31, 0x3e	; 62
    3374:	38 97       	sbiw	r30, 0x08	; 8
    3376:	ed bf       	out	0x3d, r30	; 61
    3378:	fe bf       	out	0x3e, r31	; 62
    337a:	31 96       	adiw	r30, 0x01	; 1
    337c:	88 ee       	ldi	r24, 0xE8	; 232
    337e:	98 e0       	ldi	r25, 0x08	; 8
    3380:	ad b7       	in	r26, 0x3d	; 61
    3382:	be b7       	in	r27, 0x3e	; 62
    3384:	11 96       	adiw	r26, 0x01	; 1
    3386:	8d 93       	st	X+, r24
    3388:	9c 93       	st	X, r25
    338a:	12 97       	sbiw	r26, 0x02	; 2
    338c:	12 83       	std	Z+2, r17	; 0x02
    338e:	13 82       	std	Z+3, r1	; 0x03
    3390:	a4 82       	std	Z+4, r10	; 0x04
    3392:	b5 82       	std	Z+5, r11	; 0x05
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	86 83       	std	Z+6, r24	; 0x06
    339a:	97 83       	std	Z+7, r25	; 0x07
    339c:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    33a0:	ed b7       	in	r30, 0x3d	; 61
    33a2:	fe b7       	in	r31, 0x3e	; 62
    33a4:	38 96       	adiw	r30, 0x08	; 8
    33a6:	25 c0       	rjmp	.+74     	; 0x33f2 <fetch_display_frame+0x4ce>
            }
        }
    } else {
        
        if (quiet_mode_on == 0){
    33a8:	80 91 b3 20 	lds	r24, 0x20B3
    33ac:	88 23       	and	r24, r24
    33ae:	19 f5       	brne	.+70     	; 0x33f6 <fetch_display_frame+0x4d2>
            xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    33b0:	8e eb       	ldi	r24, 0xBE	; 190
    33b2:	98 e0       	ldi	r25, 0x08	; 8
    33b4:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    33b8:	8d b7       	in	r24, 0x3d	; 61
    33ba:	9e b7       	in	r25, 0x3e	; 62
    33bc:	0a 97       	sbiw	r24, 0x0a	; 10
    33be:	8d bf       	out	0x3d, r24	; 61
    33c0:	9e bf       	out	0x3e, r25	; 62
    33c2:	ed b7       	in	r30, 0x3d	; 61
    33c4:	fe b7       	in	r31, 0x3e	; 62
    33c6:	31 96       	adiw	r30, 0x01	; 1
    33c8:	8b e9       	ldi	r24, 0x9B	; 155
    33ca:	98 e0       	ldi	r25, 0x08	; 8
    33cc:	ad b7       	in	r26, 0x3d	; 61
    33ce:	be b7       	in	r27, 0x3e	; 62
    33d0:	11 96       	adiw	r26, 0x01	; 1
    33d2:	8d 93       	st	X+, r24
    33d4:	9c 93       	st	X, r25
    33d6:	12 97       	sbiw	r26, 0x02	; 2
    33d8:	92 82       	std	Z+2, r9	; 0x02
    33da:	13 82       	std	Z+3, r1	; 0x03
    33dc:	a4 82       	std	Z+4, r10	; 0x04
    33de:	b5 82       	std	Z+5, r11	; 0x05
    33e0:	e6 82       	std	Z+6, r14	; 0x06
    33e2:	f7 82       	std	Z+7, r15	; 0x07
    33e4:	00 87       	std	Z+8, r16	; 0x08
    33e6:	11 87       	std	Z+9, r17	; 0x09
    33e8:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    33ec:	ed b7       	in	r30, 0x3d	; 61
    33ee:	fe b7       	in	r31, 0x3e	; 62
    33f0:	3a 96       	adiw	r30, 0x0a	; 10
    33f2:	ed bf       	out	0x3d, r30	; 61
    33f4:	fe bf       	out	0x3e, r31	; 62
        }
    }
    
    //update analog out
    if (x_mode != 5){
    33f6:	80 91 b7 27 	lds	r24, 0x27B7
    33fa:	85 30       	cpi	r24, 0x05	; 5
    33fc:	c9 f0       	breq	.+50     	; 0x3430 <fetch_display_frame+0x50c>
		X_dac_val = ((uint32_t)Xindex + 1)*32767/x_num;
		analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    33fe:	b2 01       	movw	r22, r4
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	6f 5f       	subi	r22, 0xFF	; 255
    3406:	7f 4f       	sbci	r23, 0xFF	; 255
    3408:	8f 4f       	sbci	r24, 0xFF	; 255
    340a:	9f 4f       	sbci	r25, 0xFF	; 255
    340c:	2f ef       	ldi	r18, 0xFF	; 255
    340e:	3f e7       	ldi	r19, 0x7F	; 127
    3410:	40 e0       	ldi	r20, 0x00	; 0
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    3418:	20 91 23 28 	lds	r18, 0x2823
    341c:	30 91 24 28 	lds	r19, 0x2824
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	50 e0       	ldi	r21, 0x00	; 0
    3424:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	b9 01       	movw	r22, r18
    342c:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
	}

    
    if (y_mode != 5){
    3430:	80 91 01 28 	lds	r24, 0x2801
    3434:	85 30       	cpi	r24, 0x05	; 5
    3436:	c9 f0       	breq	.+50     	; 0x346a <fetch_display_frame+0x546>
        Y_dac_val = ((uint32_t)Yindex + 1)*32767/y_num; 
        analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    3438:	b1 01       	movw	r22, r2
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	6f 5f       	subi	r22, 0xFF	; 255
    3440:	7f 4f       	sbci	r23, 0xFF	; 255
    3442:	8f 4f       	sbci	r24, 0xFF	; 255
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	2f ef       	ldi	r18, 0xFF	; 255
    3448:	3f e7       	ldi	r19, 0x7F	; 127
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    3452:	20 91 ab 25 	lds	r18, 0x25AB
    3456:	30 91 ac 25 	lds	r19, 0x25AC
    345a:	40 e0       	ldi	r20, 0x00	; 0
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	b9 01       	movw	r22, r18
    3466:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
    }

	
	  //also update the output lines for quadrant-type learning patterns
	if (Laser_active == 1)
    346a:	80 91 ea 24 	lds	r24, 0x24EA
    346e:	81 30       	cpi	r24, 0x01	; 1
    3470:	59 f5       	brne	.+86     	; 0x34c8 <fetch_display_frame+0x5a4>
	{
		arrayIndex = index_x/8;  // find the index in laserPattern array for index_x
    3472:	80 91 b9 27 	lds	r24, 0x27B9
    3476:	90 91 ba 27 	lds	r25, 0x27BA
		bitIndex = index_x - arrayIndex*8;  // find the bit index in a laserPattern byte for index_x
    347a:	40 91 b9 27 	lds	r20, 0x27B9
    347e:	50 91 ba 27 	lds	r21, 0x27BA
    3482:	a3 e0       	ldi	r26, 0x03	; 3
    3484:	96 95       	lsr	r25
    3486:	87 95       	ror	r24
    3488:	aa 95       	dec	r26
    348a:	e1 f7       	brne	.-8      	; 0x3484 <fetch_display_frame+0x560>
    348c:	90 e0       	ldi	r25, 0x00	; 0
	
		tempVal = laserPattern[arrayIndex];
	
		if ((tempVal & (1<<(7-bitIndex))) == 0)
    348e:	fc 01       	movw	r30, r24
    3490:	e9 57       	subi	r30, 0x79	; 121
    3492:	f9 4d       	sbci	r31, 0xD9	; 217
    3494:	20 81       	ld	r18, Z
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	f3 e0       	ldi	r31, 0x03	; 3
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	fa 95       	dec	r31
    34a0:	e1 f7       	brne	.-8      	; 0x349a <fetch_display_frame+0x576>
    34a2:	48 1b       	sub	r20, r24
    34a4:	87 e0       	ldi	r24, 0x07	; 7
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	84 1b       	sub	r24, r20
    34aa:	91 09       	sbc	r25, r1
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <fetch_display_frame+0x58e>
    34ae:	35 95       	asr	r19
    34b0:	27 95       	ror	r18
    34b2:	8a 95       	dec	r24
    34b4:	e2 f7       	brpl	.-8      	; 0x34ae <fetch_display_frame+0x58a>
    34b6:	20 fd       	sbrc	r18, 0
    34b8:	03 c0       	rjmp	.+6      	; 0x34c0 <fetch_display_frame+0x59c>
			digitalWrite(0, LOW);  // turn off laser
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	60 e0       	ldi	r22, 0x00	; 0
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <fetch_display_frame+0x5a0>
		else
			digitalWrite(0, HIGH);   // turn on laser
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	61 e0       	ldi	r22, 0x01	; 1
    34c4:	0e 94 dd 24 	call	0x49ba	; 0x49ba <digitalWrite>
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	0e 94 dd 24 	call	0x49ba	; 0x49ba <digitalWrite>

}
    34d0:	8f 81       	ldd	r24, Y+7	; 0x07
    34d2:	98 85       	ldd	r25, Y+8	; 0x08
    34d4:	8d bf       	out	0x3d, r24	; 61
    34d6:	9e bf       	out	0x3e, r25	; 62
    34d8:	28 96       	adiw	r28, 0x08	; 8
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	cf 91       	pop	r28
    34e0:	df 91       	pop	r29
    34e2:	1f 91       	pop	r17
    34e4:	0f 91       	pop	r16
    34e6:	ff 90       	pop	r15
    34e8:	ef 90       	pop	r14
    34ea:	df 90       	pop	r13
    34ec:	cf 90       	pop	r12
    34ee:	bf 90       	pop	r11
    34f0:	af 90       	pop	r10
    34f2:	9f 90       	pop	r9
    34f4:	7f 90       	pop	r7
    34f6:	6f 90       	pop	r6
    34f8:	5f 90       	pop	r5
    34fa:	4f 90       	pop	r4
    34fc:	3f 90       	pop	r3
    34fe:	2f 90       	pop	r2
    3500:	08 95       	ret

00003502 <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    3502:	a0 e0       	ldi	r26, 0x00	; 0
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e7 e8       	ldi	r30, 0x87	; 135
    3508:	fa e1       	ldi	r31, 0x1A	; 26
    350a:	0c 94 9f 5b 	jmp	0xb73e	; 0xb73e <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    3514:	20 91 ab 25 	lds	r18, 0x25AB
    3518:	30 91 ac 25 	lds	r19, 0x25AC
    351c:	80 91 23 28 	lds	r24, 0x2823
    3520:	90 91 24 28 	lds	r25, 0x2824
    3524:	28 9f       	mul	r18, r24
    3526:	50 01       	movw	r10, r0
    3528:	29 9f       	mul	r18, r25
    352a:	b0 0c       	add	r11, r0
    352c:	38 9f       	mul	r19, r24
    352e:	b0 0c       	add	r11, r0
    3530:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    3532:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <timer_coarse_tic>
    3536:	c0 e0       	ldi	r28, 0x00	; 0
    3538:	d0 e0       	ldi	r29, 0x00	; 0
    353a:	0c c0       	rjmp	.+24     	; 0x3554 <benchmark_pattern+0x52>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind, index_x, index_y);
    353c:	60 91 b9 27 	lds	r22, 0x27B9
    3540:	70 91 ba 27 	lds	r23, 0x27BA
    3544:	40 91 6e 29 	lds	r20, 0x296E
    3548:	50 91 6f 29 	lds	r21, 0x296F
    354c:	ce 01       	movw	r24, r28
    354e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    3552:	21 96       	adiw	r28, 0x01	; 1
    3554:	ca 15       	cp	r28, r10
    3556:	db 05       	cpc	r29, r11
    3558:	88 f3       	brcs	.-30     	; 0x353c <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind, index_x, index_y);
    
    bench_time = timer_coarse_toc();
    355a:	0e 94 fe 58 	call	0xb1fc	; 0xb1fc <timer_coarse_toc>
    355e:	7b 01       	movw	r14, r22
    3560:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    3562:	8d b7       	in	r24, 0x3d	; 61
    3564:	9e b7       	in	r25, 0x3e	; 62
    3566:	08 97       	sbiw	r24, 0x08	; 8
    3568:	8d bf       	out	0x3d, r24	; 61
    356a:	9e bf       	out	0x3e, r25	; 62
    356c:	cd b6       	in	r12, 0x3d	; 61
    356e:	de b6       	in	r13, 0x3e	; 62
    3570:	08 94       	sec
    3572:	c1 1c       	adc	r12, r1
    3574:	d1 1c       	adc	r13, r1
    3576:	85 e6       	ldi	r24, 0x65	; 101
    3578:	97 e0       	ldi	r25, 0x07	; 7
    357a:	ed b7       	in	r30, 0x3d	; 61
    357c:	fe b7       	in	r31, 0x3e	; 62
    357e:	81 83       	std	Z+1, r24	; 0x01
    3580:	92 83       	std	Z+2, r25	; 0x02
    3582:	f6 01       	movw	r30, r12
    3584:	e2 82       	std	Z+2, r14	; 0x02
    3586:	f3 82       	std	Z+3, r15	; 0x03
    3588:	04 83       	std	Z+4, r16	; 0x04
    358a:	15 83       	std	Z+5, r17	; 0x05
    358c:	b5 01       	movw	r22, r10
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	28 ee       	ldi	r18, 0xE8	; 232
    3594:	33 e0       	ldi	r19, 0x03	; 3
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    359e:	a8 01       	movw	r20, r16
    35a0:	97 01       	movw	r18, r14
    35a2:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    35a6:	f6 01       	movw	r30, r12
    35a8:	26 83       	std	Z+6, r18	; 0x06
    35aa:	37 83       	std	Z+7, r19	; 0x07
    35ac:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    35b0:	8d b7       	in	r24, 0x3d	; 61
    35b2:	9e b7       	in	r25, 0x3e	; 62
    35b4:	08 96       	adiw	r24, 0x08	; 8
    35b6:	8d bf       	out	0x3d, r24	; 61
    35b8:	9e bf       	out	0x3e, r25	; 62
}
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	ea e0       	ldi	r30, 0x0A	; 10
    35c0:	0c 94 bb 5b 	jmp	0xb776	; 0xb776 <__epilogue_restores__+0x10>

000035c4 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}



void set_pattern(uint8_t pat_num) {
    35c4:	a2 e0       	ldi	r26, 0x02	; 2
    35c6:	b2 e0       	ldi	r27, 0x02	; 2
    35c8:	e8 ee       	ldi	r30, 0xE8	; 232
    35ca:	fa e1       	ldi	r31, 0x1A	; 26
    35cc:	0c 94 a6 5b 	jmp	0xb74c	; 0xb74c <__prologue_saves__+0x1e>
    35d0:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    35d2:	8a 30       	cpi	r24, 0x0A	; 10
    35d4:	80 f4       	brcc	.+32     	; 0x35f6 <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <set_pattern+0x14>
    35d8:	00 d0       	rcall	.+0      	; 0x35da <set_pattern+0x16>
    35da:	ed b7       	in	r30, 0x3d	; 61
    35dc:	fe b7       	in	r31, 0x3e	; 62
    35de:	31 96       	adiw	r30, 0x01	; 1
    35e0:	89 e0       	ldi	r24, 0x09	; 9
    35e2:	95 e2       	ldi	r25, 0x25	; 37
    35e4:	ad b7       	in	r26, 0x3d	; 61
    35e6:	be b7       	in	r27, 0x3e	; 62
    35e8:	11 96       	adiw	r26, 0x01	; 1
    35ea:	8d 93       	st	X+, r24
    35ec:	9c 93       	st	X, r25
    35ee:	12 97       	sbiw	r26, 0x02	; 2
    35f0:	85 e7       	ldi	r24, 0x75	; 117
    35f2:	90 e2       	ldi	r25, 0x20	; 32
    35f4:	1f c0       	rjmp	.+62     	; 0x3634 <set_pattern+0x70>
    35f6:	89 e0       	ldi	r24, 0x09	; 9
    35f8:	95 e2       	ldi	r25, 0x25	; 37
    else if (pat_num < 100)
    35fa:	14 36       	cpi	r17, 0x64	; 100
    35fc:	70 f4       	brcc	.+28     	; 0x361a <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <set_pattern+0x3c>
    3600:	00 d0       	rcall	.+0      	; 0x3602 <set_pattern+0x3e>
    3602:	ed b7       	in	r30, 0x3d	; 61
    3604:	fe b7       	in	r31, 0x3e	; 62
    3606:	31 96       	adiw	r30, 0x01	; 1
    3608:	ad b7       	in	r26, 0x3d	; 61
    360a:	be b7       	in	r27, 0x3e	; 62
    360c:	11 96       	adiw	r26, 0x01	; 1
    360e:	8d 93       	st	X+, r24
    3610:	9c 93       	st	X, r25
    3612:	12 97       	sbiw	r26, 0x02	; 2
    3614:	83 e8       	ldi	r24, 0x83	; 131
    3616:	90 e2       	ldi	r25, 0x20	; 32
    3618:	0d c0       	rjmp	.+26     	; 0x3634 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    361a:	00 d0       	rcall	.+0      	; 0x361c <set_pattern+0x58>
    361c:	00 d0       	rcall	.+0      	; 0x361e <set_pattern+0x5a>
    361e:	ed b7       	in	r30, 0x3d	; 61
    3620:	fe b7       	in	r31, 0x3e	; 62
    3622:	31 96       	adiw	r30, 0x01	; 1
    3624:	ad b7       	in	r26, 0x3d	; 61
    3626:	be b7       	in	r27, 0x3e	; 62
    3628:	11 96       	adiw	r26, 0x01	; 1
    362a:	8d 93       	st	X+, r24
    362c:	9c 93       	st	X, r25
    362e:	12 97       	sbiw	r26, 0x02	; 2
    3630:	80 e9       	ldi	r24, 0x90	; 144
    3632:	90 e2       	ldi	r25, 0x20	; 32
    3634:	82 83       	std	Z+2, r24	; 0x02
    3636:	93 83       	std	Z+3, r25	; 0x03
    3638:	14 83       	std	Z+4, r17	; 0x04
    363a:	15 82       	std	Z+5, r1	; 0x05
    363c:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <sprintf>
    3640:	8d b7       	in	r24, 0x3d	; 61
    3642:	9e b7       	in	r25, 0x3e	; 62
    3644:	06 96       	adiw	r24, 0x06	; 6
    3646:	8d bf       	out	0x3d, r24	; 61
    3648:	9e bf       	out	0x3e, r25	; 62
    else
        xputs(PSTR("pat_num is too big.\n"));
   
	
    res = f_close(&file1);
    364a:	80 e7       	ldi	r24, 0x70	; 112
    364c:	99 e2       	ldi	r25, 0x29	; 41
    364e:	0e 94 4a 4c 	call	0x9894	; 0x9894 <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    3652:	80 e7       	ldi	r24, 0x70	; 112
    3654:	99 e2       	ldi	r25, 0x29	; 41
    3656:	69 e0       	ldi	r22, 0x09	; 9
    3658:	75 e2       	ldi	r23, 0x25	; 37
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
    if (res == FR_OK) {
    3660:	88 23       	and	r24, r24
    3662:	09 f0       	breq	.+2      	; 0x3666 <set_pattern+0xa2>
    3664:	ab c0       	rjmp	.+342    	; 0x37bc <set_pattern+0x1f8>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    3666:	80 e7       	ldi	r24, 0x70	; 112
    3668:	99 e2       	ldi	r25, 0x29	; 41
    366a:	be 01       	movw	r22, r28
    366c:	6d 5f       	subi	r22, 0xFD	; 253
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	52 e0       	ldi	r21, 0x02	; 2
    3674:	9e 01       	movw	r18, r28
    3676:	2f 5f       	subi	r18, 0xFF	; 255
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
    367a:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    367e:	88 23       	and	r24, r24
    3680:	09 f0       	breq	.+2      	; 0x3684 <set_pattern+0xc0>
    3682:	99 c0       	rjmp	.+306    	; 0x37b6 <set_pattern+0x1f2>
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	9a 81       	ldd	r25, Y+2	; 0x02
    3688:	80 50       	subi	r24, 0x00	; 0
    368a:	92 40       	sbci	r25, 0x02	; 2
    368c:	09 f0       	breq	.+2      	; 0x3690 <set_pattern+0xcc>
    368e:	93 c0       	rjmp	.+294    	; 0x37b6 <set_pattern+0x1f2>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    3690:	8b 81       	ldd	r24, Y+3	; 0x03
    3692:	80 93 23 28 	sts	0x2823, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    3696:	8c 81       	ldd	r24, Y+4	; 0x04
    3698:	80 93 24 28 	sts	0x2824, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    369c:	8d 81       	ldd	r24, Y+5	; 0x05
    369e:	80 93 ab 25 	sts	0x25AB, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    36a2:	8e 81       	ldd	r24, Y+6	; 0x06
    36a4:	80 93 ac 25 	sts	0x25AC, r24
            num_panels = pattDataBuff[4];
    36a8:	8f 81       	ldd	r24, Y+7	; 0x07
    36aa:	80 93 ec 24 	sts	0x24EC, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    36ae:	98 85       	ldd	r25, Y+8	; 0x08
    36b0:	90 93 35 27 	sts	0x2735, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    36b4:	89 2f       	mov	r24, r25
    36b6:	8b 50       	subi	r24, 0x0B	; 11
    36b8:	84 30       	cpi	r24, 0x04	; 4
    36ba:	48 f4       	brcc	.+18     	; 0x36ce <set_pattern+0x10a>
                gs_value = gs_value - 10;
    36bc:	9a 50       	subi	r25, 0x0A	; 10
    36be:	90 93 35 27 	sts	0x2735, r25
                row_compress = 1;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	80 93 ad 25 	sts	0x25AD, r24
                bytes_per_panel_frame = gs_value;
    36c8:	90 93 b8 27 	sts	0x27B8, r25
    36cc:	0b c0       	rjmp	.+22     	; 0x36e4 <set_pattern+0x120>
            }
            else {
                row_compress = 0;
    36ce:	10 92 ad 25 	sts	0x25AD, r1
                bytes_per_panel_frame = gs_value * 8;
    36d2:	89 2f       	mov	r24, r25
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	23 e0       	ldi	r18, 0x03	; 3
    36d8:	88 0f       	add	r24, r24
    36da:	99 1f       	adc	r25, r25
    36dc:	2a 95       	dec	r18
    36de:	e1 f7       	brne	.-8      	; 0x36d8 <set_pattern+0x114>
    36e0:	80 93 b8 27 	sts	0x27B8, r24
            }
            index_x = index_y = 0;
    36e4:	10 92 6e 29 	sts	0x296E, r1
    36e8:	10 92 6f 29 	sts	0x296F, r1
    36ec:	80 91 6e 29 	lds	r24, 0x296E
    36f0:	90 91 6f 29 	lds	r25, 0x296F
    36f4:	80 93 b9 27 	sts	0x27B9, r24
    36f8:	90 93 ba 27 	sts	0x27BA, r25
            frame_num = 0;
    36fc:	10 92 ed 24 	sts	0x24ED, r1
    3700:	10 92 ee 24 	sts	0x24EE, r1
            Stop = 1;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    370a:	10 92 e8 24 	sts	0x24E8, r1
            if (quiet_mode_on == 0){
    370e:	80 91 b3 20 	lds	r24, 0x20B3
    3712:	88 23       	and	r24, r24
    3714:	09 f0       	breq	.+2      	; 0x3718 <set_pattern+0x154>
    3716:	40 c0       	rjmp	.+128    	; 0x3798 <set_pattern+0x1d4>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    3718:	00 d0       	rcall	.+0      	; 0x371a <set_pattern+0x156>
    371a:	0f 92       	push	r0
    371c:	ed b7       	in	r30, 0x3d	; 61
    371e:	fe b7       	in	r31, 0x3e	; 62
    3720:	31 96       	adiw	r30, 0x01	; 1
    3722:	86 e8       	ldi	r24, 0x86	; 134
    3724:	98 e0       	ldi	r25, 0x08	; 8
    3726:	ad b7       	in	r26, 0x3d	; 61
    3728:	be b7       	in	r27, 0x3e	; 62
    372a:	11 96       	adiw	r26, 0x01	; 1
    372c:	8d 93       	st	X+, r24
    372e:	9c 93       	st	X, r25
    3730:	12 97       	sbiw	r26, 0x02	; 2
    3732:	12 83       	std	Z+2, r17	; 0x02
    3734:	13 82       	std	Z+3, r1	; 0x03
    3736:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    373a:	8d b7       	in	r24, 0x3d	; 61
    373c:	9e b7       	in	r25, 0x3e	; 62
    373e:	08 97       	sbiw	r24, 0x08	; 8
    3740:	8d bf       	out	0x3d, r24	; 61
    3742:	9e bf       	out	0x3e, r25	; 62
    3744:	ed b7       	in	r30, 0x3d	; 61
    3746:	fe b7       	in	r31, 0x3e	; 62
    3748:	31 96       	adiw	r30, 0x01	; 1
    374a:	83 e3       	ldi	r24, 0x33	; 51
    374c:	98 e0       	ldi	r25, 0x08	; 8
    374e:	ad b7       	in	r26, 0x3d	; 61
    3750:	be b7       	in	r27, 0x3e	; 62
    3752:	11 96       	adiw	r26, 0x01	; 1
    3754:	8d 93       	st	X+, r24
    3756:	9c 93       	st	X, r25
    3758:	12 97       	sbiw	r26, 0x02	; 2
    375a:	80 91 23 28 	lds	r24, 0x2823
    375e:	90 91 24 28 	lds	r25, 0x2824
    3762:	82 83       	std	Z+2, r24	; 0x02
    3764:	93 83       	std	Z+3, r25	; 0x03
    3766:	80 91 ab 25 	lds	r24, 0x25AB
    376a:	90 91 ac 25 	lds	r25, 0x25AC
    376e:	84 83       	std	Z+4, r24	; 0x04
    3770:	95 83       	std	Z+5, r25	; 0x05
    3772:	80 91 ec 24 	lds	r24, 0x24EC
    3776:	86 83       	std	Z+6, r24	; 0x06
    3778:	17 82       	std	Z+7, r1	; 0x07
    377a:	80 91 35 27 	lds	r24, 0x2735
    377e:	80 87       	std	Z+8, r24	; 0x08
    3780:	11 86       	std	Z+9, r1	; 0x09
    3782:	80 91 ad 25 	lds	r24, 0x25AD
    3786:	82 87       	std	Z+10, r24	; 0x0a
    3788:	13 86       	std	Z+11, r1	; 0x0b
    378a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    378e:	8d b7       	in	r24, 0x3d	; 61
    3790:	9e b7       	in	r25, 0x3e	; 62
    3792:	0c 96       	adiw	r24, 0x0c	; 12
    3794:	8d bf       	out	0x3d, r24	; 61
    3796:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num, index_x, index_y);
    3798:	80 91 ed 24 	lds	r24, 0x24ED
    379c:	90 91 ee 24 	lds	r25, 0x24EE
    37a0:	60 91 b9 27 	lds	r22, 0x27B9
    37a4:	70 91 ba 27 	lds	r23, 0x27BA
    37a8:	40 91 6e 29 	lds	r20, 0x296E
    37ac:	50 91 6f 29 	lds	r21, 0x296F
    37b0:	0e 94 92 17 	call	0x2f24	; 0x2f24 <fetch_display_frame>
    37b4:	07 c0       	rjmp	.+14     	; 0x37c4 <set_pattern+0x200>
        } else
		
        xputs(PSTR("Error reading in pattern file\n"));
    37b6:	84 e1       	ldi	r24, 0x14	; 20
    37b8:	98 e0       	ldi	r25, 0x08	; 8
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <set_pattern+0x1fc>
		
    } else
    xputs(PSTR("Error opening pattern file\n"));
    37bc:	88 ef       	ldi	r24, 0xF8	; 248
    37be:	97 e0       	ldi	r25, 0x07	; 7
    37c0:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>

}
    37c4:	ce 5f       	subi	r28, 0xFE	; 254
    37c6:	dd 4f       	sbci	r29, 0xFD	; 253
    37c8:	e3 e0       	ldi	r30, 0x03	; 3
    37ca:	0c 94 c2 5b 	jmp	0xb784	; 0xb784 <__epilogue_restores__+0x1e>

000037ce <handle_message_length_5>:
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    37ce:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    37d0:	80 81       	ld	r24, Z
    37d2:	80 37       	cpi	r24, 0x70	; 112
    37d4:	21 f0       	breq	.+8      	; 0x37de <handle_message_length_5+0x10>
    37d6:	81 37       	cpi	r24, 0x71	; 113
    37d8:	09 f0       	breq	.+2      	; 0x37dc <handle_message_length_5+0xe>
    37da:	bd c0       	rjmp	.+378    	; 0x3956 <handle_message_length_5+0x188>
    37dc:	7b c0       	rjmp	.+246    	; 0x38d4 <handle_message_length_5+0x106>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    37de:	92 81       	ldd	r25, Z+2	; 0x02
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	21 81       	ldd	r18, Z+1	; 0x01
    37e4:	82 0f       	add	r24, r18
    37e6:	91 1d       	adc	r25, r1
    37e8:	80 93 b9 27 	sts	0x27B9, r24
    37ec:	90 93 ba 27 	sts	0x27BA, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    37f0:	94 81       	ldd	r25, Z+4	; 0x04
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	23 81       	ldd	r18, Z+3	; 0x03
    37f6:	82 0f       	add	r24, r18
    37f8:	91 1d       	adc	r25, r1
    37fa:	80 93 6e 29 	sts	0x296E, r24
    37fe:	90 93 6f 29 	sts	0x296F, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    3802:	80 91 b9 27 	lds	r24, 0x27B9
    3806:	90 91 ba 27 	lds	r25, 0x27BA
    380a:	80 93 04 27 	sts	0x2704, r24
    380e:	90 93 05 27 	sts	0x2705, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    3812:	80 91 6e 29 	lds	r24, 0x296E
    3816:	90 91 6f 29 	lds	r25, 0x296F
    381a:	80 93 76 26 	sts	0x2676, r24
    381e:	90 93 77 26 	sts	0x2677, r25
            frame_num = index_y* x_num + index_x;
    3822:	20 91 6e 29 	lds	r18, 0x296E
    3826:	30 91 6f 29 	lds	r19, 0x296F
    382a:	40 91 b9 27 	lds	r20, 0x27B9
    382e:	50 91 ba 27 	lds	r21, 0x27BA
    3832:	80 91 23 28 	lds	r24, 0x2823
    3836:	90 91 24 28 	lds	r25, 0x2824
    383a:	bc 01       	movw	r22, r24
    383c:	26 9f       	mul	r18, r22
    383e:	c0 01       	movw	r24, r0
    3840:	27 9f       	mul	r18, r23
    3842:	90 0d       	add	r25, r0
    3844:	36 9f       	mul	r19, r22
    3846:	90 0d       	add	r25, r0
    3848:	11 24       	eor	r1, r1
    384a:	84 0f       	add	r24, r20
    384c:	95 1f       	adc	r25, r21
    384e:	80 93 ed 24 	sts	0x24ED, r24
    3852:	90 93 ee 24 	sts	0x24EE, r25
            display_flag = 0;  //clear the display flag
    3856:	10 92 e8 24 	sts	0x24E8, r1
            if (quiet_mode_on == 0)
    385a:	80 91 b3 20 	lds	r24, 0x20B3
    385e:	88 23       	and	r24, r24
    3860:	51 f5       	brne	.+84     	; 0x38b6 <handle_message_length_5+0xe8>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    3862:	20 91 b9 27 	lds	r18, 0x27B9
    3866:	30 91 ba 27 	lds	r19, 0x27BA
    386a:	40 91 6e 29 	lds	r20, 0x296E
    386e:	50 91 6f 29 	lds	r21, 0x296F
    3872:	60 91 ed 24 	lds	r22, 0x24ED
    3876:	70 91 ee 24 	lds	r23, 0x24EE
    387a:	8d b7       	in	r24, 0x3d	; 61
    387c:	9e b7       	in	r25, 0x3e	; 62
    387e:	08 97       	sbiw	r24, 0x08	; 8
    3880:	8d bf       	out	0x3d, r24	; 61
    3882:	9e bf       	out	0x3e, r25	; 62
    3884:	ed b7       	in	r30, 0x3d	; 61
    3886:	fe b7       	in	r31, 0x3e	; 62
    3888:	31 96       	adiw	r30, 0x01	; 1
    388a:	82 e9       	ldi	r24, 0x92	; 146
    388c:	99 e0       	ldi	r25, 0x09	; 9
    388e:	ad b7       	in	r26, 0x3d	; 61
    3890:	be b7       	in	r27, 0x3e	; 62
    3892:	11 96       	adiw	r26, 0x01	; 1
    3894:	8d 93       	st	X+, r24
    3896:	9c 93       	st	X, r25
    3898:	12 97       	sbiw	r26, 0x02	; 2
    389a:	22 83       	std	Z+2, r18	; 0x02
    389c:	33 83       	std	Z+3, r19	; 0x03
    389e:	44 83       	std	Z+4, r20	; 0x04
    38a0:	55 83       	std	Z+5, r21	; 0x05
    38a2:	66 83       	std	Z+6, r22	; 0x06
    38a4:	77 83       	std	Z+7, r23	; 0x07
    38a6:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    38aa:	6d b7       	in	r22, 0x3d	; 61
    38ac:	7e b7       	in	r23, 0x3e	; 62
    38ae:	68 5f       	subi	r22, 0xF8	; 248
    38b0:	7f 4f       	sbci	r23, 0xFF	; 255
    38b2:	6d bf       	out	0x3d, r22	; 61
    38b4:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num, index_x, index_y);
    38b6:	80 91 ed 24 	lds	r24, 0x24ED
    38ba:	90 91 ee 24 	lds	r25, 0x24EE
    38be:	60 91 b9 27 	lds	r22, 0x27B9
    38c2:	70 91 ba 27 	lds	r23, 0x27BA
    38c6:	40 91 6e 29 	lds	r20, 0x296E
    38ca:	50 91 6f 29 	lds	r21, 0x296F
    38ce:	0e 94 92 17 	call	0x2f24	; 0x2f24 <fetch_display_frame>
    38d2:	08 95       	ret
            break;

        case 0x71:
            //'send_gain_bias', all of these are signed byte values
            gain_x = msg_buffer[1];
    38d4:	51 81       	ldd	r21, Z+1	; 0x01
    38d6:	50 93 02 28 	sts	0x2802, r21
            bias_x = msg_buffer[2];
    38da:	42 81       	ldd	r20, Z+2	; 0x02
    38dc:	40 93 9b 25 	sts	0x259B, r20
            gain_y = msg_buffer[3];
    38e0:	33 81       	ldd	r19, Z+3	; 0x03
    38e2:	30 93 bb 27 	sts	0x27BB, r19
            bias_y = msg_buffer[4];
    38e6:	24 81       	ldd	r18, Z+4	; 0x04
    38e8:	20 93 d2 2b 	sts	0x2BD2, r18
			if (quiet_mode_on == 0)
    38ec:	80 91 b3 20 	lds	r24, 0x20B3
    38f0:	88 23       	and	r24, r24
    38f2:	b9 f5       	brne	.+110    	; 0x3962 <handle_message_length_5+0x194>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), gain_x, bias_x, gain_y, bias_y);
    38f4:	8d b7       	in	r24, 0x3d	; 61
    38f6:	9e b7       	in	r25, 0x3e	; 62
    38f8:	0a 97       	sbiw	r24, 0x0a	; 10
    38fa:	8d bf       	out	0x3d, r24	; 61
    38fc:	9e bf       	out	0x3e, r25	; 62
    38fe:	ed b7       	in	r30, 0x3d	; 61
    3900:	fe b7       	in	r31, 0x3e	; 62
    3902:	31 96       	adiw	r30, 0x01	; 1
    3904:	83 e5       	ldi	r24, 0x53	; 83
    3906:	99 e0       	ldi	r25, 0x09	; 9
    3908:	ad b7       	in	r26, 0x3d	; 61
    390a:	be b7       	in	r27, 0x3e	; 62
    390c:	11 96       	adiw	r26, 0x01	; 1
    390e:	8d 93       	st	X+, r24
    3910:	9c 93       	st	X, r25
    3912:	12 97       	sbiw	r26, 0x02	; 2
    3914:	85 2f       	mov	r24, r21
    3916:	99 27       	eor	r25, r25
    3918:	87 fd       	sbrc	r24, 7
    391a:	90 95       	com	r25
    391c:	82 83       	std	Z+2, r24	; 0x02
    391e:	93 83       	std	Z+3, r25	; 0x03
    3920:	84 2f       	mov	r24, r20
    3922:	99 27       	eor	r25, r25
    3924:	87 fd       	sbrc	r24, 7
    3926:	90 95       	com	r25
    3928:	84 83       	std	Z+4, r24	; 0x04
    392a:	95 83       	std	Z+5, r25	; 0x05
    392c:	83 2f       	mov	r24, r19
    392e:	99 27       	eor	r25, r25
    3930:	87 fd       	sbrc	r24, 7
    3932:	90 95       	com	r25
    3934:	86 83       	std	Z+6, r24	; 0x06
    3936:	97 83       	std	Z+7, r25	; 0x07
    3938:	82 2f       	mov	r24, r18
    393a:	99 27       	eor	r25, r25
    393c:	87 fd       	sbrc	r24, 7
    393e:	90 95       	com	r25
    3940:	80 87       	std	Z+8, r24	; 0x08
    3942:	91 87       	std	Z+9, r25	; 0x09
    3944:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    3948:	6d b7       	in	r22, 0x3d	; 61
    394a:	7e b7       	in	r23, 0x3e	; 62
    394c:	66 5f       	subi	r22, 0xF6	; 246
    394e:	7f 4f       	sbci	r23, 0xFF	; 255
    3950:	6d bf       	out	0x3d, r22	; 61
    3952:	7e bf       	out	0x3e, r23	; 62
    3954:	08 95       	ret
            break;
		
		default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	68 e0       	ldi	r22, 0x08	; 8
    395a:	48 ee       	ldi	r20, 0xE8	; 232
    395c:	50 e2       	ldi	r21, 0x20	; 32
    395e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    3962:	08 95       	ret

00003964 <handle_message_length_2>:
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    3964:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    3966:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    3968:	80 81       	ld	r24, Z
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	fc 01       	movw	r30, r24
    396e:	31 97       	sbiw	r30, 0x01	; 1
    3970:	e0 31       	cpi	r30, 0x10	; 16
    3972:	f1 05       	cpc	r31, r1
    3974:	08 f0       	brcs	.+2      	; 0x3978 <handle_message_length_2+0x14>
    3976:	44 c0       	rjmp	.+136    	; 0x3a00 <handle_message_length_2+0x9c>
    3978:	e6 50       	subi	r30, 0x06	; 6
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	0c 94 ce 5b 	jmp	0xb79c	; 0xb79c <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    3980:	82 2f       	mov	r24, r18
    3982:	62 e0       	ldi	r22, 0x02	; 2
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	51 e2       	ldi	r21, 0x21	; 33
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <handle_message_length_2+0xa4>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    398a:	82 2f       	mov	r24, r18
    398c:	62 e0       	ldi	r22, 0x02	; 2
    398e:	42 e0       	ldi	r20, 0x02	; 2
    3990:	51 e2       	ldi	r21, 0x21	; 33
    3992:	3a c0       	rjmp	.+116    	; 0x3a08 <handle_message_length_2+0xa4>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    3994:	82 2f       	mov	r24, r18
    3996:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <set_pattern>
    399a:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    399c:	82 2f       	mov	r24, r18
    399e:	0e 94 01 26 	call	0x4c02	; 0x4c02 <test_ADC>
    39a2:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    39a4:	82 2f       	mov	r24, r18
    39a6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <test_DIO>
    39aa:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    39ac:	82 2f       	mov	r24, r18
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	80 93 a9 20 	sts	0x20A9, r24
    39b8:	90 93 aa 20 	sts	0x20AA, r25
    39bc:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    39be:	82 2f       	mov	r24, r18
    39c0:	0e 94 5f 2c 	call	0x58be	; 0x58be <flash_panel>
    39c4:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    39c6:	82 2f       	mov	r24, r18
    39c8:	0e 94 6d 29 	call	0x52da	; 0x52da <eeprom_panel>
    39cc:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    39ce:	82 2f       	mov	r24, r18
    39d0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_hwConfig>
    39d4:	08 95       	ret
            break;	
			
		case 0x10:  // get ADC value from a ADC channel (1-4)
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(argument_byte - 1));
    39d6:	82 2f       	mov	r24, r18
    39d8:	81 50       	subi	r24, 0x01	; 1
    39da:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
    39de:	00 d0       	rcall	.+0      	; 0x39e0 <handle_message_length_2+0x7c>
    39e0:	0f 92       	push	r0
    39e2:	24 e1       	ldi	r18, 0x14	; 20
    39e4:	3a e0       	ldi	r19, 0x0A	; 10
    39e6:	ed b7       	in	r30, 0x3d	; 61
    39e8:	fe b7       	in	r31, 0x3e	; 62
    39ea:	21 83       	std	Z+1, r18	; 0x01
    39ec:	32 83       	std	Z+2, r19	; 0x02
    39ee:	83 83       	std	Z+3, r24	; 0x03
    39f0:	94 83       	std	Z+4, r25	; 0x04
    39f2:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	08 95       	ret
            break;	
			
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	68 e0       	ldi	r22, 0x08	; 8
    3a04:	40 ed       	ldi	r20, 0xD0	; 208
    3a06:	50 e2       	ldi	r21, 0x20	; 32
    3a08:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    3a0c:	08 95       	ret

00003a0e <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    3a0e:	6f 92       	push	r6
    3a10:	7f 92       	push	r7
    3a12:	9f 92       	push	r9
    3a14:	af 92       	push	r10
    3a16:	bf 92       	push	r11
    3a18:	cf 92       	push	r12
    3a1a:	df 92       	push	r13
    3a1c:	ef 92       	push	r14
    3a1e:	ff 92       	push	r15
    3a20:	0f 93       	push	r16
    3a22:	1f 93       	push	r17
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	0f 92       	push	r0
    3a2a:	0f 92       	push	r0
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	fc 01       	movw	r30, r24
    uint8_t i;
	uint32_t tmp_x=0;
	uint32_t tmp_y=0;
	uint8_t n_sample=100;
    
    switch(msg_buffer[0]) {
    3a32:	e0 81       	ld	r30, Z
    3a34:	e3 34       	cpi	r30, 0x43	; 67
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <handle_message_length_1+0x2c>
    3a38:	1a c2       	rjmp	.+1076   	; 0x3e6e <handle_message_length_1+0x460>
    3a3a:	e4 34       	cpi	r30, 0x44	; 68
    3a3c:	08 f0       	brcs	.+2      	; 0x3a40 <handle_message_length_1+0x32>
    3a3e:	5b c0       	rjmp	.+182    	; 0x3af6 <handle_message_length_1+0xe8>
    3a40:	e0 32       	cpi	r30, 0x20	; 32
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <handle_message_length_1+0x38>
    3a44:	b6 c0       	rjmp	.+364    	; 0x3bb2 <handle_message_length_1+0x1a4>
    3a46:	e1 32       	cpi	r30, 0x21	; 33
    3a48:	58 f5       	brcc	.+86     	; 0x3aa0 <handle_message_length_1+0x92>
    3a4a:	e4 31       	cpi	r30, 0x14	; 20
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <handle_message_length_1+0x42>
    3a4e:	98 c2       	rjmp	.+1328   	; 0x3f80 <handle_message_length_1+0x572>
    3a50:	e5 31       	cpi	r30, 0x15	; 21
    3a52:	98 f4       	brcc	.+38     	; 0x3a7a <handle_message_length_1+0x6c>
    3a54:	e1 31       	cpi	r30, 0x11	; 17
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <handle_message_length_1+0x4c>
    3a58:	85 c2       	rjmp	.+1290   	; 0x3f64 <handle_message_length_1+0x556>
    3a5a:	e2 31       	cpi	r30, 0x12	; 18
    3a5c:	38 f4       	brcc	.+14     	; 0x3a6c <handle_message_length_1+0x5e>
    3a5e:	ee 23       	and	r30, r30
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <handle_message_length_1+0x56>
    3a62:	f1 c1       	rjmp	.+994    	; 0x3e46 <handle_message_length_1+0x438>
    3a64:	e0 31       	cpi	r30, 0x10	; 16
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <handle_message_length_1+0x5c>
    3a68:	a0 c3       	rjmp	.+1856   	; 0x41aa <__stack+0x1ab>
    3a6a:	78 c2       	rjmp	.+1264   	; 0x3f5c <handle_message_length_1+0x54e>
    3a6c:	e2 31       	cpi	r30, 0x12	; 18
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <handle_message_length_1+0x64>
    3a70:	80 c2       	rjmp	.+1280   	; 0x3f72 <handle_message_length_1+0x564>
    3a72:	e3 31       	cpi	r30, 0x13	; 19
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <handle_message_length_1+0x6a>
    3a76:	99 c3       	rjmp	.+1842   	; 0x41aa <__stack+0x1ab>
    3a78:	80 c2       	rjmp	.+1280   	; 0x3f7a <handle_message_length_1+0x56c>
    3a7a:	e7 31       	cpi	r30, 0x17	; 23
    3a7c:	09 f4       	brne	.+2      	; 0x3a80 <handle_message_length_1+0x72>
    3a7e:	ac c2       	rjmp	.+1368   	; 0x3fd8 <handle_message_length_1+0x5ca>
    3a80:	e8 31       	cpi	r30, 0x18	; 24
    3a82:	38 f4       	brcc	.+14     	; 0x3a92 <handle_message_length_1+0x84>
    3a84:	e5 31       	cpi	r30, 0x15	; 21
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <handle_message_length_1+0x7c>
    3a88:	7e c2       	rjmp	.+1276   	; 0x3f86 <handle_message_length_1+0x578>
    3a8a:	e6 31       	cpi	r30, 0x16	; 22
    3a8c:	09 f0       	breq	.+2      	; 0x3a90 <handle_message_length_1+0x82>
    3a8e:	8d c3       	rjmp	.+1818   	; 0x41aa <__stack+0x1ab>
    3a90:	8b c2       	rjmp	.+1302   	; 0x3fa8 <handle_message_length_1+0x59a>
    3a92:	e8 31       	cpi	r30, 0x18	; 24
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <handle_message_length_1+0x8a>
    3a96:	a4 c2       	rjmp	.+1352   	; 0x3fe0 <handle_message_length_1+0x5d2>
    3a98:	e9 31       	cpi	r30, 0x19	; 25
    3a9a:	09 f0       	breq	.+2      	; 0x3a9e <handle_message_length_1+0x90>
    3a9c:	86 c3       	rjmp	.+1804   	; 0x41aa <__stack+0x1ab>
    3a9e:	a3 c2       	rjmp	.+1350   	; 0x3fe6 <handle_message_length_1+0x5d8>
    3aa0:	e6 32       	cpi	r30, 0x26	; 38
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <handle_message_length_1+0x98>
    3aa4:	1b c3       	rjmp	.+1590   	; 0x40dc <__stack+0xdd>
    3aa6:	e7 32       	cpi	r30, 0x27	; 39
    3aa8:	98 f4       	brcc	.+38     	; 0x3ad0 <handle_message_length_1+0xc2>
    3aaa:	e3 32       	cpi	r30, 0x23	; 35
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <handle_message_length_1+0xa2>
    3aae:	f7 c2       	rjmp	.+1518   	; 0x409e <__stack+0x9f>
    3ab0:	e4 32       	cpi	r30, 0x24	; 36
    3ab2:	38 f4       	brcc	.+14     	; 0x3ac2 <handle_message_length_1+0xb4>
    3ab4:	e1 32       	cpi	r30, 0x21	; 33
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <handle_message_length_1+0xac>
    3ab8:	de c2       	rjmp	.+1468   	; 0x4076 <__stack+0x77>
    3aba:	e2 32       	cpi	r30, 0x22	; 34
    3abc:	09 f0       	breq	.+2      	; 0x3ac0 <handle_message_length_1+0xb2>
    3abe:	75 c3       	rjmp	.+1770   	; 0x41aa <__stack+0x1ab>
    3ac0:	e4 c2       	rjmp	.+1480   	; 0x408a <__stack+0x8b>
    3ac2:	e4 32       	cpi	r30, 0x24	; 36
    3ac4:	09 f4       	brne	.+2      	; 0x3ac8 <handle_message_length_1+0xba>
    3ac6:	fa c2       	rjmp	.+1524   	; 0x40bc <__stack+0xbd>
    3ac8:	e5 32       	cpi	r30, 0x25	; 37
    3aca:	09 f0       	breq	.+2      	; 0x3ace <handle_message_length_1+0xc0>
    3acc:	6e c3       	rjmp	.+1756   	; 0x41aa <__stack+0x1ab>
    3ace:	10 c1       	rjmp	.+544    	; 0x3cf0 <handle_message_length_1+0x2e2>
    3ad0:	e0 34       	cpi	r30, 0x40	; 64
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <handle_message_length_1+0xc8>
    3ad4:	bd c1       	rjmp	.+890    	; 0x3e50 <handle_message_length_1+0x442>
    3ad6:	e1 34       	cpi	r30, 0x41	; 65
    3ad8:	38 f4       	brcc	.+14     	; 0x3ae8 <handle_message_length_1+0xda>
    3ada:	e0 33       	cpi	r30, 0x30	; 48
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <handle_message_length_1+0xd2>
    3ade:	c1 c0       	rjmp	.+386    	; 0x3c62 <handle_message_length_1+0x254>
    3ae0:	e5 33       	cpi	r30, 0x35	; 53
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <handle_message_length_1+0xd8>
    3ae4:	62 c3       	rjmp	.+1732   	; 0x41aa <__stack+0x1ab>
    3ae6:	65 c1       	rjmp	.+714    	; 0x3db2 <handle_message_length_1+0x3a4>
    3ae8:	e1 34       	cpi	r30, 0x41	; 65
    3aea:	09 f4       	brne	.+2      	; 0x3aee <handle_message_length_1+0xe0>
    3aec:	b6 c1       	rjmp	.+876    	; 0x3e5a <handle_message_length_1+0x44c>
    3aee:	e2 34       	cpi	r30, 0x42	; 66
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <handle_message_length_1+0xe6>
    3af2:	5b c3       	rjmp	.+1718   	; 0x41aa <__stack+0x1ab>
    3af4:	b7 c1       	rjmp	.+878    	; 0x3e64 <handle_message_length_1+0x456>
    3af6:	e4 39       	cpi	r30, 0x94	; 148
    3af8:	09 f4       	brne	.+2      	; 0x3afc <handle_message_length_1+0xee>
    3afa:	f4 c1       	rjmp	.+1000   	; 0x3ee4 <handle_message_length_1+0x4d6>
    3afc:	e5 39       	cpi	r30, 0x95	; 149
    3afe:	58 f5       	brcc	.+86     	; 0x3b56 <handle_message_length_1+0x148>
    3b00:	e0 36       	cpi	r30, 0x60	; 96
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <handle_message_length_1+0xf8>
    3b04:	d5 c1       	rjmp	.+938    	; 0x3eb0 <handle_message_length_1+0x4a2>
    3b06:	e1 36       	cpi	r30, 0x61	; 97
    3b08:	98 f4       	brcc	.+38     	; 0x3b30 <handle_message_length_1+0x122>
    3b0a:	e6 34       	cpi	r30, 0x46	; 70
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <handle_message_length_1+0x102>
    3b0e:	be c1       	rjmp	.+892    	; 0x3e8c <handle_message_length_1+0x47e>
    3b10:	e7 34       	cpi	r30, 0x47	; 71
    3b12:	38 f4       	brcc	.+14     	; 0x3b22 <handle_message_length_1+0x114>
    3b14:	e4 34       	cpi	r30, 0x44	; 68
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <handle_message_length_1+0x10c>
    3b18:	af c1       	rjmp	.+862    	; 0x3e78 <handle_message_length_1+0x46a>
    3b1a:	e5 34       	cpi	r30, 0x45	; 69
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <handle_message_length_1+0x112>
    3b1e:	45 c3       	rjmp	.+1674   	; 0x41aa <__stack+0x1ab>
    3b20:	b0 c1       	rjmp	.+864    	; 0x3e82 <handle_message_length_1+0x474>
    3b22:	e7 34       	cpi	r30, 0x47	; 71
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <handle_message_length_1+0x11a>
    3b26:	b7 c1       	rjmp	.+878    	; 0x3e96 <handle_message_length_1+0x488>
    3b28:	e0 35       	cpi	r30, 0x50	; 80
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <handle_message_length_1+0x120>
    3b2c:	3e c3       	rjmp	.+1660   	; 0x41aa <__stack+0x1ab>
    3b2e:	bd c1       	rjmp	.+890    	; 0x3eaa <handle_message_length_1+0x49c>
    3b30:	e1 39       	cpi	r30, 0x91	; 145
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <handle_message_length_1+0x128>
    3b34:	c8 c1       	rjmp	.+912    	; 0x3ec6 <handle_message_length_1+0x4b8>
    3b36:	e2 39       	cpi	r30, 0x92	; 146
    3b38:	38 f4       	brcc	.+14     	; 0x3b48 <handle_message_length_1+0x13a>
    3b3a:	e0 37       	cpi	r30, 0x70	; 112
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <handle_message_length_1+0x132>
    3b3e:	bb c1       	rjmp	.+886    	; 0x3eb6 <handle_message_length_1+0x4a8>
    3b40:	e0 39       	cpi	r30, 0x90	; 144
    3b42:	09 f0       	breq	.+2      	; 0x3b46 <handle_message_length_1+0x138>
    3b44:	32 c3       	rjmp	.+1636   	; 0x41aa <__stack+0x1ab>
    3b46:	ba c1       	rjmp	.+884    	; 0x3ebc <handle_message_length_1+0x4ae>
    3b48:	e2 39       	cpi	r30, 0x92	; 146
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <handle_message_length_1+0x140>
    3b4c:	c1 c1       	rjmp	.+898    	; 0x3ed0 <handle_message_length_1+0x4c2>
    3b4e:	e3 39       	cpi	r30, 0x93	; 147
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <handle_message_length_1+0x146>
    3b52:	2b c3       	rjmp	.+1622   	; 0x41aa <__stack+0x1ab>
    3b54:	c2 c1       	rjmp	.+900    	; 0x3eda <handle_message_length_1+0x4cc>
    3b56:	ea 39       	cpi	r30, 0x9A	; 154
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <handle_message_length_1+0x14e>
    3b5a:	e2 c1       	rjmp	.+964    	; 0x3f20 <handle_message_length_1+0x512>
    3b5c:	eb 39       	cpi	r30, 0x9B	; 155
    3b5e:	98 f4       	brcc	.+38     	; 0x3b86 <handle_message_length_1+0x178>
    3b60:	e7 39       	cpi	r30, 0x97	; 151
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <handle_message_length_1+0x158>
    3b64:	ce c1       	rjmp	.+924    	; 0x3f02 <handle_message_length_1+0x4f4>
    3b66:	e8 39       	cpi	r30, 0x98	; 152
    3b68:	38 f4       	brcc	.+14     	; 0x3b78 <handle_message_length_1+0x16a>
    3b6a:	e5 39       	cpi	r30, 0x95	; 149
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <handle_message_length_1+0x162>
    3b6e:	bf c1       	rjmp	.+894    	; 0x3eee <handle_message_length_1+0x4e0>
    3b70:	e6 39       	cpi	r30, 0x96	; 150
    3b72:	09 f0       	breq	.+2      	; 0x3b76 <handle_message_length_1+0x168>
    3b74:	1a c3       	rjmp	.+1588   	; 0x41aa <__stack+0x1ab>
    3b76:	c0 c1       	rjmp	.+896    	; 0x3ef8 <handle_message_length_1+0x4ea>
    3b78:	e8 39       	cpi	r30, 0x98	; 152
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <handle_message_length_1+0x170>
    3b7c:	c7 c1       	rjmp	.+910    	; 0x3f0c <handle_message_length_1+0x4fe>
    3b7e:	e9 39       	cpi	r30, 0x99	; 153
    3b80:	09 f0       	breq	.+2      	; 0x3b84 <handle_message_length_1+0x176>
    3b82:	13 c3       	rjmp	.+1574   	; 0x41aa <__stack+0x1ab>
    3b84:	c8 c1       	rjmp	.+912    	; 0x3f16 <handle_message_length_1+0x508>
    3b86:	ed 39       	cpi	r30, 0x9D	; 157
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <handle_message_length_1+0x17e>
    3b8a:	d9 c1       	rjmp	.+946    	; 0x3f3e <handle_message_length_1+0x530>
    3b8c:	ee 39       	cpi	r30, 0x9E	; 158
    3b8e:	38 f4       	brcc	.+14     	; 0x3b9e <handle_message_length_1+0x190>
    3b90:	eb 39       	cpi	r30, 0x9B	; 155
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <handle_message_length_1+0x188>
    3b94:	ca c1       	rjmp	.+916    	; 0x3f2a <handle_message_length_1+0x51c>
    3b96:	ec 39       	cpi	r30, 0x9C	; 156
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <handle_message_length_1+0x18e>
    3b9a:	07 c3       	rjmp	.+1550   	; 0x41aa <__stack+0x1ab>
    3b9c:	cb c1       	rjmp	.+918    	; 0x3f34 <handle_message_length_1+0x526>
    3b9e:	ef 39       	cpi	r30, 0x9F	; 159
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <handle_message_length_1+0x196>
    3ba2:	d7 c1       	rjmp	.+942    	; 0x3f52 <handle_message_length_1+0x544>
    3ba4:	ef 39       	cpi	r30, 0x9F	; 159
    3ba6:	08 f4       	brcc	.+2      	; 0x3baa <handle_message_length_1+0x19c>
    3ba8:	cf c1       	rjmp	.+926    	; 0x3f48 <handle_message_length_1+0x53a>
    3baa:	ef 3f       	cpi	r30, 0xFF	; 255
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <handle_message_length_1+0x1a2>
    3bae:	fd c2       	rjmp	.+1530   	; 0x41aa <__stack+0x1ab>
    3bb0:	77 c1       	rjmp	.+750    	; 0x3ea0 <handle_message_length_1+0x492>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    3bb2:	10 92 ef 24 	sts	0x24EF, r1
			func_read_index_y = 0;
    3bb6:	10 92 f0 24 	sts	0x24F0, r1
            Stop = 0;
    3bba:	10 92 9c 20 	sts	0x209C, r1
			next_block_x = 1;
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	80 93 a1 20 	sts	0x20A1, r24
			next_block_y = 1;
    3bc4:	80 93 a2 20 	sts	0x20A2, r24
            display_flag = 0;  //clear the display flag
    3bc8:	10 92 e8 24 	sts	0x24E8, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3bcc:	80 ea       	ldi	r24, 0xA0	; 160
    3bce:	95 e1       	ldi	r25, 0x15	; 21
    3bd0:	4e e4       	ldi	r20, 0x4E	; 78
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	21 e0       	ldi	r18, 0x01	; 1
    3bda:	01 e0       	ldi	r16, 0x01	; 1
    3bdc:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    3be0:	8c e6       	ldi	r24, 0x6C	; 108
    3be2:	99 e0       	ldi	r25, 0x09	; 9
    3be4:	4e e4       	ldi	r20, 0x4E	; 78
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	22 e0       	ldi	r18, 0x02	; 2
    3bee:	00 e0       	ldi	r16, 0x00	; 0
    3bf0:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    3bf4:	84 ea       	ldi	r24, 0xA4	; 164
    3bf6:	99 e0       	ldi	r25, 0x09	; 9
    3bf8:	4e e4       	ldi	r20, 0x4E	; 78
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	23 e0       	ldi	r18, 0x03	; 3
    3c02:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
                                                                //by the Update_display interupt.
			if (default_func_x)
    3c06:	80 91 a3 20 	lds	r24, 0x20A3
    3c0a:	40 91 a5 20 	lds	r20, 0x20A5
    3c0e:	50 91 a6 20 	lds	r21, 0x20A6
    3c12:	88 23       	and	r24, r24
    3c14:	31 f0       	breq	.+12     	; 0x3c22 <handle_message_length_1+0x214>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3c16:	60 e0       	ldi	r22, 0x00	; 0
    3c18:	70 e0       	ldi	r23, 0x00	; 0
    3c1a:	88 e6       	ldi	r24, 0x68	; 104
    3c1c:	9e e0       	ldi	r25, 0x0E	; 14
    3c1e:	24 e0       	ldi	r18, 0x04	; 4
    3c20:	06 c0       	rjmp	.+12     	; 0x3c2e <handle_message_length_1+0x220>
			else
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    3c22:	60 e0       	ldi	r22, 0x00	; 0
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	88 e6       	ldi	r24, 0x68	; 104
    3c28:	9e e0       	ldi	r25, 0x0E	; 14
    3c2a:	24 e0       	ldi	r18, 0x04	; 4
    3c2c:	01 e0       	ldi	r16, 0x01	; 1
    3c2e:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			if (default_func_y)
    3c32:	80 91 a4 20 	lds	r24, 0x20A4
    3c36:	40 91 a7 20 	lds	r20, 0x20A7
    3c3a:	50 91 a8 20 	lds	r21, 0x20A8
    3c3e:	88 23       	and	r24, r24
    3c40:	39 f0       	breq	.+14     	; 0x3c50 <handle_message_length_1+0x242>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	88 e9       	ldi	r24, 0x98	; 152
    3c48:	9d e0       	ldi	r25, 0x0D	; 13
    3c4a:	25 e0       	ldi	r18, 0x05	; 5
    3c4c:	00 e0       	ldi	r16, 0x00	; 0
    3c4e:	06 c0       	rjmp	.+12     	; 0x3c5c <handle_message_length_1+0x24e>
			else
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	70 e0       	ldi	r23, 0x00	; 0
    3c54:	88 e9       	ldi	r24, 0x98	; 152
    3c56:	9d e0       	ldi	r25, 0x0D	; 13
    3c58:	25 e0       	ldi	r18, 0x05	; 5
    3c5a:	01 e0       	ldi	r16, 0x01	; 1
    3c5c:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
    3c60:	aa c2       	rjmp	.+1364   	; 0x41b6 <__stack+0x1b7>
			break;
            
        case 0x30: //stop display
            Stop = 1;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3c68:	80 ea       	ldi	r24, 0xA0	; 160
    3c6a:	95 e1       	ldi	r25, 0x15	; 21
    3c6c:	4e e4       	ldi	r20, 0x4E	; 78
    3c6e:	50 e0       	ldi	r21, 0x00	; 0
    3c70:	60 e0       	ldi	r22, 0x00	; 0
    3c72:	70 e0       	ldi	r23, 0x00	; 0
    3c74:	21 e0       	ldi	r18, 0x01	; 1
    3c76:	00 e0       	ldi	r16, 0x00	; 0
    3c78:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3c7c:	8c e6       	ldi	r24, 0x6C	; 108
    3c7e:	99 e0       	ldi	r25, 0x09	; 9
    3c80:	4e e4       	ldi	r20, 0x4E	; 78
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	22 e0       	ldi	r18, 0x02	; 2
    3c8a:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3c8e:	84 ea       	ldi	r24, 0xA4	; 164
    3c90:	99 e0       	ldi	r25, 0x09	; 9
    3c92:	4e e4       	ldi	r20, 0x4E	; 78
    3c94:	50 e0       	ldi	r21, 0x00	; 0
    3c96:	60 e0       	ldi	r22, 0x00	; 0
    3c98:	70 e0       	ldi	r23, 0x00	; 0
    3c9a:	23 e0       	ldi	r18, 0x03	; 3
    3c9c:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3ca0:	40 91 a5 20 	lds	r20, 0x20A5
    3ca4:	50 91 a6 20 	lds	r21, 0x20A6
    3ca8:	60 e0       	ldi	r22, 0x00	; 0
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	88 e6       	ldi	r24, 0x68	; 104
    3cae:	9e e0       	ldi	r25, 0x0E	; 14
    3cb0:	24 e0       	ldi	r18, 0x04	; 4
    3cb2:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3cb6:	40 91 a7 20 	lds	r20, 0x20A7
    3cba:	50 91 a8 20 	lds	r21, 0x20A8
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	70 e0       	ldi	r23, 0x00	; 0
    3cc2:	88 e9       	ldi	r24, 0x98	; 152
    3cc4:	9d e0       	ldi	r25, 0x0D	; 13
    3cc6:	25 e0       	ldi	r18, 0x05	; 5
    3cc8:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			if (default_func_x == 0)
    3ccc:	80 91 a3 20 	lds	r24, 0x20A3
    3cd0:	88 23       	and	r24, r24
    3cd2:	21 f4       	brne	.+8      	; 0x3cdc <handle_message_length_1+0x2ce>
				fetch_update_funcX(1,0);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <fetch_update_funcX>
			if (default_func_y == 0)	
    3cdc:	80 91 a4 20 	lds	r24, 0x20A4
    3ce0:	88 23       	and	r24, r24
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <handle_message_length_1+0x2d8>
    3ce4:	68 c2       	rjmp	.+1232   	; 0x41b6 <__stack+0x1b7>
				fetch_update_funcY(1,0);
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	60 e0       	ldi	r22, 0x00	; 0
    3cea:	0e 94 10 0c 	call	0x1820	; 0x1820 <fetch_update_funcY>
    3cee:	63 c2       	rjmp	.+1222   	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    3cf0:	10 92 ef 24 	sts	0x24EF, r1
			func_read_index_y = 0;
    3cf4:	10 92 f0 24 	sts	0x24F0, r1
            Stop = 0;
    3cf8:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    3cfc:	10 92 e8 24 	sts	0x24E8, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3d00:	80 ea       	ldi	r24, 0xA0	; 160
    3d02:	95 e1       	ldi	r25, 0x15	; 21
    3d04:	4e e4       	ldi	r20, 0x4E	; 78
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	21 e0       	ldi	r18, 0x01	; 1
    3d0e:	01 e0       	ldi	r16, 0x01	; 1
    3d10:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3d14:	8c e6       	ldi	r24, 0x6C	; 108
    3d16:	99 e0       	ldi	r25, 0x09	; 9
    3d18:	4e e4       	ldi	r20, 0x4E	; 78
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	70 e0       	ldi	r23, 0x00	; 0
    3d20:	22 e0       	ldi	r18, 0x02	; 2
    3d22:	00 e0       	ldi	r16, 0x00	; 0
    3d24:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3d28:	84 ea       	ldi	r24, 0xA4	; 164
    3d2a:	99 e0       	ldi	r25, 0x09	; 9
    3d2c:	4e e4       	ldi	r20, 0x4E	; 78
    3d2e:	50 e0       	ldi	r21, 0x00	; 0
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	23 e0       	ldi	r18, 0x03	; 3
    3d36:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			if (default_func_x)
    3d3a:	80 91 a3 20 	lds	r24, 0x20A3
    3d3e:	40 91 a5 20 	lds	r20, 0x20A5
    3d42:	50 91 a6 20 	lds	r21, 0x20A6
    3d46:	88 23       	and	r24, r24
    3d48:	31 f0       	breq	.+12     	; 0x3d56 <handle_message_length_1+0x348>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3d4a:	60 e0       	ldi	r22, 0x00	; 0
    3d4c:	70 e0       	ldi	r23, 0x00	; 0
    3d4e:	88 e6       	ldi	r24, 0x68	; 104
    3d50:	9e e0       	ldi	r25, 0x0E	; 14
    3d52:	24 e0       	ldi	r18, 0x04	; 4
    3d54:	06 c0       	rjmp	.+12     	; 0x3d62 <handle_message_length_1+0x354>
			else
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	88 e6       	ldi	r24, 0x68	; 104
    3d5c:	9e e0       	ldi	r25, 0x0E	; 14
    3d5e:	24 e0       	ldi	r18, 0x04	; 4
    3d60:	01 e0       	ldi	r16, 0x01	; 1
    3d62:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			if (default_func_y)
    3d66:	80 91 a4 20 	lds	r24, 0x20A4
    3d6a:	40 91 a7 20 	lds	r20, 0x20A7
    3d6e:	50 91 a8 20 	lds	r21, 0x20A8
    3d72:	88 23       	and	r24, r24
    3d74:	39 f0       	breq	.+14     	; 0x3d84 <handle_message_length_1+0x376>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	88 e9       	ldi	r24, 0x98	; 152
    3d7c:	9d e0       	ldi	r25, 0x0D	; 13
    3d7e:	25 e0       	ldi	r18, 0x05	; 5
    3d80:	00 e0       	ldi	r16, 0x00	; 0
    3d82:	06 c0       	rjmp	.+12     	; 0x3d90 <handle_message_length_1+0x382>
			else
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	70 e0       	ldi	r23, 0x00	; 0
    3d88:	88 e9       	ldi	r24, 0x98	; 152
    3d8a:	9d e0       	ldi	r25, 0x0D	; 13
    3d8c:	25 e0       	ldi	r18, 0x05	; 5
    3d8e:	01 e0       	ldi	r16, 0x01	; 1
    3d90:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
				
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    3d94:	60 91 a9 20 	lds	r22, 0x20A9
    3d98:	70 91 aa 20 	lds	r23, 0x20AA
    3d9c:	82 e1       	ldi	r24, 0x12	; 18
    3d9e:	9a e7       	ldi	r25, 0x7A	; 122
    3da0:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    3da4:	ab 01       	movw	r20, r22
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	70 e0       	ldi	r23, 0x00	; 0
    3daa:	8c e9       	ldi	r24, 0x9C	; 156
    3dac:	95 e1       	ldi	r25, 0x15	; 21
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	54 cf       	rjmp	.-344    	; 0x3c5a <handle_message_length_1+0x24c>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3db8:	80 ea       	ldi	r24, 0xA0	; 160
    3dba:	95 e1       	ldi	r25, 0x15	; 21
    3dbc:	4e e4       	ldi	r20, 0x4E	; 78
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	70 e0       	ldi	r23, 0x00	; 0
    3dc4:	21 e0       	ldi	r18, 0x01	; 1
    3dc6:	00 e0       	ldi	r16, 0x00	; 0
    3dc8:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3dcc:	8c e6       	ldi	r24, 0x6C	; 108
    3dce:	99 e0       	ldi	r25, 0x09	; 9
    3dd0:	4e e4       	ldi	r20, 0x4E	; 78
    3dd2:	50 e0       	ldi	r21, 0x00	; 0
    3dd4:	60 e0       	ldi	r22, 0x00	; 0
    3dd6:	70 e0       	ldi	r23, 0x00	; 0
    3dd8:	22 e0       	ldi	r18, 0x02	; 2
    3dda:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3dde:	84 ea       	ldi	r24, 0xA4	; 164
    3de0:	99 e0       	ldi	r25, 0x09	; 9
    3de2:	4e e4       	ldi	r20, 0x4E	; 78
    3de4:	50 e0       	ldi	r21, 0x00	; 0
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	70 e0       	ldi	r23, 0x00	; 0
    3dea:	23 e0       	ldi	r18, 0x03	; 3
    3dec:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3df0:	40 91 a5 20 	lds	r20, 0x20A5
    3df4:	50 91 a6 20 	lds	r21, 0x20A6
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	88 e6       	ldi	r24, 0x68	; 104
    3dfe:	9e e0       	ldi	r25, 0x0E	; 14
    3e00:	24 e0       	ldi	r18, 0x04	; 4
    3e02:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3e06:	40 91 a7 20 	lds	r20, 0x20A7
    3e0a:	50 91 a8 20 	lds	r21, 0x20A8
    3e0e:	60 e0       	ldi	r22, 0x00	; 0
    3e10:	70 e0       	ldi	r23, 0x00	; 0
    3e12:	88 e9       	ldi	r24, 0x98	; 152
    3e14:	9d e0       	ldi	r25, 0x0D	; 13
    3e16:	25 e0       	ldi	r18, 0x05	; 5
    3e18:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    3e1c:	20 91 a9 20 	lds	r18, 0x20A9
    3e20:	30 91 aa 20 	lds	r19, 0x20AA
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	62 e1       	ldi	r22, 0x12	; 18
    3e2a:	7a e7       	ldi	r23, 0x7A	; 122
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	0e 94 7c 5b 	call	0xb6f8	; 0xb6f8 <__divmodsi4>
    3e34:	8c e9       	ldi	r24, 0x9C	; 156
    3e36:	95 e1       	ldi	r25, 0x15	; 21
    3e38:	ba 01       	movw	r22, r20
    3e3a:	a9 01       	movw	r20, r18
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	0e 94 c3 32 	call	0x6586	; 0x6586 <Reg_Handler>
			digitalWrite(2,LOW);    //set the output to low
    3e42:	82 e0       	ldi	r24, 0x02	; 2
    3e44:	92 c0       	rjmp	.+292    	; 0x3f6a <handle_message_length_1+0x55c>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	68 e0       	ldi	r22, 0x08	; 8
    3e4a:	45 e1       	ldi	r20, 0x15	; 21
    3e4c:	55 e2       	ldi	r21, 0x25	; 37
    3e4e:	b1 c1       	rjmp	.+866    	; 0x41b2 <__stack+0x1b3>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	68 e1       	ldi	r22, 0x18	; 24
    3e54:	44 e0       	ldi	r20, 0x04	; 4
    3e56:	51 e2       	ldi	r21, 0x21	; 33
    3e58:	ac c1       	rjmp	.+856    	; 0x41b2 <__stack+0x1b3>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	68 e1       	ldi	r22, 0x18	; 24
    3e5e:	4c e1       	ldi	r20, 0x1C	; 28
    3e60:	51 e2       	ldi	r21, 0x21	; 33
    3e62:	a7 c1       	rjmp	.+846    	; 0x41b2 <__stack+0x1b3>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	68 e1       	ldi	r22, 0x18	; 24
    3e68:	44 e3       	ldi	r20, 0x34	; 52
    3e6a:	51 e2       	ldi	r21, 0x21	; 33
    3e6c:	a2 c1       	rjmp	.+836    	; 0x41b2 <__stack+0x1b3>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	68 e1       	ldi	r22, 0x18	; 24
    3e72:	4c e4       	ldi	r20, 0x4C	; 76
    3e74:	51 e2       	ldi	r21, 0x21	; 33
    3e76:	9d c1       	rjmp	.+826    	; 0x41b2 <__stack+0x1b3>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	68 e1       	ldi	r22, 0x18	; 24
    3e7c:	44 e6       	ldi	r20, 0x64	; 100
    3e7e:	51 e2       	ldi	r21, 0x21	; 33
    3e80:	98 c1       	rjmp	.+816    	; 0x41b2 <__stack+0x1b3>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	68 e1       	ldi	r22, 0x18	; 24
    3e86:	4c e7       	ldi	r20, 0x7C	; 124
    3e88:	51 e2       	ldi	r21, 0x21	; 33
    3e8a:	93 c1       	rjmp	.+806    	; 0x41b2 <__stack+0x1b3>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	68 e1       	ldi	r22, 0x18	; 24
    3e90:	44 e9       	ldi	r20, 0x94	; 148
    3e92:	51 e2       	ldi	r21, 0x21	; 33
    3e94:	8e c1       	rjmp	.+796    	; 0x41b2 <__stack+0x1b3>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	68 e1       	ldi	r22, 0x18	; 24
    3e9a:	4c ea       	ldi	r20, 0xAC	; 172
    3e9c:	51 e2       	ldi	r21, 0x21	; 33
    3e9e:	89 c1       	rjmp	.+786    	; 0x41b2 <__stack+0x1b3>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	68 e0       	ldi	r22, 0x08	; 8
    3ea4:	44 ec       	ldi	r20, 0xC4	; 196
    3ea6:	51 e2       	ldi	r21, 0x21	; 33
    3ea8:	84 c1       	rjmp	.+776    	; 0x41b2 <__stack+0x1b3>
        case 0x50:  ledBlink(); break;
    3eaa:	0e 94 7e 24 	call	0x48fc	; 0x48fc <ledBlink>
    3eae:	83 c1       	rjmp	.+774    	; 0x41b6 <__stack+0x1b7>
        case 0x60:  SystemReset();  break;
    3eb0:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <SystemReset>
    3eb4:	80 c1       	rjmp	.+768    	; 0x41b6 <__stack+0x1b7>
        case 0x70:  benchmark_pattern(); break;
    3eb6:	0e 94 81 1a 	call	0x3502	; 0x3502 <benchmark_pattern>
    3eba:	7d c1       	rjmp	.+762    	; 0x41b6 <__stack+0x1b7>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	60 e2       	ldi	r22, 0x20	; 32
    3ec0:	4c ec       	ldi	r20, 0xCC	; 204
    3ec2:	51 e2       	ldi	r21, 0x21	; 33
    3ec4:	76 c1       	rjmp	.+748    	; 0x41b2 <__stack+0x1b3>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	60 e2       	ldi	r22, 0x20	; 32
    3eca:	4c ee       	ldi	r20, 0xEC	; 236
    3ecc:	51 e2       	ldi	r21, 0x21	; 33
    3ece:	71 c1       	rjmp	.+738    	; 0x41b2 <__stack+0x1b3>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	60 e2       	ldi	r22, 0x20	; 32
    3ed4:	4c e0       	ldi	r20, 0x0C	; 12
    3ed6:	52 e2       	ldi	r21, 0x22	; 34
    3ed8:	6c c1       	rjmp	.+728    	; 0x41b2 <__stack+0x1b3>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	60 e2       	ldi	r22, 0x20	; 32
    3ede:	4c e2       	ldi	r20, 0x2C	; 44
    3ee0:	52 e2       	ldi	r21, 0x22	; 34
    3ee2:	67 c1       	rjmp	.+718    	; 0x41b2 <__stack+0x1b3>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	60 e2       	ldi	r22, 0x20	; 32
    3ee8:	4c e4       	ldi	r20, 0x4C	; 76
    3eea:	52 e2       	ldi	r21, 0x22	; 34
    3eec:	62 c1       	rjmp	.+708    	; 0x41b2 <__stack+0x1b3>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	60 e2       	ldi	r22, 0x20	; 32
    3ef2:	4c e6       	ldi	r20, 0x6C	; 108
    3ef4:	52 e2       	ldi	r21, 0x22	; 34
    3ef6:	5d c1       	rjmp	.+698    	; 0x41b2 <__stack+0x1b3>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	60 e2       	ldi	r22, 0x20	; 32
    3efc:	4c e8       	ldi	r20, 0x8C	; 140
    3efe:	52 e2       	ldi	r21, 0x22	; 34
    3f00:	58 c1       	rjmp	.+688    	; 0x41b2 <__stack+0x1b3>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	60 e2       	ldi	r22, 0x20	; 32
    3f06:	4c ea       	ldi	r20, 0xAC	; 172
    3f08:	52 e2       	ldi	r21, 0x22	; 34
    3f0a:	53 c1       	rjmp	.+678    	; 0x41b2 <__stack+0x1b3>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	60 e2       	ldi	r22, 0x20	; 32
    3f10:	4c ec       	ldi	r20, 0xCC	; 204
    3f12:	52 e2       	ldi	r21, 0x22	; 34
    3f14:	4e c1       	rjmp	.+668    	; 0x41b2 <__stack+0x1b3>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	60 e2       	ldi	r22, 0x20	; 32
    3f1a:	4c ee       	ldi	r20, 0xEC	; 236
    3f1c:	52 e2       	ldi	r21, 0x22	; 34
    3f1e:	49 c1       	rjmp	.+658    	; 0x41b2 <__stack+0x1b3>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	60 e2       	ldi	r22, 0x20	; 32
    3f24:	4c e0       	ldi	r20, 0x0C	; 12
    3f26:	53 e2       	ldi	r21, 0x23	; 35
    3f28:	44 c1       	rjmp	.+648    	; 0x41b2 <__stack+0x1b3>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	60 e2       	ldi	r22, 0x20	; 32
    3f2e:	4c e2       	ldi	r20, 0x2C	; 44
    3f30:	53 e2       	ldi	r21, 0x23	; 35
    3f32:	3f c1       	rjmp	.+638    	; 0x41b2 <__stack+0x1b3>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	60 e2       	ldi	r22, 0x20	; 32
    3f38:	4c e4       	ldi	r20, 0x4C	; 76
    3f3a:	53 e2       	ldi	r21, 0x23	; 35
    3f3c:	3a c1       	rjmp	.+628    	; 0x41b2 <__stack+0x1b3>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	60 e2       	ldi	r22, 0x20	; 32
    3f42:	4c e6       	ldi	r20, 0x6C	; 108
    3f44:	53 e2       	ldi	r21, 0x23	; 35
    3f46:	35 c1       	rjmp	.+618    	; 0x41b2 <__stack+0x1b3>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	60 e2       	ldi	r22, 0x20	; 32
    3f4c:	4c e8       	ldi	r20, 0x8C	; 140
    3f4e:	53 e2       	ldi	r21, 0x23	; 35
    3f50:	30 c1       	rjmp	.+608    	; 0x41b2 <__stack+0x1b3>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	60 e2       	ldi	r22, 0x20	; 32
    3f56:	4c ea       	ldi	r20, 0xAC	; 172
    3f58:	53 e2       	ldi	r21, 0x23	; 35
    3f5a:	2b c1       	rjmp	.+598    	; 0x41b2 <__stack+0x1b3>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	80 93 ea 24 	sts	0x24EA, r24
    3f62:	29 c1       	rjmp	.+594    	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    3f64:	10 92 ea 24 	sts	0x24EA, r1
            // turn off the lines that may be connected
            digitalWrite(0, LOW);
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <digitalWrite>
    3f70:	22 c1       	rjmp	.+580    	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	80 93 9f 29 	sts	0x299F, r24
    3f78:	1e c1       	rjmp	.+572    	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    3f7a:	10 92 9f 29 	sts	0x299F, r1
    3f7e:	1b c1       	rjmp	.+566    	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    3f80:	0e 94 4b 0b 	call	0x1696	; 0x1696 <dump_mat>
    3f84:	18 c1       	rjmp	.+560    	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    3f86:	00 d0       	rcall	.+0      	; 0x3f88 <handle_message_length_1+0x57a>
    3f88:	0f 92       	push	r0
    3f8a:	87 e2       	ldi	r24, 0x27	; 39
    3f8c:	9b e0       	ldi	r25, 0x0B	; 11
    3f8e:	ad b7       	in	r26, 0x3d	; 61
    3f90:	be b7       	in	r27, 0x3e	; 62
    3f92:	11 96       	adiw	r26, 0x01	; 1
    3f94:	8d 93       	st	X+, r24
    3f96:	9c 93       	st	X, r25
    3f98:	12 97       	sbiw	r26, 0x02	; 2
    3f9a:	8c ec       	ldi	r24, 0xCC	; 204
    3f9c:	93 e2       	ldi	r25, 0x23	; 35
    3f9e:	13 96       	adiw	r26, 0x03	; 3
    3fa0:	8d 93       	st	X+, r24
    3fa2:	9c 93       	st	X, r25
    3fa4:	14 97       	sbiw	r26, 0x04	; 4
    3fa6:	fa c0       	rjmp	.+500    	; 0x419c <__stack+0x19d>
            break;
    3fa8:	57 e3       	ldi	r21, 0x37	; 55
    3faa:	e5 2e       	mov	r14, r21
    3fac:	57 e2       	ldi	r21, 0x27	; 39
    3fae:	f5 2e       	mov	r15, r21
    3fb0:	11 e0       	ldi	r17, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3fb2:	0e ef       	ldi	r16, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    3fb4:	6e 01       	movw	r12, r28
    3fb6:	08 94       	sec
    3fb8:	c1 1c       	adc	r12, r1
    3fba:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3fbc:	09 83       	std	Y+1, r16	; 0x01
    3fbe:	f7 01       	movw	r30, r14
    3fc0:	81 91       	ld	r24, Z+
    3fc2:	7f 01       	movw	r14, r30
    3fc4:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    3fc6:	81 2f       	mov	r24, r17
    3fc8:	62 e0       	ldi	r22, 0x02	; 2
    3fca:	a6 01       	movw	r20, r12
    3fcc:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    3fd0:	1f 5f       	subi	r17, 0xFF	; 255
    3fd2:	11 38       	cpi	r17, 0x81	; 129
    3fd4:	99 f7       	brne	.-26     	; 0x3fbc <handle_message_length_1+0x5ae>
    3fd6:	ef c0       	rjmp	.+478    	; 0x41b6 <__stack+0x1b7>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	80 93 b3 20 	sts	0x20B3, r24
    3fde:	eb c0       	rjmp	.+470    	; 0x41b6 <__stack+0x1b7>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    3fe0:	10 92 b3 20 	sts	0x20B3, r1
    3fe4:	e8 c0       	rjmp	.+464    	; 0x41b6 <__stack+0x1b7>
            break;
			  
        case 0x19:  // update GUI information
            xprintf(PSTR("update: %d %d %d %d %d %d %d %d:\n"), gain_x, bias_x, X_pos_index, x_mode, gain_y, bias_y, Y_pos_index, y_mode);
    3fe6:	8d b7       	in	r24, 0x3d	; 61
    3fe8:	9e b7       	in	r25, 0x3e	; 62
    3fea:	42 97       	sbiw	r24, 0x12	; 18
    3fec:	8d bf       	out	0x3d, r24	; 61
    3fee:	9e bf       	out	0x3e, r25	; 62
    3ff0:	ed b7       	in	r30, 0x3d	; 61
    3ff2:	fe b7       	in	r31, 0x3e	; 62
    3ff4:	31 96       	adiw	r30, 0x01	; 1
    3ff6:	85 e0       	ldi	r24, 0x05	; 5
    3ff8:	9b e0       	ldi	r25, 0x0B	; 11
    3ffa:	ad b7       	in	r26, 0x3d	; 61
    3ffc:	be b7       	in	r27, 0x3e	; 62
    3ffe:	11 96       	adiw	r26, 0x01	; 1
    4000:	8d 93       	st	X+, r24
    4002:	9c 93       	st	X, r25
    4004:	12 97       	sbiw	r26, 0x02	; 2
    4006:	80 91 02 28 	lds	r24, 0x2802
    400a:	99 27       	eor	r25, r25
    400c:	87 fd       	sbrc	r24, 7
    400e:	90 95       	com	r25
    4010:	82 83       	std	Z+2, r24	; 0x02
    4012:	93 83       	std	Z+3, r25	; 0x03
    4014:	80 91 9b 25 	lds	r24, 0x259B
    4018:	99 27       	eor	r25, r25
    401a:	87 fd       	sbrc	r24, 7
    401c:	90 95       	com	r25
    401e:	84 83       	std	Z+4, r24	; 0x04
    4020:	95 83       	std	Z+5, r25	; 0x05
    4022:	80 91 04 27 	lds	r24, 0x2704
    4026:	90 91 05 27 	lds	r25, 0x2705
    402a:	86 83       	std	Z+6, r24	; 0x06
    402c:	97 83       	std	Z+7, r25	; 0x07
    402e:	80 91 b7 27 	lds	r24, 0x27B7
    4032:	80 87       	std	Z+8, r24	; 0x08
    4034:	11 86       	std	Z+9, r1	; 0x09
    4036:	80 91 bb 27 	lds	r24, 0x27BB
    403a:	99 27       	eor	r25, r25
    403c:	87 fd       	sbrc	r24, 7
    403e:	90 95       	com	r25
    4040:	82 87       	std	Z+10, r24	; 0x0a
    4042:	93 87       	std	Z+11, r25	; 0x0b
    4044:	80 91 d2 2b 	lds	r24, 0x2BD2
    4048:	99 27       	eor	r25, r25
    404a:	87 fd       	sbrc	r24, 7
    404c:	90 95       	com	r25
    404e:	84 87       	std	Z+12, r24	; 0x0c
    4050:	95 87       	std	Z+13, r25	; 0x0d
    4052:	80 91 76 26 	lds	r24, 0x2676
    4056:	90 91 77 26 	lds	r25, 0x2677
    405a:	86 87       	std	Z+14, r24	; 0x0e
    405c:	97 87       	std	Z+15, r25	; 0x0f
    405e:	80 91 01 28 	lds	r24, 0x2801
    4062:	80 8b       	std	Z+16, r24	; 0x10
    4064:	11 8a       	std	Z+17, r1	; 0x11
    4066:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    406a:	ed b7       	in	r30, 0x3d	; 61
    406c:	fe b7       	in	r31, 0x3e	; 62
    406e:	72 96       	adiw	r30, 0x12	; 18
    4070:	ed bf       	out	0x3d, r30	; 61
    4072:	fe bf       	out	0x3e, r31	; 62
    4074:	a0 c0       	rjmp	.+320    	; 0x41b6 <__stack+0x1b7>
          break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	6f ef       	ldi	r22, 0xFF	; 255
    407c:	0e 94 32 60 	call	0xc064	; 0xc064 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    4080:	0f 92       	push	r0
    4082:	0f 92       	push	r0
    4084:	83 ed       	ldi	r24, 0xD3	; 211
    4086:	9a e0       	ldi	r25, 0x0A	; 10
    4088:	12 c0       	rjmp	.+36     	; 0x40ae <__stack+0xaf>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	0e 94 32 60 	call	0xc064	; 0xc064 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    4094:	0f 92       	push	r0
    4096:	0f 92       	push	r0
    4098:	81 ea       	ldi	r24, 0xA1	; 161
    409a:	9a e0       	ldi	r25, 0x0A	; 10
    409c:	16 c0       	rjmp	.+44     	; 0x40ca <__stack+0xcb>
			break;
            
			
		case 0x23: //using Int3 external trigger mode
			PORTK.INT0MASK = 0x08;      //Int3 is used as source for port interrupt 0
    409e:	88 e0       	ldi	r24, 0x08	; 8
    40a0:	e0 e2       	ldi	r30, 0x20	; 32
    40a2:	f7 e0       	ldi	r31, 0x07	; 7
    40a4:	82 87       	std	Z+10, r24	; 0x0a
			xprintf(PSTR("Enabled Int3 external trigger mode is on!\n"));
    40a6:	0f 92       	push	r0
    40a8:	0f 92       	push	r0
    40aa:	86 e7       	ldi	r24, 0x76	; 118
    40ac:	9a e0       	ldi	r25, 0x0A	; 10
    40ae:	ad b7       	in	r26, 0x3d	; 61
    40b0:	be b7       	in	r27, 0x3e	; 62
    40b2:	11 96       	adiw	r26, 0x01	; 1
    40b4:	8d 93       	st	X+, r24
    40b6:	9c 93       	st	X, r25
    40b8:	12 97       	sbiw	r26, 0x02	; 2
    40ba:	0b c0       	rjmp	.+22     	; 0x40d2 <__stack+0xd3>
			break;
			
		case 0x24: //disable int3 external trigger mode
			PORTK.INT0MASK = 0x00;      //Int3 is used as source for port interrupt 0
    40bc:	e0 e2       	ldi	r30, 0x20	; 32
    40be:	f7 e0       	ldi	r31, 0x07	; 7
    40c0:	12 86       	std	Z+10, r1	; 0x0a
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
    40c2:	0f 92       	push	r0
    40c4:	0f 92       	push	r0
    40c6:	80 e5       	ldi	r24, 0x50	; 80
    40c8:	9a e0       	ldi	r25, 0x0A	; 10
    40ca:	ed b7       	in	r30, 0x3d	; 61
    40cc:	fe b7       	in	r31, 0x3e	; 62
    40ce:	81 83       	std	Z+1, r24	; 0x01
    40d0:	92 83       	std	Z+2, r25	; 0x02
    40d2:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	6d c0       	rjmp	.+218    	; 0x41b6 <__stack+0x1b7>
			break;		
    40dc:	99 24       	eor	r9, r9
    40de:	ee 24       	eor	r14, r14
    40e0:	ff 24       	eor	r15, r15
    40e2:	87 01       	movw	r16, r14
    40e4:	aa 24       	eor	r10, r10
    40e6:	bb 24       	eor	r11, r11
    40e8:	65 01       	movw	r12, r10
    40ea:	40 e4       	ldi	r20, 0x40	; 64
    40ec:	64 2e       	mov	r6, r20
    40ee:	4c e9       	ldi	r20, 0x9C	; 156
    40f0:	74 2e       	mov	r7, r20

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
			   tmp_x += analogRead(2);
    40f2:	82 e0       	ldi	r24, 0x02	; 2
    40f4:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
    40f8:	aa 27       	eor	r26, r26
    40fa:	97 fd       	sbrc	r25, 7
    40fc:	a0 95       	com	r26
    40fe:	ba 2f       	mov	r27, r26
    4100:	e8 0e       	add	r14, r24
    4102:	f9 1e       	adc	r15, r25
    4104:	0a 1f       	adc	r16, r26
    4106:	1b 1f       	adc	r17, r27
			   tmp_y += analogRead(3);
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
    410e:	aa 27       	eor	r26, r26
    4110:	97 fd       	sbrc	r25, 7
    4112:	a0 95       	com	r26
    4114:	ba 2f       	mov	r27, r26
    4116:	a8 0e       	add	r10, r24
    4118:	b9 1e       	adc	r11, r25
    411a:	ca 1e       	adc	r12, r26
    411c:	db 1e       	adc	r13, r27
    411e:	c3 01       	movw	r24, r6
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	f1 f7       	brne	.-4      	; 0x4120 <__stack+0x121>
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
			break;		

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
    4124:	93 94       	inc	r9
    4126:	f4 e6       	ldi	r31, 0x64	; 100
    4128:	9f 16       	cp	r9, r31
    412a:	19 f7       	brne	.-58     	; 0x40f2 <__stack+0xf3>
			   tmp_x += analogRead(2);
			   tmp_y += analogRead(3);
			   _delay_ms(5);
			};
			resolution_x  =  tmp_x / n_sample;
    412c:	c8 01       	movw	r24, r16
    412e:	b7 01       	movw	r22, r14
    4130:	24 e6       	ldi	r18, 0x64	; 100
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e0       	ldi	r20, 0x00	; 0
    4136:	50 e0       	ldi	r21, 0x00	; 0
    4138:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    413c:	20 93 9d 20 	sts	0x209D, r18
    4140:	30 93 9e 20 	sts	0x209E, r19
			resolution_y  =  tmp_y / n_sample;
    4144:	c6 01       	movw	r24, r12
    4146:	b5 01       	movw	r22, r10
    4148:	24 e6       	ldi	r18, 0x64	; 100
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e0       	ldi	r20, 0x00	; 0
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    4154:	20 93 9f 20 	sts	0x209F, r18
    4158:	30 93 a0 20 	sts	0x20A0, r19
			xprintf(PSTR("resolution_x =  %d:\n"), resolution_x);
    415c:	00 d0       	rcall	.+0      	; 0x415e <__stack+0x15f>
    415e:	0f 92       	push	r0
    4160:	8b e3       	ldi	r24, 0x3B	; 59
    4162:	9a e0       	ldi	r25, 0x0A	; 10
    4164:	ad b7       	in	r26, 0x3d	; 61
    4166:	be b7       	in	r27, 0x3e	; 62
    4168:	11 96       	adiw	r26, 0x01	; 1
    416a:	8d 93       	st	X+, r24
    416c:	9c 93       	st	X, r25
    416e:	12 97       	sbiw	r26, 0x02	; 2
    4170:	80 91 9d 20 	lds	r24, 0x209D
    4174:	90 91 9e 20 	lds	r25, 0x209E
    4178:	13 96       	adiw	r26, 0x03	; 3
    417a:	8d 93       	st	X+, r24
    417c:	9c 93       	st	X, r25
    417e:	14 97       	sbiw	r26, 0x04	; 4
    4180:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
			xprintf(PSTR("resolution_y =  %d:\n"), resolution_y);
    4184:	86 e2       	ldi	r24, 0x26	; 38
    4186:	9a e0       	ldi	r25, 0x0A	; 10
    4188:	ed b7       	in	r30, 0x3d	; 61
    418a:	fe b7       	in	r31, 0x3e	; 62
    418c:	81 83       	std	Z+1, r24	; 0x01
    418e:	92 83       	std	Z+2, r25	; 0x02
    4190:	80 91 9f 20 	lds	r24, 0x209F
    4194:	90 91 a0 20 	lds	r25, 0x20A0
    4198:	83 83       	std	Z+3, r24	; 0x03
    419a:	94 83       	std	Z+4, r25	; 0x04
    419c:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	06 c0       	rjmp	.+12     	; 0x41b6 <__stack+0x1b7>
			break;
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	68 e0       	ldi	r22, 0x08	; 8
    41ae:	48 ec       	ldi	r20, 0xC8	; 200
    41b0:	50 e2       	ldi	r21, 0x20	; 32
    41b2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    }
}
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	df 90       	pop	r13
    41c8:	cf 90       	pop	r12
    41ca:	bf 90       	pop	r11
    41cc:	af 90       	pop	r10
    41ce:	9f 90       	pop	r9
    41d0:	7f 90       	pop	r7
    41d2:	6f 90       	pop	r6
    41d4:	08 95       	ret

000041d6 <main>:
}




int main(void) {
    41d6:	a0 e5       	ldi	r26, 0x50	; 80
    41d8:	b6 e0       	ldi	r27, 0x06	; 6
    41da:	e1 ef       	ldi	r30, 0xF1	; 241
    41dc:	f0 e2       	ldi	r31, 0x20	; 32
    41de:	0c 94 9d 5b 	jmp	0xb73a	; 0xb73a <__prologue_saves__+0xc>
	uint8_t rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t frame_num_old = 999;  //just chosen at random
	uint8_t func_idx_x_old = 199;
	uint8_t func_idx_y_old = 199;
	
	workingModes = eeprom_read_byte(work_mode);
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 22 60 	call	0xc044	; 0xc044 <__eerd_byte_x128a1>
    41ea:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    41ec:	88 e7       	ldi	r24, 0x78	; 120
    41ee:	96 e2       	ldi	r25, 0x26	; 38
    41f0:	6e 2d       	mov	r22, r14
    41f2:	0e 94 67 34 	call	0x68ce	; 0x68ce <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    41f6:	80 e9       	ldi	r24, 0x90	; 144
    41f8:	99 e2       	ldi	r25, 0x29	; 41
    41fa:	6e 2d       	mov	r22, r14
    41fc:	0e 94 67 34 	call	0x68ce	; 0x68ce <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    4200:	86 e2       	ldi	r24, 0x26	; 38
    4202:	97 e2       	ldi	r25, 0x27	; 39
    4204:	6e 2d       	mov	r22, r14
    4206:	0e 94 67 34 	call	0x68ce	; 0x68ce <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    420a:	8c e9       	ldi	r24, 0x9C	; 156
    420c:	95 e2       	ldi	r25, 0x25	; 37
    420e:	6e 2d       	mov	r22, r14
    4210:	0e 94 67 34 	call	0x68ce	; 0x68ce <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    4214:	88 e7       	ldi	r24, 0x78	; 120
    4216:	96 e2       	ldi	r25, 0x26	; 38
    4218:	60 e8       	ldi	r22, 0x80	; 128
    421a:	74 e0       	ldi	r23, 0x04	; 4
    421c:	40 e4       	ldi	r20, 0x40	; 64
    421e:	50 e0       	ldi	r21, 0x00	; 0
    4220:	23 e2       	ldi	r18, 0x23	; 35
    4222:	0e 94 18 33 	call	0x6630	; 0x6630 <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    4226:	80 e9       	ldi	r24, 0x90	; 144
    4228:	99 e2       	ldi	r25, 0x29	; 41
    422a:	60 e9       	ldi	r22, 0x90	; 144
    422c:	74 e0       	ldi	r23, 0x04	; 4
    422e:	40 e4       	ldi	r20, 0x40	; 64
    4230:	50 e0       	ldi	r21, 0x00	; 0
    4232:	23 e2       	ldi	r18, 0x23	; 35
    4234:	0e 94 18 33 	call	0x6630	; 0x6630 <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    4238:	86 e2       	ldi	r24, 0x26	; 38
    423a:	97 e2       	ldi	r25, 0x27	; 39
    423c:	60 ea       	ldi	r22, 0xA0	; 160
    423e:	74 e0       	ldi	r23, 0x04	; 4
    4240:	40 e4       	ldi	r20, 0x40	; 64
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	23 e2       	ldi	r18, 0x23	; 35
    4246:	0e 94 18 33 	call	0x6630	; 0x6630 <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    424a:	8c e9       	ldi	r24, 0x9C	; 156
    424c:	95 e2       	ldi	r25, 0x25	; 37
    424e:	60 eb       	ldi	r22, 0xB0	; 176
    4250:	74 e0       	ldi	r23, 0x04	; 4
    4252:	40 e4       	ldi	r20, 0x40	; 64
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	23 e2       	ldi	r18, 0x23	; 35
    4258:	0e 94 18 33 	call	0x6630	; 0x6630 <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    425c:	8e 2d       	mov	r24, r14
    425e:	0e 94 0f 32 	call	0x641e	; 0x641e <createRxBuff>
    init_all();
    4262:	0e 94 65 2f 	call	0x5eca	; 0x5eca <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    4266:	88 ed       	ldi	r24, 0xD8	; 216
    4268:	90 e3       	ldi	r25, 0x30	; 48
    426a:	80 93 79 25 	sts	0x2579, r24
    426e:	90 93 7a 25 	sts	0x257A, r25
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    4276:	2a e0       	ldi	r18, 0x0A	; 10
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	fc 01       	movw	r30, r24
    427c:	e2 55       	subi	r30, 0x52	; 82
    427e:	fa 4d       	sbci	r31, 0xDA	; 218
    4280:	20 83       	st	Z, r18
    4282:	31 83       	std	Z+1, r19	; 0x01
    4284:	fc 01       	movw	r30, r24
    4286:	eb 5d       	subi	r30, 0xDB	; 219
    4288:	f7 4d       	sbci	r31, 0xD7	; 215
    428a:	20 83       	st	Z, r18
    428c:	31 83       	std	Z+1, r19	; 0x01
    428e:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    4290:	88 3c       	cpi	r24, 0xC8	; 200
    4292:	91 05       	cpc	r25, r1
    4294:	91 f7       	brne	.-28     	; 0x427a <main+0xa4>
    4296:	e7 e8       	ldi	r30, 0x87	; 135
    4298:	f6 e2       	ldi	r31, 0x26	; 38
    429a:	20 e0       	ldi	r18, 0x00	; 0
    429c:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
	        laserPattern[lcv] = 255;
    429e:	4f ef       	ldi	r20, 0xFF	; 255
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
    42a0:	23 30       	cpi	r18, 0x03	; 3
    42a2:	31 05       	cpc	r19, r1
    42a4:	20 f0       	brcs	.+8      	; 0x42ae <main+0xd8>
    42a6:	c9 01       	movw	r24, r18
    42a8:	06 97       	sbiw	r24, 0x06	; 6
    42aa:	03 97       	sbiw	r24, 0x03	; 3
    42ac:	10 f4       	brcc	.+4      	; 0x42b2 <main+0xdc>
	        laserPattern[lcv] = 255;
    42ae:	40 83       	st	Z, r20
    42b0:	01 c0       	rjmp	.+2      	; 0x42b4 <main+0xde>
		else
			laserPattern[lcv] = 0;
    42b2:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
    42b4:	2f 5f       	subi	r18, 0xFF	; 255
    42b6:	3f 4f       	sbci	r19, 0xFF	; 255
    42b8:	31 96       	adiw	r30, 0x01	; 1
    42ba:	2d 37       	cpi	r18, 0x7D	; 125
    42bc:	31 05       	cpc	r19, r1
    42be:	81 f7       	brne	.-32     	; 0x42a0 <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    42c0:	10 92 6e 29 	sts	0x296E, r1
    42c4:	10 92 6f 29 	sts	0x296F, r1
    42c8:	80 91 6e 29 	lds	r24, 0x296E
    42cc:	90 91 6f 29 	lds	r25, 0x296F
    42d0:	80 93 b9 27 	sts	0x27B9, r24
    42d4:	90 93 ba 27 	sts	0x27BA, r25
    42d8:	80 91 b9 27 	lds	r24, 0x27B9
    42dc:	90 91 ba 27 	lds	r25, 0x27BA
    42e0:	80 93 76 26 	sts	0x2676, r24
    42e4:	90 93 77 26 	sts	0x2677, r25
    42e8:	80 93 04 27 	sts	0x2704, r24
    42ec:	90 93 05 27 	sts	0x2705, r25
    bias_x = bias_y = 0;
    42f0:	10 92 d2 2b 	sts	0x2BD2, r1
    42f4:	10 92 9b 25 	sts	0x259B, r1
    gain_x = gain_y = 0;
    42f8:	10 92 bb 27 	sts	0x27BB, r1
    42fc:	10 92 02 28 	sts	0x2802, r1
    x_mode = y_mode = 0;
    4300:	10 92 01 28 	sts	0x2801, r1
    4304:	10 92 b7 27 	sts	0x27B7, r1
    gs_value = 1;
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	80 93 35 27 	sts	0x2735, r24
    row_compress = 0;
    430e:	10 92 ad 25 	sts	0x25AD, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    4312:	10 92 9f 29 	sts	0x299F, r1
    
    temp = eeprom_read_byte(arena_config);
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 22 60 	call	0xc044	; 0xc044 <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    431e:	8f 3f       	cpi	r24, 0xFF	; 255
    4320:	d9 f4       	brne	.+54     	; 0x4358 <main+0x182>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    4322:	19 82       	std	Y+1, r1	; 0x01
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    4324:	24 e0       	ldi	r18, 0x04	; 4
    4326:	14 c0       	rjmp	.+40     	; 0x4350 <main+0x17a>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    4328:	e8 2f       	mov	r30, r24
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	ea 5c       	subi	r30, 0xCA	; 202
    432e:	f8 4d       	sbci	r31, 0xD8	; 216
    4330:	98 2f       	mov	r25, r24
    4332:	93 70       	andi	r25, 0x03	; 3
    4334:	90 83       	st	Z, r25
			if (b1 && (chMap[b1] == 0))
    4336:	88 23       	and	r24, r24
    4338:	19 f0       	breq	.+6      	; 0x4340 <main+0x16a>
    433a:	99 23       	and	r25, r25
    433c:	09 f4       	brne	.+2      	; 0x4340 <main+0x16a>
				chMap[b1] = 4;
    433e:	20 83       	st	Z, r18
			adrMap[b1] = b1; // panel address identity mapping
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	e8 2f       	mov	r30, r24
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	e3 51       	subi	r30, 0x13	; 19
    4348:	f7 4d       	sbci	r31, 0xD7	; 215
    434a:	80 83       	st	Z, r24
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    434c:	8f 5f       	subi	r24, 0xFF	; 255
    434e:	89 83       	std	Y+1, r24	; 0x01
    4350:	89 81       	ldd	r24, Y+1	; 0x01
    4352:	81 38       	cpi	r24, 0x81	; 129
    4354:	48 f3       	brcs	.-46     	; 0x4328 <main+0x152>
    4356:	17 c0       	rjmp	.+46     	; 0x4386 <main+0x1b0>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    4358:	19 82       	std	Y+1, r1	; 0x01
    435a:	11 c0       	rjmp	.+34     	; 0x437e <main+0x1a8>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    435c:	0f 2d       	mov	r16, r15
    435e:	10 e0       	ldi	r17, 0x00	; 0
    4360:	c8 01       	movw	r24, r16
    4362:	8f 5f       	subi	r24, 0xFF	; 255
    4364:	9f 4f       	sbci	r25, 0xFF	; 255
    4366:	0e 94 22 60 	call	0xc044	; 0xc044 <__eerd_byte_x128a1>
    436a:	f8 01       	movw	r30, r16
    436c:	ea 5c       	subi	r30, 0xCA	; 202
    436e:	f8 4d       	sbci	r31, 0xD8	; 216
    4370:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    4372:	03 51       	subi	r16, 0x13	; 19
    4374:	17 4d       	sbci	r17, 0xD7	; 215
    4376:	f8 01       	movw	r30, r16
    4378:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    437a:	f3 94       	inc	r15
    437c:	f9 82       	std	Y+1, r15	; 0x01
    437e:	f9 80       	ldd	r15, Y+1	; 0x01
    4380:	f0 e8       	ldi	r31, 0x80	; 128
    4382:	ff 15       	cp	r31, r15
    4384:	58 f7       	brcc	.-42     	; 0x435c <main+0x186>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    4386:	80 e8       	ldi	r24, 0x80	; 128
    4388:	9c e0       	ldi	r25, 0x0C	; 12
    438a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	61 e0       	ldi	r22, 0x01	; 1
    4392:	0e 94 48 24 	call	0x4890	; 0x4890 <ledWrite>
    4396:	01 e0       	ldi	r16, 0x01	; 1
    4398:	a0 e2       	ldi	r26, 0x20	; 32
    439a:	ca 2e       	mov	r12, r26
    439c:	a3 e0       	ldi	r26, 0x03	; 3
    439e:	da 2e       	mov	r13, r26
    43a0:	3a c0       	rjmp	.+116    	; 0x4416 <main+0x240>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <disk_status>
    43a8:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    43aa:	81 ff       	sbrs	r24, 1
    43ac:	0d c0       	rjmp	.+26     	; 0x43c8 <main+0x1f2>
            xputs(PSTR("Insert SD card"));
    43ae:	81 e7       	ldi	r24, 0x71	; 113
    43b0:	9c e0       	ldi	r25, 0x0C	; 12
    43b2:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            uart_crlf();
    43b6:	0e 94 04 31 	call	0x6208	; 0x6208 <uart_crlf>
    43ba:	04 c0       	rjmp	.+8      	; 0x43c4 <main+0x1ee>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <disk_status>
    43c2:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    43c4:	01 fd       	sbrc	r16, 1
    43c6:	fa cf       	rjmp	.-12     	; 0x43bc <main+0x1e6>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    43c8:	02 ff       	sbrs	r16, 2
    43ca:	04 c0       	rjmp	.+8      	; 0x43d4 <main+0x1fe>
            xputs(PSTR("SD card is Write Protected!\n"));
    43cc:	84 e5       	ldi	r24, 0x54	; 84
    43ce:	9c e0       	ldi	r25, 0x0C	; 12
    43d0:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    43d4:	19 82       	std	Y+1, r1	; 0x01
    43d6:	10 c0       	rjmp	.+32     	; 0x43f8 <main+0x222>
            sta = disk_initialize(0);
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	0e 94 70 57 	call	0xaee0	; 0xaee0 <disk_initialize>
    43de:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    43e0:	80 ff       	sbrs	r24, 0
    43e2:	0d c0       	rjmp	.+26     	; 0x43fe <main+0x228>
    43e4:	89 81       	ldd	r24, Y+1	; 0x01
    43e6:	8f 5f       	subi	r24, 0xFF	; 255
    43e8:	89 83       	std	Y+1, r24	; 0x01
    43ea:	84 ef       	ldi	r24, 0xF4	; 244
    43ec:	91 e0       	ldi	r25, 0x01	; 1
    43ee:	f6 01       	movw	r30, r12
    43f0:	31 97       	sbiw	r30, 0x01	; 1
    43f2:	f1 f7       	brne	.-4      	; 0x43f0 <main+0x21a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f6:	d9 f7       	brne	.-10     	; 0x43ee <main+0x218>
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	84 30       	cpi	r24, 0x04	; 4
    43fc:	68 f3       	brcs	.-38     	; 0x43d8 <main+0x202>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    43fe:	00 ff       	sbrs	r16, 0
    4400:	0a c0       	rjmp	.+20     	; 0x4416 <main+0x240>
            xputs(PSTR("Initialization failed!!!\n"));
    4402:	8a e3       	ldi	r24, 0x3A	; 58
    4404:	9c e0       	ldi	r25, 0x0C	; 12
    4406:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <disk_status>
    4410:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    4412:	81 ff       	sbrs	r24, 1
    4414:	fa cf       	rjmp	.-12     	; 0x440a <main+0x234>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    4416:	00 fd       	sbrc	r16, 0
    4418:	c4 cf       	rjmp	.-120    	; 0x43a2 <main+0x1cc>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    441a:	82 e2       	ldi	r24, 0x22	; 34
    441c:	9c e0       	ldi	r25, 0x0C	; 12
    441e:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	6a e0       	ldi	r22, 0x0A	; 10
    4426:	ae 01       	movw	r20, r28
    4428:	4f 5f       	subi	r20, 0xFF	; 255
    442a:	5f 4f       	sbci	r21, 0xFF	; 255
    442c:	0e 94 64 55 	call	0xaac8	; 0xaac8 <disk_ioctl>
    4430:	89 2b       	or	r24, r25
    4432:	59 f5       	brne	.+86     	; 0x448a <main+0x2b4>
        xputs(PSTR("Card type: "));
    4434:	86 e1       	ldi	r24, 0x16	; 22
    4436:	9c e0       	ldi	r25, 0x0C	; 12
    4438:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        switch(b1) {
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	84 30       	cpi	r24, 0x04	; 4
    4440:	a1 f0       	breq	.+40     	; 0x446a <main+0x294>
    4442:	85 30       	cpi	r24, 0x05	; 5
    4444:	28 f4       	brcc	.+10     	; 0x4450 <main+0x27a>
    4446:	81 30       	cpi	r24, 0x01	; 1
    4448:	51 f0       	breq	.+20     	; 0x445e <main+0x288>
    444a:	82 30       	cpi	r24, 0x02	; 2
    444c:	d1 f4       	brne	.+52     	; 0x4482 <main+0x2ac>
    444e:	0a c0       	rjmp	.+20     	; 0x4464 <main+0x28e>
    4450:	88 30       	cpi	r24, 0x08	; 8
    4452:	89 f0       	breq	.+34     	; 0x4476 <main+0x2a0>
    4454:	8c 30       	cpi	r24, 0x0C	; 12
    4456:	91 f0       	breq	.+36     	; 0x447c <main+0x2a6>
    4458:	86 30       	cpi	r24, 0x06	; 6
    445a:	99 f4       	brne	.+38     	; 0x4482 <main+0x2ac>
    445c:	09 c0       	rjmp	.+18     	; 0x4470 <main+0x29a>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    445e:	81 e1       	ldi	r24, 0x11	; 17
    4460:	9c e0       	ldi	r25, 0x0C	; 12
    4462:	11 c0       	rjmp	.+34     	; 0x4486 <main+0x2b0>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    4464:	8d e0       	ldi	r24, 0x0D	; 13
    4466:	9c e0       	ldi	r25, 0x0C	; 12
    4468:	0e c0       	rjmp	.+28     	; 0x4486 <main+0x2b0>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    446a:	88 e0       	ldi	r24, 0x08	; 8
    446c:	9c e0       	ldi	r25, 0x0C	; 12
    446e:	0b c0       	rjmp	.+22     	; 0x4486 <main+0x2b0>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    4470:	83 e0       	ldi	r24, 0x03	; 3
    4472:	9c e0       	ldi	r25, 0x0C	; 12
    4474:	08 c0       	rjmp	.+16     	; 0x4486 <main+0x2b0>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    4476:	8e ef       	ldi	r24, 0xFE	; 254
    4478:	9b e0       	ldi	r25, 0x0B	; 11
    447a:	05 c0       	rjmp	.+10     	; 0x4486 <main+0x2b0>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    447c:	88 ef       	ldi	r24, 0xF8	; 248
    447e:	9b e0       	ldi	r25, 0x0B	; 11
    4480:	02 c0       	rjmp	.+4      	; 0x4486 <main+0x2b0>
            default: xputs(PSTR("???\n"));
    4482:	83 ef       	ldi	r24, 0xF3	; 243
    4484:	9b e0       	ldi	r25, 0x0B	; 11
    4486:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    448a:	8a ed       	ldi	r24, 0xDA	; 218
    448c:	9b e0       	ldi	r25, 0x0B	; 11
    448e:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    res = f_mount(0, &fatfs);
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	60 ea       	ldi	r22, 0xA0	; 160
    4496:	79 e2       	ldi	r23, 0x29	; 41
    4498:	0e 94 08 35 	call	0x6a10	; 0x6a10 <f_mount>
    switch(res) {
    449c:	81 30       	cpi	r24, 0x01	; 1
    449e:	51 f0       	breq	.+20     	; 0x44b4 <main+0x2de>
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	28 f0       	brcs	.+10     	; 0x44ae <main+0x2d8>
    44a4:	82 30       	cpi	r24, 0x02	; 2
    44a6:	49 f0       	breq	.+18     	; 0x44ba <main+0x2e4>
    44a8:	83 30       	cpi	r24, 0x03	; 3
    44aa:	69 f4       	brne	.+26     	; 0x44c6 <main+0x2f0>
    44ac:	09 c0       	rjmp	.+18     	; 0x44c0 <main+0x2ea>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    44ae:	80 ed       	ldi	r24, 0xD0	; 208
    44b0:	9b e0       	ldi	r25, 0x0B	; 11
    44b2:	0b c0       	rjmp	.+22     	; 0x44ca <main+0x2f4>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    44b4:	87 ec       	ldi	r24, 0xC7	; 199
    44b6:	9b e0       	ldi	r25, 0x0B	; 11
    44b8:	08 c0       	rjmp	.+16     	; 0x44ca <main+0x2f4>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    44ba:	84 eb       	ldi	r24, 0xB4	; 180
    44bc:	9b e0       	ldi	r25, 0x0B	; 11
    44be:	05 c0       	rjmp	.+10     	; 0x44ca <main+0x2f4>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    44c0:	87 ea       	ldi	r24, 0xA7	; 167
    44c2:	9b e0       	ldi	r25, 0x0B	; 11
    44c4:	02 c0       	rjmp	.+4      	; 0x44ca <main+0x2f4>
        default: xputs(PSTR("???\n"));
    44c6:	82 ea       	ldi	r24, 0xA2	; 162
    44c8:	9b e0       	ldi	r25, 0x0B	; 11
    44ca:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	68 e0       	ldi	r22, 0x08	; 8
    44d2:	45 e1       	ldi	r20, 0x15	; 21
    44d4:	55 e2       	ldi	r21, 0x25	; 37
    44d6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    ledWrite(LED1, OFF);
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	0e 94 48 24 	call	0x4890	; 0x4890 <ledWrite>
    ledBlink();
    44e2:	0e 94 7e 24 	call	0x48fc	; 0x48fc <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    44e6:	8f ef       	ldi	r24, 0xFF	; 255
    44e8:	e8 16       	cp	r14, r24
    44ea:	09 f0       	breq	.+2      	; 0x44ee <main+0x318>
    44ec:	c5 c0       	rjmp	.+394    	; 0x4678 <main+0x4a2>
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    44ee:	84 e7       	ldi	r24, 0x74	; 116
    44f0:	9b e0       	ldi	r25, 0x0B	; 11
    44f2:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    44f6:	f7 ee       	ldi	r31, 0xE7	; 231
    44f8:	8f 2e       	mov	r8, r31
    44fa:	f3 e0       	ldi	r31, 0x03	; 3
    44fc:	9f 2e       	mov	r9, r31
    44fe:	e7 ec       	ldi	r30, 0xC7	; 199
    4500:	be 2e       	mov	r11, r30
    4502:	77 ec       	ldi	r23, 0xC7	; 199
    4504:	a7 2e       	mov	r10, r23
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4506:	62 e0       	ldi	r22, 0x02	; 2
    4508:	c6 2e       	mov	r12, r22
    450a:	d1 2c       	mov	r13, r1
    450c:	cc 0e       	add	r12, r28
    450e:	dd 1e       	adc	r13, r29
    4510:	03 c0       	rjmp	.+6      	; 0x4518 <main+0x342>
    ledBlink();
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    4512:	0a 2d       	mov	r16, r10
    4514:	47 01       	movw	r8, r14
    4516:	58 01       	movw	r10, r16
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    4518:	0e 94 a5 30 	call	0x614a	; 0x614a <uart_test>
    451c:	89 2b       	or	r24, r25
    451e:	09 f4       	brne	.+2      	; 0x4522 <main+0x34c>
    4520:	49 c0       	rjmp	.+146    	; 0x45b4 <main+0x3de>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4522:	c6 01       	movw	r24, r12
    4524:	0e 94 0b 31 	call	0x6216	; 0x6216 <fill_Rx_buffer>
                switch(message_length) {
    4528:	84 30       	cpi	r24, 0x04	; 4
    452a:	91 05       	cpc	r25, r1
    452c:	09 f1       	breq	.+66     	; 0x4570 <main+0x39a>
    452e:	85 30       	cpi	r24, 0x05	; 5
    4530:	91 05       	cpc	r25, r1
    4532:	48 f4       	brcc	.+18     	; 0x4546 <main+0x370>
    4534:	82 30       	cpi	r24, 0x02	; 2
    4536:	91 05       	cpc	r25, r1
    4538:	99 f0       	breq	.+38     	; 0x4560 <main+0x38a>
    453a:	83 30       	cpi	r24, 0x03	; 3
    453c:	91 05       	cpc	r25, r1
    453e:	a0 f4       	brcc	.+40     	; 0x4568 <main+0x392>
    4540:	01 97       	sbiw	r24, 0x01	; 1
    4542:	91 f5       	brne	.+100    	; 0x45a8 <main+0x3d2>
    4544:	09 c0       	rjmp	.+18     	; 0x4558 <main+0x382>
    4546:	8e 33       	cpi	r24, 0x3E	; 62
    4548:	91 05       	cpc	r25, r1
    454a:	d1 f0       	breq	.+52     	; 0x4580 <main+0x3aa>
    454c:	8f 33       	cpi	r24, 0x3F	; 63
    454e:	91 05       	cpc	r25, r1
    4550:	39 f1       	breq	.+78     	; 0x45a0 <main+0x3ca>
    4552:	05 97       	sbiw	r24, 0x05	; 5
    4554:	49 f5       	brne	.+82     	; 0x45a8 <main+0x3d2>
    4556:	10 c0       	rjmp	.+32     	; 0x4578 <main+0x3a2>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    4558:	c6 01       	movw	r24, r12
    455a:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <handle_message_length_1>
    455e:	2a c0       	rjmp	.+84     	; 0x45b4 <main+0x3de>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    4560:	c6 01       	movw	r24, r12
    4562:	0e 94 b2 1c 	call	0x3964	; 0x3964 <handle_message_length_2>
    4566:	26 c0       	rjmp	.+76     	; 0x45b4 <main+0x3de>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    4568:	c6 01       	movw	r24, r12
    456a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <handle_message_length_3>
    456e:	22 c0       	rjmp	.+68     	; 0x45b4 <main+0x3de>
                        break;
					case 4:
						handle_message_length_4(&msg_buffer[0]);
    4570:	c6 01       	movw	r24, r12
    4572:	0e 94 ae 13 	call	0x275c	; 0x275c <handle_message_length_4>
    4576:	1e c0       	rjmp	.+60     	; 0x45b4 <main+0x3de>
						break;
                    case 5: // if length 5, then decode, set x,y index, or set gain, bias
                        handle_message_length_5(&msg_buffer[0]);
    4578:	c6 01       	movw	r24, r12
    457a:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <handle_message_length_5>
    457e:	1a c0       	rjmp	.+52     	; 0x45b4 <main+0x3de>
                        break;
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
{   
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    4584:	f9 01       	movw	r30, r18
    4586:	e9 57       	subi	r30, 0x79	; 121
    4588:	f9 4d       	sbci	r31, 0xD9	; 217
    458a:	d6 01       	movw	r26, r12
    458c:	a2 0f       	add	r26, r18
    458e:	b3 1f       	adc	r27, r19
    4590:	8c 91       	ld	r24, X
    4592:	80 83       	st	Z, r24
    4594:	2f 5f       	subi	r18, 0xFF	; 255
    4596:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    4598:	2e 33       	cpi	r18, 0x3E	; 62
    459a:	31 05       	cpc	r19, r1
    459c:	99 f7       	brne	.-26     	; 0x4584 <main+0x3ae>
    459e:	0a c0       	rjmp	.+20     	; 0x45b4 <main+0x3de>
                        break;
                    case 62: //if length 62, then set laser trigger pattern first 62 byte
                        handle_message_length_62(&msg_buffer[0]);
                        break;
					case 63: //if length 63, then set laser trigger pattern second 63 byte
                        handle_message_length_63(&msg_buffer[0]);
    45a0:	c6 01       	movw	r24, r12
    45a2:	0e 94 32 0b 	call	0x1664	; 0x1664 <handle_message_length_63>
    45a6:	06 c0       	rjmp	.+12     	; 0x45b4 <main+0x3de>
                        break;	
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[7]);
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	68 e0       	ldi	r22, 0x08	; 8
    45ac:	48 ef       	ldi	r20, 0xF8	; 248
    45ae:	50 e2       	ldi	r21, 0x20	; 32
    45b0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has change
    45b4:	80 91 9c 20 	lds	r24, 0x209C
    45b8:	88 23       	and	r24, r24
    45ba:	09 f0       	breq	.+2      	; 0x45be <main+0x3e8>
    45bc:	ad cf       	rjmp	.-166    	; 0x4518 <main+0x342>
			
                if (frame_num != frame_num_old) {
    45be:	e0 90 ed 24 	lds	r14, 0x24ED
    45c2:	f0 90 ee 24 	lds	r15, 0x24EE
    45c6:	e8 14       	cp	r14, r8
    45c8:	f9 04       	cpc	r15, r9
    45ca:	91 f0       	breq	.+36     	; 0x45f0 <main+0x41a>
                    frame_num_old = frame_num; //update the 'old' frame number
    45cc:	e0 90 ed 24 	lds	r14, 0x24ED
    45d0:	f0 90 ee 24 	lds	r15, 0x24EE
                    fetch_display_frame(frame_num, index_x, index_y);
    45d4:	80 91 ed 24 	lds	r24, 0x24ED
    45d8:	90 91 ee 24 	lds	r25, 0x24EE
    45dc:	60 91 b9 27 	lds	r22, 0x27B9
    45e0:	70 91 ba 27 	lds	r23, 0x27BA
    45e4:	40 91 6e 29 	lds	r20, 0x296E
    45e8:	50 91 6f 29 	lds	r21, 0x296F
    45ec:	0e 94 92 17 	call	0x2f24	; 0x2f24 <fetch_display_frame>
                }
				
				//func_buffer_size_x in word, 2 bytes.
				if ((default_func_x == 0) && (func_buffer_size_x <= FUNCTION_LENGTH/4) && (func_read_index_x != func_idx_x_old))
    45f0:	80 91 a3 20 	lds	r24, 0x20A3
    45f4:	88 23       	and	r24, r24
    45f6:	e1 f4       	brne	.+56     	; 0x4630 <main+0x45a>
    45f8:	80 91 f3 24 	lds	r24, 0x24F3
    45fc:	8a 31       	cpi	r24, 0x1A	; 26
    45fe:	c0 f4       	brcc	.+48     	; 0x4630 <main+0x45a>
    4600:	10 91 ef 24 	lds	r17, 0x24EF
    4604:	1b 15       	cp	r17, r11
    4606:	a9 f0       	breq	.+42     	; 0x4632 <main+0x45c>
				{					
					func_idx_x_old = func_read_index_x;
    4608:	10 91 ef 24 	lds	r17, 0x24EF
					fetch_update_funcX(0, next_block_x);  
    460c:	60 91 a1 20 	lds	r22, 0x20A1
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <fetch_update_funcX>
					next_block_x = (next_block_x + 1)%num_buffer_load_x; 
    4616:	80 91 a1 20 	lds	r24, 0x20A1
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	60 91 b4 20 	lds	r22, 0x20B4
    4620:	70 91 b5 20 	lds	r23, 0x20B5
    4624:	01 96       	adiw	r24, 0x01	; 1
    4626:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    462a:	80 93 a1 20 	sts	0x20A1, r24
    462e:	01 c0       	rjmp	.+2      	; 0x4632 <main+0x45c>
    4630:	1b 2d       	mov	r17, r11
//xprintf(PSTR("func_buffer_size_x=%u, func_read_index_x=%u\n"), func_buffer_size_x, func_read_index_x);
				}

				if ((default_func_y == 0) && (func_buffer_size_y <= FUNCTION_LENGTH/4) && (func_read_index_y != func_idx_y_old))
    4632:	80 91 a4 20 	lds	r24, 0x20A4
    4636:	88 23       	and	r24, r24
    4638:	09 f0       	breq	.+2      	; 0x463c <main+0x466>
    463a:	6b cf       	rjmp	.-298    	; 0x4512 <main+0x33c>
    463c:	80 91 f4 24 	lds	r24, 0x24F4
    4640:	8a 31       	cpi	r24, 0x1A	; 26
    4642:	08 f0       	brcs	.+2      	; 0x4646 <main+0x470>
    4644:	66 cf       	rjmp	.-308    	; 0x4512 <main+0x33c>
    4646:	00 91 f0 24 	lds	r16, 0x24F0
    464a:	0a 15       	cp	r16, r10
    464c:	09 f4       	brne	.+2      	; 0x4650 <main+0x47a>
    464e:	62 cf       	rjmp	.-316    	; 0x4514 <main+0x33e>
				{					
					func_idx_y_old = func_read_index_y;
    4650:	00 91 f0 24 	lds	r16, 0x24F0
					fetch_update_funcY(0, next_block_y);	
    4654:	60 91 a2 20 	lds	r22, 0x20A2
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	0e 94 10 0c 	call	0x1820	; 0x1820 <fetch_update_funcY>
					next_block_y = (next_block_y + 1)%num_buffer_load_y; 
    465e:	80 91 a2 20 	lds	r24, 0x20A2
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	60 91 b6 20 	lds	r22, 0x20B6
    4668:	70 91 b7 20 	lds	r23, 0x20B7
    466c:	01 96       	adiw	r24, 0x01	; 1
    466e:	0e 94 33 5b 	call	0xb666	; 0xb666 <__udivmodhi4>
    4672:	80 93 a2 20 	sts	0x20A2, r24
    4676:	4e cf       	rjmp	.-356    	; 0x4514 <main+0x33e>

			}
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    4678:	86 e4       	ldi	r24, 0x46	; 70
    467a:	9b e0       	ldi	r25, 0x0B	; 11
    467c:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4680:	8e 01       	movw	r16, r28
    4682:	0d 5b       	subi	r16, 0xBD	; 189
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    4686:	0e 94 a5 30 	call	0x614a	; 0x614a <uart_test>
    468a:	89 2b       	or	r24, r25
    468c:	e1 f3       	breq	.-8      	; 0x4686 <main+0x4b0>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    468e:	c8 01       	movw	r24, r16
    4690:	0e 94 0b 31 	call	0x6216	; 0x6216 <fill_Rx_buffer>
                switch(message_length) {
    4694:	81 30       	cpi	r24, 0x01	; 1
    4696:	91 05       	cpc	r25, r1
    4698:	19 f0       	breq	.+6      	; 0x46a0 <main+0x4ca>
    469a:	c2 97       	sbiw	r24, 0x32	; 50
    469c:	49 f4       	brne	.+18     	; 0x46b0 <main+0x4da>
    469e:	04 c0       	rjmp	.+8      	; 0x46a8 <main+0x4d2>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    46a0:	c8 01       	movw	r24, r16
    46a2:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <handle_message_length_1>
    46a6:	ef cf       	rjmp	.-34     	; 0x4686 <main+0x4b0>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    46a8:	c8 01       	movw	r24, r16
    46aa:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <display_dumped_frame>
    46ae:	eb cf       	rjmp	.-42     	; 0x4686 <main+0x4b0>
                        break;
                    default:			
                        i2cMasterSend(0x00, 8, ERROR_CODES[8]);
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	68 e0       	ldi	r22, 0x08	; 8
    46b4:	40 e0       	ldi	r20, 0x00	; 0
    46b6:	51 e2       	ldi	r21, 0x21	; 33
    46b8:	0e 94 54 13 	call	0x26a8	; 0x26a8 <i2cMasterSend>
    46bc:	e4 cf       	rjmp	.-56     	; 0x4686 <main+0x4b0>

000046be <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    46be:	1f 92       	push	r1
    46c0:	0f 92       	push	r0
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	0f 92       	push	r0
    46c6:	08 b6       	in	r0, 0x38	; 56
    46c8:	0f 92       	push	r0
    46ca:	09 b6       	in	r0, 0x39	; 57
    46cc:	0f 92       	push	r0
    46ce:	0b b6       	in	r0, 0x3b	; 59
    46d0:	0f 92       	push	r0
    46d2:	11 24       	eor	r1, r1
    46d4:	18 be       	out	0x38, r1	; 56
    46d6:	19 be       	out	0x39, r1	; 57
    46d8:	1b be       	out	0x3b, r1	; 59
    46da:	2f 93       	push	r18
    46dc:	3f 93       	push	r19
    46de:	4f 93       	push	r20
    46e0:	5f 93       	push	r21
    46e2:	6f 93       	push	r22
    46e4:	7f 93       	push	r23
    46e6:	8f 93       	push	r24
    46e8:	9f 93       	push	r25
    46ea:	af 93       	push	r26
    46ec:	bf 93       	push	r27
    46ee:	ef 93       	push	r30
    46f0:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    46f2:	8c e9       	ldi	r24, 0x9C	; 156
    46f4:	95 e2       	ldi	r25, 0x25	; 37
    46f6:	0e 94 34 34 	call	0x6868	; 0x6868 <TWI_MasterInterruptHandler>
}
    46fa:	ff 91       	pop	r31
    46fc:	ef 91       	pop	r30
    46fe:	bf 91       	pop	r27
    4700:	af 91       	pop	r26
    4702:	9f 91       	pop	r25
    4704:	8f 91       	pop	r24
    4706:	7f 91       	pop	r23
    4708:	6f 91       	pop	r22
    470a:	5f 91       	pop	r21
    470c:	4f 91       	pop	r20
    470e:	3f 91       	pop	r19
    4710:	2f 91       	pop	r18
    4712:	0f 90       	pop	r0
    4714:	0b be       	out	0x3b, r0	; 59
    4716:	0f 90       	pop	r0
    4718:	09 be       	out	0x39, r0	; 57
    471a:	0f 90       	pop	r0
    471c:	08 be       	out	0x38, r0	; 56
    471e:	0f 90       	pop	r0
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	0f 90       	pop	r0
    4724:	1f 90       	pop	r1
    4726:	18 95       	reti

00004728 <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    4728:	1f 92       	push	r1
    472a:	0f 92       	push	r0
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	0f 92       	push	r0
    4730:	08 b6       	in	r0, 0x38	; 56
    4732:	0f 92       	push	r0
    4734:	09 b6       	in	r0, 0x39	; 57
    4736:	0f 92       	push	r0
    4738:	0b b6       	in	r0, 0x3b	; 59
    473a:	0f 92       	push	r0
    473c:	11 24       	eor	r1, r1
    473e:	18 be       	out	0x38, r1	; 56
    4740:	19 be       	out	0x39, r1	; 57
    4742:	1b be       	out	0x3b, r1	; 59
    4744:	2f 93       	push	r18
    4746:	3f 93       	push	r19
    4748:	4f 93       	push	r20
    474a:	5f 93       	push	r21
    474c:	6f 93       	push	r22
    474e:	7f 93       	push	r23
    4750:	8f 93       	push	r24
    4752:	9f 93       	push	r25
    4754:	af 93       	push	r26
    4756:	bf 93       	push	r27
    4758:	ef 93       	push	r30
    475a:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    475c:	86 e2       	ldi	r24, 0x26	; 38
    475e:	97 e2       	ldi	r25, 0x27	; 39
    4760:	0e 94 34 34 	call	0x6868	; 0x6868 <TWI_MasterInterruptHandler>
}
    4764:	ff 91       	pop	r31
    4766:	ef 91       	pop	r30
    4768:	bf 91       	pop	r27
    476a:	af 91       	pop	r26
    476c:	9f 91       	pop	r25
    476e:	8f 91       	pop	r24
    4770:	7f 91       	pop	r23
    4772:	6f 91       	pop	r22
    4774:	5f 91       	pop	r21
    4776:	4f 91       	pop	r20
    4778:	3f 91       	pop	r19
    477a:	2f 91       	pop	r18
    477c:	0f 90       	pop	r0
    477e:	0b be       	out	0x3b, r0	; 59
    4780:	0f 90       	pop	r0
    4782:	09 be       	out	0x39, r0	; 57
    4784:	0f 90       	pop	r0
    4786:	08 be       	out	0x38, r0	; 56
    4788:	0f 90       	pop	r0
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	0f 90       	pop	r0
    478e:	1f 90       	pop	r1
    4790:	18 95       	reti

00004792 <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    4792:	1f 92       	push	r1
    4794:	0f 92       	push	r0
    4796:	0f b6       	in	r0, 0x3f	; 63
    4798:	0f 92       	push	r0
    479a:	08 b6       	in	r0, 0x38	; 56
    479c:	0f 92       	push	r0
    479e:	09 b6       	in	r0, 0x39	; 57
    47a0:	0f 92       	push	r0
    47a2:	0b b6       	in	r0, 0x3b	; 59
    47a4:	0f 92       	push	r0
    47a6:	11 24       	eor	r1, r1
    47a8:	18 be       	out	0x38, r1	; 56
    47aa:	19 be       	out	0x39, r1	; 57
    47ac:	1b be       	out	0x3b, r1	; 59
    47ae:	2f 93       	push	r18
    47b0:	3f 93       	push	r19
    47b2:	4f 93       	push	r20
    47b4:	5f 93       	push	r21
    47b6:	6f 93       	push	r22
    47b8:	7f 93       	push	r23
    47ba:	8f 93       	push	r24
    47bc:	9f 93       	push	r25
    47be:	af 93       	push	r26
    47c0:	bf 93       	push	r27
    47c2:	ef 93       	push	r30
    47c4:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    47c6:	80 e9       	ldi	r24, 0x90	; 144
    47c8:	99 e2       	ldi	r25, 0x29	; 41
    47ca:	0e 94 34 34 	call	0x6868	; 0x6868 <TWI_MasterInterruptHandler>
}
    47ce:	ff 91       	pop	r31
    47d0:	ef 91       	pop	r30
    47d2:	bf 91       	pop	r27
    47d4:	af 91       	pop	r26
    47d6:	9f 91       	pop	r25
    47d8:	8f 91       	pop	r24
    47da:	7f 91       	pop	r23
    47dc:	6f 91       	pop	r22
    47de:	5f 91       	pop	r21
    47e0:	4f 91       	pop	r20
    47e2:	3f 91       	pop	r19
    47e4:	2f 91       	pop	r18
    47e6:	0f 90       	pop	r0
    47e8:	0b be       	out	0x3b, r0	; 59
    47ea:	0f 90       	pop	r0
    47ec:	09 be       	out	0x39, r0	; 57
    47ee:	0f 90       	pop	r0
    47f0:	08 be       	out	0x38, r0	; 56
    47f2:	0f 90       	pop	r0
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	0f 90       	pop	r0
    47f8:	1f 90       	pop	r1
    47fa:	18 95       	reti

000047fc <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    47fc:	1f 92       	push	r1
    47fe:	0f 92       	push	r0
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	0f 92       	push	r0
    4804:	08 b6       	in	r0, 0x38	; 56
    4806:	0f 92       	push	r0
    4808:	09 b6       	in	r0, 0x39	; 57
    480a:	0f 92       	push	r0
    480c:	0b b6       	in	r0, 0x3b	; 59
    480e:	0f 92       	push	r0
    4810:	11 24       	eor	r1, r1
    4812:	18 be       	out	0x38, r1	; 56
    4814:	19 be       	out	0x39, r1	; 57
    4816:	1b be       	out	0x3b, r1	; 59
    4818:	2f 93       	push	r18
    481a:	3f 93       	push	r19
    481c:	4f 93       	push	r20
    481e:	5f 93       	push	r21
    4820:	6f 93       	push	r22
    4822:	7f 93       	push	r23
    4824:	8f 93       	push	r24
    4826:	9f 93       	push	r25
    4828:	af 93       	push	r26
    482a:	bf 93       	push	r27
    482c:	ef 93       	push	r30
    482e:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    4830:	88 e7       	ldi	r24, 0x78	; 120
    4832:	96 e2       	ldi	r25, 0x26	; 38
    4834:	0e 94 34 34 	call	0x6868	; 0x6868 <TWI_MasterInterruptHandler>
}
    4838:	ff 91       	pop	r31
    483a:	ef 91       	pop	r30
    483c:	bf 91       	pop	r27
    483e:	af 91       	pop	r26
    4840:	9f 91       	pop	r25
    4842:	8f 91       	pop	r24
    4844:	7f 91       	pop	r23
    4846:	6f 91       	pop	r22
    4848:	5f 91       	pop	r21
    484a:	4f 91       	pop	r20
    484c:	3f 91       	pop	r19
    484e:	2f 91       	pop	r18
    4850:	0f 90       	pop	r0
    4852:	0b be       	out	0x3b, r0	; 59
    4854:	0f 90       	pop	r0
    4856:	09 be       	out	0x39, r0	; 57
    4858:	0f 90       	pop	r0
    485a:	08 be       	out	0x38, r0	; 56
    485c:	0f 90       	pop	r0
    485e:	0f be       	out	0x3f, r0	; 63
    4860:	0f 90       	pop	r0
    4862:	1f 90       	pop	r1
    4864:	18 95       	reti

00004866 <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    4866:	0f 93       	push	r16
    4868:	df 93       	push	r29
    486a:	cf 93       	push	r28
    486c:	0f 92       	push	r0
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    4872:	2f b7       	in	r18, 0x3f	; 63
    4874:	29 83       	std	Y+1, r18	; 0x01
  cli();
    4876:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    4878:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    487a:	fc 01       	movw	r30, r24
    487c:	08 ed       	ldi	r16, 0xD8	; 216
    487e:	04 bf       	out	0x34, r16	; 52
    4880:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	8f bf       	out	0x3f, r24	; 63
}
    4886:	0f 90       	pop	r0
    4888:	cf 91       	pop	r28
    488a:	df 91       	pop	r29
    488c:	0f 91       	pop	r16
    488e:	08 95       	ret

00004890 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    4890:	28 2f       	mov	r18, r24
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	c9 01       	movw	r24, r18
    4896:	8c 7f       	andi	r24, 0xFC	; 252
    4898:	89 2b       	or	r24, r25
    489a:	e1 f4       	brne	.+56     	; 0x48d4 <ledWrite+0x44>
    489c:	86 2f       	mov	r24, r22
    489e:	8e 7f       	andi	r24, 0xFE	; 254
    48a0:	c9 f4       	brne	.+50     	; 0x48d4 <ledWrite+0x44>
    48a2:	2c 5f       	subi	r18, 0xFC	; 252
    48a4:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    48a6:	61 30       	cpi	r22, 0x01	; 1
    48a8:	59 f4       	brne	.+22     	; 0x48c0 <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	02 c0       	rjmp	.+4      	; 0x48b4 <ledWrite+0x24>
    48b0:	88 0f       	add	r24, r24
    48b2:	99 1f       	adc	r25, r25
    48b4:	2a 95       	dec	r18
    48b6:	e2 f7       	brpl	.-8      	; 0x48b0 <ledWrite+0x20>
    48b8:	e0 e0       	ldi	r30, 0x00	; 0
    48ba:	f7 e0       	ldi	r31, 0x07	; 7
    48bc:	86 83       	std	Z+6, r24	; 0x06
    48be:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	02 c0       	rjmp	.+4      	; 0x48ca <ledWrite+0x3a>
    48c6:	88 0f       	add	r24, r24
    48c8:	99 1f       	adc	r25, r25
    48ca:	2a 95       	dec	r18
    48cc:	e2 f7       	brpl	.-8      	; 0x48c6 <ledWrite+0x36>
    48ce:	e0 e0       	ldi	r30, 0x00	; 0
    48d0:	f7 e0       	ldi	r31, 0x07	; 7
    48d2:	85 83       	std	Z+5, r24	; 0x05
    48d4:	08 95       	ret

000048d6 <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    48d6:	28 2f       	mov	r18, r24
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	c9 01       	movw	r24, r18
    48dc:	8c 7f       	andi	r24, 0xFC	; 252
    48de:	89 2b       	or	r24, r25
    48e0:	61 f4       	brne	.+24     	; 0x48fa <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    48e2:	2c 5f       	subi	r18, 0xFC	; 252
    48e4:	3f 4f       	sbci	r19, 0xFF	; 255
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	02 c0       	rjmp	.+4      	; 0x48f0 <ledToggle+0x1a>
    48ec:	88 0f       	add	r24, r24
    48ee:	99 1f       	adc	r25, r25
    48f0:	2a 95       	dec	r18
    48f2:	e2 f7       	brpl	.-8      	; 0x48ec <ledToggle+0x16>
    48f4:	e0 e0       	ldi	r30, 0x00	; 0
    48f6:	f7 e0       	ldi	r31, 0x07	; 7
    48f8:	87 83       	std	Z+7, r24	; 0x07
    48fa:	08 95       	ret

000048fc <ledBlink>:
  }
}

void ledBlink(void)
{ 
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4900:	a0 e0       	ldi	r26, 0x00	; 0
    4902:	b7 e0       	ldi	r27, 0x07	; 7
    4904:	60 e2       	ldi	r22, 0x20	; 32
    4906:	40 e2       	ldi	r20, 0x20	; 32
    4908:	53 e0       	ldi	r21, 0x03	; 3
    490a:	17 96       	adiw	r26, 0x07	; 7
    490c:	6c 93       	st	X, r22
    490e:	17 97       	sbiw	r26, 0x07	; 7
    4910:	8c ea       	ldi	r24, 0xAC	; 172
    4912:	9d e0       	ldi	r25, 0x0D	; 13
    4914:	fa 01       	movw	r30, r20
    4916:	31 97       	sbiw	r30, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    491c:	d9 f7       	brne	.-10     	; 0x4914 <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    491e:	2f 5f       	subi	r18, 0xFF	; 255
    4920:	3f 4f       	sbci	r19, 0xFF	; 255
    4922:	2a 30       	cpi	r18, 0x0A	; 10
    4924:	31 05       	cpc	r19, r1
    4926:	89 f7       	brne	.-30     	; 0x490a <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    4928:	08 95       	ret

0000492a <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    492a:	48 2f       	mov	r20, r24
    492c:	50 e0       	ldi	r21, 0x00	; 0
    492e:	ca 01       	movw	r24, r20
    4930:	8c 7f       	andi	r24, 0xFC	; 252
    4932:	89 2b       	or	r24, r25
    4934:	79 f5       	brne	.+94     	; 0x4994 <digitalMode+0x6a>
    if (mode == OUTPUT) {
    4936:	66 23       	and	r22, r22
    4938:	b9 f4       	brne	.+46     	; 0x4968 <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    493a:	4c 5f       	subi	r20, 0xFC	; 252
    493c:	5f 4f       	sbci	r21, 0xFF	; 255
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	9c 01       	movw	r18, r24
    4944:	04 2e       	mov	r0, r20
    4946:	02 c0       	rjmp	.+4      	; 0x494c <digitalMode+0x22>
    4948:	22 0f       	add	r18, r18
    494a:	33 1f       	adc	r19, r19
    494c:	0a 94       	dec	r0
    494e:	e2 f7       	brpl	.-8      	; 0x4948 <digitalMode+0x1e>
    4950:	44 50       	subi	r20, 0x04	; 4
    4952:	50 40       	sbci	r21, 0x00	; 0
    4954:	e0 e2       	ldi	r30, 0x20	; 32
    4956:	f7 e0       	ldi	r31, 0x07	; 7
    4958:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    495a:	02 c0       	rjmp	.+4      	; 0x4960 <digitalMode+0x36>
    495c:	88 0f       	add	r24, r24
    495e:	99 1f       	adc	r25, r25
    4960:	4a 95       	dec	r20
    4962:	e2 f7       	brpl	.-8      	; 0x495c <digitalMode+0x32>
    4964:	81 83       	std	Z+1, r24	; 0x01
    4966:	08 95       	ret
    } else if (mode == INPUT) {
    4968:	61 30       	cpi	r22, 0x01	; 1
    496a:	a1 f4       	brne	.+40     	; 0x4994 <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	9c 01       	movw	r18, r24
    4972:	04 2e       	mov	r0, r20
    4974:	02 c0       	rjmp	.+4      	; 0x497a <digitalMode+0x50>
    4976:	22 0f       	add	r18, r18
    4978:	33 1f       	adc	r19, r19
    497a:	0a 94       	dec	r0
    497c:	e2 f7       	brpl	.-8      	; 0x4976 <digitalMode+0x4c>
    497e:	e0 e2       	ldi	r30, 0x20	; 32
    4980:	f7 e0       	ldi	r31, 0x07	; 7
    4982:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    4984:	4c 5f       	subi	r20, 0xFC	; 252
    4986:	5f 4f       	sbci	r21, 0xFF	; 255
    4988:	02 c0       	rjmp	.+4      	; 0x498e <digitalMode+0x64>
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	4a 95       	dec	r20
    4990:	e2 f7       	brpl	.-8      	; 0x498a <digitalMode+0x60>
    4992:	85 83       	std	Z+5, r24	; 0x05
    4994:	08 95       	ret

00004996 <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    4996:	28 2f       	mov	r18, r24
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	c9 01       	movw	r24, r18
    499c:	8c 7f       	andi	r24, 0xFC	; 252
    499e:	89 2b       	or	r24, r25
    49a0:	11 f0       	breq	.+4      	; 0x49a6 <digitalRead+0x10>
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    49a6:	80 91 28 07 	lds	r24, 0x0728
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	02 c0       	rjmp	.+4      	; 0x49b2 <digitalRead+0x1c>
    49ae:	95 95       	asr	r25
    49b0:	87 95       	ror	r24
    49b2:	2a 95       	dec	r18
    49b4:	e2 f7       	brpl	.-8      	; 0x49ae <digitalRead+0x18>
    49b6:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    49b8:	08 95       	ret

000049ba <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    49ba:	28 2f       	mov	r18, r24
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	c9 01       	movw	r24, r18
    49c0:	8c 7f       	andi	r24, 0xFC	; 252
    49c2:	89 2b       	or	r24, r25
    49c4:	d1 f4       	brne	.+52     	; 0x49fa <digitalWrite+0x40>
    49c6:	86 2f       	mov	r24, r22
    49c8:	8e 7f       	andi	r24, 0xFE	; 254
    49ca:	b9 f4       	brne	.+46     	; 0x49fa <digitalWrite+0x40>
    if (value == 1) {
    49cc:	61 30       	cpi	r22, 0x01	; 1
    49ce:	59 f4       	brne	.+22     	; 0x49e6 <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	02 c0       	rjmp	.+4      	; 0x49da <digitalWrite+0x20>
    49d6:	88 0f       	add	r24, r24
    49d8:	99 1f       	adc	r25, r25
    49da:	2a 95       	dec	r18
    49dc:	e2 f7       	brpl	.-8      	; 0x49d6 <digitalWrite+0x1c>
    49de:	e0 e2       	ldi	r30, 0x20	; 32
    49e0:	f7 e0       	ldi	r31, 0x07	; 7
    49e2:	85 83       	std	Z+5, r24	; 0x05
    49e4:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	02 c0       	rjmp	.+4      	; 0x49f0 <digitalWrite+0x36>
    49ec:	88 0f       	add	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	2a 95       	dec	r18
    49f2:	e2 f7       	brpl	.-8      	; 0x49ec <digitalWrite+0x32>
    49f4:	e0 e2       	ldi	r30, 0x20	; 32
    49f6:	f7 e0       	ldi	r31, 0x07	; 7
    49f8:	86 83       	std	Z+6, r24	; 0x06
    49fa:	08 95       	ret

000049fc <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    49fc:	28 2f       	mov	r18, r24
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	c9 01       	movw	r24, r18
    4a02:	8c 7f       	andi	r24, 0xFC	; 252
    4a04:	89 2b       	or	r24, r25
    4a06:	51 f4       	brne	.+20     	; 0x4a1c <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	02 c0       	rjmp	.+4      	; 0x4a12 <digitalToggle+0x16>
    4a0e:	88 0f       	add	r24, r24
    4a10:	99 1f       	adc	r25, r25
    4a12:	2a 95       	dec	r18
    4a14:	e2 f7       	brpl	.-8      	; 0x4a0e <digitalToggle+0x12>
    4a16:	e0 e2       	ldi	r30, 0x20	; 32
    4a18:	f7 e0       	ldi	r31, 0x07	; 7
    4a1a:	87 83       	std	Z+7, r24	; 0x07
    4a1c:	08 95       	ret

00004a1e <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    4a1e:	a2 e0       	ldi	r26, 0x02	; 2
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	e5 e1       	ldi	r30, 0x15	; 21
    4a24:	f5 e2       	ldi	r31, 0x25	; 37
    4a26:	0c 94 a7 5b 	jmp	0xb74e	; 0xb74e <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    4a2a:	28 2f       	mov	r18, r24
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	c9 01       	movw	r24, r18
    4a30:	88 7f       	andi	r24, 0xF8	; 248
    4a32:	89 2b       	or	r24, r25
    4a34:	19 f0       	breq	.+6      	; 0x4a3c <analogRead+0x1e>
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	5c c0       	rjmp	.+184    	; 0x4af4 <analogRead+0xd6>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
	//coding = 0,the output coding is twos complement
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    4a3c:	80 e1       	ldi	r24, 0x10	; 16
    4a3e:	e0 e4       	ldi	r30, 0x40	; 64
    4a40:	f6 e0       	ldi	r31, 0x06	; 6
    4a42:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    4a44:	c9 01       	movw	r24, r18
    4a46:	87 70       	andi	r24, 0x07	; 7
    4a48:	90 70       	andi	r25, 0x00	; 0
    4a4a:	88 0f       	add	r24, r24
    4a4c:	99 1f       	adc	r25, r25
    4a4e:	88 0f       	add	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	80 68       	ori	r24, 0x80	; 128
    4a54:	e0 ec       	ldi	r30, 0xC0	; 192
    4a56:	f8 e0       	ldi	r31, 0x08	; 8
    4a58:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4a5a:	80 91 c2 08 	lds	r24, 0x08C2
    4a5e:	87 ff       	sbrs	r24, 7
    4a60:	fc cf       	rjmp	.-8      	; 0x4a5a <analogRead+0x3c>
    SPIC.DATA = 0x10;
    4a62:	80 e1       	ldi	r24, 0x10	; 16
    4a64:	e0 ec       	ldi	r30, 0xC0	; 192
    4a66:	f8 e0       	ldi	r31, 0x08	; 8
    4a68:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4a6a:	80 91 c2 08 	lds	r24, 0x08C2
    4a6e:	87 ff       	sbrs	r24, 7
    4a70:	fc cf       	rjmp	.-8      	; 0x4a6a <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    4a72:	e0 e4       	ldi	r30, 0x40	; 64
    4a74:	f6 e0       	ldi	r31, 0x06	; 6
    4a76:	80 e1       	ldi	r24, 0x10	; 16
    4a78:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    4a7a:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    4a7c:	e0 ec       	ldi	r30, 0xC0	; 192
    4a7e:	f8 e0       	ldi	r31, 0x08	; 8
    4a80:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4a82:	80 91 c2 08 	lds	r24, 0x08C2
    4a86:	87 ff       	sbrs	r24, 7
    4a88:	fc cf       	rjmp	.-8      	; 0x4a82 <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    4a8a:	de 01       	movw	r26, r28
    4a8c:	11 96       	adiw	r26, 0x01	; 1
    4a8e:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    4a92:	e0 ec       	ldi	r30, 0xC0	; 192
    4a94:	f8 e0       	ldi	r31, 0x08	; 8
    4a96:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4a98:	80 91 c2 08 	lds	r24, 0x08C2
    4a9c:	87 ff       	sbrs	r24, 7
    4a9e:	fc cf       	rjmp	.-8      	; 0x4a98 <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    4aa0:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    4aa4:	11 96       	adiw	r26, 0x01	; 1
    4aa6:	9c 93       	st	X, r25
    4aa8:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    4aaa:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    4aac:	80 e1       	ldi	r24, 0x10	; 16
    4aae:	e0 e4       	ldi	r30, 0x40	; 64
    4ab0:	f6 e0       	ldi	r31, 0x06	; 6
    4ab2:	85 83       	std	Z+5, r24	; 0x05

	//ADC0-1 -5V-5V  //ADC2-7 0-10V
	if (!(ch& ~1))	
    4ab4:	2e 7f       	andi	r18, 0xFE	; 254
    4ab6:	89 81       	ldd	r24, Y+1	; 0x01
    4ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aba:	23 2b       	or	r18, r19
    4abc:	69 f4       	brne	.+26     	; 0x4ad8 <analogRead+0xba>
    4abe:	9c 01       	movw	r18, r24
    4ac0:	3f 70       	andi	r19, 0x0F	; 15
		//in this way, 0v ->0, -5V -> -2047, 5V->2047

		//-5V-0V
		if (w1 & 1 << 12) { 
    4ac2:	94 ff       	sbrs	r25, 4
    4ac4:	04 c0       	rjmp	.+8      	; 0x4ace <analogRead+0xb0>
		//input value is -5V-0v, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff)>>1;
    4ac6:	35 95       	asr	r19
    4ac8:	27 95       	ror	r18
		  w1 = w1 | 0xf800;
    4aca:	38 6f       	ori	r19, 0xF8	; 248
    4acc:	02 c0       	rjmp	.+4      	; 0x4ad2 <analogRead+0xb4>
		} 
		else{   //0-5V
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is 0-5V, 12 ADC code from 0x0000 to 0x0fff
		 //remove the 3 channel id bits
		  w1 = (w1 & 0x0fff)>>1; 
    4ace:	35 95       	asr	r19
    4ad0:	27 95       	ror	r18
    4ad2:	29 83       	std	Y+1, r18	; 0x01
    4ad4:	3a 83       	std	Y+2, r19	; 0x02
    4ad6:	0c c0       	rjmp	.+24     	; 0x4af0 <analogRead+0xd2>
		  //output value is now 0x0000 to 0x07ff
		}
	else
		//in this way, 0v ->0, 5V -> 2047, 10V->4095
		if (w1 & 1 << 12) { 
    4ad8:	94 ff       	sbrs	r25, 4
    4ada:	04 c0       	rjmp	.+8      	; 0x4ae4 <analogRead+0xc6>
		//input value is less than 5V, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff) >> 1;
    4adc:	9f 70       	andi	r25, 0x0F	; 15
    4ade:	95 95       	asr	r25
    4ae0:	87 95       	ror	r24
    4ae2:	04 c0       	rjmp	.+8      	; 0x4aec <analogRead+0xce>
		  //output value now is from 0x0000 to 0x07ff
		} 
		else{   
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is bigger than 5v, 12 ADC code from 0x0000 to 0x0fff
		  w1 = (w1 | 0x1000) >> 1;
    4ae4:	90 61       	ori	r25, 0x10	; 16
    4ae6:	95 95       	asr	r25
    4ae8:	87 95       	ror	r24
		 //remove the 3 channel id bits
		  w1 = w1 & 0x0fff; 
    4aea:	9f 70       	andi	r25, 0x0F	; 15
    4aec:	89 83       	std	Y+1, r24	; 0x01
    4aee:	9a 83       	std	Y+2, r25	; 0x02
		  //output value is now 0x0800 to 0x0fff
		}
    return w1;
    4af0:	29 81       	ldd	r18, Y+1	; 0x01
    4af2:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else
    return 0;
}
    4af4:	c9 01       	movw	r24, r18
    4af6:	22 96       	adiw	r28, 0x02	; 2
    4af8:	e2 e0       	ldi	r30, 0x02	; 2
    4afa:	0c 94 c3 5b 	jmp	0xb786	; 0xb786 <__epilogue_restores__+0x20>

00004afe <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    4afe:	98 2f       	mov	r25, r24
//AD5754 16 bit DAC, it also works for AD5724 12 bit DAC
//chanel number should from 0 to 3 and value ranges from -32767 to 32767
  if (!((ch & ~3) || ((value > 32767) || (value < -32767)))) {
    4b00:	8c 7f       	andi	r24, 0xFC	; 252
    4b02:	11 f5       	brne	.+68     	; 0x4b48 <analogWrite+0x4a>
    4b04:	80 e8       	ldi	r24, 0x80	; 128
    4b06:	60 30       	cpi	r22, 0x00	; 0
    4b08:	78 07       	cpc	r23, r24
    4b0a:	f1 f0       	breq	.+60     	; 0x4b48 <analogWrite+0x4a>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    4b0c:	80 e1       	ldi	r24, 0x10	; 16
    4b0e:	e0 e6       	ldi	r30, 0x60	; 96
    4b10:	f6 e0       	ldi	r31, 0x06	; 6
    4b12:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    4b14:	97 70       	andi	r25, 0x07	; 7
    4b16:	e0 ec       	ldi	r30, 0xC0	; 192
    4b18:	f9 e0       	ldi	r31, 0x09	; 9
    4b1a:	93 83       	std	Z+3, r25	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4b1c:	80 91 c2 09 	lds	r24, 0x09C2
    4b20:	87 ff       	sbrs	r24, 7
    4b22:	fc cf       	rjmp	.-8      	; 0x4b1c <analogWrite+0x1e>
	SPID.DATA = (uint8_t)((value & 0xff00) >> 8);
    4b24:	e0 ec       	ldi	r30, 0xC0	; 192
    4b26:	f9 e0       	ldi	r31, 0x09	; 9
    4b28:	73 83       	std	Z+3, r23	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4b2a:	80 91 c2 09 	lds	r24, 0x09C2
    4b2e:	87 ff       	sbrs	r24, 7
    4b30:	fc cf       	rjmp	.-8      	; 0x4b2a <analogWrite+0x2c>
	SPID.DATA = (uint8_t)(value & 0xff) ;
    4b32:	e0 ec       	ldi	r30, 0xC0	; 192
    4b34:	f9 e0       	ldi	r31, 0x09	; 9
    4b36:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4b38:	80 91 c2 09 	lds	r24, 0x09C2
    4b3c:	87 ff       	sbrs	r24, 7
    4b3e:	fc cf       	rjmp	.-8      	; 0x4b38 <analogWrite+0x3a>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    4b40:	80 e1       	ldi	r24, 0x10	; 16
    4b42:	e0 e6       	ldi	r30, 0x60	; 96
    4b44:	f6 e0       	ldi	r31, 0x06	; 6
    4b46:	85 83       	std	Z+5, r24	; 0x05
    4b48:	08 95       	ret

00004b4a <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    4b4a:	a0 e0       	ldi	r26, 0x00	; 0
    4b4c:	b0 e0       	ldi	r27, 0x00	; 0
    4b4e:	eb ea       	ldi	r30, 0xAB	; 171
    4b50:	f5 e2       	ldi	r31, 0x25	; 37
    4b52:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <__prologue_saves__+0x8>
    4b56:	b8 2e       	mov	r11, r24
    4b58:	c0 e0       	ldi	r28, 0x00	; 0
    4b5a:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4b5c:	00 e2       	ldi	r16, 0x20	; 32
    4b5e:	17 e0       	ldi	r17, 0x07	; 7
    4b60:	66 24       	eor	r6, r6
    4b62:	63 94       	inc	r6
    4b64:	82 e0       	ldi	r24, 0x02	; 2
    4b66:	78 2e       	mov	r7, r24
    4b68:	b4 e0       	ldi	r27, 0x04	; 4
    4b6a:	8b 2e       	mov	r8, r27
    4b6c:	a8 e0       	ldi	r26, 0x08	; 8
    4b6e:	9a 2e       	mov	r9, r26
    4b70:	f0 e2       	ldi	r31, 0x20	; 32
    4b72:	ef 2e       	mov	r14, r31
    4b74:	f3 e0       	ldi	r31, 0x03	; 3
    4b76:	ff 2e       	mov	r15, r31

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4b78:	c1 2c       	mov	r12, r1
    4b7a:	e7 e0       	ldi	r30, 0x07	; 7
    4b7c:	de 2e       	mov	r13, r30
    4b7e:	70 e2       	ldi	r23, 0x20	; 32
    4b80:	a7 2e       	mov	r10, r23

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4b82:	f8 01       	movw	r30, r16
    4b84:	67 82       	std	Z+7, r6	; 0x07
    4b86:	77 82       	std	Z+7, r7	; 0x07
    4b88:	87 82       	std	Z+7, r8	; 0x07
    4b8a:	97 82       	std	Z+7, r9	; 0x07
    4b8c:	88 ee       	ldi	r24, 0xE8	; 232
    4b8e:	93 e0       	ldi	r25, 0x03	; 3
    4b90:	f7 01       	movw	r30, r14
    4b92:	31 97       	sbiw	r30, 0x01	; 1
    4b94:	f1 f7       	brne	.-4      	; 0x4b92 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b98:	d9 f7       	brne	.-10     	; 0x4b90 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    4b9a:	8b 2d       	mov	r24, r11
    4b9c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
    4ba0:	bc 01       	movw	r22, r24
    4ba2:	28 ee       	ldi	r18, 0xE8	; 232
    4ba4:	33 e0       	ldi	r19, 0x03	; 3
    4ba6:	f7 01       	movw	r30, r14
    4ba8:	31 97       	sbiw	r30, 0x01	; 1
    4baa:	f1 f7       	brne	.-4      	; 0x4ba8 <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bac:	21 50       	subi	r18, 0x01	; 1
    4bae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb0:	d1 f7       	brne	.-12     	; 0x4ba6 <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
    if (k % 2)
    4bb8:	c0 ff       	sbrs	r28, 0
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4bbc:	f6 01       	movw	r30, r12
    4bbe:	a7 82       	std	Z+7, r10	; 0x07
    4bc0:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    4bc2:	cc 33       	cpi	r28, 0x3C	; 60
    4bc4:	d1 05       	cpc	r29, r1
    4bc6:	e9 f6       	brne	.-70     	; 0x4b82 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per square wave pulse
  }
}
    4bc8:	cd b7       	in	r28, 0x3d	; 61
    4bca:	de b7       	in	r29, 0x3e	; 62
    4bcc:	ee e0       	ldi	r30, 0x0E	; 14
    4bce:	0c 94 b7 5b 	jmp	0xb76e	; 0xb76e <__epilogue_restores__+0x8>

00004bd2 <SystemReset>:

void SystemReset(void) {
    4bd2:	0f 93       	push	r16
    4bd4:	df 93       	push	r29
    4bd6:	cf 93       	push	r28
    4bd8:	0f 92       	push	r0
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    4bde:	8f b7       	in	r24, 0x3f	; 63
    4be0:	89 83       	std	Y+1, r24	; 0x01
  cli();
    4be2:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    4be4:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    4be6:	21 e0       	ldi	r18, 0x01	; 1
    4be8:	89 e7       	ldi	r24, 0x79	; 121
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	fc 01       	movw	r30, r24
    4bee:	08 ed       	ldi	r16, 0xD8	; 216
    4bf0:	04 bf       	out	0x34, r16	; 52
    4bf2:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    4bf4:	89 81       	ldd	r24, Y+1	; 0x01
    4bf6:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    4bf8:	0f 90       	pop	r0
    4bfa:	cf 91       	pop	r28
    4bfc:	df 91       	pop	r29
    4bfe:	0f 91       	pop	r16
    4c00:	08 95       	ret

00004c02 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    4c02:	a0 e0       	ldi	r26, 0x00	; 0
    4c04:	b0 e0       	ldi	r27, 0x00	; 0
    4c06:	e7 e0       	ldi	r30, 0x07	; 7
    4c08:	f6 e2       	ldi	r31, 0x26	; 38
    4c0a:	0c 94 9d 5b 	jmp	0xb73a	; 0xb73a <__prologue_saves__+0xc>
    4c0e:	98 2e       	mov	r9, r24
    4c10:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4c12:	40 ea       	ldi	r20, 0xA0	; 160
    4c14:	a4 2e       	mov	r10, r20
    4c16:	4f e0       	ldi	r20, 0x0F	; 15
    4c18:	b4 2e       	mov	r11, r20
    4c1a:	30 e8       	ldi	r19, 0x80	; 128
    4c1c:	c3 2e       	mov	r12, r19
    4c1e:	3e e3       	ldi	r19, 0x3E	; 62
    4c20:	d3 2e       	mov	r13, r19

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4c22:	e1 2c       	mov	r14, r1
    4c24:	27 e0       	ldi	r18, 0x07	; 7
    4c26:	f2 2e       	mov	r15, r18
    4c28:	90 e2       	ldi	r25, 0x20	; 32
    4c2a:	89 2e       	mov	r8, r25
    4c2c:	1d c0       	rjmp	.+58     	; 0x4c68 <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4c2e:	14 36       	cpi	r17, 0x64	; 100
    4c30:	10 f4       	brcc	.+4      	; 0x4c36 <test_ADC+0x34>
    4c32:	be 01       	movw	r22, r28
    4c34:	03 c0       	rjmp	.+6      	; 0x4c3c <test_ADC+0x3a>
    4c36:	b5 01       	movw	r22, r10
    4c38:	6c 1b       	sub	r22, r28
    4c3a:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    4c3c:	80 e0       	ldi	r24, 0x00	; 0
    4c3e:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    4c42:	89 2d       	mov	r24, r9
    4c44:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <analogRead>
    4c48:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	0e 94 7f 25 	call	0x4afe	; 0x4afe <analogWrite>
    4c50:	c6 01       	movw	r24, r12
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    4c56:	1f 5f       	subi	r17, 0xFF	; 255
    4c58:	64 96       	adiw	r28, 0x14	; 20
    4c5a:	18 3c       	cpi	r17, 0xC8	; 200
    4c5c:	41 f7       	brne	.-48     	; 0x4c2e <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4c5e:	f7 01       	movw	r30, r14
    4c60:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    4c62:	0f 5f       	subi	r16, 0xFF	; 255
    4c64:	0e 31       	cpi	r16, 0x1E	; 30
    4c66:	21 f0       	breq	.+8      	; 0x4c70 <test_ADC+0x6e>
    4c68:	10 e0       	ldi	r17, 0x00	; 0
    4c6a:	c0 e0       	ldi	r28, 0x00	; 0
    4c6c:	d0 e0       	ldi	r29, 0x00	; 0
    4c6e:	df cf       	rjmp	.-66     	; 0x4c2e <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    4c70:	cd b7       	in	r28, 0x3d	; 61
    4c72:	de b7       	in	r29, 0x3e	; 62
    4c74:	ec e0       	ldi	r30, 0x0C	; 12
    4c76:	0c 94 b9 5b 	jmp	0xb772	; 0xb772 <__epilogue_restores__+0xc>

00004c7a <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    4c7a:	bc 01       	movw	r22, r24
    4c7c:	23 ed       	ldi	r18, 0xD3	; 211
    4c7e:	3e e0       	ldi	r19, 0x0E	; 14
    4c80:	40 e0       	ldi	r20, 0x00	; 0
    4c82:	50 e0       	ldi	r21, 0x00	; 0
    4c84:	08 c0       	rjmp	.+16     	; 0x4c96 <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4c86:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    4c88:	2f 5f       	subi	r18, 0xFF	; 255
    4c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8c:	e4 91       	lpm	r30, Z+
    4c8e:	ee 23       	and	r30, r30
    4c90:	d1 f7       	brne	.-12     	; 0x4c86 <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4c92:	4f 5f       	subi	r20, 0xFF	; 255
    4c94:	5f 4f       	sbci	r21, 0xFF	; 255
    4c96:	46 17       	cp	r20, r22
    4c98:	57 07       	cpc	r21, r23
    4c9a:	21 f0       	breq	.+8      	; 0x4ca4 <put_rc+0x2a>
    4c9c:	f9 01       	movw	r30, r18
    4c9e:	84 91       	lpm	r24, Z+
    4ca0:	88 23       	and	r24, r24
    4ca2:	89 f7       	brne	.-30     	; 0x4c86 <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    4ca4:	00 d0       	rcall	.+0      	; 0x4ca6 <put_rc+0x2c>
    4ca6:	0f 92       	push	r0
    4ca8:	8f ec       	ldi	r24, 0xCF	; 207
    4caa:	9e e0       	ldi	r25, 0x0E	; 14
    4cac:	ed b7       	in	r30, 0x3d	; 61
    4cae:	fe b7       	in	r31, 0x3e	; 62
    4cb0:	81 83       	std	Z+1, r24	; 0x01
    4cb2:	92 83       	std	Z+2, r25	; 0x02
    4cb4:	23 83       	std	Z+3, r18	; 0x03
    4cb6:	34 83       	std	Z+4, r19	; 0x04
    4cb8:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
}
    4cc4:	08 95       	ret

00004cc6 <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4cc6:	a0 e0       	ldi	r26, 0x00	; 0
    4cc8:	b0 e0       	ldi	r27, 0x00	; 0
    4cca:	e9 e6       	ldi	r30, 0x69	; 105
    4ccc:	f6 e2       	ldi	r31, 0x26	; 38
    4cce:	0c 94 9e 5b 	jmp	0xb73c	; 0xb73c <__prologue_saves__+0xe>
    4cd2:	5c 01       	movw	r10, r24
    4cd4:	6a 01       	movw	r12, r20
    4cd6:	7b 01       	movw	r14, r22
    4cd8:	92 2e       	mov	r9, r18
    4cda:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4cdc:	85 ec       	ldi	r24, 0xC5	; 197
    4cde:	91 e1       	ldi	r25, 0x11	; 17
    4ce0:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    buff[0] = 'g';
    4ce4:	87 e6       	ldi	r24, 0x67	; 103
    4ce6:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4ce8:	bb 27       	eor	r27, r27
    4cea:	af 2d       	mov	r26, r15
    4cec:	9e 2d       	mov	r25, r14
    4cee:	8d 2d       	mov	r24, r13
    4cf0:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4cf2:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    4cf4:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4cf6:	85 e4       	ldi	r24, 0x45	; 69
    4cf8:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4cfa:	c5 01       	movw	r24, r10
    4cfc:	60 e7       	ldi	r22, 0x70	; 112
    4cfe:	a8 01       	movw	r20, r16
    4d00:	25 e0       	ldi	r18, 0x05	; 5
    4d02:	09 2d       	mov	r16, r9
    4d04:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4d08:	d5 01       	movw	r26, r10
    4d0a:	1d 96       	adiw	r26, 0x0d	; 13
    4d0c:	8c 91       	ld	r24, X
    4d0e:	1d 97       	sbiw	r26, 0x0d	; 13
    4d10:	88 23       	and	r24, r24
    4d12:	d1 f7       	brne	.-12     	; 0x4d08 <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4d14:	1e 96       	adiw	r26, 0x0e	; 14
    4d16:	8c 91       	ld	r24, X
    4d18:	1e 97       	sbiw	r26, 0x0e	; 14
    4d1a:	81 30       	cpi	r24, 0x01	; 1
    4d1c:	b9 f0       	breq	.+46     	; 0x4d4c <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4d1e:	1e 96       	adiw	r26, 0x0e	; 14
    4d20:	2c 91       	ld	r18, X
    4d22:	00 d0       	rcall	.+0      	; 0x4d24 <verifyEEPage+0x5e>
    4d24:	0f 92       	push	r0
    4d26:	ed b7       	in	r30, 0x3d	; 61
    4d28:	fe b7       	in	r31, 0x3e	; 62
    4d2a:	31 96       	adiw	r30, 0x01	; 1
    4d2c:	88 ea       	ldi	r24, 0xA8	; 168
    4d2e:	91 e1       	ldi	r25, 0x11	; 17
    4d30:	ad b7       	in	r26, 0x3d	; 61
    4d32:	be b7       	in	r27, 0x3e	; 62
    4d34:	11 96       	adiw	r26, 0x01	; 1
    4d36:	8d 93       	st	X+, r24
    4d38:	9c 93       	st	X, r25
    4d3a:	12 97       	sbiw	r26, 0x02	; 2
    4d3c:	22 83       	std	Z+2, r18	; 0x02
    4d3e:	13 82       	std	Z+3, r1	; 0x03
    4d40:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    4d44:	0f 90       	pop	r0
    4d46:	0f 90       	pop	r0
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	de 01       	movw	r26, r28
    4d4e:	31 e0       	ldi	r19, 0x01	; 1
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	0d c0       	rjmp	.+26     	; 0x4d6e <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4d54:	e5 01       	movw	r28, r10
    4d56:	ed 81       	ldd	r30, Y+5	; 0x05
    4d58:	fe 81       	ldd	r31, Y+6	; 0x06
    4d5a:	e2 0f       	add	r30, r18
    4d5c:	f1 1d       	adc	r31, r1
    4d5e:	90 81       	ld	r25, Z
    4d60:	15 96       	adiw	r26, 0x05	; 5
    4d62:	8c 91       	ld	r24, X
    4d64:	15 97       	sbiw	r26, 0x05	; 5
    4d66:	98 13       	cpse	r25, r24
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4d6a:	2f 5f       	subi	r18, 0xFF	; 255
    4d6c:	11 96       	adiw	r26, 0x01	; 1
    4d6e:	29 15       	cp	r18, r9
    4d70:	88 f3       	brcs	.-30     	; 0x4d54 <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    4d72:	83 2f       	mov	r24, r19
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	cd b7       	in	r28, 0x3d	; 61
    4d78:	de b7       	in	r29, 0x3e	; 62
    4d7a:	eb e0       	ldi	r30, 0x0B	; 11
    4d7c:	0c 94 ba 5b 	jmp	0xb774	; 0xb774 <__epilogue_restores__+0xe>

00004d80 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4d80:	a0 e0       	ldi	r26, 0x00	; 0
    4d82:	b0 e0       	ldi	r27, 0x00	; 0
    4d84:	e6 ec       	ldi	r30, 0xC6	; 198
    4d86:	f6 e2       	ldi	r31, 0x26	; 38
    4d88:	0c 94 9e 5b 	jmp	0xb73c	; 0xb73c <__prologue_saves__+0xe>
    4d8c:	5c 01       	movw	r10, r24
    4d8e:	6a 01       	movw	r12, r20
    4d90:	7b 01       	movw	r14, r22
    4d92:	92 2e       	mov	r9, r18
    4d94:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    4d96:	84 ee       	ldi	r24, 0xE4	; 228
    4d98:	91 e1       	ldi	r25, 0x11	; 17
    4d9a:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    buff[0] = 'g';
    4d9e:	87 e6       	ldi	r24, 0x67	; 103
    4da0:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4da2:	bb 27       	eor	r27, r27
    4da4:	af 2d       	mov	r26, r15
    4da6:	9e 2d       	mov	r25, r14
    4da8:	8d 2d       	mov	r24, r13
    4daa:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4dac:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    4dae:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4db0:	85 e4       	ldi	r24, 0x45	; 69
    4db2:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4db4:	c5 01       	movw	r24, r10
    4db6:	60 e7       	ldi	r22, 0x70	; 112
    4db8:	a8 01       	movw	r20, r16
    4dba:	25 e0       	ldi	r18, 0x05	; 5
    4dbc:	09 2d       	mov	r16, r9
    4dbe:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4dc2:	d5 01       	movw	r26, r10
    4dc4:	1d 96       	adiw	r26, 0x0d	; 13
    4dc6:	8c 91       	ld	r24, X
    4dc8:	1d 97       	sbiw	r26, 0x0d	; 13
    4dca:	88 23       	and	r24, r24
    4dcc:	d1 f7       	brne	.-12     	; 0x4dc2 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4dce:	1e 96       	adiw	r26, 0x0e	; 14
    4dd0:	8c 91       	ld	r24, X
    4dd2:	1e 97       	sbiw	r26, 0x0e	; 14
    4dd4:	81 30       	cpi	r24, 0x01	; 1
    4dd6:	b9 f0       	breq	.+46     	; 0x4e06 <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4dd8:	1e 96       	adiw	r26, 0x0e	; 14
    4dda:	2c 91       	ld	r18, X
    4ddc:	00 d0       	rcall	.+0      	; 0x4dde <readEEPage+0x5e>
    4dde:	0f 92       	push	r0
    4de0:	ed b7       	in	r30, 0x3d	; 61
    4de2:	fe b7       	in	r31, 0x3e	; 62
    4de4:	31 96       	adiw	r30, 0x01	; 1
    4de6:	87 ec       	ldi	r24, 0xC7	; 199
    4de8:	91 e1       	ldi	r25, 0x11	; 17
    4dea:	ad b7       	in	r26, 0x3d	; 61
    4dec:	be b7       	in	r27, 0x3e	; 62
    4dee:	11 96       	adiw	r26, 0x01	; 1
    4df0:	8d 93       	st	X+, r24
    4df2:	9c 93       	st	X, r25
    4df4:	12 97       	sbiw	r26, 0x02	; 2
    4df6:	22 83       	std	Z+2, r18	; 0x02
    4df8:	13 82       	std	Z+3, r1	; 0x03
    4dfa:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    4dfe:	0f 90       	pop	r0
    4e00:	0f 90       	pop	r0
    4e02:	0f 90       	pop	r0
    4e04:	0f 90       	pop	r0
    4e06:	de 01       	movw	r26, r28
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	0a c0       	rjmp	.+20     	; 0x4e20 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4e0c:	e5 01       	movw	r28, r10
    4e0e:	ed 81       	ldd	r30, Y+5	; 0x05
    4e10:	fe 81       	ldd	r31, Y+6	; 0x06
    4e12:	e9 0f       	add	r30, r25
    4e14:	f1 1d       	adc	r31, r1
    4e16:	80 81       	ld	r24, Z
    4e18:	14 96       	adiw	r26, 0x04	; 4
    4e1a:	8c 93       	st	X, r24
    4e1c:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4e1e:	9f 5f       	subi	r25, 0xFF	; 255
    4e20:	11 96       	adiw	r26, 0x01	; 1
    4e22:	99 15       	cp	r25, r9
    4e24:	98 f3       	brcs	.-26     	; 0x4e0c <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	eb e0       	ldi	r30, 0x0B	; 11
    4e2c:	0c 94 ba 5b 	jmp	0xb774	; 0xb774 <__epilogue_restores__+0xe>

00004e30 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4e30:	a0 e0       	ldi	r26, 0x00	; 0
    4e32:	b0 e0       	ldi	r27, 0x00	; 0
    4e34:	ee e1       	ldi	r30, 0x1E	; 30
    4e36:	f7 e2       	ldi	r31, 0x27	; 39
    4e38:	0c 94 a0 5b 	jmp	0xb740	; 0xb740 <__prologue_saves__+0x12>
    4e3c:	ec 01       	movw	r28, r24
    4e3e:	6a 01       	movw	r12, r20
    4e40:	7b 01       	movw	r14, r22
    4e42:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    4e44:	85 e0       	ldi	r24, 0x05	; 5
    4e46:	92 e1       	ldi	r25, 0x12	; 18
    4e48:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    buff[0] = 'B';
    4e4c:	82 e4       	ldi	r24, 0x42	; 66
    4e4e:	d8 01       	movw	r26, r16
    4e50:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4e52:	bb 27       	eor	r27, r27
    4e54:	af 2d       	mov	r26, r15
    4e56:	9e 2d       	mov	r25, r14
    4e58:	8d 2d       	mov	r24, r13
    4e5a:	f8 01       	movw	r30, r16
    4e5c:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4e5e:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    4e60:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    4e62:	85 e4       	ldi	r24, 0x45	; 69
    4e64:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    4e66:	f5 e0       	ldi	r31, 0x05	; 5
    4e68:	bf 0e       	add	r11, r31
    4e6a:	ce 01       	movw	r24, r28
    4e6c:	60 e7       	ldi	r22, 0x70	; 112
    4e6e:	a8 01       	movw	r20, r16
    4e70:	2b 2d       	mov	r18, r11
    4e72:	00 e0       	ldi	r16, 0x00	; 0
    4e74:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e7a:	88 23       	and	r24, r24
    4e7c:	e9 f7       	brne	.-6      	; 0x4e78 <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4e7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e80:	81 30       	cpi	r24, 0x01	; 1
    4e82:	b1 f0       	breq	.+44     	; 0x4eb0 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    4e84:	2e 85       	ldd	r18, Y+14	; 0x0e
    4e86:	00 d0       	rcall	.+0      	; 0x4e88 <progEEPage+0x58>
    4e88:	0f 92       	push	r0
    4e8a:	ed b7       	in	r30, 0x3d	; 61
    4e8c:	fe b7       	in	r31, 0x3e	; 62
    4e8e:	31 96       	adiw	r30, 0x01	; 1
    4e90:	86 ee       	ldi	r24, 0xE6	; 230
    4e92:	91 e1       	ldi	r25, 0x11	; 17
    4e94:	ad b7       	in	r26, 0x3d	; 61
    4e96:	be b7       	in	r27, 0x3e	; 62
    4e98:	11 96       	adiw	r26, 0x01	; 1
    4e9a:	8d 93       	st	X+, r24
    4e9c:	9c 93       	st	X, r25
    4e9e:	12 97       	sbiw	r26, 0x02	; 2
    4ea0:	22 83       	std	Z+2, r18	; 0x02
    4ea2:	13 82       	std	Z+3, r1	; 0x03
    4ea4:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	0f 90       	pop	r0
    }
}
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	e9 e0       	ldi	r30, 0x09	; 9
    4eb6:	0c 94 bc 5b 	jmp	0xb778	; 0xb778 <__epilogue_restores__+0x12>

00004eba <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4eba:	a0 e0       	ldi	r26, 0x00	; 0
    4ebc:	b0 e0       	ldi	r27, 0x00	; 0
    4ebe:	e3 e6       	ldi	r30, 0x63	; 99
    4ec0:	f7 e2       	ldi	r31, 0x27	; 39
    4ec2:	0c 94 9e 5b 	jmp	0xb73c	; 0xb73c <__prologue_saves__+0xe>
    4ec6:	5c 01       	movw	r10, r24
    4ec8:	6a 01       	movw	r12, r20
    4eca:	7b 01       	movw	r14, r22
    4ecc:	92 2e       	mov	r9, r18
    4ece:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4ed0:	84 e2       	ldi	r24, 0x24	; 36
    4ed2:	92 e1       	ldi	r25, 0x12	; 18
    4ed4:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    buff[0] = 'g';
    4ed8:	87 e6       	ldi	r24, 0x67	; 103
    4eda:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4edc:	bb 27       	eor	r27, r27
    4ede:	af 2d       	mov	r26, r15
    4ee0:	9e 2d       	mov	r25, r14
    4ee2:	8d 2d       	mov	r24, r13
    4ee4:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4ee6:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4ee8:	89 2d       	mov	r24, r9
    4eea:	86 95       	lsr	r24
    4eec:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4eee:	86 e4       	ldi	r24, 0x46	; 70
    4ef0:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4ef2:	c5 01       	movw	r24, r10
    4ef4:	60 e7       	ldi	r22, 0x70	; 112
    4ef6:	a8 01       	movw	r20, r16
    4ef8:	25 e0       	ldi	r18, 0x05	; 5
    4efa:	09 2d       	mov	r16, r9
    4efc:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4f00:	d5 01       	movw	r26, r10
    4f02:	1d 96       	adiw	r26, 0x0d	; 13
    4f04:	8c 91       	ld	r24, X
    4f06:	1d 97       	sbiw	r26, 0x0d	; 13
    4f08:	88 23       	and	r24, r24
    4f0a:	d1 f7       	brne	.-12     	; 0x4f00 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4f0c:	1e 96       	adiw	r26, 0x0e	; 14
    4f0e:	8c 91       	ld	r24, X
    4f10:	1e 97       	sbiw	r26, 0x0e	; 14
    4f12:	81 30       	cpi	r24, 0x01	; 1
    4f14:	b9 f0       	breq	.+46     	; 0x4f44 <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4f16:	1e 96       	adiw	r26, 0x0e	; 14
    4f18:	2c 91       	ld	r18, X
    4f1a:	00 d0       	rcall	.+0      	; 0x4f1c <verifyPage+0x62>
    4f1c:	0f 92       	push	r0
    4f1e:	ed b7       	in	r30, 0x3d	; 61
    4f20:	fe b7       	in	r31, 0x3e	; 62
    4f22:	31 96       	adiw	r30, 0x01	; 1
    4f24:	87 e0       	ldi	r24, 0x07	; 7
    4f26:	92 e1       	ldi	r25, 0x12	; 18
    4f28:	ad b7       	in	r26, 0x3d	; 61
    4f2a:	be b7       	in	r27, 0x3e	; 62
    4f2c:	11 96       	adiw	r26, 0x01	; 1
    4f2e:	8d 93       	st	X+, r24
    4f30:	9c 93       	st	X, r25
    4f32:	12 97       	sbiw	r26, 0x02	; 2
    4f34:	22 83       	std	Z+2, r18	; 0x02
    4f36:	13 82       	std	Z+3, r1	; 0x03
    4f38:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	0f 90       	pop	r0
    4f44:	de 01       	movw	r26, r28
    4f46:	31 e0       	ldi	r19, 0x01	; 1
    4f48:	20 e0       	ldi	r18, 0x00	; 0
    4f4a:	0d c0       	rjmp	.+26     	; 0x4f66 <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4f4c:	e5 01       	movw	r28, r10
    4f4e:	ed 81       	ldd	r30, Y+5	; 0x05
    4f50:	fe 81       	ldd	r31, Y+6	; 0x06
    4f52:	e2 0f       	add	r30, r18
    4f54:	f1 1d       	adc	r31, r1
    4f56:	90 81       	ld	r25, Z
    4f58:	15 96       	adiw	r26, 0x05	; 5
    4f5a:	8c 91       	ld	r24, X
    4f5c:	15 97       	sbiw	r26, 0x05	; 5
    4f5e:	98 13       	cpse	r25, r24
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4f62:	2f 5f       	subi	r18, 0xFF	; 255
    4f64:	11 96       	adiw	r26, 0x01	; 1
    4f66:	29 15       	cp	r18, r9
    4f68:	88 f3       	brcs	.-30     	; 0x4f4c <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    4f6a:	83 2f       	mov	r24, r19
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	cd b7       	in	r28, 0x3d	; 61
    4f70:	de b7       	in	r29, 0x3e	; 62
    4f72:	eb e0       	ldi	r30, 0x0B	; 11
    4f74:	0c 94 ba 5b 	jmp	0xb774	; 0xb774 <__epilogue_restores__+0xe>

00004f78 <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4f78:	a0 e0       	ldi	r26, 0x00	; 0
    4f7a:	b0 e0       	ldi	r27, 0x00	; 0
    4f7c:	e2 ec       	ldi	r30, 0xC2	; 194
    4f7e:	f7 e2       	ldi	r31, 0x27	; 39
    4f80:	0c 94 9e 5b 	jmp	0xb73c	; 0xb73c <__prologue_saves__+0xe>
    4f84:	5c 01       	movw	r10, r24
    4f86:	6a 01       	movw	r12, r20
    4f88:	7b 01       	movw	r14, r22
    4f8a:	92 2e       	mov	r9, r18
    4f8c:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    4f8e:	83 e4       	ldi	r24, 0x43	; 67
    4f90:	92 e1       	ldi	r25, 0x12	; 18
    4f92:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    buff[0] = 'g';
    4f96:	87 e6       	ldi	r24, 0x67	; 103
    4f98:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4f9a:	bb 27       	eor	r27, r27
    4f9c:	af 2d       	mov	r26, r15
    4f9e:	9e 2d       	mov	r25, r14
    4fa0:	8d 2d       	mov	r24, r13
    4fa2:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4fa4:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4fa6:	89 2d       	mov	r24, r9
    4fa8:	86 95       	lsr	r24
    4faa:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4fac:	86 e4       	ldi	r24, 0x46	; 70
    4fae:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4fb0:	c5 01       	movw	r24, r10
    4fb2:	60 e7       	ldi	r22, 0x70	; 112
    4fb4:	a8 01       	movw	r20, r16
    4fb6:	25 e0       	ldi	r18, 0x05	; 5
    4fb8:	09 2d       	mov	r16, r9
    4fba:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4fbe:	d5 01       	movw	r26, r10
    4fc0:	1d 96       	adiw	r26, 0x0d	; 13
    4fc2:	8c 91       	ld	r24, X
    4fc4:	1d 97       	sbiw	r26, 0x0d	; 13
    4fc6:	88 23       	and	r24, r24
    4fc8:	d1 f7       	brne	.-12     	; 0x4fbe <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4fca:	1e 96       	adiw	r26, 0x0e	; 14
    4fcc:	8c 91       	ld	r24, X
    4fce:	1e 97       	sbiw	r26, 0x0e	; 14
    4fd0:	81 30       	cpi	r24, 0x01	; 1
    4fd2:	b9 f0       	breq	.+46     	; 0x5002 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4fd4:	1e 96       	adiw	r26, 0x0e	; 14
    4fd6:	2c 91       	ld	r18, X
    4fd8:	00 d0       	rcall	.+0      	; 0x4fda <readPage+0x62>
    4fda:	0f 92       	push	r0
    4fdc:	ed b7       	in	r30, 0x3d	; 61
    4fde:	fe b7       	in	r31, 0x3e	; 62
    4fe0:	31 96       	adiw	r30, 0x01	; 1
    4fe2:	86 e2       	ldi	r24, 0x26	; 38
    4fe4:	92 e1       	ldi	r25, 0x12	; 18
    4fe6:	ad b7       	in	r26, 0x3d	; 61
    4fe8:	be b7       	in	r27, 0x3e	; 62
    4fea:	11 96       	adiw	r26, 0x01	; 1
    4fec:	8d 93       	st	X+, r24
    4fee:	9c 93       	st	X, r25
    4ff0:	12 97       	sbiw	r26, 0x02	; 2
    4ff2:	22 83       	std	Z+2, r18	; 0x02
    4ff4:	13 82       	std	Z+3, r1	; 0x03
    4ff6:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    4ffa:	0f 90       	pop	r0
    4ffc:	0f 90       	pop	r0
    4ffe:	0f 90       	pop	r0
    5000:	0f 90       	pop	r0
    5002:	de 01       	movw	r26, r28
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	0a c0       	rjmp	.+20     	; 0x501c <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    5008:	e5 01       	movw	r28, r10
    500a:	ed 81       	ldd	r30, Y+5	; 0x05
    500c:	fe 81       	ldd	r31, Y+6	; 0x06
    500e:	e9 0f       	add	r30, r25
    5010:	f1 1d       	adc	r31, r1
    5012:	80 81       	ld	r24, Z
    5014:	14 96       	adiw	r26, 0x04	; 4
    5016:	8c 93       	st	X, r24
    5018:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    501a:	9f 5f       	subi	r25, 0xFF	; 255
    501c:	11 96       	adiw	r26, 0x01	; 1
    501e:	99 15       	cp	r25, r9
    5020:	98 f3       	brcs	.-26     	; 0x5008 <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    5022:	cd b7       	in	r28, 0x3d	; 61
    5024:	de b7       	in	r29, 0x3e	; 62
    5026:	eb e0       	ldi	r30, 0x0B	; 11
    5028:	0c 94 ba 5b 	jmp	0xb774	; 0xb774 <__epilogue_restores__+0xe>

0000502c <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    502c:	a0 e0       	ldi	r26, 0x00	; 0
    502e:	b0 e0       	ldi	r27, 0x00	; 0
    5030:	ec e1       	ldi	r30, 0x1C	; 28
    5032:	f8 e2       	ldi	r31, 0x28	; 40
    5034:	0c 94 a0 5b 	jmp	0xb740	; 0xb740 <__prologue_saves__+0x12>
    5038:	ec 01       	movw	r28, r24
    503a:	6a 01       	movw	r12, r20
    503c:	7b 01       	movw	r14, r22
    503e:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    5040:	83 e6       	ldi	r24, 0x63	; 99
    5042:	92 e1       	ldi	r25, 0x12	; 18
    5044:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    5048:	82 e4       	ldi	r24, 0x42	; 66
    504a:	d8 01       	movw	r26, r16
    504c:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    504e:	bb 27       	eor	r27, r27
    5050:	af 2d       	mov	r26, r15
    5052:	9e 2d       	mov	r25, r14
    5054:	8d 2d       	mov	r24, r13
    5056:	f8 01       	movw	r30, r16
    5058:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    505a:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    505c:	8b 2d       	mov	r24, r11
    505e:	86 95       	lsr	r24
    5060:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    5062:	86 e4       	ldi	r24, 0x46	; 70
    5064:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    5066:	f5 e0       	ldi	r31, 0x05	; 5
    5068:	bf 0e       	add	r11, r31
    506a:	ce 01       	movw	r24, r28
    506c:	60 e7       	ldi	r22, 0x70	; 112
    506e:	a8 01       	movw	r20, r16
    5070:	2b 2d       	mov	r18, r11
    5072:	00 e0       	ldi	r16, 0x00	; 0
    5074:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    5078:	8d 85       	ldd	r24, Y+13	; 0x0d
    507a:	88 23       	and	r24, r24
    507c:	e9 f7       	brne	.-6      	; 0x5078 <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    507e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5080:	81 30       	cpi	r24, 0x01	; 1
    5082:	b1 f0       	breq	.+44     	; 0x50b0 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    5084:	2e 85       	ldd	r18, Y+14	; 0x0e
    5086:	00 d0       	rcall	.+0      	; 0x5088 <progPage+0x5c>
    5088:	0f 92       	push	r0
    508a:	ed b7       	in	r30, 0x3d	; 61
    508c:	fe b7       	in	r31, 0x3e	; 62
    508e:	31 96       	adiw	r30, 0x01	; 1
    5090:	85 e4       	ldi	r24, 0x45	; 69
    5092:	92 e1       	ldi	r25, 0x12	; 18
    5094:	ad b7       	in	r26, 0x3d	; 61
    5096:	be b7       	in	r27, 0x3e	; 62
    5098:	11 96       	adiw	r26, 0x01	; 1
    509a:	8d 93       	st	X+, r24
    509c:	9c 93       	st	X, r25
    509e:	12 97       	sbiw	r26, 0x02	; 2
    50a0:	22 83       	std	Z+2, r18	; 0x02
    50a2:	13 82       	std	Z+3, r1	; 0x03
    50a4:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
    }
}
    50b0:	cd b7       	in	r28, 0x3d	; 61
    50b2:	de b7       	in	r29, 0x3e	; 62
    50b4:	e9 e0       	ldi	r30, 0x09	; 9
    50b6:	0c 94 bc 5b 	jmp	0xb778	; 0xb778 <__epilogue_restores__+0x12>

000050ba <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    50ba:	af e0       	ldi	r26, 0x0F	; 15
    50bc:	b0 e0       	ldi	r27, 0x00	; 0
    50be:	e3 e6       	ldi	r30, 0x63	; 99
    50c0:	f8 e2       	ldi	r31, 0x28	; 40
    50c2:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    50c6:	7c 01       	movw	r14, r24
    50c8:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    50ca:	db 01       	movw	r26, r22
    50cc:	0d 90       	ld	r0, X+
    50ce:	00 20       	and	r0, r0
    50d0:	e9 f7       	brne	.-6      	; 0x50cc <ihex_readrec+0x12>
    50d2:	6d 01       	movw	r12, r26
    50d4:	08 94       	sec
    50d6:	c1 08       	sbc	r12, r1
    50d8:	d1 08       	sbc	r13, r1
    50da:	c6 1a       	sub	r12, r22
    50dc:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    50de:	b3 e0       	ldi	r27, 0x03	; 3
    50e0:	cb 16       	cp	r12, r27
    50e2:	d1 04       	cpc	r13, r1
    50e4:	0c f4       	brge	.+2      	; 0x50e8 <ihex_readrec+0x2e>
    50e6:	f2 c0       	rjmp	.+484    	; 0x52cc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    50e8:	fb 01       	movw	r30, r22
    50ea:	81 81       	ldd	r24, Z+1	; 0x01
    50ec:	8b 83       	std	Y+3, r24	; 0x03
    50ee:	82 81       	ldd	r24, Z+2	; 0x02
    50f0:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    50f2:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    50f4:	ce 01       	movw	r24, r28
    50f6:	03 96       	adiw	r24, 0x03	; 3
    50f8:	8c 87       	std	Y+12, r24	; 0x0c
    50fa:	9d 87       	std	Y+13, r25	; 0x0d
    50fc:	ce 01       	movw	r24, r28
    50fe:	03 96       	adiw	r24, 0x03	; 3
    5100:	be 01       	movw	r22, r28
    5102:	6f 5f       	subi	r22, 0xFF	; 255
    5104:	7f 4f       	sbci	r23, 0xFF	; 255
    5106:	40 e1       	ldi	r20, 0x10	; 16
    5108:	50 e0       	ldi	r21, 0x00	; 0
    510a:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <strtoul>
    510e:	d7 01       	movw	r26, r14
    5110:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    5112:	e9 81       	ldd	r30, Y+1	; 0x01
    5114:	fa 81       	ldd	r31, Y+2	; 0x02
    5116:	8c 85       	ldd	r24, Y+12	; 0x0c
    5118:	9d 85       	ldd	r25, Y+13	; 0x0d
    511a:	e8 17       	cp	r30, r24
    511c:	f9 07       	cpc	r31, r25
    511e:	09 f4       	brne	.+2      	; 0x5122 <ihex_readrec+0x68>
    5120:	d5 c0       	rjmp	.+426    	; 0x52cc <ihex_readrec+0x212>
    5122:	80 81       	ld	r24, Z
    5124:	88 23       	and	r24, r24
    5126:	09 f0       	breq	.+2      	; 0x512a <ihex_readrec+0x70>
    5128:	d1 c0       	rjmp	.+418    	; 0x52cc <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    512a:	97 e0       	ldi	r25, 0x07	; 7
    512c:	c9 16       	cp	r12, r25
    512e:	d1 04       	cpc	r13, r1
    5130:	0c f4       	brge	.+2      	; 0x5134 <ihex_readrec+0x7a>
    5132:	cc c0       	rjmp	.+408    	; 0x52cc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    5134:	d8 01       	movw	r26, r16
    5136:	13 96       	adiw	r26, 0x03	; 3
    5138:	8c 91       	ld	r24, X
    513a:	13 97       	sbiw	r26, 0x03	; 3
    513c:	8b 83       	std	Y+3, r24	; 0x03
    513e:	14 96       	adiw	r26, 0x04	; 4
    5140:	8c 91       	ld	r24, X
    5142:	14 97       	sbiw	r26, 0x04	; 4
    5144:	8c 83       	std	Y+4, r24	; 0x04
    5146:	15 96       	adiw	r26, 0x05	; 5
    5148:	8c 91       	ld	r24, X
    514a:	15 97       	sbiw	r26, 0x05	; 5
    514c:	8d 83       	std	Y+5, r24	; 0x05
    514e:	16 96       	adiw	r26, 0x06	; 6
    5150:	8c 91       	ld	r24, X
    5152:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    5154:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    5156:	ce 01       	movw	r24, r28
    5158:	03 96       	adiw	r24, 0x03	; 3
    515a:	be 01       	movw	r22, r28
    515c:	6f 5f       	subi	r22, 0xFF	; 255
    515e:	7f 4f       	sbci	r23, 0xFF	; 255
    5160:	40 e1       	ldi	r20, 0x10	; 16
    5162:	50 e0       	ldi	r21, 0x00	; 0
    5164:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <strtoul>
    5168:	f7 01       	movw	r30, r14
    516a:	61 83       	std	Z+1, r22	; 0x01
    516c:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    516e:	e9 81       	ldd	r30, Y+1	; 0x01
    5170:	fa 81       	ldd	r31, Y+2	; 0x02
    5172:	8c 85       	ldd	r24, Y+12	; 0x0c
    5174:	9d 85       	ldd	r25, Y+13	; 0x0d
    5176:	e8 17       	cp	r30, r24
    5178:	f9 07       	cpc	r31, r25
    517a:	09 f4       	brne	.+2      	; 0x517e <ihex_readrec+0xc4>
    517c:	a7 c0       	rjmp	.+334    	; 0x52cc <ihex_readrec+0x212>
    517e:	80 81       	ld	r24, Z
    5180:	88 23       	and	r24, r24
    5182:	09 f0       	breq	.+2      	; 0x5186 <ihex_readrec+0xcc>
    5184:	a3 c0       	rjmp	.+326    	; 0x52cc <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    5186:	99 e0       	ldi	r25, 0x09	; 9
    5188:	c9 16       	cp	r12, r25
    518a:	d1 04       	cpc	r13, r1
    518c:	0c f4       	brge	.+2      	; 0x5190 <ihex_readrec+0xd6>
    518e:	9e c0       	rjmp	.+316    	; 0x52cc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5190:	d8 01       	movw	r26, r16
    5192:	17 96       	adiw	r26, 0x07	; 7
    5194:	8c 91       	ld	r24, X
    5196:	17 97       	sbiw	r26, 0x07	; 7
    5198:	8b 83       	std	Y+3, r24	; 0x03
    519a:	18 96       	adiw	r26, 0x08	; 8
    519c:	8c 91       	ld	r24, X
    519e:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    51a0:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    51a2:	ce 01       	movw	r24, r28
    51a4:	03 96       	adiw	r24, 0x03	; 3
    51a6:	be 01       	movw	r22, r28
    51a8:	6f 5f       	subi	r22, 0xFF	; 255
    51aa:	7f 4f       	sbci	r23, 0xFF	; 255
    51ac:	40 e1       	ldi	r20, 0x10	; 16
    51ae:	50 e0       	ldi	r21, 0x00	; 0
    51b0:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <strtoul>
    51b4:	f7 01       	movw	r30, r14
    51b6:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    51b8:	e9 81       	ldd	r30, Y+1	; 0x01
    51ba:	fa 81       	ldd	r31, Y+2	; 0x02
    51bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    51be:	9d 85       	ldd	r25, Y+13	; 0x0d
    51c0:	e8 17       	cp	r30, r24
    51c2:	f9 07       	cpc	r31, r25
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <ihex_readrec+0x10e>
    51c6:	82 c0       	rjmp	.+260    	; 0x52cc <ihex_readrec+0x212>
    51c8:	80 81       	ld	r24, Z
    51ca:	88 23       	and	r24, r24
    51cc:	09 f0       	breq	.+2      	; 0x51d0 <ihex_readrec+0x116>
    51ce:	7e c0       	rjmp	.+252    	; 0x52cc <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    51d0:	d7 01       	movw	r26, r14
    51d2:	11 96       	adiw	r26, 0x01	; 1
    51d4:	8c 91       	ld	r24, X
    51d6:	11 97       	sbiw	r26, 0x01	; 1
    51d8:	12 96       	adiw	r26, 0x02	; 2
    51da:	9c 91       	ld	r25, X
    51dc:	12 97       	sbiw	r26, 0x02	; 2
    51de:	7c 90       	ld	r7, X
    51e0:	78 0e       	add	r7, r24
    51e2:	79 0e       	add	r7, r25
    51e4:	76 0e       	add	r7, r22
    51e6:	48 01       	movw	r8, r16
    51e8:	17 01       	movw	r2, r14
    51ea:	44 24       	eor	r4, r4
    51ec:	55 24       	eor	r5, r5
    51ee:	b9 e0       	ldi	r27, 0x09	; 9
    51f0:	ab 2e       	mov	r10, r27
    51f2:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    51f4:	fe 01       	movw	r30, r28
    51f6:	33 96       	adiw	r30, 0x03	; 3
    51f8:	ee 87       	std	Y+14, r30	; 0x0e
    51fa:	ff 87       	std	Y+15, r31	; 0x0f
    51fc:	ce 01       	movw	r24, r28
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	8b 87       	std	Y+11, r24	; 0x0b
    5202:	69 2e       	mov	r6, r25
    5204:	32 c0       	rjmp	.+100    	; 0x526a <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    5206:	2c 15       	cp	r18, r12
    5208:	3d 05       	cpc	r19, r13
    520a:	0c f0       	brlt	.+2      	; 0x520e <ihex_readrec+0x154>
    520c:	5f c0       	rjmp	.+190    	; 0x52cc <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    520e:	d4 01       	movw	r26, r8
    5210:	19 96       	adiw	r26, 0x09	; 9
    5212:	8c 91       	ld	r24, X
    5214:	19 97       	sbiw	r26, 0x09	; 9
    5216:	8b 83       	std	Y+3, r24	; 0x03
    5218:	1a 96       	adiw	r26, 0x0a	; 10
    521a:	8c 91       	ld	r24, X
    521c:	8c 83       	std	Y+4, r24	; 0x04
    521e:	e2 e0       	ldi	r30, 0x02	; 2
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	ae 0e       	add	r10, r30
    5224:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    5226:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    5228:	ce 01       	movw	r24, r28
    522a:	03 96       	adiw	r24, 0x03	; 3
    522c:	6b 85       	ldd	r22, Y+11	; 0x0b
    522e:	76 2d       	mov	r23, r6
    5230:	40 e1       	ldi	r20, 0x10	; 16
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <strtoul>
    5238:	d1 01       	movw	r26, r2
    523a:	14 96       	adiw	r26, 0x04	; 4
    523c:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    523e:	e9 81       	ldd	r30, Y+1	; 0x01
    5240:	fa 81       	ldd	r31, Y+2	; 0x02
    5242:	8e 85       	ldd	r24, Y+14	; 0x0e
    5244:	9f 85       	ldd	r25, Y+15	; 0x0f
    5246:	e8 17       	cp	r30, r24
    5248:	f9 07       	cpc	r31, r25
    524a:	09 f4       	brne	.+2      	; 0x524e <ihex_readrec+0x194>
    524c:	3f c0       	rjmp	.+126    	; 0x52cc <ihex_readrec+0x212>
    524e:	a2 e0       	ldi	r26, 0x02	; 2
    5250:	b0 e0       	ldi	r27, 0x00	; 0
    5252:	8a 0e       	add	r8, r26
    5254:	9b 1e       	adc	r9, r27
    5256:	08 94       	sec
    5258:	21 1c       	adc	r2, r1
    525a:	31 1c       	adc	r3, r1
    525c:	80 81       	ld	r24, Z
    525e:	88 23       	and	r24, r24
    5260:	a9 f5       	brne	.+106    	; 0x52cc <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    5262:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    5264:	08 94       	sec
    5266:	41 1c       	adc	r4, r1
    5268:	51 1c       	adc	r5, r1
    526a:	f7 01       	movw	r30, r14
    526c:	80 81       	ld	r24, Z
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	95 01       	movw	r18, r10
    5272:	2f 5f       	subi	r18, 0xFF	; 255
    5274:	3f 4f       	sbci	r19, 0xFF	; 255
    5276:	48 16       	cp	r4, r24
    5278:	59 06       	cpc	r5, r25
    527a:	2c f2       	brlt	.-118    	; 0x5206 <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    527c:	2c 15       	cp	r18, r12
    527e:	3d 05       	cpc	r19, r13
    5280:	2c f5       	brge	.+74     	; 0x52cc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5282:	f8 01       	movw	r30, r16
    5284:	ea 0d       	add	r30, r10
    5286:	fb 1d       	adc	r31, r11
    5288:	80 81       	ld	r24, Z
    528a:	8b 83       	std	Y+3, r24	; 0x03
    528c:	81 81       	ldd	r24, Z+1	; 0x01
    528e:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    5290:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    5292:	8e 01       	movw	r16, r28
    5294:	0d 5f       	subi	r16, 0xFD	; 253
    5296:	1f 4f       	sbci	r17, 0xFF	; 255
    5298:	c8 01       	movw	r24, r16
    529a:	be 01       	movw	r22, r28
    529c:	6f 5f       	subi	r22, 0xFF	; 255
    529e:	7f 4f       	sbci	r23, 0xFF	; 255
    52a0:	40 e1       	ldi	r20, 0x10	; 16
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <strtoul>
    52a8:	84 e0       	ldi	r24, 0x04	; 4
    52aa:	91 e0       	ldi	r25, 0x01	; 1
    52ac:	e8 0e       	add	r14, r24
    52ae:	f9 1e       	adc	r15, r25
    52b0:	d7 01       	movw	r26, r14
    52b2:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    52b4:	e9 81       	ldd	r30, Y+1	; 0x01
    52b6:	fa 81       	ldd	r31, Y+2	; 0x02
    52b8:	e0 17       	cp	r30, r16
    52ba:	f1 07       	cpc	r31, r17
    52bc:	39 f0       	breq	.+14     	; 0x52cc <ihex_readrec+0x212>
    52be:	80 81       	ld	r24, Z
    52c0:	88 23       	and	r24, r24
    52c2:	21 f4       	brne	.+8      	; 0x52cc <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    52c4:	71 94       	neg	r7
    52c6:	27 2d       	mov	r18, r7
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	02 c0       	rjmp	.+4      	; 0x52d0 <ihex_readrec+0x216>
    
    return rc;
    52cc:	2f ef       	ldi	r18, 0xFF	; 255
    52ce:	3f ef       	ldi	r19, 0xFF	; 255
}
    52d0:	c9 01       	movw	r24, r18
    52d2:	2f 96       	adiw	r28, 0x0f	; 15
    52d4:	e2 e1       	ldi	r30, 0x12	; 18
    52d6:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

000052da <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    52da:	a0 e9       	ldi	r26, 0x90	; 144
    52dc:	b2 e0       	ldi	r27, 0x02	; 2
    52de:	e3 e7       	ldi	r30, 0x73	; 115
    52e0:	f9 e2       	ldi	r31, 0x29	; 41
    52e2:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    52e6:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    52e8:	e8 2e       	mov	r14, r24
    52ea:	ff 24       	eor	r15, r15
    52ec:	f7 01       	movw	r30, r14
    52ee:	ea 5c       	subi	r30, 0xCA	; 202
    52f0:	f8 4d       	sbci	r31, 0xD8	; 216
    52f2:	e0 81       	ld	r30, Z
    if (ch != 0){
    52f4:	ee 23       	and	r30, r30
    52f6:	09 f4       	brne	.+2      	; 0x52fa <eeprom_panel+0x20>
    52f8:	cd c2       	rjmp	.+1434   	; 0x5894 <eeprom_panel+0x5ba>
        
        switch (ch) {
    52fa:	e3 30       	cpi	r30, 0x03	; 3
    52fc:	71 f0       	breq	.+28     	; 0x531a <eeprom_panel+0x40>
    52fe:	e4 30       	cpi	r30, 0x04	; 4
    5300:	89 f0       	breq	.+34     	; 0x5324 <eeprom_panel+0x4a>
    5302:	e2 30       	cpi	r30, 0x02	; 2
    5304:	29 f4       	brne	.+10     	; 0x5310 <eeprom_panel+0x36>
    5306:	80 e9       	ldi	r24, 0x90	; 144
    5308:	88 2e       	mov	r8, r24
    530a:	89 e2       	ldi	r24, 0x29	; 41
    530c:	98 2e       	mov	r9, r24
    530e:	0e c0       	rjmp	.+28     	; 0x532c <eeprom_panel+0x52>
    5310:	18 e7       	ldi	r17, 0x78	; 120
    5312:	81 2e       	mov	r8, r17
    5314:	16 e2       	ldi	r17, 0x26	; 38
    5316:	91 2e       	mov	r9, r17
    5318:	09 c0       	rjmp	.+18     	; 0x532c <eeprom_panel+0x52>
    531a:	b6 e2       	ldi	r27, 0x26	; 38
    531c:	8b 2e       	mov	r8, r27
    531e:	b7 e2       	ldi	r27, 0x27	; 39
    5320:	9b 2e       	mov	r9, r27
    5322:	04 c0       	rjmp	.+8      	; 0x532c <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    5324:	ac e9       	ldi	r26, 0x9C	; 156
    5326:	8a 2e       	mov	r8, r26
    5328:	a5 e2       	ldi	r26, 0x25	; 37
    532a:	9a 2e       	mov	r9, r26
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    532c:	81 ee       	ldi	r24, 0xE1	; 225
    532e:	97 e2       	ldi	r25, 0x27	; 39
    5330:	61 ed       	ldi	r22, 0xD1	; 209
    5332:	73 e2       	ldi	r23, 0x23	; 35
    5334:	41 e0       	ldi	r20, 0x01	; 1
    5336:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
    533a:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    533c:	88 23       	and	r24, r24
    533e:	49 f0       	breq	.+18     	; 0x5352 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    5340:	82 eb       	ldi	r24, 0xB2	; 178
    5342:	9e e0       	ldi	r25, 0x0E	; 14
    5344:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            put_rc(res);
    5348:	81 2f       	mov	r24, r17
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <put_rc>
    5350:	3d c0       	rjmp	.+122    	; 0x53cc <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    5352:	00 d0       	rcall	.+0      	; 0x5354 <eeprom_panel+0x7a>
    5354:	0f 92       	push	r0
    5356:	80 ea       	ldi	r24, 0xA0	; 160
    5358:	9e e0       	ldi	r25, 0x0E	; 14
    535a:	ad b7       	in	r26, 0x3d	; 61
    535c:	be b7       	in	r27, 0x3e	; 62
    535e:	11 96       	adiw	r26, 0x01	; 1
    5360:	8d 93       	st	X+, r24
    5362:	9c 93       	st	X, r25
    5364:	12 97       	sbiw	r26, 0x02	; 2
    5366:	13 96       	adiw	r26, 0x03	; 3
    5368:	ed 92       	st	X+, r14
    536a:	fc 92       	st	X, r15
    536c:	14 97       	sbiw	r26, 0x04	; 4
    536e:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                pagebuff[0] = 0x00;
    5372:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    5374:	81 e0       	ldi	r24, 0x01	; 1
    5376:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	c4 01       	movw	r24, r8
    5382:	60 2f       	mov	r22, r16
    5384:	ae 01       	movw	r20, r28
    5386:	4f 5f       	subi	r20, 0xFF	; 255
    5388:	5f 4f       	sbci	r21, 0xFF	; 255
    538a:	22 e0       	ldi	r18, 0x02	; 2
    538c:	00 e0       	ldi	r16, 0x00	; 0
    538e:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    5392:	f4 01       	movw	r30, r8
    5394:	85 85       	ldd	r24, Z+13	; 0x0d
    5396:	88 23       	and	r24, r24
    5398:	e1 f7       	brne	.-8      	; 0x5392 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    539a:	86 85       	ldd	r24, Z+14	; 0x0e
    539c:	81 30       	cpi	r24, 0x01	; 1
    539e:	b1 f0       	breq	.+44     	; 0x53cc <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    53a0:	26 85       	ldd	r18, Z+14	; 0x0e
    53a2:	00 d0       	rcall	.+0      	; 0x53a4 <eeprom_panel+0xca>
    53a4:	0f 92       	push	r0
    53a6:	ed b7       	in	r30, 0x3d	; 61
    53a8:	fe b7       	in	r31, 0x3e	; 62
    53aa:	31 96       	adiw	r30, 0x01	; 1
    53ac:	82 e8       	ldi	r24, 0x82	; 130
    53ae:	9e e0       	ldi	r25, 0x0E	; 14
    53b0:	ad b7       	in	r26, 0x3d	; 61
    53b2:	be b7       	in	r27, 0x3e	; 62
    53b4:	11 96       	adiw	r26, 0x01	; 1
    53b6:	8d 93       	st	X+, r24
    53b8:	9c 93       	st	X, r25
    53ba:	12 97       	sbiw	r26, 0x02	; 2
    53bc:	22 83       	std	Z+2, r18	; 0x02
    53be:	13 82       	std	Z+3, r1	; 0x03
    53c0:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    53c4:	0f 90       	pop	r0
    53c6:	0f 90       	pop	r0
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    53cc:	88 e8       	ldi	r24, 0x88	; 136
    53ce:	93 e1       	ldi	r25, 0x13	; 19
    53d0:	20 e2       	ldi	r18, 0x20	; 32
    53d2:	33 e0       	ldi	r19, 0x03	; 3
    53d4:	f9 01       	movw	r30, r18
    53d6:	31 97       	sbiw	r30, 0x01	; 1
    53d8:	f1 f7       	brne	.-4      	; 0x53d6 <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53dc:	d9 f7       	brne	.-10     	; 0x53d4 <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    53de:	85 e7       	ldi	r24, 0x75	; 117
    53e0:	9e e0       	ldi	r25, 0x0E	; 14
    53e2:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    53e6:	0f ef       	ldi	r16, 0xFF	; 255
    53e8:	1f ef       	ldi	r17, 0xFF	; 255
    53ea:	cc 24       	eor	r12, r12
    53ec:	dd 24       	eor	r13, r13
    53ee:	66 24       	eor	r6, r6
    53f0:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    53f2:	f6 e8       	ldi	r31, 0x86	; 134
    53f4:	2f 2e       	mov	r2, r31
    53f6:	31 2c       	mov	r3, r1
    53f8:	2c 0e       	add	r2, r28
    53fa:	3d 1e       	adc	r3, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    53fc:	e6 e8       	ldi	r30, 0x86	; 134
    53fe:	4e 2e       	mov	r4, r30
    5400:	e1 e0       	ldi	r30, 0x01	; 1
    5402:	5e 2e       	mov	r5, r30
    5404:	4c 0e       	add	r4, r28
    5406:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5408:	f2 01       	movw	r30, r4
    540a:	34 96       	adiw	r30, 0x04	; 4
    540c:	c3 57       	subi	r28, 0x73	; 115
    540e:	dd 4f       	sbci	r29, 0xFD	; 253
    5410:	e8 83       	st	Y, r30
    5412:	f9 83       	std	Y+1, r31	; 0x01
    5414:	cd 58       	subi	r28, 0x8D	; 141
    5416:	d2 40       	sbci	r29, 0x02	; 2
    5418:	cb c0       	rjmp	.+406    	; 0x55b0 <eeprom_panel+0x2d6>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    541a:	08 94       	sec
    541c:	61 1c       	adc	r6, r1
    541e:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    5420:	f1 01       	movw	r30, r2
    5422:	01 90       	ld	r0, Z+
    5424:	00 20       	and	r0, r0
    5426:	e9 f7       	brne	.-6      	; 0x5422 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    5428:	32 97       	sbiw	r30, 0x02	; 2
    542a:	80 81       	ld	r24, Z
    542c:	8a 30       	cpi	r24, 0x0A	; 10
    542e:	09 f4       	brne	.+2      	; 0x5432 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    5430:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    5432:	d1 01       	movw	r26, r2
    5434:	8c 91       	ld	r24, X
    5436:	8a 33       	cpi	r24, 0x3A	; 58
    5438:	09 f0       	breq	.+2      	; 0x543c <eeprom_panel+0x162>
    543a:	ba c0       	rjmp	.+372    	; 0x55b0 <eeprom_panel+0x2d6>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    543c:	c2 01       	movw	r24, r4
    543e:	b1 01       	movw	r22, r2
    5440:	0e 94 5d 28 	call	0x50ba	; 0x50ba <ihex_readrec>
    5444:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    5446:	c6 57       	subi	r28, 0x76	; 118
    5448:	dd 4f       	sbci	r29, 0xFD	; 253
    544a:	88 81       	ld	r24, Y
    544c:	ca 58       	subi	r28, 0x8A	; 138
    544e:	d2 40       	sbci	r29, 0x02	; 2
    5450:	f8 16       	cp	r15, r24
    5452:	19 f1       	breq	.+70     	; 0x549a <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    5454:	00 d0       	rcall	.+0      	; 0x5456 <eeprom_panel+0x17c>
    5456:	0f 92       	push	r0
    5458:	81 e4       	ldi	r24, 0x41	; 65
    545a:	9e e0       	ldi	r25, 0x0E	; 14
    545c:	ed b7       	in	r30, 0x3d	; 61
    545e:	fe b7       	in	r31, 0x3e	; 62
    5460:	81 83       	std	Z+1, r24	; 0x01
    5462:	92 83       	std	Z+2, r25	; 0x02
    5464:	63 82       	std	Z+3, r6	; 0x03
    5466:	74 82       	std	Z+4, r7	; 0x04
    5468:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    546c:	0f 92       	push	r0
    546e:	0f 92       	push	r0
    5470:	ed b7       	in	r30, 0x3d	; 61
    5472:	fe b7       	in	r31, 0x3e	; 62
    5474:	31 96       	adiw	r30, 0x01	; 1
    5476:	86 e1       	ldi	r24, 0x16	; 22
    5478:	9e e0       	ldi	r25, 0x0E	; 14
    547a:	ad b7       	in	r26, 0x3d	; 61
    547c:	be b7       	in	r27, 0x3e	; 62
    547e:	11 96       	adiw	r26, 0x01	; 1
    5480:	8d 93       	st	X+, r24
    5482:	9c 93       	st	X, r25
    5484:	12 97       	sbiw	r26, 0x02	; 2
    5486:	c6 57       	subi	r28, 0x76	; 118
    5488:	dd 4f       	sbci	r29, 0xFD	; 253
    548a:	88 81       	ld	r24, Y
    548c:	ca 58       	subi	r28, 0x8A	; 138
    548e:	d2 40       	sbci	r29, 0x02	; 2
    5490:	82 83       	std	Z+2, r24	; 0x02
    5492:	13 82       	std	Z+3, r1	; 0x03
    5494:	f4 82       	std	Z+4, r15	; 0x04
    5496:	15 82       	std	Z+5, r1	; 0x05
    5498:	82 c0       	rjmp	.+260    	; 0x559e <eeprom_panel+0x2c4>
                break;
            } else {
                if (ihex.rectyp == 0) {
    549a:	d2 01       	movw	r26, r4
    549c:	13 96       	adiw	r26, 0x03	; 3
    549e:	2c 91       	ld	r18, X
    54a0:	13 97       	sbiw	r26, 0x03	; 3
    54a2:	22 23       	and	r18, r18
    54a4:	09 f0       	breq	.+2      	; 0x54a8 <eeprom_panel+0x1ce>
    54a6:	53 c0       	rjmp	.+166    	; 0x554e <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    54a8:	11 96       	adiw	r26, 0x01	; 1
    54aa:	ed 90       	ld	r14, X+
    54ac:	fc 90       	ld	r15, X
    54ae:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    54b0:	57 01       	movw	r10, r14
    54b2:	aa 0c       	add	r10, r10
    54b4:	ab 2c       	mov	r10, r11
    54b6:	aa 1c       	adc	r10, r10
    54b8:	bb 08       	sbc	r11, r11
    54ba:	b1 94       	neg	r11
    54bc:	a0 16       	cp	r10, r16
    54be:	b1 06       	cpc	r11, r17
    54c0:	c1 f0       	breq	.+48     	; 0x54f2 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    54c2:	cd 14       	cp	r12, r13
    54c4:	91 f0       	breq	.+36     	; 0x54ea <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    54c6:	16 95       	lsr	r17
    54c8:	10 2f       	mov	r17, r16
    54ca:	00 27       	eor	r16, r16
    54cc:	17 95       	ror	r17
    54ce:	07 95       	ror	r16
    54d0:	0c 0d       	add	r16, r12
    54d2:	11 1d       	adc	r17, r1
    54d4:	a8 01       	movw	r20, r16
    54d6:	60 e0       	ldi	r22, 0x00	; 0
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	dc 18       	sub	r13, r12
    54dc:	c4 01       	movw	r24, r8
    54de:	2d 2d       	mov	r18, r13
    54e0:	8e 01       	movw	r16, r28
    54e2:	0f 5f       	subi	r16, 0xFF	; 255
    54e4:	1f 4f       	sbci	r17, 0xFF	; 255
    54e6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    54ea:	5f e7       	ldi	r21, 0x7F	; 127
    54ec:	d5 2e       	mov	r13, r21
    54ee:	de 20       	and	r13, r14
    54f0:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    54f2:	4e 2d       	mov	r20, r14
    54f4:	4f 77       	andi	r20, 0x7F	; 127
    54f6:	4c 15       	cp	r20, r12
    54f8:	08 f4       	brcc	.+2      	; 0x54fc <eeprom_panel+0x222>
    54fa:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    54fc:	f2 01       	movw	r30, r4
    54fe:	50 81       	ld	r21, Z
    5500:	25 2f       	mov	r18, r21
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	c3 57       	subi	r28, 0x73	; 115
    5506:	dd 4f       	sbci	r29, 0xFD	; 253
    5508:	a8 81       	ld	r26, Y
    550a:	b9 81       	ldd	r27, Y+1	; 0x01
    550c:	cd 58       	subi	r28, 0x8D	; 141
    550e:	d2 40       	sbci	r29, 0x02	; 2
    5510:	e4 2f       	mov	r30, r20
    5512:	f0 e0       	ldi	r31, 0x00	; 0
    5514:	35 96       	adiw	r30, 0x05	; 5
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	8c 0f       	add	r24, r28
    551c:	9d 1f       	adc	r25, r29
    551e:	e8 0f       	add	r30, r24
    5520:	f9 1f       	adc	r31, r25
    5522:	2c 5f       	subi	r18, 0xFC	; 252
    5524:	3f 4f       	sbci	r19, 0xFF	; 255
    5526:	24 0d       	add	r18, r4
    5528:	35 1d       	adc	r19, r5
    552a:	02 c0       	rjmp	.+4      	; 0x5530 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    552c:	8d 91       	ld	r24, X+
    552e:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5530:	a2 17       	cp	r26, r18
    5532:	b3 07       	cpc	r27, r19
    5534:	d9 f7       	brne	.-10     	; 0x552c <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    5536:	85 2f       	mov	r24, r21
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	84 0f       	add	r24, r20
    553c:	91 1d       	adc	r25, r1
    553e:	2d 2d       	mov	r18, r13
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	28 17       	cp	r18, r24
    5544:	39 07       	cpc	r19, r25
    5546:	9c f5       	brge	.+102    	; 0x55ae <eeprom_panel+0x2d4>
                        pageendaddr = pageoffset+ihex.reclen;
    5548:	d4 2e       	mov	r13, r20
    554a:	d5 0e       	add	r13, r21
    554c:	30 c0       	rjmp	.+96     	; 0x55ae <eeprom_panel+0x2d4>
                } else if (ihex.rectyp == 1) {
    554e:	21 30       	cpi	r18, 0x01	; 1
    5550:	a9 f4       	brne	.+42     	; 0x557c <eeprom_panel+0x2a2>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5552:	cd 14       	cp	r12, r13
    5554:	b9 f1       	breq	.+110    	; 0x55c4 <eeprom_panel+0x2ea>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    5556:	16 95       	lsr	r17
    5558:	10 2f       	mov	r17, r16
    555a:	00 27       	eor	r16, r16
    555c:	17 95       	ror	r17
    555e:	07 95       	ror	r16
    5560:	0c 0d       	add	r16, r12
    5562:	11 1d       	adc	r17, r1
    5564:	a8 01       	movw	r20, r16
    5566:	60 e0       	ldi	r22, 0x00	; 0
    5568:	70 e0       	ldi	r23, 0x00	; 0
    556a:	dc 18       	sub	r13, r12
    556c:	c4 01       	movw	r24, r8
    556e:	2d 2d       	mov	r18, r13
    5570:	8e 01       	movw	r16, r28
    5572:	0f 5f       	subi	r16, 0xFF	; 255
    5574:	1f 4f       	sbci	r17, 0xFF	; 255
    5576:	0e 94 18 27 	call	0x4e30	; 0x4e30 <progEEPage>
    557a:	24 c0       	rjmp	.+72     	; 0x55c4 <eeprom_panel+0x2ea>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    557c:	00 d0       	rcall	.+0      	; 0x557e <eeprom_panel+0x2a4>
    557e:	00 d0       	rcall	.+0      	; 0x5580 <eeprom_panel+0x2a6>
    5580:	ed b7       	in	r30, 0x3d	; 61
    5582:	fe b7       	in	r31, 0x3e	; 62
    5584:	31 96       	adiw	r30, 0x01	; 1
    5586:	84 ed       	ldi	r24, 0xD4	; 212
    5588:	9d e0       	ldi	r25, 0x0D	; 13
    558a:	ad b7       	in	r26, 0x3d	; 61
    558c:	be b7       	in	r27, 0x3e	; 62
    558e:	11 96       	adiw	r26, 0x01	; 1
    5590:	8d 93       	st	X+, r24
    5592:	9c 93       	st	X, r25
    5594:	12 97       	sbiw	r26, 0x02	; 2
    5596:	22 83       	std	Z+2, r18	; 0x02
    5598:	13 82       	std	Z+3, r1	; 0x03
    559a:	64 82       	std	Z+4, r6	; 0x04
    559c:	75 82       	std	Z+5, r7	; 0x05
    559e:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    55a2:	ed b7       	in	r30, 0x3d	; 61
    55a4:	fe b7       	in	r31, 0x3e	; 62
    55a6:	36 96       	adiw	r30, 0x06	; 6
    55a8:	ed bf       	out	0x3d, r30	; 61
    55aa:	fe bf       	out	0x3e, r31	; 62
    55ac:	0b c0       	rjmp	.+22     	; 0x55c4 <eeprom_panel+0x2ea>
                            ihex.rectyp, lineno);
                    break;
    55ae:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    55b0:	c1 01       	movw	r24, r2
    55b2:	60 e0       	ldi	r22, 0x00	; 0
    55b4:	71 e0       	ldi	r23, 0x01	; 1
    55b6:	41 ee       	ldi	r20, 0xE1	; 225
    55b8:	57 e2       	ldi	r21, 0x27	; 39
    55ba:	0e 94 c7 52 	call	0xa58e	; 0xa58e <f_gets>
    55be:	89 2b       	or	r24, r25
    55c0:	09 f0       	breq	.+2      	; 0x55c4 <eeprom_panel+0x2ea>
    55c2:	2b cf       	rjmp	.-426    	; 0x541a <eeprom_panel+0x140>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    55c4:	81 ee       	ldi	r24, 0xE1	; 225
    55c6:	97 e2       	ldi	r25, 0x27	; 39
    55c8:	40 e0       	ldi	r20, 0x00	; 0
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	60 e0       	ldi	r22, 0x00	; 0
    55ce:	70 e0       	ldi	r23, 0x00	; 0
    55d0:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
    55d4:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    55d6:	88 23       	and	r24, r24
    55d8:	49 f0       	breq	.+18     	; 0x55ec <eeprom_panel+0x312>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    55da:	86 eb       	ldi	r24, 0xB6	; 182
    55dc:	9d e0       	ldi	r25, 0x0D	; 13
    55de:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            put_rc(res);
    55e2:	81 2f       	mov	r24, r17
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <put_rc>
    55ea:	2c c1       	rjmp	.+600    	; 0x5844 <eeprom_panel+0x56a>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    55ec:	89 ea       	ldi	r24, 0xA9	; 169
    55ee:	9d e0       	ldi	r25, 0x0D	; 13
    55f0:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    55f4:	cc 24       	eor	r12, r12
    55f6:	ca 94       	dec	r12
    55f8:	dc 2c       	mov	r13, r12
    55fa:	00 e0       	ldi	r16, 0x00	; 0
    55fc:	10 e0       	ldi	r17, 0x00	; 0
    55fe:	66 24       	eor	r6, r6
    5600:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    5602:	ce 01       	movw	r24, r28
    5604:	8a 57       	subi	r24, 0x7A	; 122
    5606:	9f 4f       	sbci	r25, 0xFF	; 255
    5608:	c1 57       	subi	r28, 0x71	; 113
    560a:	dd 4f       	sbci	r29, 0xFD	; 253
    560c:	88 83       	st	Y, r24
    560e:	99 83       	std	Y+1, r25	; 0x01
    5610:	cf 58       	subi	r28, 0x8F	; 143
    5612:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    5614:	36 e8       	ldi	r19, 0x86	; 134
    5616:	43 2e       	mov	r4, r19
    5618:	31 e0       	ldi	r19, 0x01	; 1
    561a:	53 2e       	mov	r5, r19
    561c:	4c 0e       	add	r4, r28
    561e:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5620:	d2 01       	movw	r26, r4
    5622:	14 96       	adiw	r26, 0x04	; 4
    5624:	c5 57       	subi	r28, 0x75	; 117
    5626:	dd 4f       	sbci	r29, 0xFD	; 253
    5628:	a8 83       	st	Y, r26
    562a:	b9 83       	std	Y+1, r27	; 0x01
    562c:	cb 58       	subi	r28, 0x8B	; 139
    562e:	d2 40       	sbci	r29, 0x02	; 2
    5630:	ff c0       	rjmp	.+510    	; 0x5830 <eeprom_panel+0x556>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    5632:	08 94       	sec
    5634:	61 1c       	adc	r6, r1
    5636:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    5638:	c1 57       	subi	r28, 0x71	; 113
    563a:	dd 4f       	sbci	r29, 0xFD	; 253
    563c:	e8 81       	ld	r30, Y
    563e:	f9 81       	ldd	r31, Y+1	; 0x01
    5640:	cf 58       	subi	r28, 0x8F	; 143
    5642:	d2 40       	sbci	r29, 0x02	; 2
    5644:	01 90       	ld	r0, Z+
    5646:	00 20       	and	r0, r0
    5648:	e9 f7       	brne	.-6      	; 0x5644 <eeprom_panel+0x36a>
                if (eepromBuff[len-1] == '\n')
    564a:	32 97       	sbiw	r30, 0x02	; 2
    564c:	80 81       	ld	r24, Z
    564e:	8a 30       	cpi	r24, 0x0A	; 10
    5650:	09 f4       	brne	.+2      	; 0x5654 <eeprom_panel+0x37a>
                    eepromBuff[--len] = 0;
    5652:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    5654:	ca 57       	subi	r28, 0x7A	; 122
    5656:	df 4f       	sbci	r29, 0xFF	; 255
    5658:	88 81       	ld	r24, Y
    565a:	c6 58       	subi	r28, 0x86	; 134
    565c:	d0 40       	sbci	r29, 0x00	; 0
    565e:	8a 33       	cpi	r24, 0x3A	; 58
    5660:	09 f0       	breq	.+2      	; 0x5664 <eeprom_panel+0x38a>
    5662:	e6 c0       	rjmp	.+460    	; 0x5830 <eeprom_panel+0x556>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    5664:	c2 01       	movw	r24, r4
    5666:	b1 01       	movw	r22, r2
    5668:	0e 94 5d 28 	call	0x50ba	; 0x50ba <ihex_readrec>
    566c:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    566e:	c6 57       	subi	r28, 0x76	; 118
    5670:	dd 4f       	sbci	r29, 0xFD	; 253
    5672:	88 81       	ld	r24, Y
    5674:	ca 58       	subi	r28, 0x8A	; 138
    5676:	d2 40       	sbci	r29, 0x02	; 2
    5678:	f8 16       	cp	r15, r24
    567a:	19 f1       	breq	.+70     	; 0x56c2 <eeprom_panel+0x3e8>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    567c:	00 d0       	rcall	.+0      	; 0x567e <eeprom_panel+0x3a4>
    567e:	0f 92       	push	r0
    5680:	86 e7       	ldi	r24, 0x76	; 118
    5682:	9d e0       	ldi	r25, 0x0D	; 13
    5684:	ed b7       	in	r30, 0x3d	; 61
    5686:	fe b7       	in	r31, 0x3e	; 62
    5688:	81 83       	std	Z+1, r24	; 0x01
    568a:	92 83       	std	Z+2, r25	; 0x02
    568c:	63 82       	std	Z+3, r6	; 0x03
    568e:	74 82       	std	Z+4, r7	; 0x04
    5690:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5694:	0f 92       	push	r0
    5696:	0f 92       	push	r0
    5698:	ed b7       	in	r30, 0x3d	; 61
    569a:	fe b7       	in	r31, 0x3e	; 62
    569c:	31 96       	adiw	r30, 0x01	; 1
    569e:	8b e4       	ldi	r24, 0x4B	; 75
    56a0:	9d e0       	ldi	r25, 0x0D	; 13
    56a2:	ad b7       	in	r26, 0x3d	; 61
    56a4:	be b7       	in	r27, 0x3e	; 62
    56a6:	11 96       	adiw	r26, 0x01	; 1
    56a8:	8d 93       	st	X+, r24
    56aa:	9c 93       	st	X, r25
    56ac:	12 97       	sbiw	r26, 0x02	; 2
    56ae:	c6 57       	subi	r28, 0x76	; 118
    56b0:	dd 4f       	sbci	r29, 0xFD	; 253
    56b2:	88 81       	ld	r24, Y
    56b4:	ca 58       	subi	r28, 0x8A	; 138
    56b6:	d2 40       	sbci	r29, 0x02	; 2
    56b8:	82 83       	std	Z+2, r24	; 0x02
    56ba:	13 82       	std	Z+3, r1	; 0x03
    56bc:	f4 82       	std	Z+4, r15	; 0x04
    56be:	15 82       	std	Z+5, r1	; 0x05
    56c0:	ae c0       	rjmp	.+348    	; 0x581e <eeprom_panel+0x544>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    56c2:	d2 01       	movw	r26, r4
    56c4:	13 96       	adiw	r26, 0x03	; 3
    56c6:	2c 91       	ld	r18, X
    56c8:	13 97       	sbiw	r26, 0x03	; 3
    56ca:	22 23       	and	r18, r18
    56cc:	09 f0       	breq	.+2      	; 0x56d0 <eeprom_panel+0x3f6>
    56ce:	65 c0       	rjmp	.+202    	; 0x579a <eeprom_panel+0x4c0>
                        // data record
                        nextaddr = ihex.loadofs;
    56d0:	11 96       	adiw	r26, 0x01	; 1
    56d2:	ed 90       	ld	r14, X+
    56d4:	fc 90       	ld	r15, X
    56d6:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    56d8:	57 01       	movw	r10, r14
    56da:	aa 0c       	add	r10, r10
    56dc:	ab 2c       	mov	r10, r11
    56de:	aa 1c       	adc	r10, r10
    56e0:	bb 08       	sbc	r11, r11
    56e2:	b1 94       	neg	r11
    56e4:	ac 14       	cp	r10, r12
    56e6:	bd 04       	cpc	r11, r13
    56e8:	49 f1       	breq	.+82     	; 0x573c <eeprom_panel+0x462>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    56ea:	01 17       	cp	r16, r17
    56ec:	21 f1       	breq	.+72     	; 0x5736 <eeprom_panel+0x45c>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    56ee:	a6 01       	movw	r20, r12
    56f0:	56 95       	lsr	r21
    56f2:	54 2f       	mov	r21, r20
    56f4:	44 27       	eor	r20, r20
    56f6:	57 95       	ror	r21
    56f8:	47 95       	ror	r20
    56fa:	40 0f       	add	r20, r16
    56fc:	51 1d       	adc	r21, r1
    56fe:	60 e0       	ldi	r22, 0x00	; 0
    5700:	70 e0       	ldi	r23, 0x00	; 0
    5702:	10 1b       	sub	r17, r16
    5704:	c4 01       	movw	r24, r8
    5706:	21 2f       	mov	r18, r17
    5708:	8e 01       	movw	r16, r28
    570a:	0f 5f       	subi	r16, 0xFF	; 255
    570c:	1f 4f       	sbci	r17, 0xFF	; 255
    570e:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <verifyEEPage>
    5712:	89 2b       	or	r24, r25
    5714:	81 f4       	brne	.+32     	; 0x5736 <eeprom_panel+0x45c>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    5716:	00 d0       	rcall	.+0      	; 0x5718 <eeprom_panel+0x43e>
    5718:	0f 92       	push	r0
    571a:	8e e2       	ldi	r24, 0x2E	; 46
    571c:	9d e0       	ldi	r25, 0x0D	; 13
    571e:	ed b7       	in	r30, 0x3d	; 61
    5720:	fe b7       	in	r31, 0x3e	; 62
    5722:	81 83       	std	Z+1, r24	; 0x01
    5724:	92 83       	std	Z+2, r25	; 0x02
    5726:	c3 82       	std	Z+3, r12	; 0x03
    5728:	d4 82       	std	Z+4, r13	; 0x04
    572a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    572e:	0f 90       	pop	r0
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5736:	1e 2d       	mov	r17, r14
    5738:	1f 77       	andi	r17, 0x7F	; 127
    573a:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    573c:	4e 2d       	mov	r20, r14
    573e:	4f 77       	andi	r20, 0x7F	; 127
    5740:	40 17       	cp	r20, r16
    5742:	08 f4       	brcc	.+2      	; 0x5746 <eeprom_panel+0x46c>
    5744:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5746:	d2 01       	movw	r26, r4
    5748:	5c 91       	ld	r21, X
    574a:	25 2f       	mov	r18, r21
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	c5 57       	subi	r28, 0x75	; 117
    5750:	dd 4f       	sbci	r29, 0xFD	; 253
    5752:	a8 81       	ld	r26, Y
    5754:	b9 81       	ldd	r27, Y+1	; 0x01
    5756:	cb 58       	subi	r28, 0x8B	; 139
    5758:	d2 40       	sbci	r29, 0x02	; 2
    575a:	e4 2f       	mov	r30, r20
    575c:	f0 e0       	ldi	r31, 0x00	; 0
    575e:	35 96       	adiw	r30, 0x05	; 5
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	8c 0f       	add	r24, r28
    5766:	9d 1f       	adc	r25, r29
    5768:	e8 0f       	add	r30, r24
    576a:	f9 1f       	adc	r31, r25
    576c:	2c 5f       	subi	r18, 0xFC	; 252
    576e:	3f 4f       	sbci	r19, 0xFF	; 255
    5770:	24 0d       	add	r18, r4
    5772:	35 1d       	adc	r19, r5
    5774:	02 c0       	rjmp	.+4      	; 0x577a <eeprom_panel+0x4a0>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5776:	8d 91       	ld	r24, X+
    5778:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    577a:	a2 17       	cp	r26, r18
    577c:	b3 07       	cpc	r27, r19
    577e:	d9 f7       	brne	.-10     	; 0x5776 <eeprom_panel+0x49c>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    5780:	85 2f       	mov	r24, r21
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	84 0f       	add	r24, r20
    5786:	91 1d       	adc	r25, r1
    5788:	21 2f       	mov	r18, r17
    578a:	30 e0       	ldi	r19, 0x00	; 0
    578c:	28 17       	cp	r18, r24
    578e:	39 07       	cpc	r19, r25
    5790:	0c f0       	brlt	.+2      	; 0x5794 <eeprom_panel+0x4ba>
    5792:	4d c0       	rjmp	.+154    	; 0x582e <eeprom_panel+0x554>
                            pageendaddr = pageoffset+ihex.reclen;
    5794:	14 2f       	mov	r17, r20
    5796:	15 0f       	add	r17, r21
    5798:	4a c0       	rjmp	.+148    	; 0x582e <eeprom_panel+0x554>
                    } else if (ihex.rectyp == 1) {
    579a:	21 30       	cpi	r18, 0x01	; 1
    579c:	79 f5       	brne	.+94     	; 0x57fc <eeprom_panel+0x522>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    579e:	01 17       	cp	r16, r17
    57a0:	41 f1       	breq	.+80     	; 0x57f2 <eeprom_panel+0x518>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    57a2:	a6 01       	movw	r20, r12
    57a4:	56 95       	lsr	r21
    57a6:	54 2f       	mov	r21, r20
    57a8:	44 27       	eor	r20, r20
    57aa:	57 95       	ror	r21
    57ac:	47 95       	ror	r20
    57ae:	40 0f       	add	r20, r16
    57b0:	51 1d       	adc	r21, r1
    57b2:	60 e0       	ldi	r22, 0x00	; 0
    57b4:	70 e0       	ldi	r23, 0x00	; 0
    57b6:	10 1b       	sub	r17, r16
    57b8:	c4 01       	movw	r24, r8
    57ba:	21 2f       	mov	r18, r17
    57bc:	8e 01       	movw	r16, r28
    57be:	0f 5f       	subi	r16, 0xFF	; 255
    57c0:	1f 4f       	sbci	r17, 0xFF	; 255
    57c2:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <verifyEEPage>
    57c6:	89 2b       	or	r24, r25
    57c8:	a1 f4       	brne	.+40     	; 0x57f2 <eeprom_panel+0x518>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    57ca:	00 d0       	rcall	.+0      	; 0x57cc <eeprom_panel+0x4f2>
    57cc:	0f 92       	push	r0
    57ce:	81 e1       	ldi	r24, 0x11	; 17
    57d0:	9d e0       	ldi	r25, 0x0D	; 13
    57d2:	ad b7       	in	r26, 0x3d	; 61
    57d4:	be b7       	in	r27, 0x3e	; 62
    57d6:	11 96       	adiw	r26, 0x01	; 1
    57d8:	8d 93       	st	X+, r24
    57da:	9c 93       	st	X, r25
    57dc:	12 97       	sbiw	r26, 0x02	; 2
    57de:	13 96       	adiw	r26, 0x03	; 3
    57e0:	cd 92       	st	X+, r12
    57e2:	dc 92       	st	X, r13
    57e4:	14 97       	sbiw	r26, 0x04	; 4
    57e6:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    57ea:	0f 90       	pop	r0
    57ec:	0f 90       	pop	r0
    57ee:	0f 90       	pop	r0
    57f0:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    57f2:	8f e0       	ldi	r24, 0x0F	; 15
    57f4:	9d e0       	ldi	r25, 0x0D	; 13
    57f6:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    57fa:	24 c0       	rjmp	.+72     	; 0x5844 <eeprom_panel+0x56a>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    57fc:	00 d0       	rcall	.+0      	; 0x57fe <eeprom_panel+0x524>
    57fe:	00 d0       	rcall	.+0      	; 0x5800 <eeprom_panel+0x526>
    5800:	ed b7       	in	r30, 0x3d	; 61
    5802:	fe b7       	in	r31, 0x3e	; 62
    5804:	31 96       	adiw	r30, 0x01	; 1
    5806:	8e ec       	ldi	r24, 0xCE	; 206
    5808:	9c e0       	ldi	r25, 0x0C	; 12
    580a:	ad b7       	in	r26, 0x3d	; 61
    580c:	be b7       	in	r27, 0x3e	; 62
    580e:	11 96       	adiw	r26, 0x01	; 1
    5810:	8d 93       	st	X+, r24
    5812:	9c 93       	st	X, r25
    5814:	12 97       	sbiw	r26, 0x02	; 2
    5816:	22 83       	std	Z+2, r18	; 0x02
    5818:	13 82       	std	Z+3, r1	; 0x03
    581a:	64 82       	std	Z+4, r6	; 0x04
    581c:	75 82       	std	Z+5, r7	; 0x05
    581e:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    5822:	ed b7       	in	r30, 0x3d	; 61
    5824:	fe b7       	in	r31, 0x3e	; 62
    5826:	36 96       	adiw	r30, 0x06	; 6
    5828:	ed bf       	out	0x3d, r30	; 61
    582a:	fe bf       	out	0x3e, r31	; 62
    582c:	0b c0       	rjmp	.+22     	; 0x5844 <eeprom_panel+0x56a>
                                ihex.rectyp, lineno);
                        break;
    582e:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    5830:	c1 01       	movw	r24, r2
    5832:	60 e0       	ldi	r22, 0x00	; 0
    5834:	71 e0       	ldi	r23, 0x01	; 1
    5836:	41 ee       	ldi	r20, 0xE1	; 225
    5838:	57 e2       	ldi	r21, 0x27	; 39
    583a:	0e 94 c7 52 	call	0xa58e	; 0xa58e <f_gets>
    583e:	89 2b       	or	r24, r25
    5840:	09 f0       	breq	.+2      	; 0x5844 <eeprom_panel+0x56a>
    5842:	f7 ce       	rjmp	.-530    	; 0x5632 <eeprom_panel+0x358>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5844:	85 e4       	ldi	r24, 0x45	; 69
    5846:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    5848:	c4 01       	movw	r24, r8
    584a:	60 e7       	ldi	r22, 0x70	; 112
    584c:	ae 01       	movw	r20, r28
    584e:	4f 5f       	subi	r20, 0xFF	; 255
    5850:	5f 4f       	sbci	r21, 0xFF	; 255
    5852:	21 e0       	ldi	r18, 0x01	; 1
    5854:	00 e0       	ldi	r16, 0x00	; 0
    5856:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    585a:	d4 01       	movw	r26, r8
    585c:	1d 96       	adiw	r26, 0x0d	; 13
    585e:	8c 91       	ld	r24, X
    5860:	1d 97       	sbiw	r26, 0x0d	; 13
    5862:	88 23       	and	r24, r24
    5864:	d1 f7       	brne	.-12     	; 0x585a <eeprom_panel+0x580>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    5866:	1e 96       	adiw	r26, 0x0e	; 14
    5868:	8c 91       	ld	r24, X
    586a:	1e 97       	sbiw	r26, 0x0e	; 14
    586c:	81 30       	cpi	r24, 0x01	; 1
    586e:	11 f1       	breq	.+68     	; 0x58b4 <eeprom_panel+0x5da>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    5870:	1e 96       	adiw	r26, 0x0e	; 14
    5872:	2c 91       	ld	r18, X
    5874:	00 d0       	rcall	.+0      	; 0x5876 <eeprom_panel+0x59c>
    5876:	0f 92       	push	r0
    5878:	ed b7       	in	r30, 0x3d	; 61
    587a:	fe b7       	in	r31, 0x3e	; 62
    587c:	31 96       	adiw	r30, 0x01	; 1
    587e:	83 eb       	ldi	r24, 0xB3	; 179
    5880:	9c e0       	ldi	r25, 0x0C	; 12
    5882:	ad b7       	in	r26, 0x3d	; 61
    5884:	be b7       	in	r27, 0x3e	; 62
    5886:	11 96       	adiw	r26, 0x01	; 1
    5888:	8d 93       	st	X+, r24
    588a:	9c 93       	st	X, r25
    588c:	12 97       	sbiw	r26, 0x02	; 2
    588e:	22 83       	std	Z+2, r18	; 0x02
    5890:	13 82       	std	Z+3, r1	; 0x03
    5892:	0a c0       	rjmp	.+20     	; 0x58a8 <eeprom_panel+0x5ce>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    5894:	00 d0       	rcall	.+0      	; 0x5896 <eeprom_panel+0x5bc>
    5896:	0f 92       	push	r0
    5898:	88 e9       	ldi	r24, 0x98	; 152
    589a:	9c e0       	ldi	r25, 0x0C	; 12
    589c:	ed b7       	in	r30, 0x3d	; 61
    589e:	fe b7       	in	r31, 0x3e	; 62
    58a0:	81 83       	std	Z+1, r24	; 0x01
    58a2:	92 83       	std	Z+2, r25	; 0x02
    58a4:	e3 82       	std	Z+3, r14	; 0x03
    58a6:	f4 82       	std	Z+4, r15	; 0x04
    58a8:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    58ac:	0f 90       	pop	r0
    58ae:	0f 90       	pop	r0
    58b0:	0f 90       	pop	r0
    58b2:	0f 90       	pop	r0
    }
    
};
    58b4:	c0 57       	subi	r28, 0x70	; 112
    58b6:	dd 4f       	sbci	r29, 0xFD	; 253
    58b8:	e2 e1       	ldi	r30, 0x12	; 18
    58ba:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

000058be <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    58be:	a0 e9       	ldi	r26, 0x90	; 144
    58c0:	b2 e0       	ldi	r27, 0x02	; 2
    58c2:	e5 e6       	ldi	r30, 0x65	; 101
    58c4:	fc e2       	ldi	r31, 0x2C	; 44
    58c6:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    58ca:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    58cc:	e8 2e       	mov	r14, r24
    58ce:	ff 24       	eor	r15, r15
    58d0:	f7 01       	movw	r30, r14
    58d2:	ea 5c       	subi	r30, 0xCA	; 202
    58d4:	f8 4d       	sbci	r31, 0xD8	; 216
    58d6:	e0 81       	ld	r30, Z
    if (ch != 0){
    58d8:	ee 23       	and	r30, r30
    58da:	09 f4       	brne	.+2      	; 0x58de <flash_panel+0x20>
    58dc:	e1 c2       	rjmp	.+1474   	; 0x5ea0 <flash_panel+0x5e2>
        
        switch (ch) {
    58de:	e3 30       	cpi	r30, 0x03	; 3
    58e0:	71 f0       	breq	.+28     	; 0x58fe <flash_panel+0x40>
    58e2:	e4 30       	cpi	r30, 0x04	; 4
    58e4:	89 f0       	breq	.+34     	; 0x5908 <flash_panel+0x4a>
    58e6:	e2 30       	cpi	r30, 0x02	; 2
    58e8:	29 f4       	brne	.+10     	; 0x58f4 <flash_panel+0x36>
    58ea:	90 e9       	ldi	r25, 0x90	; 144
    58ec:	89 2e       	mov	r8, r25
    58ee:	99 e2       	ldi	r25, 0x29	; 41
    58f0:	99 2e       	mov	r9, r25
    58f2:	0e c0       	rjmp	.+28     	; 0x5910 <flash_panel+0x52>
    58f4:	88 e7       	ldi	r24, 0x78	; 120
    58f6:	88 2e       	mov	r8, r24
    58f8:	86 e2       	ldi	r24, 0x26	; 38
    58fa:	98 2e       	mov	r9, r24
    58fc:	09 c0       	rjmp	.+18     	; 0x5910 <flash_panel+0x52>
    58fe:	16 e2       	ldi	r17, 0x26	; 38
    5900:	81 2e       	mov	r8, r17
    5902:	17 e2       	ldi	r17, 0x27	; 39
    5904:	91 2e       	mov	r9, r17
    5906:	04 c0       	rjmp	.+8      	; 0x5910 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    5908:	bc e9       	ldi	r27, 0x9C	; 156
    590a:	8b 2e       	mov	r8, r27
    590c:	b5 e2       	ldi	r27, 0x25	; 37
    590e:	9b 2e       	mov	r9, r27
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    5910:	81 ec       	ldi	r24, 0xC1	; 193
    5912:	97 e2       	ldi	r25, 0x27	; 39
    5914:	6c ed       	ldi	r22, 0xDC	; 220
    5916:	73 e2       	ldi	r23, 0x23	; 35
    5918:	41 e0       	ldi	r20, 0x01	; 1
    591a:	0e 94 06 50 	call	0xa00c	; 0xa00c <f_open>
    591e:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5920:	88 23       	and	r24, r24
    5922:	49 f0       	breq	.+18     	; 0x5936 <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    5924:	8c e8       	ldi	r24, 0x8C	; 140
    5926:	91 e1       	ldi	r25, 0x11	; 17
    5928:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            put_rc(res);
    592c:	81 2f       	mov	r24, r17
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <put_rc>
    5934:	51 c0       	rjmp	.+162    	; 0x59d8 <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    5936:	07 ff       	sbrs	r16, 7
    5938:	12 c0       	rjmp	.+36     	; 0x595e <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    593a:	84 e0       	ldi	r24, 0x04	; 4
    593c:	e0 e6       	ldi	r30, 0x60	; 96
    593e:	f6 e0       	ldi	r31, 0x06	; 6
    5940:	86 83       	std	Z+6, r24	; 0x06
    5942:	84 e6       	ldi	r24, 0x64	; 100
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	20 e2       	ldi	r18, 0x20	; 32
    5948:	33 e0       	ldi	r19, 0x03	; 3
    594a:	f9 01       	movw	r30, r18
    594c:	31 97       	sbiw	r30, 0x01	; 1
    594e:	f1 f7       	brne	.-4      	; 0x594c <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5950:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5952:	d9 f7       	brne	.-10     	; 0x594a <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    5954:	84 e0       	ldi	r24, 0x04	; 4
    5956:	e0 e6       	ldi	r30, 0x60	; 96
    5958:	f6 e0       	ldi	r31, 0x06	; 6
    595a:	85 83       	std	Z+5, r24	; 0x05
    595c:	3d c0       	rjmp	.+122    	; 0x59d8 <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    595e:	00 d0       	rcall	.+0      	; 0x5960 <flash_panel+0xa2>
    5960:	0f 92       	push	r0
    5962:	8b e7       	ldi	r24, 0x7B	; 123
    5964:	91 e1       	ldi	r25, 0x11	; 17
    5966:	ad b7       	in	r26, 0x3d	; 61
    5968:	be b7       	in	r27, 0x3e	; 62
    596a:	11 96       	adiw	r26, 0x01	; 1
    596c:	8d 93       	st	X+, r24
    596e:	9c 93       	st	X, r25
    5970:	12 97       	sbiw	r26, 0x02	; 2
    5972:	13 96       	adiw	r26, 0x03	; 3
    5974:	ed 92       	st	X+, r14
    5976:	fc 92       	st	X, r15
    5978:	14 97       	sbiw	r26, 0x04	; 4
    597a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                pagebuff[0] = 0x00;
    597e:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    5984:	0f 90       	pop	r0
    5986:	0f 90       	pop	r0
    5988:	0f 90       	pop	r0
    598a:	0f 90       	pop	r0
    598c:	c4 01       	movw	r24, r8
    598e:	60 2f       	mov	r22, r16
    5990:	ae 01       	movw	r20, r28
    5992:	4f 5f       	subi	r20, 0xFF	; 255
    5994:	5f 4f       	sbci	r21, 0xFF	; 255
    5996:	22 e0       	ldi	r18, 0x02	; 2
    5998:	00 e0       	ldi	r16, 0x00	; 0
    599a:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    599e:	f4 01       	movw	r30, r8
    59a0:	85 85       	ldd	r24, Z+13	; 0x0d
    59a2:	88 23       	and	r24, r24
    59a4:	e1 f7       	brne	.-8      	; 0x599e <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    59a6:	86 85       	ldd	r24, Z+14	; 0x0e
    59a8:	81 30       	cpi	r24, 0x01	; 1
    59aa:	b1 f0       	breq	.+44     	; 0x59d8 <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    59ac:	26 85       	ldd	r18, Z+14	; 0x0e
    59ae:	00 d0       	rcall	.+0      	; 0x59b0 <flash_panel+0xf2>
    59b0:	0f 92       	push	r0
    59b2:	ed b7       	in	r30, 0x3d	; 61
    59b4:	fe b7       	in	r31, 0x3e	; 62
    59b6:	31 96       	adiw	r30, 0x01	; 1
    59b8:	8d e5       	ldi	r24, 0x5D	; 93
    59ba:	91 e1       	ldi	r25, 0x11	; 17
    59bc:	ad b7       	in	r26, 0x3d	; 61
    59be:	be b7       	in	r27, 0x3e	; 62
    59c0:	11 96       	adiw	r26, 0x01	; 1
    59c2:	8d 93       	st	X+, r24
    59c4:	9c 93       	st	X, r25
    59c6:	12 97       	sbiw	r26, 0x02	; 2
    59c8:	22 83       	std	Z+2, r18	; 0x02
    59ca:	13 82       	std	Z+3, r1	; 0x03
    59cc:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    59d0:	0f 90       	pop	r0
    59d2:	0f 90       	pop	r0
    59d4:	0f 90       	pop	r0
    59d6:	0f 90       	pop	r0
    59d8:	88 e8       	ldi	r24, 0x88	; 136
    59da:	93 e1       	ldi	r25, 0x13	; 19
    59dc:	20 e2       	ldi	r18, 0x20	; 32
    59de:	33 e0       	ldi	r19, 0x03	; 3
    59e0:	f9 01       	movw	r30, r18
    59e2:	31 97       	sbiw	r30, 0x01	; 1
    59e4:	f1 f7       	brne	.-4      	; 0x59e2 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59e8:	d9 f7       	brne	.-10     	; 0x59e0 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    59ea:	80 e5       	ldi	r24, 0x50	; 80
    59ec:	91 e1       	ldi	r25, 0x11	; 17
    59ee:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    59f2:	0f ef       	ldi	r16, 0xFF	; 255
    59f4:	1f ef       	ldi	r17, 0xFF	; 255
    59f6:	cc 24       	eor	r12, r12
    59f8:	dd 24       	eor	r13, r13
    59fa:	66 24       	eor	r6, r6
    59fc:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    59fe:	a6 e8       	ldi	r26, 0x86	; 134
    5a00:	2a 2e       	mov	r2, r26
    5a02:	31 2c       	mov	r3, r1
    5a04:	2c 0e       	add	r2, r28
    5a06:	3d 1e       	adc	r3, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5a08:	f6 e8       	ldi	r31, 0x86	; 134
    5a0a:	4f 2e       	mov	r4, r31
    5a0c:	f1 e0       	ldi	r31, 0x01	; 1
    5a0e:	5f 2e       	mov	r5, r31
    5a10:	4c 0e       	add	r4, r28
    5a12:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5a14:	f2 01       	movw	r30, r4
    5a16:	34 96       	adiw	r30, 0x04	; 4
    5a18:	c3 57       	subi	r28, 0x73	; 115
    5a1a:	dd 4f       	sbci	r29, 0xFD	; 253
    5a1c:	e8 83       	st	Y, r30
    5a1e:	f9 83       	std	Y+1, r31	; 0x01
    5a20:	cd 58       	subi	r28, 0x8D	; 141
    5a22:	d2 40       	sbci	r29, 0x02	; 2
    5a24:	cb c0       	rjmp	.+406    	; 0x5bbc <flash_panel+0x2fe>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    5a26:	08 94       	sec
    5a28:	61 1c       	adc	r6, r1
    5a2a:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    5a2c:	f1 01       	movw	r30, r2
    5a2e:	01 90       	ld	r0, Z+
    5a30:	00 20       	and	r0, r0
    5a32:	e9 f7       	brne	.-6      	; 0x5a2e <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    5a34:	32 97       	sbiw	r30, 0x02	; 2
    5a36:	80 81       	ld	r24, Z
    5a38:	8a 30       	cpi	r24, 0x0A	; 10
    5a3a:	09 f4       	brne	.+2      	; 0x5a3e <flash_panel+0x180>
                flashBuff[--len] = 0;
    5a3c:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    5a3e:	d1 01       	movw	r26, r2
    5a40:	8c 91       	ld	r24, X
    5a42:	8a 33       	cpi	r24, 0x3A	; 58
    5a44:	09 f0       	breq	.+2      	; 0x5a48 <flash_panel+0x18a>
    5a46:	ba c0       	rjmp	.+372    	; 0x5bbc <flash_panel+0x2fe>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5a48:	c2 01       	movw	r24, r4
    5a4a:	b1 01       	movw	r22, r2
    5a4c:	0e 94 5d 28 	call	0x50ba	; 0x50ba <ihex_readrec>
    5a50:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    5a52:	c6 57       	subi	r28, 0x76	; 118
    5a54:	dd 4f       	sbci	r29, 0xFD	; 253
    5a56:	88 81       	ld	r24, Y
    5a58:	ca 58       	subi	r28, 0x8A	; 138
    5a5a:	d2 40       	sbci	r29, 0x02	; 2
    5a5c:	f8 16       	cp	r15, r24
    5a5e:	19 f1       	breq	.+70     	; 0x5aa6 <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    5a60:	00 d0       	rcall	.+0      	; 0x5a62 <flash_panel+0x1a4>
    5a62:	0f 92       	push	r0
    5a64:	8d e1       	ldi	r24, 0x1D	; 29
    5a66:	91 e1       	ldi	r25, 0x11	; 17
    5a68:	ed b7       	in	r30, 0x3d	; 61
    5a6a:	fe b7       	in	r31, 0x3e	; 62
    5a6c:	81 83       	std	Z+1, r24	; 0x01
    5a6e:	92 83       	std	Z+2, r25	; 0x02
    5a70:	63 82       	std	Z+3, r6	; 0x03
    5a72:	74 82       	std	Z+4, r7	; 0x04
    5a74:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5a78:	0f 92       	push	r0
    5a7a:	0f 92       	push	r0
    5a7c:	ed b7       	in	r30, 0x3d	; 61
    5a7e:	fe b7       	in	r31, 0x3e	; 62
    5a80:	31 96       	adiw	r30, 0x01	; 1
    5a82:	82 ef       	ldi	r24, 0xF2	; 242
    5a84:	90 e1       	ldi	r25, 0x10	; 16
    5a86:	ad b7       	in	r26, 0x3d	; 61
    5a88:	be b7       	in	r27, 0x3e	; 62
    5a8a:	11 96       	adiw	r26, 0x01	; 1
    5a8c:	8d 93       	st	X+, r24
    5a8e:	9c 93       	st	X, r25
    5a90:	12 97       	sbiw	r26, 0x02	; 2
    5a92:	c6 57       	subi	r28, 0x76	; 118
    5a94:	dd 4f       	sbci	r29, 0xFD	; 253
    5a96:	88 81       	ld	r24, Y
    5a98:	ca 58       	subi	r28, 0x8A	; 138
    5a9a:	d2 40       	sbci	r29, 0x02	; 2
    5a9c:	82 83       	std	Z+2, r24	; 0x02
    5a9e:	13 82       	std	Z+3, r1	; 0x03
    5aa0:	f4 82       	std	Z+4, r15	; 0x04
    5aa2:	15 82       	std	Z+5, r1	; 0x05
    5aa4:	82 c0       	rjmp	.+260    	; 0x5baa <flash_panel+0x2ec>
                break;
            } else {
                if (ihex.rectyp == 0) {
    5aa6:	d2 01       	movw	r26, r4
    5aa8:	13 96       	adiw	r26, 0x03	; 3
    5aaa:	2c 91       	ld	r18, X
    5aac:	13 97       	sbiw	r26, 0x03	; 3
    5aae:	22 23       	and	r18, r18
    5ab0:	09 f0       	breq	.+2      	; 0x5ab4 <flash_panel+0x1f6>
    5ab2:	53 c0       	rjmp	.+166    	; 0x5b5a <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    5ab4:	11 96       	adiw	r26, 0x01	; 1
    5ab6:	ed 90       	ld	r14, X+
    5ab8:	fc 90       	ld	r15, X
    5aba:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5abc:	57 01       	movw	r10, r14
    5abe:	aa 0c       	add	r10, r10
    5ac0:	ab 2c       	mov	r10, r11
    5ac2:	aa 1c       	adc	r10, r10
    5ac4:	bb 08       	sbc	r11, r11
    5ac6:	b1 94       	neg	r11
    5ac8:	a0 16       	cp	r10, r16
    5aca:	b1 06       	cpc	r11, r17
    5acc:	c1 f0       	breq	.+48     	; 0x5afe <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    5ace:	cd 14       	cp	r12, r13
    5ad0:	91 f0       	breq	.+36     	; 0x5af6 <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    5ad2:	16 95       	lsr	r17
    5ad4:	10 2f       	mov	r17, r16
    5ad6:	00 27       	eor	r16, r16
    5ad8:	17 95       	ror	r17
    5ada:	07 95       	ror	r16
    5adc:	0c 0d       	add	r16, r12
    5ade:	11 1d       	adc	r17, r1
    5ae0:	a8 01       	movw	r20, r16
    5ae2:	60 e0       	ldi	r22, 0x00	; 0
    5ae4:	70 e0       	ldi	r23, 0x00	; 0
    5ae6:	dc 18       	sub	r13, r12
    5ae8:	c4 01       	movw	r24, r8
    5aea:	2d 2d       	mov	r18, r13
    5aec:	8e 01       	movw	r16, r28
    5aee:	0f 5f       	subi	r16, 0xFF	; 255
    5af0:	1f 4f       	sbci	r17, 0xFF	; 255
    5af2:	0e 94 16 28 	call	0x502c	; 0x502c <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5af6:	6f e7       	ldi	r22, 0x7F	; 127
    5af8:	d6 2e       	mov	r13, r22
    5afa:	de 20       	and	r13, r14
    5afc:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    5afe:	4e 2d       	mov	r20, r14
    5b00:	4f 77       	andi	r20, 0x7F	; 127
    5b02:	4c 15       	cp	r20, r12
    5b04:	08 f4       	brcc	.+2      	; 0x5b08 <flash_panel+0x24a>
    5b06:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5b08:	f2 01       	movw	r30, r4
    5b0a:	50 81       	ld	r21, Z
    5b0c:	25 2f       	mov	r18, r21
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	c3 57       	subi	r28, 0x73	; 115
    5b12:	dd 4f       	sbci	r29, 0xFD	; 253
    5b14:	a8 81       	ld	r26, Y
    5b16:	b9 81       	ldd	r27, Y+1	; 0x01
    5b18:	cd 58       	subi	r28, 0x8D	; 141
    5b1a:	d2 40       	sbci	r29, 0x02	; 2
    5b1c:	e4 2f       	mov	r30, r20
    5b1e:	f0 e0       	ldi	r31, 0x00	; 0
    5b20:	35 96       	adiw	r30, 0x05	; 5
    5b22:	81 e0       	ldi	r24, 0x01	; 1
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	8c 0f       	add	r24, r28
    5b28:	9d 1f       	adc	r25, r29
    5b2a:	e8 0f       	add	r30, r24
    5b2c:	f9 1f       	adc	r31, r25
    5b2e:	2c 5f       	subi	r18, 0xFC	; 252
    5b30:	3f 4f       	sbci	r19, 0xFF	; 255
    5b32:	24 0d       	add	r18, r4
    5b34:	35 1d       	adc	r19, r5
    5b36:	02 c0       	rjmp	.+4      	; 0x5b3c <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5b38:	8d 91       	ld	r24, X+
    5b3a:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5b3c:	a2 17       	cp	r26, r18
    5b3e:	b3 07       	cpc	r27, r19
    5b40:	d9 f7       	brne	.-10     	; 0x5b38 <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    5b42:	85 2f       	mov	r24, r21
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	84 0f       	add	r24, r20
    5b48:	91 1d       	adc	r25, r1
    5b4a:	2d 2d       	mov	r18, r13
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	28 17       	cp	r18, r24
    5b50:	39 07       	cpc	r19, r25
    5b52:	9c f5       	brge	.+102    	; 0x5bba <flash_panel+0x2fc>
                        pageendaddr = pageoffset+ihex.reclen;
    5b54:	d4 2e       	mov	r13, r20
    5b56:	d5 0e       	add	r13, r21
    5b58:	30 c0       	rjmp	.+96     	; 0x5bba <flash_panel+0x2fc>
                } else if (ihex.rectyp == 1) {
    5b5a:	21 30       	cpi	r18, 0x01	; 1
    5b5c:	a9 f4       	brne	.+42     	; 0x5b88 <flash_panel+0x2ca>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5b5e:	cd 14       	cp	r12, r13
    5b60:	b9 f1       	breq	.+110    	; 0x5bd0 <flash_panel+0x312>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    5b62:	16 95       	lsr	r17
    5b64:	10 2f       	mov	r17, r16
    5b66:	00 27       	eor	r16, r16
    5b68:	17 95       	ror	r17
    5b6a:	07 95       	ror	r16
    5b6c:	0c 0d       	add	r16, r12
    5b6e:	11 1d       	adc	r17, r1
    5b70:	a8 01       	movw	r20, r16
    5b72:	60 e0       	ldi	r22, 0x00	; 0
    5b74:	70 e0       	ldi	r23, 0x00	; 0
    5b76:	dc 18       	sub	r13, r12
    5b78:	c4 01       	movw	r24, r8
    5b7a:	2d 2d       	mov	r18, r13
    5b7c:	8e 01       	movw	r16, r28
    5b7e:	0f 5f       	subi	r16, 0xFF	; 255
    5b80:	1f 4f       	sbci	r17, 0xFF	; 255
    5b82:	0e 94 16 28 	call	0x502c	; 0x502c <progPage>
    5b86:	24 c0       	rjmp	.+72     	; 0x5bd0 <flash_panel+0x312>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5b88:	00 d0       	rcall	.+0      	; 0x5b8a <flash_panel+0x2cc>
    5b8a:	00 d0       	rcall	.+0      	; 0x5b8c <flash_panel+0x2ce>
    5b8c:	ed b7       	in	r30, 0x3d	; 61
    5b8e:	fe b7       	in	r31, 0x3e	; 62
    5b90:	31 96       	adiw	r30, 0x01	; 1
    5b92:	82 eb       	ldi	r24, 0xB2	; 178
    5b94:	90 e1       	ldi	r25, 0x10	; 16
    5b96:	ad b7       	in	r26, 0x3d	; 61
    5b98:	be b7       	in	r27, 0x3e	; 62
    5b9a:	11 96       	adiw	r26, 0x01	; 1
    5b9c:	8d 93       	st	X+, r24
    5b9e:	9c 93       	st	X, r25
    5ba0:	12 97       	sbiw	r26, 0x02	; 2
    5ba2:	22 83       	std	Z+2, r18	; 0x02
    5ba4:	13 82       	std	Z+3, r1	; 0x03
    5ba6:	64 82       	std	Z+4, r6	; 0x04
    5ba8:	75 82       	std	Z+5, r7	; 0x05
    5baa:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    5bae:	ed b7       	in	r30, 0x3d	; 61
    5bb0:	fe b7       	in	r31, 0x3e	; 62
    5bb2:	36 96       	adiw	r30, 0x06	; 6
    5bb4:	ed bf       	out	0x3d, r30	; 61
    5bb6:	fe bf       	out	0x3e, r31	; 62
    5bb8:	0b c0       	rjmp	.+22     	; 0x5bd0 <flash_panel+0x312>
                            ihex.rectyp, lineno);
                    break;
    5bba:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5bbc:	c1 01       	movw	r24, r2
    5bbe:	60 e0       	ldi	r22, 0x00	; 0
    5bc0:	71 e0       	ldi	r23, 0x01	; 1
    5bc2:	41 ec       	ldi	r20, 0xC1	; 193
    5bc4:	57 e2       	ldi	r21, 0x27	; 39
    5bc6:	0e 94 c7 52 	call	0xa58e	; 0xa58e <f_gets>
    5bca:	89 2b       	or	r24, r25
    5bcc:	09 f0       	breq	.+2      	; 0x5bd0 <flash_panel+0x312>
    5bce:	2b cf       	rjmp	.-426    	; 0x5a26 <flash_panel+0x168>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    5bd0:	81 ec       	ldi	r24, 0xC1	; 193
    5bd2:	97 e2       	ldi	r25, 0x27	; 39
    5bd4:	40 e0       	ldi	r20, 0x00	; 0
    5bd6:	50 e0       	ldi	r21, 0x00	; 0
    5bd8:	60 e0       	ldi	r22, 0x00	; 0
    5bda:	70 e0       	ldi	r23, 0x00	; 0
    5bdc:	0e 94 b0 3f 	call	0x7f60	; 0x7f60 <f_lseek>
    5be0:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5be2:	88 23       	and	r24, r24
    5be4:	49 f0       	breq	.+18     	; 0x5bf8 <flash_panel+0x33a>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    5be6:	85 e9       	ldi	r24, 0x95	; 149
    5be8:	90 e1       	ldi	r25, 0x10	; 16
    5bea:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
            put_rc(res);
    5bee:	81 2f       	mov	r24, r17
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <put_rc>
    5bf6:	2c c1       	rjmp	.+600    	; 0x5e50 <flash_panel+0x592>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    5bf8:	88 e8       	ldi	r24, 0x88	; 136
    5bfa:	90 e1       	ldi	r25, 0x10	; 16
    5bfc:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    5c00:	cc 24       	eor	r12, r12
    5c02:	ca 94       	dec	r12
    5c04:	dc 2c       	mov	r13, r12
    5c06:	00 e0       	ldi	r16, 0x00	; 0
    5c08:	10 e0       	ldi	r17, 0x00	; 0
    5c0a:	66 24       	eor	r6, r6
    5c0c:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    5c0e:	ce 01       	movw	r24, r28
    5c10:	8a 57       	subi	r24, 0x7A	; 122
    5c12:	9f 4f       	sbci	r25, 0xFF	; 255
    5c14:	c1 57       	subi	r28, 0x71	; 113
    5c16:	dd 4f       	sbci	r29, 0xFD	; 253
    5c18:	88 83       	st	Y, r24
    5c1a:	99 83       	std	Y+1, r25	; 0x01
    5c1c:	cf 58       	subi	r28, 0x8F	; 143
    5c1e:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5c20:	46 e8       	ldi	r20, 0x86	; 134
    5c22:	44 2e       	mov	r4, r20
    5c24:	41 e0       	ldi	r20, 0x01	; 1
    5c26:	54 2e       	mov	r5, r20
    5c28:	4c 0e       	add	r4, r28
    5c2a:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5c2c:	d2 01       	movw	r26, r4
    5c2e:	14 96       	adiw	r26, 0x04	; 4
    5c30:	c5 57       	subi	r28, 0x75	; 117
    5c32:	dd 4f       	sbci	r29, 0xFD	; 253
    5c34:	a8 83       	st	Y, r26
    5c36:	b9 83       	std	Y+1, r27	; 0x01
    5c38:	cb 58       	subi	r28, 0x8B	; 139
    5c3a:	d2 40       	sbci	r29, 0x02	; 2
    5c3c:	ff c0       	rjmp	.+510    	; 0x5e3c <flash_panel+0x57e>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    5c3e:	08 94       	sec
    5c40:	61 1c       	adc	r6, r1
    5c42:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    5c44:	c1 57       	subi	r28, 0x71	; 113
    5c46:	dd 4f       	sbci	r29, 0xFD	; 253
    5c48:	e8 81       	ld	r30, Y
    5c4a:	f9 81       	ldd	r31, Y+1	; 0x01
    5c4c:	cf 58       	subi	r28, 0x8F	; 143
    5c4e:	d2 40       	sbci	r29, 0x02	; 2
    5c50:	01 90       	ld	r0, Z+
    5c52:	00 20       	and	r0, r0
    5c54:	e9 f7       	brne	.-6      	; 0x5c50 <flash_panel+0x392>
                if (flashBuff[len-1] == '\n')
    5c56:	32 97       	sbiw	r30, 0x02	; 2
    5c58:	80 81       	ld	r24, Z
    5c5a:	8a 30       	cpi	r24, 0x0A	; 10
    5c5c:	09 f4       	brne	.+2      	; 0x5c60 <flash_panel+0x3a2>
                    flashBuff[--len] = 0;
    5c5e:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    5c60:	ca 57       	subi	r28, 0x7A	; 122
    5c62:	df 4f       	sbci	r29, 0xFF	; 255
    5c64:	88 81       	ld	r24, Y
    5c66:	c6 58       	subi	r28, 0x86	; 134
    5c68:	d0 40       	sbci	r29, 0x00	; 0
    5c6a:	8a 33       	cpi	r24, 0x3A	; 58
    5c6c:	09 f0       	breq	.+2      	; 0x5c70 <flash_panel+0x3b2>
    5c6e:	e6 c0       	rjmp	.+460    	; 0x5e3c <flash_panel+0x57e>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5c70:	c2 01       	movw	r24, r4
    5c72:	b1 01       	movw	r22, r2
    5c74:	0e 94 5d 28 	call	0x50ba	; 0x50ba <ihex_readrec>
    5c78:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    5c7a:	c6 57       	subi	r28, 0x76	; 118
    5c7c:	dd 4f       	sbci	r29, 0xFD	; 253
    5c7e:	88 81       	ld	r24, Y
    5c80:	ca 58       	subi	r28, 0x8A	; 138
    5c82:	d2 40       	sbci	r29, 0x02	; 2
    5c84:	f8 16       	cp	r15, r24
    5c86:	19 f1       	breq	.+70     	; 0x5cce <flash_panel+0x410>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    5c88:	00 d0       	rcall	.+0      	; 0x5c8a <flash_panel+0x3cc>
    5c8a:	0f 92       	push	r0
    5c8c:	86 e5       	ldi	r24, 0x56	; 86
    5c8e:	90 e1       	ldi	r25, 0x10	; 16
    5c90:	ed b7       	in	r30, 0x3d	; 61
    5c92:	fe b7       	in	r31, 0x3e	; 62
    5c94:	81 83       	std	Z+1, r24	; 0x01
    5c96:	92 83       	std	Z+2, r25	; 0x02
    5c98:	63 82       	std	Z+3, r6	; 0x03
    5c9a:	74 82       	std	Z+4, r7	; 0x04
    5c9c:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5ca0:	0f 92       	push	r0
    5ca2:	0f 92       	push	r0
    5ca4:	ed b7       	in	r30, 0x3d	; 61
    5ca6:	fe b7       	in	r31, 0x3e	; 62
    5ca8:	31 96       	adiw	r30, 0x01	; 1
    5caa:	8b e2       	ldi	r24, 0x2B	; 43
    5cac:	90 e1       	ldi	r25, 0x10	; 16
    5cae:	ad b7       	in	r26, 0x3d	; 61
    5cb0:	be b7       	in	r27, 0x3e	; 62
    5cb2:	11 96       	adiw	r26, 0x01	; 1
    5cb4:	8d 93       	st	X+, r24
    5cb6:	9c 93       	st	X, r25
    5cb8:	12 97       	sbiw	r26, 0x02	; 2
    5cba:	c6 57       	subi	r28, 0x76	; 118
    5cbc:	dd 4f       	sbci	r29, 0xFD	; 253
    5cbe:	88 81       	ld	r24, Y
    5cc0:	ca 58       	subi	r28, 0x8A	; 138
    5cc2:	d2 40       	sbci	r29, 0x02	; 2
    5cc4:	82 83       	std	Z+2, r24	; 0x02
    5cc6:	13 82       	std	Z+3, r1	; 0x03
    5cc8:	f4 82       	std	Z+4, r15	; 0x04
    5cca:	15 82       	std	Z+5, r1	; 0x05
    5ccc:	ae c0       	rjmp	.+348    	; 0x5e2a <flash_panel+0x56c>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    5cce:	d2 01       	movw	r26, r4
    5cd0:	13 96       	adiw	r26, 0x03	; 3
    5cd2:	2c 91       	ld	r18, X
    5cd4:	13 97       	sbiw	r26, 0x03	; 3
    5cd6:	22 23       	and	r18, r18
    5cd8:	09 f0       	breq	.+2      	; 0x5cdc <flash_panel+0x41e>
    5cda:	65 c0       	rjmp	.+202    	; 0x5da6 <flash_panel+0x4e8>
                        // data record
                        nextaddr = ihex.loadofs;
    5cdc:	11 96       	adiw	r26, 0x01	; 1
    5cde:	ed 90       	ld	r14, X+
    5ce0:	fc 90       	ld	r15, X
    5ce2:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5ce4:	57 01       	movw	r10, r14
    5ce6:	aa 0c       	add	r10, r10
    5ce8:	ab 2c       	mov	r10, r11
    5cea:	aa 1c       	adc	r10, r10
    5cec:	bb 08       	sbc	r11, r11
    5cee:	b1 94       	neg	r11
    5cf0:	ac 14       	cp	r10, r12
    5cf2:	bd 04       	cpc	r11, r13
    5cf4:	49 f1       	breq	.+82     	; 0x5d48 <flash_panel+0x48a>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    5cf6:	01 17       	cp	r16, r17
    5cf8:	21 f1       	breq	.+72     	; 0x5d42 <flash_panel+0x484>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    5cfa:	a6 01       	movw	r20, r12
    5cfc:	56 95       	lsr	r21
    5cfe:	54 2f       	mov	r21, r20
    5d00:	44 27       	eor	r20, r20
    5d02:	57 95       	ror	r21
    5d04:	47 95       	ror	r20
    5d06:	40 0f       	add	r20, r16
    5d08:	51 1d       	adc	r21, r1
    5d0a:	60 e0       	ldi	r22, 0x00	; 0
    5d0c:	70 e0       	ldi	r23, 0x00	; 0
    5d0e:	10 1b       	sub	r17, r16
    5d10:	c4 01       	movw	r24, r8
    5d12:	21 2f       	mov	r18, r17
    5d14:	8e 01       	movw	r16, r28
    5d16:	0f 5f       	subi	r16, 0xFF	; 255
    5d18:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1a:	0e 94 5d 27 	call	0x4eba	; 0x4eba <verifyPage>
    5d1e:	89 2b       	or	r24, r25
    5d20:	81 f4       	brne	.+32     	; 0x5d42 <flash_panel+0x484>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    5d22:	00 d0       	rcall	.+0      	; 0x5d24 <flash_panel+0x466>
    5d24:	0f 92       	push	r0
    5d26:	8e e0       	ldi	r24, 0x0E	; 14
    5d28:	90 e1       	ldi	r25, 0x10	; 16
    5d2a:	ed b7       	in	r30, 0x3d	; 61
    5d2c:	fe b7       	in	r31, 0x3e	; 62
    5d2e:	81 83       	std	Z+1, r24	; 0x01
    5d30:	92 83       	std	Z+2, r25	; 0x02
    5d32:	c3 82       	std	Z+3, r12	; 0x03
    5d34:	d4 82       	std	Z+4, r13	; 0x04
    5d36:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    5d3a:	0f 90       	pop	r0
    5d3c:	0f 90       	pop	r0
    5d3e:	0f 90       	pop	r0
    5d40:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5d42:	1e 2d       	mov	r17, r14
    5d44:	1f 77       	andi	r17, 0x7F	; 127
    5d46:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    5d48:	4e 2d       	mov	r20, r14
    5d4a:	4f 77       	andi	r20, 0x7F	; 127
    5d4c:	40 17       	cp	r20, r16
    5d4e:	08 f4       	brcc	.+2      	; 0x5d52 <flash_panel+0x494>
    5d50:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5d52:	d2 01       	movw	r26, r4
    5d54:	5c 91       	ld	r21, X
    5d56:	25 2f       	mov	r18, r21
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	c5 57       	subi	r28, 0x75	; 117
    5d5c:	dd 4f       	sbci	r29, 0xFD	; 253
    5d5e:	a8 81       	ld	r26, Y
    5d60:	b9 81       	ldd	r27, Y+1	; 0x01
    5d62:	cb 58       	subi	r28, 0x8B	; 139
    5d64:	d2 40       	sbci	r29, 0x02	; 2
    5d66:	e4 2f       	mov	r30, r20
    5d68:	f0 e0       	ldi	r31, 0x00	; 0
    5d6a:	35 96       	adiw	r30, 0x05	; 5
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	8c 0f       	add	r24, r28
    5d72:	9d 1f       	adc	r25, r29
    5d74:	e8 0f       	add	r30, r24
    5d76:	f9 1f       	adc	r31, r25
    5d78:	2c 5f       	subi	r18, 0xFC	; 252
    5d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d7c:	24 0d       	add	r18, r4
    5d7e:	35 1d       	adc	r19, r5
    5d80:	02 c0       	rjmp	.+4      	; 0x5d86 <flash_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5d82:	8d 91       	ld	r24, X+
    5d84:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5d86:	a2 17       	cp	r26, r18
    5d88:	b3 07       	cpc	r27, r19
    5d8a:	d9 f7       	brne	.-10     	; 0x5d82 <flash_panel+0x4c4>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    5d8c:	85 2f       	mov	r24, r21
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	84 0f       	add	r24, r20
    5d92:	91 1d       	adc	r25, r1
    5d94:	21 2f       	mov	r18, r17
    5d96:	30 e0       	ldi	r19, 0x00	; 0
    5d98:	28 17       	cp	r18, r24
    5d9a:	39 07       	cpc	r19, r25
    5d9c:	0c f0       	brlt	.+2      	; 0x5da0 <flash_panel+0x4e2>
    5d9e:	4d c0       	rjmp	.+154    	; 0x5e3a <flash_panel+0x57c>
                            pageendaddr = pageoffset+ihex.reclen;
    5da0:	14 2f       	mov	r17, r20
    5da2:	15 0f       	add	r17, r21
    5da4:	4a c0       	rjmp	.+148    	; 0x5e3a <flash_panel+0x57c>
                    } else if (ihex.rectyp == 1) {
    5da6:	21 30       	cpi	r18, 0x01	; 1
    5da8:	79 f5       	brne	.+94     	; 0x5e08 <flash_panel+0x54a>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    5daa:	01 17       	cp	r16, r17
    5dac:	41 f1       	breq	.+80     	; 0x5dfe <flash_panel+0x540>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    5dae:	a6 01       	movw	r20, r12
    5db0:	56 95       	lsr	r21
    5db2:	54 2f       	mov	r21, r20
    5db4:	44 27       	eor	r20, r20
    5db6:	57 95       	ror	r21
    5db8:	47 95       	ror	r20
    5dba:	40 0f       	add	r20, r16
    5dbc:	51 1d       	adc	r21, r1
    5dbe:	60 e0       	ldi	r22, 0x00	; 0
    5dc0:	70 e0       	ldi	r23, 0x00	; 0
    5dc2:	10 1b       	sub	r17, r16
    5dc4:	c4 01       	movw	r24, r8
    5dc6:	21 2f       	mov	r18, r17
    5dc8:	8e 01       	movw	r16, r28
    5dca:	0f 5f       	subi	r16, 0xFF	; 255
    5dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5dce:	0e 94 5d 27 	call	0x4eba	; 0x4eba <verifyPage>
    5dd2:	89 2b       	or	r24, r25
    5dd4:	a1 f4       	brne	.+40     	; 0x5dfe <flash_panel+0x540>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    5dd6:	00 d0       	rcall	.+0      	; 0x5dd8 <flash_panel+0x51a>
    5dd8:	0f 92       	push	r0
    5dda:	81 ef       	ldi	r24, 0xF1	; 241
    5ddc:	9f e0       	ldi	r25, 0x0F	; 15
    5dde:	ad b7       	in	r26, 0x3d	; 61
    5de0:	be b7       	in	r27, 0x3e	; 62
    5de2:	11 96       	adiw	r26, 0x01	; 1
    5de4:	8d 93       	st	X+, r24
    5de6:	9c 93       	st	X, r25
    5de8:	12 97       	sbiw	r26, 0x02	; 2
    5dea:	13 96       	adiw	r26, 0x03	; 3
    5dec:	cd 92       	st	X+, r12
    5dee:	dc 92       	st	X, r13
    5df0:	14 97       	sbiw	r26, 0x04	; 4
    5df2:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    5df6:	0f 90       	pop	r0
    5df8:	0f 90       	pop	r0
    5dfa:	0f 90       	pop	r0
    5dfc:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5dfe:	8f ee       	ldi	r24, 0xEF	; 239
    5e00:	9f e0       	ldi	r25, 0x0F	; 15
    5e02:	0e 94 19 5a 	call	0xb432	; 0xb432 <xputs>
    5e06:	24 c0       	rjmp	.+72     	; 0x5e50 <flash_panel+0x592>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5e08:	00 d0       	rcall	.+0      	; 0x5e0a <flash_panel+0x54c>
    5e0a:	00 d0       	rcall	.+0      	; 0x5e0c <flash_panel+0x54e>
    5e0c:	ed b7       	in	r30, 0x3d	; 61
    5e0e:	fe b7       	in	r31, 0x3e	; 62
    5e10:	31 96       	adiw	r30, 0x01	; 1
    5e12:	8f ea       	ldi	r24, 0xAF	; 175
    5e14:	9f e0       	ldi	r25, 0x0F	; 15
    5e16:	ad b7       	in	r26, 0x3d	; 61
    5e18:	be b7       	in	r27, 0x3e	; 62
    5e1a:	11 96       	adiw	r26, 0x01	; 1
    5e1c:	8d 93       	st	X+, r24
    5e1e:	9c 93       	st	X, r25
    5e20:	12 97       	sbiw	r26, 0x02	; 2
    5e22:	22 83       	std	Z+2, r18	; 0x02
    5e24:	13 82       	std	Z+3, r1	; 0x03
    5e26:	64 82       	std	Z+4, r6	; 0x04
    5e28:	75 82       	std	Z+5, r7	; 0x05
    5e2a:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    5e2e:	ed b7       	in	r30, 0x3d	; 61
    5e30:	fe b7       	in	r31, 0x3e	; 62
    5e32:	36 96       	adiw	r30, 0x06	; 6
    5e34:	ed bf       	out	0x3d, r30	; 61
    5e36:	fe bf       	out	0x3e, r31	; 62
    5e38:	0b c0       	rjmp	.+22     	; 0x5e50 <flash_panel+0x592>
                                ihex.rectyp, lineno);
                        break;
    5e3a:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5e3c:	c1 01       	movw	r24, r2
    5e3e:	60 e0       	ldi	r22, 0x00	; 0
    5e40:	71 e0       	ldi	r23, 0x01	; 1
    5e42:	41 ec       	ldi	r20, 0xC1	; 193
    5e44:	57 e2       	ldi	r21, 0x27	; 39
    5e46:	0e 94 c7 52 	call	0xa58e	; 0xa58e <f_gets>
    5e4a:	89 2b       	or	r24, r25
    5e4c:	09 f0       	breq	.+2      	; 0x5e50 <flash_panel+0x592>
    5e4e:	f7 ce       	rjmp	.-530    	; 0x5c3e <flash_panel+0x380>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5e50:	85 e4       	ldi	r24, 0x45	; 69
    5e52:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    5e54:	c4 01       	movw	r24, r8
    5e56:	60 e7       	ldi	r22, 0x70	; 112
    5e58:	ae 01       	movw	r20, r28
    5e5a:	4f 5f       	subi	r20, 0xFF	; 255
    5e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e5e:	21 e0       	ldi	r18, 0x01	; 1
    5e60:	00 e0       	ldi	r16, 0x00	; 0
    5e62:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    5e66:	d4 01       	movw	r26, r8
    5e68:	1d 96       	adiw	r26, 0x0d	; 13
    5e6a:	8c 91       	ld	r24, X
    5e6c:	1d 97       	sbiw	r26, 0x0d	; 13
    5e6e:	88 23       	and	r24, r24
    5e70:	d1 f7       	brne	.-12     	; 0x5e66 <flash_panel+0x5a8>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    5e72:	1e 96       	adiw	r26, 0x0e	; 14
    5e74:	8c 91       	ld	r24, X
    5e76:	1e 97       	sbiw	r26, 0x0e	; 14
    5e78:	81 30       	cpi	r24, 0x01	; 1
    5e7a:	11 f1       	breq	.+68     	; 0x5ec0 <flash_panel+0x602>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    5e7c:	1e 96       	adiw	r26, 0x0e	; 14
    5e7e:	2c 91       	ld	r18, X
    5e80:	00 d0       	rcall	.+0      	; 0x5e82 <flash_panel+0x5c4>
    5e82:	0f 92       	push	r0
    5e84:	ed b7       	in	r30, 0x3d	; 61
    5e86:	fe b7       	in	r31, 0x3e	; 62
    5e88:	31 96       	adiw	r30, 0x01	; 1
    5e8a:	84 e9       	ldi	r24, 0x94	; 148
    5e8c:	9f e0       	ldi	r25, 0x0F	; 15
    5e8e:	ad b7       	in	r26, 0x3d	; 61
    5e90:	be b7       	in	r27, 0x3e	; 62
    5e92:	11 96       	adiw	r26, 0x01	; 1
    5e94:	8d 93       	st	X+, r24
    5e96:	9c 93       	st	X, r25
    5e98:	12 97       	sbiw	r26, 0x02	; 2
    5e9a:	22 83       	std	Z+2, r18	; 0x02
    5e9c:	13 82       	std	Z+3, r1	; 0x03
    5e9e:	0a c0       	rjmp	.+20     	; 0x5eb4 <flash_panel+0x5f6>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    5ea0:	00 d0       	rcall	.+0      	; 0x5ea2 <flash_panel+0x5e4>
    5ea2:	0f 92       	push	r0
    5ea4:	89 e7       	ldi	r24, 0x79	; 121
    5ea6:	9f e0       	ldi	r25, 0x0F	; 15
    5ea8:	ed b7       	in	r30, 0x3d	; 61
    5eaa:	fe b7       	in	r31, 0x3e	; 62
    5eac:	81 83       	std	Z+1, r24	; 0x01
    5eae:	92 83       	std	Z+2, r25	; 0x02
    5eb0:	e3 82       	std	Z+3, r14	; 0x03
    5eb2:	f4 82       	std	Z+4, r15	; 0x04
    5eb4:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <xprintf>
    5eb8:	0f 90       	pop	r0
    5eba:	0f 90       	pop	r0
    5ebc:	0f 90       	pop	r0
    5ebe:	0f 90       	pop	r0
    }
};
    5ec0:	c0 57       	subi	r28, 0x70	; 112
    5ec2:	dd 4f       	sbci	r29, 0xFD	; 253
    5ec4:	e2 e1       	ldi	r30, 0x12	; 18
    5ec6:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

00005eca <init_all>:
#include "utils.h"

void init_all()
{ 
    5eca:	a1 e0       	ldi	r26, 0x01	; 1
    5ecc:	b0 e0       	ldi	r27, 0x00	; 0
    5ece:	eb e6       	ldi	r30, 0x6B	; 107
    5ed0:	ff e2       	ldi	r31, 0x2F	; 47
    5ed2:	0c 94 a5 5b 	jmp	0xb74a	; 0xb74a <__prologue_saves__+0x1c>
  ledWrite(LED0, ON);
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	61 e0       	ldi	r22, 0x01	; 1
    5eda:	0e 94 48 24 	call	0x4890	; 0x4890 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    5ede:	e0 e4       	ldi	r30, 0x40	; 64
    5ee0:	f6 e0       	ldi	r31, 0x06	; 6
    5ee2:	88 e0       	ldi	r24, 0x08	; 8
    5ee4:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    5ee6:	84 e0       	ldi	r24, 0x04	; 4
    5ee8:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    5eea:	80 e1       	ldi	r24, 0x10	; 16
    5eec:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    5eee:	90 e2       	ldi	r25, 0x20	; 32
    5ef0:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    5ef2:	20 e8       	ldi	r18, 0x80	; 128
    5ef4:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    5ef6:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5ef8:	e0 e6       	ldi	r30, 0x60	; 96
    5efa:	f6 e0       	ldi	r31, 0x06	; 6
    5efc:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    5efe:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    5f00:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    5f02:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    5f04:	80 eb       	ldi	r24, 0xB0	; 176
    5f06:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    5f0a:	e0 e8       	ldi	r30, 0x80	; 128
    5f0c:	f6 e0       	ldi	r31, 0x06	; 6
    5f0e:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    5f10:	e0 ee       	ldi	r30, 0xE0	; 224
    5f12:	f6 e0       	ldi	r31, 0x06	; 6
    5f14:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    5f16:	80 e4       	ldi	r24, 0x40	; 64
    5f18:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    5f1a:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    5f1c:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    5f1e:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    5f20:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    5f22:	80 ef       	ldi	r24, 0xF0	; 240
    5f24:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    5f28:	e0 e0       	ldi	r30, 0x00	; 0
    5f2a:	f7 e0       	ldi	r31, 0x07	; 7
    5f2c:	84 83       	std	Z+4, r24	; 0x04


  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
    5f2e:	00 e2       	ldi	r16, 0x20	; 32
    5f30:	17 e0       	ldi	r17, 0x07	; 7
    5f32:	80 93 20 07 	sts	0x0720, r24
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
    5f36:	8f ef       	ldi	r24, 0xFF	; 255
    5f38:	f8 01       	movw	r30, r16
    5f3a:	84 83       	std	Z+4, r24	; 0x04



 // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);     //used to trigger laser
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    5f3e:	60 e0       	ldi	r22, 0x00	; 0
    5f40:	0e 94 95 24 	call	0x492a	; 0x492a <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	60 e0       	ldi	r22, 0x00	; 0
    5f48:	0e 94 95 24 	call	0x492a	; 0x492a <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger camera
    5f4c:	82 e0       	ldi	r24, 0x02	; 2
    5f4e:	60 e0       	ldi	r22, 0x00	; 0
    5f50:	0e 94 95 24 	call	0x492a	; 0x492a <digitalMode>
  digitalMode(3, INPUT);      //Used to detect external trigger signal 
    5f54:	83 e0       	ldi	r24, 0x03	; 3
    5f56:	61 e0       	ldi	r22, 0x01	; 1
    5f58:	0e 94 95 24 	call	0x492a	; 0x492a <digitalMode>
  PORTK.PIN3CTRL = 0x01;      //INT3 senses rising edge
    5f5c:	81 e0       	ldi	r24, 0x01	; 1
    5f5e:	f8 01       	movw	r30, r16
    5f60:	83 8b       	std	Z+19, r24	; 0x13
  PORTK.INT0MASK = 0x00;      //disable Int3 as source for port interrupt 0x00, enable it with 0x08.
    5f62:	12 86       	std	Z+10, r1	; 0x0a
  PORTK.INTCTRL = 0x02;       //Set Int3 INT0 Level medium   
    5f64:	82 e0       	ldi	r24, 0x02	; 2
    5f66:	81 87       	std	Z+9, r24	; 0x09

  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    5f68:	e0 e5       	ldi	r30, 0x50	; 80
    5f6a:	f0 e0       	ldi	r31, 0x00	; 0
    5f6c:	87 e4       	ldi	r24, 0x47	; 71
    5f6e:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    5f70:	84 ec       	ldi	r24, 0xC4	; 196
    5f72:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    5f74:	88 e1       	ldi	r24, 0x18	; 24
    5f76:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    5f7a:	80 91 51 00 	lds	r24, 0x0051
    5f7e:	84 ff       	sbrs	r24, 4
    5f80:	fc cf       	rjmp	.-8      	; 0x5f7a <init_all+0xb0>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    5f82:	8f b7       	in	r24, 0x3f	; 63
    5f84:	89 83       	std	Y+1, r24	; 0x01
  cli();
    5f86:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    5f88:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    5f8a:	24 e0       	ldi	r18, 0x04	; 4
    5f8c:	80 e4       	ldi	r24, 0x40	; 64
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	fc 01       	movw	r30, r24
    5f92:	08 ed       	ldi	r16, 0xD8	; 216
    5f94:	04 bf       	out	0x34, r16	; 52
    5f96:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    5f98:	89 81       	ldd	r24, Y+1	; 0x01
    5f9a:	8f bf       	out	0x3f, r24	; 63
    5f9c:	88 ee       	ldi	r24, 0xE8	; 232
    5f9e:	93 e0       	ldi	r25, 0x03	; 3
    5fa0:	20 e2       	ldi	r18, 0x20	; 32
    5fa2:	33 e0       	ldi	r19, 0x03	; 3
    5fa4:	f9 01       	movw	r30, r18
    5fa6:	31 97       	sbiw	r30, 0x01	; 1
    5fa8:	f1 f7       	brne	.-4      	; 0x5fa6 <init_all+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5faa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fac:	d9 f7       	brne	.-10     	; 0x5fa4 <init_all+0xda>
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    5fae:	e0 e4       	ldi	r30, 0x40	; 64
    5fb0:	fa e0       	ldi	r31, 0x0A	; 10
    5fb2:	84 e0       	ldi	r24, 0x04	; 4
    5fb4:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    5fb8:	8f e3       	ldi	r24, 0x3F	; 63
    5fba:	9c e9       	ldi	r25, 0x9C	; 156
    5fbc:	86 a3       	std	Z+38, r24	; 0x26
    5fbe:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    5fc0:	82 e0       	ldi	r24, 0x02	; 2
    5fc2:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    5fc4:	88 e5       	ldi	r24, 0x58	; 88
    5fc6:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: -5V-+5v range on ch 0,1 0-10V on ch 2, 3
  PORTC.OUTCLR = PIN4_bm;
    5fca:	80 e1       	ldi	r24, 0x10	; 16
    5fcc:	e0 e4       	ldi	r30, 0x40	; 64
    5fce:	f6 e0       	ldi	r31, 0x06	; 6
    5fd0:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xab;
    5fd2:	8b ea       	ldi	r24, 0xAB	; 171
    5fd4:	e0 ec       	ldi	r30, 0xC0	; 192
    5fd6:	f8 e0       	ldi	r31, 0x08	; 8
    5fd8:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5fda:	80 91 c2 08 	lds	r24, 0x08C2
    5fde:	87 ff       	sbrs	r24, 7
    5fe0:	fc cf       	rjmp	.-8      	; 0x5fda <init_all+0x110>
  SPIC.DATA = 0xe0;
    5fe2:	80 ee       	ldi	r24, 0xE0	; 224
    5fe4:	e0 ec       	ldi	r30, 0xC0	; 192
    5fe6:	f8 e0       	ldi	r31, 0x08	; 8
    5fe8:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5fea:	80 91 c2 08 	lds	r24, 0x08C2
    5fee:	87 ff       	sbrs	r24, 7
    5ff0:	fc cf       	rjmp	.-8      	; 0x5fea <init_all+0x120>
  PORTC.OUTSET = PIN4_bm;
    5ff2:	e0 e4       	ldi	r30, 0x40	; 64
    5ff4:	f6 e0       	ldi	r31, 0x06	; 6
    5ff6:	80 e1       	ldi	r24, 0x10	; 16
    5ff8:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10v range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    5ffa:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    5ffc:	8f ed       	ldi	r24, 0xDF	; 223
    5ffe:	e0 ec       	ldi	r30, 0xC0	; 192
    6000:	f8 e0       	ldi	r31, 0x08	; 8
    6002:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6004:	80 91 c2 08 	lds	r24, 0x08C2
    6008:	87 ff       	sbrs	r24, 7
    600a:	fc cf       	rjmp	.-8      	; 0x6004 <init_all+0x13a>
  SPIC.DATA = 0xe0;
    600c:	80 ee       	ldi	r24, 0xE0	; 224
    600e:	e0 ec       	ldi	r30, 0xC0	; 192
    6010:	f8 e0       	ldi	r31, 0x08	; 8
    6012:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6014:	80 91 c2 08 	lds	r24, 0x08C2
    6018:	87 ff       	sbrs	r24, 7
    601a:	fc cf       	rjmp	.-8      	; 0x6014 <init_all+0x14a>
  PORTC.OUTSET = PIN4_bm;
    601c:	e0 e4       	ldi	r30, 0x40	; 64
    601e:	f6 e0       	ldi	r31, 0x06	; 6
    6020:	80 e1       	ldi	r24, 0x10	; 16
    6022:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    6024:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    6026:	80 ee       	ldi	r24, 0xE0	; 224
    6028:	e0 ec       	ldi	r30, 0xC0	; 192
    602a:	f8 e0       	ldi	r31, 0x08	; 8
    602c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    602e:	80 91 c2 08 	lds	r24, 0x08C2
    6032:	87 ff       	sbrs	r24, 7
    6034:	fc cf       	rjmp	.-8      	; 0x602e <init_all+0x164>
  SPIC.DATA = 0x00;
    6036:	e0 ec       	ldi	r30, 0xC0	; 192
    6038:	f8 e0       	ldi	r31, 0x08	; 8
    603a:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    603c:	80 91 c2 08 	lds	r24, 0x08C2
    6040:	87 ff       	sbrs	r24, 7
    6042:	fc cf       	rjmp	.-8      	; 0x603c <init_all+0x172>
  PORTC.OUTSET = PIN4_bm;
    6044:	e0 e4       	ldi	r30, 0x40	; 64
    6046:	f6 e0       	ldi	r31, 0x06	; 6
    6048:	80 e1       	ldi	r24, 0x10	; 16
    604a:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 0(twos complement), ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    604c:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    604e:	80 e8       	ldi	r24, 0x80	; 128
    6050:	e0 ec       	ldi	r30, 0xC0	; 192
    6052:	f8 e0       	ldi	r31, 0x08	; 8
    6054:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6056:	80 91 c2 08 	lds	r24, 0x08C2
    605a:	87 ff       	sbrs	r24, 7
    605c:	fc cf       	rjmp	.-8      	; 0x6056 <init_all+0x18c>
  SPIC.DATA = 0x10;
    605e:	80 e1       	ldi	r24, 0x10	; 16
    6060:	e0 ec       	ldi	r30, 0xC0	; 192
    6062:	f8 e0       	ldi	r31, 0x08	; 8
    6064:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    6066:	80 91 c2 08 	lds	r24, 0x08C2
    606a:	87 ff       	sbrs	r24, 7
    606c:	fc cf       	rjmp	.-8      	; 0x6066 <init_all+0x19c>
  PORTC.OUTSET = PIN4_bm;
    606e:	90 e1       	ldi	r25, 0x10	; 16
    6070:	e0 e4       	ldi	r30, 0x40	; 64
    6072:	f6 e0       	ldi	r31, 0x06	; 6
    6074:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    6076:	88 e5       	ldi	r24, 0x58	; 88
    6078:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    607c:	e0 e6       	ldi	r30, 0x60	; 96
    607e:	f6 e0       	ldi	r31, 0x06	; 6
    6080:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    6082:	e0 ec       	ldi	r30, 0xC0	; 192
    6084:	f9 e0       	ldi	r31, 0x09	; 9
    6086:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6088:	80 91 c2 09 	lds	r24, 0x09C2
    608c:	87 ff       	sbrs	r24, 7
    608e:	fc cf       	rjmp	.-8      	; 0x6088 <init_all+0x1be>
  SPID.DATA = 0x00;
    6090:	e0 ec       	ldi	r30, 0xC0	; 192
    6092:	f9 e0       	ldi	r31, 0x09	; 9
    6094:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    6096:	80 91 c2 09 	lds	r24, 0x09C2
    609a:	87 ff       	sbrs	r24, 7
    609c:	fc cf       	rjmp	.-8      	; 0x6096 <init_all+0x1cc>
  SPID.DATA = 0x1f;
    609e:	8f e1       	ldi	r24, 0x1F	; 31
    60a0:	e0 ec       	ldi	r30, 0xC0	; 192
    60a2:	f9 e0       	ldi	r31, 0x09	; 9
    60a4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    60a6:	80 91 c2 09 	lds	r24, 0x09C2
    60aa:	87 ff       	sbrs	r24, 7
    60ac:	fc cf       	rjmp	.-8      	; 0x60a6 <init_all+0x1dc>
  PORTD.OUTSET = PIN4_bm;
    60ae:	e0 e6       	ldi	r30, 0x60	; 96
    60b0:	f6 e0       	ldi	r31, 0x06	; 6
    60b2:	80 e1       	ldi	r24, 0x10	; 16
    60b4:	85 83       	std	Z+5, r24	; 0x05

//DAC output range register (all ch +/-10V range)  
  PORTD.OUTCLR = PIN4_bm;
    60b6:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    60b8:	8c e0       	ldi	r24, 0x0C	; 12
    60ba:	e0 ec       	ldi	r30, 0xC0	; 192
    60bc:	f9 e0       	ldi	r31, 0x09	; 9
    60be:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    60c0:	80 91 c2 09 	lds	r24, 0x09C2
    60c4:	87 ff       	sbrs	r24, 7
    60c6:	fc cf       	rjmp	.-8      	; 0x60c0 <init_all+0x1f6>
  SPID.DATA = 0x00;
    60c8:	e0 ec       	ldi	r30, 0xC0	; 192
    60ca:	f9 e0       	ldi	r31, 0x09	; 9
    60cc:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    60ce:	80 91 c2 09 	lds	r24, 0x09C2
    60d2:	87 ff       	sbrs	r24, 7
    60d4:	fc cf       	rjmp	.-8      	; 0x60ce <init_all+0x204>
   SPID.DATA = 0x04;
    60d6:	84 e0       	ldi	r24, 0x04	; 4
    60d8:	e0 ec       	ldi	r30, 0xC0	; 192
    60da:	f9 e0       	ldi	r31, 0x09	; 9
    60dc:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    60de:	80 91 c2 09 	lds	r24, 0x09C2
    60e2:	87 ff       	sbrs	r24, 7
    60e4:	fc cf       	rjmp	.-8      	; 0x60de <init_all+0x214>
  PORTD.OUTSET = PIN4_bm;
    60e6:	80 e1       	ldi	r24, 0x10	; 16
    60e8:	e0 e6       	ldi	r30, 0x60	; 96
    60ea:	f6 e0       	ldi	r31, 0x06	; 6
    60ec:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    60ee:	0e 94 86 30 	call	0x610c	; 0x610c <uart_init>
  
  //initialize timer
  timer_init();
    60f2:	0e 94 a2 58 	call	0xb144	; 0xb144 <timer_init>
  
  Handler_Init();
    60f6:	0e 94 2b 32 	call	0x6456	; 0x6456 <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    60fa:	87 e0       	ldi	r24, 0x07	; 7
    60fc:	e0 ea       	ldi	r30, 0xA0	; 160
    60fe:	f0 e0       	ldi	r31, 0x00	; 0
    6100:	82 83       	std	Z+2, r24	; 0x02
  sei();
    6102:	78 94       	sei
}
    6104:	21 96       	adiw	r28, 0x01	; 1
    6106:	e4 e0       	ldi	r30, 0x04	; 4
    6108:	0c 94 c1 5b 	jmp	0xb782	; 0xb782 <__epilogue_restores__+0x1c>

0000610c <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    610c:	10 92 62 25 	sts	0x2562, r1
    6110:	10 92 63 25 	sts	0x2563, r1
  rxfifo.idx_w = 0;
    6114:	10 92 60 25 	sts	0x2560, r1
    6118:	10 92 61 25 	sts	0x2561, r1
  rxfifo.count = 0;
    611c:	10 92 64 25 	sts	0x2564, r1
    6120:	10 92 65 25 	sts	0x2565, r1
  txfifo.idx_r = 0;
    6124:	10 92 1e 25 	sts	0x251E, r1
  txfifo.idx_w = 0;
    6128:	10 92 1d 25 	sts	0x251D, r1
  txfifo.count = 0;
    612c:	10 92 1f 25 	sts	0x251F, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    6130:	e0 ea       	ldi	r30, 0xA0	; 160
    6132:	f8 e0       	ldi	r31, 0x08	; 8
    6134:	8b e4       	ldi	r24, 0x4B	; 75
    6136:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    6138:	80 ea       	ldi	r24, 0xA0	; 160
    613a:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    613c:	80 e1       	ldi	r24, 0x10	; 16
    613e:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    6140:	83 e0       	ldi	r24, 0x03	; 3
    6142:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    6144:	88 e1       	ldi	r24, 0x18	; 24
    6146:	84 83       	std	Z+4, r24	; 0x04
}
    6148:	08 95       	ret

0000614a <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    614a:	20 91 64 25 	lds	r18, 0x2564
    614e:	30 91 65 25 	lds	r19, 0x2565
}
    6152:	c9 01       	movw	r24, r18
    6154:	08 95       	ret

00006156 <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    6156:	20 91 62 25 	lds	r18, 0x2562
    615a:	30 91 63 25 	lds	r19, 0x2563
  while(rxfifo.count == 0);
    615e:	80 91 64 25 	lds	r24, 0x2564
    6162:	90 91 65 25 	lds	r25, 0x2565
    6166:	89 2b       	or	r24, r25
    6168:	d1 f3       	breq	.-12     	; 0x615e <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    616a:	e0 91 68 25 	lds	r30, 0x2568
    616e:	f0 91 69 25 	lds	r31, 0x2569
    6172:	e2 0f       	add	r30, r18
    6174:	f3 1f       	adc	r31, r19
    6176:	e0 81       	ld	r30, Z
    6178:	2f 5f       	subi	r18, 0xFF	; 255
    617a:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    617c:	f8 94       	cli
  rxfifo.count--;
    617e:	80 91 64 25 	lds	r24, 0x2564
    6182:	90 91 65 25 	lds	r25, 0x2565
    6186:	01 97       	sbiw	r24, 0x01	; 1
    6188:	80 93 64 25 	sts	0x2564, r24
    618c:	90 93 65 25 	sts	0x2565, r25
  sei();
    6190:	78 94       	sei
  if(i >= rxfifo.size)
    6192:	80 91 66 25 	lds	r24, 0x2566
    6196:	90 91 67 25 	lds	r25, 0x2567
    619a:	28 17       	cp	r18, r24
    619c:	39 07       	cpc	r19, r25
    619e:	10 f0       	brcs	.+4      	; 0x61a4 <uart_get+0x4e>
    61a0:	20 e0       	ldi	r18, 0x00	; 0
    61a2:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    61a4:	20 93 62 25 	sts	0x2562, r18
    61a8:	30 93 63 25 	sts	0x2563, r19

  return d;
}
    61ac:	8e 2f       	mov	r24, r30
    61ae:	08 95       	ret

000061b0 <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    61b0:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    61b2:	90 91 1d 25 	lds	r25, 0x251D
  while(txfifo.count >= sizeof(txfifo.buff));
    61b6:	80 91 1f 25 	lds	r24, 0x251F
    61ba:	80 34       	cpi	r24, 0x40	; 64
    61bc:	e0 f7       	brcc	.-8      	; 0x61b6 <uart_put+0x6>
  txfifo.buff[i++] = d;
    61be:	e9 2f       	mov	r30, r25
    61c0:	f0 e0       	ldi	r31, 0x00	; 0
    61c2:	e3 5e       	subi	r30, 0xE3	; 227
    61c4:	fa 4d       	sbci	r31, 0xDA	; 218
    61c6:	23 83       	std	Z+3, r18	; 0x03
    61c8:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    61ca:	f8 94       	cli
  txfifo.count++;
    61cc:	80 91 1f 25 	lds	r24, 0x251F
    61d0:	8f 5f       	subi	r24, 0xFF	; 255
    61d2:	80 93 1f 25 	sts	0x251F, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    61d6:	81 e1       	ldi	r24, 0x11	; 17
    61d8:	e0 ea       	ldi	r30, 0xA0	; 160
    61da:	f8 e0       	ldi	r31, 0x08	; 8
    61dc:	83 83       	std	Z+3, r24	; 0x03

  sei();
    61de:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    61e0:	90 34       	cpi	r25, 0x40	; 64
    61e2:	08 f0       	brcs	.+2      	; 0x61e6 <uart_put+0x36>
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    61e6:	90 93 1d 25 	sts	0x251D, r25
}
    61ea:	08 95       	ret

000061ec <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    61ec:	cf 93       	push	r28
    61ee:	df 93       	push	r29
    61f0:	ec 01       	movw	r28, r24
    61f2:	03 c0       	rjmp	.+6      	; 0x61fa <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    61f4:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <uart_put>
    s++;
    61f8:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    61fa:	fe 01       	movw	r30, r28
    61fc:	84 91       	lpm	r24, Z+
    61fe:	88 23       	and	r24, r24
    6200:	c9 f7       	brne	.-14     	; 0x61f4 <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    6202:	df 91       	pop	r29
    6204:	cf 91       	pop	r28
    6206:	08 95       	ret

00006208 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    6208:	8d e0       	ldi	r24, 0x0D	; 13
    620a:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <uart_put>
  uart_put(LF);
    620e:	8a e0       	ldi	r24, 0x0A	; 10
    6210:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <uart_put>
}
    6214:	08 95       	ret

00006216 <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    6216:	cf 92       	push	r12
    6218:	df 92       	push	r13
    621a:	ff 92       	push	r15
    621c:	0f 93       	push	r16
    621e:	1f 93       	push	r17
    6220:	cf 93       	push	r28
    6222:	df 93       	push	r29
    6224:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6226:	80 91 64 25 	lds	r24, 0x2564
    622a:	90 91 65 25 	lds	r25, 0x2565
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    622e:	89 2b       	or	r24, r25
    6230:	11 f4       	brne	.+4      	; 0x6236 <fill_Rx_buffer+0x20>
    6232:	ff 24       	eor	r15, r15
    6234:	3c c0       	rjmp	.+120    	; 0x62ae <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    6236:	0e 94 ab 30 	call	0x6156	; 0x6156 <uart_get>
    623a:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    623c:	82 e3       	ldi	r24, 0x32	; 50
    623e:	f8 16       	cp	r15, r24
    6240:	29 f0       	breq	.+10     	; 0x624c <fill_Rx_buffer+0x36>
    6242:	c0 e0       	ldi	r28, 0x00	; 0
    6244:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    6246:	0f 2d       	mov	r16, r15
    6248:	10 e0       	ldi	r17, 0x00	; 0
    624a:	2e c0       	rjmp	.+92     	; 0x62a8 <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    624c:	0e 94 ab 30 	call	0x6156	; 0x6156 <uart_get>
    6250:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    6252:	0e 94 ab 30 	call	0x6156	; 0x6156 <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    6256:	38 2f       	mov	r19, r24
    6258:	20 e0       	ldi	r18, 0x00	; 0
    625a:	c9 01       	movw	r24, r18
    625c:	81 0f       	add	r24, r17
    625e:	91 1d       	adc	r25, r1
    6260:	8c 01       	movw	r16, r24
    6262:	c0 e0       	ldi	r28, 0x00	; 0
    6264:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    6266:	09 5f       	subi	r16, 0xF9	; 249
    6268:	1f 4f       	sbci	r17, 0xFF	; 255
    626a:	0d c0       	rjmp	.+26     	; 0x6286 <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    626c:	80 91 64 25 	lds	r24, 0x2564
    6270:	90 91 65 25 	lds	r25, 0x2565

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    6274:	89 2b       	or	r24, r25
    6276:	d1 f3       	breq	.-12     	; 0x626c <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    6278:	0e 94 ab 30 	call	0x6156	; 0x6156 <uart_get>
    627c:	f6 01       	movw	r30, r12
    627e:	ec 0f       	add	r30, r28
    6280:	fd 1f       	adc	r31, r29
    6282:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    6284:	21 96       	adiw	r28, 0x01	; 1
    6286:	c0 17       	cp	r28, r16
    6288:	d1 07       	cpc	r29, r17
    628a:	80 f3       	brcs	.-32     	; 0x626c <fill_Rx_buffer+0x56>
    628c:	10 c0       	rjmp	.+32     	; 0x62ae <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    628e:	80 91 64 25 	lds	r24, 0x2564
    6292:	90 91 65 25 	lds	r25, 0x2565
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    6296:	89 2b       	or	r24, r25
    6298:	d1 f3       	breq	.-12     	; 0x628e <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    629a:	0e 94 ab 30 	call	0x6156	; 0x6156 <uart_get>
    629e:	f6 01       	movw	r30, r12
    62a0:	ec 0f       	add	r30, r28
    62a2:	fd 1f       	adc	r31, r29
    62a4:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    62a6:	21 96       	adiw	r28, 0x01	; 1
    62a8:	c0 17       	cp	r28, r16
    62aa:	d1 07       	cpc	r29, r17
    62ac:	80 f3       	brcs	.-32     	; 0x628e <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    62ae:	8f 2d       	mov	r24, r15
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	1f 91       	pop	r17
    62b8:	0f 91       	pop	r16
    62ba:	ff 90       	pop	r15
    62bc:	df 90       	pop	r13
    62be:	cf 90       	pop	r12
    62c0:	08 95       	ret

000062c2 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    62c2:	ff 92       	push	r15
    62c4:	0f 93       	push	r16
    62c6:	1f 93       	push	r17
    62c8:	cf 93       	push	r28
    62ca:	df 93       	push	r29
    62cc:	18 2f       	mov	r17, r24
    62ce:	09 2f       	mov	r16, r25
    62d0:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    62d2:	86 2f       	mov	r24, r22
    62d4:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <uart_put>
    62d8:	21 2f       	mov	r18, r17
    62da:	30 2f       	mov	r19, r16
    62dc:	c9 01       	movw	r24, r18
    62de:	ec 01       	movw	r28, r24
    62e0:	10 e0       	ldi	r17, 0x00	; 0
    62e2:	04 c0       	rjmp	.+8      	; 0x62ec <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    62e4:	89 91       	ld	r24, Y+
    62e6:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    62ea:	1f 5f       	subi	r17, 0xFF	; 255
    62ec:	1f 15       	cp	r17, r15
    62ee:	d0 f3       	brcs	.-12     	; 0x62e4 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    62f0:	cd b7       	in	r28, 0x3d	; 61
    62f2:	de b7       	in	r29, 0x3e	; 62
    62f4:	e5 e0       	ldi	r30, 0x05	; 5
    62f6:	0c 94 c0 5b 	jmp	0xb780	; 0xb780 <__epilogue_restores__+0x1a>

000062fa <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    62fa:	1f 92       	push	r1
    62fc:	0f 92       	push	r0
    62fe:	0f b6       	in	r0, 0x3f	; 63
    6300:	0f 92       	push	r0
    6302:	08 b6       	in	r0, 0x38	; 56
    6304:	0f 92       	push	r0
    6306:	0b b6       	in	r0, 0x3b	; 59
    6308:	0f 92       	push	r0
    630a:	11 24       	eor	r1, r1
    630c:	18 be       	out	0x38, r1	; 56
    630e:	1b be       	out	0x3b, r1	; 59
    6310:	2f 93       	push	r18
    6312:	3f 93       	push	r19
    6314:	4f 93       	push	r20
    6316:	8f 93       	push	r24
    6318:	9f 93       	push	r25
    631a:	ef 93       	push	r30
    631c:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    631e:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    6322:	20 91 64 25 	lds	r18, 0x2564
    6326:	30 91 65 25 	lds	r19, 0x2565
  if(n < rxfifo.size) {
    632a:	80 91 66 25 	lds	r24, 0x2566
    632e:	90 91 67 25 	lds	r25, 0x2567
    6332:	28 17       	cp	r18, r24
    6334:	39 07       	cpc	r19, r25
    6336:	08 f5       	brcc	.+66     	; 0x637a <__vector_25+0x80>
    rxfifo.count = ++n;
    6338:	2f 5f       	subi	r18, 0xFF	; 255
    633a:	3f 4f       	sbci	r19, 0xFF	; 255
    633c:	20 93 64 25 	sts	0x2564, r18
    6340:	30 93 65 25 	sts	0x2565, r19
    i = rxfifo.idx_w;
    6344:	80 91 60 25 	lds	r24, 0x2560
    6348:	90 91 61 25 	lds	r25, 0x2561
    *(rxfifo.PRxBuff + i++) = d;
    634c:	e0 91 68 25 	lds	r30, 0x2568
    6350:	f0 91 69 25 	lds	r31, 0x2569
    6354:	e8 0f       	add	r30, r24
    6356:	f9 1f       	adc	r31, r25
    6358:	40 83       	st	Z, r20
    635a:	9c 01       	movw	r18, r24
    635c:	2f 5f       	subi	r18, 0xFF	; 255
    635e:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    6360:	80 91 66 25 	lds	r24, 0x2566
    6364:	90 91 67 25 	lds	r25, 0x2567
    6368:	28 17       	cp	r18, r24
    636a:	39 07       	cpc	r19, r25
    636c:	10 f0       	brcs	.+4      	; 0x6372 <__vector_25+0x78>
    636e:	20 e0       	ldi	r18, 0x00	; 0
    6370:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    6372:	20 93 60 25 	sts	0x2560, r18
    6376:	30 93 61 25 	sts	0x2561, r19
  }
}
    637a:	ff 91       	pop	r31
    637c:	ef 91       	pop	r30
    637e:	9f 91       	pop	r25
    6380:	8f 91       	pop	r24
    6382:	4f 91       	pop	r20
    6384:	3f 91       	pop	r19
    6386:	2f 91       	pop	r18
    6388:	0f 90       	pop	r0
    638a:	0b be       	out	0x3b, r0	; 59
    638c:	0f 90       	pop	r0
    638e:	08 be       	out	0x38, r0	; 56
    6390:	0f 90       	pop	r0
    6392:	0f be       	out	0x3f, r0	; 63
    6394:	0f 90       	pop	r0
    6396:	1f 90       	pop	r1
    6398:	18 95       	reti

0000639a <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    639a:	1f 92       	push	r1
    639c:	0f 92       	push	r0
    639e:	0f b6       	in	r0, 0x3f	; 63
    63a0:	0f 92       	push	r0
    63a2:	08 b6       	in	r0, 0x38	; 56
    63a4:	0f 92       	push	r0
    63a6:	0b b6       	in	r0, 0x3b	; 59
    63a8:	0f 92       	push	r0
    63aa:	11 24       	eor	r1, r1
    63ac:	18 be       	out	0x38, r1	; 56
    63ae:	1b be       	out	0x3b, r1	; 59
    63b0:	2f 93       	push	r18
    63b2:	8f 93       	push	r24
    63b4:	9f 93       	push	r25
    63b6:	ef 93       	push	r30
    63b8:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    63ba:	80 91 1f 25 	lds	r24, 0x251F
  if(n) {
    63be:	88 23       	and	r24, r24
    63c0:	a9 f0       	breq	.+42     	; 0x63ec <__vector_26+0x52>
    txfifo.count = --n;
    63c2:	28 2f       	mov	r18, r24
    63c4:	21 50       	subi	r18, 0x01	; 1
    63c6:	20 93 1f 25 	sts	0x251F, r18
    i = txfifo.idx_r;
    63ca:	80 91 1e 25 	lds	r24, 0x251E
    USARTC0.DATA = txfifo.buff[i++];
    63ce:	e8 2f       	mov	r30, r24
    63d0:	f0 e0       	ldi	r31, 0x00	; 0
    63d2:	e3 5e       	subi	r30, 0xE3	; 227
    63d4:	fa 4d       	sbci	r31, 0xDA	; 218
    63d6:	93 81       	ldd	r25, Z+3	; 0x03
    63d8:	90 93 a0 08 	sts	0x08A0, r25
    63dc:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    63de:	80 34       	cpi	r24, 0x40	; 64
    63e0:	08 f0       	brcs	.+2      	; 0x63e4 <__vector_26+0x4a>
    63e2:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    63e4:	80 93 1e 25 	sts	0x251E, r24
  }
  if(n == 0)
    63e8:	22 23       	and	r18, r18
    63ea:	21 f4       	brne	.+8      	; 0x63f4 <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    63ec:	80 e1       	ldi	r24, 0x10	; 16
    63ee:	e0 ea       	ldi	r30, 0xA0	; 160
    63f0:	f8 e0       	ldi	r31, 0x08	; 8
    63f2:	83 83       	std	Z+3, r24	; 0x03
}
    63f4:	ff 91       	pop	r31
    63f6:	ef 91       	pop	r30
    63f8:	9f 91       	pop	r25
    63fa:	8f 91       	pop	r24
    63fc:	2f 91       	pop	r18
    63fe:	0f 90       	pop	r0
    6400:	0b be       	out	0x3b, r0	; 59
    6402:	0f 90       	pop	r0
    6404:	08 be       	out	0x38, r0	; 56
    6406:	0f 90       	pop	r0
    6408:	0f be       	out	0x3f, r0	; 63
    640a:	0f 90       	pop	r0
    640c:	1f 90       	pop	r1
    640e:	18 95       	reti

00006410 <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    6410:	80 91 68 25 	lds	r24, 0x2568
    6414:	90 91 69 25 	lds	r25, 0x2569
    6418:	0e 94 81 5c 	call	0xb902	; 0xb902 <free>

}
    641c:	08 95       	ret

0000641e <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    641e:	8f 3f       	cpi	r24, 0xFF	; 255
    6420:	59 f4       	brne	.+22     	; 0x6438 <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    6422:	80 e4       	ldi	r24, 0x40	; 64
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <malloc>
    642a:	80 93 68 25 	sts	0x2568, r24
    642e:	90 93 69 25 	sts	0x2569, r25
 rxfifo.size = 64;
    6432:	80 e4       	ldi	r24, 0x40	; 64
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	0a c0       	rjmp	.+20     	; 0x644c <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    6438:	8e e0       	ldi	r24, 0x0E	; 14
    643a:	96 e0       	ldi	r25, 0x06	; 6
    643c:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <malloc>
    6440:	80 93 68 25 	sts	0x2568, r24
    6444:	90 93 69 25 	sts	0x2569, r25
 rxfifo.size = 1550;
    6448:	8e e0       	ldi	r24, 0x0E	; 14
    644a:	96 e0       	ldi	r25, 0x06	; 6
    644c:	80 93 66 25 	sts	0x2566, r24
    6450:	90 93 67 25 	sts	0x2567, r25
    6454:	08 95       	ret

00006456 <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    6456:	10 92 df 2b 	sts	0x2BDF, r1
    645a:	10 92 e0 2b 	sts	0x2BE0, r1
    645e:	10 92 e1 2b 	sts	0x2BE1, r1
    6462:	10 92 e2 2b 	sts	0x2BE2, r1
    6466:	10 92 e3 2b 	sts	0x2BE3, r1
    646a:	10 92 e4 2b 	sts	0x2BE4, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    646e:	e0 e0       	ldi	r30, 0x00	; 0
    6470:	fa e0       	ldi	r31, 0x0A	; 10
    6472:	82 e0       	ldi	r24, 0x02	; 2
    6474:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    6476:	8f ef       	ldi	r24, 0xFF	; 255
    6478:	91 e0       	ldi	r25, 0x01	; 1
    647a:	86 a3       	std	Z+38, r24	; 0x26
    647c:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    647e:	83 e0       	ldi	r24, 0x03	; 3
    6480:	86 83       	std	Z+6, r24	; 0x06
}
    6482:	08 95       	ret

00006484 <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    6484:	1f 92       	push	r1
    6486:	0f 92       	push	r0
    6488:	0f b6       	in	r0, 0x3f	; 63
    648a:	0f 92       	push	r0
    648c:	08 b6       	in	r0, 0x38	; 56
    648e:	0f 92       	push	r0
    6490:	09 b6       	in	r0, 0x39	; 57
    6492:	0f 92       	push	r0
    6494:	0a b6       	in	r0, 0x3a	; 58
    6496:	0f 92       	push	r0
    6498:	0b b6       	in	r0, 0x3b	; 59
    649a:	0f 92       	push	r0
    649c:	11 24       	eor	r1, r1
    649e:	18 be       	out	0x38, r1	; 56
    64a0:	19 be       	out	0x39, r1	; 57
    64a2:	1a be       	out	0x3a, r1	; 58
    64a4:	1b be       	out	0x3b, r1	; 59
    64a6:	ef 92       	push	r14
    64a8:	ff 92       	push	r15
    64aa:	0f 93       	push	r16
    64ac:	1f 93       	push	r17
    64ae:	2f 93       	push	r18
    64b0:	3f 93       	push	r19
    64b2:	4f 93       	push	r20
    64b4:	5f 93       	push	r21
    64b6:	6f 93       	push	r22
    64b8:	7f 93       	push	r23
    64ba:	8f 93       	push	r24
    64bc:	9f 93       	push	r25
    64be:	af 93       	push	r26
    64c0:	bf 93       	push	r27
    64c2:	cf 93       	push	r28
    64c4:	df 93       	push	r29
    64c6:	ef 93       	push	r30
    64c8:	ff 93       	push	r31
    64ca:	95 ee       	ldi	r25, 0xE5	; 229
    64cc:	e9 2e       	mov	r14, r25
    64ce:	9b e2       	ldi	r25, 0x2B	; 43
    64d0:	f9 2e       	mov	r15, r25
    64d2:	03 ed       	ldi	r16, 0xD3	; 211
    64d4:	1b e2       	ldi	r17, 0x2B	; 43
    64d6:	c0 e0       	ldi	r28, 0x00	; 0
    64d8:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    64da:	fe 01       	movw	r30, r28
    64dc:	e1 52       	subi	r30, 0x21	; 33
    64de:	f4 4d       	sbci	r31, 0xD4	; 212
    64e0:	80 81       	ld	r24, Z
    64e2:	81 30       	cpi	r24, 0x01	; 1
    64e4:	39 f5       	brne	.+78     	; 0x6534 <__vector_47+0xb0>
     {
       count[lcv]--;			
    64e6:	fe 01       	movw	r30, r28
    64e8:	ee 0f       	add	r30, r30
    64ea:	ff 1f       	adc	r31, r31
    64ec:	ee 0f       	add	r30, r30
    64ee:	ff 1f       	adc	r31, r31
    64f0:	e3 50       	subi	r30, 0x03	; 3
    64f2:	f4 4d       	sbci	r31, 0xD4	; 212
    64f4:	80 81       	ld	r24, Z
    64f6:	91 81       	ldd	r25, Z+1	; 0x01
    64f8:	a2 81       	ldd	r26, Z+2	; 0x02
    64fa:	b3 81       	ldd	r27, Z+3	; 0x03
    64fc:	01 97       	sbiw	r24, 0x01	; 1
    64fe:	a1 09       	sbc	r26, r1
    6500:	b1 09       	sbc	r27, r1
    6502:	80 83       	st	Z, r24
    6504:	91 83       	std	Z+1, r25	; 0x01
    6506:	a2 83       	std	Z+2, r26	; 0x02
    6508:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    650a:	80 81       	ld	r24, Z
    650c:	91 81       	ldd	r25, Z+1	; 0x01
    650e:	a2 81       	ldd	r26, Z+2	; 0x02
    6510:	b3 81       	ldd	r27, Z+3	; 0x03
    6512:	00 97       	sbiw	r24, 0x00	; 0
    6514:	a1 05       	cpc	r26, r1
    6516:	b1 05       	cpc	r27, r1
    6518:	69 f4       	brne	.+26     	; 0x6534 <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    651a:	d7 01       	movw	r26, r14
    651c:	2d 91       	ld	r18, X+
    651e:	3d 91       	ld	r19, X+
    6520:	4d 91       	ld	r20, X+
    6522:	5c 91       	ld	r21, X
    6524:	20 83       	st	Z, r18
    6526:	31 83       	std	Z+1, r19	; 0x01
    6528:	42 83       	std	Z+2, r20	; 0x02
    652a:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    652c:	d8 01       	movw	r26, r16
    652e:	ed 91       	ld	r30, X+
    6530:	fc 91       	ld	r31, X
    6532:	19 95       	eicall
    6534:	21 96       	adiw	r28, 0x01	; 1
    6536:	84 e0       	ldi	r24, 0x04	; 4
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	e8 0e       	add	r14, r24
    653c:	f9 1e       	adc	r15, r25
    653e:	0e 5f       	subi	r16, 0xFE	; 254
    6540:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    6542:	c6 30       	cpi	r28, 0x06	; 6
    6544:	d1 05       	cpc	r29, r1
    6546:	49 f6       	brne	.-110    	; 0x64da <__vector_47+0x56>
     }
   }



}
    6548:	ff 91       	pop	r31
    654a:	ef 91       	pop	r30
    654c:	df 91       	pop	r29
    654e:	cf 91       	pop	r28
    6550:	bf 91       	pop	r27
    6552:	af 91       	pop	r26
    6554:	9f 91       	pop	r25
    6556:	8f 91       	pop	r24
    6558:	7f 91       	pop	r23
    655a:	6f 91       	pop	r22
    655c:	5f 91       	pop	r21
    655e:	4f 91       	pop	r20
    6560:	3f 91       	pop	r19
    6562:	2f 91       	pop	r18
    6564:	1f 91       	pop	r17
    6566:	0f 91       	pop	r16
    6568:	ff 90       	pop	r15
    656a:	ef 90       	pop	r14
    656c:	0f 90       	pop	r0
    656e:	0b be       	out	0x3b, r0	; 59
    6570:	0f 90       	pop	r0
    6572:	0a be       	out	0x3a, r0	; 58
    6574:	0f 90       	pop	r0
    6576:	09 be       	out	0x39, r0	; 57
    6578:	0f 90       	pop	r0
    657a:	08 be       	out	0x38, r0	; 56
    657c:	0f 90       	pop	r0
    657e:	0f be       	out	0x3f, r0	; 63
    6580:	0f 90       	pop	r0
    6582:	1f 90       	pop	r1
    6584:	18 95       	reti

00006586 <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    6586:	0f 93       	push	r16
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    658e:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    6590:	fd 01       	movw	r30, r26
    6592:	ee 0f       	add	r30, r30
    6594:	ff 1f       	adc	r31, r31
    6596:	ed 52       	subi	r30, 0x2D	; 45
    6598:	f4 4d       	sbci	r31, 0xD4	; 212
    659a:	80 83       	st	Z, r24
    659c:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    659e:	fd 01       	movw	r30, r26
    65a0:	ee 0f       	add	r30, r30
    65a2:	ff 1f       	adc	r31, r31
    65a4:	ee 0f       	add	r30, r30
    65a6:	ff 1f       	adc	r31, r31
    65a8:	cf 01       	movw	r24, r30
    65aa:	8b 51       	subi	r24, 0x1B	; 27
    65ac:	94 4d       	sbci	r25, 0xD4	; 212
    65ae:	ec 01       	movw	r28, r24
    65b0:	48 83       	st	Y, r20
    65b2:	59 83       	std	Y+1, r21	; 0x01
    65b4:	6a 83       	std	Y+2, r22	; 0x02
    65b6:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    65b8:	e3 50       	subi	r30, 0x03	; 3
    65ba:	f4 4d       	sbci	r31, 0xD4	; 212
    65bc:	40 83       	st	Z, r20
    65be:	51 83       	std	Z+1, r21	; 0x01
    65c0:	62 83       	std	Z+2, r22	; 0x02
    65c2:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    65c4:	a1 52       	subi	r26, 0x21	; 33
    65c6:	b4 4d       	sbci	r27, 0xD4	; 212
    65c8:	0c 93       	st	X, r16
}
    65ca:	df 91       	pop	r29
    65cc:	cf 91       	pop	r28
    65ce:	0f 91       	pop	r16
    65d0:	08 95       	ret

000065d2 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    65d2:	0f 93       	push	r16
    65d4:	cf 93       	push	r28
    65d6:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    65d8:	c2 2f       	mov	r28, r18
    65da:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    65dc:	fe 01       	movw	r30, r28
    65de:	ee 0f       	add	r30, r30
    65e0:	ff 1f       	adc	r31, r31
    65e2:	ed 52       	subi	r30, 0x2D	; 45
    65e4:	f4 4d       	sbci	r31, 0xD4	; 212
    65e6:	80 83       	st	Z, r24
    65e8:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    65ea:	ce 01       	movw	r24, r28
    65ec:	88 0f       	add	r24, r24
    65ee:	99 1f       	adc	r25, r25
    65f0:	88 0f       	add	r24, r24
    65f2:	99 1f       	adc	r25, r25
    65f4:	fc 01       	movw	r30, r24
    65f6:	eb 51       	subi	r30, 0x1B	; 27
    65f8:	f4 4d       	sbci	r31, 0xD4	; 212
    65fa:	40 83       	st	Z, r20
    65fc:	51 83       	std	Z+1, r21	; 0x01
    65fe:	62 83       	std	Z+2, r22	; 0x02
    6600:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    6602:	fc 01       	movw	r30, r24
    6604:	e3 50       	subi	r30, 0x03	; 3
    6606:	f4 4d       	sbci	r31, 0xD4	; 212
    6608:	80 81       	ld	r24, Z
    660a:	91 81       	ldd	r25, Z+1	; 0x01
    660c:	a2 81       	ldd	r26, Z+2	; 0x02
    660e:	b3 81       	ldd	r27, Z+3	; 0x03
    6610:	48 17       	cp	r20, r24
    6612:	59 07       	cpc	r21, r25
    6614:	6a 07       	cpc	r22, r26
    6616:	7b 07       	cpc	r23, r27
    6618:	20 f4       	brcc	.+8      	; 0x6622 <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    661a:	40 83       	st	Z, r20
    661c:	51 83       	std	Z+1, r21	; 0x01
    661e:	62 83       	std	Z+2, r22	; 0x02
    6620:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    6622:	c1 52       	subi	r28, 0x21	; 33
    6624:	d4 4d       	sbci	r29, 0xD4	; 212
    6626:	08 83       	st	Y, r16
}
    6628:	df 91       	pop	r29
    662a:	cf 91       	pop	r28
    662c:	0f 91       	pop	r16
    662e:	08 95       	ret

00006630 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    6630:	dc 01       	movw	r26, r24
    6632:	fb 01       	movw	r30, r22
	twi->interface = module;
    6634:	6d 93       	st	X+, r22
    6636:	7c 93       	st	X, r23
    6638:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    663a:	48 63       	ori	r20, 0x38	; 56
    663c:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    663e:	ed 91       	ld	r30, X+
    6640:	fc 91       	ld	r31, X
    6642:	11 97       	sbiw	r26, 0x01	; 1
    6644:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    6646:	ed 91       	ld	r30, X+
    6648:	fc 91       	ld	r31, X
    664a:	81 e0       	ldi	r24, 0x01	; 1
    664c:	84 83       	std	Z+4, r24	; 0x04
}
    664e:	08 95       	ret

00006650 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    6650:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    6652:	01 90       	ld	r0, Z+
    6654:	f0 81       	ld	r31, Z
    6656:	e0 2d       	mov	r30, r0
    6658:	24 81       	ldd	r18, Z+4	; 0x04
    665a:	30 e0       	ldi	r19, 0x00	; 0
    665c:	23 70       	andi	r18, 0x03	; 3
    665e:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    6660:	c9 01       	movw	r24, r18
    6662:	08 95       	ret

00006664 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    6664:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    6666:	85 85       	ldd	r24, Z+13	; 0x0d
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	88 23       	and	r24, r24
    666c:	09 f4       	brne	.+2      	; 0x6670 <TWI_MasterReady+0xc>
    666e:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    6670:	89 2f       	mov	r24, r25
    6672:	08 95       	ret

00006674 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    6674:	0f 93       	push	r16
    6676:	cf 93       	push	r28
    6678:	df 93       	push	r29
    667a:	dc 01       	movw	r26, r24
    667c:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    667e:	17 96       	adiw	r26, 0x07	; 7
    6680:	8c 91       	ld	r24, X
    6682:	17 97       	sbiw	r26, 0x07	; 7
    6684:	82 17       	cp	r24, r18
    6686:	08 f4       	brcc	.+2      	; 0x668a <TWI_MasterWriteRead+0x16>
    6688:	48 c0       	rjmp	.+144    	; 0x671a <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    668a:	18 96       	adiw	r26, 0x08	; 8
    668c:	8c 91       	ld	r24, X
    668e:	18 97       	sbiw	r26, 0x08	; 8
    6690:	80 17       	cp	r24, r16
    6692:	08 f4       	brcc	.+2      	; 0x6696 <TWI_MasterWriteRead+0x22>
    6694:	42 c0       	rjmp	.+132    	; 0x671a <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    6696:	1d 96       	adiw	r26, 0x0d	; 13
    6698:	8c 91       	ld	r24, X
    669a:	1d 97       	sbiw	r26, 0x0d	; 13
    669c:	88 23       	and	r24, r24
    669e:	e9 f5       	brne	.+122    	; 0x671a <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    66a0:	81 e0       	ldi	r24, 0x01	; 1
    66a2:	1d 96       	adiw	r26, 0x0d	; 13
    66a4:	8c 93       	st	X, r24
    66a6:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    66a8:	1e 96       	adiw	r26, 0x0e	; 14
    66aa:	1c 92       	st	X, r1
    66ac:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    66ae:	66 0f       	add	r22, r22
    66b0:	12 96       	adiw	r26, 0x02	; 2
    66b2:	6c 93       	st	X, r22
    66b4:	12 97       	sbiw	r26, 0x02	; 2
    66b6:	ea 01       	movw	r28, r20
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	09 c0       	rjmp	.+18     	; 0x66ce <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    66bc:	13 96       	adiw	r26, 0x03	; 3
    66be:	ed 91       	ld	r30, X+
    66c0:	fc 91       	ld	r31, X
    66c2:	14 97       	sbiw	r26, 0x04	; 4
    66c4:	e9 0f       	add	r30, r25
    66c6:	f1 1d       	adc	r31, r1
    66c8:	89 91       	ld	r24, Y+
    66ca:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    66cc:	9f 5f       	subi	r25, 0xFF	; 255
    66ce:	97 17       	cp	r25, r23
    66d0:	a8 f3       	brcs	.-22     	; 0x66bc <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    66d2:	19 96       	adiw	r26, 0x09	; 9
    66d4:	7c 93       	st	X, r23
    66d6:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    66d8:	1a 96       	adiw	r26, 0x0a	; 10
    66da:	0c 93       	st	X, r16
    66dc:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    66de:	1b 96       	adiw	r26, 0x0b	; 11
    66e0:	1c 92       	st	X, r1
    66e2:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    66e4:	1c 96       	adiw	r26, 0x0c	; 12
    66e6:	1c 92       	st	X, r1
    66e8:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    66ea:	19 96       	adiw	r26, 0x09	; 9
    66ec:	8c 91       	ld	r24, X
    66ee:	19 97       	sbiw	r26, 0x09	; 9
    66f0:	88 23       	and	r24, r24
    66f2:	29 f0       	breq	.+10     	; 0x66fe <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    66f4:	12 96       	adiw	r26, 0x02	; 2
    66f6:	8c 91       	ld	r24, X
    66f8:	12 97       	sbiw	r26, 0x02	; 2
    66fa:	8e 7f       	andi	r24, 0xFE	; 254
    66fc:	09 c0       	rjmp	.+18     	; 0x6710 <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    66fe:	1a 96       	adiw	r26, 0x0a	; 10
    6700:	8c 91       	ld	r24, X
    6702:	1a 97       	sbiw	r26, 0x0a	; 10
    6704:	88 23       	and	r24, r24
    6706:	39 f0       	breq	.+14     	; 0x6716 <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    6708:	12 96       	adiw	r26, 0x02	; 2
    670a:	8c 91       	ld	r24, X
    670c:	12 97       	sbiw	r26, 0x02	; 2
    670e:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    6710:	ed 91       	ld	r30, X+
    6712:	fc 91       	ld	r31, X
    6714:	86 83       	std	Z+6, r24	; 0x06
    6716:	81 e0       	ldi	r24, 0x01	; 1
    6718:	01 c0       	rjmp	.+2      	; 0x671c <TWI_MasterWriteRead+0xa8>
    671a:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    671c:	df 91       	pop	r29
    671e:	cf 91       	pop	r28
    6720:	0f 91       	pop	r16
    6722:	08 95       	ret

00006724 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    6724:	0f 93       	push	r16
    6726:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    6728:	40 e0       	ldi	r20, 0x00	; 0
    672a:	50 e0       	ldi	r21, 0x00	; 0
    672c:	20 e0       	ldi	r18, 0x00	; 0
    672e:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
	return twi_status;
}
    6732:	0f 91       	pop	r16
    6734:	08 95       	ret

00006736 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    6736:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    6738:	00 e0       	ldi	r16, 0x00	; 0
    673a:	0e 94 3a 33 	call	0x6674	; 0x6674 <TWI_MasterWriteRead>
	return twi_status;
}
    673e:	0f 91       	pop	r16
    6740:	08 95       	ret

00006742 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    6742:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    6744:	ed 91       	ld	r30, X+
    6746:	fc 91       	ld	r31, X
    6748:	11 97       	sbiw	r26, 0x01	; 1
    674a:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    674c:	92 ff       	sbrs	r25, 2
    674e:	02 c0       	rjmp	.+4      	; 0x6754 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    6750:	84 e0       	ldi	r24, 0x04	; 4
    6752:	01 c0       	rjmp	.+2      	; 0x6756 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    6754:	83 e0       	ldi	r24, 0x03	; 3
    6756:	1e 96       	adiw	r26, 0x0e	; 14
    6758:	8c 93       	st	X, r24
    675a:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    675c:	ed 91       	ld	r30, X+
    675e:	fc 91       	ld	r31, X
    6760:	11 97       	sbiw	r26, 0x01	; 1
    6762:	98 60       	ori	r25, 0x08	; 8
    6764:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    6766:	1d 96       	adiw	r26, 0x0d	; 13
    6768:	1c 92       	st	X, r1
}
    676a:	08 95       	ret

0000676c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    676c:	cf 93       	push	r28
    676e:	df 93       	push	r29
    6770:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    6772:	19 96       	adiw	r26, 0x09	; 9
    6774:	9c 91       	ld	r25, X
    6776:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    6778:	1a 96       	adiw	r26, 0x0a	; 10
    677a:	2c 91       	ld	r18, X
    677c:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    677e:	cd 91       	ld	r28, X+
    6780:	dc 91       	ld	r29, X
    6782:	11 97       	sbiw	r26, 0x01	; 1
    6784:	8c 81       	ldd	r24, Y+4	; 0x04
    6786:	84 ff       	sbrs	r24, 4
    6788:	04 c0       	rjmp	.+8      	; 0x6792 <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    678a:	83 e0       	ldi	r24, 0x03	; 3
    678c:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    678e:	85 e0       	ldi	r24, 0x05	; 5
    6790:	24 c0       	rjmp	.+72     	; 0x67da <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    6792:	1b 96       	adiw	r26, 0x0b	; 11
    6794:	8c 91       	ld	r24, X
    6796:	1b 97       	sbiw	r26, 0x0b	; 11
    6798:	89 17       	cp	r24, r25
    679a:	90 f4       	brcc	.+36     	; 0x67c0 <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    679c:	1b 96       	adiw	r26, 0x0b	; 11
    679e:	8c 91       	ld	r24, X
    67a0:	1b 97       	sbiw	r26, 0x0b	; 11
    67a2:	13 96       	adiw	r26, 0x03	; 3
    67a4:	ed 91       	ld	r30, X+
    67a6:	fc 91       	ld	r31, X
    67a8:	14 97       	sbiw	r26, 0x04	; 4
    67aa:	e8 0f       	add	r30, r24
    67ac:	f1 1d       	adc	r31, r1
    67ae:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    67b0:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    67b2:	1b 96       	adiw	r26, 0x0b	; 11
    67b4:	8c 91       	ld	r24, X
    67b6:	1b 97       	sbiw	r26, 0x0b	; 11
    67b8:	8f 5f       	subi	r24, 0xFF	; 255
    67ba:	1b 96       	adiw	r26, 0x0b	; 11
    67bc:	8c 93       	st	X, r24
    67be:	12 c0       	rjmp	.+36     	; 0x67e4 <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    67c0:	1c 96       	adiw	r26, 0x0c	; 12
    67c2:	8c 91       	ld	r24, X
    67c4:	1c 97       	sbiw	r26, 0x0c	; 12
    67c6:	82 17       	cp	r24, r18
    67c8:	28 f4       	brcc	.+10     	; 0x67d4 <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    67ca:	12 96       	adiw	r26, 0x02	; 2
    67cc:	8c 91       	ld	r24, X
    67ce:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    67d0:	8e 83       	std	Y+6, r24	; 0x06
    67d2:	08 c0       	rjmp	.+16     	; 0x67e4 <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    67d4:	83 e0       	ldi	r24, 0x03	; 3
    67d6:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    67d8:	81 e0       	ldi	r24, 0x01	; 1
    67da:	1e 96       	adiw	r26, 0x0e	; 14
    67dc:	8c 93       	st	X, r24
    67de:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    67e0:	1d 96       	adiw	r26, 0x0d	; 13
    67e2:	1c 92       	st	X, r1
	}
}
    67e4:	df 91       	pop	r29
    67e6:	cf 91       	pop	r28
    67e8:	08 95       	ret

000067ea <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    67ea:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    67ec:	1c 96       	adiw	r26, 0x0c	; 12
    67ee:	9c 91       	ld	r25, X
    67f0:	1c 97       	sbiw	r26, 0x0c	; 12
    67f2:	18 96       	adiw	r26, 0x08	; 8
    67f4:	8c 91       	ld	r24, X
    67f6:	18 97       	sbiw	r26, 0x08	; 8
    67f8:	ed 91       	ld	r30, X+
    67fa:	fc 91       	ld	r31, X
    67fc:	11 97       	sbiw	r26, 0x01	; 1
    67fe:	98 17       	cp	r25, r24
    6800:	98 f4       	brcc	.+38     	; 0x6828 <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    6802:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    6804:	1c 96       	adiw	r26, 0x0c	; 12
    6806:	8c 91       	ld	r24, X
    6808:	1c 97       	sbiw	r26, 0x0c	; 12
    680a:	15 96       	adiw	r26, 0x05	; 5
    680c:	ed 91       	ld	r30, X+
    680e:	fc 91       	ld	r31, X
    6810:	16 97       	sbiw	r26, 0x06	; 6
    6812:	e8 0f       	add	r30, r24
    6814:	f1 1d       	adc	r31, r1
    6816:	90 83       	st	Z, r25
    twi->bytesRead++;
    6818:	1c 96       	adiw	r26, 0x0c	; 12
    681a:	8c 91       	ld	r24, X
    681c:	1c 97       	sbiw	r26, 0x0c	; 12
    681e:	8f 5f       	subi	r24, 0xFF	; 255
    6820:	1c 96       	adiw	r26, 0x0c	; 12
    6822:	8c 93       	st	X, r24
    6824:	1c 97       	sbiw	r26, 0x0c	; 12
    6826:	09 c0       	rjmp	.+18     	; 0x683a <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6828:	83 e0       	ldi	r24, 0x03	; 3
    682a:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    682c:	82 e0       	ldi	r24, 0x02	; 2
    682e:	1e 96       	adiw	r26, 0x0e	; 14
    6830:	8c 93       	st	X, r24
    6832:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6834:	1d 96       	adiw	r26, 0x0d	; 13
    6836:	1c 92       	st	X, r1
    6838:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    683a:	1a 96       	adiw	r26, 0x0a	; 10
    683c:	9c 91       	ld	r25, X
    683e:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    6840:	1c 96       	adiw	r26, 0x0c	; 12
    6842:	8c 91       	ld	r24, X
    6844:	1c 97       	sbiw	r26, 0x0c	; 12
    6846:	ed 91       	ld	r30, X+
    6848:	fc 91       	ld	r31, X
    684a:	11 97       	sbiw	r26, 0x01	; 1
    684c:	89 17       	cp	r24, r25
    684e:	18 f4       	brcc	.+6      	; 0x6856 <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6850:	82 e0       	ldi	r24, 0x02	; 2
    6852:	83 83       	std	Z+3, r24	; 0x03
    6854:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    6856:	87 e0       	ldi	r24, 0x07	; 7
    6858:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    685a:	81 e0       	ldi	r24, 0x01	; 1
    685c:	1e 96       	adiw	r26, 0x0e	; 14
    685e:	8c 93       	st	X, r24
    6860:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6862:	1d 96       	adiw	r26, 0x0d	; 13
    6864:	1c 92       	st	X, r1
    6866:	08 95       	ret

00006868 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    6868:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    686a:	ed 91       	ld	r30, X+
    686c:	fc 91       	ld	r31, X
    686e:	11 97       	sbiw	r26, 0x01	; 1
    6870:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    6872:	24 2f       	mov	r18, r20
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	c9 01       	movw	r24, r18
    6878:	8c 70       	andi	r24, 0x0C	; 12
    687a:	90 70       	andi	r25, 0x00	; 0
    687c:	89 2b       	or	r24, r25
    687e:	21 f0       	breq	.+8      	; 0x6888 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    6880:	cd 01       	movw	r24, r26
    6882:	0e 94 a1 33 	call	0x6742	; 0x6742 <TWI_MasterArbitrationLostBusErrorHandler>
    6886:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    6888:	46 ff       	sbrs	r20, 6
    688a:	04 c0       	rjmp	.+8      	; 0x6894 <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    688c:	cd 01       	movw	r24, r26
    688e:	0e 94 b6 33 	call	0x676c	; 0x676c <TWI_MasterWriteHandler>
    6892:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    6894:	47 ff       	sbrs	r20, 7
    6896:	04 c0       	rjmp	.+8      	; 0x68a0 <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    6898:	cd 01       	movw	r24, r26
    689a:	0e 94 f5 33 	call	0x67ea	; 0x67ea <TWI_MasterReadHandler>
    689e:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    68a0:	86 e0       	ldi	r24, 0x06	; 6
    68a2:	1e 96       	adiw	r26, 0x0e	; 14
    68a4:	8c 93       	st	X, r24
    68a6:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    68a8:	1d 96       	adiw	r26, 0x0d	; 13
    68aa:	1c 92       	st	X, r1
    68ac:	08 95       	ret

000068ae <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    68ae:	0f 93       	push	r16
    68b0:	1f 93       	push	r17
    68b2:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    68b4:	fc 01       	movw	r30, r24
    68b6:	85 81       	ldd	r24, Z+5	; 0x05
    68b8:	96 81       	ldd	r25, Z+6	; 0x06
    68ba:	0e 94 81 5c 	call	0xb902	; 0xb902 <free>
 free(twi->PwriteData);
    68be:	f8 01       	movw	r30, r16
    68c0:	83 81       	ldd	r24, Z+3	; 0x03
    68c2:	94 81       	ldd	r25, Z+4	; 0x04
    68c4:	0e 94 81 5c 	call	0xb902	; 0xb902 <free>
}
    68c8:	1f 91       	pop	r17
    68ca:	0f 91       	pop	r16
    68cc:	08 95       	ret

000068ce <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    68ce:	cf 93       	push	r28
    68d0:	df 93       	push	r29
    68d2:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    68d4:	6f 3f       	cpi	r22, 0xFF	; 255
    68d6:	79 f4       	brne	.+30     	; 0x68f6 <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    68d8:	88 e8       	ldi	r24, 0x88	; 136
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <malloc>
    68e0:	8d 83       	std	Y+5, r24	; 0x05
    68e2:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    68e4:	88 e8       	ldi	r24, 0x88	; 136
    68e6:	90 e0       	ldi	r25, 0x00	; 0
    68e8:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <malloc>
    68ec:	8b 83       	std	Y+3, r24	; 0x03
    68ee:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    68f0:	88 e8       	ldi	r24, 0x88	; 136
    68f2:	8f 83       	std	Y+7, r24	; 0x07
    68f4:	0f c0       	rjmp	.+30     	; 0x6914 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    68f6:	8e e1       	ldi	r24, 0x1E	; 30
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <malloc>
    68fe:	8d 83       	std	Y+5, r24	; 0x05
    6900:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    6902:	82 e3       	ldi	r24, 0x32	; 50
    6904:	90 e0       	ldi	r25, 0x00	; 0
    6906:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <malloc>
    690a:	8b 83       	std	Y+3, r24	; 0x03
    690c:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    690e:	84 e6       	ldi	r24, 0x64	; 100
    6910:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    6912:	82 e3       	ldi	r24, 0x32	; 50
    6914:	88 87       	std	Y+8, r24	; 0x08
 }
}
    6916:	df 91       	pop	r29
    6918:	cf 91       	pop	r28
    691a:	08 95       	ret

0000691c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    691c:	0f 93       	push	r16
    691e:	1f 93       	push	r17
    6920:	cf 93       	push	r28
    6922:	df 93       	push	r29
    6924:	fc 01       	movw	r30, r24
    6926:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    6928:	eb 01       	movw	r28, r22
    692a:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    692c:	86 85       	ldd	r24, Z+14	; 0x0e
    692e:	97 85       	ldd	r25, Z+15	; 0x0f
    6930:	a0 89       	ldd	r26, Z+16	; 0x10
    6932:	b1 89       	ldd	r27, Z+17	; 0x11
    6934:	00 97       	sbiw	r24, 0x00	; 0
    6936:	a1 05       	cpc	r26, r1
    6938:	b1 05       	cpc	r27, r1
    693a:	09 f4       	brne	.+2      	; 0x693e <get_fileinfo+0x22>
    693c:	63 c0       	rjmp	.+198    	; 0x6a04 <get_fileinfo+0xe8>
		dir = dj->dir;
    693e:	22 89       	ldd	r18, Z+18	; 0x12
    6940:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    6942:	d9 01       	movw	r26, r18
    6944:	1c 96       	adiw	r26, 0x0c	; 12
    6946:	9c 91       	ld	r25, X
    6948:	40 e0       	ldi	r20, 0x00	; 0
    694a:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    694c:	69 2f       	mov	r22, r25
    694e:	70 e0       	ldi	r23, 0x00	; 0
    6950:	68 70       	andi	r22, 0x08	; 8
    6952:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    6954:	f9 01       	movw	r30, r18
    6956:	e4 0f       	add	r30, r20
    6958:	f5 1f       	adc	r31, r21
    695a:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    695c:	e0 32       	cpi	r30, 0x20	; 32
    695e:	89 f0       	breq	.+34     	; 0x6982 <get_fileinfo+0x66>
			if (c == 0x05) c = 0xE5;
    6960:	e5 30       	cpi	r30, 0x05	; 5
    6962:	09 f4       	brne	.+2      	; 0x6966 <get_fileinfo+0x4a>
    6964:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    6966:	61 15       	cp	r22, r1
    6968:	71 05       	cpc	r23, r1
    696a:	29 f0       	breq	.+10     	; 0x6976 <get_fileinfo+0x5a>
    696c:	8e 2f       	mov	r24, r30
    696e:	81 54       	subi	r24, 0x41	; 65
    6970:	8a 31       	cpi	r24, 0x1A	; 26
    6972:	08 f4       	brcc	.+2      	; 0x6976 <get_fileinfo+0x5a>
    6974:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    6976:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    6978:	4f 5f       	subi	r20, 0xFF	; 255
    697a:	5f 4f       	sbci	r21, 0xFF	; 255
    697c:	48 30       	cpi	r20, 0x08	; 8
    697e:	51 05       	cpc	r21, r1
    6980:	49 f7       	brne	.-46     	; 0x6954 <get_fileinfo+0x38>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    6982:	f9 01       	movw	r30, r18
    6984:	80 85       	ldd	r24, Z+8	; 0x08
    6986:	80 32       	cpi	r24, 0x20	; 32
    6988:	11 f4       	brne	.+4      	; 0x698e <get_fileinfo+0x72>
    698a:	fe 01       	movw	r30, r28
    698c:	1d c0       	rjmp	.+58     	; 0x69c8 <get_fileinfo+0xac>
			*p++ = '.';
    698e:	fe 01       	movw	r30, r28
    6990:	8e e2       	ldi	r24, 0x2E	; 46
    6992:	81 93       	st	Z+, r24
    6994:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    6996:	49 2f       	mov	r20, r25
    6998:	50 e0       	ldi	r21, 0x00	; 0
    699a:	40 71       	andi	r20, 0x10	; 16
    699c:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    699e:	be 01       	movw	r22, r28
    69a0:	6c 5f       	subi	r22, 0xFC	; 252
    69a2:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    69a4:	18 96       	adiw	r26, 0x08	; 8
    69a6:	9c 91       	ld	r25, X
    69a8:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    69aa:	90 32       	cpi	r25, 0x20	; 32
    69ac:	69 f0       	breq	.+26     	; 0x69c8 <get_fileinfo+0xac>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    69ae:	41 15       	cp	r20, r1
    69b0:	51 05       	cpc	r21, r1
    69b2:	29 f0       	breq	.+10     	; 0x69be <get_fileinfo+0xa2>
    69b4:	89 2f       	mov	r24, r25
    69b6:	81 54       	subi	r24, 0x41	; 65
    69b8:	8a 31       	cpi	r24, 0x1A	; 26
    69ba:	08 f4       	brcc	.+2      	; 0x69be <get_fileinfo+0xa2>
    69bc:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    69be:	91 93       	st	Z+, r25
    69c0:	11 96       	adiw	r26, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    69c2:	e6 17       	cp	r30, r22
    69c4:	f7 07       	cpc	r31, r23
    69c6:	71 f7       	brne	.-36     	; 0x69a4 <get_fileinfo+0x88>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    69c8:	d9 01       	movw	r26, r18
    69ca:	1b 96       	adiw	r26, 0x0b	; 11
    69cc:	8c 91       	ld	r24, X
    69ce:	1b 97       	sbiw	r26, 0x0b	; 11
    69d0:	e8 01       	movw	r28, r16
    69d2:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    69d4:	5c 96       	adiw	r26, 0x1c	; 28
    69d6:	8d 91       	ld	r24, X+
    69d8:	9d 91       	ld	r25, X+
    69da:	0d 90       	ld	r0, X+
    69dc:	bc 91       	ld	r27, X
    69de:	a0 2d       	mov	r26, r0
    69e0:	88 83       	st	Y, r24
    69e2:	99 83       	std	Y+1, r25	; 0x01
    69e4:	aa 83       	std	Y+2, r26	; 0x02
    69e6:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    69e8:	d9 01       	movw	r26, r18
    69ea:	58 96       	adiw	r26, 0x18	; 24
    69ec:	8d 91       	ld	r24, X+
    69ee:	9c 91       	ld	r25, X
    69f0:	59 97       	sbiw	r26, 0x19	; 25
    69f2:	8c 83       	std	Y+4, r24	; 0x04
    69f4:	9d 83       	std	Y+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    69f6:	56 96       	adiw	r26, 0x16	; 22
    69f8:	8d 91       	ld	r24, X+
    69fa:	9c 91       	ld	r25, X
    69fc:	57 97       	sbiw	r26, 0x17	; 23
    69fe:	8e 83       	std	Y+6, r24	; 0x06
    6a00:	9f 83       	std	Y+7, r25	; 0x07
    6a02:	ef 01       	movw	r28, r30
	}
	*p = 0;
    6a04:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    6a06:	df 91       	pop	r29
    6a08:	cf 91       	pop	r28
    6a0a:	1f 91       	pop	r17
    6a0c:	0f 91       	pop	r16
    6a0e:	08 95       	ret

00006a10 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    6a10:	cf 93       	push	r28
    6a12:	df 93       	push	r29
    6a14:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    6a16:	82 30       	cpi	r24, 0x02	; 2
    6a18:	18 f0       	brcs	.+6      	; 0x6a20 <f_mount+0x10>
    6a1a:	2b e0       	ldi	r18, 0x0B	; 11
    6a1c:	30 e0       	ldi	r19, 0x00	; 0
    6a1e:	18 c0       	rjmp	.+48     	; 0x6a50 <f_mount+0x40>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    6a20:	a8 2f       	mov	r26, r24
    6a22:	b0 e0       	ldi	r27, 0x00	; 0
    6a24:	fd 01       	movw	r30, r26
    6a26:	ee 0f       	add	r30, r30
    6a28:	ff 1f       	adc	r31, r31
    6a2a:	e6 59       	subi	r30, 0x96	; 150
    6a2c:	fa 4d       	sbci	r31, 0xDA	; 218
    6a2e:	01 90       	ld	r0, Z+
    6a30:	f0 81       	ld	r31, Z
    6a32:	e0 2d       	mov	r30, r0

	if (rfs) {
    6a34:	30 97       	sbiw	r30, 0x00	; 0
    6a36:	09 f0       	breq	.+2      	; 0x6a3a <f_mount+0x2a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    6a38:	10 82       	st	Z, r1
	}

	if (fs) {
    6a3a:	20 97       	sbiw	r28, 0x00	; 0
    6a3c:	09 f0       	breq	.+2      	; 0x6a40 <f_mount+0x30>
		fs->fs_type = 0;			/* Clear new fs object */
    6a3e:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    6a40:	aa 0f       	add	r26, r26
    6a42:	bb 1f       	adc	r27, r27
    6a44:	a6 59       	subi	r26, 0x96	; 150
    6a46:	ba 4d       	sbci	r27, 0xDA	; 218
    6a48:	cd 93       	st	X+, r28
    6a4a:	dc 93       	st	X, r29
    6a4c:	20 e0       	ldi	r18, 0x00	; 0
    6a4e:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6a50:	c9 01       	movw	r24, r18
    6a52:	df 91       	pop	r29
    6a54:	cf 91       	pop	r28
    6a56:	08 95       	ret

00006a58 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    6a58:	82 30       	cpi	r24, 0x02	; 2
    6a5a:	18 f0       	brcs	.+6      	; 0x6a62 <f_chdrive+0xa>
    6a5c:	2b e0       	ldi	r18, 0x0B	; 11
    6a5e:	30 e0       	ldi	r19, 0x00	; 0
    6a60:	04 c0       	rjmp	.+8      	; 0x6a6a <f_chdrive+0x12>

	Drive = drv;
    6a62:	80 93 70 25 	sts	0x2570, r24
    6a66:	20 e0       	ldi	r18, 0x00	; 0
    6a68:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6a6a:	c9 01       	movw	r24, r18
    6a6c:	08 95       	ret

00006a6e <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6a6e:	a5 e2       	ldi	r26, 0x25	; 37
    6a70:	b0 e0       	ldi	r27, 0x00	; 0
    6a72:	ed e3       	ldi	r30, 0x3D	; 61
    6a74:	f5 e3       	ldi	r31, 0x35	; 53
    6a76:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    6a7a:	38 2e       	mov	r3, r24
    6a7c:	26 2e       	mov	r2, r22
    6a7e:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    6a80:	21 e0       	ldi	r18, 0x01	; 1
    6a82:	28 17       	cp	r18, r24
    6a84:	18 f4       	brcc	.+6      	; 0x6a8c <f_mkfs+0x1e>
    6a86:	2b e0       	ldi	r18, 0x0B	; 11
    6a88:	30 e0       	ldi	r19, 0x00	; 0
    6a8a:	58 c4       	rjmp	.+2224   	; 0x733c <f_mkfs+0x8ce>
	if (partition >= 2) return FR_MKFS_ABORTED;
    6a8c:	31 e0       	ldi	r19, 0x01	; 1
    6a8e:	36 17       	cp	r19, r22
    6a90:	08 f4       	brcc	.+2      	; 0x6a94 <f_mkfs+0x26>
    6a92:	4f c4       	rjmp	.+2206   	; 0x7332 <f_mkfs+0x8c4>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    6a94:	e8 2f       	mov	r30, r24
    6a96:	f0 e0       	ldi	r31, 0x00	; 0
    6a98:	ee 0f       	add	r30, r30
    6a9a:	ff 1f       	adc	r31, r31
    6a9c:	e6 59       	subi	r30, 0x96	; 150
    6a9e:	fa 4d       	sbci	r31, 0xDA	; 218
    6aa0:	80 80       	ld	r8, Z
    6aa2:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    6aa4:	81 14       	cp	r8, r1
    6aa6:	91 04       	cpc	r9, r1
    6aa8:	19 f4       	brne	.+6      	; 0x6ab0 <f_mkfs+0x42>
    6aaa:	2c e0       	ldi	r18, 0x0C	; 12
    6aac:	30 e0       	ldi	r19, 0x00	; 0
    6aae:	46 c4       	rjmp	.+2188   	; 0x733c <f_mkfs+0x8ce>
	fs->fs_type = 0;
    6ab0:	d4 01       	movw	r26, r8
    6ab2:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    6ab4:	0e 94 70 57 	call	0xaee0	; 0xaee0 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    6ab8:	80 ff       	sbrs	r24, 0
    6aba:	03 c0       	rjmp	.+6      	; 0x6ac2 <f_mkfs+0x54>
    6abc:	23 e0       	ldi	r18, 0x03	; 3
    6abe:	30 e0       	ldi	r19, 0x00	; 0
    6ac0:	3d c4       	rjmp	.+2170   	; 0x733c <f_mkfs+0x8ce>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    6ac2:	82 ff       	sbrs	r24, 2
    6ac4:	03 c0       	rjmp	.+6      	; 0x6acc <f_mkfs+0x5e>
    6ac6:	2a e0       	ldi	r18, 0x0A	; 10
    6ac8:	30 e0       	ldi	r19, 0x00	; 0
    6aca:	38 c4       	rjmp	.+2160   	; 0x733c <f_mkfs+0x8ce>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    6acc:	83 2d       	mov	r24, r3
    6ace:	61 e0       	ldi	r22, 0x01	; 1
    6ad0:	ae 01       	movw	r20, r28
    6ad2:	4f 5f       	subi	r20, 0xFF	; 255
    6ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ad6:	0e 94 64 55 	call	0xaac8	; 0xaac8 <disk_ioctl>
    6ada:	89 2b       	or	r24, r25
    6adc:	09 f0       	breq	.+2      	; 0x6ae0 <f_mkfs+0x72>
    6ade:	29 c4       	rjmp	.+2130   	; 0x7332 <f_mkfs+0x8c4>
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	ab 81       	ldd	r26, Y+3	; 0x03
    6ae6:	bc 81       	ldd	r27, Y+4	; 0x04
    6ae8:	80 3d       	cpi	r24, 0xD0	; 208
    6aea:	e7 e0       	ldi	r30, 0x07	; 7
    6aec:	9e 07       	cpc	r25, r30
    6aee:	e0 e0       	ldi	r30, 0x00	; 0
    6af0:	ae 07       	cpc	r26, r30
    6af2:	e0 e0       	ldi	r30, 0x00	; 0
    6af4:	be 07       	cpc	r27, r30
    6af6:	08 f4       	brcc	.+2      	; 0x6afa <f_mkfs+0x8c>
    6af8:	1c c4       	rjmp	.+2104   	; 0x7332 <f_mkfs+0x8c4>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    6afa:	81 50       	subi	r24, 0x01	; 1
    6afc:	90 40       	sbci	r25, 0x00	; 0
    6afe:	a0 4d       	sbci	r26, 0xD0	; 208
    6b00:	b7 40       	sbci	r27, 0x07	; 7
    6b02:	40 f0       	brcs	.+16     	; 0x6b14 <f_mkfs+0xa6>
    6b04:	80 e0       	ldi	r24, 0x00	; 0
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	a0 ed       	ldi	r26, 0xD0	; 208
    6b0a:	b7 e0       	ldi	r27, 0x07	; 7
    6b0c:	89 83       	std	Y+1, r24	; 0x01
    6b0e:	9a 83       	std	Y+2, r25	; 0x02
    6b10:	ab 83       	std	Y+3, r26	; 0x03
    6b12:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    6b14:	22 20       	and	r2, r2
    6b16:	29 f0       	breq	.+10     	; 0x6b22 <f_mkfs+0xb4>
    6b18:	1b 8e       	std	Y+27, r1	; 0x1b
    6b1a:	1c 8e       	std	Y+28, r1	; 0x1c
    6b1c:	1d 8e       	std	Y+29, r1	; 0x1d
    6b1e:	1e 8e       	std	Y+30, r1	; 0x1e
    6b20:	08 c0       	rjmp	.+16     	; 0x6b32 <f_mkfs+0xc4>
    6b22:	2f e3       	ldi	r18, 0x3F	; 63
    6b24:	30 e0       	ldi	r19, 0x00	; 0
    6b26:	40 e0       	ldi	r20, 0x00	; 0
    6b28:	50 e0       	ldi	r21, 0x00	; 0
    6b2a:	2b 8f       	std	Y+27, r18	; 0x1b
    6b2c:	3c 8f       	std	Y+28, r19	; 0x1c
    6b2e:	4d 8f       	std	Y+29, r20	; 0x1d
    6b30:	5e 8f       	std	Y+30, r21	; 0x1e
	n_part -= b_part;
    6b32:	a9 80       	ldd	r10, Y+1	; 0x01
    6b34:	ba 80       	ldd	r11, Y+2	; 0x02
    6b36:	cb 80       	ldd	r12, Y+3	; 0x03
    6b38:	dc 80       	ldd	r13, Y+4	; 0x04
    6b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b3e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6b40:	be 8d       	ldd	r27, Y+30	; 0x1e
    6b42:	a8 1a       	sub	r10, r24
    6b44:	b9 0a       	sbc	r11, r25
    6b46:	ca 0a       	sbc	r12, r26
    6b48:	db 0a       	sbc	r13, r27
    6b4a:	80 e0       	ldi	r24, 0x00	; 0
    6b4c:	92 e0       	ldi	r25, 0x02	; 2
    6b4e:	a0 e0       	ldi	r26, 0x00	; 0
    6b50:	b0 e0       	ldi	r27, 0x00	; 0
    6b52:	20 e0       	ldi	r18, 0x00	; 0
    6b54:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    6b56:	a8 01       	movw	r20, r16
    6b58:	60 e0       	ldi	r22, 0x00	; 0
    6b5a:	70 e0       	ldi	r23, 0x00	; 0
    6b5c:	09 c0       	rjmp	.+18     	; 0x6b70 <f_mkfs+0x102>
    6b5e:	88 0f       	add	r24, r24
    6b60:	99 1f       	adc	r25, r25
    6b62:	aa 1f       	adc	r26, r26
    6b64:	bb 1f       	adc	r27, r27
    6b66:	2f 5f       	subi	r18, 0xFF	; 255
    6b68:	3f 4f       	sbci	r19, 0xFF	; 255
    6b6a:	27 30       	cpi	r18, 0x07	; 7
    6b6c:	31 05       	cpc	r19, r1
    6b6e:	31 f0       	breq	.+12     	; 0x6b7c <f_mkfs+0x10e>
    6b70:	84 17       	cp	r24, r20
    6b72:	95 07       	cpc	r25, r21
    6b74:	a6 07       	cpc	r26, r22
    6b76:	b7 07       	cpc	r27, r23
    6b78:	91 f7       	brne	.-28     	; 0x6b5e <f_mkfs+0xf0>
    6b7a:	05 c0       	rjmp	.+10     	; 0x6b86 <f_mkfs+0x118>
	if (d != allocsize) allocsize = 0;
    6b7c:	84 17       	cp	r24, r20
    6b7e:	95 07       	cpc	r25, r21
    6b80:	a6 07       	cpc	r26, r22
    6b82:	b7 07       	cpc	r27, r23
    6b84:	19 f4       	brne	.+6      	; 0x6b8c <f_mkfs+0x11e>
	if (!allocsize) {					/* Auto selection of cluster size */
    6b86:	01 15       	cp	r16, r1
    6b88:	11 05       	cpc	r17, r1
    6b8a:	11 f5       	brne	.+68     	; 0x6bd0 <f_mkfs+0x162>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    6b8c:	e0 e3       	ldi	r30, 0x30	; 48
    6b8e:	f4 e2       	ldi	r31, 0x24	; 36
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	40 e0       	ldi	r20, 0x00	; 0
    6b96:	50 e0       	ldi	r21, 0x00	; 0
    6b98:	81 91       	ld	r24, Z+
    6b9a:	91 91       	ld	r25, Z+
    6b9c:	a1 91       	ld	r26, Z+
    6b9e:	b1 91       	ld	r27, Z+
    6ba0:	b9 01       	movw	r22, r18
    6ba2:	14 2f       	mov	r17, r20
    6ba4:	05 2f       	mov	r16, r21
    6ba6:	2f 5f       	subi	r18, 0xFF	; 255
    6ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    6baa:	4f 4f       	sbci	r20, 0xFF	; 255
    6bac:	5f 4f       	sbci	r21, 0xFF	; 255
    6bae:	a8 16       	cp	r10, r24
    6bb0:	b9 06       	cpc	r11, r25
    6bb2:	ca 06       	cpc	r12, r26
    6bb4:	db 06       	cpc	r13, r27
    6bb6:	80 f3       	brcs	.-32     	; 0x6b98 <f_mkfs+0x12a>
    6bb8:	cb 01       	movw	r24, r22
    6bba:	6d 83       	std	Y+5, r22	; 0x05
    6bbc:	9e 83       	std	Y+6, r25	; 0x06
    6bbe:	1f 83       	std	Y+7, r17	; 0x07
    6bc0:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    6bc2:	fb 01       	movw	r30, r22
    6bc4:	ee 0f       	add	r30, r30
    6bc6:	ff 1f       	adc	r31, r31
    6bc8:	e6 5e       	subi	r30, 0xE6	; 230
    6bca:	fb 4d       	sbci	r31, 0xDB	; 219
    6bcc:	00 81       	ld	r16, Z
    6bce:	11 81       	ldd	r17, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    6bd0:	92 e0       	ldi	r25, 0x02	; 2
    6bd2:	00 30       	cpi	r16, 0x00	; 0
    6bd4:	19 07       	cpc	r17, r25
    6bd6:	10 f4       	brcc	.+4      	; 0x6bdc <f_mkfs+0x16e>
    6bd8:	00 e0       	ldi	r16, 0x00	; 0
    6bda:	12 e0       	ldi	r17, 0x02	; 2

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    6bdc:	d8 01       	movw	r26, r16
    6bde:	ab 2f       	mov	r26, r27
    6be0:	bb 27       	eor	r27, r27
    6be2:	a6 95       	lsr	r26
    6be4:	ad 8b       	std	Y+21, r26	; 0x15
    6be6:	be 8b       	std	Y+22, r27	; 0x16

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    6be8:	9d 01       	movw	r18, r26
    6bea:	40 e0       	ldi	r20, 0x00	; 0
    6bec:	50 e0       	ldi	r21, 0x00	; 0
    6bee:	29 8b       	std	Y+17, r18	; 0x11
    6bf0:	3a 8b       	std	Y+18, r19	; 0x12
    6bf2:	4b 8b       	std	Y+19, r20	; 0x13
    6bf4:	5c 8b       	std	Y+20, r21	; 0x14
    6bf6:	c6 01       	movw	r24, r12
    6bf8:	b5 01       	movw	r22, r10
    6bfa:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    6bfe:	c9 01       	movw	r24, r18
    6c00:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    6c02:	85 3f       	cpi	r24, 0xF5	; 245
    6c04:	5f e0       	ldi	r21, 0x0F	; 15
    6c06:	95 07       	cpc	r25, r21
    6c08:	50 e0       	ldi	r21, 0x00	; 0
    6c0a:	a5 07       	cpc	r26, r21
    6c0c:	50 e0       	ldi	r21, 0x00	; 0
    6c0e:	b5 07       	cpc	r27, r21
    6c10:	08 f4       	brcc	.+2      	; 0x6c14 <f_mkfs+0x1a6>
    6c12:	99 c3       	rjmp	.+1842   	; 0x7346 <f_mkfs+0x8d8>
    6c14:	22 2d       	mov	r18, r2
    6c16:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    6c18:	85 3f       	cpi	r24, 0xF5	; 245
    6c1a:	ef ef       	ldi	r30, 0xFF	; 255
    6c1c:	9e 07       	cpc	r25, r30
    6c1e:	e0 e0       	ldi	r30, 0x00	; 0
    6c20:	ae 07       	cpc	r26, r30
    6c22:	e0 e0       	ldi	r30, 0x00	; 0
    6c24:	be 07       	cpc	r27, r30
    6c26:	30 f5       	brcc	.+76     	; 0x6c74 <f_mkfs+0x206>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    6c28:	7c 01       	movw	r14, r24
    6c2a:	8d 01       	movw	r16, r26
    6c2c:	ee 0c       	add	r14, r14
    6c2e:	ff 1c       	adc	r15, r15
    6c30:	00 1f       	adc	r16, r16
    6c32:	11 1f       	adc	r17, r17
    6c34:	83 e0       	ldi	r24, 0x03	; 3
    6c36:	92 e0       	ldi	r25, 0x02	; 2
    6c38:	a0 e0       	ldi	r26, 0x00	; 0
    6c3a:	b0 e0       	ldi	r27, 0x00	; 0
    6c3c:	e8 0e       	add	r14, r24
    6c3e:	f9 1e       	adc	r15, r25
    6c40:	0a 1f       	adc	r16, r26
    6c42:	1b 1f       	adc	r17, r27
    6c44:	f9 e0       	ldi	r31, 0x09	; 9
    6c46:	16 95       	lsr	r17
    6c48:	07 95       	ror	r16
    6c4a:	f7 94       	ror	r15
    6c4c:	e7 94       	ror	r14
    6c4e:	fa 95       	dec	r31
    6c50:	d1 f7       	brne	.-12     	; 0x6c46 <f_mkfs+0x1d8>
		n_rsv = 1 + partition;
    6c52:	2f 5f       	subi	r18, 0xFF	; 255
    6c54:	3f 4f       	sbci	r19, 0xFF	; 255
    6c56:	29 01       	movw	r4, r18
    6c58:	66 24       	eor	r6, r6
    6c5a:	57 fc       	sbrc	r5, 7
    6c5c:	60 94       	com	r6
    6c5e:	76 2c       	mov	r7, r6
    6c60:	20 e2       	ldi	r18, 0x20	; 32
    6c62:	30 e0       	ldi	r19, 0x00	; 0
    6c64:	40 e0       	ldi	r20, 0x00	; 0
    6c66:	50 e0       	ldi	r21, 0x00	; 0
    6c68:	2f 8b       	std	Y+23, r18	; 0x17
    6c6a:	38 8f       	std	Y+24, r19	; 0x18
    6c6c:	49 8f       	std	Y+25, r20	; 0x19
    6c6e:	5a 8f       	std	Y+26, r21	; 0x1a
    6c70:	32 e0       	ldi	r19, 0x02	; 2
    6c72:	9c c3       	rjmp	.+1848   	; 0x73ac <f_mkfs+0x93e>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    6c74:	7c 01       	movw	r14, r24
    6c76:	8d 01       	movw	r16, r26
    6c78:	e2 e0       	ldi	r30, 0x02	; 2
    6c7a:	ee 0c       	add	r14, r14
    6c7c:	ff 1c       	adc	r15, r15
    6c7e:	00 1f       	adc	r16, r16
    6c80:	11 1f       	adc	r17, r17
    6c82:	ea 95       	dec	r30
    6c84:	d1 f7       	brne	.-12     	; 0x6c7a <f_mkfs+0x20c>
    6c86:	87 e0       	ldi	r24, 0x07	; 7
    6c88:	92 e0       	ldi	r25, 0x02	; 2
    6c8a:	a0 e0       	ldi	r26, 0x00	; 0
    6c8c:	b0 e0       	ldi	r27, 0x00	; 0
    6c8e:	e8 0e       	add	r14, r24
    6c90:	f9 1e       	adc	r15, r25
    6c92:	0a 1f       	adc	r16, r26
    6c94:	1b 1f       	adc	r17, r27
    6c96:	79 e0       	ldi	r23, 0x09	; 9
    6c98:	16 95       	lsr	r17
    6c9a:	07 95       	ror	r16
    6c9c:	f7 94       	ror	r15
    6c9e:	e7 94       	ror	r14
    6ca0:	7a 95       	dec	r23
    6ca2:	d1 f7       	brne	.-12     	; 0x6c98 <f_mkfs+0x22a>
		n_rsv = 33 - partition;
    6ca4:	81 e2       	ldi	r24, 0x21	; 33
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	82 1b       	sub	r24, r18
    6caa:	93 0b       	sbc	r25, r19
    6cac:	2c 01       	movw	r4, r24
    6cae:	66 24       	eor	r6, r6
    6cb0:	57 fc       	sbrc	r5, 7
    6cb2:	60 94       	com	r6
    6cb4:	76 2c       	mov	r7, r6
    6cb6:	1f 8a       	std	Y+23, r1	; 0x17
    6cb8:	18 8e       	std	Y+24, r1	; 0x18
    6cba:	19 8e       	std	Y+25, r1	; 0x19
    6cbc:	1a 8e       	std	Y+26, r1	; 0x1a
    6cbe:	93 e0       	ldi	r25, 0x03	; 3
    6cc0:	9f 8f       	std	Y+31, r25	; 0x1f
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    6cc2:	a9 82       	std	Y+1, r10	; 0x01
    6cc4:	ba 82       	std	Y+2, r11	; 0x02
    6cc6:	cb 82       	std	Y+3, r12	; 0x03
    6cc8:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    6cca:	83 2d       	mov	r24, r3
    6ccc:	63 e0       	ldi	r22, 0x03	; 3
    6cce:	ae 01       	movw	r20, r28
    6cd0:	4b 5f       	subi	r20, 0xFB	; 251
    6cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    6cd4:	0e 94 64 55 	call	0xaac8	; 0xaac8 <disk_ioctl>
    6cd8:	89 2b       	or	r24, r25
    6cda:	09 f0       	breq	.+2      	; 0x6cde <f_mkfs+0x270>
    6cdc:	2a c3       	rjmp	.+1620   	; 0x7332 <f_mkfs+0x8c4>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    6cde:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6ce0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6ce2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6ce4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6ce6:	24 0d       	add	r18, r4
    6ce8:	35 1d       	adc	r19, r5
    6cea:	46 1d       	adc	r20, r6
    6cec:	57 1d       	adc	r21, r7
    6cee:	2d 87       	std	Y+13, r18	; 0x0d
    6cf0:	3e 87       	std	Y+14, r19	; 0x0e
    6cf2:	4f 87       	std	Y+15, r20	; 0x0f
    6cf4:	58 8b       	std	Y+16, r21	; 0x10
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    6cf6:	2f 89       	ldd	r18, Y+23	; 0x17
    6cf8:	38 8d       	ldd	r19, Y+24	; 0x18
    6cfa:	49 8d       	ldd	r20, Y+25	; 0x19
    6cfc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6cfe:	2e 0d       	add	r18, r14
    6d00:	3f 1d       	adc	r19, r15
    6d02:	40 1f       	adc	r20, r16
    6d04:	51 1f       	adc	r21, r17
    6d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d0a:	af 85       	ldd	r26, Y+15	; 0x0f
    6d0c:	b8 89       	ldd	r27, Y+16	; 0x10
    6d0e:	28 0f       	add	r18, r24
    6d10:	39 1f       	adc	r19, r25
    6d12:	4a 1f       	adc	r20, r26
    6d14:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6d16:	8d 81       	ldd	r24, Y+5	; 0x05
    6d18:	9e 81       	ldd	r25, Y+6	; 0x06
    6d1a:	af 81       	ldd	r26, Y+7	; 0x07
    6d1c:	b8 85       	ldd	r27, Y+8	; 0x08
    6d1e:	5c 01       	movw	r10, r24
    6d20:	6d 01       	movw	r12, r26
    6d22:	08 94       	sec
    6d24:	a1 08       	sbc	r10, r1
    6d26:	b1 08       	sbc	r11, r1
    6d28:	c1 08       	sbc	r12, r1
    6d2a:	d1 08       	sbc	r13, r1
    6d2c:	a2 0e       	add	r10, r18
    6d2e:	b3 1e       	adc	r11, r19
    6d30:	c4 1e       	adc	r12, r20
    6d32:	d5 1e       	adc	r13, r21
    6d34:	b0 95       	com	r27
    6d36:	a0 95       	com	r26
    6d38:	90 95       	com	r25
    6d3a:	81 95       	neg	r24
    6d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d3e:	af 4f       	sbci	r26, 0xFF	; 255
    6d40:	bf 4f       	sbci	r27, 0xFF	; 255
    6d42:	a8 22       	and	r10, r24
    6d44:	b9 22       	and	r11, r25
    6d46:	ca 22       	and	r12, r26
    6d48:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    6d4a:	d8 01       	movw	r26, r16
    6d4c:	c7 01       	movw	r24, r14
    6d4e:	82 1b       	sub	r24, r18
    6d50:	93 0b       	sbc	r25, r19
    6d52:	a4 0b       	sbc	r26, r20
    6d54:	b5 0b       	sbc	r27, r21
    6d56:	8a 0d       	add	r24, r10
    6d58:	9b 1d       	adc	r25, r11
    6d5a:	ac 1d       	adc	r26, r12
    6d5c:	bd 1d       	adc	r27, r13
    6d5e:	89 87       	std	Y+9, r24	; 0x09
    6d60:	9a 87       	std	Y+10, r25	; 0x0a
    6d62:	ab 87       	std	Y+11, r26	; 0x0b
    6d64:	bc 87       	std	Y+12, r27	; 0x0c
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    6d66:	e9 80       	ldd	r14, Y+1	; 0x01
    6d68:	fa 80       	ldd	r15, Y+2	; 0x02
    6d6a:	0b 81       	ldd	r16, Y+3	; 0x03
    6d6c:	1c 81       	ldd	r17, Y+4	; 0x04
    6d6e:	c8 01       	movw	r24, r16
    6d70:	b7 01       	movw	r22, r14
    6d72:	64 19       	sub	r22, r4
    6d74:	75 09       	sbc	r23, r5
    6d76:	86 09       	sbc	r24, r6
    6d78:	97 09       	sbc	r25, r7
    6d7a:	29 85       	ldd	r18, Y+9	; 0x09
    6d7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d7e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d80:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d82:	62 1b       	sub	r22, r18
    6d84:	73 0b       	sbc	r23, r19
    6d86:	84 0b       	sbc	r24, r20
    6d88:	95 0b       	sbc	r25, r21
    6d8a:	2f 89       	ldd	r18, Y+23	; 0x17
    6d8c:	38 8d       	ldd	r19, Y+24	; 0x18
    6d8e:	49 8d       	ldd	r20, Y+25	; 0x19
    6d90:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6d92:	62 1b       	sub	r22, r18
    6d94:	73 0b       	sbc	r23, r19
    6d96:	84 0b       	sbc	r24, r20
    6d98:	95 0b       	sbc	r25, r21
    6d9a:	29 89       	ldd	r18, Y+17	; 0x11
    6d9c:	3a 89       	ldd	r19, Y+18	; 0x12
    6d9e:	4b 89       	ldd	r20, Y+19	; 0x13
    6da0:	5c 89       	ldd	r21, Y+20	; 0x14
    6da2:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    6da6:	2a a3       	std	Y+34, r18	; 0x22
    6da8:	3b a3       	std	Y+35, r19	; 0x23
    6daa:	4c a3       	std	Y+36, r20	; 0x24
    6dac:	5d a3       	std	Y+37, r21	; 0x25
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    6dae:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6db0:	32 30       	cpi	r19, 0x02	; 2
    6db2:	51 f4       	brne	.+20     	; 0x6dc8 <f_mkfs+0x35a>
    6db4:	8a a1       	ldd	r24, Y+34	; 0x22
    6db6:	9b a1       	ldd	r25, Y+35	; 0x23
    6db8:	ac a1       	ldd	r26, Y+36	; 0x24
    6dba:	bd a1       	ldd	r27, Y+37	; 0x25
    6dbc:	85 5f       	subi	r24, 0xF5	; 245
    6dbe:	9f 40       	sbci	r25, 0x0F	; 15
    6dc0:	a0 40       	sbci	r26, 0x00	; 0
    6dc2:	b0 40       	sbci	r27, 0x00	; 0
    6dc4:	70 f4       	brcc	.+28     	; 0x6de2 <f_mkfs+0x374>
    6dc6:	b5 c2       	rjmp	.+1386   	; 0x7332 <f_mkfs+0x8c4>
    6dc8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6dca:	f3 30       	cpi	r31, 0x03	; 3
    6dcc:	51 f4       	brne	.+20     	; 0x6de2 <f_mkfs+0x374>
    6dce:	2a a1       	ldd	r18, Y+34	; 0x22
    6dd0:	3b a1       	ldd	r19, Y+35	; 0x23
    6dd2:	4c a1       	ldd	r20, Y+36	; 0x24
    6dd4:	5d a1       	ldd	r21, Y+37	; 0x25
    6dd6:	25 5f       	subi	r18, 0xF5	; 245
    6dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6dda:	40 40       	sbci	r20, 0x00	; 0
    6ddc:	50 40       	sbci	r21, 0x00	; 0
    6dde:	08 f4       	brcc	.+2      	; 0x6de2 <f_mkfs+0x374>
    6de0:	a8 c2       	rjmp	.+1360   	; 0x7332 <f_mkfs+0x8c4>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6de2:	ad 82       	std	Y+5, r10	; 0x05
    6de4:	be 82       	std	Y+6, r11	; 0x06
    6de6:	cf 82       	std	Y+7, r12	; 0x07
    6de8:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    6dea:	22 20       	and	r2, r2
    6dec:	11 f0       	breq	.+4      	; 0x6df2 <f_mkfs+0x384>
    6dee:	10 ef       	ldi	r17, 0xF0	; 240
    6df0:	85 c0       	rjmp	.+266    	; 0x6efc <f_mkfs+0x48e>
		DWORD n_disk = b_part + n_part;
    6df2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6df4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6df6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6df8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6dfa:	2e 0d       	add	r18, r14
    6dfc:	3f 1d       	adc	r19, r15
    6dfe:	40 1f       	adc	r20, r16
    6e00:	51 1f       	adc	r21, r17

		mem_set(fs->win, 0, SS(fs));
    6e02:	62 e3       	ldi	r22, 0x32	; 50
    6e04:	e6 2e       	mov	r14, r22
    6e06:	f1 2c       	mov	r15, r1
    6e08:	e8 0c       	add	r14, r8
    6e0a:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6e0c:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = (char)val;
    6e0e:	c4 01       	movw	r24, r8
    6e10:	8e 5c       	subi	r24, 0xCE	; 206
    6e12:	9d 4f       	sbci	r25, 0xFD	; 253
    6e14:	01 c0       	rjmp	.+2      	; 0x6e18 <f_mkfs+0x3aa>
    6e16:	11 92       	st	Z+, r1
    6e18:	e8 17       	cp	r30, r24
    6e1a:	f9 07       	cpc	r31, r25
    6e1c:	e1 f7       	brne	.-8      	; 0x6e16 <f_mkfs+0x3a8>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    6e1e:	84 01       	movw	r16, r8
    6e20:	00 51       	subi	r16, 0x10	; 16
    6e22:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    6e24:	80 e8       	ldi	r24, 0x80	; 128
    6e26:	91 e0       	ldi	r25, 0x01	; 1
    6e28:	a1 e0       	ldi	r26, 0x01	; 1
    6e2a:	b0 e0       	ldi	r27, 0x00	; 0
    6e2c:	f8 01       	movw	r30, r16
    6e2e:	80 83       	st	Z, r24
    6e30:	91 83       	std	Z+1, r25	; 0x01
    6e32:	a2 83       	std	Z+2, r26	; 0x02
    6e34:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    6e36:	20 30       	cpi	r18, 0x00	; 0
    6e38:	f4 e0       	ldi	r31, 0x04	; 4
    6e3a:	3f 07       	cpc	r19, r31
    6e3c:	fb ef       	ldi	r31, 0xFB	; 251
    6e3e:	4f 07       	cpc	r20, r31
    6e40:	f0 e0       	ldi	r31, 0x00	; 0
    6e42:	5f 07       	cpc	r21, r31
    6e44:	b0 f4       	brcc	.+44     	; 0x6e72 <f_mkfs+0x404>
			n_disk = n_disk / 63 / 255;
    6e46:	ca 01       	movw	r24, r20
    6e48:	b9 01       	movw	r22, r18
    6e4a:	21 ec       	ldi	r18, 0xC1	; 193
    6e4c:	3e e3       	ldi	r19, 0x3E	; 62
    6e4e:	40 e0       	ldi	r20, 0x00	; 0
    6e50:	50 e0       	ldi	r21, 0x00	; 0
    6e52:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    6e56:	c9 01       	movw	r24, r18
    6e58:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    6e5a:	f8 01       	movw	r30, r16
    6e5c:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    6e5e:	22 e0       	ldi	r18, 0x02	; 2
    6e60:	b6 95       	lsr	r27
    6e62:	a7 95       	ror	r26
    6e64:	97 95       	ror	r25
    6e66:	87 95       	ror	r24
    6e68:	2a 95       	dec	r18
    6e6a:	d1 f7       	brne	.-12     	; 0x6e60 <f_mkfs+0x3f2>
    6e6c:	8f 63       	ori	r24, 0x3F	; 63
    6e6e:	86 83       	std	Z+6, r24	; 0x06
    6e70:	07 c0       	rjmp	.+14     	; 0x6e80 <f_mkfs+0x412>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    6e72:	8f ef       	ldi	r24, 0xFF	; 255
    6e74:	9f ef       	ldi	r25, 0xFF	; 255
    6e76:	d8 01       	movw	r26, r16
    6e78:	16 96       	adiw	r26, 0x06	; 6
    6e7a:	8d 93       	st	X+, r24
    6e7c:	9c 93       	st	X, r25
    6e7e:	17 97       	sbiw	r26, 0x07	; 7
		}
		tbl[5] = 254;
    6e80:	8e ef       	ldi	r24, 0xFE	; 254
    6e82:	f8 01       	movw	r30, r16
    6e84:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    6e86:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6e88:	f3 30       	cpi	r31, 0x03	; 3
    6e8a:	81 f0       	breq	.+32     	; 0x6eac <f_mkfs+0x43e>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    6e8c:	89 81       	ldd	r24, Y+1	; 0x01
    6e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e90:	ab 81       	ldd	r26, Y+3	; 0x03
    6e92:	bc 81       	ldd	r27, Y+4	; 0x04
    6e94:	80 50       	subi	r24, 0x00	; 0
    6e96:	90 40       	sbci	r25, 0x00	; 0
    6e98:	a1 40       	sbci	r26, 0x01	; 1
    6e9a:	b0 40       	sbci	r27, 0x00	; 0
    6e9c:	10 f0       	brcs	.+4      	; 0x6ea2 <f_mkfs+0x434>
    6e9e:	86 e0       	ldi	r24, 0x06	; 6
    6ea0:	01 c0       	rjmp	.+2      	; 0x6ea4 <f_mkfs+0x436>
    6ea2:	84 e0       	ldi	r24, 0x04	; 4
    6ea4:	d8 01       	movw	r26, r16
    6ea6:	14 96       	adiw	r26, 0x04	; 4
    6ea8:	8c 93       	st	X, r24
    6eaa:	03 c0       	rjmp	.+6      	; 0x6eb2 <f_mkfs+0x444>
		else
			tbl[4] = 0x0c;
    6eac:	8c e0       	ldi	r24, 0x0C	; 12
    6eae:	f8 01       	movw	r30, r16
    6eb0:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    6eb2:	8f e3       	ldi	r24, 0x3F	; 63
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	a0 e0       	ldi	r26, 0x00	; 0
    6eb8:	b0 e0       	ldi	r27, 0x00	; 0
    6eba:	f8 01       	movw	r30, r16
    6ebc:	80 87       	std	Z+8, r24	; 0x08
    6ebe:	91 87       	std	Z+9, r25	; 0x09
    6ec0:	a2 87       	std	Z+10, r26	; 0x0a
    6ec2:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    6ec4:	89 81       	ldd	r24, Y+1	; 0x01
    6ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ec8:	ab 81       	ldd	r26, Y+3	; 0x03
    6eca:	bc 81       	ldd	r27, Y+4	; 0x04
    6ecc:	84 87       	std	Z+12, r24	; 0x0c
    6ece:	95 87       	std	Z+13, r25	; 0x0d
    6ed0:	a6 87       	std	Z+14, r26	; 0x0e
    6ed2:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    6ed4:	00 5c       	subi	r16, 0xC0	; 192
    6ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ed8:	85 e5       	ldi	r24, 0x55	; 85
    6eda:	9a ea       	ldi	r25, 0xAA	; 170
    6edc:	d8 01       	movw	r26, r16
    6ede:	8d 93       	st	X+, r24
    6ee0:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    6ee2:	83 2d       	mov	r24, r3
    6ee4:	b7 01       	movw	r22, r14
    6ee6:	20 e0       	ldi	r18, 0x00	; 0
    6ee8:	30 e0       	ldi	r19, 0x00	; 0
    6eea:	40 e0       	ldi	r20, 0x00	; 0
    6eec:	50 e0       	ldi	r21, 0x00	; 0
    6eee:	01 e0       	ldi	r16, 0x01	; 1
    6ef0:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    6ef4:	89 2b       	or	r24, r25
    6ef6:	09 f0       	breq	.+2      	; 0x6efa <f_mkfs+0x48c>
    6ef8:	1f c2       	rjmp	.+1086   	; 0x7338 <f_mkfs+0x8ca>
    6efa:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    6efc:	72 e3       	ldi	r23, 0x32	; 50
    6efe:	e7 2e       	mov	r14, r23
    6f00:	f1 2c       	mov	r15, r1
    6f02:	e8 0c       	add	r14, r8
    6f04:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6f06:	57 01       	movw	r10, r14
    6f08:	f7 01       	movw	r30, r14
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6f0a:	62 e3       	ldi	r22, 0x32	; 50
    6f0c:	c6 2e       	mov	r12, r22
    6f0e:	62 e0       	ldi	r22, 0x02	; 2
    6f10:	d6 2e       	mov	r13, r22
    6f12:	c8 0c       	add	r12, r8
    6f14:	d9 1c       	adc	r13, r9
    6f16:	01 c0       	rjmp	.+2      	; 0x6f1a <f_mkfs+0x4ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6f18:	11 92       	st	Z+, r1
    6f1a:	ec 15       	cp	r30, r12
    6f1c:	fd 05       	cpc	r31, r13
    6f1e:	e1 f7       	brne	.-8      	; 0x6f18 <f_mkfs+0x4aa>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    6f20:	8b ee       	ldi	r24, 0xEB	; 235
    6f22:	9e ef       	ldi	r25, 0xFE	; 254
    6f24:	a0 e9       	ldi	r26, 0x90	; 144
    6f26:	b0 e0       	ldi	r27, 0x00	; 0
    6f28:	f4 01       	movw	r30, r8
    6f2a:	82 ab       	std	Z+50, r24	; 0x32
    6f2c:	93 ab       	std	Z+51, r25	; 0x33
    6f2e:	a4 ab       	std	Z+52, r26	; 0x34
    6f30:	b5 ab       	std	Z+53, r27	; 0x35
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    6f32:	80 e0       	ldi	r24, 0x00	; 0
    6f34:	92 e0       	ldi	r25, 0x02	; 2
    6f36:	d7 01       	movw	r26, r14
    6f38:	1b 96       	adiw	r26, 0x0b	; 11
    6f3a:	8d 93       	st	X+, r24
    6f3c:	9c 93       	st	X, r25
    6f3e:	1c 97       	sbiw	r26, 0x0c	; 12
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    6f40:	2d 88       	ldd	r2, Y+21	; 0x15
    6f42:	27 ae       	std	Z+63, r2	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    6f44:	f7 01       	movw	r30, r14
    6f46:	46 86       	std	Z+14, r4	; 0x0e
    6f48:	57 86       	std	Z+15, r5	; 0x0f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    6f4a:	22 e4       	ldi	r18, 0x42	; 66
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	82 0e       	add	r8, r18
    6f50:	93 1e       	adc	r9, r19
    6f52:	81 e0       	ldi	r24, 0x01	; 1
    6f54:	d4 01       	movw	r26, r8
    6f56:	8c 93       	st	X, r24
    6f58:	ee eb       	ldi	r30, 0xBE	; 190
    6f5a:	ff ef       	ldi	r31, 0xFF	; 255
    6f5c:	8e 0e       	add	r8, r30
    6f5e:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    6f60:	8f 89       	ldd	r24, Y+23	; 0x17
    6f62:	98 8d       	ldd	r25, Y+24	; 0x18
    6f64:	a9 8d       	ldd	r26, Y+25	; 0x19
    6f66:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6f68:	54 e0       	ldi	r21, 0x04	; 4
    6f6a:	88 0f       	add	r24, r24
    6f6c:	99 1f       	adc	r25, r25
    6f6e:	aa 1f       	adc	r26, r26
    6f70:	bb 1f       	adc	r27, r27
    6f72:	5a 95       	dec	r21
    6f74:	d1 f7       	brne	.-12     	; 0x6f6a <f_mkfs+0x4fc>
    6f76:	f7 01       	movw	r30, r14
    6f78:	81 8b       	std	Z+17, r24	; 0x11
    6f7a:	92 8b       	std	Z+18, r25	; 0x12
	if (n_part < 0x10000) {						/* Number of total sectors */
    6f7c:	89 81       	ldd	r24, Y+1	; 0x01
    6f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f80:	ab 81       	ldd	r26, Y+3	; 0x03
    6f82:	bc 81       	ldd	r27, Y+4	; 0x04
    6f84:	80 30       	cpi	r24, 0x00	; 0
    6f86:	f0 e0       	ldi	r31, 0x00	; 0
    6f88:	9f 07       	cpc	r25, r31
    6f8a:	f1 e0       	ldi	r31, 0x01	; 1
    6f8c:	af 07       	cpc	r26, r31
    6f8e:	f0 e0       	ldi	r31, 0x00	; 0
    6f90:	bf 07       	cpc	r27, r31
    6f92:	20 f4       	brcc	.+8      	; 0x6f9c <f_mkfs+0x52e>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    6f94:	f7 01       	movw	r30, r14
    6f96:	83 8b       	std	Z+19, r24	; 0x13
    6f98:	94 8b       	std	Z+20, r25	; 0x14
    6f9a:	05 c0       	rjmp	.+10     	; 0x6fa6 <f_mkfs+0x538>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    6f9c:	f7 01       	movw	r30, r14
    6f9e:	80 a3       	std	Z+32, r24	; 0x20
    6fa0:	91 a3       	std	Z+33, r25	; 0x21
    6fa2:	a2 a3       	std	Z+34, r26	; 0x22
    6fa4:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    6fa6:	27 e4       	ldi	r18, 0x47	; 71
    6fa8:	30 e0       	ldi	r19, 0x00	; 0
    6faa:	82 0e       	add	r8, r18
    6fac:	93 1e       	adc	r9, r19
    6fae:	d4 01       	movw	r26, r8
    6fb0:	1c 93       	st	X, r17
    6fb2:	e9 eb       	ldi	r30, 0xB9	; 185
    6fb4:	ff ef       	ldi	r31, 0xFF	; 255
    6fb6:	8e 0e       	add	r8, r30
    6fb8:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    6fba:	8f e3       	ldi	r24, 0x3F	; 63
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	d7 01       	movw	r26, r14
    6fc0:	58 96       	adiw	r26, 0x18	; 24
    6fc2:	8d 93       	st	X+, r24
    6fc4:	9c 93       	st	X, r25
    6fc6:	59 97       	sbiw	r26, 0x19	; 25
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    6fc8:	8f ef       	ldi	r24, 0xFF	; 255
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	5a 96       	adiw	r26, 0x1a	; 26
    6fce:	8d 93       	st	X+, r24
    6fd0:	9c 93       	st	X, r25
    6fd2:	5b 97       	sbiw	r26, 0x1b	; 27
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    6fd4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6fd6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6fd8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6fda:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6fdc:	5c 96       	adiw	r26, 0x1c	; 28
    6fde:	2d 93       	st	X+, r18
    6fe0:	3d 93       	st	X+, r19
    6fe2:	4d 93       	st	X+, r20
    6fe4:	5c 93       	st	X, r21
    6fe6:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    6fe8:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <get_fattime>
    6fec:	6d 83       	std	Y+5, r22	; 0x05
    6fee:	7e 83       	std	Y+6, r23	; 0x06
    6ff0:	8f 83       	std	Y+7, r24	; 0x07
    6ff2:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    6ff4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6ff6:	b3 30       	cpi	r27, 0x03	; 3
    6ff8:	39 f1       	breq	.+78     	; 0x7048 <f_mkfs+0x5da>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    6ffa:	f7 01       	movw	r30, r14
    6ffc:	67 a3       	std	Z+39, r22	; 0x27
    6ffe:	70 a7       	std	Z+40, r23	; 0x28
    7000:	81 a7       	std	Z+41, r24	; 0x29
    7002:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    7004:	29 85       	ldd	r18, Y+9	; 0x09
    7006:	3a 85       	ldd	r19, Y+10	; 0x0a
    7008:	26 8b       	std	Z+22, r18	; 0x16
    700a:	37 8b       	std	Z+23, r19	; 0x17
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    700c:	46 e5       	ldi	r20, 0x56	; 86
    700e:	50 e0       	ldi	r21, 0x00	; 0
    7010:	84 0e       	add	r8, r20
    7012:	95 1e       	adc	r9, r21
    7014:	80 e8       	ldi	r24, 0x80	; 128
    7016:	d4 01       	movw	r26, r8
    7018:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    701a:	e2 e0       	ldi	r30, 0x02	; 2
    701c:	f0 e0       	ldi	r31, 0x00	; 0
    701e:	8e 0e       	add	r8, r30
    7020:	9f 1e       	adc	r9, r31
    7022:	89 e2       	ldi	r24, 0x29	; 41
    7024:	d4 01       	movw	r26, r8
    7026:	8c 93       	st	X, r24
    7028:	e8 ea       	ldi	r30, 0xA8	; 168
    702a:	ff ef       	ldi	r31, 0xFF	; 255
    702c:	8e 0e       	add	r8, r30
    702e:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    7030:	d7 01       	movw	r26, r14
    7032:	9b 96       	adiw	r26, 0x2b	; 43
    7034:	e7 ee       	ldi	r30, 0xE7	; 231
    7036:	f3 e2       	ldi	r31, 0x23	; 35
    7038:	02 c0       	rjmp	.+4      	; 0x703e <f_mkfs+0x5d0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    703a:	81 91       	ld	r24, Z+
    703c:	8d 93       	st	X+, r24
    703e:	23 e2       	ldi	r18, 0x23	; 35
    7040:	ea 3f       	cpi	r30, 0xFA	; 250
    7042:	f2 07       	cpc	r31, r18
    7044:	d1 f7       	brne	.-12     	; 0x703a <f_mkfs+0x5cc>
    7046:	48 c0       	rjmp	.+144    	; 0x70d8 <f_mkfs+0x66a>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    7048:	43 e4       	ldi	r20, 0x43	; 67
    704a:	50 e0       	ldi	r21, 0x00	; 0
    704c:	e4 0e       	add	r14, r20
    704e:	f5 1e       	adc	r15, r21
    7050:	d7 01       	movw	r26, r14
    7052:	6d 93       	st	X+, r22
    7054:	7d 93       	st	X+, r23
    7056:	8d 93       	st	X+, r24
    7058:	9c 93       	st	X, r25
    705a:	13 97       	sbiw	r26, 0x03	; 3
    705c:	ed eb       	ldi	r30, 0xBD	; 189
    705e:	ff ef       	ldi	r31, 0xFF	; 255
    7060:	ee 0e       	add	r14, r30
    7062:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    7064:	29 85       	ldd	r18, Y+9	; 0x09
    7066:	3a 85       	ldd	r19, Y+10	; 0x0a
    7068:	4b 85       	ldd	r20, Y+11	; 0x0b
    706a:	5c 85       	ldd	r21, Y+12	; 0x0c
    706c:	d7 01       	movw	r26, r14
    706e:	94 96       	adiw	r26, 0x24	; 36
    7070:	2d 93       	st	X+, r18
    7072:	3d 93       	st	X+, r19
    7074:	4d 93       	st	X+, r20
    7076:	5c 93       	st	X, r21
    7078:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    707a:	82 e0       	ldi	r24, 0x02	; 2
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	a0 e0       	ldi	r26, 0x00	; 0
    7080:	b0 e0       	ldi	r27, 0x00	; 0
    7082:	f7 01       	movw	r30, r14
    7084:	84 a7       	std	Z+44, r24	; 0x2c
    7086:	95 a7       	std	Z+45, r25	; 0x2d
    7088:	a6 a7       	std	Z+46, r26	; 0x2e
    708a:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    708c:	81 e0       	ldi	r24, 0x01	; 1
    708e:	90 e0       	ldi	r25, 0x00	; 0
    7090:	80 ab       	std	Z+48, r24	; 0x30
    7092:	91 ab       	std	Z+49, r25	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    7094:	86 e0       	ldi	r24, 0x06	; 6
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	82 ab       	std	Z+50, r24	; 0x32
    709a:	93 ab       	std	Z+51, r25	; 0x33
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    709c:	22 e7       	ldi	r18, 0x72	; 114
    709e:	30 e0       	ldi	r19, 0x00	; 0
    70a0:	82 0e       	add	r8, r18
    70a2:	93 1e       	adc	r9, r19
    70a4:	80 e8       	ldi	r24, 0x80	; 128
    70a6:	d4 01       	movw	r26, r8
    70a8:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    70aa:	e2 e0       	ldi	r30, 0x02	; 2
    70ac:	f0 e0       	ldi	r31, 0x00	; 0
    70ae:	8e 0e       	add	r8, r30
    70b0:	9f 1e       	adc	r9, r31
    70b2:	89 e2       	ldi	r24, 0x29	; 41
    70b4:	d4 01       	movw	r26, r8
    70b6:	8c 93       	st	X, r24
    70b8:	ec e8       	ldi	r30, 0x8C	; 140
    70ba:	ff ef       	ldi	r31, 0xFF	; 255
    70bc:	8e 0e       	add	r8, r30
    70be:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    70c0:	d7 01       	movw	r26, r14
    70c2:	a9 5b       	subi	r26, 0xB9	; 185
    70c4:	bf 4f       	sbci	r27, 0xFF	; 255
    70c6:	eb ef       	ldi	r30, 0xFB	; 251
    70c8:	f3 e2       	ldi	r31, 0x23	; 35
    70ca:	02 c0       	rjmp	.+4      	; 0x70d0 <f_mkfs+0x662>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    70cc:	81 91       	ld	r24, Z+
    70ce:	8d 93       	st	X+, r24
    70d0:	24 e2       	ldi	r18, 0x24	; 36
    70d2:	ee 30       	cpi	r30, 0x0E	; 14
    70d4:	f2 07       	cpc	r31, r18
    70d6:	d1 f7       	brne	.-12     	; 0x70cc <f_mkfs+0x65e>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    70d8:	a7 01       	movw	r20, r14
    70da:	42 50       	subi	r20, 0x02	; 2
    70dc:	5e 4f       	sbci	r21, 0xFE	; 254
    70de:	48 a3       	std	Y+32, r20	; 0x20
    70e0:	59 a3       	std	Y+33, r21	; 0x21
    70e2:	85 e5       	ldi	r24, 0x55	; 85
    70e4:	9a ea       	ldi	r25, 0xAA	; 170
    70e6:	da 01       	movw	r26, r20
    70e8:	8d 93       	st	X+, r24
    70ea:	9c 93       	st	X, r25
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    70ec:	83 2d       	mov	r24, r3
    70ee:	b7 01       	movw	r22, r14
    70f0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    70f2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    70f4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    70f6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    70f8:	01 e0       	ldi	r16, 0x01	; 1
    70fa:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    70fe:	89 2b       	or	r24, r25
    7100:	09 f0       	breq	.+2      	; 0x7104 <f_mkfs+0x696>
    7102:	1a c1       	rjmp	.+564    	; 0x7338 <f_mkfs+0x8ca>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    7104:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7106:	b3 30       	cpi	r27, 0x03	; 3
    7108:	61 f4       	brne	.+24     	; 0x7122 <f_mkfs+0x6b4>
		disk_write(drv, tbl, b_part+6, 1);
    710a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    710c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    710e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    7110:	5e 8d       	ldd	r21, Y+30	; 0x1e
    7112:	2a 5f       	subi	r18, 0xFA	; 250
    7114:	3f 4f       	sbci	r19, 0xFF	; 255
    7116:	4f 4f       	sbci	r20, 0xFF	; 255
    7118:	5f 4f       	sbci	r21, 0xFF	; 255
    711a:	83 2d       	mov	r24, r3
    711c:	b7 01       	movw	r22, r14
    711e:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    7122:	f7 01       	movw	r30, r14
    7124:	01 c0       	rjmp	.+2      	; 0x7128 <f_mkfs+0x6ba>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    7126:	11 92       	st	Z+, r1
    7128:	ec 15       	cp	r30, r12
    712a:	fd 05       	cpc	r31, r13
    712c:	e1 f7       	brne	.-8      	; 0x7126 <f_mkfs+0x6b8>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    712e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7130:	e3 30       	cpi	r30, 0x03	; 3
    7132:	e9 f0       	breq	.+58     	; 0x716e <f_mkfs+0x700>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    7134:	e1 30       	cpi	r30, 0x01	; 1
    7136:	29 f0       	breq	.+10     	; 0x7142 <f_mkfs+0x6d4>
    7138:	20 e0       	ldi	r18, 0x00	; 0
    713a:	3f ef       	ldi	r19, 0xFF	; 255
    713c:	4f ef       	ldi	r20, 0xFF	; 255
    713e:	5f ef       	ldi	r21, 0xFF	; 255
    7140:	04 c0       	rjmp	.+8      	; 0x714a <f_mkfs+0x6dc>
    7142:	20 e0       	ldi	r18, 0x00	; 0
    7144:	3f ef       	ldi	r19, 0xFF	; 255
    7146:	4f ef       	ldi	r20, 0xFF	; 255
    7148:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    714a:	81 2f       	mov	r24, r17
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	a0 e0       	ldi	r26, 0x00	; 0
    7150:	b0 e0       	ldi	r27, 0x00	; 0
    7152:	82 2b       	or	r24, r18
    7154:	93 2b       	or	r25, r19
    7156:	a4 2b       	or	r26, r20
    7158:	b5 2b       	or	r27, r21
    715a:	8d 83       	std	Y+5, r24	; 0x05
    715c:	9e 83       	std	Y+6, r25	; 0x06
    715e:	af 83       	std	Y+7, r26	; 0x07
    7160:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    7162:	f4 01       	movw	r30, r8
    7164:	82 ab       	std	Z+50, r24	; 0x32
    7166:	93 ab       	std	Z+51, r25	; 0x33
    7168:	a4 ab       	std	Z+52, r26	; 0x34
    716a:	b5 ab       	std	Z+53, r27	; 0x35
    716c:	1a c0       	rjmp	.+52     	; 0x71a2 <f_mkfs+0x734>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    716e:	88 ef       	ldi	r24, 0xF8	; 248
    7170:	9f ef       	ldi	r25, 0xFF	; 255
    7172:	af ef       	ldi	r26, 0xFF	; 255
    7174:	bf ef       	ldi	r27, 0xFF	; 255
    7176:	f4 01       	movw	r30, r8
    7178:	82 ab       	std	Z+50, r24	; 0x32
    717a:	93 ab       	std	Z+51, r25	; 0x33
    717c:	a4 ab       	std	Z+52, r26	; 0x34
    717e:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    7180:	8f ef       	ldi	r24, 0xFF	; 255
    7182:	9f ef       	ldi	r25, 0xFF	; 255
    7184:	af ef       	ldi	r26, 0xFF	; 255
    7186:	bf ef       	ldi	r27, 0xFF	; 255
    7188:	f7 01       	movw	r30, r14
    718a:	84 83       	std	Z+4, r24	; 0x04
    718c:	95 83       	std	Z+5, r25	; 0x05
    718e:	a6 83       	std	Z+6, r26	; 0x06
    7190:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    7192:	8f ef       	ldi	r24, 0xFF	; 255
    7194:	9f ef       	ldi	r25, 0xFF	; 255
    7196:	af ef       	ldi	r26, 0xFF	; 255
    7198:	bf e0       	ldi	r27, 0x0F	; 15
    719a:	80 87       	std	Z+8, r24	; 0x08
    719c:	91 87       	std	Z+9, r25	; 0x09
    719e:	a2 87       	std	Z+10, r26	; 0x0a
    71a0:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    71a2:	83 2d       	mov	r24, r3
    71a4:	b7 01       	movw	r22, r14
    71a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    71a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    71aa:	4f 85       	ldd	r20, Y+15	; 0x0f
    71ac:	58 89       	ldd	r21, Y+16	; 0x10
    71ae:	01 e0       	ldi	r16, 0x01	; 1
    71b0:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    71b4:	89 2b       	or	r24, r25
    71b6:	21 f0       	breq	.+8      	; 0x71c0 <f_mkfs+0x752>
    71b8:	bf c0       	rjmp	.+382    	; 0x7338 <f_mkfs+0x8ca>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    71ba:	d5 01       	movw	r26, r10
    71bc:	1d 92       	st	X+, r1
    71be:	5d 01       	movw	r10, r26
    71c0:	ac 14       	cp	r10, r12
    71c2:	bd 04       	cpc	r11, r13
    71c4:	d1 f7       	brne	.-12     	; 0x71ba <f_mkfs+0x74c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    71c6:	ad 84       	ldd	r10, Y+13	; 0x0d
    71c8:	be 84       	ldd	r11, Y+14	; 0x0e
    71ca:	cf 84       	ldd	r12, Y+15	; 0x0f
    71cc:	d8 88       	ldd	r13, Y+16	; 0x10
    71ce:	08 94       	sec
    71d0:	a1 1c       	adc	r10, r1
    71d2:	b1 1c       	adc	r11, r1
    71d4:	c1 1c       	adc	r12, r1
    71d6:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    71d8:	81 e0       	ldi	r24, 0x01	; 1
    71da:	90 e0       	ldi	r25, 0x00	; 0
    71dc:	a0 e0       	ldi	r26, 0x00	; 0
    71de:	b0 e0       	ldi	r27, 0x00	; 0
    71e0:	16 c0       	rjmp	.+44     	; 0x720e <f_mkfs+0x7a0>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    71e2:	83 2d       	mov	r24, r3
    71e4:	b7 01       	movw	r22, r14
    71e6:	a6 01       	movw	r20, r12
    71e8:	95 01       	movw	r18, r10
    71ea:	01 e0       	ldi	r16, 0x01	; 1
    71ec:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    71f0:	89 2b       	or	r24, r25
    71f2:	09 f0       	breq	.+2      	; 0x71f6 <f_mkfs+0x788>
    71f4:	a1 c0       	rjmp	.+322    	; 0x7338 <f_mkfs+0x8ca>
    71f6:	08 94       	sec
    71f8:	a1 1c       	adc	r10, r1
    71fa:	b1 1c       	adc	r11, r1
    71fc:	c1 1c       	adc	r12, r1
    71fe:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    7200:	8d 81       	ldd	r24, Y+5	; 0x05
    7202:	9e 81       	ldd	r25, Y+6	; 0x06
    7204:	af 81       	ldd	r26, Y+7	; 0x07
    7206:	b8 85       	ldd	r27, Y+8	; 0x08
    7208:	01 96       	adiw	r24, 0x01	; 1
    720a:	a1 1d       	adc	r26, r1
    720c:	b1 1d       	adc	r27, r1
    720e:	8d 83       	std	Y+5, r24	; 0x05
    7210:	9e 83       	std	Y+6, r25	; 0x06
    7212:	af 83       	std	Y+7, r26	; 0x07
    7214:	b8 87       	std	Y+8, r27	; 0x08
    7216:	8d 81       	ldd	r24, Y+5	; 0x05
    7218:	9e 81       	ldd	r25, Y+6	; 0x06
    721a:	af 81       	ldd	r26, Y+7	; 0x07
    721c:	b8 85       	ldd	r27, Y+8	; 0x08
    721e:	29 85       	ldd	r18, Y+9	; 0x09
    7220:	3a 85       	ldd	r19, Y+10	; 0x0a
    7222:	4b 85       	ldd	r20, Y+11	; 0x0b
    7224:	5c 85       	ldd	r21, Y+12	; 0x0c
    7226:	82 17       	cp	r24, r18
    7228:	93 07       	cpc	r25, r19
    722a:	a4 07       	cpc	r26, r20
    722c:	b5 07       	cpc	r27, r21
    722e:	c8 f2       	brcs	.-78     	; 0x71e2 <f_mkfs+0x774>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    7230:	3f 8d       	ldd	r19, Y+31	; 0x1f
    7232:	33 30       	cpi	r19, 0x03	; 3
    7234:	09 f0       	breq	.+2      	; 0x7238 <f_mkfs+0x7ca>
    7236:	2f 88       	ldd	r2, Y+23	; 0x17
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    7238:	25 01       	movw	r4, r10
    723a:	36 01       	movw	r6, r12
    723c:	08 94       	sec
    723e:	41 1c       	adc	r4, r1
    7240:	51 1c       	adc	r5, r1
    7242:	61 1c       	adc	r6, r1
    7244:	71 1c       	adc	r7, r1
    7246:	83 2d       	mov	r24, r3
    7248:	b7 01       	movw	r22, r14
    724a:	a6 01       	movw	r20, r12
    724c:	95 01       	movw	r18, r10
    724e:	01 e0       	ldi	r16, 0x01	; 1
    7250:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    7254:	89 2b       	or	r24, r25
    7256:	09 f0       	breq	.+2      	; 0x725a <f_mkfs+0x7ec>
    7258:	6f c0       	rjmp	.+222    	; 0x7338 <f_mkfs+0x8ca>
			return FR_DISK_ERR;
	} while (--m);
    725a:	2a 94       	dec	r2
    725c:	19 f0       	breq	.+6      	; 0x7264 <f_mkfs+0x7f6>
    725e:	63 01       	movw	r12, r6
    7260:	52 01       	movw	r10, r4
    7262:	ea cf       	rjmp	.-44     	; 0x7238 <f_mkfs+0x7ca>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    7264:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7266:	43 30       	cpi	r20, 0x03	; 3
    7268:	09 f0       	breq	.+2      	; 0x726c <f_mkfs+0x7fe>
    726a:	57 c0       	rjmp	.+174    	; 0x731a <f_mkfs+0x8ac>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    726c:	85 e5       	ldi	r24, 0x55	; 85
    726e:	9a ea       	ldi	r25, 0xAA	; 170
    7270:	a8 a1       	ldd	r26, Y+32	; 0x20
    7272:	b9 a1       	ldd	r27, Y+33	; 0x21
    7274:	8d 93       	st	X+, r24
    7276:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    7278:	82 e5       	ldi	r24, 0x52	; 82
    727a:	92 e5       	ldi	r25, 0x52	; 82
    727c:	a1 e6       	ldi	r26, 0x61	; 97
    727e:	b1 e4       	ldi	r27, 0x41	; 65
    7280:	f4 01       	movw	r30, r8
    7282:	82 ab       	std	Z+50, r24	; 0x32
    7284:	93 ab       	std	Z+51, r25	; 0x33
    7286:	a4 ab       	std	Z+52, r26	; 0x34
    7288:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    728a:	24 ee       	ldi	r18, 0xE4	; 228
    728c:	31 e0       	ldi	r19, 0x01	; 1
    728e:	e2 0e       	add	r14, r18
    7290:	f3 1e       	adc	r15, r19
    7292:	82 e7       	ldi	r24, 0x72	; 114
    7294:	92 e7       	ldi	r25, 0x72	; 114
    7296:	a1 e4       	ldi	r26, 0x41	; 65
    7298:	b1 e6       	ldi	r27, 0x61	; 97
    729a:	f7 01       	movw	r30, r14
    729c:	81 93       	st	Z+, r24
    729e:	91 93       	st	Z+, r25
    72a0:	a1 93       	st	Z+, r26
    72a2:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    72a4:	2a a1       	ldd	r18, Y+34	; 0x22
    72a6:	3b a1       	ldd	r19, Y+35	; 0x23
    72a8:	4c a1       	ldd	r20, Y+36	; 0x24
    72aa:	5d a1       	ldd	r21, Y+37	; 0x25
    72ac:	21 50       	subi	r18, 0x01	; 1
    72ae:	30 40       	sbci	r19, 0x00	; 0
    72b0:	40 40       	sbci	r20, 0x00	; 0
    72b2:	50 40       	sbci	r21, 0x00	; 0
    72b4:	df 01       	movw	r26, r30
    72b6:	2d 93       	st	X+, r18
    72b8:	3d 93       	st	X+, r19
    72ba:	4d 93       	st	X+, r20
    72bc:	5d 93       	st	X+, r21
    72be:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    72c0:	8f ef       	ldi	r24, 0xFF	; 255
    72c2:	9f ef       	ldi	r25, 0xFF	; 255
    72c4:	af ef       	ldi	r26, 0xFF	; 255
    72c6:	bf ef       	ldi	r27, 0xFF	; 255
    72c8:	f7 01       	movw	r30, r14
    72ca:	80 83       	st	Z, r24
    72cc:	91 83       	std	Z+1, r25	; 0x01
    72ce:	a2 83       	std	Z+2, r26	; 0x02
    72d0:	b3 83       	std	Z+3, r27	; 0x03
    72d2:	24 e1       	ldi	r18, 0x14	; 20
    72d4:	3e ef       	ldi	r19, 0xFE	; 254
    72d6:	e2 0e       	add	r14, r18
    72d8:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    72da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72de:	ad 8d       	ldd	r26, Y+29	; 0x1d
    72e0:	be 8d       	ldd	r27, Y+30	; 0x1e
    72e2:	01 96       	adiw	r24, 0x01	; 1
    72e4:	a1 1d       	adc	r26, r1
    72e6:	b1 1d       	adc	r27, r1
    72e8:	8b 8f       	std	Y+27, r24	; 0x1b
    72ea:	9c 8f       	std	Y+28, r25	; 0x1c
    72ec:	ad 8f       	std	Y+29, r26	; 0x1d
    72ee:	be 8f       	std	Y+30, r27	; 0x1e
    72f0:	83 2d       	mov	r24, r3
    72f2:	b7 01       	movw	r22, r14
    72f4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    72f6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    72f8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    72fa:	5e 8d       	ldd	r21, Y+30	; 0x1e
    72fc:	01 e0       	ldi	r16, 0x01	; 1
    72fe:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    7302:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7304:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7306:	4d 8d       	ldd	r20, Y+29	; 0x1d
    7308:	5e 8d       	ldd	r21, Y+30	; 0x1e
    730a:	2a 5f       	subi	r18, 0xFA	; 250
    730c:	3f 4f       	sbci	r19, 0xFF	; 255
    730e:	4f 4f       	sbci	r20, 0xFF	; 255
    7310:	5f 4f       	sbci	r21, 0xFF	; 255
    7312:	83 2d       	mov	r24, r3
    7314:	b7 01       	movw	r22, r14
    7316:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    731a:	83 2d       	mov	r24, r3
    731c:	60 e0       	ldi	r22, 0x00	; 0
    731e:	40 e0       	ldi	r20, 0x00	; 0
    7320:	50 e0       	ldi	r21, 0x00	; 0
    7322:	0e 94 64 55 	call	0xaac8	; 0xaac8 <disk_ioctl>
    7326:	00 97       	sbiw	r24, 0x00	; 0
    7328:	11 f0       	breq	.+4      	; 0x732e <f_mkfs+0x8c0>
    732a:	81 e0       	ldi	r24, 0x01	; 1
    732c:	90 e0       	ldi	r25, 0x00	; 0
    732e:	9c 01       	movw	r18, r24
    7330:	05 c0       	rjmp	.+10     	; 0x733c <f_mkfs+0x8ce>
    7332:	2e e0       	ldi	r18, 0x0E	; 14
    7334:	30 e0       	ldi	r19, 0x00	; 0
    7336:	02 c0       	rjmp	.+4      	; 0x733c <f_mkfs+0x8ce>
    7338:	21 e0       	ldi	r18, 0x01	; 1
    733a:	30 e0       	ldi	r19, 0x00	; 0
}
    733c:	c9 01       	movw	r24, r18
    733e:	a5 96       	adiw	r28, 0x25	; 37
    7340:	e2 e1       	ldi	r30, 0x12	; 18
    7342:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    7346:	7c 01       	movw	r14, r24
    7348:	8d 01       	movw	r16, r26
    734a:	ee 0c       	add	r14, r14
    734c:	ff 1c       	adc	r15, r15
    734e:	00 1f       	adc	r16, r16
    7350:	11 1f       	adc	r17, r17
    7352:	e8 0e       	add	r14, r24
    7354:	f9 1e       	adc	r15, r25
    7356:	0a 1f       	adc	r16, r26
    7358:	1b 1f       	adc	r17, r27
    735a:	08 94       	sec
    735c:	e1 1c       	adc	r14, r1
    735e:	f1 1c       	adc	r15, r1
    7360:	01 1d       	adc	r16, r1
    7362:	11 1d       	adc	r17, r1
    7364:	16 95       	lsr	r17
    7366:	07 95       	ror	r16
    7368:	f7 94       	ror	r15
    736a:	e7 94       	ror	r14
    736c:	82 e0       	ldi	r24, 0x02	; 2
    736e:	92 e0       	ldi	r25, 0x02	; 2
    7370:	a0 e0       	ldi	r26, 0x00	; 0
    7372:	b0 e0       	ldi	r27, 0x00	; 0
    7374:	e8 0e       	add	r14, r24
    7376:	f9 1e       	adc	r15, r25
    7378:	0a 1f       	adc	r16, r26
    737a:	1b 1f       	adc	r17, r27
    737c:	29 e0       	ldi	r18, 0x09	; 9
    737e:	16 95       	lsr	r17
    7380:	07 95       	ror	r16
    7382:	f7 94       	ror	r15
    7384:	e7 94       	ror	r14
    7386:	2a 95       	dec	r18
    7388:	d1 f7       	brne	.-12     	; 0x737e <f_mkfs+0x910>
		n_rsv = 1 + partition;
    738a:	82 2d       	mov	r24, r2
    738c:	90 e0       	ldi	r25, 0x00	; 0
    738e:	01 96       	adiw	r24, 0x01	; 1
    7390:	2c 01       	movw	r4, r24
    7392:	66 24       	eor	r6, r6
    7394:	57 fc       	sbrc	r5, 7
    7396:	60 94       	com	r6
    7398:	76 2c       	mov	r7, r6
    739a:	20 e2       	ldi	r18, 0x20	; 32
    739c:	30 e0       	ldi	r19, 0x00	; 0
    739e:	40 e0       	ldi	r20, 0x00	; 0
    73a0:	50 e0       	ldi	r21, 0x00	; 0
    73a2:	2f 8b       	std	Y+23, r18	; 0x17
    73a4:	38 8f       	std	Y+24, r19	; 0x18
    73a6:	49 8f       	std	Y+25, r20	; 0x19
    73a8:	5a 8f       	std	Y+26, r21	; 0x1a
    73aa:	31 e0       	ldi	r19, 0x01	; 1
    73ac:	3f 8f       	std	Y+31, r19	; 0x1f
    73ae:	89 cc       	rjmp	.-1774   	; 0x6cc2 <f_mkfs+0x254>

000073b0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    73b0:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    73b2:	00 97       	sbiw	r24, 0x00	; 0
    73b4:	99 f0       	breq	.+38     	; 0x73dc <validate+0x2c>
    73b6:	80 81       	ld	r24, Z
    73b8:	88 23       	and	r24, r24
    73ba:	81 f0       	breq	.+32     	; 0x73dc <validate+0x2c>
    73bc:	85 81       	ldd	r24, Z+5	; 0x05
    73be:	96 81       	ldd	r25, Z+6	; 0x06
    73c0:	86 17       	cp	r24, r22
    73c2:	97 07       	cpc	r25, r23
    73c4:	59 f4       	brne	.+22     	; 0x73dc <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    73c6:	81 81       	ldd	r24, Z+1	; 0x01
    73c8:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <disk_status>
    73cc:	80 fd       	sbrc	r24, 0
    73ce:	03 c0       	rjmp	.+6      	; 0x73d6 <validate+0x26>
    73d0:	20 e0       	ldi	r18, 0x00	; 0
    73d2:	30 e0       	ldi	r19, 0x00	; 0
    73d4:	05 c0       	rjmp	.+10     	; 0x73e0 <validate+0x30>
    73d6:	23 e0       	ldi	r18, 0x03	; 3
    73d8:	30 e0       	ldi	r19, 0x00	; 0
    73da:	02 c0       	rjmp	.+4      	; 0x73e0 <validate+0x30>
    73dc:	29 e0       	ldi	r18, 0x09	; 9
    73de:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    73e0:	c9 01       	movw	r24, r18
    73e2:	08 95       	ret

000073e4 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    73e4:	0f 93       	push	r16
    73e6:	cf 93       	push	r28
    73e8:	df 93       	push	r29
    73ea:	ec 01       	movw	r28, r24
    73ec:	9a 01       	movw	r18, r20
    73ee:	ab 01       	movw	r20, r22
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    73f0:	bc 01       	movw	r22, r24
    73f2:	6e 5c       	subi	r22, 0xCE	; 206
    73f4:	7f 4f       	sbci	r23, 0xFF	; 255
    73f6:	89 81       	ldd	r24, Y+1	; 0x01
    73f8:	01 e0       	ldi	r16, 0x01	; 1
    73fa:	0e 94 81 54 	call	0xa902	; 0xa902 <disk_read>
    73fe:	89 2b       	or	r24, r25
    7400:	11 f0       	breq	.+4      	; 0x7406 <check_fs+0x22>
    7402:	23 e0       	ldi	r18, 0x03	; 3
    7404:	37 c0       	rjmp	.+110    	; 0x7474 <check_fs+0x90>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    7406:	c0 5d       	subi	r28, 0xD0	; 208
    7408:	dd 4f       	sbci	r29, 0xFD	; 253
    740a:	88 81       	ld	r24, Y
    740c:	99 81       	ldd	r25, Y+1	; 0x01
    740e:	c0 53       	subi	r28, 0x30	; 48
    7410:	d2 40       	sbci	r29, 0x02	; 2
    7412:	85 55       	subi	r24, 0x55	; 85
    7414:	9a 4a       	sbci	r25, 0xAA	; 170
    7416:	11 f0       	breq	.+4      	; 0x741c <check_fs+0x38>
    7418:	22 e0       	ldi	r18, 0x02	; 2
    741a:	2c c0       	rjmp	.+88     	; 0x7474 <check_fs+0x90>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    741c:	de 01       	movw	r26, r28
    741e:	a8 59       	subi	r26, 0x98	; 152
    7420:	bf 4f       	sbci	r27, 0xFF	; 255
    7422:	ec e5       	ldi	r30, 0x5C	; 92
    7424:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7426:	84 e2       	ldi	r24, 0x24	; 36
    7428:	ef 35       	cpi	r30, 0x5F	; 95
    742a:	f8 07       	cpc	r31, r24
    742c:	11 f4       	brne	.+4      	; 0x7432 <check_fs+0x4e>
    742e:	20 e0       	ldi	r18, 0x00	; 0
    7430:	21 c0       	rjmp	.+66     	; 0x7474 <check_fs+0x90>
    7432:	9c 91       	ld	r25, X
    7434:	80 81       	ld	r24, Z
    7436:	98 17       	cp	r25, r24
    7438:	19 f4       	brne	.+6      	; 0x7440 <check_fs+0x5c>
    743a:	11 96       	adiw	r26, 0x01	; 1
    743c:	31 96       	adiw	r30, 0x01	; 1
    743e:	f3 cf       	rjmp	.-26     	; 0x7426 <check_fs+0x42>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    7440:	de 01       	movw	r26, r28
    7442:	ac 57       	subi	r26, 0x7C	; 124
    7444:	bf 4f       	sbci	r27, 0xFF	; 255
    7446:	ec e5       	ldi	r30, 0x5C	; 92
    7448:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    744a:	24 e2       	ldi	r18, 0x24	; 36
    744c:	ef 35       	cpi	r30, 0x5F	; 95
    744e:	f2 07       	cpc	r31, r18
    7450:	49 f0       	breq	.+18     	; 0x7464 <check_fs+0x80>
    7452:	9c 91       	ld	r25, X
    7454:	80 81       	ld	r24, Z
    7456:	98 17       	cp	r25, r24
    7458:	11 f0       	breq	.+4      	; 0x745e <check_fs+0x7a>
    745a:	21 e0       	ldi	r18, 0x01	; 1
    745c:	0b c0       	rjmp	.+22     	; 0x7474 <check_fs+0x90>
    745e:	11 96       	adiw	r26, 0x01	; 1
    7460:	31 96       	adiw	r30, 0x01	; 1
    7462:	f3 cf       	rjmp	.-26     	; 0x744a <check_fs+0x66>
    7464:	20 e0       	ldi	r18, 0x00	; 0
    7466:	c6 5a       	subi	r28, 0xA6	; 166
    7468:	df 4f       	sbci	r29, 0xFF	; 255
    746a:	88 81       	ld	r24, Y
    746c:	87 ff       	sbrs	r24, 7
    746e:	21 e0       	ldi	r18, 0x01	; 1
    7470:	81 e0       	ldi	r24, 0x01	; 1
    7472:	28 27       	eor	r18, r24
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
}
    7474:	82 2f       	mov	r24, r18
    7476:	df 91       	pop	r29
    7478:	cf 91       	pop	r28
    747a:	0f 91       	pop	r16
    747c:	08 95       	ret

0000747e <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    747e:	a0 e0       	ldi	r26, 0x00	; 0
    7480:	b0 e0       	ldi	r27, 0x00	; 0
    7482:	e5 e4       	ldi	r30, 0x45	; 69
    7484:	fa e3       	ldi	r31, 0x3A	; 58
    7486:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <__prologue_saves__+0x8>
    748a:	fc 01       	movw	r30, r24
    748c:	9b 01       	movw	r18, r22
    748e:	f4 2e       	mov	r15, r20
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    7490:	a0 81       	ld	r26, Z
    7492:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    7494:	8c 91       	ld	r24, X
    7496:	08 2f       	mov	r16, r24
    7498:	11 27       	eor	r17, r17
    749a:	07 fd       	sbrc	r16, 7
    749c:	10 95       	com	r17
    749e:	00 53       	subi	r16, 0x30	; 48
    74a0:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    74a2:	0a 30       	cpi	r16, 0x0A	; 10
    74a4:	11 05       	cpc	r17, r1
    74a6:	48 f4       	brcc	.+18     	; 0x74ba <auto_mount+0x3c>
    74a8:	11 96       	adiw	r26, 0x01	; 1
    74aa:	8c 91       	ld	r24, X
    74ac:	11 97       	sbiw	r26, 0x01	; 1
    74ae:	8a 33       	cpi	r24, 0x3A	; 58
    74b0:	21 f4       	brne	.+8      	; 0x74ba <auto_mount+0x3c>
		p += 2; *path = p;			/* Return pointer to the path name */
    74b2:	12 96       	adiw	r26, 0x02	; 2
    74b4:	a0 83       	st	Z, r26
    74b6:	b1 83       	std	Z+1, r27	; 0x01
    74b8:	04 c0       	rjmp	.+8      	; 0x74c2 <auto_mount+0x44>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    74ba:	80 91 70 25 	lds	r24, 0x2570
    74be:	08 2f       	mov	r16, r24
    74c0:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    74c2:	02 30       	cpi	r16, 0x02	; 2
    74c4:	11 05       	cpc	r17, r1
    74c6:	18 f0       	brcs	.+6      	; 0x74ce <auto_mount+0x50>
    74c8:	2b e0       	ldi	r18, 0x0B	; 11
    74ca:	30 e0       	ldi	r19, 0x00	; 0
    74cc:	84 c1       	rjmp	.+776    	; 0x77d6 <auto_mount+0x358>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    74ce:	f8 01       	movw	r30, r16
    74d0:	ee 0f       	add	r30, r30
    74d2:	ff 1f       	adc	r31, r31
    74d4:	e6 59       	subi	r30, 0x96	; 150
    74d6:	fa 4d       	sbci	r31, 0xDA	; 218
    74d8:	c0 81       	ld	r28, Z
    74da:	d1 81       	ldd	r29, Z+1	; 0x01
    74dc:	f9 01       	movw	r30, r18
    74de:	c0 83       	st	Z, r28
    74e0:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
    74e2:	20 97       	sbiw	r28, 0x00	; 0
    74e4:	19 f4       	brne	.+6      	; 0x74ec <auto_mount+0x6e>
    74e6:	2c e0       	ldi	r18, 0x0C	; 12
    74e8:	30 e0       	ldi	r19, 0x00	; 0
    74ea:	75 c1       	rjmp	.+746    	; 0x77d6 <auto_mount+0x358>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    74ec:	88 81       	ld	r24, Y
    74ee:	88 23       	and	r24, r24
    74f0:	59 f0       	breq	.+22     	; 0x7508 <auto_mount+0x8a>
		stat = disk_status(fs->drive);
    74f2:	89 81       	ldd	r24, Y+1	; 0x01
    74f4:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    74f8:	80 fd       	sbrc	r24, 0
    74fa:	06 c0       	rjmp	.+12     	; 0x7508 <auto_mount+0x8a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    74fc:	ff 20       	and	r15, r15
    74fe:	09 f4       	brne	.+2      	; 0x7502 <auto_mount+0x84>
    7500:	65 c1       	rjmp	.+714    	; 0x77cc <auto_mount+0x34e>
    7502:	82 fd       	sbrc	r24, 2
    7504:	60 c1       	rjmp	.+704    	; 0x77c6 <auto_mount+0x348>
    7506:	62 c1       	rjmp	.+708    	; 0x77cc <auto_mount+0x34e>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    7508:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    750a:	09 83       	std	Y+1, r16	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    750c:	80 2f       	mov	r24, r16
    750e:	0e 94 70 57 	call	0xaee0	; 0xaee0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    7512:	80 ff       	sbrs	r24, 0
    7514:	03 c0       	rjmp	.+6      	; 0x751c <auto_mount+0x9e>
    7516:	23 e0       	ldi	r18, 0x03	; 3
    7518:	30 e0       	ldi	r19, 0x00	; 0
    751a:	5d c1       	rjmp	.+698    	; 0x77d6 <auto_mount+0x358>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    751c:	ff 20       	and	r15, r15
    751e:	11 f0       	breq	.+4      	; 0x7524 <auto_mount+0xa6>
    7520:	82 fd       	sbrc	r24, 2
    7522:	51 c1       	rjmp	.+674    	; 0x77c6 <auto_mount+0x348>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    7524:	ce 01       	movw	r24, r28
    7526:	40 e0       	ldi	r20, 0x00	; 0
    7528:	50 e0       	ldi	r21, 0x00	; 0
    752a:	60 e0       	ldi	r22, 0x00	; 0
    752c:	70 e0       	ldi	r23, 0x00	; 0
    752e:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    7532:	81 30       	cpi	r24, 0x01	; 1
    7534:	21 f0       	breq	.+8      	; 0x753e <auto_mount+0xc0>
    7536:	66 24       	eor	r6, r6
    7538:	77 24       	eor	r7, r7
    753a:	43 01       	movw	r8, r6
    753c:	10 c0       	rjmp	.+32     	; 0x755e <auto_mount+0xe0>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    753e:	fe 01       	movw	r30, r28
    7540:	e0 51       	subi	r30, 0x10	; 16
    7542:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    7544:	84 81       	ldd	r24, Z+4	; 0x04
    7546:	88 23       	and	r24, r24
    7548:	09 f4       	brne	.+2      	; 0x754c <auto_mount+0xce>
    754a:	43 c1       	rjmp	.+646    	; 0x77d2 <auto_mount+0x354>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    754c:	60 84       	ldd	r6, Z+8	; 0x08
    754e:	71 84       	ldd	r7, Z+9	; 0x09
    7550:	82 84       	ldd	r8, Z+10	; 0x0a
    7552:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    7554:	ce 01       	movw	r24, r28
    7556:	b4 01       	movw	r22, r8
    7558:	a3 01       	movw	r20, r6
    755a:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    755e:	83 30       	cpi	r24, 0x03	; 3
    7560:	19 f4       	brne	.+6      	; 0x7568 <auto_mount+0xea>
    7562:	21 e0       	ldi	r18, 0x01	; 1
    7564:	30 e0       	ldi	r19, 0x00	; 0
    7566:	37 c1       	rjmp	.+622    	; 0x77d6 <auto_mount+0x358>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    7568:	88 23       	and	r24, r24
    756a:	09 f0       	breq	.+2      	; 0x756e <auto_mount+0xf0>
    756c:	32 c1       	rjmp	.+612    	; 0x77d2 <auto_mount+0x354>
    756e:	8d ad       	ldd	r24, Y+61	; 0x3d
    7570:	9e ad       	ldd	r25, Y+62	; 0x3e
    7572:	80 50       	subi	r24, 0x00	; 0
    7574:	92 40       	sbci	r25, 0x02	; 2
    7576:	09 f0       	breq	.+2      	; 0x757a <auto_mount+0xfc>
    7578:	2c c1       	rjmp	.+600    	; 0x77d2 <auto_mount+0x354>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    757a:	c8 5b       	subi	r28, 0xB8	; 184
    757c:	df 4f       	sbci	r29, 0xFF	; 255
    757e:	88 81       	ld	r24, Y
    7580:	99 81       	ldd	r25, Y+1	; 0x01
    7582:	c8 54       	subi	r28, 0x48	; 72
    7584:	d0 40       	sbci	r29, 0x00	; 0
    7586:	bc 01       	movw	r22, r24
    7588:	80 e0       	ldi	r24, 0x00	; 0
    758a:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    758c:	61 15       	cp	r22, r1
    758e:	71 05       	cpc	r23, r1
    7590:	81 05       	cpc	r24, r1
    7592:	91 05       	cpc	r25, r1
    7594:	41 f4       	brne	.+16     	; 0x75a6 <auto_mount+0x128>
    7596:	ca 5a       	subi	r28, 0xAA	; 170
    7598:	df 4f       	sbci	r29, 0xFF	; 255
    759a:	68 81       	ld	r22, Y
    759c:	79 81       	ldd	r23, Y+1	; 0x01
    759e:	8a 81       	ldd	r24, Y+2	; 0x02
    75a0:	9b 81       	ldd	r25, Y+3	; 0x03
    75a2:	c6 55       	subi	r28, 0x56	; 86
    75a4:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    75a6:	6a 8f       	std	Y+26, r22	; 0x1a
    75a8:	7b 8f       	std	Y+27, r23	; 0x1b
    75aa:	8c 8f       	std	Y+28, r24	; 0x1c
    75ac:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    75ae:	ce 5b       	subi	r28, 0xBE	; 190
    75b0:	df 4f       	sbci	r29, 0xFF	; 255
    75b2:	28 81       	ld	r18, Y
    75b4:	c2 54       	subi	r28, 0x42	; 66
    75b6:	d0 40       	sbci	r29, 0x00	; 0
    75b8:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    75ba:	30 e0       	ldi	r19, 0x00	; 0
    75bc:	40 e0       	ldi	r20, 0x00	; 0
    75be:	50 e0       	ldi	r21, 0x00	; 0
    75c0:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    75c4:	5b 01       	movw	r10, r22
    75c6:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    75c8:	fe 01       	movw	r30, r28
    75ca:	e0 5c       	subi	r30, 0xC0	; 192
    75cc:	ff 4f       	sbci	r31, 0xFF	; 255
    75ce:	80 81       	ld	r24, Z
    75d0:	91 81       	ldd	r25, Z+1	; 0x01
    75d2:	a0 e0       	ldi	r26, 0x00	; 0
    75d4:	b0 e0       	ldi	r27, 0x00	; 0
    75d6:	86 0d       	add	r24, r6
    75d8:	97 1d       	adc	r25, r7
    75da:	a8 1d       	adc	r26, r8
    75dc:	b9 1d       	adc	r27, r9
    75de:	8a a3       	std	Y+34, r24	; 0x22
    75e0:	9b a3       	std	Y+35, r25	; 0x23
    75e2:	ac a3       	std	Y+36, r26	; 0x24
    75e4:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    75e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    75e8:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    75ea:	cd 5b       	subi	r28, 0xBD	; 189
    75ec:	df 4f       	sbci	r29, 0xFF	; 255
    75ee:	28 81       	ld	r18, Y
    75f0:	39 81       	ldd	r19, Y+1	; 0x01
    75f2:	c3 54       	subi	r28, 0x43	; 67
    75f4:	d0 40       	sbci	r29, 0x00	; 0
    75f6:	2f 83       	std	Y+7, r18	; 0x07
    75f8:	38 87       	std	Y+8, r19	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    75fa:	cb 5b       	subi	r28, 0xBB	; 187
    75fc:	df 4f       	sbci	r29, 0xFF	; 255
    75fe:	88 81       	ld	r24, Y
    7600:	99 81       	ldd	r25, Y+1	; 0x01
    7602:	c5 54       	subi	r28, 0x45	; 69
    7604:	d0 40       	sbci	r29, 0x00	; 0
    7606:	7c 01       	movw	r14, r24
    7608:	00 e0       	ldi	r16, 0x00	; 0
    760a:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    760c:	e1 14       	cp	r14, r1
    760e:	f1 04       	cpc	r15, r1
    7610:	01 05       	cpc	r16, r1
    7612:	11 05       	cpc	r17, r1
    7614:	41 f4       	brne	.+16     	; 0x7626 <auto_mount+0x1a8>
    7616:	ce 5a       	subi	r28, 0xAE	; 174
    7618:	df 4f       	sbci	r29, 0xFF	; 255
    761a:	e8 80       	ld	r14, Y
    761c:	f9 80       	ldd	r15, Y+1	; 0x01
    761e:	0a 81       	ldd	r16, Y+2	; 0x02
    7620:	1b 81       	ldd	r17, Y+3	; 0x03
    7622:	c2 55       	subi	r28, 0x52	; 82
    7624:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    7626:	80 81       	ld	r24, Z
    7628:	91 81       	ldd	r25, Z+1	; 0x01
    762a:	a0 e0       	ldi	r26, 0x00	; 0
    762c:	b0 e0       	ldi	r27, 0x00	; 0
    762e:	e8 1a       	sub	r14, r24
    7630:	f9 0a       	sbc	r15, r25
    7632:	0a 0b       	sbc	r16, r26
    7634:	1b 0b       	sbc	r17, r27
    7636:	ea 18       	sub	r14, r10
    7638:	fb 08       	sbc	r15, r11
    763a:	0c 09       	sbc	r16, r12
    763c:	1d 09       	sbc	r17, r13
    763e:	84 e0       	ldi	r24, 0x04	; 4
    7640:	36 95       	lsr	r19
    7642:	27 95       	ror	r18
    7644:	8a 95       	dec	r24
    7646:	e1 f7       	brne	.-8      	; 0x7640 <auto_mount+0x1c2>
    7648:	c9 01       	movw	r24, r18
    764a:	a0 e0       	ldi	r26, 0x00	; 0
    764c:	b0 e0       	ldi	r27, 0x00	; 0
    764e:	e8 1a       	sub	r14, r24
    7650:	f9 0a       	sbc	r15, r25
    7652:	0a 0b       	sbc	r16, r26
    7654:	1b 0b       	sbc	r17, r27
    7656:	2a 81       	ldd	r18, Y+2	; 0x02
    7658:	30 e0       	ldi	r19, 0x00	; 0
    765a:	40 e0       	ldi	r20, 0x00	; 0
    765c:	50 e0       	ldi	r21, 0x00	; 0
    765e:	c8 01       	movw	r24, r16
    7660:	b7 01       	movw	r22, r14
    7662:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    7666:	2e 5f       	subi	r18, 0xFE	; 254
    7668:	3f 4f       	sbci	r19, 0xFF	; 255
    766a:	4f 4f       	sbci	r20, 0xFF	; 255
    766c:	5f 4f       	sbci	r21, 0xFF	; 255
    766e:	2e 8f       	std	Y+30, r18	; 0x1e
    7670:	3f 8f       	std	Y+31, r19	; 0x1f
    7672:	48 a3       	std	Y+32, r20	; 0x20
    7674:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    7676:	27 3f       	cpi	r18, 0xF7	; 247
    7678:	8f e0       	ldi	r24, 0x0F	; 15
    767a:	38 07       	cpc	r19, r24
    767c:	80 e0       	ldi	r24, 0x00	; 0
    767e:	48 07       	cpc	r20, r24
    7680:	80 e0       	ldi	r24, 0x00	; 0
    7682:	58 07       	cpc	r21, r24
    7684:	10 f4       	brcc	.+4      	; 0x768a <auto_mount+0x20c>
    7686:	11 e0       	ldi	r17, 0x01	; 1
    7688:	07 c0       	rjmp	.+14     	; 0x7698 <auto_mount+0x21a>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    768a:	27 5f       	subi	r18, 0xF7	; 247
    768c:	3f 4f       	sbci	r19, 0xFF	; 255
    768e:	40 40       	sbci	r20, 0x00	; 0
    7690:	50 40       	sbci	r21, 0x00	; 0
    7692:	08 f0       	brcs	.+2      	; 0x7696 <auto_mount+0x218>
    7694:	a6 c0       	rjmp	.+332    	; 0x77e2 <auto_mount+0x364>
    7696:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    7698:	8a a1       	ldd	r24, Y+34	; 0x22
    769a:	9b a1       	ldd	r25, Y+35	; 0x23
    769c:	ac a1       	ldd	r26, Y+36	; 0x24
    769e:	bd a1       	ldd	r27, Y+37	; 0x25
    76a0:	8a 0d       	add	r24, r10
    76a2:	9b 1d       	adc	r25, r11
    76a4:	ac 1d       	adc	r26, r12
    76a6:	bd 1d       	adc	r27, r13
    76a8:	8e a3       	std	Y+38, r24	; 0x26
    76aa:	9f a3       	std	Y+39, r25	; 0x27
    76ac:	a8 a7       	std	Y+40, r26	; 0x28
    76ae:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    76b0:	8f 81       	ldd	r24, Y+7	; 0x07
    76b2:	98 85       	ldd	r25, Y+8	; 0x08
    76b4:	b4 e0       	ldi	r27, 0x04	; 4
    76b6:	96 95       	lsr	r25
    76b8:	87 95       	ror	r24
    76ba:	ba 95       	dec	r27
    76bc:	e1 f7       	brne	.-8      	; 0x76b6 <auto_mount+0x238>
    76be:	a0 e0       	ldi	r26, 0x00	; 0
    76c0:	b0 e0       	ldi	r27, 0x00	; 0
    76c2:	2a a1       	ldd	r18, Y+34	; 0x22
    76c4:	3b a1       	ldd	r19, Y+35	; 0x23
    76c6:	4c a1       	ldd	r20, Y+36	; 0x24
    76c8:	5d a1       	ldd	r21, Y+37	; 0x25
    76ca:	82 0f       	add	r24, r18
    76cc:	93 1f       	adc	r25, r19
    76ce:	a4 1f       	adc	r26, r20
    76d0:	b5 1f       	adc	r27, r21
    76d2:	8a 0d       	add	r24, r10
    76d4:	9b 1d       	adc	r25, r11
    76d6:	ac 1d       	adc	r26, r12
    76d8:	bd 1d       	adc	r27, r13
    76da:	8a a7       	std	Y+42, r24	; 0x2a
    76dc:	9b a7       	std	Y+43, r25	; 0x2b
    76de:	ac a7       	std	Y+44, r26	; 0x2c
    76e0:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    76e2:	8f ef       	ldi	r24, 0xFF	; 255
    76e4:	9f ef       	ldi	r25, 0xFF	; 255
    76e6:	af ef       	ldi	r26, 0xFF	; 255
    76e8:	bf ef       	ldi	r27, 0xFF	; 255
    76ea:	8e 87       	std	Y+14, r24	; 0x0e
    76ec:	9f 87       	std	Y+15, r25	; 0x0f
    76ee:	a8 8b       	std	Y+16, r26	; 0x10
    76f0:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    76f2:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    76f4:	13 30       	cpi	r17, 0x03	; 3
    76f6:	09 f0       	breq	.+2      	; 0x76fa <auto_mount+0x27c>
    76f8:	51 c0       	rjmp	.+162    	; 0x779c <auto_mount+0x31e>
	 	fs->fsi_flag = 0;
    76fa:	19 86       	std	Y+9, r1	; 0x09
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    76fc:	ce 59       	subi	r28, 0x9E	; 158
    76fe:	df 4f       	sbci	r29, 0xFF	; 255
    7700:	28 81       	ld	r18, Y
    7702:	39 81       	ldd	r19, Y+1	; 0x01
    7704:	c2 56       	subi	r28, 0x62	; 98
    7706:	d0 40       	sbci	r29, 0x00	; 0
    7708:	40 e0       	ldi	r20, 0x00	; 0
    770a:	50 e0       	ldi	r21, 0x00	; 0
    770c:	26 0d       	add	r18, r6
    770e:	37 1d       	adc	r19, r7
    7710:	48 1d       	adc	r20, r8
    7712:	59 1d       	adc	r21, r9
    7714:	2a 8b       	std	Y+18, r18	; 0x12
    7716:	3b 8b       	std	Y+19, r19	; 0x13
    7718:	4c 8b       	std	Y+20, r20	; 0x14
    771a:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    771c:	be 01       	movw	r22, r28
    771e:	6e 5c       	subi	r22, 0xCE	; 206
    7720:	7f 4f       	sbci	r23, 0xFF	; 255
    7722:	89 81       	ldd	r24, Y+1	; 0x01
    7724:	01 e0       	ldi	r16, 0x01	; 1
    7726:	0e 94 81 54 	call	0xa902	; 0xa902 <disk_read>
    772a:	89 2b       	or	r24, r25
    772c:	b9 f5       	brne	.+110    	; 0x779c <auto_mount+0x31e>
    772e:	c0 5d       	subi	r28, 0xD0	; 208
    7730:	dd 4f       	sbci	r29, 0xFD	; 253
    7732:	88 81       	ld	r24, Y
    7734:	99 81       	ldd	r25, Y+1	; 0x01
    7736:	c0 53       	subi	r28, 0x30	; 48
    7738:	d2 40       	sbci	r29, 0x02	; 2
    773a:	85 55       	subi	r24, 0x55	; 85
    773c:	9a 4a       	sbci	r25, 0xAA	; 170
    773e:	71 f5       	brne	.+92     	; 0x779c <auto_mount+0x31e>
    7740:	8a a9       	ldd	r24, Y+50	; 0x32
    7742:	9b a9       	ldd	r25, Y+51	; 0x33
    7744:	ac a9       	ldd	r26, Y+52	; 0x34
    7746:	bd a9       	ldd	r27, Y+53	; 0x35
    7748:	82 55       	subi	r24, 0x52	; 82
    774a:	92 45       	sbci	r25, 0x52	; 82
    774c:	a1 46       	sbci	r26, 0x61	; 97
    774e:	b1 44       	sbci	r27, 0x41	; 65
    7750:	29 f5       	brne	.+74     	; 0x779c <auto_mount+0x31e>
    7752:	ca 5e       	subi	r28, 0xEA	; 234
    7754:	dd 4f       	sbci	r29, 0xFD	; 253
    7756:	88 81       	ld	r24, Y
    7758:	99 81       	ldd	r25, Y+1	; 0x01
    775a:	aa 81       	ldd	r26, Y+2	; 0x02
    775c:	bb 81       	ldd	r27, Y+3	; 0x03
    775e:	c6 51       	subi	r28, 0x16	; 22
    7760:	d2 40       	sbci	r29, 0x02	; 2
    7762:	82 57       	subi	r24, 0x72	; 114
    7764:	92 47       	sbci	r25, 0x72	; 114
    7766:	a1 44       	sbci	r26, 0x41	; 65
    7768:	b1 46       	sbci	r27, 0x61	; 97
    776a:	c1 f4       	brne	.+48     	; 0x779c <auto_mount+0x31e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    776c:	c2 5e       	subi	r28, 0xE2	; 226
    776e:	dd 4f       	sbci	r29, 0xFD	; 253
    7770:	88 81       	ld	r24, Y
    7772:	99 81       	ldd	r25, Y+1	; 0x01
    7774:	aa 81       	ldd	r26, Y+2	; 0x02
    7776:	bb 81       	ldd	r27, Y+3	; 0x03
    7778:	ce 51       	subi	r28, 0x1E	; 30
    777a:	d2 40       	sbci	r29, 0x02	; 2
    777c:	8a 87       	std	Y+10, r24	; 0x0a
    777e:	9b 87       	std	Y+11, r25	; 0x0b
    7780:	ac 87       	std	Y+12, r26	; 0x0c
    7782:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    7784:	c6 5e       	subi	r28, 0xE6	; 230
    7786:	dd 4f       	sbci	r29, 0xFD	; 253
    7788:	88 81       	ld	r24, Y
    778a:	99 81       	ldd	r25, Y+1	; 0x01
    778c:	aa 81       	ldd	r26, Y+2	; 0x02
    778e:	bb 81       	ldd	r27, Y+3	; 0x03
    7790:	ca 51       	subi	r28, 0x1A	; 26
    7792:	d2 40       	sbci	r29, 0x02	; 2
    7794:	8e 87       	std	Y+14, r24	; 0x0e
    7796:	9f 87       	std	Y+15, r25	; 0x0f
    7798:	a8 8b       	std	Y+16, r26	; 0x10
    779a:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    779c:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    779e:	1e a6       	std	Y+46, r1	; 0x2e
    77a0:	1f a6       	std	Y+47, r1	; 0x2f
    77a2:	18 aa       	std	Y+48, r1	; 0x30
    77a4:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    77a6:	1e 8a       	std	Y+22, r1	; 0x16
    77a8:	1f 8a       	std	Y+23, r1	; 0x17
    77aa:	18 8e       	std	Y+24, r1	; 0x18
    77ac:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    77ae:	80 91 6e 25 	lds	r24, 0x256E
    77b2:	90 91 6f 25 	lds	r25, 0x256F
    77b6:	01 96       	adiw	r24, 0x01	; 1
    77b8:	80 93 6e 25 	sts	0x256E, r24
    77bc:	90 93 6f 25 	sts	0x256F, r25
    77c0:	8d 83       	std	Y+5, r24	; 0x05
    77c2:	9e 83       	std	Y+6, r25	; 0x06
    77c4:	03 c0       	rjmp	.+6      	; 0x77cc <auto_mount+0x34e>
	res = FR_OK;

	return res;
    77c6:	2a e0       	ldi	r18, 0x0A	; 10
    77c8:	30 e0       	ldi	r19, 0x00	; 0
    77ca:	05 c0       	rjmp	.+10     	; 0x77d6 <auto_mount+0x358>
    77cc:	20 e0       	ldi	r18, 0x00	; 0
    77ce:	30 e0       	ldi	r19, 0x00	; 0
    77d0:	02 c0       	rjmp	.+4      	; 0x77d6 <auto_mount+0x358>
    77d2:	2d e0       	ldi	r18, 0x0D	; 13
    77d4:	30 e0       	ldi	r19, 0x00	; 0
}
    77d6:	c9 01       	movw	r24, r18
    77d8:	cd b7       	in	r28, 0x3d	; 61
    77da:	de b7       	in	r29, 0x3e	; 62
    77dc:	ee e0       	ldi	r30, 0x0E	; 14
    77de:	0c 94 b7 5b 	jmp	0xb76e	; 0xb76e <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    77e2:	c2 5a       	subi	r28, 0xA2	; 162
    77e4:	df 4f       	sbci	r29, 0xFF	; 255
    77e6:	88 81       	ld	r24, Y
    77e8:	99 81       	ldd	r25, Y+1	; 0x01
    77ea:	aa 81       	ldd	r26, Y+2	; 0x02
    77ec:	bb 81       	ldd	r27, Y+3	; 0x03
    77ee:	ce 55       	subi	r28, 0x5E	; 94
    77f0:	d0 40       	sbci	r29, 0x00	; 0
    77f2:	8e a3       	std	Y+38, r24	; 0x26
    77f4:	9f a3       	std	Y+39, r25	; 0x27
    77f6:	a8 a7       	std	Y+40, r26	; 0x28
    77f8:	b9 a7       	std	Y+41, r27	; 0x29
    77fa:	13 e0       	ldi	r17, 0x03	; 3
    77fc:	59 cf       	rjmp	.-334    	; 0x76b0 <auto_mount+0x232>

000077fe <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    77fe:	a0 e0       	ldi	r26, 0x00	; 0
    7800:	b0 e0       	ldi	r27, 0x00	; 0
    7802:	e5 e0       	ldi	r30, 0x05	; 5
    7804:	fc e3       	ldi	r31, 0x3C	; 60
    7806:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <__prologue_saves__+0x8>
    780a:	ec 01       	movw	r28, r24
    780c:	4a 01       	movw	r8, r20
    780e:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    7810:	ce a4       	ldd	r12, Y+46	; 0x2e
    7812:	df a4       	ldd	r13, Y+47	; 0x2f
    7814:	e8 a8       	ldd	r14, Y+48	; 0x30
    7816:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    7818:	c4 16       	cp	r12, r20
    781a:	d5 06       	cpc	r13, r21
    781c:	e6 06       	cpc	r14, r22
    781e:	f7 06       	cpc	r15, r23
    7820:	09 f4       	brne	.+2      	; 0x7824 <move_window+0x26>
    7822:	4f c0       	rjmp	.+158    	; 0x78c2 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    7824:	8c 81       	ldd	r24, Y+4	; 0x04
    7826:	88 23       	and	r24, r24
    7828:	a1 f1       	breq	.+104    	; 0x7892 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    782a:	22 e3       	ldi	r18, 0x32	; 50
    782c:	62 2e       	mov	r6, r18
    782e:	71 2c       	mov	r7, r1
    7830:	6c 0e       	add	r6, r28
    7832:	7d 1e       	adc	r7, r29
    7834:	89 81       	ldd	r24, Y+1	; 0x01
    7836:	b3 01       	movw	r22, r6
    7838:	a7 01       	movw	r20, r14
    783a:	96 01       	movw	r18, r12
    783c:	01 e0       	ldi	r16, 0x01	; 1
    783e:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    7842:	89 2b       	or	r24, r25
    7844:	d9 f5       	brne	.+118    	; 0x78bc <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    7846:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    7848:	8a 8d       	ldd	r24, Y+26	; 0x1a
    784a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    784c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    784e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7850:	2a a1       	ldd	r18, Y+34	; 0x22
    7852:	3b a1       	ldd	r19, Y+35	; 0x23
    7854:	4c a1       	ldd	r20, Y+36	; 0x24
    7856:	5d a1       	ldd	r21, Y+37	; 0x25
    7858:	82 0f       	add	r24, r18
    785a:	93 1f       	adc	r25, r19
    785c:	a4 1f       	adc	r26, r20
    785e:	b5 1f       	adc	r27, r21
    7860:	c8 16       	cp	r12, r24
    7862:	d9 06       	cpc	r13, r25
    7864:	ea 06       	cpc	r14, r26
    7866:	fb 06       	cpc	r15, r27
    7868:	a0 f4       	brcc	.+40     	; 0x7892 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    786a:	1b 81       	ldd	r17, Y+3	; 0x03
    786c:	10 c0       	rjmp	.+32     	; 0x788e <move_window+0x90>
					wsect += fs->sects_fat;
    786e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7870:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7872:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7874:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7876:	c8 0e       	add	r12, r24
    7878:	d9 1e       	adc	r13, r25
    787a:	ea 1e       	adc	r14, r26
    787c:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    787e:	89 81       	ldd	r24, Y+1	; 0x01
    7880:	b3 01       	movw	r22, r6
    7882:	a7 01       	movw	r20, r14
    7884:	96 01       	movw	r18, r12
    7886:	01 e0       	ldi	r16, 0x01	; 1
    7888:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    788c:	11 50       	subi	r17, 0x01	; 1
    788e:	12 30       	cpi	r17, 0x02	; 2
    7890:	70 f7       	brcc	.-36     	; 0x786e <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    7892:	81 14       	cp	r8, r1
    7894:	91 04       	cpc	r9, r1
    7896:	a1 04       	cpc	r10, r1
    7898:	b1 04       	cpc	r11, r1
    789a:	99 f0       	breq	.+38     	; 0x78c2 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    789c:	be 01       	movw	r22, r28
    789e:	6e 5c       	subi	r22, 0xCE	; 206
    78a0:	7f 4f       	sbci	r23, 0xFF	; 255
    78a2:	89 81       	ldd	r24, Y+1	; 0x01
    78a4:	a5 01       	movw	r20, r10
    78a6:	94 01       	movw	r18, r8
    78a8:	01 e0       	ldi	r16, 0x01	; 1
    78aa:	0e 94 81 54 	call	0xa902	; 0xa902 <disk_read>
    78ae:	89 2b       	or	r24, r25
    78b0:	29 f4       	brne	.+10     	; 0x78bc <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    78b2:	8e a6       	std	Y+46, r8	; 0x2e
    78b4:	9f a6       	std	Y+47, r9	; 0x2f
    78b6:	a8 aa       	std	Y+48, r10	; 0x30
    78b8:	b9 aa       	std	Y+49, r11	; 0x31
    78ba:	03 c0       	rjmp	.+6      	; 0x78c2 <move_window+0xc4>
    78bc:	21 e0       	ldi	r18, 0x01	; 1
    78be:	30 e0       	ldi	r19, 0x00	; 0
    78c0:	02 c0       	rjmp	.+4      	; 0x78c6 <move_window+0xc8>
    78c2:	20 e0       	ldi	r18, 0x00	; 0
    78c4:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    78c6:	c9 01       	movw	r24, r18
    78c8:	cd b7       	in	r28, 0x3d	; 61
    78ca:	de b7       	in	r29, 0x3e	; 62
    78cc:	ee e0       	ldi	r30, 0x0E	; 14
    78ce:	0c 94 b7 5b 	jmp	0xb76e	; 0xb76e <__epilogue_restores__+0x8>

000078d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    78d2:	a0 e0       	ldi	r26, 0x00	; 0
    78d4:	b0 e0       	ldi	r27, 0x00	; 0
    78d6:	ef e6       	ldi	r30, 0x6F	; 111
    78d8:	fc e3       	ldi	r31, 0x3C	; 60
    78da:	0c 94 9c 5b 	jmp	0xb738	; 0xb738 <__prologue_saves__+0xa>
    78de:	4c 01       	movw	r8, r24
    78e0:	7a 01       	movw	r14, r20
    78e2:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    78e4:	42 30       	cpi	r20, 0x02	; 2
    78e6:	51 05       	cpc	r21, r1
    78e8:	61 05       	cpc	r22, r1
    78ea:	71 05       	cpc	r23, r1
    78ec:	08 f4       	brcc	.+2      	; 0x78f0 <get_fat+0x1e>
    78ee:	97 c0       	rjmp	.+302    	; 0x7a1e <get_fat+0x14c>
    78f0:	f4 01       	movw	r30, r8
    78f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    78f4:	97 8d       	ldd	r25, Z+31	; 0x1f
    78f6:	a0 a1       	ldd	r26, Z+32	; 0x20
    78f8:	b1 a1       	ldd	r27, Z+33	; 0x21
    78fa:	48 17       	cp	r20, r24
    78fc:	59 07       	cpc	r21, r25
    78fe:	6a 07       	cpc	r22, r26
    7900:	7b 07       	cpc	r23, r27
    7902:	08 f0       	brcs	.+2      	; 0x7906 <get_fat+0x34>
    7904:	8c c0       	rjmp	.+280    	; 0x7a1e <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
    7906:	a2 a0       	ldd	r10, Z+34	; 0x22
    7908:	b3 a0       	ldd	r11, Z+35	; 0x23
    790a:	c4 a0       	ldd	r12, Z+36	; 0x24
    790c:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
    790e:	80 81       	ld	r24, Z
    7910:	82 30       	cpi	r24, 0x02	; 2
    7912:	09 f4       	brne	.+2      	; 0x7916 <get_fat+0x44>
    7914:	4d c0       	rjmp	.+154    	; 0x79b0 <get_fat+0xde>
    7916:	83 30       	cpi	r24, 0x03	; 3
    7918:	09 f4       	brne	.+2      	; 0x791c <get_fat+0x4a>
    791a:	63 c0       	rjmp	.+198    	; 0x79e2 <get_fat+0x110>
    791c:	81 30       	cpi	r24, 0x01	; 1
    791e:	09 f0       	breq	.+2      	; 0x7922 <get_fat+0x50>
    7920:	83 c0       	rjmp	.+262    	; 0x7a28 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    7922:	ea 01       	movw	r28, r20
    7924:	d6 95       	lsr	r29
    7926:	c7 95       	ror	r28
    7928:	c4 0f       	add	r28, r20
    792a:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    792c:	ae 01       	movw	r20, r28
    792e:	45 2f       	mov	r20, r21
    7930:	55 27       	eor	r21, r21
    7932:	46 95       	lsr	r20
    7934:	60 e0       	ldi	r22, 0x00	; 0
    7936:	70 e0       	ldi	r23, 0x00	; 0
    7938:	4a 0d       	add	r20, r10
    793a:	5b 1d       	adc	r21, r11
    793c:	6c 1d       	adc	r22, r12
    793e:	7d 1d       	adc	r23, r13
    7940:	c4 01       	movw	r24, r8
    7942:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    7946:	89 2b       	or	r24, r25
    7948:	09 f0       	breq	.+2      	; 0x794c <get_fat+0x7a>
    794a:	6e c0       	rjmp	.+220    	; 0x7a28 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    794c:	fe 01       	movw	r30, r28
    794e:	f1 70       	andi	r31, 0x01	; 1
    7950:	e8 0d       	add	r30, r8
    7952:	f9 1d       	adc	r31, r9
    7954:	72 a8       	ldd	r7, Z+50	; 0x32
    7956:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    7958:	ae 01       	movw	r20, r28
    795a:	45 2f       	mov	r20, r21
    795c:	55 27       	eor	r21, r21
    795e:	46 95       	lsr	r20
    7960:	60 e0       	ldi	r22, 0x00	; 0
    7962:	70 e0       	ldi	r23, 0x00	; 0
    7964:	4a 0d       	add	r20, r10
    7966:	5b 1d       	adc	r21, r11
    7968:	6c 1d       	adc	r22, r12
    796a:	7d 1d       	adc	r23, r13
    796c:	c4 01       	movw	r24, r8
    796e:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    7972:	89 2b       	or	r24, r25
    7974:	09 f0       	breq	.+2      	; 0x7978 <get_fat+0xa6>
    7976:	58 c0       	rjmp	.+176    	; 0x7a28 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    7978:	67 2d       	mov	r22, r7
    797a:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    797c:	d1 70       	andi	r29, 0x01	; 1
    797e:	c8 0d       	add	r28, r8
    7980:	d9 1d       	adc	r29, r9
    7982:	9a a9       	ldd	r25, Y+50	; 0x32
    7984:	80 e0       	ldi	r24, 0x00	; 0
    7986:	68 2b       	or	r22, r24
    7988:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    798a:	c7 01       	movw	r24, r14
    798c:	81 70       	andi	r24, 0x01	; 1
    798e:	90 70       	andi	r25, 0x00	; 0
    7990:	89 2b       	or	r24, r25
    7992:	39 f0       	breq	.+14     	; 0x79a2 <get_fat+0xd0>
    7994:	84 e0       	ldi	r24, 0x04	; 4
    7996:	76 95       	lsr	r23
    7998:	67 95       	ror	r22
    799a:	8a 95       	dec	r24
    799c:	e1 f7       	brne	.-8      	; 0x7996 <get_fat+0xc4>
    799e:	9b 01       	movw	r18, r22
    79a0:	1d c0       	rjmp	.+58     	; 0x79dc <get_fat+0x10a>
    79a2:	9b 01       	movw	r18, r22
    79a4:	40 e0       	ldi	r20, 0x00	; 0
    79a6:	50 e0       	ldi	r21, 0x00	; 0
    79a8:	3f 70       	andi	r19, 0x0F	; 15
    79aa:	40 70       	andi	r20, 0x00	; 0
    79ac:	50 70       	andi	r21, 0x00	; 0
    79ae:	40 c0       	rjmp	.+128    	; 0x7a30 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    79b0:	45 2f       	mov	r20, r21
    79b2:	56 2f       	mov	r21, r22
    79b4:	67 2f       	mov	r22, r23
    79b6:	77 27       	eor	r23, r23
    79b8:	4a 0d       	add	r20, r10
    79ba:	5b 1d       	adc	r21, r11
    79bc:	6c 1d       	adc	r22, r12
    79be:	7d 1d       	adc	r23, r13
    79c0:	c4 01       	movw	r24, r8
    79c2:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    79c6:	89 2b       	or	r24, r25
    79c8:	79 f5       	brne	.+94     	; 0x7a28 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    79ca:	f7 01       	movw	r30, r14
    79cc:	ee 0f       	add	r30, r30
    79ce:	ff 1f       	adc	r31, r31
    79d0:	f1 70       	andi	r31, 0x01	; 1
    79d2:	e8 0d       	add	r30, r8
    79d4:	f9 1d       	adc	r31, r9
    79d6:	82 a9       	ldd	r24, Z+50	; 0x32
    79d8:	93 a9       	ldd	r25, Z+51	; 0x33
    79da:	9c 01       	movw	r18, r24
    79dc:	40 e0       	ldi	r20, 0x00	; 0
    79de:	50 e0       	ldi	r21, 0x00	; 0
    79e0:	27 c0       	rjmp	.+78     	; 0x7a30 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    79e2:	e7 e0       	ldi	r30, 0x07	; 7
    79e4:	76 95       	lsr	r23
    79e6:	67 95       	ror	r22
    79e8:	57 95       	ror	r21
    79ea:	47 95       	ror	r20
    79ec:	ea 95       	dec	r30
    79ee:	d1 f7       	brne	.-12     	; 0x79e4 <get_fat+0x112>
    79f0:	4a 0d       	add	r20, r10
    79f2:	5b 1d       	adc	r21, r11
    79f4:	6c 1d       	adc	r22, r12
    79f6:	7d 1d       	adc	r23, r13
    79f8:	c4 01       	movw	r24, r8
    79fa:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    79fe:	89 2b       	or	r24, r25
    7a00:	99 f4       	brne	.+38     	; 0x7a28 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    7a02:	f7 01       	movw	r30, r14
    7a04:	ee 0f       	add	r30, r30
    7a06:	ff 1f       	adc	r31, r31
    7a08:	ee 0f       	add	r30, r30
    7a0a:	ff 1f       	adc	r31, r31
    7a0c:	f1 70       	andi	r31, 0x01	; 1
    7a0e:	e8 0d       	add	r30, r8
    7a10:	f9 1d       	adc	r31, r9
    7a12:	22 a9       	ldd	r18, Z+50	; 0x32
    7a14:	33 a9       	ldd	r19, Z+51	; 0x33
    7a16:	44 a9       	ldd	r20, Z+52	; 0x34
    7a18:	55 a9       	ldd	r21, Z+53	; 0x35
    7a1a:	5f 70       	andi	r21, 0x0F	; 15
    7a1c:	09 c0       	rjmp	.+18     	; 0x7a30 <get_fat+0x15e>
    7a1e:	21 e0       	ldi	r18, 0x01	; 1
    7a20:	30 e0       	ldi	r19, 0x00	; 0
    7a22:	40 e0       	ldi	r20, 0x00	; 0
    7a24:	50 e0       	ldi	r21, 0x00	; 0
    7a26:	04 c0       	rjmp	.+8      	; 0x7a30 <get_fat+0x15e>
    7a28:	2f ef       	ldi	r18, 0xFF	; 255
    7a2a:	3f ef       	ldi	r19, 0xFF	; 255
    7a2c:	4f ef       	ldi	r20, 0xFF	; 255
    7a2e:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    7a30:	b9 01       	movw	r22, r18
    7a32:	ca 01       	movw	r24, r20
    7a34:	cd b7       	in	r28, 0x3d	; 61
    7a36:	de b7       	in	r29, 0x3e	; 62
    7a38:	ed e0       	ldi	r30, 0x0D	; 13
    7a3a:	0c 94 b8 5b 	jmp	0xb770	; 0xb770 <__epilogue_restores__+0xa>

00007a3e <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7a3e:	a0 e0       	ldi	r26, 0x00	; 0
    7a40:	b0 e0       	ldi	r27, 0x00	; 0
    7a42:	e5 e2       	ldi	r30, 0x25	; 37
    7a44:	fd e3       	ldi	r31, 0x3D	; 61
    7a46:	0c 94 9f 5b 	jmp	0xb73e	; 0xb73e <__prologue_saves__+0x10>
    7a4a:	5c 01       	movw	r10, r24
    7a4c:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7a4e:	dc 01       	movw	r26, r24
    7a50:	14 96       	adiw	r26, 0x04	; 4
    7a52:	6d 93       	st	X+, r22
    7a54:	7c 93       	st	X, r23
    7a56:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    7a58:	16 96       	adiw	r26, 0x06	; 6
    7a5a:	4d 91       	ld	r20, X+
    7a5c:	5d 91       	ld	r21, X+
    7a5e:	6d 91       	ld	r22, X+
    7a60:	7c 91       	ld	r23, X
    7a62:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    7a64:	41 30       	cpi	r20, 0x01	; 1
    7a66:	51 05       	cpc	r21, r1
    7a68:	61 05       	cpc	r22, r1
    7a6a:	71 05       	cpc	r23, r1
    7a6c:	09 f4       	brne	.+2      	; 0x7a70 <dir_seek+0x32>
    7a6e:	d5 c0       	rjmp	.+426    	; 0x7c1a <dir_seek+0x1dc>
    7a70:	ed 91       	ld	r30, X+
    7a72:	fc 91       	ld	r31, X
    7a74:	86 8d       	ldd	r24, Z+30	; 0x1e
    7a76:	97 8d       	ldd	r25, Z+31	; 0x1f
    7a78:	a0 a1       	ldd	r26, Z+32	; 0x20
    7a7a:	b1 a1       	ldd	r27, Z+33	; 0x21
    7a7c:	48 17       	cp	r20, r24
    7a7e:	59 07       	cpc	r21, r25
    7a80:	6a 07       	cpc	r22, r26
    7a82:	7b 07       	cpc	r23, r27
    7a84:	08 f0       	brcs	.+2      	; 0x7a88 <dir_seek+0x4a>
    7a86:	c9 c0       	rjmp	.+402    	; 0x7c1a <dir_seek+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7a88:	41 15       	cp	r20, r1
    7a8a:	51 05       	cpc	r21, r1
    7a8c:	61 05       	cpc	r22, r1
    7a8e:	71 05       	cpc	r23, r1
    7a90:	81 f5       	brne	.+96     	; 0x7af2 <dir_seek+0xb4>
    7a92:	80 81       	ld	r24, Z
    7a94:	83 30       	cpi	r24, 0x03	; 3
    7a96:	49 f4       	brne	.+18     	; 0x7aaa <dir_seek+0x6c>
		clst = dj->fs->dirbase;
    7a98:	46 a1       	ldd	r20, Z+38	; 0x26
    7a9a:	57 a1       	ldd	r21, Z+39	; 0x27
    7a9c:	60 a5       	ldd	r22, Z+40	; 0x28
    7a9e:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    7aa0:	41 15       	cp	r20, r1
    7aa2:	51 05       	cpc	r21, r1
    7aa4:	61 05       	cpc	r22, r1
    7aa6:	71 05       	cpc	r23, r1
    7aa8:	21 f5       	brne	.+72     	; 0x7af2 <dir_seek+0xb4>
		dj->clust = clst;
    7aaa:	f5 01       	movw	r30, r10
    7aac:	12 86       	std	Z+10, r1	; 0x0a
    7aae:	13 86       	std	Z+11, r1	; 0x0b
    7ab0:	14 86       	std	Z+12, r1	; 0x0c
    7ab2:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7ab4:	01 90       	ld	r0, Z+
    7ab6:	f0 81       	ld	r31, Z
    7ab8:	e0 2d       	mov	r30, r0
    7aba:	87 81       	ldd	r24, Z+7	; 0x07
    7abc:	90 85       	ldd	r25, Z+8	; 0x08
    7abe:	c8 16       	cp	r12, r24
    7ac0:	d9 06       	cpc	r13, r25
    7ac2:	08 f0       	brcs	.+2      	; 0x7ac6 <dir_seek+0x88>
    7ac4:	aa c0       	rjmp	.+340    	; 0x7c1a <dir_seek+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    7ac6:	c6 01       	movw	r24, r12
    7ac8:	a4 e0       	ldi	r26, 0x04	; 4
    7aca:	96 95       	lsr	r25
    7acc:	87 95       	ror	r24
    7ace:	aa 95       	dec	r26
    7ad0:	e1 f7       	brne	.-8      	; 0x7aca <dir_seek+0x8c>
    7ad2:	a0 e0       	ldi	r26, 0x00	; 0
    7ad4:	b0 e0       	ldi	r27, 0x00	; 0
    7ad6:	26 a1       	ldd	r18, Z+38	; 0x26
    7ad8:	37 a1       	ldd	r19, Z+39	; 0x27
    7ada:	40 a5       	ldd	r20, Z+40	; 0x28
    7adc:	51 a5       	ldd	r21, Z+41	; 0x29
    7ade:	82 0f       	add	r24, r18
    7ae0:	93 1f       	adc	r25, r19
    7ae2:	a4 1f       	adc	r26, r20
    7ae4:	b5 1f       	adc	r27, r21
    7ae6:	f5 01       	movw	r30, r10
    7ae8:	86 87       	std	Z+14, r24	; 0x0e
    7aea:	97 87       	std	Z+15, r25	; 0x0f
    7aec:	a0 8b       	std	Z+16, r26	; 0x10
    7aee:	b1 8b       	std	Z+17, r27	; 0x11
    7af0:	7b c0       	rjmp	.+246    	; 0x7be8 <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    7af2:	82 81       	ldd	r24, Z+2	; 0x02
    7af4:	08 2f       	mov	r16, r24
    7af6:	10 e0       	ldi	r17, 0x00	; 0
    7af8:	f4 e0       	ldi	r31, 0x04	; 4
    7afa:	00 0f       	add	r16, r16
    7afc:	11 1f       	adc	r17, r17
    7afe:	fa 95       	dec	r31
    7b00:	e1 f7       	brne	.-8      	; 0x7afa <dir_seek+0xbc>
    7b02:	25 c0       	rjmp	.+74     	; 0x7b4e <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7b04:	ce 01       	movw	r24, r28
    7b06:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    7b0a:	ab 01       	movw	r20, r22
    7b0c:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7b0e:	4f 3f       	cpi	r20, 0xFF	; 255
    7b10:	ff ef       	ldi	r31, 0xFF	; 255
    7b12:	5f 07       	cpc	r21, r31
    7b14:	ff ef       	ldi	r31, 0xFF	; 255
    7b16:	6f 07       	cpc	r22, r31
    7b18:	ff ef       	ldi	r31, 0xFF	; 255
    7b1a:	7f 07       	cpc	r23, r31
    7b1c:	19 f4       	brne	.+6      	; 0x7b24 <dir_seek+0xe6>
    7b1e:	21 e0       	ldi	r18, 0x01	; 1
    7b20:	30 e0       	ldi	r19, 0x00	; 0
    7b22:	7d c0       	rjmp	.+250    	; 0x7c1e <dir_seek+0x1e0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    7b24:	42 30       	cpi	r20, 0x02	; 2
    7b26:	51 05       	cpc	r21, r1
    7b28:	61 05       	cpc	r22, r1
    7b2a:	71 05       	cpc	r23, r1
    7b2c:	08 f4       	brcc	.+2      	; 0x7b30 <dir_seek+0xf2>
    7b2e:	75 c0       	rjmp	.+234    	; 0x7c1a <dir_seek+0x1dc>
    7b30:	d5 01       	movw	r26, r10
    7b32:	ed 91       	ld	r30, X+
    7b34:	fc 91       	ld	r31, X
    7b36:	86 8d       	ldd	r24, Z+30	; 0x1e
    7b38:	97 8d       	ldd	r25, Z+31	; 0x1f
    7b3a:	a0 a1       	ldd	r26, Z+32	; 0x20
    7b3c:	b1 a1       	ldd	r27, Z+33	; 0x21
    7b3e:	48 17       	cp	r20, r24
    7b40:	59 07       	cpc	r21, r25
    7b42:	6a 07       	cpc	r22, r26
    7b44:	7b 07       	cpc	r23, r27
    7b46:	08 f0       	brcs	.+2      	; 0x7b4a <dir_seek+0x10c>
    7b48:	68 c0       	rjmp	.+208    	; 0x7c1a <dir_seek+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    7b4a:	c0 1a       	sub	r12, r16
    7b4c:	d1 0a       	sbc	r13, r17
    7b4e:	f5 01       	movw	r30, r10
    7b50:	c0 81       	ld	r28, Z
    7b52:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    7b54:	c0 16       	cp	r12, r16
    7b56:	d1 06       	cpc	r13, r17
    7b58:	a8 f6       	brcc	.-86     	; 0x7b04 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    7b5a:	d5 01       	movw	r26, r10
    7b5c:	1a 96       	adiw	r26, 0x0a	; 10
    7b5e:	4d 93       	st	X+, r20
    7b60:	5d 93       	st	X+, r21
    7b62:	6d 93       	st	X+, r22
    7b64:	7c 93       	st	X, r23
    7b66:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7b68:	ee ef       	ldi	r30, 0xFE	; 254
    7b6a:	ee 2e       	mov	r14, r30
    7b6c:	ef ef       	ldi	r30, 0xFF	; 255
    7b6e:	fe 2e       	mov	r15, r30
    7b70:	ef ef       	ldi	r30, 0xFF	; 255
    7b72:	0e 2f       	mov	r16, r30
    7b74:	ef ef       	ldi	r30, 0xFF	; 255
    7b76:	1e 2f       	mov	r17, r30
    7b78:	e4 0e       	add	r14, r20
    7b7a:	f5 1e       	adc	r15, r21
    7b7c:	06 1f       	adc	r16, r22
    7b7e:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7b80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7b82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7b84:	a8 a1       	ldd	r26, Y+32	; 0x20
    7b86:	b9 a1       	ldd	r27, Y+33	; 0x21
    7b88:	02 97       	sbiw	r24, 0x02	; 2
    7b8a:	a1 09       	sbc	r26, r1
    7b8c:	b1 09       	sbc	r27, r1
    7b8e:	e8 16       	cp	r14, r24
    7b90:	f9 06       	cpc	r15, r25
    7b92:	0a 07       	cpc	r16, r26
    7b94:	1b 07       	cpc	r17, r27
    7b96:	28 f0       	brcs	.+10     	; 0x7ba2 <dir_seek+0x164>
    7b98:	20 e0       	ldi	r18, 0x00	; 0
    7b9a:	30 e0       	ldi	r19, 0x00	; 0
    7b9c:	40 e0       	ldi	r20, 0x00	; 0
    7b9e:	50 e0       	ldi	r21, 0x00	; 0
    7ba0:	12 c0       	rjmp	.+36     	; 0x7bc6 <dir_seek+0x188>
	return clst * fs->csize + fs->database;
    7ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    7ba4:	30 e0       	ldi	r19, 0x00	; 0
    7ba6:	40 e0       	ldi	r20, 0x00	; 0
    7ba8:	50 e0       	ldi	r21, 0x00	; 0
    7baa:	c8 01       	movw	r24, r16
    7bac:	b7 01       	movw	r22, r14
    7bae:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    7bb2:	9b 01       	movw	r18, r22
    7bb4:	ac 01       	movw	r20, r24
    7bb6:	8a a5       	ldd	r24, Y+42	; 0x2a
    7bb8:	9b a5       	ldd	r25, Y+43	; 0x2b
    7bba:	ac a5       	ldd	r26, Y+44	; 0x2c
    7bbc:	bd a5       	ldd	r27, Y+45	; 0x2d
    7bbe:	28 0f       	add	r18, r24
    7bc0:	39 1f       	adc	r19, r25
    7bc2:	4a 1f       	adc	r20, r26
    7bc4:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    7bc6:	c6 01       	movw	r24, r12
    7bc8:	64 e0       	ldi	r22, 0x04	; 4
    7bca:	96 95       	lsr	r25
    7bcc:	87 95       	ror	r24
    7bce:	6a 95       	dec	r22
    7bd0:	e1 f7       	brne	.-8      	; 0x7bca <dir_seek+0x18c>
    7bd2:	a0 e0       	ldi	r26, 0x00	; 0
    7bd4:	b0 e0       	ldi	r27, 0x00	; 0
    7bd6:	28 0f       	add	r18, r24
    7bd8:	39 1f       	adc	r19, r25
    7bda:	4a 1f       	adc	r20, r26
    7bdc:	5b 1f       	adc	r21, r27
    7bde:	f5 01       	movw	r30, r10
    7be0:	26 87       	std	Z+14, r18	; 0x0e
    7be2:	37 87       	std	Z+15, r19	; 0x0f
    7be4:	40 8b       	std	Z+16, r20	; 0x10
    7be6:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    7be8:	ff e0       	ldi	r31, 0x0F	; 15
    7bea:	cf 22       	and	r12, r31
    7bec:	dd 24       	eor	r13, r13
    7bee:	45 e0       	ldi	r20, 0x05	; 5
    7bf0:	cc 0c       	add	r12, r12
    7bf2:	dd 1c       	adc	r13, r13
    7bf4:	4a 95       	dec	r20
    7bf6:	e1 f7       	brne	.-8      	; 0x7bf0 <dir_seek+0x1b2>
    7bf8:	82 e3       	ldi	r24, 0x32	; 50
    7bfa:	90 e0       	ldi	r25, 0x00	; 0
    7bfc:	c8 0e       	add	r12, r24
    7bfe:	d9 1e       	adc	r13, r25
    7c00:	d5 01       	movw	r26, r10
    7c02:	8d 91       	ld	r24, X+
    7c04:	9c 91       	ld	r25, X
    7c06:	11 97       	sbiw	r26, 0x01	; 1
    7c08:	8c 0d       	add	r24, r12
    7c0a:	9d 1d       	adc	r25, r13
    7c0c:	52 96       	adiw	r26, 0x12	; 18
    7c0e:	8d 93       	st	X+, r24
    7c10:	9c 93       	st	X, r25
    7c12:	53 97       	sbiw	r26, 0x13	; 19
    7c14:	20 e0       	ldi	r18, 0x00	; 0
    7c16:	30 e0       	ldi	r19, 0x00	; 0
    7c18:	02 c0       	rjmp	.+4      	; 0x7c1e <dir_seek+0x1e0>

	return FR_OK;	/* Seek succeeded */
    7c1a:	22 e0       	ldi	r18, 0x02	; 2
    7c1c:	30 e0       	ldi	r19, 0x00	; 0
}
    7c1e:	c9 01       	movw	r24, r18
    7c20:	cd b7       	in	r28, 0x3d	; 61
    7c22:	de b7       	in	r29, 0x3e	; 62
    7c24:	ea e0       	ldi	r30, 0x0A	; 10
    7c26:	0c 94 bb 5b 	jmp	0xb776	; 0xb776 <__epilogue_restores__+0x10>

00007c2a <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7c2a:	a0 e0       	ldi	r26, 0x00	; 0
    7c2c:	b0 e0       	ldi	r27, 0x00	; 0
    7c2e:	eb e1       	ldi	r30, 0x1B	; 27
    7c30:	fe e3       	ldi	r31, 0x3E	; 62
    7c32:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    7c36:	5c 01       	movw	r10, r24
    7c38:	6a 01       	movw	r12, r20
    7c3a:	7b 01       	movw	r14, r22
    7c3c:	38 01       	movw	r6, r16
    7c3e:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    7c40:	42 30       	cpi	r20, 0x02	; 2
    7c42:	51 05       	cpc	r21, r1
    7c44:	61 05       	cpc	r22, r1
    7c46:	71 05       	cpc	r23, r1
    7c48:	08 f4       	brcc	.+2      	; 0x7c4c <put_fat+0x22>
    7c4a:	b1 c0       	rjmp	.+354    	; 0x7dae <put_fat+0x184>
    7c4c:	f5 01       	movw	r30, r10
    7c4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7c50:	97 8d       	ldd	r25, Z+31	; 0x1f
    7c52:	a0 a1       	ldd	r26, Z+32	; 0x20
    7c54:	b1 a1       	ldd	r27, Z+33	; 0x21
    7c56:	48 17       	cp	r20, r24
    7c58:	59 07       	cpc	r21, r25
    7c5a:	6a 07       	cpc	r22, r26
    7c5c:	7b 07       	cpc	r23, r27
    7c5e:	08 f0       	brcs	.+2      	; 0x7c62 <put_fat+0x38>
    7c60:	a6 c0       	rjmp	.+332    	; 0x7dae <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    7c62:	22 a0       	ldd	r2, Z+34	; 0x22
    7c64:	33 a0       	ldd	r3, Z+35	; 0x23
    7c66:	44 a0       	ldd	r4, Z+36	; 0x24
    7c68:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
    7c6a:	80 81       	ld	r24, Z
    7c6c:	82 30       	cpi	r24, 0x02	; 2
    7c6e:	09 f4       	brne	.+2      	; 0x7c72 <put_fat+0x48>
    7c70:	66 c0       	rjmp	.+204    	; 0x7d3e <put_fat+0x114>
    7c72:	83 30       	cpi	r24, 0x03	; 3
    7c74:	09 f4       	brne	.+2      	; 0x7c78 <put_fat+0x4e>
    7c76:	7a c0       	rjmp	.+244    	; 0x7d6c <put_fat+0x142>
    7c78:	81 30       	cpi	r24, 0x01	; 1
    7c7a:	19 f0       	breq	.+6      	; 0x7c82 <put_fat+0x58>
    7c7c:	42 e0       	ldi	r20, 0x02	; 2
    7c7e:	50 e0       	ldi	r21, 0x00	; 0
    7c80:	92 c0       	rjmp	.+292    	; 0x7da6 <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7c82:	ea 01       	movw	r28, r20
    7c84:	d6 95       	lsr	r29
    7c86:	c7 95       	ror	r28
    7c88:	c4 0f       	add	r28, r20
    7c8a:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    7c8c:	ae 01       	movw	r20, r28
    7c8e:	45 2f       	mov	r20, r21
    7c90:	55 27       	eor	r21, r21
    7c92:	46 95       	lsr	r20
    7c94:	60 e0       	ldi	r22, 0x00	; 0
    7c96:	70 e0       	ldi	r23, 0x00	; 0
    7c98:	42 0d       	add	r20, r2
    7c9a:	53 1d       	adc	r21, r3
    7c9c:	64 1d       	adc	r22, r4
    7c9e:	75 1d       	adc	r23, r5
    7ca0:	c5 01       	movw	r24, r10
    7ca2:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    7ca6:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7ca8:	00 97       	sbiw	r24, 0x00	; 0
    7caa:	09 f0       	breq	.+2      	; 0x7cae <put_fat+0x84>
    7cac:	7c c0       	rjmp	.+248    	; 0x7da6 <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7cae:	de 01       	movw	r26, r28
    7cb0:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7cb2:	86 01       	movw	r16, r12
    7cb4:	01 70       	andi	r16, 0x01	; 1
    7cb6:	10 70       	andi	r17, 0x00	; 0
    7cb8:	01 15       	cp	r16, r1
    7cba:	11 05       	cpc	r17, r1
    7cbc:	51 f0       	breq	.+20     	; 0x7cd2 <put_fat+0xa8>
    7cbe:	f5 01       	movw	r30, r10
    7cc0:	ea 0f       	add	r30, r26
    7cc2:	fb 1f       	adc	r31, r27
    7cc4:	82 a9       	ldd	r24, Z+50	; 0x32
    7cc6:	8f 70       	andi	r24, 0x0F	; 15
    7cc8:	96 2d       	mov	r25, r6
    7cca:	92 95       	swap	r25
    7ccc:	90 7f       	andi	r25, 0xF0	; 240
    7cce:	98 2b       	or	r25, r24
    7cd0:	01 c0       	rjmp	.+2      	; 0x7cd4 <put_fat+0xaa>
    7cd2:	96 2d       	mov	r25, r6
    7cd4:	aa 0d       	add	r26, r10
    7cd6:	bb 1d       	adc	r27, r11
    7cd8:	d2 96       	adiw	r26, 0x32	; 50
    7cda:	9c 93       	st	X, r25
			bc++;
    7cdc:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    7cde:	81 e0       	ldi	r24, 0x01	; 1
    7ce0:	f5 01       	movw	r30, r10
    7ce2:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    7ce4:	ae 01       	movw	r20, r28
    7ce6:	45 2f       	mov	r20, r21
    7ce8:	55 27       	eor	r21, r21
    7cea:	46 95       	lsr	r20
    7cec:	60 e0       	ldi	r22, 0x00	; 0
    7cee:	70 e0       	ldi	r23, 0x00	; 0
    7cf0:	42 0d       	add	r20, r2
    7cf2:	53 1d       	adc	r21, r3
    7cf4:	64 1d       	adc	r22, r4
    7cf6:	75 1d       	adc	r23, r5
    7cf8:	c5 01       	movw	r24, r10
    7cfa:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    7cfe:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7d00:	00 97       	sbiw	r24, 0x00	; 0
    7d02:	09 f0       	breq	.+2      	; 0x7d06 <put_fat+0xdc>
    7d04:	50 c0       	rjmp	.+160    	; 0x7da6 <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7d06:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7d08:	01 15       	cp	r16, r1
    7d0a:	11 05       	cpc	r17, r1
    7d0c:	49 f0       	breq	.+18     	; 0x7d20 <put_fat+0xf6>
    7d0e:	64 e0       	ldi	r22, 0x04	; 4
    7d10:	96 94       	lsr	r9
    7d12:	87 94       	ror	r8
    7d14:	77 94       	ror	r7
    7d16:	67 94       	ror	r6
    7d18:	6a 95       	dec	r22
    7d1a:	d1 f7       	brne	.-12     	; 0x7d10 <put_fat+0xe6>
    7d1c:	66 2d       	mov	r22, r6
    7d1e:	0b c0       	rjmp	.+22     	; 0x7d36 <put_fat+0x10c>
    7d20:	f5 01       	movw	r30, r10
    7d22:	ec 0f       	add	r30, r28
    7d24:	fd 1f       	adc	r31, r29
    7d26:	62 a9       	ldd	r22, Z+50	; 0x32
    7d28:	60 7f       	andi	r22, 0xF0	; 240
    7d2a:	bb 27       	eor	r27, r27
    7d2c:	a9 2d       	mov	r26, r9
    7d2e:	98 2d       	mov	r25, r8
    7d30:	87 2d       	mov	r24, r7
    7d32:	8f 70       	andi	r24, 0x0F	; 15
    7d34:	68 2b       	or	r22, r24
    7d36:	ca 0d       	add	r28, r10
    7d38:	db 1d       	adc	r29, r11
    7d3a:	6a ab       	std	Y+50, r22	; 0x32
    7d3c:	34 c0       	rjmp	.+104    	; 0x7da6 <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    7d3e:	45 2f       	mov	r20, r21
    7d40:	56 2f       	mov	r21, r22
    7d42:	67 2f       	mov	r22, r23
    7d44:	77 27       	eor	r23, r23
    7d46:	42 0d       	add	r20, r2
    7d48:	53 1d       	adc	r21, r3
    7d4a:	64 1d       	adc	r22, r4
    7d4c:	75 1d       	adc	r23, r5
    7d4e:	c5 01       	movw	r24, r10
    7d50:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    7d54:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7d56:	00 97       	sbiw	r24, 0x00	; 0
    7d58:	31 f5       	brne	.+76     	; 0x7da6 <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    7d5a:	f6 01       	movw	r30, r12
    7d5c:	ee 0f       	add	r30, r30
    7d5e:	ff 1f       	adc	r31, r31
    7d60:	f1 70       	andi	r31, 0x01	; 1
    7d62:	ea 0d       	add	r30, r10
    7d64:	fb 1d       	adc	r31, r11
    7d66:	62 aa       	std	Z+50, r6	; 0x32
    7d68:	73 aa       	std	Z+51, r7	; 0x33
    7d6a:	1d c0       	rjmp	.+58     	; 0x7da6 <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    7d6c:	87 e0       	ldi	r24, 0x07	; 7
    7d6e:	76 95       	lsr	r23
    7d70:	67 95       	ror	r22
    7d72:	57 95       	ror	r21
    7d74:	47 95       	ror	r20
    7d76:	8a 95       	dec	r24
    7d78:	d1 f7       	brne	.-12     	; 0x7d6e <put_fat+0x144>
    7d7a:	42 0d       	add	r20, r2
    7d7c:	53 1d       	adc	r21, r3
    7d7e:	64 1d       	adc	r22, r4
    7d80:	75 1d       	adc	r23, r5
    7d82:	c5 01       	movw	r24, r10
    7d84:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    7d88:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7d8a:	00 97       	sbiw	r24, 0x00	; 0
    7d8c:	61 f4       	brne	.+24     	; 0x7da6 <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    7d8e:	f6 01       	movw	r30, r12
    7d90:	ee 0f       	add	r30, r30
    7d92:	ff 1f       	adc	r31, r31
    7d94:	ee 0f       	add	r30, r30
    7d96:	ff 1f       	adc	r31, r31
    7d98:	f1 70       	andi	r31, 0x01	; 1
    7d9a:	ea 0d       	add	r30, r10
    7d9c:	fb 1d       	adc	r31, r11
    7d9e:	62 aa       	std	Z+50, r6	; 0x32
    7da0:	73 aa       	std	Z+51, r7	; 0x33
    7da2:	84 aa       	std	Z+52, r8	; 0x34
    7da4:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    7da6:	81 e0       	ldi	r24, 0x01	; 1
    7da8:	f5 01       	movw	r30, r10
    7daa:	84 83       	std	Z+4, r24	; 0x04
    7dac:	02 c0       	rjmp	.+4      	; 0x7db2 <put_fat+0x188>
    7dae:	42 e0       	ldi	r20, 0x02	; 2
    7db0:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    7db2:	ca 01       	movw	r24, r20
    7db4:	cd b7       	in	r28, 0x3d	; 61
    7db6:	de b7       	in	r29, 0x3e	; 62
    7db8:	e2 e1       	ldi	r30, 0x12	; 18
    7dba:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

00007dbe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7dbe:	a4 e0       	ldi	r26, 0x04	; 4
    7dc0:	b0 e0       	ldi	r27, 0x00	; 0
    7dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    7dc4:	fe e3       	ldi	r31, 0x3E	; 62
    7dc6:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    7dca:	1c 01       	movw	r2, r24
    7dcc:	2a 01       	movw	r4, r20
    7dce:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    7dd0:	dc 01       	movw	r26, r24
    7dd2:	5e 96       	adiw	r26, 0x1e	; 30
    7dd4:	8d 91       	ld	r24, X+
    7dd6:	9d 91       	ld	r25, X+
    7dd8:	0d 90       	ld	r0, X+
    7dda:	bc 91       	ld	r27, X
    7ddc:	a0 2d       	mov	r26, r0
    7dde:	89 83       	std	Y+1, r24	; 0x01
    7de0:	9a 83       	std	Y+2, r25	; 0x02
    7de2:	ab 83       	std	Y+3, r26	; 0x03
    7de4:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    7de6:	41 15       	cp	r20, r1
    7de8:	51 05       	cpc	r21, r1
    7dea:	61 05       	cpc	r22, r1
    7dec:	71 05       	cpc	r23, r1
    7dee:	81 f4       	brne	.+32     	; 0x7e10 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    7df0:	f1 01       	movw	r30, r2
    7df2:	82 84       	ldd	r8, Z+10	; 0x0a
    7df4:	93 84       	ldd	r9, Z+11	; 0x0b
    7df6:	a4 84       	ldd	r10, Z+12	; 0x0c
    7df8:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    7dfa:	81 14       	cp	r8, r1
    7dfc:	91 04       	cpc	r9, r1
    7dfe:	a1 04       	cpc	r10, r1
    7e00:	b1 04       	cpc	r11, r1
    7e02:	11 f1       	breq	.+68     	; 0x7e48 <create_chain+0x8a>
    7e04:	88 16       	cp	r8, r24
    7e06:	99 06       	cpc	r9, r25
    7e08:	aa 06       	cpc	r10, r26
    7e0a:	bb 06       	cpc	r11, r27
    7e0c:	e8 f4       	brcc	.+58     	; 0x7e48 <create_chain+0x8a>
    7e0e:	21 c0       	rjmp	.+66     	; 0x7e52 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7e10:	c1 01       	movw	r24, r2
    7e12:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    7e16:	9b 01       	movw	r18, r22
    7e18:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7e1a:	62 30       	cpi	r22, 0x02	; 2
    7e1c:	71 05       	cpc	r23, r1
    7e1e:	81 05       	cpc	r24, r1
    7e20:	91 05       	cpc	r25, r1
    7e22:	28 f4       	brcc	.+10     	; 0x7e2e <create_chain+0x70>
    7e24:	21 e0       	ldi	r18, 0x01	; 1
    7e26:	30 e0       	ldi	r19, 0x00	; 0
    7e28:	40 e0       	ldi	r20, 0x00	; 0
    7e2a:	50 e0       	ldi	r21, 0x00	; 0
    7e2c:	93 c0       	rjmp	.+294    	; 0x7f54 <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    7e2e:	89 81       	ldd	r24, Y+1	; 0x01
    7e30:	9a 81       	ldd	r25, Y+2	; 0x02
    7e32:	ab 81       	ldd	r26, Y+3	; 0x03
    7e34:	bc 81       	ldd	r27, Y+4	; 0x04
    7e36:	28 17       	cp	r18, r24
    7e38:	39 07       	cpc	r19, r25
    7e3a:	4a 07       	cpc	r20, r26
    7e3c:	5b 07       	cpc	r21, r27
    7e3e:	08 f4       	brcc	.+2      	; 0x7e42 <create_chain+0x84>
    7e40:	89 c0       	rjmp	.+274    	; 0x7f54 <create_chain+0x196>
    7e42:	53 01       	movw	r10, r6
    7e44:	42 01       	movw	r8, r4
    7e46:	05 c0       	rjmp	.+10     	; 0x7e52 <create_chain+0x94>
    7e48:	b1 e0       	ldi	r27, 0x01	; 1
    7e4a:	8b 2e       	mov	r8, r27
    7e4c:	91 2c       	mov	r9, r1
    7e4e:	a1 2c       	mov	r10, r1
    7e50:	b1 2c       	mov	r11, r1
    7e52:	75 01       	movw	r14, r10
    7e54:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    7e56:	08 94       	sec
    7e58:	c1 1c       	adc	r12, r1
    7e5a:	d1 1c       	adc	r13, r1
    7e5c:	e1 1c       	adc	r14, r1
    7e5e:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    7e60:	89 81       	ldd	r24, Y+1	; 0x01
    7e62:	9a 81       	ldd	r25, Y+2	; 0x02
    7e64:	ab 81       	ldd	r26, Y+3	; 0x03
    7e66:	bc 81       	ldd	r27, Y+4	; 0x04
    7e68:	c8 16       	cp	r12, r24
    7e6a:	d9 06       	cpc	r13, r25
    7e6c:	ea 06       	cpc	r14, r26
    7e6e:	fb 06       	cpc	r15, r27
    7e70:	60 f0       	brcs	.+24     	; 0x7e8a <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    7e72:	92 e0       	ldi	r25, 0x02	; 2
    7e74:	89 16       	cp	r8, r25
    7e76:	91 04       	cpc	r9, r1
    7e78:	a1 04       	cpc	r10, r1
    7e7a:	b1 04       	cpc	r11, r1
    7e7c:	08 f4       	brcc	.+2      	; 0x7e80 <create_chain+0xc2>
    7e7e:	61 c0       	rjmp	.+194    	; 0x7f42 <create_chain+0x184>
    7e80:	a2 e0       	ldi	r26, 0x02	; 2
    7e82:	ca 2e       	mov	r12, r26
    7e84:	d1 2c       	mov	r13, r1
    7e86:	e1 2c       	mov	r14, r1
    7e88:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7e8a:	c1 01       	movw	r24, r2
    7e8c:	b7 01       	movw	r22, r14
    7e8e:	a6 01       	movw	r20, r12
    7e90:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    7e94:	9b 01       	movw	r18, r22
    7e96:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    7e98:	61 15       	cp	r22, r1
    7e9a:	71 05       	cpc	r23, r1
    7e9c:	81 05       	cpc	r24, r1
    7e9e:	91 05       	cpc	r25, r1
    7ea0:	a9 f0       	breq	.+42     	; 0x7ecc <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    7ea2:	6f 3f       	cpi	r22, 0xFF	; 255
    7ea4:	af ef       	ldi	r26, 0xFF	; 255
    7ea6:	7a 07       	cpc	r23, r26
    7ea8:	af ef       	ldi	r26, 0xFF	; 255
    7eaa:	8a 07       	cpc	r24, r26
    7eac:	af ef       	ldi	r26, 0xFF	; 255
    7eae:	9a 07       	cpc	r25, r26
    7eb0:	09 f4       	brne	.+2      	; 0x7eb4 <create_chain+0xf6>
    7eb2:	50 c0       	rjmp	.+160    	; 0x7f54 <create_chain+0x196>
    7eb4:	61 30       	cpi	r22, 0x01	; 1
    7eb6:	71 05       	cpc	r23, r1
    7eb8:	81 05       	cpc	r24, r1
    7eba:	91 05       	cpc	r25, r1
    7ebc:	09 f4       	brne	.+2      	; 0x7ec0 <create_chain+0x102>
    7ebe:	4a c0       	rjmp	.+148    	; 0x7f54 <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    7ec0:	c8 14       	cp	r12, r8
    7ec2:	d9 04       	cpc	r13, r9
    7ec4:	ea 04       	cpc	r14, r10
    7ec6:	fb 04       	cpc	r15, r11
    7ec8:	31 f6       	brne	.-116    	; 0x7e56 <create_chain+0x98>
    7eca:	3b c0       	rjmp	.+118    	; 0x7f42 <create_chain+0x184>
    7ecc:	bc 2c       	mov	r11, r12
    7ece:	ad 2c       	mov	r10, r13
    7ed0:	9e 2c       	mov	r9, r14
    7ed2:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    7ed4:	c1 01       	movw	r24, r2
    7ed6:	a6 01       	movw	r20, r12
    7ed8:	b7 01       	movw	r22, r14
    7eda:	0f ef       	ldi	r16, 0xFF	; 255
    7edc:	1f ef       	ldi	r17, 0xFF	; 255
    7ede:	2f ef       	ldi	r18, 0xFF	; 255
    7ee0:	3f e0       	ldi	r19, 0x0F	; 15
    7ee2:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <put_fat>
    7ee6:	89 2b       	or	r24, r25
    7ee8:	89 f5       	brne	.+98     	; 0x7f4c <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    7eea:	41 14       	cp	r4, r1
    7eec:	51 04       	cpc	r5, r1
    7eee:	61 04       	cpc	r6, r1
    7ef0:	71 04       	cpc	r7, r1
    7ef2:	49 f0       	breq	.+18     	; 0x7f06 <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    7ef4:	c1 01       	movw	r24, r2
    7ef6:	b3 01       	movw	r22, r6
    7ef8:	a2 01       	movw	r20, r4
    7efa:	86 01       	movw	r16, r12
    7efc:	97 01       	movw	r18, r14
    7efe:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <put_fat>
    7f02:	89 2b       	or	r24, r25
    7f04:	19 f5       	brne	.+70     	; 0x7f4c <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    7f06:	f1 01       	movw	r30, r2
    7f08:	b2 86       	std	Z+10, r11	; 0x0a
    7f0a:	a3 86       	std	Z+11, r10	; 0x0b
    7f0c:	94 86       	std	Z+12, r9	; 0x0c
    7f0e:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    7f10:	86 85       	ldd	r24, Z+14	; 0x0e
    7f12:	97 85       	ldd	r25, Z+15	; 0x0f
    7f14:	a0 89       	ldd	r26, Z+16	; 0x10
    7f16:	b1 89       	ldd	r27, Z+17	; 0x11
    7f18:	8f 3f       	cpi	r24, 0xFF	; 255
    7f1a:	ff ef       	ldi	r31, 0xFF	; 255
    7f1c:	9f 07       	cpc	r25, r31
    7f1e:	ff ef       	ldi	r31, 0xFF	; 255
    7f20:	af 07       	cpc	r26, r31
    7f22:	ff ef       	ldi	r31, 0xFF	; 255
    7f24:	bf 07       	cpc	r27, r31
    7f26:	51 f0       	breq	.+20     	; 0x7f3c <create_chain+0x17e>
		fs->free_clust--;
    7f28:	01 97       	sbiw	r24, 0x01	; 1
    7f2a:	a1 09       	sbc	r26, r1
    7f2c:	b1 09       	sbc	r27, r1
    7f2e:	f1 01       	movw	r30, r2
    7f30:	86 87       	std	Z+14, r24	; 0x0e
    7f32:	97 87       	std	Z+15, r25	; 0x0f
    7f34:	a0 8b       	std	Z+16, r26	; 0x10
    7f36:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    7f38:	81 e0       	ldi	r24, 0x01	; 1
    7f3a:	81 87       	std	Z+9, r24	; 0x09
    7f3c:	a7 01       	movw	r20, r14
    7f3e:	96 01       	movw	r18, r12
    7f40:	09 c0       	rjmp	.+18     	; 0x7f54 <create_chain+0x196>
    7f42:	20 e0       	ldi	r18, 0x00	; 0
    7f44:	30 e0       	ldi	r19, 0x00	; 0
    7f46:	40 e0       	ldi	r20, 0x00	; 0
    7f48:	50 e0       	ldi	r21, 0x00	; 0
    7f4a:	04 c0       	rjmp	.+8      	; 0x7f54 <create_chain+0x196>
    7f4c:	2f ef       	ldi	r18, 0xFF	; 255
    7f4e:	3f ef       	ldi	r19, 0xFF	; 255
    7f50:	4f ef       	ldi	r20, 0xFF	; 255
    7f52:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    7f54:	b9 01       	movw	r22, r18
    7f56:	ca 01       	movw	r24, r20
    7f58:	24 96       	adiw	r28, 0x04	; 4
    7f5a:	e2 e1       	ldi	r30, 0x12	; 18
    7f5c:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

00007f60 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    7f60:	a6 e0       	ldi	r26, 0x06	; 6
    7f62:	b0 e0       	ldi	r27, 0x00	; 0
    7f64:	e6 eb       	ldi	r30, 0xB6	; 182
    7f66:	ff e3       	ldi	r31, 0x3F	; 63
    7f68:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    7f6c:	8d 83       	std	Y+5, r24	; 0x05
    7f6e:	9e 83       	std	Y+6, r25	; 0x06
    7f70:	3a 01       	movw	r6, r20
    7f72:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7f74:	dc 01       	movw	r26, r24
    7f76:	12 96       	adiw	r26, 0x02	; 2
    7f78:	6d 91       	ld	r22, X+
    7f7a:	7c 91       	ld	r23, X
    7f7c:	13 97       	sbiw	r26, 0x03	; 3
    7f7e:	8d 91       	ld	r24, X+
    7f80:	9c 91       	ld	r25, X
    7f82:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <validate>
    7f86:	8b 83       	std	Y+3, r24	; 0x03
    7f88:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7f8a:	89 2b       	or	r24, r25
    7f8c:	09 f0       	breq	.+2      	; 0x7f90 <f_lseek+0x30>
    7f8e:	c7 c1       	rjmp	.+910    	; 0x831e <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7f90:	ed 81       	ldd	r30, Y+5	; 0x05
    7f92:	fe 81       	ldd	r31, Y+6	; 0x06
    7f94:	84 81       	ldd	r24, Z+4	; 0x04
    7f96:	87 fd       	sbrc	r24, 7
    7f98:	92 c0       	rjmp	.+292    	; 0x80be <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    7f9a:	ad 81       	ldd	r26, Y+5	; 0x05
    7f9c:	be 81       	ldd	r27, Y+6	; 0x06
    7f9e:	1a 96       	adiw	r26, 0x0a	; 10
    7fa0:	ad 90       	ld	r10, X+
    7fa2:	bd 90       	ld	r11, X+
    7fa4:	cd 90       	ld	r12, X+
    7fa6:	dc 90       	ld	r13, X
    7fa8:	1d 97       	sbiw	r26, 0x0d	; 13
    7faa:	a6 14       	cp	r10, r6
    7fac:	b7 04       	cpc	r11, r7
    7fae:	c8 04       	cpc	r12, r8
    7fb0:	d9 04       	cpc	r13, r9
    7fb2:	10 f4       	brcc	.+4      	; 0x7fb8 <f_lseek+0x58>
    7fb4:	81 ff       	sbrs	r24, 1
    7fb6:	02 c0       	rjmp	.+4      	; 0x7fbc <f_lseek+0x5c>
    7fb8:	64 01       	movw	r12, r8
    7fba:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    7fbc:	ed 81       	ldd	r30, Y+5	; 0x05
    7fbe:	fe 81       	ldd	r31, Y+6	; 0x06
    7fc0:	26 81       	ldd	r18, Z+6	; 0x06
    7fc2:	37 81       	ldd	r19, Z+7	; 0x07
    7fc4:	40 85       	ldd	r20, Z+8	; 0x08
    7fc6:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    7fc8:	16 82       	std	Z+6, r1	; 0x06
    7fca:	17 82       	std	Z+7, r1	; 0x07
    7fcc:	10 86       	std	Z+8, r1	; 0x08
    7fce:	11 86       	std	Z+9, r1	; 0x09
    7fd0:	8f ef       	ldi	r24, 0xFF	; 255
    7fd2:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    7fd4:	a1 14       	cp	r10, r1
    7fd6:	b1 04       	cpc	r11, r1
    7fd8:	c1 04       	cpc	r12, r1
    7fda:	d1 04       	cpc	r13, r1
    7fdc:	09 f4       	brne	.+2      	; 0x7fe0 <f_lseek+0x80>
    7fde:	6b c1       	rjmp	.+726    	; 0x82b6 <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    7fe0:	01 90       	ld	r0, Z+
    7fe2:	f0 81       	ld	r31, Z
    7fe4:	e0 2d       	mov	r30, r0
    7fe6:	e9 83       	std	Y+1, r30	; 0x01
    7fe8:	fa 83       	std	Y+2, r31	; 0x02
    7fea:	82 81       	ldd	r24, Z+2	; 0x02
    7fec:	68 2e       	mov	r6, r24
    7fee:	77 24       	eor	r7, r7
    7ff0:	88 24       	eor	r8, r8
    7ff2:	99 24       	eor	r9, r9
    7ff4:	69 e0       	ldi	r22, 0x09	; 9
    7ff6:	66 0c       	add	r6, r6
    7ff8:	77 1c       	adc	r7, r7
    7ffa:	88 1c       	adc	r8, r8
    7ffc:	99 1c       	adc	r9, r9
    7ffe:	6a 95       	dec	r22
    8000:	d1 f7       	brne	.-12     	; 0x7ff6 <f_lseek+0x96>
		if (ifptr > 0 &&
    8002:	21 15       	cp	r18, r1
    8004:	31 05       	cpc	r19, r1
    8006:	41 05       	cpc	r20, r1
    8008:	51 05       	cpc	r21, r1
    800a:	c1 f1       	breq	.+112    	; 0x807c <f_lseek+0x11c>
    800c:	19 01       	movw	r2, r18
    800e:	2a 01       	movw	r4, r20
    8010:	08 94       	sec
    8012:	21 08       	sbc	r2, r1
    8014:	31 08       	sbc	r3, r1
    8016:	41 08       	sbc	r4, r1
    8018:	51 08       	sbc	r5, r1
    801a:	c6 01       	movw	r24, r12
    801c:	b5 01       	movw	r22, r10
    801e:	61 50       	subi	r22, 0x01	; 1
    8020:	70 40       	sbci	r23, 0x00	; 0
    8022:	80 40       	sbci	r24, 0x00	; 0
    8024:	90 40       	sbci	r25, 0x00	; 0
    8026:	a4 01       	movw	r20, r8
    8028:	93 01       	movw	r18, r6
    802a:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    802e:	79 01       	movw	r14, r18
    8030:	8a 01       	movw	r16, r20
    8032:	c2 01       	movw	r24, r4
    8034:	b1 01       	movw	r22, r2
    8036:	a4 01       	movw	r20, r8
    8038:	93 01       	movw	r18, r6
    803a:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    803e:	e2 16       	cp	r14, r18
    8040:	f3 06       	cpc	r15, r19
    8042:	04 07       	cpc	r16, r20
    8044:	15 07       	cpc	r17, r21
    8046:	d0 f0       	brcs	.+52     	; 0x807c <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    8048:	88 27       	eor	r24, r24
    804a:	99 27       	eor	r25, r25
    804c:	dc 01       	movw	r26, r24
    804e:	86 19       	sub	r24, r6
    8050:	97 09       	sbc	r25, r7
    8052:	a8 09       	sbc	r26, r8
    8054:	b9 09       	sbc	r27, r9
    8056:	82 21       	and	r24, r2
    8058:	93 21       	and	r25, r3
    805a:	a4 21       	and	r26, r4
    805c:	b5 21       	and	r27, r5
    805e:	ed 81       	ldd	r30, Y+5	; 0x05
    8060:	fe 81       	ldd	r31, Y+6	; 0x06
    8062:	86 83       	std	Z+6, r24	; 0x06
    8064:	97 83       	std	Z+7, r25	; 0x07
    8066:	a0 87       	std	Z+8, r26	; 0x08
    8068:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    806a:	a8 1a       	sub	r10, r24
    806c:	b9 0a       	sbc	r11, r25
    806e:	ca 0a       	sbc	r12, r26
    8070:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    8072:	42 89       	ldd	r20, Z+18	; 0x12
    8074:	53 89       	ldd	r21, Z+19	; 0x13
    8076:	64 89       	ldd	r22, Z+20	; 0x14
    8078:	75 89       	ldd	r23, Z+21	; 0x15
    807a:	47 c0       	rjmp	.+142    	; 0x810a <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    807c:	ad 81       	ldd	r26, Y+5	; 0x05
    807e:	be 81       	ldd	r27, Y+6	; 0x06
    8080:	1e 96       	adiw	r26, 0x0e	; 14
    8082:	4d 91       	ld	r20, X+
    8084:	5d 91       	ld	r21, X+
    8086:	6d 91       	ld	r22, X+
    8088:	7c 91       	ld	r23, X
    808a:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    808c:	41 15       	cp	r20, r1
    808e:	51 05       	cpc	r21, r1
    8090:	61 05       	cpc	r22, r1
    8092:	71 05       	cpc	r23, r1
    8094:	a1 f5       	brne	.+104    	; 0x80fe <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    8096:	89 81       	ldd	r24, Y+1	; 0x01
    8098:	9a 81       	ldd	r25, Y+2	; 0x02
    809a:	40 e0       	ldi	r20, 0x00	; 0
    809c:	50 e0       	ldi	r21, 0x00	; 0
    809e:	60 e0       	ldi	r22, 0x00	; 0
    80a0:	70 e0       	ldi	r23, 0x00	; 0
    80a2:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <create_chain>
    80a6:	ab 01       	movw	r20, r22
    80a8:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    80aa:	41 30       	cpi	r20, 0x01	; 1
    80ac:	51 05       	cpc	r21, r1
    80ae:	61 05       	cpc	r22, r1
    80b0:	71 05       	cpc	r23, r1
    80b2:	51 f4       	brne	.+20     	; 0x80c8 <f_lseek+0x168>
    80b4:	ed 81       	ldd	r30, Y+5	; 0x05
    80b6:	fe 81       	ldd	r31, Y+6	; 0x06
    80b8:	84 81       	ldd	r24, Z+4	; 0x04
    80ba:	80 68       	ori	r24, 0x80	; 128
    80bc:	84 83       	std	Z+4, r24	; 0x04
    80be:	82 e0       	ldi	r24, 0x02	; 2
    80c0:	90 e0       	ldi	r25, 0x00	; 0
    80c2:	8b 83       	std	Y+3, r24	; 0x03
    80c4:	9c 83       	std	Y+4, r25	; 0x04
    80c6:	2b c1       	rjmp	.+598    	; 0x831e <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    80c8:	4f 3f       	cpi	r20, 0xFF	; 255
    80ca:	9f ef       	ldi	r25, 0xFF	; 255
    80cc:	59 07       	cpc	r21, r25
    80ce:	9f ef       	ldi	r25, 0xFF	; 255
    80d0:	69 07       	cpc	r22, r25
    80d2:	9f ef       	ldi	r25, 0xFF	; 255
    80d4:	79 07       	cpc	r23, r25
    80d6:	59 f4       	brne	.+22     	; 0x80ee <f_lseek+0x18e>
    80d8:	ad 81       	ldd	r26, Y+5	; 0x05
    80da:	be 81       	ldd	r27, Y+6	; 0x06
    80dc:	14 96       	adiw	r26, 0x04	; 4
    80de:	8c 91       	ld	r24, X
    80e0:	14 97       	sbiw	r26, 0x04	; 4
    80e2:	80 68       	ori	r24, 0x80	; 128
    80e4:	14 96       	adiw	r26, 0x04	; 4
    80e6:	8c 93       	st	X, r24
    80e8:	e1 e0       	ldi	r30, 0x01	; 1
    80ea:	f0 e0       	ldi	r31, 0x00	; 0
    80ec:	d7 c0       	rjmp	.+430    	; 0x829c <f_lseek+0x33c>
				fp->org_clust = clst;
    80ee:	ad 81       	ldd	r26, Y+5	; 0x05
    80f0:	be 81       	ldd	r27, Y+6	; 0x06
    80f2:	1e 96       	adiw	r26, 0x0e	; 14
    80f4:	4d 93       	st	X+, r20
    80f6:	5d 93       	st	X+, r21
    80f8:	6d 93       	st	X+, r22
    80fa:	7c 93       	st	X, r23
    80fc:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    80fe:	ed 81       	ldd	r30, Y+5	; 0x05
    8100:	fe 81       	ldd	r31, Y+6	; 0x06
    8102:	42 8b       	std	Z+18, r20	; 0x12
    8104:	53 8b       	std	Z+19, r21	; 0x13
    8106:	64 8b       	std	Z+20, r22	; 0x14
    8108:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    810a:	41 15       	cp	r20, r1
    810c:	51 05       	cpc	r21, r1
    810e:	61 05       	cpc	r22, r1
    8110:	71 05       	cpc	r23, r1
    8112:	09 f0       	breq	.+2      	; 0x8116 <f_lseek+0x1b6>
    8114:	59 c0       	rjmp	.+178    	; 0x81c8 <f_lseek+0x268>
    8116:	cf c0       	rjmp	.+414    	; 0x82b6 <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    8118:	ad 81       	ldd	r26, Y+5	; 0x05
    811a:	be 81       	ldd	r27, Y+6	; 0x06
    811c:	14 96       	adiw	r26, 0x04	; 4
    811e:	8c 91       	ld	r24, X
    8120:	14 97       	sbiw	r26, 0x04	; 4
    8122:	2d 91       	ld	r18, X+
    8124:	3c 91       	ld	r19, X
    8126:	81 ff       	sbrs	r24, 1
    8128:	0d c0       	rjmp	.+26     	; 0x8144 <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    812a:	c9 01       	movw	r24, r18
    812c:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <create_chain>
    8130:	ab 01       	movw	r20, r22
    8132:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    8134:	41 15       	cp	r20, r1
    8136:	51 05       	cpc	r21, r1
    8138:	61 05       	cpc	r22, r1
    813a:	71 05       	cpc	r23, r1
    813c:	41 f4       	brne	.+16     	; 0x814e <f_lseek+0x1ee>
    813e:	64 01       	movw	r12, r8
    8140:	53 01       	movw	r10, r6
    8142:	48 c0       	rjmp	.+144    	; 0x81d4 <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    8144:	c9 01       	movw	r24, r18
    8146:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    814a:	ab 01       	movw	r20, r22
    814c:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    814e:	4f 3f       	cpi	r20, 0xFF	; 255
    8150:	bf ef       	ldi	r27, 0xFF	; 255
    8152:	5b 07       	cpc	r21, r27
    8154:	bf ef       	ldi	r27, 0xFF	; 255
    8156:	6b 07       	cpc	r22, r27
    8158:	bf ef       	ldi	r27, 0xFF	; 255
    815a:	7b 07       	cpc	r23, r27
    815c:	41 f4       	brne	.+16     	; 0x816e <f_lseek+0x20e>
    815e:	ed 81       	ldd	r30, Y+5	; 0x05
    8160:	fe 81       	ldd	r31, Y+6	; 0x06
    8162:	84 81       	ldd	r24, Z+4	; 0x04
    8164:	80 68       	ori	r24, 0x80	; 128
    8166:	84 83       	std	Z+4, r24	; 0x04
    8168:	81 e0       	ldi	r24, 0x01	; 1
    816a:	90 e0       	ldi	r25, 0x00	; 0
    816c:	aa cf       	rjmp	.-172    	; 0x80c2 <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    816e:	42 30       	cpi	r20, 0x02	; 2
    8170:	51 05       	cpc	r21, r1
    8172:	61 05       	cpc	r22, r1
    8174:	71 05       	cpc	r23, r1
    8176:	08 f4       	brcc	.+2      	; 0x817a <f_lseek+0x21a>
    8178:	9d cf       	rjmp	.-198    	; 0x80b4 <f_lseek+0x154>
    817a:	ad 81       	ldd	r26, Y+5	; 0x05
    817c:	be 81       	ldd	r27, Y+6	; 0x06
    817e:	ed 91       	ld	r30, X+
    8180:	fc 91       	ld	r31, X
    8182:	86 8d       	ldd	r24, Z+30	; 0x1e
    8184:	97 8d       	ldd	r25, Z+31	; 0x1f
    8186:	a0 a1       	ldd	r26, Z+32	; 0x20
    8188:	b1 a1       	ldd	r27, Z+33	; 0x21
    818a:	48 17       	cp	r20, r24
    818c:	59 07       	cpc	r21, r25
    818e:	6a 07       	cpc	r22, r26
    8190:	7b 07       	cpc	r23, r27
    8192:	08 f0       	brcs	.+2      	; 0x8196 <f_lseek+0x236>
    8194:	8f cf       	rjmp	.-226    	; 0x80b4 <f_lseek+0x154>
				fp->curr_clust = clst;
    8196:	ad 81       	ldd	r26, Y+5	; 0x05
    8198:	be 81       	ldd	r27, Y+6	; 0x06
    819a:	52 96       	adiw	r26, 0x12	; 18
    819c:	4d 93       	st	X+, r20
    819e:	5d 93       	st	X+, r21
    81a0:	6d 93       	st	X+, r22
    81a2:	7c 93       	st	X, r23
    81a4:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    81a6:	fd 01       	movw	r30, r26
    81a8:	86 81       	ldd	r24, Z+6	; 0x06
    81aa:	97 81       	ldd	r25, Z+7	; 0x07
    81ac:	a0 85       	ldd	r26, Z+8	; 0x08
    81ae:	b1 85       	ldd	r27, Z+9	; 0x09
    81b0:	86 0d       	add	r24, r6
    81b2:	97 1d       	adc	r25, r7
    81b4:	a8 1d       	adc	r26, r8
    81b6:	b9 1d       	adc	r27, r9
    81b8:	86 83       	std	Z+6, r24	; 0x06
    81ba:	97 83       	std	Z+7, r25	; 0x07
    81bc:	a0 87       	std	Z+8, r26	; 0x08
    81be:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    81c0:	a6 18       	sub	r10, r6
    81c2:	b7 08       	sbc	r11, r7
    81c4:	c8 08       	sbc	r12, r8
    81c6:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    81c8:	6a 14       	cp	r6, r10
    81ca:	7b 04       	cpc	r7, r11
    81cc:	8c 04       	cpc	r8, r12
    81ce:	9d 04       	cpc	r9, r13
    81d0:	08 f4       	brcc	.+2      	; 0x81d4 <f_lseek+0x274>
    81d2:	a2 cf       	rjmp	.-188    	; 0x8118 <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    81d4:	ed 81       	ldd	r30, Y+5	; 0x05
    81d6:	fe 81       	ldd	r31, Y+6	; 0x06
    81d8:	86 81       	ldd	r24, Z+6	; 0x06
    81da:	97 81       	ldd	r25, Z+7	; 0x07
    81dc:	a0 85       	ldd	r26, Z+8	; 0x08
    81de:	b1 85       	ldd	r27, Z+9	; 0x09
    81e0:	8a 0d       	add	r24, r10
    81e2:	9b 1d       	adc	r25, r11
    81e4:	ac 1d       	adc	r26, r12
    81e6:	bd 1d       	adc	r27, r13
    81e8:	86 83       	std	Z+6, r24	; 0x06
    81ea:	97 83       	std	Z+7, r25	; 0x07
    81ec:	a0 87       	std	Z+8, r26	; 0x08
    81ee:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    81f0:	d6 01       	movw	r26, r12
    81f2:	c5 01       	movw	r24, r10
    81f4:	29 e0       	ldi	r18, 0x09	; 9
    81f6:	b6 95       	lsr	r27
    81f8:	a7 95       	ror	r26
    81fa:	97 95       	ror	r25
    81fc:	87 95       	ror	r24
    81fe:	2a 95       	dec	r18
    8200:	d1 f7       	brne	.-12     	; 0x81f6 <f_lseek+0x296>
    8202:	e8 2e       	mov	r14, r24
    8204:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    8206:	8f ef       	ldi	r24, 0xFF	; 255
    8208:	91 e0       	ldi	r25, 0x01	; 1
    820a:	a0 e0       	ldi	r26, 0x00	; 0
    820c:	b0 e0       	ldi	r27, 0x00	; 0
    820e:	a8 22       	and	r10, r24
    8210:	b9 22       	and	r11, r25
    8212:	ca 22       	and	r12, r26
    8214:	db 22       	and	r13, r27
    8216:	a1 14       	cp	r10, r1
    8218:	b1 04       	cpc	r11, r1
    821a:	c1 04       	cpc	r12, r1
    821c:	d1 04       	cpc	r13, r1
    821e:	09 f4       	brne	.+2      	; 0x8222 <f_lseek+0x2c2>
    8220:	4a c0       	rjmp	.+148    	; 0x82b6 <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    8222:	80 80       	ld	r8, Z
    8224:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8226:	8e ef       	ldi	r24, 0xFE	; 254
    8228:	a8 2e       	mov	r10, r24
    822a:	8f ef       	ldi	r24, 0xFF	; 255
    822c:	b8 2e       	mov	r11, r24
    822e:	8f ef       	ldi	r24, 0xFF	; 255
    8230:	c8 2e       	mov	r12, r24
    8232:	8f ef       	ldi	r24, 0xFF	; 255
    8234:	d8 2e       	mov	r13, r24
    8236:	a4 0e       	add	r10, r20
    8238:	b5 1e       	adc	r11, r21
    823a:	c6 1e       	adc	r12, r22
    823c:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    823e:	f4 01       	movw	r30, r8
    8240:	86 8d       	ldd	r24, Z+30	; 0x1e
    8242:	97 8d       	ldd	r25, Z+31	; 0x1f
    8244:	a0 a1       	ldd	r26, Z+32	; 0x20
    8246:	b1 a1       	ldd	r27, Z+33	; 0x21
    8248:	02 97       	sbiw	r24, 0x02	; 2
    824a:	a1 09       	sbc	r26, r1
    824c:	b1 09       	sbc	r27, r1
    824e:	a8 16       	cp	r10, r24
    8250:	b9 06       	cpc	r11, r25
    8252:	ca 06       	cpc	r12, r26
    8254:	db 06       	cpc	r13, r27
    8256:	c0 f4       	brcc	.+48     	; 0x8288 <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    8258:	22 81       	ldd	r18, Z+2	; 0x02
    825a:	30 e0       	ldi	r19, 0x00	; 0
    825c:	40 e0       	ldi	r20, 0x00	; 0
    825e:	50 e0       	ldi	r21, 0x00	; 0
    8260:	c6 01       	movw	r24, r12
    8262:	b5 01       	movw	r22, r10
    8264:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    8268:	9b 01       	movw	r18, r22
    826a:	ac 01       	movw	r20, r24
    826c:	f4 01       	movw	r30, r8
    826e:	82 a5       	ldd	r24, Z+42	; 0x2a
    8270:	93 a5       	ldd	r25, Z+43	; 0x2b
    8272:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8274:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8276:	28 0f       	add	r18, r24
    8278:	39 1f       	adc	r19, r25
    827a:	4a 1f       	adc	r20, r26
    827c:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    827e:	21 15       	cp	r18, r1
    8280:	31 05       	cpc	r19, r1
    8282:	41 05       	cpc	r20, r1
    8284:	51 05       	cpc	r21, r1
    8286:	69 f4       	brne	.+26     	; 0x82a2 <f_lseek+0x342>
    8288:	ad 81       	ldd	r26, Y+5	; 0x05
    828a:	be 81       	ldd	r27, Y+6	; 0x06
    828c:	14 96       	adiw	r26, 0x04	; 4
    828e:	8c 91       	ld	r24, X
    8290:	14 97       	sbiw	r26, 0x04	; 4
    8292:	80 68       	ori	r24, 0x80	; 128
    8294:	14 96       	adiw	r26, 0x04	; 4
    8296:	8c 93       	st	X, r24
    8298:	e2 e0       	ldi	r30, 0x02	; 2
    829a:	f0 e0       	ldi	r31, 0x00	; 0
    829c:	eb 83       	std	Y+3, r30	; 0x03
    829e:	fc 83       	std	Y+4, r31	; 0x04
    82a0:	3e c0       	rjmp	.+124    	; 0x831e <f_lseek+0x3be>
				nsect += fp->csect;
    82a2:	2e 0d       	add	r18, r14
    82a4:	31 1d       	adc	r19, r1
    82a6:	41 1d       	adc	r20, r1
    82a8:	51 1d       	adc	r21, r1
				fp->csect++;
    82aa:	e3 94       	inc	r14
    82ac:	ad 81       	ldd	r26, Y+5	; 0x05
    82ae:	be 81       	ldd	r27, Y+6	; 0x06
    82b0:	15 96       	adiw	r26, 0x05	; 5
    82b2:	ec 92       	st	X, r14
    82b4:	04 c0       	rjmp	.+8      	; 0x82be <f_lseek+0x35e>
    82b6:	20 e0       	ldi	r18, 0x00	; 0
    82b8:	30 e0       	ldi	r19, 0x00	; 0
    82ba:	40 e0       	ldi	r20, 0x00	; 0
    82bc:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    82be:	ed 81       	ldd	r30, Y+5	; 0x05
    82c0:	fe 81       	ldd	r31, Y+6	; 0x06
    82c2:	86 81       	ldd	r24, Z+6	; 0x06
    82c4:	97 81       	ldd	r25, Z+7	; 0x07
    82c6:	a0 85       	ldd	r26, Z+8	; 0x08
    82c8:	b1 85       	ldd	r27, Z+9	; 0x09
    82ca:	91 70       	andi	r25, 0x01	; 1
    82cc:	a0 70       	andi	r26, 0x00	; 0
    82ce:	b0 70       	andi	r27, 0x00	; 0
    82d0:	00 97       	sbiw	r24, 0x00	; 0
    82d2:	a1 05       	cpc	r26, r1
    82d4:	b1 05       	cpc	r27, r1
    82d6:	69 f0       	breq	.+26     	; 0x82f2 <f_lseek+0x392>
    82d8:	86 89       	ldd	r24, Z+22	; 0x16
    82da:	97 89       	ldd	r25, Z+23	; 0x17
    82dc:	a0 8d       	ldd	r26, Z+24	; 0x18
    82de:	b1 8d       	ldd	r27, Z+25	; 0x19
    82e0:	28 17       	cp	r18, r24
    82e2:	39 07       	cpc	r19, r25
    82e4:	4a 07       	cpc	r20, r26
    82e6:	5b 07       	cpc	r21, r27
    82e8:	21 f0       	breq	.+8      	; 0x82f2 <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    82ea:	26 8b       	std	Z+22, r18	; 0x16
    82ec:	37 8b       	std	Z+23, r19	; 0x17
    82ee:	40 8f       	std	Z+24, r20	; 0x18
    82f0:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    82f2:	ed 81       	ldd	r30, Y+5	; 0x05
    82f4:	fe 81       	ldd	r31, Y+6	; 0x06
    82f6:	26 81       	ldd	r18, Z+6	; 0x06
    82f8:	37 81       	ldd	r19, Z+7	; 0x07
    82fa:	40 85       	ldd	r20, Z+8	; 0x08
    82fc:	51 85       	ldd	r21, Z+9	; 0x09
    82fe:	82 85       	ldd	r24, Z+10	; 0x0a
    8300:	93 85       	ldd	r25, Z+11	; 0x0b
    8302:	a4 85       	ldd	r26, Z+12	; 0x0c
    8304:	b5 85       	ldd	r27, Z+13	; 0x0d
    8306:	82 17       	cp	r24, r18
    8308:	93 07       	cpc	r25, r19
    830a:	a4 07       	cpc	r26, r20
    830c:	b5 07       	cpc	r27, r21
    830e:	38 f4       	brcc	.+14     	; 0x831e <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    8310:	22 87       	std	Z+10, r18	; 0x0a
    8312:	33 87       	std	Z+11, r19	; 0x0b
    8314:	44 87       	std	Z+12, r20	; 0x0c
    8316:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    8318:	84 81       	ldd	r24, Z+4	; 0x04
    831a:	80 62       	ori	r24, 0x20	; 32
    831c:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    831e:	8b 81       	ldd	r24, Y+3	; 0x03
    8320:	9c 81       	ldd	r25, Y+4	; 0x04
    8322:	26 96       	adiw	r28, 0x06	; 6
    8324:	e2 e1       	ldi	r30, 0x12	; 18
    8326:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

0000832a <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    832a:	a0 e0       	ldi	r26, 0x00	; 0
    832c:	b0 e0       	ldi	r27, 0x00	; 0
    832e:	eb e9       	ldi	r30, 0x9B	; 155
    8330:	f1 e4       	ldi	r31, 0x41	; 65
    8332:	0c 94 9e 5b 	jmp	0xb73c	; 0xb73c <__prologue_saves__+0xe>
    8336:	ec 01       	movw	r28, r24
    8338:	7a 01       	movw	r14, r20
    833a:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    833c:	42 30       	cpi	r20, 0x02	; 2
    833e:	51 05       	cpc	r21, r1
    8340:	61 05       	cpc	r22, r1
    8342:	71 05       	cpc	r23, r1
    8344:	08 f4       	brcc	.+2      	; 0x8348 <remove_chain+0x1e>
    8346:	5a c0       	rjmp	.+180    	; 0x83fc <remove_chain+0xd2>
    8348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    834a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    834c:	a8 a1       	ldd	r26, Y+32	; 0x20
    834e:	b9 a1       	ldd	r27, Y+33	; 0x21
    8350:	48 17       	cp	r20, r24
    8352:	59 07       	cpc	r21, r25
    8354:	6a 07       	cpc	r22, r26
    8356:	7b 07       	cpc	r23, r27
    8358:	08 f4       	brcc	.+2      	; 0x835c <remove_chain+0x32>
    835a:	43 c0       	rjmp	.+134    	; 0x83e2 <remove_chain+0xb8>
    835c:	4f c0       	rjmp	.+158    	; 0x83fc <remove_chain+0xd2>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    835e:	ce 01       	movw	r24, r28
    8360:	b8 01       	movw	r22, r16
    8362:	a7 01       	movw	r20, r14
    8364:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    8368:	5b 01       	movw	r10, r22
    836a:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    836c:	61 15       	cp	r22, r1
    836e:	71 05       	cpc	r23, r1
    8370:	81 05       	cpc	r24, r1
    8372:	91 05       	cpc	r25, r1
    8374:	09 f4       	brne	.+2      	; 0x8378 <remove_chain+0x4e>
    8376:	45 c0       	rjmp	.+138    	; 0x8402 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    8378:	81 e0       	ldi	r24, 0x01	; 1
    837a:	a8 16       	cp	r10, r24
    837c:	b1 04       	cpc	r11, r1
    837e:	c1 04       	cpc	r12, r1
    8380:	d1 04       	cpc	r13, r1
    8382:	e1 f1       	breq	.+120    	; 0x83fc <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    8384:	2f ef       	ldi	r18, 0xFF	; 255
    8386:	a2 16       	cp	r10, r18
    8388:	2f ef       	ldi	r18, 0xFF	; 255
    838a:	b2 06       	cpc	r11, r18
    838c:	2f ef       	ldi	r18, 0xFF	; 255
    838e:	c2 06       	cpc	r12, r18
    8390:	2f ef       	ldi	r18, 0xFF	; 255
    8392:	d2 06       	cpc	r13, r18
    8394:	19 f4       	brne	.+6      	; 0x839c <remove_chain+0x72>
    8396:	21 e0       	ldi	r18, 0x01	; 1
    8398:	30 e0       	ldi	r19, 0x00	; 0
    839a:	35 c0       	rjmp	.+106    	; 0x8406 <remove_chain+0xdc>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    839c:	ce 01       	movw	r24, r28
    839e:	b8 01       	movw	r22, r16
    83a0:	a7 01       	movw	r20, r14
    83a2:	00 e0       	ldi	r16, 0x00	; 0
    83a4:	10 e0       	ldi	r17, 0x00	; 0
    83a6:	20 e0       	ldi	r18, 0x00	; 0
    83a8:	30 e0       	ldi	r19, 0x00	; 0
    83aa:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <put_fat>
    83ae:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    83b0:	00 97       	sbiw	r24, 0x00	; 0
    83b2:	49 f5       	brne	.+82     	; 0x8406 <remove_chain+0xdc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    83b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    83b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    83b8:	a8 89       	ldd	r26, Y+16	; 0x10
    83ba:	b9 89       	ldd	r27, Y+17	; 0x11
    83bc:	8f 3f       	cpi	r24, 0xFF	; 255
    83be:	2f ef       	ldi	r18, 0xFF	; 255
    83c0:	92 07       	cpc	r25, r18
    83c2:	2f ef       	ldi	r18, 0xFF	; 255
    83c4:	a2 07       	cpc	r26, r18
    83c6:	2f ef       	ldi	r18, 0xFF	; 255
    83c8:	b2 07       	cpc	r27, r18
    83ca:	41 f0       	breq	.+16     	; 0x83dc <remove_chain+0xb2>
				fs->free_clust++;
    83cc:	01 96       	adiw	r24, 0x01	; 1
    83ce:	a1 1d       	adc	r26, r1
    83d0:	b1 1d       	adc	r27, r1
    83d2:	8e 87       	std	Y+14, r24	; 0x0e
    83d4:	9f 87       	std	Y+15, r25	; 0x0f
    83d6:	a8 8b       	std	Y+16, r26	; 0x10
    83d8:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    83da:	99 86       	std	Y+9, r9	; 0x09
    83dc:	86 01       	movw	r16, r12
    83de:	75 01       	movw	r14, r10
    83e0:	02 c0       	rjmp	.+4      	; 0x83e6 <remove_chain+0xbc>
    83e2:	99 24       	eor	r9, r9
    83e4:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    83e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    83e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    83ea:	a8 a1       	ldd	r26, Y+32	; 0x20
    83ec:	b9 a1       	ldd	r27, Y+33	; 0x21
    83ee:	e8 16       	cp	r14, r24
    83f0:	f9 06       	cpc	r15, r25
    83f2:	0a 07       	cpc	r16, r26
    83f4:	1b 07       	cpc	r17, r27
    83f6:	08 f4       	brcc	.+2      	; 0x83fa <remove_chain+0xd0>
    83f8:	b2 cf       	rjmp	.-156    	; 0x835e <remove_chain+0x34>
    83fa:	03 c0       	rjmp	.+6      	; 0x8402 <remove_chain+0xd8>
    83fc:	22 e0       	ldi	r18, 0x02	; 2
    83fe:	30 e0       	ldi	r19, 0x00	; 0
    8400:	02 c0       	rjmp	.+4      	; 0x8406 <remove_chain+0xdc>
    8402:	20 e0       	ldi	r18, 0x00	; 0
    8404:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    8406:	c9 01       	movw	r24, r18
    8408:	cd b7       	in	r28, 0x3d	; 61
    840a:	de b7       	in	r29, 0x3e	; 62
    840c:	eb e0       	ldi	r30, 0x0B	; 11
    840e:	0c 94 ba 5b 	jmp	0xb774	; 0xb774 <__epilogue_restores__+0xe>

00008412 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    8412:	a0 e0       	ldi	r26, 0x00	; 0
    8414:	b0 e0       	ldi	r27, 0x00	; 0
    8416:	ef e0       	ldi	r30, 0x0F	; 15
    8418:	f2 e4       	ldi	r31, 0x42	; 66
    841a:	0c 94 a1 5b 	jmp	0xb742	; 0xb742 <__prologue_saves__+0x14>
    841e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    8420:	6a 81       	ldd	r22, Y+2	; 0x02
    8422:	7b 81       	ldd	r23, Y+3	; 0x03
    8424:	88 81       	ld	r24, Y
    8426:	99 81       	ldd	r25, Y+1	; 0x01
    8428:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <validate>
    842c:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    842e:	00 97       	sbiw	r24, 0x00	; 0
    8430:	09 f0       	breq	.+2      	; 0x8434 <f_truncate+0x22>
    8432:	72 c0       	rjmp	.+228    	; 0x8518 <f_truncate+0x106>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    8434:	6c 81       	ldd	r22, Y+4	; 0x04
    8436:	67 ff       	sbrs	r22, 7
    8438:	03 c0       	rjmp	.+6      	; 0x8440 <f_truncate+0x2e>
    843a:	02 e0       	ldi	r16, 0x02	; 2
    843c:	10 e0       	ldi	r17, 0x00	; 0
    843e:	6c c0       	rjmp	.+216    	; 0x8518 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    8440:	61 fd       	sbrc	r22, 1
    8442:	03 c0       	rjmp	.+6      	; 0x844a <f_truncate+0x38>
    8444:	07 e0       	ldi	r16, 0x07	; 7
    8446:	10 e0       	ldi	r17, 0x00	; 0
    8448:	67 c0       	rjmp	.+206    	; 0x8518 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    844a:	2e 81       	ldd	r18, Y+6	; 0x06
    844c:	3f 81       	ldd	r19, Y+7	; 0x07
    844e:	48 85       	ldd	r20, Y+8	; 0x08
    8450:	59 85       	ldd	r21, Y+9	; 0x09
    8452:	8a 85       	ldd	r24, Y+10	; 0x0a
    8454:	9b 85       	ldd	r25, Y+11	; 0x0b
    8456:	ac 85       	ldd	r26, Y+12	; 0x0c
    8458:	bd 85       	ldd	r27, Y+13	; 0x0d
    845a:	28 17       	cp	r18, r24
    845c:	39 07       	cpc	r19, r25
    845e:	4a 07       	cpc	r20, r26
    8460:	5b 07       	cpc	r21, r27
    8462:	08 f0       	brcs	.+2      	; 0x8466 <f_truncate+0x54>
    8464:	59 c0       	rjmp	.+178    	; 0x8518 <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    8466:	2a 87       	std	Y+10, r18	; 0x0a
    8468:	3b 87       	std	Y+11, r19	; 0x0b
    846a:	4c 87       	std	Y+12, r20	; 0x0c
    846c:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    846e:	60 62       	ori	r22, 0x20	; 32
    8470:	6c 83       	std	Y+4, r22	; 0x04
    8472:	88 81       	ld	r24, Y
    8474:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    8476:	21 15       	cp	r18, r1
    8478:	31 05       	cpc	r19, r1
    847a:	41 05       	cpc	r20, r1
    847c:	51 05       	cpc	r21, r1
    847e:	61 f4       	brne	.+24     	; 0x8498 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    8480:	4e 85       	ldd	r20, Y+14	; 0x0e
    8482:	5f 85       	ldd	r21, Y+15	; 0x0f
    8484:	68 89       	ldd	r22, Y+16	; 0x10
    8486:	79 89       	ldd	r23, Y+17	; 0x11
    8488:	0e 94 95 41 	call	0x832a	; 0x832a <remove_chain>
    848c:	8c 01       	movw	r16, r24
			fp->org_clust = 0;
    848e:	1e 86       	std	Y+14, r1	; 0x0e
    8490:	1f 86       	std	Y+15, r1	; 0x0f
    8492:	18 8a       	std	Y+16, r1	; 0x10
    8494:	19 8a       	std	Y+17, r1	; 0x11
    8496:	3a c0       	rjmp	.+116    	; 0x850c <f_truncate+0xfa>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    8498:	4a 89       	ldd	r20, Y+18	; 0x12
    849a:	5b 89       	ldd	r21, Y+19	; 0x13
    849c:	6c 89       	ldd	r22, Y+20	; 0x14
    849e:	7d 89       	ldd	r23, Y+21	; 0x15
    84a0:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    84a4:	6b 01       	movw	r12, r22
    84a6:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    84a8:	8f ef       	ldi	r24, 0xFF	; 255
    84aa:	c8 16       	cp	r12, r24
    84ac:	8f ef       	ldi	r24, 0xFF	; 255
    84ae:	d8 06       	cpc	r13, r24
    84b0:	8f ef       	ldi	r24, 0xFF	; 255
    84b2:	e8 06       	cpc	r14, r24
    84b4:	8f ef       	ldi	r24, 0xFF	; 255
    84b6:	f8 06       	cpc	r15, r24
    84b8:	a9 f1       	breq	.+106    	; 0x8524 <f_truncate+0x112>
			if (ncl == 1) res = FR_INT_ERR;
    84ba:	81 e0       	ldi	r24, 0x01	; 1
    84bc:	c8 16       	cp	r12, r24
    84be:	d1 04       	cpc	r13, r1
    84c0:	e1 04       	cpc	r14, r1
    84c2:	f1 04       	cpc	r15, r1
    84c4:	19 f4       	brne	.+6      	; 0x84cc <f_truncate+0xba>
    84c6:	02 e0       	ldi	r16, 0x02	; 2
    84c8:	10 e0       	ldi	r17, 0x00	; 0
    84ca:	23 c0       	rjmp	.+70     	; 0x8512 <f_truncate+0x100>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    84cc:	e8 81       	ld	r30, Y
    84ce:	f9 81       	ldd	r31, Y+1	; 0x01
    84d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    84d2:	97 8d       	ldd	r25, Z+31	; 0x1f
    84d4:	a0 a1       	ldd	r26, Z+32	; 0x20
    84d6:	b1 a1       	ldd	r27, Z+33	; 0x21
    84d8:	c8 16       	cp	r12, r24
    84da:	d9 06       	cpc	r13, r25
    84dc:	ea 06       	cpc	r14, r26
    84de:	fb 06       	cpc	r15, r27
    84e0:	d8 f4       	brcc	.+54     	; 0x8518 <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    84e2:	4a 89       	ldd	r20, Y+18	; 0x12
    84e4:	5b 89       	ldd	r21, Y+19	; 0x13
    84e6:	6c 89       	ldd	r22, Y+20	; 0x14
    84e8:	7d 89       	ldd	r23, Y+21	; 0x15
    84ea:	cf 01       	movw	r24, r30
    84ec:	0f ef       	ldi	r16, 0xFF	; 255
    84ee:	1f ef       	ldi	r17, 0xFF	; 255
    84f0:	2f ef       	ldi	r18, 0xFF	; 255
    84f2:	3f e0       	ldi	r19, 0x0F	; 15
    84f4:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <put_fat>
    84f8:	8c 01       	movw	r16, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    84fa:	00 97       	sbiw	r24, 0x00	; 0
    84fc:	51 f4       	brne	.+20     	; 0x8512 <f_truncate+0x100>
    84fe:	88 81       	ld	r24, Y
    8500:	99 81       	ldd	r25, Y+1	; 0x01
    8502:	b7 01       	movw	r22, r14
    8504:	a6 01       	movw	r20, r12
    8506:	0e 94 95 41 	call	0x832a	; 0x832a <remove_chain>
    850a:	8c 01       	movw	r16, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    850c:	01 15       	cp	r16, r1
    850e:	11 05       	cpc	r17, r1
    8510:	19 f0       	breq	.+6      	; 0x8518 <f_truncate+0x106>
    8512:	8c 81       	ldd	r24, Y+4	; 0x04
    8514:	80 68       	ori	r24, 0x80	; 128
    8516:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    8518:	c8 01       	movw	r24, r16
    851a:	cd b7       	in	r28, 0x3d	; 61
    851c:	de b7       	in	r29, 0x3e	; 62
    851e:	e8 e0       	ldi	r30, 0x08	; 8
    8520:	0c 94 bd 5b 	jmp	0xb77a	; 0xb77a <__epilogue_restores__+0x14>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    8524:	01 e0       	ldi	r16, 0x01	; 1
    8526:	10 e0       	ldi	r17, 0x00	; 0
    8528:	f4 cf       	rjmp	.-24     	; 0x8512 <f_truncate+0x100>

0000852a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    852a:	a0 e0       	ldi	r26, 0x00	; 0
    852c:	b0 e0       	ldi	r27, 0x00	; 0
    852e:	eb e9       	ldi	r30, 0x9B	; 155
    8530:	f2 e4       	ldi	r31, 0x42	; 66
    8532:	0c 94 99 5b 	jmp	0xb732	; 0xb732 <__prologue_saves__+0x4>
    8536:	ec 01       	movw	r28, r24
    8538:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    853a:	6c 80       	ldd	r6, Y+4	; 0x04
    853c:	7d 80       	ldd	r7, Y+5	; 0x05
    853e:	08 94       	sec
    8540:	61 1c       	adc	r6, r1
    8542:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    8544:	61 14       	cp	r6, r1
    8546:	71 04       	cpc	r7, r1
    8548:	09 f4       	brne	.+2      	; 0x854c <dir_next+0x22>
    854a:	4d c1       	rjmp	.+666    	; 0x87e6 <dir_next+0x2bc>
    854c:	8e 85       	ldd	r24, Y+14	; 0x0e
    854e:	9f 85       	ldd	r25, Y+15	; 0x0f
    8550:	a8 89       	ldd	r26, Y+16	; 0x10
    8552:	b9 89       	ldd	r27, Y+17	; 0x11
    8554:	00 97       	sbiw	r24, 0x00	; 0
    8556:	a1 05       	cpc	r26, r1
    8558:	b1 05       	cpc	r27, r1
    855a:	09 f4       	brne	.+2      	; 0x855e <dir_next+0x34>
    855c:	44 c1       	rjmp	.+648    	; 0x87e6 <dir_next+0x2bc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    855e:	2f e0       	ldi	r18, 0x0F	; 15
    8560:	42 2e       	mov	r4, r18
    8562:	51 2c       	mov	r5, r1
    8564:	46 20       	and	r4, r6
    8566:	57 20       	and	r5, r7
    8568:	41 14       	cp	r4, r1
    856a:	51 04       	cpc	r5, r1
    856c:	09 f0       	breq	.+2      	; 0x8570 <dir_next+0x46>
    856e:	27 c1       	rjmp	.+590    	; 0x87be <dir_next+0x294>
		dj->sect++;					/* Next sector */
    8570:	01 96       	adiw	r24, 0x01	; 1
    8572:	a1 1d       	adc	r26, r1
    8574:	b1 1d       	adc	r27, r1
    8576:	8e 87       	std	Y+14, r24	; 0x0e
    8578:	9f 87       	std	Y+15, r25	; 0x0f
    857a:	a8 8b       	std	Y+16, r26	; 0x10
    857c:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    857e:	4a 85       	ldd	r20, Y+10	; 0x0a
    8580:	5b 85       	ldd	r21, Y+11	; 0x0b
    8582:	6c 85       	ldd	r22, Y+12	; 0x0c
    8584:	7d 85       	ldd	r23, Y+13	; 0x0d
    8586:	e8 81       	ld	r30, Y
    8588:	f9 81       	ldd	r31, Y+1	; 0x01
    858a:	41 15       	cp	r20, r1
    858c:	51 05       	cpc	r21, r1
    858e:	61 05       	cpc	r22, r1
    8590:	71 05       	cpc	r23, r1
    8592:	39 f4       	brne	.+14     	; 0x85a2 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8594:	87 81       	ldd	r24, Z+7	; 0x07
    8596:	90 85       	ldd	r25, Z+8	; 0x08
    8598:	68 16       	cp	r6, r24
    859a:	79 06       	cpc	r7, r25
    859c:	08 f4       	brcc	.+2      	; 0x85a0 <dir_next+0x76>
    859e:	0f c1       	rjmp	.+542    	; 0x87be <dir_next+0x294>
    85a0:	22 c1       	rjmp	.+580    	; 0x87e6 <dir_next+0x2bc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    85a2:	82 81       	ldd	r24, Z+2	; 0x02
    85a4:	90 e0       	ldi	r25, 0x00	; 0
    85a6:	01 97       	sbiw	r24, 0x01	; 1
    85a8:	93 01       	movw	r18, r6
    85aa:	a4 e0       	ldi	r26, 0x04	; 4
    85ac:	36 95       	lsr	r19
    85ae:	27 95       	ror	r18
    85b0:	aa 95       	dec	r26
    85b2:	e1 f7       	brne	.-8      	; 0x85ac <dir_next+0x82>
    85b4:	82 23       	and	r24, r18
    85b6:	93 23       	and	r25, r19
    85b8:	89 2b       	or	r24, r25
    85ba:	09 f0       	breq	.+2      	; 0x85be <dir_next+0x94>
    85bc:	00 c1       	rjmp	.+512    	; 0x87be <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    85be:	cf 01       	movw	r24, r30
    85c0:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
    85c4:	7b 01       	movw	r14, r22
    85c6:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    85c8:	82 e0       	ldi	r24, 0x02	; 2
    85ca:	e8 16       	cp	r14, r24
    85cc:	f1 04       	cpc	r15, r1
    85ce:	01 05       	cpc	r16, r1
    85d0:	11 05       	cpc	r17, r1
    85d2:	08 f4       	brcc	.+2      	; 0x85d6 <dir_next+0xac>
    85d4:	0b c1       	rjmp	.+534    	; 0x87ec <dir_next+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    85d6:	9f ef       	ldi	r25, 0xFF	; 255
    85d8:	e9 16       	cp	r14, r25
    85da:	9f ef       	ldi	r25, 0xFF	; 255
    85dc:	f9 06       	cpc	r15, r25
    85de:	9f ef       	ldi	r25, 0xFF	; 255
    85e0:	09 07       	cpc	r16, r25
    85e2:	9f ef       	ldi	r25, 0xFF	; 255
    85e4:	19 07       	cpc	r17, r25
    85e6:	09 f4       	brne	.+2      	; 0x85ea <dir_next+0xc0>
    85e8:	04 c1       	rjmp	.+520    	; 0x87f2 <dir_next+0x2c8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    85ea:	e8 81       	ld	r30, Y
    85ec:	f9 81       	ldd	r31, Y+1	; 0x01
    85ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    85f0:	97 8d       	ldd	r25, Z+31	; 0x1f
    85f2:	a0 a1       	ldd	r26, Z+32	; 0x20
    85f4:	b1 a1       	ldd	r27, Z+33	; 0x21
    85f6:	e8 16       	cp	r14, r24
    85f8:	f9 06       	cpc	r15, r25
    85fa:	0a 07       	cpc	r16, r26
    85fc:	1b 07       	cpc	r17, r27
    85fe:	08 f4       	brcc	.+2      	; 0x8602 <dir_next+0xd8>
    8600:	a5 c0       	rjmp	.+330    	; 0x874c <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    8602:	c1 14       	cp	r12, r1
    8604:	d1 04       	cpc	r13, r1
    8606:	09 f4       	brne	.+2      	; 0x860a <dir_next+0xe0>
    8608:	ee c0       	rjmp	.+476    	; 0x87e6 <dir_next+0x2bc>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    860a:	4a 85       	ldd	r20, Y+10	; 0x0a
    860c:	5b 85       	ldd	r21, Y+11	; 0x0b
    860e:	6c 85       	ldd	r22, Y+12	; 0x0c
    8610:	7d 85       	ldd	r23, Y+13	; 0x0d
    8612:	cf 01       	movw	r24, r30
    8614:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <create_chain>
    8618:	7b 01       	movw	r14, r22
    861a:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    861c:	61 15       	cp	r22, r1
    861e:	71 05       	cpc	r23, r1
    8620:	81 05       	cpc	r24, r1
    8622:	91 05       	cpc	r25, r1
    8624:	19 f4       	brne	.+6      	; 0x862c <dir_next+0x102>
    8626:	27 e0       	ldi	r18, 0x07	; 7
    8628:	30 e0       	ldi	r19, 0x00	; 0
    862a:	e5 c0       	rjmp	.+458    	; 0x87f6 <dir_next+0x2cc>
					if (clst == 1) return FR_INT_ERR;
    862c:	61 30       	cpi	r22, 0x01	; 1
    862e:	71 05       	cpc	r23, r1
    8630:	81 05       	cpc	r24, r1
    8632:	91 05       	cpc	r25, r1
    8634:	09 f4       	brne	.+2      	; 0x8638 <dir_next+0x10e>
    8636:	da c0       	rjmp	.+436    	; 0x87ec <dir_next+0x2c2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8638:	6f 3f       	cpi	r22, 0xFF	; 255
    863a:	bf ef       	ldi	r27, 0xFF	; 255
    863c:	7b 07       	cpc	r23, r27
    863e:	bf ef       	ldi	r27, 0xFF	; 255
    8640:	8b 07       	cpc	r24, r27
    8642:	bf ef       	ldi	r27, 0xFF	; 255
    8644:	9b 07       	cpc	r25, r27
    8646:	09 f4       	brne	.+2      	; 0x864a <dir_next+0x120>
    8648:	d4 c0       	rjmp	.+424    	; 0x87f2 <dir_next+0x2c8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    864a:	88 81       	ld	r24, Y
    864c:	99 81       	ldd	r25, Y+1	; 0x01
    864e:	40 e0       	ldi	r20, 0x00	; 0
    8650:	50 e0       	ldi	r21, 0x00	; 0
    8652:	60 e0       	ldi	r22, 0x00	; 0
    8654:	70 e0       	ldi	r23, 0x00	; 0
    8656:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    865a:	89 2b       	or	r24, r25
    865c:	09 f0       	breq	.+2      	; 0x8660 <dir_next+0x136>
    865e:	c9 c0       	rjmp	.+402    	; 0x87f2 <dir_next+0x2c8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8660:	88 81       	ld	r24, Y
    8662:	99 81       	ldd	r25, Y+1	; 0x01
    8664:	fc 01       	movw	r30, r24
    8666:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    8668:	8e 5c       	subi	r24, 0xCE	; 206
    866a:	9d 4f       	sbci	r25, 0xFD	; 253
    866c:	01 c0       	rjmp	.+2      	; 0x8670 <dir_next+0x146>
    866e:	11 92       	st	Z+, r1
    8670:	e8 17       	cp	r30, r24
    8672:	f9 07       	cpc	r31, r25
    8674:	e1 f7       	brne	.-8      	; 0x866e <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    8676:	88 80       	ld	r8, Y
    8678:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    867a:	ee ef       	ldi	r30, 0xFE	; 254
    867c:	ae 2e       	mov	r10, r30
    867e:	ef ef       	ldi	r30, 0xFF	; 255
    8680:	be 2e       	mov	r11, r30
    8682:	ef ef       	ldi	r30, 0xFF	; 255
    8684:	ce 2e       	mov	r12, r30
    8686:	ef ef       	ldi	r30, 0xFF	; 255
    8688:	de 2e       	mov	r13, r30
    868a:	ae 0c       	add	r10, r14
    868c:	bf 1c       	adc	r11, r15
    868e:	c0 1e       	adc	r12, r16
    8690:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8692:	f4 01       	movw	r30, r8
    8694:	86 8d       	ldd	r24, Z+30	; 0x1e
    8696:	97 8d       	ldd	r25, Z+31	; 0x1f
    8698:	a0 a1       	ldd	r26, Z+32	; 0x20
    869a:	b1 a1       	ldd	r27, Z+33	; 0x21
    869c:	02 97       	sbiw	r24, 0x02	; 2
    869e:	a1 09       	sbc	r26, r1
    86a0:	b1 09       	sbc	r27, r1
    86a2:	a8 16       	cp	r10, r24
    86a4:	b9 06       	cpc	r11, r25
    86a6:	ca 06       	cpc	r12, r26
    86a8:	db 06       	cpc	r13, r27
    86aa:	28 f0       	brcs	.+10     	; 0x86b6 <dir_next+0x18c>
    86ac:	20 e0       	ldi	r18, 0x00	; 0
    86ae:	30 e0       	ldi	r19, 0x00	; 0
    86b0:	40 e0       	ldi	r20, 0x00	; 0
    86b2:	50 e0       	ldi	r21, 0x00	; 0
    86b4:	15 c0       	rjmp	.+42     	; 0x86e0 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    86b6:	d4 01       	movw	r26, r8
    86b8:	12 96       	adiw	r26, 0x02	; 2
    86ba:	2c 91       	ld	r18, X
    86bc:	30 e0       	ldi	r19, 0x00	; 0
    86be:	40 e0       	ldi	r20, 0x00	; 0
    86c0:	50 e0       	ldi	r21, 0x00	; 0
    86c2:	c6 01       	movw	r24, r12
    86c4:	b5 01       	movw	r22, r10
    86c6:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    86ca:	9b 01       	movw	r18, r22
    86cc:	ac 01       	movw	r20, r24
    86ce:	f4 01       	movw	r30, r8
    86d0:	82 a5       	ldd	r24, Z+42	; 0x2a
    86d2:	93 a5       	ldd	r25, Z+43	; 0x2b
    86d4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    86d6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    86d8:	28 0f       	add	r18, r24
    86da:	39 1f       	adc	r19, r25
    86dc:	4a 1f       	adc	r20, r26
    86de:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    86e0:	d4 01       	movw	r26, r8
    86e2:	9e 96       	adiw	r26, 0x2e	; 46
    86e4:	2d 93       	st	X+, r18
    86e6:	3d 93       	st	X+, r19
    86e8:	4d 93       	st	X+, r20
    86ea:	5c 93       	st	X, r21
    86ec:	d1 97       	sbiw	r26, 0x31	; 49
    86ee:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    86f0:	cc 24       	eor	r12, r12
    86f2:	c3 94       	inc	r12
    86f4:	1a c0       	rjmp	.+52     	; 0x872a <dir_next+0x200>
    86f6:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    86f8:	88 81       	ld	r24, Y
    86fa:	99 81       	ldd	r25, Y+1	; 0x01
    86fc:	40 e0       	ldi	r20, 0x00	; 0
    86fe:	50 e0       	ldi	r21, 0x00	; 0
    8700:	60 e0       	ldi	r22, 0x00	; 0
    8702:	70 e0       	ldi	r23, 0x00	; 0
    8704:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    8708:	89 2b       	or	r24, r25
    870a:	09 f0       	breq	.+2      	; 0x870e <dir_next+0x1e4>
    870c:	72 c0       	rjmp	.+228    	; 0x87f2 <dir_next+0x2c8>
						dj->fs->winsect++;
    870e:	e8 81       	ld	r30, Y
    8710:	f9 81       	ldd	r31, Y+1	; 0x01
    8712:	86 a5       	ldd	r24, Z+46	; 0x2e
    8714:	97 a5       	ldd	r25, Z+47	; 0x2f
    8716:	a0 a9       	ldd	r26, Z+48	; 0x30
    8718:	b1 a9       	ldd	r27, Z+49	; 0x31
    871a:	01 96       	adiw	r24, 0x01	; 1
    871c:	a1 1d       	adc	r26, r1
    871e:	b1 1d       	adc	r27, r1
    8720:	86 a7       	std	Z+46, r24	; 0x2e
    8722:	97 a7       	std	Z+47, r25	; 0x2f
    8724:	a0 ab       	std	Z+48, r26	; 0x30
    8726:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8728:	d3 94       	inc	r13
    872a:	e8 81       	ld	r30, Y
    872c:	f9 81       	ldd	r31, Y+1	; 0x01
    872e:	82 81       	ldd	r24, Z+2	; 0x02
    8730:	d8 16       	cp	r13, r24
    8732:	08 f3       	brcs	.-62     	; 0x86f6 <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8734:	86 a5       	ldd	r24, Z+46	; 0x2e
    8736:	97 a5       	ldd	r25, Z+47	; 0x2f
    8738:	a0 a9       	ldd	r26, Z+48	; 0x30
    873a:	b1 a9       	ldd	r27, Z+49	; 0x31
    873c:	8d 19       	sub	r24, r13
    873e:	91 09       	sbc	r25, r1
    8740:	a1 09       	sbc	r26, r1
    8742:	b1 09       	sbc	r27, r1
    8744:	86 a7       	std	Z+46, r24	; 0x2e
    8746:	97 a7       	std	Z+47, r25	; 0x2f
    8748:	a0 ab       	std	Z+48, r26	; 0x30
    874a:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    874c:	ea 86       	std	Y+10, r14	; 0x0a
    874e:	fb 86       	std	Y+11, r15	; 0x0b
    8750:	0c 87       	std	Y+12, r16	; 0x0c
    8752:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    8754:	c8 80       	ld	r12, Y
    8756:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8758:	8e ef       	ldi	r24, 0xFE	; 254
    875a:	9f ef       	ldi	r25, 0xFF	; 255
    875c:	af ef       	ldi	r26, 0xFF	; 255
    875e:	bf ef       	ldi	r27, 0xFF	; 255
    8760:	e8 0e       	add	r14, r24
    8762:	f9 1e       	adc	r15, r25
    8764:	0a 1f       	adc	r16, r26
    8766:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8768:	f6 01       	movw	r30, r12
    876a:	86 8d       	ldd	r24, Z+30	; 0x1e
    876c:	97 8d       	ldd	r25, Z+31	; 0x1f
    876e:	a0 a1       	ldd	r26, Z+32	; 0x20
    8770:	b1 a1       	ldd	r27, Z+33	; 0x21
    8772:	02 97       	sbiw	r24, 0x02	; 2
    8774:	a1 09       	sbc	r26, r1
    8776:	b1 09       	sbc	r27, r1
    8778:	e8 16       	cp	r14, r24
    877a:	f9 06       	cpc	r15, r25
    877c:	0a 07       	cpc	r16, r26
    877e:	1b 07       	cpc	r17, r27
    8780:	28 f0       	brcs	.+10     	; 0x878c <dir_next+0x262>
    8782:	20 e0       	ldi	r18, 0x00	; 0
    8784:	30 e0       	ldi	r19, 0x00	; 0
    8786:	40 e0       	ldi	r20, 0x00	; 0
    8788:	50 e0       	ldi	r21, 0x00	; 0
    878a:	15 c0       	rjmp	.+42     	; 0x87b6 <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    878c:	d6 01       	movw	r26, r12
    878e:	12 96       	adiw	r26, 0x02	; 2
    8790:	2c 91       	ld	r18, X
    8792:	30 e0       	ldi	r19, 0x00	; 0
    8794:	40 e0       	ldi	r20, 0x00	; 0
    8796:	50 e0       	ldi	r21, 0x00	; 0
    8798:	c8 01       	movw	r24, r16
    879a:	b7 01       	movw	r22, r14
    879c:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    87a0:	9b 01       	movw	r18, r22
    87a2:	ac 01       	movw	r20, r24
    87a4:	f6 01       	movw	r30, r12
    87a6:	82 a5       	ldd	r24, Z+42	; 0x2a
    87a8:	93 a5       	ldd	r25, Z+43	; 0x2b
    87aa:	a4 a5       	ldd	r26, Z+44	; 0x2c
    87ac:	b5 a5       	ldd	r27, Z+45	; 0x2d
    87ae:	28 0f       	add	r18, r24
    87b0:	39 1f       	adc	r19, r25
    87b2:	4a 1f       	adc	r20, r26
    87b4:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    87b6:	2e 87       	std	Y+14, r18	; 0x0e
    87b8:	3f 87       	std	Y+15, r19	; 0x0f
    87ba:	48 8b       	std	Y+16, r20	; 0x10
    87bc:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    87be:	6c 82       	std	Y+4, r6	; 0x04
    87c0:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    87c2:	75 e0       	ldi	r23, 0x05	; 5
    87c4:	44 0c       	add	r4, r4
    87c6:	55 1c       	adc	r5, r5
    87c8:	7a 95       	dec	r23
    87ca:	e1 f7       	brne	.-8      	; 0x87c4 <dir_next+0x29a>
    87cc:	82 e3       	ldi	r24, 0x32	; 50
    87ce:	90 e0       	ldi	r25, 0x00	; 0
    87d0:	48 0e       	add	r4, r24
    87d2:	59 1e       	adc	r5, r25
    87d4:	88 81       	ld	r24, Y
    87d6:	99 81       	ldd	r25, Y+1	; 0x01
    87d8:	84 0d       	add	r24, r4
    87da:	95 1d       	adc	r25, r5
    87dc:	8a 8b       	std	Y+18, r24	; 0x12
    87de:	9b 8b       	std	Y+19, r25	; 0x13
    87e0:	20 e0       	ldi	r18, 0x00	; 0
    87e2:	30 e0       	ldi	r19, 0x00	; 0
    87e4:	08 c0       	rjmp	.+16     	; 0x87f6 <dir_next+0x2cc>

	return FR_OK;
    87e6:	24 e0       	ldi	r18, 0x04	; 4
    87e8:	30 e0       	ldi	r19, 0x00	; 0
    87ea:	05 c0       	rjmp	.+10     	; 0x87f6 <dir_next+0x2cc>
    87ec:	22 e0       	ldi	r18, 0x02	; 2
    87ee:	30 e0       	ldi	r19, 0x00	; 0
    87f0:	02 c0       	rjmp	.+4      	; 0x87f6 <dir_next+0x2cc>
    87f2:	21 e0       	ldi	r18, 0x01	; 1
    87f4:	30 e0       	ldi	r19, 0x00	; 0
}
    87f6:	c9 01       	movw	r24, r18
    87f8:	cd b7       	in	r28, 0x3d	; 61
    87fa:	de b7       	in	r29, 0x3e	; 62
    87fc:	e0 e1       	ldi	r30, 0x10	; 16
    87fe:	0c 94 b5 5b 	jmp	0xb76a	; 0xb76a <__epilogue_restores__+0x4>

00008802 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    8802:	a0 e0       	ldi	r26, 0x00	; 0
    8804:	b0 e0       	ldi	r27, 0x00	; 0
    8806:	e7 e0       	ldi	r30, 0x07	; 7
    8808:	f4 e4       	ldi	r31, 0x44	; 68
    880a:	0c 94 9f 5b 	jmp	0xb73e	; 0xb73e <__prologue_saves__+0x10>
    880e:	ec 01       	movw	r28, r24
    8810:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    8812:	fb 01       	movw	r30, r22
    8814:	80 81       	ld	r24, Z
    8816:	8f 32       	cpi	r24, 0x2F	; 47
    8818:	11 f0       	breq	.+4      	; 0x881e <follow_path+0x1c>
    881a:	8c 35       	cpi	r24, 0x5C	; 92
    881c:	41 f4       	brne	.+16     	; 0x882e <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    881e:	08 94       	sec
    8820:	e1 1c       	adc	r14, r1
    8822:	f1 1c       	adc	r15, r1
    8824:	1e 82       	std	Y+6, r1	; 0x06
    8826:	1f 82       	std	Y+7, r1	; 0x07
    8828:	18 86       	std	Y+8, r1	; 0x08
    882a:	19 86       	std	Y+9, r1	; 0x09
    882c:	0a c0       	rjmp	.+20     	; 0x8842 <follow_path+0x40>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    882e:	e8 81       	ld	r30, Y
    8830:	f9 81       	ldd	r31, Y+1	; 0x01
    8832:	86 89       	ldd	r24, Z+22	; 0x16
    8834:	97 89       	ldd	r25, Z+23	; 0x17
    8836:	a0 8d       	ldd	r26, Z+24	; 0x18
    8838:	b1 8d       	ldd	r27, Z+25	; 0x19
    883a:	8e 83       	std	Y+6, r24	; 0x06
    883c:	9f 83       	std	Y+7, r25	; 0x07
    883e:	a8 87       	std	Y+8, r26	; 0x08
    8840:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    8842:	f7 01       	movw	r30, r14
    8844:	80 81       	ld	r24, Z
    8846:	80 32       	cpi	r24, 0x20	; 32
    8848:	48 f4       	brcc	.+18     	; 0x885c <follow_path+0x5a>
		res = dir_seek(dj, 0);
    884a:	ce 01       	movw	r24, r28
    884c:	60 e0       	ldi	r22, 0x00	; 0
    884e:	70 e0       	ldi	r23, 0x00	; 0
    8850:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    8854:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    8856:	1a 8a       	std	Y+18, r1	; 0x12
    8858:	1b 8a       	std	Y+19, r1	; 0x13
    885a:	02 c1       	rjmp	.+516    	; 0x8a60 <follow_path+0x25e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    885c:	50 e2       	ldi	r21, 0x20	; 32
    885e:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8860:	45 e0       	ldi	r20, 0x05	; 5
    8862:	a4 2e       	mov	r10, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    8864:	0c 89       	ldd	r16, Y+20	; 0x14
    8866:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8868:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    886a:	c8 01       	movw	r24, r16
    886c:	0b 96       	adiw	r24, 0x0b	; 11
    886e:	01 c0       	rjmp	.+2      	; 0x8872 <follow_path+0x70>
    8870:	b1 92       	st	Z+, r11
    8872:	e8 17       	cp	r30, r24
    8874:	f9 07       	cpc	r31, r25
    8876:	e1 f7       	brne	.-8      	; 0x8870 <follow_path+0x6e>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    8878:	f7 01       	movw	r30, r14
    887a:	80 81       	ld	r24, Z
    887c:	8e 32       	cpi	r24, 0x2E	; 46
    887e:	41 f0       	breq	.+16     	; 0x8890 <follow_path+0x8e>
    8880:	60 e0       	ldi	r22, 0x00	; 0
    8882:	70 e0       	ldi	r23, 0x00	; 0
    8884:	cc 24       	eor	r12, r12
    8886:	dd 24       	eor	r13, r13
    8888:	a8 e0       	ldi	r26, 0x08	; 8
    888a:	b0 e0       	ldi	r27, 0x00	; 0
    888c:	30 e0       	ldi	r19, 0x00	; 0
    888e:	21 c0       	rjmp	.+66     	; 0x88d2 <follow_path+0xd0>
    8890:	d8 01       	movw	r26, r16
    8892:	80 e0       	ldi	r24, 0x00	; 0
    8894:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    8896:	f7 01       	movw	r30, r14
    8898:	e8 0f       	add	r30, r24
    889a:	f9 1f       	adc	r31, r25
    889c:	e0 81       	ld	r30, Z
    889e:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    88a0:	ee 32       	cpi	r30, 0x2E	; 46
    88a2:	31 f4       	brne	.+12     	; 0x88b0 <follow_path+0xae>
    88a4:	83 30       	cpi	r24, 0x03	; 3
    88a6:	91 05       	cpc	r25, r1
    88a8:	09 f4       	brne	.+2      	; 0x88ac <follow_path+0xaa>
    88aa:	d3 c0       	rjmp	.+422    	; 0x8a52 <follow_path+0x250>
			sfn[i++] = c;
    88ac:	ed 93       	st	X+, r30
    88ae:	f3 cf       	rjmp	.-26     	; 0x8896 <follow_path+0x94>
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
    88b0:	ef 32       	cpi	r30, 0x2F	; 47
    88b2:	29 f0       	breq	.+10     	; 0x88be <follow_path+0xbc>
    88b4:	ec 35       	cpi	r30, 0x5C	; 92
    88b6:	39 f0       	breq	.+14     	; 0x88c6 <follow_path+0xc4>
    88b8:	e0 32       	cpi	r30, 0x20	; 32
    88ba:	08 f0       	brcs	.+2      	; 0x88be <follow_path+0xbc>
    88bc:	ca c0       	rjmp	.+404    	; 0x8a52 <follow_path+0x250>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    88be:	e0 32       	cpi	r30, 0x20	; 32
    88c0:	10 f4       	brcc	.+4      	; 0x88c6 <follow_path+0xc4>
    88c2:	24 e2       	ldi	r18, 0x24	; 36
    88c4:	01 c0       	rjmp	.+2      	; 0x88c8 <follow_path+0xc6>
    88c6:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    88c8:	e8 0e       	add	r14, r24
    88ca:	f9 1e       	adc	r15, r25
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    88cc:	f8 01       	movw	r30, r16
    88ce:	23 87       	std	Z+11, r18	; 0x0b
    88d0:	cd c0       	rjmp	.+410    	; 0x8a6c <follow_path+0x26a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    88d2:	f7 01       	movw	r30, r14
    88d4:	ec 0d       	add	r30, r12
    88d6:	fd 1d       	adc	r31, r13
    88d8:	20 81       	ld	r18, Z
    88da:	08 94       	sec
    88dc:	c1 1c       	adc	r12, r1
    88de:	d1 1c       	adc	r13, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    88e0:	20 32       	cpi	r18, 0x20	; 32
    88e2:	08 f4       	brcc	.+2      	; 0x88e6 <follow_path+0xe4>
    88e4:	42 c0       	rjmp	.+132    	; 0x896a <follow_path+0x168>
    88e6:	2f 32       	cpi	r18, 0x2F	; 47
    88e8:	09 f4       	brne	.+2      	; 0x88ec <follow_path+0xea>
    88ea:	ca c0       	rjmp	.+404    	; 0x8a80 <follow_path+0x27e>
    88ec:	2c 35       	cpi	r18, 0x5C	; 92
    88ee:	09 f4       	brne	.+2      	; 0x88f2 <follow_path+0xf0>
    88f0:	c7 c0       	rjmp	.+398    	; 0x8a80 <follow_path+0x27e>
		if (c == '.' || i >= ni) {
    88f2:	2e 32       	cpi	r18, 0x2E	; 46
    88f4:	19 f0       	breq	.+6      	; 0x88fc <follow_path+0xfa>
    88f6:	6a 17       	cp	r22, r26
    88f8:	7b 07       	cpc	r23, r27
    88fa:	6c f0       	brlt	.+26     	; 0x8916 <follow_path+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    88fc:	18 97       	sbiw	r26, 0x08	; 8
    88fe:	09 f0       	breq	.+2      	; 0x8902 <follow_path+0x100>
    8900:	a8 c0       	rjmp	.+336    	; 0x8a52 <follow_path+0x250>
    8902:	2e 32       	cpi	r18, 0x2E	; 46
    8904:	09 f0       	breq	.+2      	; 0x8908 <follow_path+0x106>
    8906:	a5 c0       	rjmp	.+330    	; 0x8a52 <follow_path+0x250>
			i = 8; ni = 11;
			b <<= 2; continue;
    8908:	33 0f       	add	r19, r19
    890a:	33 0f       	add	r19, r19
    890c:	68 e0       	ldi	r22, 0x08	; 8
    890e:	70 e0       	ldi	r23, 0x00	; 0
    8910:	ab e0       	ldi	r26, 0x0B	; 11
    8912:	b0 e0       	ldi	r27, 0x00	; 0
    8914:	de cf       	rjmp	.-68     	; 0x88d2 <follow_path+0xd0>
		}
		if (c >= 0x80) {				/* Extended char */
    8916:	27 ff       	sbrs	r18, 7
    8918:	05 c0       	rjmp	.+10     	; 0x8924 <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
    891a:	e2 2f       	mov	r30, r18
    891c:	f0 e0       	ldi	r31, 0x00	; 0
    891e:	e0 52       	subi	r30, 0x20	; 32
    8920:	fc 4d       	sbci	r31, 0xDC	; 220
    8922:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
    8924:	42 2f       	mov	r20, r18
    8926:	50 e0       	ldi	r21, 0x00	; 0
    8928:	ef e0       	ldi	r30, 0x0F	; 15
    892a:	f4 e2       	ldi	r31, 0x24	; 36
    892c:	01 c0       	rjmp	.+2      	; 0x8930 <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    892e:	31 96       	adiw	r30, 0x01	; 1
    8930:	80 81       	ld	r24, Z
    8932:	88 23       	and	r24, r24
    8934:	39 f0       	breq	.+14     	; 0x8944 <follow_path+0x142>
    8936:	99 27       	eor	r25, r25
    8938:	87 fd       	sbrc	r24, 7
    893a:	90 95       	com	r25
    893c:	84 17       	cp	r24, r20
    893e:	95 07       	cpc	r25, r21
    8940:	b1 f7       	brne	.-20     	; 0x892e <follow_path+0x12c>
    8942:	87 c0       	rjmp	.+270    	; 0x8a52 <follow_path+0x250>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    8944:	82 2f       	mov	r24, r18
    8946:	81 54       	subi	r24, 0x41	; 65
    8948:	8a 31       	cpi	r24, 0x1A	; 26
    894a:	10 f4       	brcc	.+4      	; 0x8950 <follow_path+0x14e>
				b |= 2;
    894c:	32 60       	ori	r19, 0x02	; 2
    894e:	06 c0       	rjmp	.+12     	; 0x895c <follow_path+0x15a>
			} else {
				if (IsLower(c)) {
    8950:	82 2f       	mov	r24, r18
    8952:	81 56       	subi	r24, 0x61	; 97
    8954:	8a 31       	cpi	r24, 0x1A	; 26
    8956:	10 f4       	brcc	.+4      	; 0x895c <follow_path+0x15a>
					b |= 1; c -= 0x20;
    8958:	31 60       	ori	r19, 0x01	; 1
    895a:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    895c:	f8 01       	movw	r30, r16
    895e:	e6 0f       	add	r30, r22
    8960:	f7 1f       	adc	r31, r23
    8962:	20 83       	st	Z, r18
    8964:	6f 5f       	subi	r22, 0xFF	; 255
    8966:	7f 4f       	sbci	r23, 0xFF	; 255
    8968:	b4 cf       	rjmp	.-152    	; 0x88d2 <follow_path+0xd0>
    896a:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    896c:	67 2b       	or	r22, r23
    896e:	09 f4       	brne	.+2      	; 0x8972 <follow_path+0x170>
    8970:	70 c0       	rjmp	.+224    	; 0x8a52 <follow_path+0x250>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8972:	f8 01       	movw	r30, r16
    8974:	80 81       	ld	r24, Z
    8976:	85 3e       	cpi	r24, 0xE5	; 229
    8978:	09 f4       	brne	.+2      	; 0x897c <follow_path+0x17a>
    897a:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    897c:	18 97       	sbiw	r26, 0x08	; 8
    897e:	11 f4       	brne	.+4      	; 0x8984 <follow_path+0x182>
    8980:	33 0f       	add	r19, r19
    8982:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8984:	23 2f       	mov	r18, r19
    8986:	30 e0       	ldi	r19, 0x00	; 0
    8988:	c9 01       	movw	r24, r18
    898a:	83 70       	andi	r24, 0x03	; 3
    898c:	90 70       	andi	r25, 0x00	; 0
    898e:	01 97       	sbiw	r24, 0x01	; 1
    8990:	09 f4       	brne	.+2      	; 0x8994 <follow_path+0x192>
    8992:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    8994:	2c 70       	andi	r18, 0x0C	; 12
    8996:	30 70       	andi	r19, 0x00	; 0
    8998:	24 30       	cpi	r18, 0x04	; 4
    899a:	31 05       	cpc	r19, r1
    899c:	09 f4       	brne	.+2      	; 0x89a0 <follow_path+0x19e>
    899e:	48 60       	ori	r20, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    89a0:	ec 0c       	add	r14, r12
    89a2:	fd 1c       	adc	r15, r13

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[11] = c;		/* Store NT flag, File name is created */
    89a4:	f8 01       	movw	r30, r16
    89a6:	43 87       	std	Z+11, r20	; 0x0b
    89a8:	61 c0       	rjmp	.+194    	; 0x8a6c <follow_path+0x26a>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    89aa:	4e 85       	ldd	r20, Y+14	; 0x0e
    89ac:	5f 85       	ldd	r21, Y+15	; 0x0f
    89ae:	68 89       	ldd	r22, Y+16	; 0x10
    89b0:	79 89       	ldd	r23, Y+17	; 0x11
    89b2:	88 81       	ld	r24, Y
    89b4:	99 81       	ldd	r25, Y+1	; 0x01
    89b6:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    89ba:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    89bc:	00 97       	sbiw	r24, 0x00	; 0
    89be:	01 f5       	brne	.+64     	; 0x8a00 <follow_path+0x1fe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    89c0:	ea 89       	ldd	r30, Y+18	; 0x12
    89c2:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    89c4:	80 81       	ld	r24, Z
    89c6:	88 23       	and	r24, r24
    89c8:	19 f4       	brne	.+6      	; 0x89d0 <follow_path+0x1ce>
    89ca:	44 e0       	ldi	r20, 0x04	; 4
    89cc:	50 e0       	ldi	r21, 0x00	; 0
    89ce:	18 c0       	rjmp	.+48     	; 0x8a00 <follow_path+0x1fe>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    89d0:	83 85       	ldd	r24, Z+11	; 0x0b
    89d2:	83 fd       	sbrc	r24, 3
    89d4:	0f c0       	rjmp	.+30     	; 0x89f4 <follow_path+0x1f2>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    89d6:	ac 89       	ldd	r26, Y+20	; 0x14
    89d8:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    89da:	9f 01       	movw	r18, r30
    89dc:	25 5f       	subi	r18, 0xF5	; 245
    89de:	3f 4f       	sbci	r19, 0xFF	; 255
    89e0:	e2 17       	cp	r30, r18
    89e2:	f3 07       	cpc	r31, r19
    89e4:	69 f0       	breq	.+26     	; 0x8a00 <follow_path+0x1fe>
    89e6:	90 81       	ld	r25, Z
    89e8:	8c 91       	ld	r24, X
    89ea:	98 17       	cp	r25, r24
    89ec:	19 f4       	brne	.+6      	; 0x89f4 <follow_path+0x1f2>
    89ee:	31 96       	adiw	r30, 0x01	; 1
    89f0:	11 96       	adiw	r26, 0x01	; 1
    89f2:	f6 cf       	rjmp	.-20     	; 0x89e0 <follow_path+0x1de>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    89f4:	ce 01       	movw	r24, r28
    89f6:	60 e0       	ldi	r22, 0x00	; 0
    89f8:	70 e0       	ldi	r23, 0x00	; 0
    89fa:	0e 94 95 42 	call	0x852a	; 0x852a <dir_next>
    89fe:	3b c0       	rjmp	.+118    	; 0x8a76 <follow_path+0x274>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
    8a00:	ec 89       	ldd	r30, Y+20	; 0x14
    8a02:	fd 89       	ldd	r31, Y+21	; 0x15
    8a04:	83 85       	ldd	r24, Z+11	; 0x0b
    8a06:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    8a08:	41 15       	cp	r20, r1
    8a0a:	51 05       	cpc	r21, r1
    8a0c:	39 f0       	breq	.+14     	; 0x8a1c <follow_path+0x21a>
    8a0e:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    8a10:	44 30       	cpi	r20, 0x04	; 4
    8a12:	51 05       	cpc	r21, r1
    8a14:	09 f5       	brne	.+66     	; 0x8a58 <follow_path+0x256>
    8a16:	88 23       	and	r24, r24
    8a18:	09 f1       	breq	.+66     	; 0x8a5c <follow_path+0x25a>
    8a1a:	22 c0       	rjmp	.+68     	; 0x8a60 <follow_path+0x25e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    8a1c:	88 23       	and	r24, r24
    8a1e:	e1 f4       	brne	.+56     	; 0x8a58 <follow_path+0x256>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    8a20:	ea 89       	ldd	r30, Y+18	; 0x12
    8a22:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    8a24:	83 85       	ldd	r24, Z+11	; 0x0b
    8a26:	84 ff       	sbrs	r24, 4
    8a28:	19 c0       	rjmp	.+50     	; 0x8a5c <follow_path+0x25a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8a2a:	84 89       	ldd	r24, Z+20	; 0x14
    8a2c:	95 89       	ldd	r25, Z+21	; 0x15
    8a2e:	a0 e0       	ldi	r26, 0x00	; 0
    8a30:	b0 e0       	ldi	r27, 0x00	; 0
    8a32:	dc 01       	movw	r26, r24
    8a34:	99 27       	eor	r25, r25
    8a36:	88 27       	eor	r24, r24
    8a38:	22 8d       	ldd	r18, Z+26	; 0x1a
    8a3a:	33 8d       	ldd	r19, Z+27	; 0x1b
    8a3c:	40 e0       	ldi	r20, 0x00	; 0
    8a3e:	50 e0       	ldi	r21, 0x00	; 0
    8a40:	82 2b       	or	r24, r18
    8a42:	93 2b       	or	r25, r19
    8a44:	a4 2b       	or	r26, r20
    8a46:	b5 2b       	or	r27, r21
    8a48:	8e 83       	std	Y+6, r24	; 0x06
    8a4a:	9f 83       	std	Y+7, r25	; 0x07
    8a4c:	a8 87       	std	Y+8, r26	; 0x08
    8a4e:	b9 87       	std	Y+9, r27	; 0x09
    8a50:	09 cf       	rjmp	.-494    	; 0x8864 <follow_path+0x62>
		}
    8a52:	26 e0       	ldi	r18, 0x06	; 6
    8a54:	30 e0       	ldi	r19, 0x00	; 0
    8a56:	04 c0       	rjmp	.+8      	; 0x8a60 <follow_path+0x25e>
    8a58:	9a 01       	movw	r18, r20
    8a5a:	02 c0       	rjmp	.+4      	; 0x8a60 <follow_path+0x25e>
    8a5c:	25 e0       	ldi	r18, 0x05	; 5
    8a5e:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    8a60:	c9 01       	movw	r24, r18
    8a62:	cd b7       	in	r28, 0x3d	; 61
    8a64:	de b7       	in	r29, 0x3e	; 62
    8a66:	ea e0       	ldi	r30, 0x0A	; 10
    8a68:	0c 94 bb 5b 	jmp	0xb776	; 0xb776 <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    8a6c:	ce 01       	movw	r24, r28
    8a6e:	60 e0       	ldi	r22, 0x00	; 0
    8a70:	70 e0       	ldi	r23, 0x00	; 0
    8a72:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    8a76:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    8a78:	00 97       	sbiw	r24, 0x00	; 0
    8a7a:	09 f4       	brne	.+2      	; 0x8a7e <follow_path+0x27c>
    8a7c:	96 cf       	rjmp	.-212    	; 0x89aa <follow_path+0x1a8>
    8a7e:	c0 cf       	rjmp	.-128    	; 0x8a00 <follow_path+0x1fe>
    8a80:	40 e0       	ldi	r20, 0x00	; 0
    8a82:	74 cf       	rjmp	.-280    	; 0x896c <follow_path+0x16a>

00008a84 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8a84:	a4 e2       	ldi	r26, 0x24	; 36
    8a86:	b0 e0       	ldi	r27, 0x00	; 0
    8a88:	e8 e4       	ldi	r30, 0x48	; 72
    8a8a:	f5 e4       	ldi	r31, 0x45	; 69
    8a8c:	0c 94 a1 5b 	jmp	0xb742	; 0xb742 <__prologue_saves__+0x14>
    8a90:	8b a3       	std	Y+35, r24	; 0x23
    8a92:	9c a3       	std	Y+36, r25	; 0x24
    8a94:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
    8a96:	6d e0       	ldi	r22, 0x0D	; 13
    8a98:	e6 2e       	mov	r14, r22
    8a9a:	f1 2c       	mov	r15, r1
    8a9c:	ec 0e       	add	r14, r28
    8a9e:	fd 1e       	adc	r15, r29
    8aa0:	ce 01       	movw	r24, r28
    8aa2:	83 96       	adiw	r24, 0x23	; 35
    8aa4:	b7 01       	movw	r22, r14
    8aa6:	40 e0       	ldi	r20, 0x00	; 0
    8aa8:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    8aac:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    8aae:	00 97       	sbiw	r24, 0x00	; 0
    8ab0:	b9 f4       	brne	.+46     	; 0x8ae0 <f_stat+0x5c>
		INITBUF(dj, sfn, lfn);
    8ab2:	ce 01       	movw	r24, r28
    8ab4:	01 96       	adiw	r24, 0x01	; 1
    8ab6:	89 a3       	std	Y+33, r24	; 0x21
    8ab8:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    8aba:	6b a1       	ldd	r22, Y+35	; 0x23
    8abc:	7c a1       	ldd	r23, Y+36	; 0x24
    8abe:	c7 01       	movw	r24, r14
    8ac0:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8ac4:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follwo completed */
    8ac6:	00 97       	sbiw	r24, 0x00	; 0
    8ac8:	59 f4       	brne	.+22     	; 0x8ae0 <f_stat+0x5c>
			if (dj.dir)	/* Found an object */
    8aca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8acc:	98 a1       	ldd	r25, Y+32	; 0x20
    8ace:	89 2b       	or	r24, r25
    8ad0:	19 f4       	brne	.+6      	; 0x8ad8 <f_stat+0x54>
    8ad2:	06 e0       	ldi	r16, 0x06	; 6
    8ad4:	10 e0       	ldi	r17, 0x00	; 0
    8ad6:	04 c0       	rjmp	.+8      	; 0x8ae0 <f_stat+0x5c>
				get_fileinfo(&dj, fno);
    8ad8:	c7 01       	movw	r24, r14
    8ada:	b6 01       	movw	r22, r12
    8adc:	0e 94 8e 34 	call	0x691c	; 0x691c <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8ae0:	c8 01       	movw	r24, r16
    8ae2:	a4 96       	adiw	r28, 0x24	; 36
    8ae4:	e8 e0       	ldi	r30, 0x08	; 8
    8ae6:	0c 94 bd 5b 	jmp	0xb77a	; 0xb77a <__epilogue_restores__+0x14>

00008aea <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    8aea:	ae e0       	ldi	r26, 0x0E	; 14
    8aec:	b0 e0       	ldi	r27, 0x00	; 0
    8aee:	eb e7       	ldi	r30, 0x7B	; 123
    8af0:	f5 e4       	ldi	r31, 0x45	; 69
    8af2:	0c 94 a5 5b 	jmp	0xb74a	; 0xb74a <__prologue_saves__+0x1c>
    8af6:	8c 01       	movw	r16, r24
    8af8:	6d 87       	std	Y+13, r22	; 0x0d
    8afa:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    8afc:	ce 01       	movw	r24, r28
    8afe:	0d 96       	adiw	r24, 0x0d	; 13
    8b00:	b8 01       	movw	r22, r16
    8b02:	40 e0       	ldi	r20, 0x00	; 0
    8b04:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    8b08:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8b0a:	00 97       	sbiw	r24, 0x00	; 0
    8b0c:	09 f0       	breq	.+2      	; 0x8b10 <f_opendir+0x26>
    8b0e:	42 c0       	rjmp	.+132    	; 0x8b94 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    8b10:	ce 01       	movw	r24, r28
    8b12:	01 96       	adiw	r24, 0x01	; 1
    8b14:	d8 01       	movw	r26, r16
    8b16:	54 96       	adiw	r26, 0x14	; 20
    8b18:	8d 93       	st	X+, r24
    8b1a:	9c 93       	st	X, r25
    8b1c:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    8b1e:	6d 85       	ldd	r22, Y+13	; 0x0d
    8b20:	7e 85       	ldd	r23, Y+14	; 0x0e
    8b22:	c8 01       	movw	r24, r16
    8b24:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8b28:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    8b2a:	00 97       	sbiw	r24, 0x00	; 0
    8b2c:	71 f5       	brne	.+92     	; 0x8b8a <f_opendir+0xa0>
			dir = dj->dir;
    8b2e:	d8 01       	movw	r26, r16
    8b30:	52 96       	adiw	r26, 0x12	; 18
    8b32:	ed 91       	ld	r30, X+
    8b34:	fc 91       	ld	r31, X
    8b36:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    8b38:	30 97       	sbiw	r30, 0x00	; 0
    8b3a:	b9 f0       	breq	.+46     	; 0x8b6a <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    8b3c:	83 85       	ldd	r24, Z+11	; 0x0b
    8b3e:	84 ff       	sbrs	r24, 4
    8b40:	27 c0       	rjmp	.+78     	; 0x8b90 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8b42:	84 89       	ldd	r24, Z+20	; 0x14
    8b44:	95 89       	ldd	r25, Z+21	; 0x15
    8b46:	a0 e0       	ldi	r26, 0x00	; 0
    8b48:	b0 e0       	ldi	r27, 0x00	; 0
    8b4a:	dc 01       	movw	r26, r24
    8b4c:	99 27       	eor	r25, r25
    8b4e:	88 27       	eor	r24, r24
    8b50:	22 8d       	ldd	r18, Z+26	; 0x1a
    8b52:	33 8d       	ldd	r19, Z+27	; 0x1b
    8b54:	40 e0       	ldi	r20, 0x00	; 0
    8b56:	50 e0       	ldi	r21, 0x00	; 0
    8b58:	82 2b       	or	r24, r18
    8b5a:	93 2b       	or	r25, r19
    8b5c:	a4 2b       	or	r26, r20
    8b5e:	b5 2b       	or	r27, r21
    8b60:	f8 01       	movw	r30, r16
    8b62:	86 83       	std	Z+6, r24	; 0x06
    8b64:	97 83       	std	Z+7, r25	; 0x07
    8b66:	a0 87       	std	Z+8, r26	; 0x08
    8b68:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    8b6a:	d8 01       	movw	r26, r16
    8b6c:	ed 91       	ld	r30, X+
    8b6e:	fc 91       	ld	r31, X
    8b70:	11 97       	sbiw	r26, 0x01	; 1
    8b72:	85 81       	ldd	r24, Z+5	; 0x05
    8b74:	96 81       	ldd	r25, Z+6	; 0x06
    8b76:	12 96       	adiw	r26, 0x02	; 2
    8b78:	8d 93       	st	X+, r24
    8b7a:	9c 93       	st	X, r25
    8b7c:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    8b7e:	c8 01       	movw	r24, r16
    8b80:	60 e0       	ldi	r22, 0x00	; 0
    8b82:	70 e0       	ldi	r23, 0x00	; 0
    8b84:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    8b88:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8b8a:	24 30       	cpi	r18, 0x04	; 4
    8b8c:	31 05       	cpc	r19, r1
    8b8e:	11 f4       	brne	.+4      	; 0x8b94 <f_opendir+0xaa>
    8b90:	25 e0       	ldi	r18, 0x05	; 5
    8b92:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    8b94:	c9 01       	movw	r24, r18
    8b96:	2e 96       	adiw	r28, 0x0e	; 14
    8b98:	e4 e0       	ldi	r30, 0x04	; 4
    8b9a:	0c 94 c1 5b 	jmp	0xb782	; 0xb782 <__epilogue_restores__+0x1c>

00008b9e <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    8b9e:	a4 e2       	ldi	r26, 0x24	; 36
    8ba0:	b0 e0       	ldi	r27, 0x00	; 0
    8ba2:	e5 ed       	ldi	r30, 0xD5	; 213
    8ba4:	f5 e4       	ldi	r31, 0x45	; 69
    8ba6:	0c 94 a5 5b 	jmp	0xb74a	; 0xb74a <__prologue_saves__+0x1c>
    8baa:	8b a3       	std	Y+35, r24	; 0x23
    8bac:	9c a3       	std	Y+36, r25	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
    8bae:	8e 01       	movw	r16, r28
    8bb0:	03 5f       	subi	r16, 0xF3	; 243
    8bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    8bb4:	ce 01       	movw	r24, r28
    8bb6:	83 96       	adiw	r24, 0x23	; 35
    8bb8:	b8 01       	movw	r22, r16
    8bba:	40 e0       	ldi	r20, 0x00	; 0
    8bbc:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    8bc0:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    8bc2:	00 97       	sbiw	r24, 0x00	; 0
    8bc4:	e9 f5       	brne	.+122    	; 0x8c40 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    8bc6:	ce 01       	movw	r24, r28
    8bc8:	01 96       	adiw	r24, 0x01	; 1
    8bca:	89 a3       	std	Y+33, r24	; 0x21
    8bcc:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8bce:	6b a1       	ldd	r22, Y+35	; 0x23
    8bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    8bd2:	c8 01       	movw	r24, r16
    8bd4:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8bd8:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    8bda:	00 97       	sbiw	r24, 0x00	; 0
    8bdc:	61 f5       	brne	.+88     	; 0x8c36 <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    8bde:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8be0:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    8be2:	21 15       	cp	r18, r1
    8be4:	31 05       	cpc	r19, r1
    8be6:	39 f4       	brne	.+14     	; 0x8bf6 <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    8be8:	ed 85       	ldd	r30, Y+13	; 0x0d
    8bea:	fe 85       	ldd	r31, Y+14	; 0x0e
    8bec:	16 8a       	std	Z+22, r1	; 0x16
    8bee:	17 8a       	std	Z+23, r1	; 0x17
    8bf0:	10 8e       	std	Z+24, r1	; 0x18
    8bf2:	11 8e       	std	Z+25, r1	; 0x19
    8bf4:	25 c0       	rjmp	.+74     	; 0x8c40 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    8bf6:	d9 01       	movw	r26, r18
    8bf8:	1b 96       	adiw	r26, 0x0b	; 11
    8bfa:	8c 91       	ld	r24, X
    8bfc:	1b 97       	sbiw	r26, 0x0b	; 11
    8bfe:	84 ff       	sbrs	r24, 4
    8c00:	1d c0       	rjmp	.+58     	; 0x8c3c <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8c02:	0d 85       	ldd	r16, Y+13	; 0x0d
    8c04:	1e 85       	ldd	r17, Y+14	; 0x0e
    8c06:	54 96       	adiw	r26, 0x14	; 20
    8c08:	8d 91       	ld	r24, X+
    8c0a:	9c 91       	ld	r25, X
    8c0c:	55 97       	sbiw	r26, 0x15	; 21
    8c0e:	a0 e0       	ldi	r26, 0x00	; 0
    8c10:	b0 e0       	ldi	r27, 0x00	; 0
    8c12:	dc 01       	movw	r26, r24
    8c14:	99 27       	eor	r25, r25
    8c16:	88 27       	eor	r24, r24
    8c18:	f9 01       	movw	r30, r18
    8c1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    8c1c:	33 8d       	ldd	r19, Z+27	; 0x1b
    8c1e:	40 e0       	ldi	r20, 0x00	; 0
    8c20:	50 e0       	ldi	r21, 0x00	; 0
    8c22:	82 2b       	or	r24, r18
    8c24:	93 2b       	or	r25, r19
    8c26:	a4 2b       	or	r26, r20
    8c28:	b5 2b       	or	r27, r21
    8c2a:	f8 01       	movw	r30, r16
    8c2c:	86 8b       	std	Z+22, r24	; 0x16
    8c2e:	97 8b       	std	Z+23, r25	; 0x17
    8c30:	a0 8f       	std	Z+24, r26	; 0x18
    8c32:	b1 8f       	std	Z+25, r27	; 0x19
    8c34:	05 c0       	rjmp	.+10     	; 0x8c40 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8c36:	84 30       	cpi	r24, 0x04	; 4
    8c38:	91 05       	cpc	r25, r1
    8c3a:	11 f4       	brne	.+4      	; 0x8c40 <f_chdir+0xa2>
    8c3c:	65 e0       	ldi	r22, 0x05	; 5
    8c3e:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8c40:	cb 01       	movw	r24, r22
    8c42:	a4 96       	adiw	r28, 0x24	; 36
    8c44:	e4 e0       	ldi	r30, 0x04	; 4
    8c46:	0c 94 c1 5b 	jmp	0xb782	; 0xb782 <__epilogue_restores__+0x1c>

00008c4a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8c4a:	0f 93       	push	r16
    8c4c:	1f 93       	push	r17
    8c4e:	cf 93       	push	r28
    8c50:	df 93       	push	r29
    8c52:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    8c54:	60 e0       	ldi	r22, 0x00	; 0
    8c56:	70 e0       	ldi	r23, 0x00	; 0
    8c58:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    8c5c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8c5e:	00 97       	sbiw	r24, 0x00	; 0
    8c60:	e1 f5       	brne	.+120    	; 0x8cda <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    8c62:	4e 85       	ldd	r20, Y+14	; 0x0e
    8c64:	5f 85       	ldd	r21, Y+15	; 0x0f
    8c66:	68 89       	ldd	r22, Y+16	; 0x10
    8c68:	79 89       	ldd	r23, Y+17	; 0x11
    8c6a:	88 81       	ld	r24, Y
    8c6c:	99 81       	ldd	r25, Y+1	; 0x01
    8c6e:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    8c72:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    8c74:	00 97       	sbiw	r24, 0x00	; 0
    8c76:	89 f5       	brne	.+98     	; 0x8cda <dir_register+0x90>
			c = *dj->dir;
    8c78:	ea 89       	ldd	r30, Y+18	; 0x12
    8c7a:	fb 89       	ldd	r31, Y+19	; 0x13
    8c7c:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    8c7e:	e5 3e       	cpi	r30, 0xE5	; 229
    8c80:	91 f1       	breq	.+100    	; 0x8ce6 <dir_register+0x9c>
    8c82:	ee 23       	and	r30, r30
    8c84:	81 f1       	breq	.+96     	; 0x8ce6 <dir_register+0x9c>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    8c86:	ce 01       	movw	r24, r28
    8c88:	61 e0       	ldi	r22, 0x01	; 1
    8c8a:	70 e0       	ldi	r23, 0x00	; 0
    8c8c:	0e 94 95 42 	call	0x852a	; 0x852a <dir_next>
    8c90:	e5 cf       	rjmp	.-54     	; 0x8c5c <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    8c92:	aa 89       	ldd	r26, Y+18	; 0x12
    8c94:	bb 89       	ldd	r27, Y+19	; 0x13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8c96:	bd 01       	movw	r22, r26
    8c98:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    8c9a:	cd 01       	movw	r24, r26
    8c9c:	80 96       	adiw	r24, 0x20	; 32
    8c9e:	01 c0       	rjmp	.+2      	; 0x8ca2 <dir_register+0x58>
    8ca0:	11 92       	st	Z+, r1
    8ca2:	e8 17       	cp	r30, r24
    8ca4:	f9 07       	cpc	r31, r25
    8ca6:	e1 f7       	brne	.-8      	; 0x8ca0 <dir_register+0x56>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    8ca8:	0c 89       	ldd	r16, Y+20	; 0x14
    8caa:	1d 89       	ldd	r17, Y+21	; 0x15
	while (cnt--) *d++ = *s++;
    8cac:	a8 01       	movw	r20, r16
    8cae:	45 5f       	subi	r20, 0xF5	; 245
    8cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    8cb2:	06 c0       	rjmp	.+12     	; 0x8cc0 <dir_register+0x76>
    8cb4:	f8 01       	movw	r30, r16
    8cb6:	81 91       	ld	r24, Z+
    8cb8:	8f 01       	movw	r16, r30
    8cba:	fb 01       	movw	r30, r22
    8cbc:	81 93       	st	Z+, r24
    8cbe:	bf 01       	movw	r22, r30
    8cc0:	04 17       	cp	r16, r20
    8cc2:	15 07       	cpc	r17, r21
    8cc4:	b9 f7       	brne	.-18     	; 0x8cb4 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
    8cc6:	ec 89       	ldd	r30, Y+20	; 0x14
    8cc8:	fd 89       	ldd	r31, Y+21	; 0x15
    8cca:	83 85       	ldd	r24, Z+11	; 0x0b
    8ccc:	88 71       	andi	r24, 0x18	; 24
    8cce:	1c 96       	adiw	r26, 0x0c	; 12
    8cd0:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    8cd2:	e8 81       	ld	r30, Y
    8cd4:	f9 81       	ldd	r31, Y+1	; 0x01
    8cd6:	81 e0       	ldi	r24, 0x01	; 1
    8cd8:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    8cda:	c9 01       	movw	r24, r18
    8cdc:	df 91       	pop	r29
    8cde:	cf 91       	pop	r28
    8ce0:	1f 91       	pop	r17
    8ce2:	0f 91       	pop	r16
    8ce4:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    8ce6:	4e 85       	ldd	r20, Y+14	; 0x0e
    8ce8:	5f 85       	ldd	r21, Y+15	; 0x0f
    8cea:	68 89       	ldd	r22, Y+16	; 0x10
    8cec:	79 89       	ldd	r23, Y+17	; 0x11
    8cee:	88 81       	ld	r24, Y
    8cf0:	99 81       	ldd	r25, Y+1	; 0x01
    8cf2:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    8cf6:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8cf8:	00 97       	sbiw	r24, 0x00	; 0
    8cfa:	59 f2       	breq	.-106    	; 0x8c92 <dir_register+0x48>
    8cfc:	ee cf       	rjmp	.-36     	; 0x8cda <dir_register+0x90>

00008cfe <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8cfe:	cf 93       	push	r28
    8d00:	df 93       	push	r29
    8d02:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    8d04:	6c 81       	ldd	r22, Y+4	; 0x04
    8d06:	7d 81       	ldd	r23, Y+5	; 0x05
    8d08:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    8d0c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8d0e:	00 97       	sbiw	r24, 0x00	; 0
    8d10:	99 f4       	brne	.+38     	; 0x8d38 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    8d12:	4e 85       	ldd	r20, Y+14	; 0x0e
    8d14:	5f 85       	ldd	r21, Y+15	; 0x0f
    8d16:	68 89       	ldd	r22, Y+16	; 0x10
    8d18:	79 89       	ldd	r23, Y+17	; 0x11
    8d1a:	88 81       	ld	r24, Y
    8d1c:	99 81       	ldd	r25, Y+1	; 0x01
    8d1e:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    8d22:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8d24:	00 97       	sbiw	r24, 0x00	; 0
    8d26:	41 f4       	brne	.+16     	; 0x8d38 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    8d28:	ea 89       	ldd	r30, Y+18	; 0x12
    8d2a:	fb 89       	ldd	r31, Y+19	; 0x13
    8d2c:	85 ee       	ldi	r24, 0xE5	; 229
    8d2e:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    8d30:	e8 81       	ld	r30, Y
    8d32:	f9 81       	ldd	r31, Y+1	; 0x01
    8d34:	81 e0       	ldi	r24, 0x01	; 1
    8d36:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    8d38:	c9 01       	movw	r24, r18
    8d3a:	df 91       	pop	r29
    8d3c:	cf 91       	pop	r28
    8d3e:	08 95       	ret

00008d40 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    8d40:	0f 93       	push	r16
    8d42:	cf 93       	push	r28
    8d44:	df 93       	push	r29
    8d46:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    8d48:	40 e0       	ldi	r20, 0x00	; 0
    8d4a:	50 e0       	ldi	r21, 0x00	; 0
    8d4c:	60 e0       	ldi	r22, 0x00	; 0
    8d4e:	70 e0       	ldi	r23, 0x00	; 0
    8d50:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    8d54:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8d56:	00 97       	sbiw	r24, 0x00	; 0
    8d58:	09 f0       	breq	.+2      	; 0x8d5c <sync+0x1c>
    8d5a:	60 c0       	rjmp	.+192    	; 0x8e1c <sync+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    8d5c:	88 81       	ld	r24, Y
    8d5e:	83 30       	cpi	r24, 0x03	; 3
    8d60:	09 f0       	breq	.+2      	; 0x8d64 <sync+0x24>
    8d62:	51 c0       	rjmp	.+162    	; 0x8e06 <sync+0xc6>
    8d64:	89 85       	ldd	r24, Y+9	; 0x09
    8d66:	88 23       	and	r24, r24
    8d68:	09 f4       	brne	.+2      	; 0x8d6c <sync+0x2c>
    8d6a:	4d c0       	rjmp	.+154    	; 0x8e06 <sync+0xc6>
			fs->winsect = 0;
    8d6c:	1e a6       	std	Y+46, r1	; 0x2e
    8d6e:	1f a6       	std	Y+47, r1	; 0x2f
    8d70:	18 aa       	std	Y+48, r1	; 0x30
    8d72:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    8d74:	be 01       	movw	r22, r28
    8d76:	6e 5c       	subi	r22, 0xCE	; 206
    8d78:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8d7a:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    8d7c:	ce 01       	movw	r24, r28
    8d7e:	8e 5c       	subi	r24, 0xCE	; 206
    8d80:	9d 4f       	sbci	r25, 0xFD	; 253
    8d82:	01 c0       	rjmp	.+2      	; 0x8d86 <sync+0x46>
    8d84:	11 92       	st	Z+, r1
    8d86:	e8 17       	cp	r30, r24
    8d88:	f9 07       	cpc	r31, r25
    8d8a:	e1 f7       	brne	.-8      	; 0x8d84 <sync+0x44>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    8d8c:	c0 5d       	subi	r28, 0xD0	; 208
    8d8e:	dd 4f       	sbci	r29, 0xFD	; 253
    8d90:	85 e5       	ldi	r24, 0x55	; 85
    8d92:	9a ea       	ldi	r25, 0xAA	; 170
    8d94:	88 83       	st	Y, r24
    8d96:	99 83       	std	Y+1, r25	; 0x01
    8d98:	c0 53       	subi	r28, 0x30	; 48
    8d9a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    8d9c:	82 e5       	ldi	r24, 0x52	; 82
    8d9e:	92 e5       	ldi	r25, 0x52	; 82
    8da0:	a1 e6       	ldi	r26, 0x61	; 97
    8da2:	b1 e4       	ldi	r27, 0x41	; 65
    8da4:	8a ab       	std	Y+50, r24	; 0x32
    8da6:	9b ab       	std	Y+51, r25	; 0x33
    8da8:	ac ab       	std	Y+52, r26	; 0x34
    8daa:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    8dac:	ca 5e       	subi	r28, 0xEA	; 234
    8dae:	dd 4f       	sbci	r29, 0xFD	; 253
    8db0:	82 e7       	ldi	r24, 0x72	; 114
    8db2:	92 e7       	ldi	r25, 0x72	; 114
    8db4:	a1 e4       	ldi	r26, 0x41	; 65
    8db6:	b1 e6       	ldi	r27, 0x61	; 97
    8db8:	88 83       	st	Y, r24
    8dba:	99 83       	std	Y+1, r25	; 0x01
    8dbc:	aa 83       	std	Y+2, r26	; 0x02
    8dbe:	bb 83       	std	Y+3, r27	; 0x03
    8dc0:	c6 51       	subi	r28, 0x16	; 22
    8dc2:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    8dc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    8dc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    8dc8:	a8 89       	ldd	r26, Y+16	; 0x10
    8dca:	b9 89       	ldd	r27, Y+17	; 0x11
    8dcc:	c6 5e       	subi	r28, 0xE6	; 230
    8dce:	dd 4f       	sbci	r29, 0xFD	; 253
    8dd0:	88 83       	st	Y, r24
    8dd2:	99 83       	std	Y+1, r25	; 0x01
    8dd4:	aa 83       	std	Y+2, r26	; 0x02
    8dd6:	bb 83       	std	Y+3, r27	; 0x03
    8dd8:	ca 51       	subi	r28, 0x1A	; 26
    8dda:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    8ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    8dde:	9b 85       	ldd	r25, Y+11	; 0x0b
    8de0:	ac 85       	ldd	r26, Y+12	; 0x0c
    8de2:	bd 85       	ldd	r27, Y+13	; 0x0d
    8de4:	c2 5e       	subi	r28, 0xE2	; 226
    8de6:	dd 4f       	sbci	r29, 0xFD	; 253
    8de8:	88 83       	st	Y, r24
    8dea:	99 83       	std	Y+1, r25	; 0x01
    8dec:	aa 83       	std	Y+2, r26	; 0x02
    8dee:	bb 83       	std	Y+3, r27	; 0x03
    8df0:	ce 51       	subi	r28, 0x1E	; 30
    8df2:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    8df4:	2a 89       	ldd	r18, Y+18	; 0x12
    8df6:	3b 89       	ldd	r19, Y+19	; 0x13
    8df8:	4c 89       	ldd	r20, Y+20	; 0x14
    8dfa:	5d 89       	ldd	r21, Y+21	; 0x15
    8dfc:	89 81       	ldd	r24, Y+1	; 0x01
    8dfe:	01 e0       	ldi	r16, 0x01	; 1
    8e00:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
			fs->fsi_flag = 0;
    8e04:	19 86       	std	Y+9, r1	; 0x09
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    8e06:	89 81       	ldd	r24, Y+1	; 0x01
    8e08:	60 e0       	ldi	r22, 0x00	; 0
    8e0a:	40 e0       	ldi	r20, 0x00	; 0
    8e0c:	50 e0       	ldi	r21, 0x00	; 0
    8e0e:	0e 94 64 55 	call	0xaac8	; 0xaac8 <disk_ioctl>
    8e12:	00 97       	sbiw	r24, 0x00	; 0
    8e14:	11 f0       	breq	.+4      	; 0x8e1a <sync+0xda>
    8e16:	81 e0       	ldi	r24, 0x01	; 1
    8e18:	90 e0       	ldi	r25, 0x00	; 0
    8e1a:	9c 01       	movw	r18, r24
			res = FR_DISK_ERR;
	}

	return res;
}
    8e1c:	c9 01       	movw	r24, r18
    8e1e:	df 91       	pop	r29
    8e20:	cf 91       	pop	r28
    8e22:	0f 91       	pop	r16
    8e24:	08 95       	ret

00008e26 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    8e26:	a4 e2       	ldi	r26, 0x24	; 36
    8e28:	b0 e0       	ldi	r27, 0x00	; 0
    8e2a:	e9 e1       	ldi	r30, 0x19	; 25
    8e2c:	f7 e4       	ldi	r31, 0x47	; 71
    8e2e:	0c 94 a3 5b 	jmp	0xb746	; 0xb746 <__prologue_saves__+0x18>
    8e32:	8b a3       	std	Y+35, r24	; 0x23
    8e34:	9c a3       	std	Y+36, r25	; 0x24
    8e36:	7b 01       	movw	r14, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8e38:	8e 01       	movw	r16, r28
    8e3a:	03 5f       	subi	r16, 0xF3	; 243
    8e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    8e3e:	ce 01       	movw	r24, r28
    8e40:	83 96       	adiw	r24, 0x23	; 35
    8e42:	b8 01       	movw	r22, r16
    8e44:	41 e0       	ldi	r20, 0x01	; 1
    8e46:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    8e4a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8e4c:	00 97       	sbiw	r24, 0x00	; 0
    8e4e:	69 f5       	brne	.+90     	; 0x8eaa <f_utime+0x84>
		INITBUF(dj, sfn, lfn);
    8e50:	ce 01       	movw	r24, r28
    8e52:	01 96       	adiw	r24, 0x01	; 1
    8e54:	89 a3       	std	Y+33, r24	; 0x21
    8e56:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    8e58:	6b a1       	ldd	r22, Y+35	; 0x23
    8e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    8e5c:	c8 01       	movw	r24, r16
    8e5e:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8e62:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8e64:	00 97       	sbiw	r24, 0x00	; 0
    8e66:	09 f5       	brne	.+66     	; 0x8eaa <f_utime+0x84>
    8e68:	e9 a1       	ldd	r30, Y+33	; 0x21
    8e6a:	fa a1       	ldd	r31, Y+34	; 0x22
    8e6c:	83 85       	ldd	r24, Z+11	; 0x0b
    8e6e:	85 fd       	sbrc	r24, 5
    8e70:	1a c0       	rjmp	.+52     	; 0x8ea6 <f_utime+0x80>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8e72:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8e74:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    8e76:	30 97       	sbiw	r30, 0x00	; 0
    8e78:	b1 f0       	breq	.+44     	; 0x8ea6 <f_utime+0x80>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    8e7a:	d7 01       	movw	r26, r14
    8e7c:	16 96       	adiw	r26, 0x06	; 6
    8e7e:	8d 91       	ld	r24, X+
    8e80:	9c 91       	ld	r25, X
    8e82:	17 97       	sbiw	r26, 0x07	; 7
    8e84:	86 8b       	std	Z+22, r24	; 0x16
    8e86:	97 8b       	std	Z+23, r25	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    8e88:	14 96       	adiw	r26, 0x04	; 4
    8e8a:	8d 91       	ld	r24, X+
    8e8c:	9c 91       	ld	r25, X
    8e8e:	15 97       	sbiw	r26, 0x05	; 5
    8e90:	80 8f       	std	Z+24, r24	; 0x18
    8e92:	91 8f       	std	Z+25, r25	; 0x19
				dj.fs->wflag = 1;
    8e94:	ed 85       	ldd	r30, Y+13	; 0x0d
    8e96:	fe 85       	ldd	r31, Y+14	; 0x0e
    8e98:	81 e0       	ldi	r24, 0x01	; 1
    8e9a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8e9c:	cf 01       	movw	r24, r30
    8e9e:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <sync>
    8ea2:	9c 01       	movw	r18, r24
    8ea4:	02 c0       	rjmp	.+4      	; 0x8eaa <f_utime+0x84>
    8ea6:	26 e0       	ldi	r18, 0x06	; 6
    8ea8:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8eaa:	c9 01       	movw	r24, r18
    8eac:	a4 96       	adiw	r28, 0x24	; 36
    8eae:	e6 e0       	ldi	r30, 0x06	; 6
    8eb0:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

00008eb4 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    8eb4:	a4 e2       	ldi	r26, 0x24	; 36
    8eb6:	b0 e0       	ldi	r27, 0x00	; 0
    8eb8:	e0 e6       	ldi	r30, 0x60	; 96
    8eba:	f7 e4       	ldi	r31, 0x47	; 71
    8ebc:	0c 94 a3 5b 	jmp	0xb746	; 0xb746 <__prologue_saves__+0x18>
    8ec0:	8b a3       	std	Y+35, r24	; 0x23
    8ec2:	9c a3       	std	Y+36, r25	; 0x24
    8ec4:	e6 2e       	mov	r14, r22
    8ec6:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8ec8:	8e 01       	movw	r16, r28
    8eca:	03 5f       	subi	r16, 0xF3	; 243
    8ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    8ece:	ce 01       	movw	r24, r28
    8ed0:	83 96       	adiw	r24, 0x23	; 35
    8ed2:	b8 01       	movw	r22, r16
    8ed4:	41 e0       	ldi	r20, 0x01	; 1
    8ed6:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    8eda:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8edc:	00 97       	sbiw	r24, 0x00	; 0
    8ede:	49 f5       	brne	.+82     	; 0x8f32 <f_chmod+0x7e>
		INITBUF(dj, sfn, lfn);
    8ee0:	ce 01       	movw	r24, r28
    8ee2:	01 96       	adiw	r24, 0x01	; 1
    8ee4:	89 a3       	std	Y+33, r24	; 0x21
    8ee6:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    8eea:	7c a1       	ldd	r23, Y+36	; 0x24
    8eec:	c8 01       	movw	r24, r16
    8eee:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8ef2:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8ef4:	00 97       	sbiw	r24, 0x00	; 0
    8ef6:	e9 f4       	brne	.+58     	; 0x8f32 <f_chmod+0x7e>
    8ef8:	e9 a1       	ldd	r30, Y+33	; 0x21
    8efa:	fa a1       	ldd	r31, Y+34	; 0x22
    8efc:	83 85       	ldd	r24, Z+11	; 0x0b
    8efe:	85 fd       	sbrc	r24, 5
    8f00:	16 c0       	rjmp	.+44     	; 0x8f2e <f_chmod+0x7a>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8f02:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8f04:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    8f06:	30 97       	sbiw	r30, 0x00	; 0
    8f08:	91 f0       	breq	.+36     	; 0x8f2e <f_chmod+0x7a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    8f0a:	9f 2d       	mov	r25, r15
    8f0c:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8f0e:	89 2f       	mov	r24, r25
    8f10:	80 95       	com	r24
    8f12:	23 85       	ldd	r18, Z+11	; 0x0b
    8f14:	82 23       	and	r24, r18
    8f16:	9e 21       	and	r25, r14
    8f18:	89 2b       	or	r24, r25
    8f1a:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    8f1c:	ed 85       	ldd	r30, Y+13	; 0x0d
    8f1e:	fe 85       	ldd	r31, Y+14	; 0x0e
    8f20:	81 e0       	ldi	r24, 0x01	; 1
    8f22:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8f24:	cf 01       	movw	r24, r30
    8f26:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <sync>
    8f2a:	9c 01       	movw	r18, r24
    8f2c:	02 c0       	rjmp	.+4      	; 0x8f32 <f_chmod+0x7e>
    8f2e:	26 e0       	ldi	r18, 0x06	; 6
    8f30:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8f32:	c9 01       	movw	r24, r18
    8f34:	a4 96       	adiw	r28, 0x24	; 36
    8f36:	e6 e0       	ldi	r30, 0x06	; 6
    8f38:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

00008f3c <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    8f3c:	af e4       	ldi	r26, 0x4F	; 79
    8f3e:	b0 e0       	ldi	r27, 0x00	; 0
    8f40:	e4 ea       	ldi	r30, 0xA4	; 164
    8f42:	f7 e4       	ldi	r31, 0x47	; 71
    8f44:	0c 94 a1 5b 	jmp	0xb742	; 0xb742 <__prologue_saves__+0x14>
    8f48:	8e 01       	movw	r16, r28
    8f4a:	02 5b       	subi	r16, 0xB2	; 178
    8f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    8f4e:	d8 01       	movw	r26, r16
    8f50:	8d 93       	st	X+, r24
    8f52:	9c 93       	st	X, r25
    8f54:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    8f56:	ce 01       	movw	r24, r28
    8f58:	01 96       	adiw	r24, 0x01	; 1
    8f5a:	8e ab       	std	Y+54, r24	; 0x36
    8f5c:	9f ab       	std	Y+55, r25	; 0x37
	res = auto_mount(&path_old, &dj_old.fs, 1);
    8f5e:	32 e2       	ldi	r19, 0x22	; 34
    8f60:	e3 2e       	mov	r14, r19
    8f62:	f1 2c       	mov	r15, r1
    8f64:	ec 0e       	add	r14, r28
    8f66:	fd 1e       	adc	r15, r29
    8f68:	c8 01       	movw	r24, r16
    8f6a:	b7 01       	movw	r22, r14
    8f6c:	41 e0       	ldi	r20, 0x01	; 1
    8f6e:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    8f72:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8f74:	00 97       	sbiw	r24, 0x00	; 0
    8f76:	09 f0       	breq	.+2      	; 0x8f7a <f_rename+0x3e>
    8f78:	f0 c0       	rjmp	.+480    	; 0x915a <f_rename+0x21e>
		dj_new.fs = dj_old.fs;
    8f7a:	8a a1       	ldd	r24, Y+34	; 0x22
    8f7c:	9b a1       	ldd	r25, Y+35	; 0x23
    8f7e:	88 af       	std	Y+56, r24	; 0x38
    8f80:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    8f82:	f8 01       	movw	r30, r16
    8f84:	60 81       	ld	r22, Z
    8f86:	71 81       	ldd	r23, Z+1	; 0x01
    8f88:	c7 01       	movw	r24, r14
    8f8a:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8f8e:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
    8f90:	00 97       	sbiw	r24, 0x00	; 0
    8f92:	09 f0       	breq	.+2      	; 0x8f96 <f_rename+0x5a>
    8f94:	e2 c0       	rjmp	.+452    	; 0x915a <f_rename+0x21e>
    8f96:	ee a9       	ldd	r30, Y+54	; 0x36
    8f98:	ff a9       	ldd	r31, Y+55	; 0x37
    8f9a:	83 85       	ldd	r24, Z+11	; 0x0b
    8f9c:	85 ff       	sbrs	r24, 5
    8f9e:	03 c0       	rjmp	.+6      	; 0x8fa6 <f_rename+0x6a>
    8fa0:	26 e0       	ldi	r18, 0x06	; 6
    8fa2:	30 e0       	ldi	r19, 0x00	; 0
    8fa4:	da c0       	rjmp	.+436    	; 0x915a <f_rename+0x21e>
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    8fa6:	8c a9       	ldd	r24, Y+52	; 0x34
    8fa8:	9d a9       	ldd	r25, Y+53	; 0x35
    8faa:	00 97       	sbiw	r24, 0x00	; 0
    8fac:	19 f4       	brne	.+6      	; 0x8fb4 <f_rename+0x78>
    8fae:	24 e0       	ldi	r18, 0x04	; 4
    8fb0:	30 e0       	ldi	r19, 0x00	; 0
    8fb2:	d3 c0       	rjmp	.+422    	; 0x915a <f_rename+0x21e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8fb4:	de 01       	movw	r26, r28
    8fb6:	1d 96       	adiw	r26, 0x0d	; 13
    8fb8:	fc 01       	movw	r30, r24
    8fba:	02 c0       	rjmp	.+4      	; 0x8fc0 <f_rename+0x84>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8fbc:	82 85       	ldd	r24, Z+10	; 0x0a
    8fbe:	8d 93       	st	X+, r24
    8fc0:	31 96       	adiw	r30, 0x01	; 1
    8fc2:	ae 15       	cp	r26, r14
    8fc4:	bf 05       	cpc	r27, r15
    8fc6:	d1 f7       	brne	.-12     	; 0x8fbc <f_rename+0x80>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8fc8:	de 01       	movw	r26, r28
    8fca:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    8fcc:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    8fce:	9d 01       	movw	r18, r26
    8fd0:	02 c0       	rjmp	.+4      	; 0x8fd6 <f_rename+0x9a>
    8fd2:	81 91       	ld	r24, Z+
    8fd4:	8d 93       	st	X+, r24
    8fd6:	e2 17       	cp	r30, r18
    8fd8:	f3 07       	cpc	r31, r19
    8fda:	d9 f7       	brne	.-10     	; 0x8fd2 <f_rename+0x96>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    8fdc:	8e 01       	movw	r16, r28
    8fde:	08 5c       	subi	r16, 0xC8	; 200
    8fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    8fe2:	c8 01       	movw	r24, r16
    8fe4:	b6 01       	movw	r22, r12
    8fe6:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    8fea:	9c 01       	movw	r18, r24
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    8fec:	00 97       	sbiw	r24, 0x00	; 0
    8fee:	19 f4       	brne	.+6      	; 0x8ff6 <f_rename+0xba>
    8ff0:	28 e0       	ldi	r18, 0x08	; 8
    8ff2:	30 e0       	ldi	r19, 0x00	; 0
    8ff4:	b2 c0       	rjmp	.+356    	; 0x915a <f_rename+0x21e>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    8ff6:	84 30       	cpi	r24, 0x04	; 4
    8ff8:	91 05       	cpc	r25, r1
    8ffa:	09 f0       	breq	.+2      	; 0x8ffe <f_rename+0xc2>
    8ffc:	ae c0       	rjmp	.+348    	; 0x915a <f_rename+0x21e>
		res = dir_register(&dj_new);			/* Register the new object */
    8ffe:	c8 01       	movw	r24, r16
    9000:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <dir_register>
    9004:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    9006:	00 97       	sbiw	r24, 0x00	; 0
    9008:	09 f0       	breq	.+2      	; 0x900c <f_rename+0xd0>
    900a:	a7 c0       	rjmp	.+334    	; 0x915a <f_rename+0x21e>
			dir = dj_new.dir;					/* Copy object information into new entry */
    900c:	fe 01       	movw	r30, r28
    900e:	e6 5b       	subi	r30, 0xB6	; 182
    9010:	ff 4f       	sbci	r31, 0xFF	; 255
    9012:	20 81       	ld	r18, Z
    9014:	31 81       	ldd	r19, Z+1	; 0x01

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    9016:	de 01       	movw	r26, r28
    9018:	1f 96       	adiw	r26, 0x0f	; 15
    901a:	f9 01       	movw	r30, r18
    901c:	02 c0       	rjmp	.+4      	; 0x9022 <f_rename+0xe6>
	while (cnt--) *d++ = *s++;
    901e:	8d 91       	ld	r24, X+
    9020:	84 87       	std	Z+12, r24	; 0x0c
    9022:	31 96       	adiw	r30, 0x01	; 1
    9024:	ae 15       	cp	r26, r14
    9026:	bf 05       	cpc	r27, r15
    9028:	d1 f7       	brne	.-12     	; 0x901e <f_rename+0xe2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    902a:	8d 85       	ldd	r24, Y+13	; 0x0d
    902c:	80 62       	ori	r24, 0x20	; 32
    902e:	d9 01       	movw	r26, r18
    9030:	1b 96       	adiw	r26, 0x0b	; 11
    9032:	8c 93       	st	X, r24
    9034:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    9036:	ea a1       	ldd	r30, Y+34	; 0x22
    9038:	fb a1       	ldd	r31, Y+35	; 0x23
    903a:	81 e0       	ldi	r24, 0x01	; 1
    903c:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    903e:	1b 96       	adiw	r26, 0x0b	; 11
    9040:	8c 91       	ld	r24, X
    9042:	1b 97       	sbiw	r26, 0x0b	; 11
    9044:	84 ff       	sbrs	r24, 4
    9046:	7a c0       	rjmp	.+244    	; 0x913c <f_rename+0x200>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    9048:	c8 ac       	ldd	r12, Y+56	; 0x38
    904a:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    904c:	5a 96       	adiw	r26, 0x1a	; 26
    904e:	8d 91       	ld	r24, X+
    9050:	9c 91       	ld	r25, X
    9052:	5b 97       	sbiw	r26, 0x1b	; 27
    9054:	54 96       	adiw	r26, 0x14	; 20
    9056:	2d 91       	ld	r18, X+
    9058:	3c 91       	ld	r19, X
    905a:	55 97       	sbiw	r26, 0x15	; 21
    905c:	82 2b       	or	r24, r18
    905e:	93 2b       	or	r25, r19
    9060:	7c 01       	movw	r14, r24
    9062:	00 e0       	ldi	r16, 0x00	; 0
    9064:	10 e0       	ldi	r17, 0x00	; 0
    9066:	8e ef       	ldi	r24, 0xFE	; 254
    9068:	9f ef       	ldi	r25, 0xFF	; 255
    906a:	af ef       	ldi	r26, 0xFF	; 255
    906c:	bf ef       	ldi	r27, 0xFF	; 255
    906e:	e8 0e       	add	r14, r24
    9070:	f9 1e       	adc	r15, r25
    9072:	0a 1f       	adc	r16, r26
    9074:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9076:	f6 01       	movw	r30, r12
    9078:	86 8d       	ldd	r24, Z+30	; 0x1e
    907a:	97 8d       	ldd	r25, Z+31	; 0x1f
    907c:	a0 a1       	ldd	r26, Z+32	; 0x20
    907e:	b1 a1       	ldd	r27, Z+33	; 0x21
    9080:	02 97       	sbiw	r24, 0x02	; 2
    9082:	a1 09       	sbc	r26, r1
    9084:	b1 09       	sbc	r27, r1
    9086:	e8 16       	cp	r14, r24
    9088:	f9 06       	cpc	r15, r25
    908a:	0a 07       	cpc	r16, r26
    908c:	1b 07       	cpc	r17, r27
    908e:	08 f0       	brcs	.+2      	; 0x9092 <f_rename+0x156>
    9090:	62 c0       	rjmp	.+196    	; 0x9156 <f_rename+0x21a>
	return clst * fs->csize + fs->database;
    9092:	22 81       	ldd	r18, Z+2	; 0x02
    9094:	30 e0       	ldi	r19, 0x00	; 0
    9096:	40 e0       	ldi	r20, 0x00	; 0
    9098:	50 e0       	ldi	r21, 0x00	; 0
    909a:	c8 01       	movw	r24, r16
    909c:	b7 01       	movw	r22, r14
    909e:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    90a2:	ab 01       	movw	r20, r22
    90a4:	bc 01       	movw	r22, r24
    90a6:	f6 01       	movw	r30, r12
    90a8:	82 a5       	ldd	r24, Z+42	; 0x2a
    90aa:	93 a5       	ldd	r25, Z+43	; 0x2b
    90ac:	a4 a5       	ldd	r26, Z+44	; 0x2c
    90ae:	b5 a5       	ldd	r27, Z+45	; 0x2d
    90b0:	48 0f       	add	r20, r24
    90b2:	59 1f       	adc	r21, r25
    90b4:	6a 1f       	adc	r22, r26
    90b6:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    90b8:	41 15       	cp	r20, r1
    90ba:	51 05       	cpc	r21, r1
    90bc:	61 05       	cpc	r22, r1
    90be:	71 05       	cpc	r23, r1
    90c0:	09 f4       	brne	.+2      	; 0x90c4 <f_rename+0x188>
    90c2:	49 c0       	rjmp	.+146    	; 0x9156 <f_rename+0x21a>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    90c4:	c6 01       	movw	r24, r12
    90c6:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    90ca:	9c 01       	movw	r18, r24
					dir = dj_new.fs->win+32;
    90cc:	08 ad       	ldd	r16, Y+56	; 0x38
    90ce:	19 ad       	ldd	r17, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    90d0:	00 97       	sbiw	r24, 0x00	; 0
    90d2:	09 f0       	breq	.+2      	; 0x90d6 <f_rename+0x19a>
    90d4:	42 c0       	rjmp	.+132    	; 0x915a <f_rename+0x21e>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    90d6:	b8 01       	movw	r22, r16
    90d8:	6e 5a       	subi	r22, 0xAE	; 174
    90da:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    90dc:	db 01       	movw	r26, r22
    90de:	11 96       	adiw	r26, 0x01	; 1
    90e0:	8c 91       	ld	r24, X
    90e2:	8e 32       	cpi	r24, 0x2E	; 46
    90e4:	59 f5       	brne	.+86     	; 0x913c <f_rename+0x200>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    90e6:	f8 01       	movw	r30, r16
    90e8:	80 81       	ld	r24, Z
    90ea:	83 30       	cpi	r24, 0x03	; 3
    90ec:	a9 f4       	brne	.+42     	; 0x9118 <f_rename+0x1dc>
    90ee:	fe 01       	movw	r30, r28
    90f0:	fe 96       	adiw	r30, 0x3e	; 62
    90f2:	20 81       	ld	r18, Z
    90f4:	31 81       	ldd	r19, Z+1	; 0x01
    90f6:	42 81       	ldd	r20, Z+2	; 0x02
    90f8:	53 81       	ldd	r21, Z+3	; 0x03
    90fa:	f8 01       	movw	r30, r16
    90fc:	86 a1       	ldd	r24, Z+38	; 0x26
    90fe:	97 a1       	ldd	r25, Z+39	; 0x27
    9100:	a0 a5       	ldd	r26, Z+40	; 0x28
    9102:	b1 a5       	ldd	r27, Z+41	; 0x29
    9104:	28 17       	cp	r18, r24
    9106:	39 07       	cpc	r19, r25
    9108:	4a 07       	cpc	r20, r26
    910a:	5b 07       	cpc	r21, r27
    910c:	29 f4       	brne	.+10     	; 0x9118 <f_rename+0x1dc>
    910e:	80 e0       	ldi	r24, 0x00	; 0
    9110:	90 e0       	ldi	r25, 0x00	; 0
    9112:	a0 e0       	ldi	r26, 0x00	; 0
    9114:	b0 e0       	ldi	r27, 0x00	; 0
    9116:	06 c0       	rjmp	.+12     	; 0x9124 <f_rename+0x1e8>
    9118:	fe 01       	movw	r30, r28
    911a:	fe 96       	adiw	r30, 0x3e	; 62
    911c:	80 81       	ld	r24, Z
    911e:	91 81       	ldd	r25, Z+1	; 0x01
    9120:	a2 81       	ldd	r26, Z+2	; 0x02
    9122:	b3 81       	ldd	r27, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    9124:	fb 01       	movw	r30, r22
    9126:	82 8f       	std	Z+26, r24	; 0x1a
    9128:	93 8f       	std	Z+27, r25	; 0x1b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    912a:	cd 01       	movw	r24, r26
    912c:	aa 27       	eor	r26, r26
    912e:	bb 27       	eor	r27, r27
    9130:	84 8b       	std	Z+20, r24	; 0x14
    9132:	95 8b       	std	Z+21, r25	; 0x15
						dj_new.fs->wflag = 1;
    9134:	81 e0       	ldi	r24, 0x01	; 1
    9136:	d8 01       	movw	r26, r16
    9138:	14 96       	adiw	r26, 0x04	; 4
    913a:	8c 93       	st	X, r24
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    913c:	ce 01       	movw	r24, r28
    913e:	82 96       	adiw	r24, 0x22	; 34
    9140:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <dir_remove>
    9144:	9c 01       	movw	r18, r24
				if (res == FR_OK)
    9146:	00 97       	sbiw	r24, 0x00	; 0
    9148:	41 f4       	brne	.+16     	; 0x915a <f_rename+0x21e>
					res = sync(dj_old.fs);
    914a:	8a a1       	ldd	r24, Y+34	; 0x22
    914c:	9b a1       	ldd	r25, Y+35	; 0x23
    914e:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <sync>
    9152:	9c 01       	movw	r18, r24
    9154:	02 c0       	rjmp	.+4      	; 0x915a <f_rename+0x21e>
    9156:	22 e0       	ldi	r18, 0x02	; 2
    9158:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    915a:	c9 01       	movw	r24, r18
    915c:	c1 5b       	subi	r28, 0xB1	; 177
    915e:	df 4f       	sbci	r29, 0xFF	; 255
    9160:	e8 e0       	ldi	r30, 0x08	; 8
    9162:	0c 94 bd 5b 	jmp	0xb77a	; 0xb77a <__epilogue_restores__+0x14>

00009166 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    9166:	ae e2       	ldi	r26, 0x2E	; 46
    9168:	b0 e0       	ldi	r27, 0x00	; 0
    916a:	e9 eb       	ldi	r30, 0xB9	; 185
    916c:	f8 e4       	ldi	r31, 0x48	; 72
    916e:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    9172:	8b a3       	std	Y+35, r24	; 0x23
    9174:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
    9176:	ad e0       	ldi	r26, 0x0D	; 13
    9178:	ea 2e       	mov	r14, r26
    917a:	f1 2c       	mov	r15, r1
    917c:	ec 0e       	add	r14, r28
    917e:	fd 1e       	adc	r15, r29
    9180:	ce 01       	movw	r24, r28
    9182:	83 96       	adiw	r24, 0x23	; 35
    9184:	b7 01       	movw	r22, r14
    9186:	41 e0       	ldi	r20, 0x01	; 1
    9188:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    918c:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    918e:	00 97       	sbiw	r24, 0x00	; 0
    9190:	09 f0       	breq	.+2      	; 0x9194 <f_mkdir+0x2e>
    9192:	3a c1       	rjmp	.+628    	; 0x9408 <f_mkdir+0x2a2>

	INITBUF(dj, sfn, lfn);
    9194:	ce 01       	movw	r24, r28
    9196:	01 96       	adiw	r24, 0x01	; 1
    9198:	89 a3       	std	Y+33, r24	; 0x21
    919a:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    919c:	6b a1       	ldd	r22, Y+35	; 0x23
    919e:	7c a1       	ldd	r23, Y+36	; 0x24
    91a0:	c7 01       	movw	r24, r14
    91a2:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    91a6:	8c 01       	movw	r16, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    91a8:	00 97       	sbiw	r24, 0x00	; 0
    91aa:	61 f0       	breq	.+24     	; 0x91c4 <f_mkdir+0x5e>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
    91ac:	84 30       	cpi	r24, 0x04	; 4
    91ae:	91 05       	cpc	r25, r1
    91b0:	09 f0       	breq	.+2      	; 0x91b4 <f_mkdir+0x4e>
    91b2:	2a c1       	rjmp	.+596    	; 0x9408 <f_mkdir+0x2a2>
    91b4:	e9 a1       	ldd	r30, Y+33	; 0x21
    91b6:	fa a1       	ldd	r31, Y+34	; 0x22
    91b8:	83 85       	ldd	r24, Z+11	; 0x0b
    91ba:	85 ff       	sbrs	r24, 5
    91bc:	06 c0       	rjmp	.+12     	; 0x91ca <f_mkdir+0x64>
    91be:	06 e0       	ldi	r16, 0x06	; 6
    91c0:	10 e0       	ldi	r17, 0x00	; 0
    91c2:	22 c1       	rjmp	.+580    	; 0x9408 <f_mkdir+0x2a2>
    91c4:	08 e0       	ldi	r16, 0x08	; 8
    91c6:	10 e0       	ldi	r17, 0x00	; 0
    91c8:	1f c1       	rjmp	.+574    	; 0x9408 <f_mkdir+0x2a2>
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    91ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    91cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    91ce:	40 e0       	ldi	r20, 0x00	; 0
    91d0:	50 e0       	ldi	r21, 0x00	; 0
    91d2:	60 e0       	ldi	r22, 0x00	; 0
    91d4:	70 e0       	ldi	r23, 0x00	; 0
    91d6:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <create_chain>
    91da:	3b 01       	movw	r6, r22
    91dc:	4c 01       	movw	r8, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    91de:	61 15       	cp	r22, r1
    91e0:	71 05       	cpc	r23, r1
    91e2:	81 05       	cpc	r24, r1
    91e4:	91 05       	cpc	r25, r1
    91e6:	19 f4       	brne	.+6      	; 0x91ee <f_mkdir+0x88>
    91e8:	07 e0       	ldi	r16, 0x07	; 7
    91ea:	10 e0       	ldi	r17, 0x00	; 0
    91ec:	0d c1       	rjmp	.+538    	; 0x9408 <f_mkdir+0x2a2>
	if (dclst == 1) res = FR_INT_ERR;
    91ee:	61 30       	cpi	r22, 0x01	; 1
    91f0:	71 05       	cpc	r23, r1
    91f2:	81 05       	cpc	r24, r1
    91f4:	91 05       	cpc	r25, r1
    91f6:	19 f4       	brne	.+6      	; 0x91fe <f_mkdir+0x98>
    91f8:	02 e0       	ldi	r16, 0x02	; 2
    91fa:	10 e0       	ldi	r17, 0x00	; 0
    91fc:	05 c1       	rjmp	.+522    	; 0x9408 <f_mkdir+0x2a2>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    91fe:	6f 3f       	cpi	r22, 0xFF	; 255
    9200:	3f ef       	ldi	r19, 0xFF	; 255
    9202:	73 07       	cpc	r23, r19
    9204:	3f ef       	ldi	r19, 0xFF	; 255
    9206:	83 07       	cpc	r24, r19
    9208:	3f ef       	ldi	r19, 0xFF	; 255
    920a:	93 07       	cpc	r25, r19
    920c:	09 f4       	brne	.+2      	; 0x9210 <f_mkdir+0xaa>
    920e:	01 c1       	rjmp	.+514    	; 0x9412 <f_mkdir+0x2ac>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    9210:	8d 85       	ldd	r24, Y+13	; 0x0d
    9212:	9e 85       	ldd	r25, Y+14	; 0x0e
    9214:	40 e0       	ldi	r20, 0x00	; 0
    9216:	50 e0       	ldi	r21, 0x00	; 0
    9218:	60 e0       	ldi	r22, 0x00	; 0
    921a:	70 e0       	ldi	r23, 0x00	; 0
    921c:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    9220:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9222:	00 97       	sbiw	r24, 0x00	; 0
    9224:	09 f0       	breq	.+2      	; 0x9228 <f_mkdir+0xc2>
    9226:	f0 c0       	rjmp	.+480    	; 0x9408 <f_mkdir+0x2a2>
	dsect = clust2sect(dj.fs, dclst);
    9228:	cd 84       	ldd	r12, Y+13	; 0x0d
    922a:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    922c:	fe ef       	ldi	r31, 0xFE	; 254
    922e:	ef 2e       	mov	r14, r31
    9230:	ff ef       	ldi	r31, 0xFF	; 255
    9232:	ff 2e       	mov	r15, r31
    9234:	ff ef       	ldi	r31, 0xFF	; 255
    9236:	0f 2f       	mov	r16, r31
    9238:	ff ef       	ldi	r31, 0xFF	; 255
    923a:	1f 2f       	mov	r17, r31
    923c:	e6 0c       	add	r14, r6
    923e:	f7 1c       	adc	r15, r7
    9240:	08 1d       	adc	r16, r8
    9242:	19 1d       	adc	r17, r9
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9244:	f6 01       	movw	r30, r12
    9246:	86 8d       	ldd	r24, Z+30	; 0x1e
    9248:	97 8d       	ldd	r25, Z+31	; 0x1f
    924a:	a0 a1       	ldd	r26, Z+32	; 0x20
    924c:	b1 a1       	ldd	r27, Z+33	; 0x21
    924e:	02 97       	sbiw	r24, 0x02	; 2
    9250:	a1 09       	sbc	r26, r1
    9252:	b1 09       	sbc	r27, r1
    9254:	e8 16       	cp	r14, r24
    9256:	f9 06       	cpc	r15, r25
    9258:	0a 07       	cpc	r16, r26
    925a:	1b 07       	cpc	r17, r27
    925c:	20 f0       	brcs	.+8      	; 0x9266 <f_mkdir+0x100>
    925e:	22 24       	eor	r2, r2
    9260:	33 24       	eor	r3, r3
    9262:	21 01       	movw	r4, r2
    9264:	15 c0       	rjmp	.+42     	; 0x9290 <f_mkdir+0x12a>
	return clst * fs->csize + fs->database;
    9266:	d6 01       	movw	r26, r12
    9268:	12 96       	adiw	r26, 0x02	; 2
    926a:	2c 91       	ld	r18, X
    926c:	30 e0       	ldi	r19, 0x00	; 0
    926e:	40 e0       	ldi	r20, 0x00	; 0
    9270:	50 e0       	ldi	r21, 0x00	; 0
    9272:	c8 01       	movw	r24, r16
    9274:	b7 01       	movw	r22, r14
    9276:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    927a:	1b 01       	movw	r2, r22
    927c:	2c 01       	movw	r4, r24
    927e:	f6 01       	movw	r30, r12
    9280:	82 a5       	ldd	r24, Z+42	; 0x2a
    9282:	93 a5       	ldd	r25, Z+43	; 0x2b
    9284:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9286:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9288:	28 0e       	add	r2, r24
    928a:	39 1e       	adc	r3, r25
    928c:	4a 1e       	adc	r4, r26
    928e:	5b 1e       	adc	r5, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    9290:	e2 e3       	ldi	r30, 0x32	; 50
    9292:	ae 2e       	mov	r10, r30
    9294:	b1 2c       	mov	r11, r1
    9296:	ac 0c       	add	r10, r12
    9298:	bd 1c       	adc	r11, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    929a:	ad a2       	std	Y+37, r10	; 0x25
    929c:	be a2       	std	Y+38, r11	; 0x26
	while (cnt--) *d++ = (char)val;
    929e:	c6 01       	movw	r24, r12
    92a0:	8e 5c       	subi	r24, 0xCE	; 206
    92a2:	9d 4f       	sbci	r25, 0xFD	; 253
    92a4:	05 c0       	rjmp	.+10     	; 0x92b0 <f_mkdir+0x14a>
    92a6:	ad a1       	ldd	r26, Y+37	; 0x25
    92a8:	be a1       	ldd	r27, Y+38	; 0x26
    92aa:	1d 92       	st	X+, r1
    92ac:	ad a3       	std	Y+37, r26	; 0x25
    92ae:	be a3       	std	Y+38, r27	; 0x26
    92b0:	ed a1       	ldd	r30, Y+37	; 0x25
    92b2:	fe a1       	ldd	r31, Y+38	; 0x26
    92b4:	e8 17       	cp	r30, r24
    92b6:	f9 07       	cpc	r31, r25
    92b8:	b1 f7       	brne	.-20     	; 0x92a6 <f_mkdir+0x140>
    92ba:	f5 01       	movw	r30, r10
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    92bc:	c5 01       	movw	r24, r10
    92be:	0b 96       	adiw	r24, 0x0b	; 11
    92c0:	20 e2       	ldi	r18, 0x20	; 32
    92c2:	01 c0       	rjmp	.+2      	; 0x92c6 <f_mkdir+0x160>
    92c4:	21 93       	st	Z+, r18
    92c6:	e8 17       	cp	r30, r24
    92c8:	f9 07       	cpc	r31, r25
    92ca:	e1 f7       	brne	.-8      	; 0x92c4 <f_mkdir+0x15e>
    92cc:	8e e2       	ldi	r24, 0x2E	; 46
    92ce:	d6 01       	movw	r26, r12
    92d0:	d2 96       	adiw	r26, 0x32	; 50
    92d2:	8c 93       	st	X, r24
    92d4:	d2 97       	sbiw	r26, 0x32	; 50
	dir[DIR_Attr] = AM_DIR;
    92d6:	80 e1       	ldi	r24, 0x10	; 16
    92d8:	dd 96       	adiw	r26, 0x3d	; 61
    92da:	8c 93       	st	X, r24
	tim = get_fattime();
    92dc:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <get_fattime>
    92e0:	6f a3       	std	Y+39, r22	; 0x27
    92e2:	78 a7       	std	Y+40, r23	; 0x28
    92e4:	89 a7       	std	Y+41, r24	; 0x29
    92e6:	9a a7       	std	Y+42, r25	; 0x2a
	ST_DWORD(dir+DIR_WrtTime, tim);
    92e8:	f5 01       	movw	r30, r10
    92ea:	66 8b       	std	Z+22, r22	; 0x16
    92ec:	77 8b       	std	Z+23, r23	; 0x17
    92ee:	80 8f       	std	Z+24, r24	; 0x18
    92f0:	91 8f       	std	Z+25, r25	; 0x19
	ST_WORD(dir+DIR_FstClusLO, dclst);
    92f2:	6d a6       	std	Y+45, r6	; 0x2d
    92f4:	7e a6       	std	Y+46, r7	; 0x2e
    92f6:	62 8e       	std	Z+26, r6	; 0x1a
    92f8:	73 8e       	std	Z+27, r7	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    92fa:	c4 01       	movw	r24, r8
    92fc:	aa 27       	eor	r26, r26
    92fe:	bb 27       	eor	r27, r27
    9300:	8b a7       	std	Y+43, r24	; 0x2b
    9302:	9c a7       	std	Y+44, r25	; 0x2c
    9304:	84 8b       	std	Z+20, r24	; 0x14
    9306:	95 8b       	std	Z+21, r25	; 0x15
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    9308:	95 01       	movw	r18, r10
    930a:	20 5e       	subi	r18, 0xE0	; 224
    930c:	3f 4f       	sbci	r19, 0xFF	; 255
    930e:	03 c0       	rjmp	.+6      	; 0x9316 <f_mkdir+0x1b0>
    9310:	80 81       	ld	r24, Z
    9312:	80 a3       	std	Z+32, r24	; 0x20
    9314:	31 96       	adiw	r30, 0x01	; 1
    9316:	e2 17       	cp	r30, r18
    9318:	f3 07       	cpc	r31, r19
    931a:	d1 f7       	brne	.-12     	; 0x9310 <f_mkdir+0x1aa>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    931c:	23 e5       	ldi	r18, 0x53	; 83
    931e:	30 e0       	ldi	r19, 0x00	; 0
    9320:	c2 0e       	add	r12, r18
    9322:	d3 1e       	adc	r13, r19
    9324:	8e e2       	ldi	r24, 0x2E	; 46
    9326:	d6 01       	movw	r26, r12
    9328:	8c 93       	st	X, r24
	pclst = dj.sclust;
    932a:	2b 89       	ldd	r18, Y+19	; 0x13
    932c:	3c 89       	ldd	r19, Y+20	; 0x14
    932e:	4d 89       	ldd	r20, Y+21	; 0x15
    9330:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    9332:	ed 85       	ldd	r30, Y+13	; 0x0d
    9334:	fe 85       	ldd	r31, Y+14	; 0x0e
    9336:	80 81       	ld	r24, Z
    9338:	83 30       	cpi	r24, 0x03	; 3
    933a:	69 f4       	brne	.+26     	; 0x9356 <f_mkdir+0x1f0>
    933c:	86 a1       	ldd	r24, Z+38	; 0x26
    933e:	97 a1       	ldd	r25, Z+39	; 0x27
    9340:	a0 a5       	ldd	r26, Z+40	; 0x28
    9342:	b1 a5       	ldd	r27, Z+41	; 0x29
    9344:	28 17       	cp	r18, r24
    9346:	39 07       	cpc	r19, r25
    9348:	4a 07       	cpc	r20, r26
    934a:	5b 07       	cpc	r21, r27
    934c:	21 f4       	brne	.+8      	; 0x9356 <f_mkdir+0x1f0>
    934e:	20 e0       	ldi	r18, 0x00	; 0
    9350:	30 e0       	ldi	r19, 0x00	; 0
    9352:	40 e0       	ldi	r20, 0x00	; 0
    9354:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    9356:	f5 01       	movw	r30, r10
    9358:	22 af       	std	Z+58, r18	; 0x3a
    935a:	33 af       	std	Z+59, r19	; 0x3b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    935c:	ca 01       	movw	r24, r20
    935e:	aa 27       	eor	r26, r26
    9360:	bb 27       	eor	r27, r27
    9362:	84 ab       	std	Z+52, r24	; 0x34
    9364:	95 ab       	std	Z+53, r25	; 0x35
    9366:	72 01       	movw	r14, r4
    9368:	61 01       	movw	r12, r2
    936a:	1d c0       	rjmp	.+58     	; 0x93a6 <f_mkdir+0x240>
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    936c:	c6 a6       	std	Z+46, r12	; 0x2e
    936e:	d7 a6       	std	Z+47, r13	; 0x2f
    9370:	e0 aa       	std	Z+48, r14	; 0x30
    9372:	f1 aa       	std	Z+49, r15	; 0x31
		dj.fs->wflag = 1;
    9374:	21 e0       	ldi	r18, 0x01	; 1
    9376:	24 83       	std	Z+4, r18	; 0x04
		res = move_window(dj.fs, 0);
    9378:	cf 01       	movw	r24, r30
    937a:	40 e0       	ldi	r20, 0x00	; 0
    937c:	50 e0       	ldi	r21, 0x00	; 0
    937e:	60 e0       	ldi	r22, 0x00	; 0
    9380:	70 e0       	ldi	r23, 0x00	; 0
    9382:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    9386:	8c 01       	movw	r16, r24
		if (res) LEAVE_FF(dj.fs, res);
    9388:	00 97       	sbiw	r24, 0x00	; 0
    938a:	f1 f5       	brne	.+124    	; 0x9408 <f_mkdir+0x2a2>
    938c:	f5 01       	movw	r30, r10
    938e:	01 c0       	rjmp	.+2      	; 0x9392 <f_mkdir+0x22c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    9390:	11 92       	st	Z+, r1
    9392:	8d a1       	ldd	r24, Y+37	; 0x25
    9394:	9e a1       	ldd	r25, Y+38	; 0x26
    9396:	e8 17       	cp	r30, r24
    9398:	f9 07       	cpc	r31, r25
    939a:	d1 f7       	brne	.-12     	; 0x9390 <f_mkdir+0x22a>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    939c:	08 94       	sec
    939e:	c1 1c       	adc	r12, r1
    93a0:	d1 1c       	adc	r13, r1
    93a2:	e1 1c       	adc	r14, r1
    93a4:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    93a6:	ed 85       	ldd	r30, Y+13	; 0x0d
    93a8:	fe 85       	ldd	r31, Y+14	; 0x0e
    93aa:	9c 2d       	mov	r25, r12
    93ac:	92 19       	sub	r25, r2
    93ae:	82 81       	ldd	r24, Z+2	; 0x02
    93b0:	98 17       	cp	r25, r24
    93b2:	e0 f2       	brcs	.-72     	; 0x936c <f_mkdir+0x206>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    93b4:	ce 01       	movw	r24, r28
    93b6:	0d 96       	adiw	r24, 0x0d	; 13
    93b8:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <dir_register>
    93bc:	8c 01       	movw	r16, r24
	if (res != FR_OK) {
    93be:	00 97       	sbiw	r24, 0x00	; 0
    93c0:	39 f0       	breq	.+14     	; 0x93d0 <f_mkdir+0x26a>
		remove_chain(dj.fs, dclst);
    93c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    93c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    93c6:	b4 01       	movw	r22, r8
    93c8:	a3 01       	movw	r20, r6
    93ca:	0e 94 95 41 	call	0x832a	; 0x832a <remove_chain>
    93ce:	1c c0       	rjmp	.+56     	; 0x9408 <f_mkdir+0x2a2>
	} else {
		dir = dj.dir;
    93d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    93d2:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    93d4:	80 e1       	ldi	r24, 0x10	; 16
    93d6:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    93d8:	8f a1       	ldd	r24, Y+39	; 0x27
    93da:	98 a5       	ldd	r25, Y+40	; 0x28
    93dc:	a9 a5       	ldd	r26, Y+41	; 0x29
    93de:	ba a5       	ldd	r27, Y+42	; 0x2a
    93e0:	86 8b       	std	Z+22, r24	; 0x16
    93e2:	97 8b       	std	Z+23, r25	; 0x17
    93e4:	a0 8f       	std	Z+24, r26	; 0x18
    93e6:	b1 8f       	std	Z+25, r27	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    93e8:	ad a5       	ldd	r26, Y+45	; 0x2d
    93ea:	be a5       	ldd	r27, Y+46	; 0x2e
    93ec:	a2 8f       	std	Z+26, r26	; 0x1a
    93ee:	b3 8f       	std	Z+27, r27	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    93f0:	2b a5       	ldd	r18, Y+43	; 0x2b
    93f2:	3c a5       	ldd	r19, Y+44	; 0x2c
    93f4:	24 8b       	std	Z+20, r18	; 0x14
    93f6:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    93f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    93fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    93fc:	81 e0       	ldi	r24, 0x01	; 1
    93fe:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    9400:	cf 01       	movw	r24, r30
    9402:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <sync>
    9406:	8c 01       	movw	r16, r24
	}

	LEAVE_FF(dj.fs, res);
}
    9408:	c8 01       	movw	r24, r16
    940a:	ae 96       	adiw	r28, 0x2e	; 46
    940c:	e2 e1       	ldi	r30, 0x12	; 18
    940e:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    9412:	01 e0       	ldi	r16, 0x01	; 1
    9414:	10 e0       	ldi	r17, 0x00	; 0
    9416:	f8 cf       	rjmp	.-16     	; 0x9408 <f_mkdir+0x2a2>

00009418 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    9418:	cf 93       	push	r28
    941a:	df 93       	push	r29
    941c:	ec 01       	movw	r28, r24
    941e:	24 e0       	ldi	r18, 0x04	; 4
    9420:	30 e0       	ldi	r19, 0x00	; 0
    9422:	19 c0       	rjmp	.+50     	; 0x9456 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    9424:	88 81       	ld	r24, Y
    9426:	99 81       	ldd	r25, Y+1	; 0x01
    9428:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    942c:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    942e:	00 97       	sbiw	r24, 0x00	; 0
    9430:	f1 f4       	brne	.+60     	; 0x946e <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    9432:	ea 89       	ldd	r30, Y+18	; 0x12
    9434:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    9436:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    9438:	88 23       	and	r24, r24
    943a:	09 f1       	breq	.+66     	; 0x947e <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    943c:	85 3e       	cpi	r24, 0xE5	; 229
    943e:	19 f0       	breq	.+6      	; 0x9446 <dir_read+0x2e>
    9440:	83 85       	ldd	r24, Z+11	; 0x0b
    9442:	83 ff       	sbrs	r24, 3
    9444:	18 c0       	rjmp	.+48     	; 0x9476 <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    9446:	ce 01       	movw	r24, r28
    9448:	60 e0       	ldi	r22, 0x00	; 0
    944a:	70 e0       	ldi	r23, 0x00	; 0
    944c:	0e 94 95 42 	call	0x852a	; 0x852a <dir_next>
    9450:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    9452:	00 97       	sbiw	r24, 0x00	; 0
    9454:	61 f4       	brne	.+24     	; 0x946e <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    9456:	4e 85       	ldd	r20, Y+14	; 0x0e
    9458:	5f 85       	ldd	r21, Y+15	; 0x0f
    945a:	68 89       	ldd	r22, Y+16	; 0x10
    945c:	79 89       	ldd	r23, Y+17	; 0x11
    945e:	41 15       	cp	r20, r1
    9460:	51 05       	cpc	r21, r1
    9462:	61 05       	cpc	r22, r1
    9464:	71 05       	cpc	r23, r1
    9466:	f1 f6       	brne	.-68     	; 0x9424 <dir_read+0xc>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    9468:	21 15       	cp	r18, r1
    946a:	31 05       	cpc	r19, r1
    946c:	21 f0       	breq	.+8      	; 0x9476 <dir_read+0x5e>
    946e:	1e 86       	std	Y+14, r1	; 0x0e
    9470:	1f 86       	std	Y+15, r1	; 0x0f
    9472:	18 8a       	std	Y+16, r1	; 0x10
    9474:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    9476:	c9 01       	movw	r24, r18
    9478:	df 91       	pop	r29
    947a:	cf 91       	pop	r28
    947c:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    947e:	24 e0       	ldi	r18, 0x04	; 4
    9480:	30 e0       	ldi	r19, 0x00	; 0
    9482:	f5 cf       	rjmp	.-22     	; 0x946e <dir_read+0x56>

00009484 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    9484:	aa e3       	ldi	r26, 0x3A	; 58
    9486:	b0 e0       	ldi	r27, 0x00	; 0
    9488:	e8 e4       	ldi	r30, 0x48	; 72
    948a:	fa e4       	ldi	r31, 0x4A	; 74
    948c:	0c 94 a1 5b 	jmp	0xb742	; 0xb742 <__prologue_saves__+0x14>
    9490:	89 af       	std	Y+57, r24	; 0x39
    9492:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
    9494:	8d e0       	ldi	r24, 0x0D	; 13
    9496:	c8 2e       	mov	r12, r24
    9498:	d1 2c       	mov	r13, r1
    949a:	cc 0e       	add	r12, r28
    949c:	dd 1e       	adc	r13, r29
    949e:	ce 01       	movw	r24, r28
    94a0:	c9 96       	adiw	r24, 0x39	; 57
    94a2:	b6 01       	movw	r22, r12
    94a4:	41 e0       	ldi	r20, 0x01	; 1
    94a6:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
    94aa:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    94ac:	00 97       	sbiw	r24, 0x00	; 0
    94ae:	09 f0       	breq	.+2      	; 0x94b2 <f_unlink+0x2e>
    94b0:	79 c0       	rjmp	.+242    	; 0x95a4 <f_unlink+0x120>

	INITBUF(dj, sfn, lfn);
    94b2:	ce 01       	movw	r24, r28
    94b4:	01 96       	adiw	r24, 0x01	; 1
    94b6:	89 a3       	std	Y+33, r24	; 0x21
    94b8:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    94ba:	69 ad       	ldd	r22, Y+57	; 0x39
    94bc:	7a ad       	ldd	r23, Y+58	; 0x3a
    94be:	c6 01       	movw	r24, r12
    94c0:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    94c4:	9c 01       	movw	r18, r24
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    94c6:	00 97       	sbiw	r24, 0x00	; 0
    94c8:	09 f0       	breq	.+2      	; 0x94cc <f_unlink+0x48>
    94ca:	6c c0       	rjmp	.+216    	; 0x95a4 <f_unlink+0x120>
    94cc:	e9 a1       	ldd	r30, Y+33	; 0x21
    94ce:	fa a1       	ldd	r31, Y+34	; 0x22
    94d0:	83 85       	ldd	r24, Z+11	; 0x0b
    94d2:	85 fd       	sbrc	r24, 5
    94d4:	62 c0       	rjmp	.+196    	; 0x959a <f_unlink+0x116>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
    94d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    94d8:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    94da:	30 97       	sbiw	r30, 0x00	; 0
    94dc:	09 f4       	brne	.+2      	; 0x94e0 <f_unlink+0x5c>
    94de:	5d c0       	rjmp	.+186    	; 0x959a <f_unlink+0x116>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    94e0:	83 85       	ldd	r24, Z+11	; 0x0b
    94e2:	28 2f       	mov	r18, r24
    94e4:	80 fd       	sbrc	r24, 0
    94e6:	5c c0       	rjmp	.+184    	; 0x95a0 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    94e8:	84 89       	ldd	r24, Z+20	; 0x14
    94ea:	95 89       	ldd	r25, Z+21	; 0x15
    94ec:	a0 e0       	ldi	r26, 0x00	; 0
    94ee:	b0 e0       	ldi	r27, 0x00	; 0
    94f0:	8c 01       	movw	r16, r24
    94f2:	ff 24       	eor	r15, r15
    94f4:	ee 24       	eor	r14, r14
    94f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    94f8:	93 8d       	ldd	r25, Z+27	; 0x1b
    94fa:	a0 e0       	ldi	r26, 0x00	; 0
    94fc:	b0 e0       	ldi	r27, 0x00	; 0
    94fe:	e8 2a       	or	r14, r24
    9500:	f9 2a       	or	r15, r25
    9502:	0a 2b       	or	r16, r26
    9504:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    9506:	24 ff       	sbrs	r18, 4
    9508:	2d c0       	rjmp	.+90     	; 0x9564 <f_unlink+0xe0>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    950a:	82 e0       	ldi	r24, 0x02	; 2
    950c:	e8 16       	cp	r14, r24
    950e:	f1 04       	cpc	r15, r1
    9510:	01 05       	cpc	r16, r1
    9512:	11 05       	cpc	r17, r1
    9514:	18 f4       	brcc	.+6      	; 0x951c <f_unlink+0x98>
    9516:	22 e0       	ldi	r18, 0x02	; 2
    9518:	30 e0       	ldi	r19, 0x00	; 0
    951a:	44 c0       	rjmp	.+136    	; 0x95a4 <f_unlink+0x120>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    951c:	de 01       	movw	r26, r28
    951e:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    9520:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    9522:	9d 01       	movw	r18, r26
    9524:	02 c0       	rjmp	.+4      	; 0x952a <f_unlink+0xa6>
    9526:	81 91       	ld	r24, Z+
    9528:	8d 93       	st	X+, r24
    952a:	e2 17       	cp	r30, r18
    952c:	f3 07       	cpc	r31, r19
    952e:	d9 f7       	brne	.-10     	; 0x9526 <f_unlink+0xa2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    9530:	e9 a6       	std	Y+41, r14	; 0x29
    9532:	fa a6       	std	Y+42, r15	; 0x2a
    9534:	0b a7       	std	Y+43, r16	; 0x2b
    9536:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    9538:	b3 e2       	ldi	r27, 0x23	; 35
    953a:	cb 2e       	mov	r12, r27
    953c:	d1 2c       	mov	r13, r1
    953e:	cc 0e       	add	r12, r28
    9540:	dd 1e       	adc	r13, r29
    9542:	c6 01       	movw	r24, r12
    9544:	62 e0       	ldi	r22, 0x02	; 2
    9546:	70 e0       	ldi	r23, 0x00	; 0
    9548:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    954c:	9c 01       	movw	r18, r24
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    954e:	00 97       	sbiw	r24, 0x00	; 0
    9550:	49 f5       	brne	.+82     	; 0x95a4 <f_unlink+0x120>
		res = dir_read(&sdj);
    9552:	c6 01       	movw	r24, r12
    9554:	0e 94 0c 4a 	call	0x9418	; 0x9418 <dir_read>
    9558:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    955a:	00 97       	sbiw	r24, 0x00	; 0
    955c:	09 f1       	breq	.+66     	; 0x95a0 <f_unlink+0x11c>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    955e:	84 30       	cpi	r24, 0x04	; 4
    9560:	91 05       	cpc	r25, r1
    9562:	01 f5       	brne	.+64     	; 0x95a4 <f_unlink+0x120>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    9564:	ce 01       	movw	r24, r28
    9566:	0d 96       	adiw	r24, 0x0d	; 13
    9568:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <dir_remove>
    956c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    956e:	00 97       	sbiw	r24, 0x00	; 0
    9570:	c9 f4       	brne	.+50     	; 0x95a4 <f_unlink+0x120>
		if (dclst)
    9572:	e1 14       	cp	r14, r1
    9574:	f1 04       	cpc	r15, r1
    9576:	01 05       	cpc	r16, r1
    9578:	11 05       	cpc	r17, r1
    957a:	49 f0       	breq	.+18     	; 0x958e <f_unlink+0x10a>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    957c:	8d 85       	ldd	r24, Y+13	; 0x0d
    957e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9580:	b8 01       	movw	r22, r16
    9582:	a7 01       	movw	r20, r14
    9584:	0e 94 95 41 	call	0x832a	; 0x832a <remove_chain>
    9588:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = sync(dj.fs);
    958a:	00 97       	sbiw	r24, 0x00	; 0
    958c:	59 f4       	brne	.+22     	; 0x95a4 <f_unlink+0x120>
    958e:	8d 85       	ldd	r24, Y+13	; 0x0d
    9590:	9e 85       	ldd	r25, Y+14	; 0x0e
    9592:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <sync>
    9596:	9c 01       	movw	r18, r24
    9598:	05 c0       	rjmp	.+10     	; 0x95a4 <f_unlink+0x120>
    959a:	26 e0       	ldi	r18, 0x06	; 6
    959c:	30 e0       	ldi	r19, 0x00	; 0
    959e:	02 c0       	rjmp	.+4      	; 0x95a4 <f_unlink+0x120>
    95a0:	27 e0       	ldi	r18, 0x07	; 7
    95a2:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    95a4:	c9 01       	movw	r24, r18
    95a6:	ea 96       	adiw	r28, 0x3a	; 58
    95a8:	e8 e0       	ldi	r30, 0x08	; 8
    95aa:	0c 94 bd 5b 	jmp	0xb77a	; 0xb77a <__epilogue_restores__+0x14>

000095ae <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    95ae:	ac e0       	ldi	r26, 0x0C	; 12
    95b0:	b0 e0       	ldi	r27, 0x00	; 0
    95b2:	ed ed       	ldi	r30, 0xDD	; 221
    95b4:	fa e4       	ldi	r31, 0x4A	; 74
    95b6:	0c 94 a3 5b 	jmp	0xb746	; 0xb746 <__prologue_saves__+0x18>
    95ba:	8c 01       	movw	r16, r24
    95bc:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    95be:	fc 01       	movw	r30, r24
    95c0:	62 81       	ldd	r22, Z+2	; 0x02
    95c2:	73 81       	ldd	r23, Z+3	; 0x03
    95c4:	80 81       	ld	r24, Z
    95c6:	91 81       	ldd	r25, Z+1	; 0x01
    95c8:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <validate>
	if (res == FR_OK) {
    95cc:	00 97       	sbiw	r24, 0x00	; 0
    95ce:	69 f4       	brne	.+26     	; 0x95ea <f_readdir+0x3c>
		INITBUF((*dj), sfn, lfn);
    95d0:	ce 01       	movw	r24, r28
    95d2:	01 96       	adiw	r24, 0x01	; 1
    95d4:	f8 01       	movw	r30, r16
    95d6:	84 8b       	std	Z+20, r24	; 0x14
    95d8:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    95da:	e1 14       	cp	r14, r1
    95dc:	f1 04       	cpc	r15, r1
    95de:	39 f4       	brne	.+14     	; 0x95ee <f_readdir+0x40>
			res = dir_seek(dj, 0);
    95e0:	c8 01       	movw	r24, r16
    95e2:	60 e0       	ldi	r22, 0x00	; 0
    95e4:	70 e0       	ldi	r23, 0x00	; 0
    95e6:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <dir_seek>
    95ea:	9c 01       	movw	r18, r24
    95ec:	23 c0       	rjmp	.+70     	; 0x9634 <f_readdir+0x86>
		} else {
			res = dir_read(dj);
    95ee:	c8 01       	movw	r24, r16
    95f0:	0e 94 0c 4a 	call	0x9418	; 0x9418 <dir_read>
    95f4:	9c 01       	movw	r18, r24
			if (res == FR_NO_FILE) {
    95f6:	84 30       	cpi	r24, 0x04	; 4
    95f8:	91 05       	cpc	r25, r1
    95fa:	31 f4       	brne	.+12     	; 0x9608 <f_readdir+0x5a>
				dj->sect = 0;
    95fc:	f8 01       	movw	r30, r16
    95fe:	16 86       	std	Z+14, r1	; 0x0e
    9600:	17 86       	std	Z+15, r1	; 0x0f
    9602:	10 8a       	std	Z+16, r1	; 0x10
    9604:	11 8a       	std	Z+17, r1	; 0x11
    9606:	02 c0       	rjmp	.+4      	; 0x960c <f_readdir+0x5e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    9608:	00 97       	sbiw	r24, 0x00	; 0
    960a:	a1 f4       	brne	.+40     	; 0x9634 <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    960c:	c8 01       	movw	r24, r16
    960e:	b7 01       	movw	r22, r14
    9610:	0e 94 8e 34 	call	0x691c	; 0x691c <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    9614:	c8 01       	movw	r24, r16
    9616:	60 e0       	ldi	r22, 0x00	; 0
    9618:	70 e0       	ldi	r23, 0x00	; 0
    961a:	0e 94 95 42 	call	0x852a	; 0x852a <dir_next>
    961e:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    9620:	84 30       	cpi	r24, 0x04	; 4
    9622:	91 05       	cpc	r25, r1
    9624:	39 f4       	brne	.+14     	; 0x9634 <f_readdir+0x86>
					dj->sect = 0;
    9626:	f8 01       	movw	r30, r16
    9628:	16 86       	std	Z+14, r1	; 0x0e
    962a:	17 86       	std	Z+15, r1	; 0x0f
    962c:	10 8a       	std	Z+16, r1	; 0x10
    962e:	11 8a       	std	Z+17, r1	; 0x11
    9630:	20 e0       	ldi	r18, 0x00	; 0
    9632:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    9634:	c9 01       	movw	r24, r18
    9636:	2c 96       	adiw	r28, 0x0c	; 12
    9638:	e6 e0       	ldi	r30, 0x06	; 6
    963a:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

0000963e <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    963e:	a4 e0       	ldi	r26, 0x04	; 4
    9640:	b0 e0       	ldi	r27, 0x00	; 0
    9642:	e5 e2       	ldi	r30, 0x25	; 37
    9644:	fb e4       	ldi	r31, 0x4B	; 75
    9646:	0c 94 98 5b 	jmp	0xb730	; 0xb730 <__prologue_saves__+0x2>
    964a:	89 83       	std	Y+1, r24	; 0x01
    964c:	9a 83       	std	Y+2, r25	; 0x02
    964e:	6b 83       	std	Y+3, r22	; 0x03
    9650:	7c 83       	std	Y+4, r23	; 0x04
    9652:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
    9654:	ce 01       	movw	r24, r28
    9656:	01 96       	adiw	r24, 0x01	; 1
    9658:	ba 01       	movw	r22, r20
    965a:	40 e0       	ldi	r20, 0x00	; 0
    965c:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    9660:	00 97       	sbiw	r24, 0x00	; 0
    9662:	11 f0       	breq	.+4      	; 0x9668 <f_getfree+0x2a>
    9664:	9c 01       	movw	r18, r24
    9666:	c1 c0       	rjmp	.+386    	; 0x97ea <f_getfree+0x1ac>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    9668:	d2 01       	movw	r26, r4
    966a:	ed 91       	ld	r30, X+
    966c:	fc 91       	ld	r31, X
    966e:	26 85       	ldd	r18, Z+14	; 0x0e
    9670:	37 85       	ldd	r19, Z+15	; 0x0f
    9672:	40 89       	ldd	r20, Z+16	; 0x10
    9674:	51 89       	ldd	r21, Z+17	; 0x11
    9676:	e6 8c       	ldd	r14, Z+30	; 0x1e
    9678:	f7 8c       	ldd	r15, Z+31	; 0x1f
    967a:	00 a1       	ldd	r16, Z+32	; 0x20
    967c:	11 a1       	ldd	r17, Z+33	; 0x21
    967e:	d8 01       	movw	r26, r16
    9680:	c7 01       	movw	r24, r14
    9682:	02 97       	sbiw	r24, 0x02	; 2
    9684:	a1 09       	sbc	r26, r1
    9686:	b1 09       	sbc	r27, r1
    9688:	82 17       	cp	r24, r18
    968a:	93 07       	cpc	r25, r19
    968c:	a4 07       	cpc	r26, r20
    968e:	b5 07       	cpc	r27, r21
    9690:	38 f0       	brcs	.+14     	; 0x96a0 <f_getfree+0x62>
		*nclst = (*fatfs)->free_clust;
    9692:	eb 81       	ldd	r30, Y+3	; 0x03
    9694:	fc 81       	ldd	r31, Y+4	; 0x04
    9696:	20 83       	st	Z, r18
    9698:	31 83       	std	Z+1, r19	; 0x01
    969a:	42 83       	std	Z+2, r20	; 0x02
    969c:	53 83       	std	Z+3, r21	; 0x03
    969e:	a3 c0       	rjmp	.+326    	; 0x97e6 <f_getfree+0x1a8>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    96a0:	30 80       	ld	r3, Z
	n = 0;
	if (fat == FS_FAT12) {
    96a2:	21 e0       	ldi	r18, 0x01	; 1
    96a4:	32 16       	cp	r3, r18
    96a6:	f1 f5       	brne	.+124    	; 0x9724 <f_getfree+0xe6>
    96a8:	aa 24       	eor	r10, r10
    96aa:	bb 24       	eor	r11, r11
    96ac:	65 01       	movw	r12, r10
    96ae:	92 e0       	ldi	r25, 0x02	; 2
    96b0:	e9 2e       	mov	r14, r25
    96b2:	f1 2c       	mov	r15, r1
    96b4:	01 2d       	mov	r16, r1
    96b6:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    96b8:	d2 01       	movw	r26, r4
    96ba:	8d 91       	ld	r24, X+
    96bc:	9c 91       	ld	r25, X
    96be:	b8 01       	movw	r22, r16
    96c0:	a7 01       	movw	r20, r14
    96c2:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    96c6:	6f 3f       	cpi	r22, 0xFF	; 255
    96c8:	bf ef       	ldi	r27, 0xFF	; 255
    96ca:	7b 07       	cpc	r23, r27
    96cc:	bf ef       	ldi	r27, 0xFF	; 255
    96ce:	8b 07       	cpc	r24, r27
    96d0:	bf ef       	ldi	r27, 0xFF	; 255
    96d2:	9b 07       	cpc	r25, r27
    96d4:	19 f4       	brne	.+6      	; 0x96dc <f_getfree+0x9e>
    96d6:	21 e0       	ldi	r18, 0x01	; 1
    96d8:	30 e0       	ldi	r19, 0x00	; 0
    96da:	87 c0       	rjmp	.+270    	; 0x97ea <f_getfree+0x1ac>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    96dc:	61 30       	cpi	r22, 0x01	; 1
    96de:	71 05       	cpc	r23, r1
    96e0:	81 05       	cpc	r24, r1
    96e2:	91 05       	cpc	r25, r1
    96e4:	19 f4       	brne	.+6      	; 0x96ec <f_getfree+0xae>
    96e6:	22 e0       	ldi	r18, 0x02	; 2
    96e8:	30 e0       	ldi	r19, 0x00	; 0
    96ea:	7f c0       	rjmp	.+254    	; 0x97ea <f_getfree+0x1ac>
			if (stat == 0) n++;
    96ec:	61 15       	cp	r22, r1
    96ee:	71 05       	cpc	r23, r1
    96f0:	81 05       	cpc	r24, r1
    96f2:	91 05       	cpc	r25, r1
    96f4:	29 f4       	brne	.+10     	; 0x9700 <f_getfree+0xc2>
    96f6:	08 94       	sec
    96f8:	a1 1c       	adc	r10, r1
    96fa:	b1 1c       	adc	r11, r1
    96fc:	c1 1c       	adc	r12, r1
    96fe:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    9700:	08 94       	sec
    9702:	e1 1c       	adc	r14, r1
    9704:	f1 1c       	adc	r15, r1
    9706:	01 1d       	adc	r16, r1
    9708:	11 1d       	adc	r17, r1
    970a:	d2 01       	movw	r26, r4
    970c:	ed 91       	ld	r30, X+
    970e:	fc 91       	ld	r31, X
    9710:	86 8d       	ldd	r24, Z+30	; 0x1e
    9712:	97 8d       	ldd	r25, Z+31	; 0x1f
    9714:	a0 a1       	ldd	r26, Z+32	; 0x20
    9716:	b1 a1       	ldd	r27, Z+33	; 0x21
    9718:	e8 16       	cp	r14, r24
    971a:	f9 06       	cpc	r15, r25
    971c:	0a 07       	cpc	r16, r26
    971e:	1b 07       	cpc	r17, r27
    9720:	58 f2       	brcs	.-106    	; 0x96b8 <f_getfree+0x7a>
    9722:	4f c0       	rjmp	.+158    	; 0x97c2 <f_getfree+0x184>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    9724:	62 a0       	ldd	r6, Z+34	; 0x22
    9726:	73 a0       	ldd	r7, Z+35	; 0x23
    9728:	84 a0       	ldd	r8, Z+36	; 0x24
    972a:	95 a0       	ldd	r9, Z+37	; 0x25
    972c:	aa 24       	eor	r10, r10
    972e:	bb 24       	eor	r11, r11
    9730:	65 01       	movw	r12, r10
    9732:	20 e0       	ldi	r18, 0x00	; 0
    9734:	30 e0       	ldi	r19, 0x00	; 0
    9736:	e0 e0       	ldi	r30, 0x00	; 0
    9738:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    973a:	21 15       	cp	r18, r1
    973c:	31 05       	cpc	r19, r1
    973e:	b1 f4       	brne	.+44     	; 0x976c <f_getfree+0x12e>
				res = move_window(*fatfs, sect++);
    9740:	f2 01       	movw	r30, r4
    9742:	80 81       	ld	r24, Z
    9744:	91 81       	ldd	r25, Z+1	; 0x01
    9746:	b4 01       	movw	r22, r8
    9748:	a3 01       	movw	r20, r6
    974a:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    974e:	9c 01       	movw	r18, r24
				if (res != FR_OK)
    9750:	00 97       	sbiw	r24, 0x00	; 0
    9752:	09 f0       	breq	.+2      	; 0x9756 <f_getfree+0x118>
    9754:	4a c0       	rjmp	.+148    	; 0x97ea <f_getfree+0x1ac>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    9756:	08 94       	sec
    9758:	61 1c       	adc	r6, r1
    975a:	71 1c       	adc	r7, r1
    975c:	81 1c       	adc	r8, r1
    975e:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    9760:	d2 01       	movw	r26, r4
    9762:	ed 91       	ld	r30, X+
    9764:	fc 91       	ld	r31, X
    9766:	f2 96       	adiw	r30, 0x32	; 50
    9768:	20 e0       	ldi	r18, 0x00	; 0
    976a:	32 e0       	ldi	r19, 0x02	; 2
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    976c:	b2 e0       	ldi	r27, 0x02	; 2
    976e:	3b 16       	cp	r3, r27
    9770:	69 f4       	brne	.+26     	; 0x978c <f_getfree+0x14e>
				if (LD_WORD(p) == 0) n++;
    9772:	80 81       	ld	r24, Z
    9774:	91 81       	ldd	r25, Z+1	; 0x01
    9776:	89 2b       	or	r24, r25
    9778:	29 f4       	brne	.+10     	; 0x9784 <f_getfree+0x146>
    977a:	08 94       	sec
    977c:	a1 1c       	adc	r10, r1
    977e:	b1 1c       	adc	r11, r1
    9780:	c1 1c       	adc	r12, r1
    9782:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    9784:	32 96       	adiw	r30, 0x02	; 2
    9786:	22 50       	subi	r18, 0x02	; 2
    9788:	30 40       	sbci	r19, 0x00	; 0
    978a:	10 c0       	rjmp	.+32     	; 0x97ac <f_getfree+0x16e>
			} else {
				if (LD_DWORD(p) == 0) n++;
    978c:	80 81       	ld	r24, Z
    978e:	91 81       	ldd	r25, Z+1	; 0x01
    9790:	a2 81       	ldd	r26, Z+2	; 0x02
    9792:	b3 81       	ldd	r27, Z+3	; 0x03
    9794:	00 97       	sbiw	r24, 0x00	; 0
    9796:	a1 05       	cpc	r26, r1
    9798:	b1 05       	cpc	r27, r1
    979a:	29 f4       	brne	.+10     	; 0x97a6 <f_getfree+0x168>
    979c:	08 94       	sec
    979e:	a1 1c       	adc	r10, r1
    97a0:	b1 1c       	adc	r11, r1
    97a2:	c1 1c       	adc	r12, r1
    97a4:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    97a6:	34 96       	adiw	r30, 0x04	; 4
    97a8:	24 50       	subi	r18, 0x04	; 4
    97aa:	30 40       	sbci	r19, 0x00	; 0
			}
		} while (--clst);
    97ac:	08 94       	sec
    97ae:	e1 08       	sbc	r14, r1
    97b0:	f1 08       	sbc	r15, r1
    97b2:	01 09       	sbc	r16, r1
    97b4:	11 09       	sbc	r17, r1
    97b6:	e1 14       	cp	r14, r1
    97b8:	f1 04       	cpc	r15, r1
    97ba:	01 05       	cpc	r16, r1
    97bc:	11 05       	cpc	r17, r1
    97be:	09 f0       	breq	.+2      	; 0x97c2 <f_getfree+0x184>
    97c0:	bc cf       	rjmp	.-136    	; 0x973a <f_getfree+0xfc>
	}
	(*fatfs)->free_clust = n;
    97c2:	d2 01       	movw	r26, r4
    97c4:	ed 91       	ld	r30, X+
    97c6:	fc 91       	ld	r31, X
    97c8:	a6 86       	std	Z+14, r10	; 0x0e
    97ca:	b7 86       	std	Z+15, r11	; 0x0f
    97cc:	c0 8a       	std	Z+16, r12	; 0x10
    97ce:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    97d0:	b3 e0       	ldi	r27, 0x03	; 3
    97d2:	3b 16       	cp	r3, r27
    97d4:	11 f4       	brne	.+4      	; 0x97da <f_getfree+0x19c>
    97d6:	81 e0       	ldi	r24, 0x01	; 1
    97d8:	81 87       	std	Z+9, r24	; 0x09
	*nclst = n;
    97da:	eb 81       	ldd	r30, Y+3	; 0x03
    97dc:	fc 81       	ldd	r31, Y+4	; 0x04
    97de:	a0 82       	st	Z, r10
    97e0:	b1 82       	std	Z+1, r11	; 0x01
    97e2:	c2 82       	std	Z+2, r12	; 0x02
    97e4:	d3 82       	std	Z+3, r13	; 0x03
    97e6:	20 e0       	ldi	r18, 0x00	; 0
    97e8:	30 e0       	ldi	r19, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    97ea:	c9 01       	movw	r24, r18
    97ec:	24 96       	adiw	r28, 0x04	; 4
    97ee:	e1 e1       	ldi	r30, 0x11	; 17
    97f0:	0c 94 b4 5b 	jmp	0xb768	; 0xb768 <__epilogue_restores__+0x2>

000097f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    97f4:	0f 93       	push	r16
    97f6:	1f 93       	push	r17
    97f8:	cf 93       	push	r28
    97fa:	df 93       	push	r29
    97fc:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    97fe:	6a 81       	ldd	r22, Y+2	; 0x02
    9800:	7b 81       	ldd	r23, Y+3	; 0x03
    9802:	88 81       	ld	r24, Y
    9804:	99 81       	ldd	r25, Y+1	; 0x01
    9806:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <validate>
    980a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    980c:	00 97       	sbiw	r24, 0x00	; 0
    980e:	e1 f5       	brne	.+120    	; 0x9888 <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    9810:	8c 81       	ldd	r24, Y+4	; 0x04
    9812:	85 ff       	sbrs	r24, 5
    9814:	39 c0       	rjmp	.+114    	; 0x9888 <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    9816:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9818:	5b 8d       	ldd	r21, Y+27	; 0x1b
    981a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    981c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    981e:	88 81       	ld	r24, Y
    9820:	99 81       	ldd	r25, Y+1	; 0x01
    9822:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    9826:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    9828:	00 97       	sbiw	r24, 0x00	; 0
    982a:	71 f5       	brne	.+92     	; 0x9888 <f_sync+0x94>
				dir = fp->dir_ptr;
    982c:	0e 8d       	ldd	r16, Y+30	; 0x1e
    982e:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    9830:	f8 01       	movw	r30, r16
    9832:	83 85       	ldd	r24, Z+11	; 0x0b
    9834:	80 62       	ori	r24, 0x20	; 32
    9836:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    9838:	8a 85       	ldd	r24, Y+10	; 0x0a
    983a:	9b 85       	ldd	r25, Y+11	; 0x0b
    983c:	ac 85       	ldd	r26, Y+12	; 0x0c
    983e:	bd 85       	ldd	r27, Y+13	; 0x0d
    9840:	84 8f       	std	Z+28, r24	; 0x1c
    9842:	95 8f       	std	Z+29, r25	; 0x1d
    9844:	a6 8f       	std	Z+30, r26	; 0x1e
    9846:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    9848:	8e 85       	ldd	r24, Y+14	; 0x0e
    984a:	9f 85       	ldd	r25, Y+15	; 0x0f
    984c:	82 8f       	std	Z+26, r24	; 0x1a
    984e:	93 8f       	std	Z+27, r25	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    9850:	8e 85       	ldd	r24, Y+14	; 0x0e
    9852:	9f 85       	ldd	r25, Y+15	; 0x0f
    9854:	a8 89       	ldd	r26, Y+16	; 0x10
    9856:	b9 89       	ldd	r27, Y+17	; 0x11
    9858:	cd 01       	movw	r24, r26
    985a:	aa 27       	eor	r26, r26
    985c:	bb 27       	eor	r27, r27
    985e:	84 8b       	std	Z+20, r24	; 0x14
    9860:	95 8b       	std	Z+21, r25	; 0x15
				tim = get_fattime();			/* Updated time */
    9862:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    9866:	f8 01       	movw	r30, r16
    9868:	66 8b       	std	Z+22, r22	; 0x16
    986a:	77 8b       	std	Z+23, r23	; 0x17
    986c:	80 8f       	std	Z+24, r24	; 0x18
    986e:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    9870:	8c 81       	ldd	r24, Y+4	; 0x04
    9872:	8f 7d       	andi	r24, 0xDF	; 223
    9874:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    9876:	e8 81       	ld	r30, Y
    9878:	f9 81       	ldd	r31, Y+1	; 0x01
    987a:	81 e0       	ldi	r24, 0x01	; 1
    987c:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    987e:	88 81       	ld	r24, Y
    9880:	99 81       	ldd	r25, Y+1	; 0x01
    9882:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <sync>
    9886:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    9888:	c9 01       	movw	r24, r18
    988a:	df 91       	pop	r29
    988c:	cf 91       	pop	r28
    988e:	1f 91       	pop	r17
    9890:	0f 91       	pop	r16
    9892:	08 95       	ret

00009894 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    9894:	cf 93       	push	r28
    9896:	df 93       	push	r29
    9898:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    989a:	0e 94 fa 4b 	call	0x97f4	; 0x97f4 <f_sync>
    989e:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    98a0:	00 97       	sbiw	r24, 0x00	; 0
    98a2:	11 f4       	brne	.+4      	; 0x98a8 <f_close+0x14>
    98a4:	18 82       	st	Y, r1
    98a6:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    98a8:	c9 01       	movw	r24, r18
    98aa:	df 91       	pop	r29
    98ac:	cf 91       	pop	r28
    98ae:	08 95       	ret

000098b0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    98b0:	a4 e0       	ldi	r26, 0x04	; 4
    98b2:	b0 e0       	ldi	r27, 0x00	; 0
    98b4:	ee e5       	ldi	r30, 0x5E	; 94
    98b6:	fc e4       	ldi	r31, 0x4C	; 76
    98b8:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    98bc:	8b 83       	std	Y+3, r24	; 0x03
    98be:	9c 83       	std	Y+4, r25	; 0x04
    98c0:	16 2f       	mov	r17, r22
    98c2:	07 2f       	mov	r16, r23
    98c4:	3a 01       	movw	r6, r20
    98c6:	29 83       	std	Y+1, r18	; 0x01
    98c8:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
    98ca:	d9 01       	movw	r26, r18
    98cc:	1d 92       	st	X+, r1
    98ce:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    98d0:	fc 01       	movw	r30, r24
    98d2:	62 81       	ldd	r22, Z+2	; 0x02
    98d4:	73 81       	ldd	r23, Z+3	; 0x03
    98d6:	80 81       	ld	r24, Z
    98d8:	91 81       	ldd	r25, Z+1	; 0x01
    98da:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <validate>
    98de:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    98e0:	00 97       	sbiw	r24, 0x00	; 0
    98e2:	09 f0       	breq	.+2      	; 0x98e6 <f_write+0x36>
    98e4:	09 c2       	rjmp	.+1042   	; 0x9cf8 <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    98e6:	ab 81       	ldd	r26, Y+3	; 0x03
    98e8:	bc 81       	ldd	r27, Y+4	; 0x04
    98ea:	14 96       	adiw	r26, 0x04	; 4
    98ec:	8c 91       	ld	r24, X
    98ee:	87 fd       	sbrc	r24, 7
    98f0:	78 c0       	rjmp	.+240    	; 0x99e2 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    98f2:	81 fd       	sbrc	r24, 1
    98f4:	04 c0       	rjmp	.+8      	; 0x98fe <f_write+0x4e>
    98f6:	f7 e0       	ldi	r31, 0x07	; 7
    98f8:	8f 2e       	mov	r8, r31
    98fa:	91 2c       	mov	r9, r1
    98fc:	fd c1       	rjmp	.+1018   	; 0x9cf8 <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    98fe:	eb 81       	ldd	r30, Y+3	; 0x03
    9900:	fc 81       	ldd	r31, Y+4	; 0x04
    9902:	22 85       	ldd	r18, Z+10	; 0x0a
    9904:	33 85       	ldd	r19, Z+11	; 0x0b
    9906:	44 85       	ldd	r20, Z+12	; 0x0c
    9908:	55 85       	ldd	r21, Z+13	; 0x0d
    990a:	c3 01       	movw	r24, r6
    990c:	a0 e0       	ldi	r26, 0x00	; 0
    990e:	b0 e0       	ldi	r27, 0x00	; 0
    9910:	82 0f       	add	r24, r18
    9912:	93 1f       	adc	r25, r19
    9914:	a4 1f       	adc	r26, r20
    9916:	b5 1f       	adc	r27, r21
    9918:	82 17       	cp	r24, r18
    991a:	93 07       	cpc	r25, r19
    991c:	a4 07       	cpc	r26, r20
    991e:	b5 07       	cpc	r27, r21
    9920:	10 f4       	brcc	.+4      	; 0x9926 <f_write+0x76>
    9922:	66 24       	eor	r6, r6
    9924:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    9926:	81 2f       	mov	r24, r17
    9928:	90 2f       	mov	r25, r16
    992a:	9c 01       	movw	r18, r24
    992c:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    992e:	22 24       	eor	r2, r2
    9930:	23 94       	inc	r2
    9932:	bd c1       	rjmp	.+890    	; 0x9cae <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9934:	ab 81       	ldd	r26, Y+3	; 0x03
    9936:	bc 81       	ldd	r27, Y+4	; 0x04
    9938:	16 96       	adiw	r26, 0x06	; 6
    993a:	2d 91       	ld	r18, X+
    993c:	3d 91       	ld	r19, X+
    993e:	4d 91       	ld	r20, X+
    9940:	5c 91       	ld	r21, X
    9942:	19 97       	sbiw	r26, 0x09	; 9
    9944:	da 01       	movw	r26, r20
    9946:	c9 01       	movw	r24, r18
    9948:	91 70       	andi	r25, 0x01	; 1
    994a:	a0 70       	andi	r26, 0x00	; 0
    994c:	b0 70       	andi	r27, 0x00	; 0
    994e:	00 97       	sbiw	r24, 0x00	; 0
    9950:	a1 05       	cpc	r26, r1
    9952:	b1 05       	cpc	r27, r1
    9954:	09 f0       	breq	.+2      	; 0x9958 <f_write+0xa8>
    9956:	4a c1       	rjmp	.+660    	; 0x9bec <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9958:	ab 81       	ldd	r26, Y+3	; 0x03
    995a:	bc 81       	ldd	r27, Y+4	; 0x04
    995c:	ed 91       	ld	r30, X+
    995e:	fc 91       	ld	r31, X
    9960:	11 97       	sbiw	r26, 0x01	; 1
    9962:	15 96       	adiw	r26, 0x05	; 5
    9964:	9c 91       	ld	r25, X
    9966:	15 97       	sbiw	r26, 0x05	; 5
    9968:	82 81       	ldd	r24, Z+2	; 0x02
    996a:	98 17       	cp	r25, r24
    996c:	08 f4       	brcc	.+2      	; 0x9970 <f_write+0xc0>
    996e:	55 c0       	rjmp	.+170    	; 0x9a1a <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    9970:	21 15       	cp	r18, r1
    9972:	31 05       	cpc	r19, r1
    9974:	41 05       	cpc	r20, r1
    9976:	51 05       	cpc	r21, r1
    9978:	c9 f4       	brne	.+50     	; 0x99ac <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    997a:	1e 96       	adiw	r26, 0x0e	; 14
    997c:	6d 91       	ld	r22, X+
    997e:	7d 91       	ld	r23, X+
    9980:	8d 91       	ld	r24, X+
    9982:	9c 91       	ld	r25, X
    9984:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    9986:	61 15       	cp	r22, r1
    9988:	71 05       	cpc	r23, r1
    998a:	81 05       	cpc	r24, r1
    998c:	91 05       	cpc	r25, r1
    998e:	f9 f4       	brne	.+62     	; 0x99ce <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    9990:	cf 01       	movw	r24, r30
    9992:	40 e0       	ldi	r20, 0x00	; 0
    9994:	50 e0       	ldi	r21, 0x00	; 0
    9996:	60 e0       	ldi	r22, 0x00	; 0
    9998:	70 e0       	ldi	r23, 0x00	; 0
    999a:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <create_chain>
    999e:	eb 81       	ldd	r30, Y+3	; 0x03
    99a0:	fc 81       	ldd	r31, Y+4	; 0x04
    99a2:	66 87       	std	Z+14, r22	; 0x0e
    99a4:	77 87       	std	Z+15, r23	; 0x0f
    99a6:	80 8b       	std	Z+16, r24	; 0x10
    99a8:	91 8b       	std	Z+17, r25	; 0x11
    99aa:	0b c0       	rjmp	.+22     	; 0x99c2 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    99ac:	ab 81       	ldd	r26, Y+3	; 0x03
    99ae:	bc 81       	ldd	r27, Y+4	; 0x04
    99b0:	52 96       	adiw	r26, 0x12	; 18
    99b2:	4d 91       	ld	r20, X+
    99b4:	5d 91       	ld	r21, X+
    99b6:	6d 91       	ld	r22, X+
    99b8:	7c 91       	ld	r23, X
    99ba:	55 97       	sbiw	r26, 0x15	; 21
    99bc:	cf 01       	movw	r24, r30
    99be:	0e 94 df 3e 	call	0x7dbe	; 0x7dbe <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    99c2:	61 15       	cp	r22, r1
    99c4:	71 05       	cpc	r23, r1
    99c6:	81 05       	cpc	r24, r1
    99c8:	91 05       	cpc	r25, r1
    99ca:	09 f4       	brne	.+2      	; 0x99ce <f_write+0x11e>
    99cc:	74 c1       	rjmp	.+744    	; 0x9cb6 <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    99ce:	61 30       	cpi	r22, 0x01	; 1
    99d0:	71 05       	cpc	r23, r1
    99d2:	81 05       	cpc	r24, r1
    99d4:	91 05       	cpc	r25, r1
    99d6:	49 f4       	brne	.+18     	; 0x99ea <f_write+0x13a>
    99d8:	eb 81       	ldd	r30, Y+3	; 0x03
    99da:	fc 81       	ldd	r31, Y+4	; 0x04
    99dc:	84 81       	ldd	r24, Z+4	; 0x04
    99de:	80 68       	ori	r24, 0x80	; 128
    99e0:	84 83       	std	Z+4, r24	; 0x04
    99e2:	e2 e0       	ldi	r30, 0x02	; 2
    99e4:	8e 2e       	mov	r8, r30
    99e6:	91 2c       	mov	r9, r1
    99e8:	87 c1       	rjmp	.+782    	; 0x9cf8 <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    99ea:	6f 3f       	cpi	r22, 0xFF	; 255
    99ec:	ff ef       	ldi	r31, 0xFF	; 255
    99ee:	7f 07       	cpc	r23, r31
    99f0:	ff ef       	ldi	r31, 0xFF	; 255
    99f2:	8f 07       	cpc	r24, r31
    99f4:	ff ef       	ldi	r31, 0xFF	; 255
    99f6:	9f 07       	cpc	r25, r31
    99f8:	49 f4       	brne	.+18     	; 0x9a0c <f_write+0x15c>
    99fa:	ab 81       	ldd	r26, Y+3	; 0x03
    99fc:	bc 81       	ldd	r27, Y+4	; 0x04
    99fe:	14 96       	adiw	r26, 0x04	; 4
    9a00:	8c 91       	ld	r24, X
    9a02:	14 97       	sbiw	r26, 0x04	; 4
    9a04:	80 68       	ori	r24, 0x80	; 128
    9a06:	14 96       	adiw	r26, 0x04	; 4
    9a08:	8c 93       	st	X, r24
    9a0a:	09 c1       	rjmp	.+530    	; 0x9c1e <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    9a0c:	eb 81       	ldd	r30, Y+3	; 0x03
    9a0e:	fc 81       	ldd	r31, Y+4	; 0x04
    9a10:	62 8b       	std	Z+18, r22	; 0x12
    9a12:	73 8b       	std	Z+19, r23	; 0x13
    9a14:	84 8b       	std	Z+20, r24	; 0x14
    9a16:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    9a18:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    9a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    9a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    9a1e:	ed 91       	ld	r30, X+
    9a20:	fc 91       	ld	r31, X
    9a22:	11 97       	sbiw	r26, 0x01	; 1
    9a24:	26 a5       	ldd	r18, Z+46	; 0x2e
    9a26:	37 a5       	ldd	r19, Z+47	; 0x2f
    9a28:	40 a9       	ldd	r20, Z+48	; 0x30
    9a2a:	51 a9       	ldd	r21, Z+49	; 0x31
    9a2c:	56 96       	adiw	r26, 0x16	; 22
    9a2e:	ed 90       	ld	r14, X+
    9a30:	fd 90       	ld	r15, X+
    9a32:	0d 91       	ld	r16, X+
    9a34:	1c 91       	ld	r17, X
    9a36:	59 97       	sbiw	r26, 0x19	; 25
    9a38:	2e 15       	cp	r18, r14
    9a3a:	3f 05       	cpc	r19, r15
    9a3c:	40 07       	cpc	r20, r16
    9a3e:	51 07       	cpc	r21, r17
    9a40:	51 f4       	brne	.+20     	; 0x9a56 <f_write+0x1a6>
    9a42:	cf 01       	movw	r24, r30
    9a44:	40 e0       	ldi	r20, 0x00	; 0
    9a46:	50 e0       	ldi	r21, 0x00	; 0
    9a48:	60 e0       	ldi	r22, 0x00	; 0
    9a4a:	70 e0       	ldi	r23, 0x00	; 0
    9a4c:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    9a50:	89 2b       	or	r24, r25
    9a52:	09 f0       	breq	.+2      	; 0x9a56 <f_write+0x1a6>
    9a54:	df c0       	rjmp	.+446    	; 0x9c14 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9a56:	ab 81       	ldd	r26, Y+3	; 0x03
    9a58:	bc 81       	ldd	r27, Y+4	; 0x04
    9a5a:	0d 91       	ld	r16, X+
    9a5c:	1c 91       	ld	r17, X
    9a5e:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9a60:	52 96       	adiw	r26, 0x12	; 18
    9a62:	2d 91       	ld	r18, X+
    9a64:	3d 91       	ld	r19, X+
    9a66:	4d 91       	ld	r20, X+
    9a68:	5c 91       	ld	r21, X
    9a6a:	55 97       	sbiw	r26, 0x15	; 21
    9a6c:	22 50       	subi	r18, 0x02	; 2
    9a6e:	30 40       	sbci	r19, 0x00	; 0
    9a70:	40 40       	sbci	r20, 0x00	; 0
    9a72:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9a74:	f8 01       	movw	r30, r16
    9a76:	86 8d       	ldd	r24, Z+30	; 0x1e
    9a78:	97 8d       	ldd	r25, Z+31	; 0x1f
    9a7a:	a0 a1       	ldd	r26, Z+32	; 0x20
    9a7c:	b1 a1       	ldd	r27, Z+33	; 0x21
    9a7e:	02 97       	sbiw	r24, 0x02	; 2
    9a80:	a1 09       	sbc	r26, r1
    9a82:	b1 09       	sbc	r27, r1
    9a84:	28 17       	cp	r18, r24
    9a86:	39 07       	cpc	r19, r25
    9a88:	4a 07       	cpc	r20, r26
    9a8a:	5b 07       	cpc	r21, r27
    9a8c:	b8 f4       	brcc	.+46     	; 0x9abc <f_write+0x20c>
	return clst * fs->csize + fs->database;
    9a8e:	32 80       	ldd	r3, Z+2	; 0x02
    9a90:	63 2d       	mov	r22, r3
    9a92:	70 e0       	ldi	r23, 0x00	; 0
    9a94:	80 e0       	ldi	r24, 0x00	; 0
    9a96:	90 e0       	ldi	r25, 0x00	; 0
    9a98:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    9a9c:	9b 01       	movw	r18, r22
    9a9e:	ac 01       	movw	r20, r24
    9aa0:	f8 01       	movw	r30, r16
    9aa2:	82 a5       	ldd	r24, Z+42	; 0x2a
    9aa4:	93 a5       	ldd	r25, Z+43	; 0x2b
    9aa6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9aa8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9aaa:	28 0f       	add	r18, r24
    9aac:	39 1f       	adc	r19, r25
    9aae:	4a 1f       	adc	r20, r26
    9ab0:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9ab2:	21 15       	cp	r18, r1
    9ab4:	31 05       	cpc	r19, r1
    9ab6:	41 05       	cpc	r20, r1
    9ab8:	51 05       	cpc	r21, r1
    9aba:	49 f4       	brne	.+18     	; 0x9ace <f_write+0x21e>
    9abc:	ab 81       	ldd	r26, Y+3	; 0x03
    9abe:	bc 81       	ldd	r27, Y+4	; 0x04
    9ac0:	14 96       	adiw	r26, 0x04	; 4
    9ac2:	8c 91       	ld	r24, X
    9ac4:	14 97       	sbiw	r26, 0x04	; 4
    9ac6:	80 68       	ori	r24, 0x80	; 128
    9ac8:	14 96       	adiw	r26, 0x04	; 4
    9aca:	8c 93       	st	X, r24
    9acc:	8a cf       	rjmp	.-236    	; 0x99e2 <f_write+0x132>
			sect += fp->csect;
    9ace:	eb 81       	ldd	r30, Y+3	; 0x03
    9ad0:	fc 81       	ldd	r31, Y+4	; 0x04
    9ad2:	85 81       	ldd	r24, Z+5	; 0x05
    9ad4:	59 01       	movw	r10, r18
    9ad6:	6a 01       	movw	r12, r20
    9ad8:	a8 0e       	add	r10, r24
    9ada:	b1 1c       	adc	r11, r1
    9adc:	c1 1c       	adc	r12, r1
    9ade:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9ae0:	73 01       	movw	r14, r6
    9ae2:	ef 2c       	mov	r14, r15
    9ae4:	ff 24       	eor	r15, r15
    9ae6:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    9ae8:	e1 14       	cp	r14, r1
    9aea:	f1 04       	cpc	r15, r1
    9aec:	09 f4       	brne	.+2      	; 0x9af0 <f_write+0x240>
    9aee:	51 c0       	rjmp	.+162    	; 0x9b92 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9af0:	28 2f       	mov	r18, r24
    9af2:	30 e0       	ldi	r19, 0x00	; 0
    9af4:	c7 01       	movw	r24, r14
    9af6:	82 0f       	add	r24, r18
    9af8:	93 1f       	adc	r25, r19
    9afa:	63 2d       	mov	r22, r3
    9afc:	70 e0       	ldi	r23, 0x00	; 0
    9afe:	68 17       	cp	r22, r24
    9b00:	79 07       	cpc	r23, r25
    9b02:	18 f4       	brcc	.+6      	; 0x9b0a <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    9b04:	7b 01       	movw	r14, r22
    9b06:	e2 1a       	sub	r14, r18
    9b08:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    9b0a:	d8 01       	movw	r26, r16
    9b0c:	11 96       	adiw	r26, 0x01	; 1
    9b0e:	8c 91       	ld	r24, X
    9b10:	b2 01       	movw	r22, r4
    9b12:	a6 01       	movw	r20, r12
    9b14:	95 01       	movw	r18, r10
    9b16:	0e 2d       	mov	r16, r14
    9b18:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <disk_write>
    9b1c:	89 2b       	or	r24, r25
    9b1e:	09 f0       	breq	.+2      	; 0x9b22 <f_write+0x272>
    9b20:	79 c0       	rjmp	.+242    	; 0x9c14 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    9b22:	ab 81       	ldd	r26, Y+3	; 0x03
    9b24:	bc 81       	ldd	r27, Y+4	; 0x04
    9b26:	ed 91       	ld	r30, X+
    9b28:	fc 91       	ld	r31, X
    9b2a:	26 a5       	ldd	r18, Z+46	; 0x2e
    9b2c:	37 a5       	ldd	r19, Z+47	; 0x2f
    9b2e:	40 a9       	ldd	r20, Z+48	; 0x30
    9b30:	51 a9       	ldd	r21, Z+49	; 0x31
    9b32:	2a 19       	sub	r18, r10
    9b34:	3b 09       	sbc	r19, r11
    9b36:	4c 09       	sbc	r20, r12
    9b38:	5d 09       	sbc	r21, r13
    9b3a:	c7 01       	movw	r24, r14
    9b3c:	a0 e0       	ldi	r26, 0x00	; 0
    9b3e:	b0 e0       	ldi	r27, 0x00	; 0
    9b40:	28 17       	cp	r18, r24
    9b42:	39 07       	cpc	r19, r25
    9b44:	4a 07       	cpc	r20, r26
    9b46:	5b 07       	cpc	r21, r27
    9b48:	d0 f4       	brcc	.+52     	; 0x9b7e <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9b4a:	df 01       	movw	r26, r30
    9b4c:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    9b4e:	69 e0       	ldi	r22, 0x09	; 9
    9b50:	22 0f       	add	r18, r18
    9b52:	33 1f       	adc	r19, r19
    9b54:	44 1f       	adc	r20, r20
    9b56:	55 1f       	adc	r21, r21
    9b58:	6a 95       	dec	r22
    9b5a:	d1 f7       	brne	.-12     	; 0x9b50 <f_write+0x2a0>
    9b5c:	f2 01       	movw	r30, r4
    9b5e:	e2 0f       	add	r30, r18
    9b60:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    9b62:	9f 01       	movw	r18, r30
    9b64:	20 50       	subi	r18, 0x00	; 0
    9b66:	3e 4f       	sbci	r19, 0xFE	; 254
    9b68:	02 c0       	rjmp	.+4      	; 0x9b6e <f_write+0x2be>
    9b6a:	81 91       	ld	r24, Z+
    9b6c:	8d 93       	st	X+, r24
    9b6e:	e2 17       	cp	r30, r18
    9b70:	f3 07       	cpc	r31, r19
    9b72:	d9 f7       	brne	.-10     	; 0x9b6a <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    9b74:	ab 81       	ldd	r26, Y+3	; 0x03
    9b76:	bc 81       	ldd	r27, Y+4	; 0x04
    9b78:	ed 91       	ld	r30, X+
    9b7a:	fc 91       	ld	r31, X
    9b7c:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    9b80:	fc 81       	ldd	r31, Y+4	; 0x04
    9b82:	85 81       	ldd	r24, Z+5	; 0x05
    9b84:	8e 0d       	add	r24, r14
    9b86:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9b88:	b7 01       	movw	r22, r14
    9b8a:	76 2f       	mov	r23, r22
    9b8c:	66 27       	eor	r22, r22
    9b8e:	77 0f       	add	r23, r23
    9b90:	71 c0       	rjmp	.+226    	; 0x9c74 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    9b92:	ab 81       	ldd	r26, Y+3	; 0x03
    9b94:	bc 81       	ldd	r27, Y+4	; 0x04
    9b96:	16 96       	adiw	r26, 0x06	; 6
    9b98:	2d 91       	ld	r18, X+
    9b9a:	3d 91       	ld	r19, X+
    9b9c:	4d 91       	ld	r20, X+
    9b9e:	5c 91       	ld	r21, X
    9ba0:	19 97       	sbiw	r26, 0x09	; 9
    9ba2:	1a 96       	adiw	r26, 0x0a	; 10
    9ba4:	8d 91       	ld	r24, X+
    9ba6:	9d 91       	ld	r25, X+
    9ba8:	0d 90       	ld	r0, X+
    9baa:	bc 91       	ld	r27, X
    9bac:	a0 2d       	mov	r26, r0
    9bae:	28 17       	cp	r18, r24
    9bb0:	39 07       	cpc	r19, r25
    9bb2:	4a 07       	cpc	r20, r26
    9bb4:	5b 07       	cpc	r21, r27
    9bb6:	88 f0       	brcs	.+34     	; 0x9bda <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    9bb8:	c8 01       	movw	r24, r16
    9bba:	40 e0       	ldi	r20, 0x00	; 0
    9bbc:	50 e0       	ldi	r21, 0x00	; 0
    9bbe:	60 e0       	ldi	r22, 0x00	; 0
    9bc0:	70 e0       	ldi	r23, 0x00	; 0
    9bc2:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    9bc6:	89 2b       	or	r24, r25
    9bc8:	29 f5       	brne	.+74     	; 0x9c14 <f_write+0x364>
				fp->fs->winsect = sect;
    9bca:	ab 81       	ldd	r26, Y+3	; 0x03
    9bcc:	bc 81       	ldd	r27, Y+4	; 0x04
    9bce:	ed 91       	ld	r30, X+
    9bd0:	fc 91       	ld	r31, X
    9bd2:	a6 a6       	std	Z+46, r10	; 0x2e
    9bd4:	b7 a6       	std	Z+47, r11	; 0x2f
    9bd6:	c0 aa       	std	Z+48, r12	; 0x30
    9bd8:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9bda:	eb 81       	ldd	r30, Y+3	; 0x03
    9bdc:	fc 81       	ldd	r31, Y+4	; 0x04
    9bde:	a6 8a       	std	Z+22, r10	; 0x16
    9be0:	b7 8a       	std	Z+23, r11	; 0x17
    9be2:	c0 8e       	std	Z+24, r12	; 0x18
    9be4:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9be6:	85 81       	ldd	r24, Z+5	; 0x05
    9be8:	8f 5f       	subi	r24, 0xFF	; 255
    9bea:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9bec:	ab 81       	ldd	r26, Y+3	; 0x03
    9bee:	bc 81       	ldd	r27, Y+4	; 0x04
    9bf0:	16 96       	adiw	r26, 0x06	; 6
    9bf2:	cd 90       	ld	r12, X+
    9bf4:	dd 90       	ld	r13, X+
    9bf6:	ed 90       	ld	r14, X+
    9bf8:	fc 90       	ld	r15, X
    9bfa:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9bfc:	56 96       	adiw	r26, 0x16	; 22
    9bfe:	4d 91       	ld	r20, X+
    9c00:	5d 91       	ld	r21, X+
    9c02:	6d 91       	ld	r22, X+
    9c04:	7c 91       	ld	r23, X
    9c06:	59 97       	sbiw	r26, 0x19	; 25
    9c08:	8d 91       	ld	r24, X+
    9c0a:	9c 91       	ld	r25, X
    9c0c:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    9c10:	89 2b       	or	r24, r25
    9c12:	49 f0       	breq	.+18     	; 0x9c26 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    9c14:	eb 81       	ldd	r30, Y+3	; 0x03
    9c16:	fc 81       	ldd	r31, Y+4	; 0x04
    9c18:	84 81       	ldd	r24, Z+4	; 0x04
    9c1a:	80 68       	ori	r24, 0x80	; 128
    9c1c:	84 83       	std	Z+4, r24	; 0x04
    9c1e:	31 e0       	ldi	r19, 0x01	; 1
    9c20:	83 2e       	mov	r8, r19
    9c22:	91 2c       	mov	r9, r1
    9c24:	69 c0       	rjmp	.+210    	; 0x9cf8 <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9c26:	c6 01       	movw	r24, r12
    9c28:	91 70       	andi	r25, 0x01	; 1
    9c2a:	20 e0       	ldi	r18, 0x00	; 0
    9c2c:	32 e0       	ldi	r19, 0x02	; 2
    9c2e:	28 1b       	sub	r18, r24
    9c30:	39 0b       	sbc	r19, r25
    9c32:	b3 01       	movw	r22, r6
    9c34:	26 15       	cp	r18, r6
    9c36:	37 05       	cpc	r19, r7
    9c38:	08 f4       	brcc	.+2      	; 0x9c3c <f_write+0x38c>
    9c3a:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9c3c:	ab 81       	ldd	r26, Y+3	; 0x03
    9c3e:	bc 81       	ldd	r27, Y+4	; 0x04
    9c40:	16 96       	adiw	r26, 0x06	; 6
    9c42:	8d 91       	ld	r24, X+
    9c44:	9c 91       	ld	r25, X
    9c46:	17 97       	sbiw	r26, 0x07	; 7
    9c48:	91 70       	andi	r25, 0x01	; 1
    9c4a:	c2 96       	adiw	r24, 0x32	; 50
    9c4c:	0d 90       	ld	r0, X+
    9c4e:	bc 91       	ld	r27, X
    9c50:	a0 2d       	mov	r26, r0
    9c52:	a8 0f       	add	r26, r24
    9c54:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    9c56:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    9c58:	92 01       	movw	r18, r4
    9c5a:	26 0f       	add	r18, r22
    9c5c:	37 1f       	adc	r19, r23
    9c5e:	02 c0       	rjmp	.+4      	; 0x9c64 <f_write+0x3b4>
    9c60:	81 91       	ld	r24, Z+
    9c62:	8d 93       	st	X+, r24
    9c64:	e2 17       	cp	r30, r18
    9c66:	f3 07       	cpc	r31, r19
    9c68:	d9 f7       	brne	.-10     	; 0x9c60 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9c6a:	ab 81       	ldd	r26, Y+3	; 0x03
    9c6c:	bc 81       	ldd	r27, Y+4	; 0x04
    9c6e:	ed 91       	ld	r30, X+
    9c70:	fc 91       	ld	r31, X
    9c72:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    9c74:	46 0e       	add	r4, r22
    9c76:	57 1e       	adc	r5, r23
    9c78:	cb 01       	movw	r24, r22
    9c7a:	a0 e0       	ldi	r26, 0x00	; 0
    9c7c:	b0 e0       	ldi	r27, 0x00	; 0
    9c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    9c80:	fc 81       	ldd	r31, Y+4	; 0x04
    9c82:	26 81       	ldd	r18, Z+6	; 0x06
    9c84:	37 81       	ldd	r19, Z+7	; 0x07
    9c86:	40 85       	ldd	r20, Z+8	; 0x08
    9c88:	51 85       	ldd	r21, Z+9	; 0x09
    9c8a:	28 0f       	add	r18, r24
    9c8c:	39 1f       	adc	r19, r25
    9c8e:	4a 1f       	adc	r20, r26
    9c90:	5b 1f       	adc	r21, r27
    9c92:	26 83       	std	Z+6, r18	; 0x06
    9c94:	37 83       	std	Z+7, r19	; 0x07
    9c96:	40 87       	std	Z+8, r20	; 0x08
    9c98:	51 87       	std	Z+9, r21	; 0x09
    9c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    9c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    9c9e:	80 81       	ld	r24, Z
    9ca0:	91 81       	ldd	r25, Z+1	; 0x01
    9ca2:	86 0f       	add	r24, r22
    9ca4:	97 1f       	adc	r25, r23
    9ca6:	80 83       	st	Z, r24
    9ca8:	91 83       	std	Z+1, r25	; 0x01
    9caa:	66 1a       	sub	r6, r22
    9cac:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    9cae:	61 14       	cp	r6, r1
    9cb0:	71 04       	cpc	r7, r1
    9cb2:	09 f0       	breq	.+2      	; 0x9cb6 <f_write+0x406>
    9cb4:	3f ce       	rjmp	.-898    	; 0x9934 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    9cb6:	ab 81       	ldd	r26, Y+3	; 0x03
    9cb8:	bc 81       	ldd	r27, Y+4	; 0x04
    9cba:	16 96       	adiw	r26, 0x06	; 6
    9cbc:	2d 91       	ld	r18, X+
    9cbe:	3d 91       	ld	r19, X+
    9cc0:	4d 91       	ld	r20, X+
    9cc2:	5c 91       	ld	r21, X
    9cc4:	19 97       	sbiw	r26, 0x09	; 9
    9cc6:	1a 96       	adiw	r26, 0x0a	; 10
    9cc8:	8d 91       	ld	r24, X+
    9cca:	9d 91       	ld	r25, X+
    9ccc:	0d 90       	ld	r0, X+
    9cce:	bc 91       	ld	r27, X
    9cd0:	a0 2d       	mov	r26, r0
    9cd2:	82 17       	cp	r24, r18
    9cd4:	93 07       	cpc	r25, r19
    9cd6:	a4 07       	cpc	r26, r20
    9cd8:	b5 07       	cpc	r27, r21
    9cda:	30 f4       	brcc	.+12     	; 0x9ce8 <f_write+0x438>
    9cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    9cde:	fc 81       	ldd	r31, Y+4	; 0x04
    9ce0:	22 87       	std	Z+10, r18	; 0x0a
    9ce2:	33 87       	std	Z+11, r19	; 0x0b
    9ce4:	44 87       	std	Z+12, r20	; 0x0c
    9ce6:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    9ce8:	ab 81       	ldd	r26, Y+3	; 0x03
    9cea:	bc 81       	ldd	r27, Y+4	; 0x04
    9cec:	14 96       	adiw	r26, 0x04	; 4
    9cee:	8c 91       	ld	r24, X
    9cf0:	14 97       	sbiw	r26, 0x04	; 4
    9cf2:	80 62       	ori	r24, 0x20	; 32
    9cf4:	14 96       	adiw	r26, 0x04	; 4
    9cf6:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    9cf8:	c4 01       	movw	r24, r8
    9cfa:	24 96       	adiw	r28, 0x04	; 4
    9cfc:	e2 e1       	ldi	r30, 0x12	; 18
    9cfe:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

00009d02 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    9d02:	a3 e0       	ldi	r26, 0x03	; 3
    9d04:	b0 e0       	ldi	r27, 0x00	; 0
    9d06:	e7 e8       	ldi	r30, 0x87	; 135
    9d08:	fe e4       	ldi	r31, 0x4E	; 78
    9d0a:	0c 94 a3 5b 	jmp	0xb746	; 0xb746 <__prologue_saves__+0x18>
    9d0e:	7c 01       	movw	r14, r24
    9d10:	8b 01       	movw	r16, r22
	UINT bw;
	char c;


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
    9d12:	8a e0       	ldi	r24, 0x0A	; 10
    9d14:	e8 16       	cp	r14, r24
    9d16:	f1 04       	cpc	r15, r1
    9d18:	21 f4       	brne	.+8      	; 0x9d22 <f_putc+0x20>
    9d1a:	8d e0       	ldi	r24, 0x0D	; 13
    9d1c:	90 e0       	ldi	r25, 0x00	; 0
    9d1e:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <f_putc>
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    9d22:	01 15       	cp	r16, r1
    9d24:	11 05       	cpc	r17, r1
    9d26:	99 f0       	breq	.+38     	; 0x9d4e <f_putc+0x4c>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    9d28:	e9 82       	std	Y+1, r14	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    9d2a:	c8 01       	movw	r24, r16
    9d2c:	be 01       	movw	r22, r28
    9d2e:	6f 5f       	subi	r22, 0xFF	; 255
    9d30:	7f 4f       	sbci	r23, 0xFF	; 255
    9d32:	41 e0       	ldi	r20, 0x01	; 1
    9d34:	50 e0       	ldi	r21, 0x00	; 0
    9d36:	9e 01       	movw	r18, r28
    9d38:	2e 5f       	subi	r18, 0xFE	; 254
    9d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    9d3c:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    9d40:	8a 81       	ldd	r24, Y+2	; 0x02
    9d42:	9b 81       	ldd	r25, Y+3	; 0x03
    9d44:	89 2b       	or	r24, r25
    9d46:	19 f4       	brne	.+6      	; 0x9d4e <f_putc+0x4c>
    9d48:	ee 24       	eor	r14, r14
    9d4a:	ea 94       	dec	r14
    9d4c:	fe 2c       	mov	r15, r14
}
    9d4e:	c7 01       	movw	r24, r14
    9d50:	23 96       	adiw	r28, 0x03	; 3
    9d52:	e6 e0       	ldi	r30, 0x06	; 6
    9d54:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

00009d58 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    9d58:	ef 92       	push	r14
    9d5a:	ff 92       	push	r15
    9d5c:	0f 93       	push	r16
    9d5e:	1f 93       	push	r17
    9d60:	cf 93       	push	r28
    9d62:	df 93       	push	r29
    9d64:	8c 01       	movw	r16, r24
    9d66:	7b 01       	movw	r14, r22
    9d68:	c0 e0       	ldi	r28, 0x00	; 0
    9d6a:	d0 e0       	ldi	r29, 0x00	; 0
    9d6c:	0f c0       	rjmp	.+30     	; 0x9d8c <f_puts+0x34>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    9d6e:	99 27       	eor	r25, r25
    9d70:	87 fd       	sbrc	r24, 7
    9d72:	90 95       	com	r25
    9d74:	b7 01       	movw	r22, r14
    9d76:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <f_putc>
    9d7a:	8f 5f       	subi	r24, 0xFF	; 255
    9d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d7e:	19 f4       	brne	.+6      	; 0x9d86 <f_puts+0x2e>
    9d80:	cf ef       	ldi	r28, 0xFF	; 255
    9d82:	df ef       	ldi	r29, 0xFF	; 255
    9d84:	07 c0       	rjmp	.+14     	; 0x9d94 <f_puts+0x3c>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    9d86:	0f 5f       	subi	r16, 0xFF	; 255
    9d88:	1f 4f       	sbci	r17, 0xFF	; 255
    9d8a:	21 96       	adiw	r28, 0x01	; 1
    9d8c:	f8 01       	movw	r30, r16
    9d8e:	80 81       	ld	r24, Z
    9d90:	88 23       	and	r24, r24
    9d92:	69 f7       	brne	.-38     	; 0x9d6e <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    9d94:	ce 01       	movw	r24, r28
    9d96:	cd b7       	in	r28, 0x3d	; 61
    9d98:	de b7       	in	r29, 0x3e	; 62
    9d9a:	e6 e0       	ldi	r30, 0x06	; 6
    9d9c:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

00009da0 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9da0:	a3 e1       	ldi	r26, 0x13	; 19
    9da2:	b0 e0       	ldi	r27, 0x00	; 0
    9da4:	e6 ed       	ldi	r30, 0xD6	; 214
    9da6:	fe e4       	ldi	r31, 0x4E	; 78
    9da8:	0c 94 97 5b 	jmp	0xb72e	; 0xb72e <__prologue_saves__>
    9dac:	6b a4       	ldd	r6, Y+43	; 0x2b
    9dae:	7c a4       	ldd	r7, Y+44	; 0x2c
    9db0:	8e 01       	movw	r16, r28
    9db2:	03 5d       	subi	r16, 0xD3	; 211
    9db4:	1f 4f       	sbci	r17, 0xFF	; 255
    9db6:	19 8a       	std	Y+17, r1	; 0x11
    9db8:	1a 8a       	std	Y+18, r1	; 0x12
    9dba:	20 e0       	ldi	r18, 0x00	; 0
    9dbc:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9dbe:	d3 01       	movw	r26, r6
    9dc0:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    9dc2:	88 23       	and	r24, r24
    9dc4:	09 f4       	brne	.+2      	; 0x9dc8 <f_printf+0x28>
    9dc6:	17 c1       	rjmp	.+558    	; 0x9ff6 <f_printf+0x256>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9dc8:	08 94       	sec
    9dca:	61 1c       	adc	r6, r1
    9dcc:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9dce:	85 32       	cpi	r24, 0x25	; 37
    9dd0:	71 f0       	breq	.+28     	; 0x9dee <f_printf+0x4e>
			cc = f_putc(c, fil);
    9dd2:	90 e0       	ldi	r25, 0x00	; 0
    9dd4:	69 a5       	ldd	r22, Y+41	; 0x29
    9dd6:	7a a5       	ldd	r23, Y+42	; 0x2a
    9dd8:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <f_putc>
    9ddc:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9dde:	bf ef       	ldi	r27, 0xFF	; 255
    9de0:	8f 3f       	cpi	r24, 0xFF	; 255
    9de2:	9b 07       	cpc	r25, r27
    9de4:	11 f4       	brne	.+4      	; 0x9dea <f_printf+0x4a>
    9de6:	48 01       	movw	r8, r16
    9de8:	fa c0       	rjmp	.+500    	; 0x9fde <f_printf+0x23e>
    9dea:	48 01       	movw	r8, r16
    9dec:	4c c0       	rjmp	.+152    	; 0x9e86 <f_printf+0xe6>
			continue;
		}
		w = f = 0;
		c = *str++;
    9dee:	d3 01       	movw	r26, r6
    9df0:	ed 91       	ld	r30, X+
    9df2:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9df4:	e0 33       	cpi	r30, 0x30	; 48
    9df6:	11 f0       	breq	.+4      	; 0x9dfc <f_printf+0x5c>
    9df8:	1b 8a       	std	Y+19, r1	; 0x13
    9dfa:	04 c0       	rjmp	.+8      	; 0x9e04 <f_printf+0x64>
			f = 1; c = *str++;
    9dfc:	ed 91       	ld	r30, X+
    9dfe:	3d 01       	movw	r6, r26
    9e00:	b1 e0       	ldi	r27, 0x01	; 1
    9e02:	bb 8b       	std	Y+19, r27	; 0x13
    9e04:	aa 24       	eor	r10, r10
    9e06:	bb 24       	eor	r11, r11
    9e08:	13 c0       	rjmp	.+38     	; 0x9e30 <f_printf+0x90>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9e0a:	c5 01       	movw	r24, r10
    9e0c:	53 e0       	ldi	r21, 0x03	; 3
    9e0e:	88 0f       	add	r24, r24
    9e10:	99 1f       	adc	r25, r25
    9e12:	5a 95       	dec	r21
    9e14:	e1 f7       	brne	.-8      	; 0x9e0e <f_printf+0x6e>
    9e16:	aa 0c       	add	r10, r10
    9e18:	bb 1c       	adc	r11, r11
    9e1a:	a8 0e       	add	r10, r24
    9e1c:	b9 1e       	adc	r11, r25
    9e1e:	ae 0e       	add	r10, r30
    9e20:	b1 1c       	adc	r11, r1
    9e22:	e0 ed       	ldi	r30, 0xD0	; 208
    9e24:	ff ef       	ldi	r31, 0xFF	; 255
    9e26:	ae 0e       	add	r10, r30
    9e28:	bf 1e       	adc	r11, r31
			c = *str++;
    9e2a:	d3 01       	movw	r26, r6
    9e2c:	ed 91       	ld	r30, X+
    9e2e:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9e30:	8e 2f       	mov	r24, r30
    9e32:	80 53       	subi	r24, 0x30	; 48
    9e34:	8a 30       	cpi	r24, 0x0A	; 10
    9e36:	48 f3       	brcs	.-46     	; 0x9e0a <f_printf+0x6a>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9e38:	ec 36       	cpi	r30, 0x6C	; 108
    9e3a:	31 f4       	brne	.+12     	; 0x9e48 <f_printf+0xa8>
			f |= 2; c = *str++;
    9e3c:	bb 89       	ldd	r27, Y+19	; 0x13
    9e3e:	b2 60       	ori	r27, 0x02	; 2
    9e40:	bb 8b       	std	Y+19, r27	; 0x13
    9e42:	d3 01       	movw	r26, r6
    9e44:	ed 91       	ld	r30, X+
    9e46:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9e48:	e3 37       	cpi	r30, 0x73	; 115
    9e4a:	49 f4       	brne	.+18     	; 0x9e5e <f_printf+0xbe>
			cc = f_puts(va_arg(arp, char*), fil);
    9e4c:	92 e0       	ldi	r25, 0x02	; 2
    9e4e:	89 2e       	mov	r8, r25
    9e50:	91 2c       	mov	r9, r1
    9e52:	80 0e       	add	r8, r16
    9e54:	91 1e       	adc	r9, r17
    9e56:	f8 01       	movw	r30, r16
    9e58:	80 81       	ld	r24, Z
    9e5a:	91 81       	ldd	r25, Z+1	; 0x01
    9e5c:	bb c0       	rjmp	.+374    	; 0x9fd4 <f_printf+0x234>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9e5e:	e3 36       	cpi	r30, 0x63	; 99
    9e60:	a9 f4       	brne	.+42     	; 0x9e8c <f_printf+0xec>
			cc = f_putc(va_arg(arp, int), fil);
    9e62:	82 e0       	ldi	r24, 0x02	; 2
    9e64:	88 2e       	mov	r8, r24
    9e66:	91 2c       	mov	r9, r1
    9e68:	80 0e       	add	r8, r16
    9e6a:	91 1e       	adc	r9, r17
    9e6c:	d8 01       	movw	r26, r16
    9e6e:	8d 91       	ld	r24, X+
    9e70:	9c 91       	ld	r25, X
    9e72:	69 a5       	ldd	r22, Y+41	; 0x29
    9e74:	7a a5       	ldd	r23, Y+42	; 0x2a
    9e76:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <f_putc>
    9e7a:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9e7c:	bf ef       	ldi	r27, 0xFF	; 255
    9e7e:	8f 3f       	cpi	r24, 0xFF	; 255
    9e80:	9b 07       	cpc	r25, r27
    9e82:	09 f4       	brne	.+2      	; 0x9e86 <f_printf+0xe6>
    9e84:	ac c0       	rjmp	.+344    	; 0x9fde <f_printf+0x23e>
    9e86:	21 e0       	ldi	r18, 0x01	; 1
    9e88:	30 e0       	ldi	r19, 0x00	; 0
    9e8a:	a9 c0       	rjmp	.+338    	; 0x9fde <f_printf+0x23e>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    9e8c:	e4 36       	cpi	r30, 0x64	; 100
    9e8e:	39 f0       	breq	.+14     	; 0x9e9e <f_printf+0xfe>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    9e90:	e5 37       	cpi	r30, 0x75	; 117
    9e92:	29 f0       	breq	.+10     	; 0x9e9e <f_printf+0xfe>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    9e94:	e8 35       	cpi	r30, 0x58	; 88
    9e96:	09 f0       	breq	.+2      	; 0x9e9a <f_printf+0xfa>
    9e98:	ae c0       	rjmp	.+348    	; 0x9ff6 <f_printf+0x256>
    9e9a:	20 e1       	ldi	r18, 0x10	; 16
    9e9c:	01 c0       	rjmp	.+2      	; 0x9ea0 <f_printf+0x100>
    9e9e:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    9ea0:	fb 89       	ldd	r31, Y+19	; 0x13
    9ea2:	f1 ff       	sbrs	r31, 1
    9ea4:	0d c0       	rjmp	.+26     	; 0x9ec0 <f_printf+0x120>
			val = (ULONG)va_arg(arp, long);
    9ea6:	b4 e0       	ldi	r27, 0x04	; 4
    9ea8:	8b 2e       	mov	r8, r27
    9eaa:	91 2c       	mov	r9, r1
    9eac:	80 0e       	add	r8, r16
    9eae:	91 1e       	adc	r9, r17
    9eb0:	d8 01       	movw	r26, r16
    9eb2:	ed 90       	ld	r14, X+
    9eb4:	fd 90       	ld	r15, X+
    9eb6:	0d 91       	ld	r16, X+
    9eb8:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    9eba:	e4 36       	cpi	r30, 0x64	; 100
    9ebc:	09 f5       	brne	.+66     	; 0x9f00 <f_printf+0x160>
    9ebe:	13 c0       	rjmp	.+38     	; 0x9ee6 <f_printf+0x146>
    9ec0:	c8 01       	movw	r24, r16
    9ec2:	02 96       	adiw	r24, 0x02	; 2
    9ec4:	d8 01       	movw	r26, r16
    9ec6:	6d 91       	ld	r22, X+
    9ec8:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    9eca:	e4 36       	cpi	r30, 0x64	; 100
    9ecc:	39 f4       	brne	.+14     	; 0x9edc <f_printf+0x13c>
    9ece:	4c 01       	movw	r8, r24
    9ed0:	7b 01       	movw	r14, r22
    9ed2:	00 27       	eor	r16, r16
    9ed4:	f7 fc       	sbrc	r15, 7
    9ed6:	00 95       	com	r16
    9ed8:	10 2f       	mov	r17, r16
    9eda:	05 c0       	rjmp	.+10     	; 0x9ee6 <f_printf+0x146>
    9edc:	4c 01       	movw	r8, r24
    9ede:	7b 01       	movw	r14, r22
    9ee0:	00 e0       	ldi	r16, 0x00	; 0
    9ee2:	10 e0       	ldi	r17, 0x00	; 0
    9ee4:	0d c0       	rjmp	.+26     	; 0x9f00 <f_printf+0x160>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    9ee6:	17 ff       	sbrs	r17, 7
    9ee8:	0b c0       	rjmp	.+22     	; 0x9f00 <f_printf+0x160>
				val = 0 - val;
    9eea:	10 95       	com	r17
    9eec:	00 95       	com	r16
    9eee:	f0 94       	com	r15
    9ef0:	e0 94       	com	r14
    9ef2:	e1 1c       	adc	r14, r1
    9ef4:	f1 1c       	adc	r15, r1
    9ef6:	01 1d       	adc	r16, r1
    9ef8:	11 1d       	adc	r17, r1
				f |= 4;
    9efa:	bb 89       	ldd	r27, Y+19	; 0x13
    9efc:	b4 60       	ori	r27, 0x04	; 4
    9efe:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9f00:	18 8a       	std	Y+16, r1	; 0x10
    9f02:	af e0       	ldi	r26, 0x0F	; 15
    9f04:	ca 2e       	mov	r12, r26
    9f06:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9f08:	22 2e       	mov	r2, r18
    9f0a:	33 24       	eor	r3, r3
    9f0c:	44 24       	eor	r4, r4
    9f0e:	55 24       	eor	r5, r5
    9f10:	c8 01       	movw	r24, r16
    9f12:	b7 01       	movw	r22, r14
    9f14:	a2 01       	movw	r20, r4
    9f16:	91 01       	movw	r18, r2
    9f18:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    9f1c:	86 2f       	mov	r24, r22
    9f1e:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9f20:	8a 33       	cpi	r24, 0x3A	; 58
    9f22:	08 f0       	brcs	.+2      	; 0x9f26 <f_printf+0x186>
    9f24:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9f26:	08 94       	sec
    9f28:	c1 08       	sbc	r12, r1
    9f2a:	d1 08       	sbc	r13, r1
    9f2c:	e1 e0       	ldi	r30, 0x01	; 1
    9f2e:	f0 e0       	ldi	r31, 0x00	; 0
    9f30:	ec 0f       	add	r30, r28
    9f32:	fd 1f       	adc	r31, r29
    9f34:	ec 0d       	add	r30, r12
    9f36:	fd 1d       	adc	r31, r13
    9f38:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9f3a:	c1 14       	cp	r12, r1
    9f3c:	d1 04       	cpc	r13, r1
    9f3e:	e9 f0       	breq	.+58     	; 0x9f7a <f_printf+0x1da>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9f40:	c8 01       	movw	r24, r16
    9f42:	b7 01       	movw	r22, r14
    9f44:	a2 01       	movw	r20, r4
    9f46:	91 01       	movw	r18, r2
    9f48:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    9f4c:	c9 01       	movw	r24, r18
    9f4e:	da 01       	movw	r26, r20
    9f50:	7c 01       	movw	r14, r24
    9f52:	8d 01       	movw	r16, r26
		} while (i && val);
    9f54:	e1 14       	cp	r14, r1
    9f56:	f1 04       	cpc	r15, r1
    9f58:	01 05       	cpc	r16, r1
    9f5a:	11 05       	cpc	r17, r1
    9f5c:	c9 f6       	brne	.-78     	; 0x9f10 <f_printf+0x170>
		if (i && (f & 4)) s[--i] = '-';
    9f5e:	eb 89       	ldd	r30, Y+19	; 0x13
    9f60:	e2 ff       	sbrs	r30, 2
    9f62:	0b c0       	rjmp	.+22     	; 0x9f7a <f_printf+0x1da>
    9f64:	08 94       	sec
    9f66:	c1 08       	sbc	r12, r1
    9f68:	d1 08       	sbc	r13, r1
    9f6a:	e1 e0       	ldi	r30, 0x01	; 1
    9f6c:	f0 e0       	ldi	r31, 0x00	; 0
    9f6e:	ec 0f       	add	r30, r28
    9f70:	fd 1f       	adc	r31, r29
    9f72:	ec 0d       	add	r30, r12
    9f74:	fd 1d       	adc	r31, r13
    9f76:	4d e2       	ldi	r20, 0x2D	; 45
    9f78:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9f7a:	8f e0       	ldi	r24, 0x0F	; 15
    9f7c:	90 e0       	ldi	r25, 0x00	; 0
    9f7e:	8a 19       	sub	r24, r10
    9f80:	9b 09       	sbc	r25, r11
    9f82:	08 94       	sec
    9f84:	c1 08       	sbc	r12, r1
    9f86:	d1 08       	sbc	r13, r1
    9f88:	e1 e0       	ldi	r30, 0x01	; 1
    9f8a:	f0 e0       	ldi	r31, 0x00	; 0
    9f8c:	ec 0f       	add	r30, r28
    9f8e:	fd 1f       	adc	r31, r29
    9f90:	ec 0d       	add	r30, r12
    9f92:	fd 1d       	adc	r31, r13
    9f94:	08 94       	sec
    9f96:	c1 1c       	adc	r12, r1
    9f98:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    9f9a:	ab 89       	ldd	r26, Y+19	; 0x13
    9f9c:	2a 2f       	mov	r18, r26
    9f9e:	30 e0       	ldi	r19, 0x00	; 0
    9fa0:	21 70       	andi	r18, 0x01	; 1
    9fa2:	30 70       	andi	r19, 0x00	; 0
    9fa4:	0b c0       	rjmp	.+22     	; 0x9fbc <f_printf+0x21c>
    9fa6:	08 94       	sec
    9fa8:	c1 08       	sbc	r12, r1
    9faa:	d1 08       	sbc	r13, r1
    9fac:	21 15       	cp	r18, r1
    9fae:	31 05       	cpc	r19, r1
    9fb0:	11 f4       	brne	.+4      	; 0x9fb6 <f_printf+0x216>
    9fb2:	40 e2       	ldi	r20, 0x20	; 32
    9fb4:	01 c0       	rjmp	.+2      	; 0x9fb8 <f_printf+0x218>
    9fb6:	40 e3       	ldi	r20, 0x30	; 48
    9fb8:	40 83       	st	Z, r20
    9fba:	31 97       	sbiw	r30, 0x01	; 1
    9fbc:	c1 14       	cp	r12, r1
    9fbe:	d1 04       	cpc	r13, r1
    9fc0:	19 f0       	breq	.+6      	; 0x9fc8 <f_printf+0x228>
    9fc2:	8c 15       	cp	r24, r12
    9fc4:	9d 05       	cpc	r25, r13
    9fc6:	7c f3       	brlt	.-34     	; 0x9fa6 <f_printf+0x206>
		cc = f_puts(&s[i], fil);
    9fc8:	81 e0       	ldi	r24, 0x01	; 1
    9fca:	90 e0       	ldi	r25, 0x00	; 0
    9fcc:	8c 0f       	add	r24, r28
    9fce:	9d 1f       	adc	r25, r29
    9fd0:	8c 0d       	add	r24, r12
    9fd2:	9d 1d       	adc	r25, r13
    9fd4:	69 a5       	ldd	r22, Y+41	; 0x29
    9fd6:	7a a5       	ldd	r23, Y+42	; 0x2a
    9fd8:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <f_puts>
    9fdc:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9fde:	e9 89       	ldd	r30, Y+17	; 0x11
    9fe0:	fa 89       	ldd	r31, Y+18	; 0x12
    9fe2:	e2 0f       	add	r30, r18
    9fe4:	f3 1f       	adc	r31, r19
    9fe6:	e9 8b       	std	Y+17, r30	; 0x11
    9fe8:	fa 8b       	std	Y+18, r31	; 0x12
    9fea:	ff ef       	ldi	r31, 0xFF	; 255
    9fec:	2f 3f       	cpi	r18, 0xFF	; 255
    9fee:	3f 07       	cpc	r19, r31
    9ff0:	41 f0       	breq	.+16     	; 0xa002 <f_printf+0x262>
    9ff2:	84 01       	movw	r16, r8
    9ff4:	e4 ce       	rjmp	.-568    	; 0x9dbe <f_printf+0x1e>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    9ff6:	4f ef       	ldi	r20, 0xFF	; 255
    9ff8:	2f 3f       	cpi	r18, 0xFF	; 255
    9ffa:	34 07       	cpc	r19, r20
    9ffc:	11 f0       	breq	.+4      	; 0xa002 <f_printf+0x262>
    9ffe:	29 89       	ldd	r18, Y+17	; 0x11
    a000:	3a 89       	ldd	r19, Y+18	; 0x12
}
    a002:	c9 01       	movw	r24, r18
    a004:	63 96       	adiw	r28, 0x13	; 19
    a006:	e2 e1       	ldi	r30, 0x12	; 18
    a008:	0c 94 b3 5b 	jmp	0xb766	; 0xb766 <__epilogue_restores__>

0000a00c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    a00c:	a4 e2       	ldi	r26, 0x24	; 36
    a00e:	b0 e0       	ldi	r27, 0x00	; 0
    a010:	ec e0       	ldi	r30, 0x0C	; 12
    a012:	f0 e5       	ldi	r31, 0x50	; 80
    a014:	0c 94 9a 5b 	jmp	0xb734	; 0xb734 <__prologue_saves__+0x6>
    a018:	5c 01       	movw	r10, r24
    a01a:	6b a3       	std	Y+35, r22	; 0x23
    a01c:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    a01e:	dc 01       	movw	r26, r24
    a020:	1d 92       	st	X+, r1
    a022:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    a024:	0f e1       	ldi	r16, 0x1F	; 31
    a026:	50 2e       	mov	r5, r16
    a028:	54 22       	and	r5, r20
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    a02a:	8e 01       	movw	r16, r28
    a02c:	03 5f       	subi	r16, 0xF3	; 243
    a02e:	1f 4f       	sbci	r17, 0xFF	; 255
    a030:	4e 71       	andi	r20, 0x1E	; 30
    a032:	ce 01       	movw	r24, r28
    a034:	83 96       	adiw	r24, 0x23	; 35
    a036:	b8 01       	movw	r22, r16
    a038:	0e 94 3f 3a 	call	0x747e	; 0x747e <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    a03c:	00 97       	sbiw	r24, 0x00	; 0
    a03e:	11 f0       	breq	.+4      	; 0xa044 <f_open+0x38>
    a040:	9c 01       	movw	r18, r24
    a042:	f6 c0       	rjmp	.+492    	; 0xa230 <f_open+0x224>
	INITBUF(dj, sfn, lfn);
    a044:	ce 01       	movw	r24, r28
    a046:	01 96       	adiw	r24, 0x01	; 1
    a048:	89 a3       	std	Y+33, r24	; 0x21
    a04a:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    a04c:	6b a1       	ldd	r22, Y+35	; 0x23
    a04e:	7c a1       	ldd	r23, Y+36	; 0x24
    a050:	c8 01       	movw	r24, r16
    a052:	0e 94 01 44 	call	0x8802	; 0x8802 <follow_path>
    a056:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    a058:	45 2d       	mov	r20, r5
    a05a:	50 e0       	ldi	r21, 0x00	; 0
    a05c:	ca 01       	movw	r24, r20
    a05e:	8c 71       	andi	r24, 0x1C	; 28
    a060:	90 70       	andi	r25, 0x00	; 0
    a062:	89 2b       	or	r24, r25
    a064:	09 f4       	brne	.+2      	; 0xa068 <f_open+0x5c>
    a066:	7e c0       	rjmp	.+252    	; 0xa164 <f_open+0x158>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    a068:	21 15       	cp	r18, r1
    a06a:	31 05       	cpc	r19, r1
    a06c:	81 f0       	breq	.+32     	; 0xa08e <f_open+0x82>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    a06e:	24 30       	cpi	r18, 0x04	; 4
    a070:	31 05       	cpc	r19, r1
    a072:	09 f0       	breq	.+2      	; 0xa076 <f_open+0x6a>
    a074:	dd c0       	rjmp	.+442    	; 0xa230 <f_open+0x224>
				res = dir_register(&dj);
    a076:	c8 01       	movw	r24, r16
    a078:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <dir_register>
    a07c:	9c 01       	movw	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    a07e:	00 97       	sbiw	r24, 0x00	; 0
    a080:	09 f0       	breq	.+2      	; 0xa084 <f_open+0x78>
    a082:	d6 c0       	rjmp	.+428    	; 0xa230 <f_open+0x224>
			mode |= FA_CREATE_ALWAYS;
    a084:	b8 e0       	ldi	r27, 0x08	; 8
    a086:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    a088:	cf 8c       	ldd	r12, Y+31	; 0x1f
    a08a:	d8 a0       	ldd	r13, Y+32	; 0x20
    a08c:	57 c0       	rjmp	.+174    	; 0xa13c <f_open+0x130>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    a08e:	52 fe       	sbrs	r5, 2
    a090:	03 c0       	rjmp	.+6      	; 0xa098 <f_open+0x8c>
    a092:	28 e0       	ldi	r18, 0x08	; 8
    a094:	30 e0       	ldi	r19, 0x00	; 0
    a096:	cc c0       	rjmp	.+408    	; 0xa230 <f_open+0x224>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    a098:	cf 8c       	ldd	r12, Y+31	; 0x1f
    a09a:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    a09c:	c1 14       	cp	r12, r1
    a09e:	d1 04       	cpc	r13, r1
    a0a0:	09 f4       	brne	.+2      	; 0xa0a4 <f_open+0x98>
    a0a2:	c1 c0       	rjmp	.+386    	; 0xa226 <f_open+0x21a>
    a0a4:	f6 01       	movw	r30, r12
    a0a6:	83 85       	ldd	r24, Z+11	; 0x0b
    a0a8:	81 71       	andi	r24, 0x11	; 17
    a0aa:	09 f0       	breq	.+2      	; 0xa0ae <f_open+0xa2>
    a0ac:	bc c0       	rjmp	.+376    	; 0xa226 <f_open+0x21a>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    a0ae:	53 fe       	sbrs	r5, 3
    a0b0:	45 c0       	rjmp	.+138    	; 0xa13c <f_open+0x130>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    a0b2:	84 89       	ldd	r24, Z+20	; 0x14
    a0b4:	95 89       	ldd	r25, Z+21	; 0x15
    a0b6:	a0 e0       	ldi	r26, 0x00	; 0
    a0b8:	b0 e0       	ldi	r27, 0x00	; 0
    a0ba:	8c 01       	movw	r16, r24
    a0bc:	ff 24       	eor	r15, r15
    a0be:	ee 24       	eor	r14, r14
    a0c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    a0c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    a0c4:	a0 e0       	ldi	r26, 0x00	; 0
    a0c6:	b0 e0       	ldi	r27, 0x00	; 0
    a0c8:	e8 2a       	or	r14, r24
    a0ca:	f9 2a       	or	r15, r25
    a0cc:	0a 2b       	or	r16, r26
    a0ce:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    a0d0:	14 8a       	std	Z+20, r1	; 0x14
    a0d2:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    a0d4:	12 8e       	std	Z+26, r1	; 0x1a
    a0d6:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    a0d8:	d6 01       	movw	r26, r12
    a0da:	5c 96       	adiw	r26, 0x1c	; 28
    a0dc:	1d 92       	st	X+, r1
    a0de:	1d 92       	st	X+, r1
    a0e0:	1d 92       	st	X+, r1
    a0e2:	1c 92       	st	X, r1
    a0e4:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    a0e6:	ed 85       	ldd	r30, Y+13	; 0x0d
    a0e8:	fe 85       	ldd	r31, Y+14	; 0x0e
    a0ea:	81 e0       	ldi	r24, 0x01	; 1
    a0ec:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    a0ee:	66 a4       	ldd	r6, Z+46	; 0x2e
    a0f0:	77 a4       	ldd	r7, Z+47	; 0x2f
    a0f2:	80 a8       	ldd	r8, Z+48	; 0x30
    a0f4:	91 a8       	ldd	r9, Z+49	; 0x31
				if (cl) {
    a0f6:	e1 14       	cp	r14, r1
    a0f8:	f1 04       	cpc	r15, r1
    a0fa:	01 05       	cpc	r16, r1
    a0fc:	11 05       	cpc	r17, r1
    a0fe:	a1 f0       	breq	.+40     	; 0xa128 <f_open+0x11c>
					res = remove_chain(dj.fs, cl);
    a100:	cf 01       	movw	r24, r30
    a102:	b8 01       	movw	r22, r16
    a104:	a7 01       	movw	r20, r14
    a106:	0e 94 95 41 	call	0x832a	; 0x832a <remove_chain>
    a10a:	9c 01       	movw	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    a10c:	00 97       	sbiw	r24, 0x00	; 0
    a10e:	09 f0       	breq	.+2      	; 0xa112 <f_open+0x106>
    a110:	8f c0       	rjmp	.+286    	; 0xa230 <f_open+0x224>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    a112:	ed 85       	ldd	r30, Y+13	; 0x0d
    a114:	fe 85       	ldd	r31, Y+14	; 0x0e
    a116:	08 94       	sec
    a118:	e1 08       	sbc	r14, r1
    a11a:	f1 08       	sbc	r15, r1
    a11c:	01 09       	sbc	r16, r1
    a11e:	11 09       	sbc	r17, r1
    a120:	e2 86       	std	Z+10, r14	; 0x0a
    a122:	f3 86       	std	Z+11, r15	; 0x0b
    a124:	04 87       	std	Z+12, r16	; 0x0c
    a126:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    a128:	8d 85       	ldd	r24, Y+13	; 0x0d
    a12a:	9e 85       	ldd	r25, Y+14	; 0x0e
    a12c:	b4 01       	movw	r22, r8
    a12e:	a3 01       	movw	r20, r6
    a130:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    a134:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    a136:	00 97       	sbiw	r24, 0x00	; 0
    a138:	09 f0       	breq	.+2      	; 0xa13c <f_open+0x130>
    a13a:	7a c0       	rjmp	.+244    	; 0xa230 <f_open+0x224>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    a13c:	53 fe       	sbrs	r5, 3
    a13e:	24 c0       	rjmp	.+72     	; 0xa188 <f_open+0x17c>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    a140:	f6 01       	movw	r30, r12
    a142:	13 86       	std	Z+11, r1	; 0x0b
			ps = get_fattime();
    a144:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    a148:	d6 01       	movw	r26, r12
    a14a:	1e 96       	adiw	r26, 0x0e	; 14
    a14c:	6d 93       	st	X+, r22
    a14e:	7d 93       	st	X+, r23
    a150:	8d 93       	st	X+, r24
    a152:	9c 93       	st	X, r25
    a154:	51 97       	sbiw	r26, 0x11	; 17
			dj.fs->wflag = 1;
    a156:	ed 85       	ldd	r30, Y+13	; 0x0d
    a158:	fe 85       	ldd	r31, Y+14	; 0x0e
    a15a:	81 e0       	ldi	r24, 0x01	; 1
    a15c:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    a15e:	b0 e2       	ldi	r27, 0x20	; 32
    a160:	5b 2a       	or	r5, r27
    a162:	12 c0       	rjmp	.+36     	; 0xa188 <f_open+0x17c>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    a164:	21 15       	cp	r18, r1
    a166:	31 05       	cpc	r19, r1
    a168:	09 f0       	breq	.+2      	; 0xa16c <f_open+0x160>
    a16a:	62 c0       	rjmp	.+196    	; 0xa230 <f_open+0x224>
		dir = dj.dir;
    a16c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    a16e:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    a170:	c1 14       	cp	r12, r1
    a172:	d1 04       	cpc	r13, r1
    a174:	09 f4       	brne	.+2      	; 0xa178 <f_open+0x16c>
    a176:	5a c0       	rjmp	.+180    	; 0xa22c <f_open+0x220>
    a178:	f6 01       	movw	r30, r12
    a17a:	83 85       	ldd	r24, Z+11	; 0x0b
    a17c:	84 fd       	sbrc	r24, 4
    a17e:	56 c0       	rjmp	.+172    	; 0xa22c <f_open+0x220>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    a180:	51 fe       	sbrs	r5, 1
    a182:	02 c0       	rjmp	.+4      	; 0xa188 <f_open+0x17c>
    a184:	80 fd       	sbrc	r24, 0
    a186:	4f c0       	rjmp	.+158    	; 0xa226 <f_open+0x21a>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    a188:	6d 85       	ldd	r22, Y+13	; 0x0d
    a18a:	7e 85       	ldd	r23, Y+14	; 0x0e
    a18c:	db 01       	movw	r26, r22
    a18e:	9e 96       	adiw	r26, 0x2e	; 46
    a190:	2d 91       	ld	r18, X+
    a192:	3d 91       	ld	r19, X+
    a194:	4d 91       	ld	r20, X+
    a196:	5c 91       	ld	r21, X
    a198:	d1 97       	sbiw	r26, 0x31	; 49
    a19a:	f5 01       	movw	r30, r10
    a19c:	22 8f       	std	Z+26, r18	; 0x1a
    a19e:	33 8f       	std	Z+27, r19	; 0x1b
    a1a0:	44 8f       	std	Z+28, r20	; 0x1c
    a1a2:	55 8f       	std	Z+29, r21	; 0x1d
	fp->dir_ptr = dj.dir;
    a1a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a1a6:	98 a1       	ldd	r25, Y+32	; 0x20
    a1a8:	86 8f       	std	Z+30, r24	; 0x1e
    a1aa:	97 8f       	std	Z+31, r25	; 0x1f
#endif
	fp->flag = mode;					/* File access mode */
    a1ac:	54 82       	std	Z+4, r5	; 0x04
	fp->org_clust =						/* File start cluster */
    a1ae:	d6 01       	movw	r26, r12
    a1b0:	54 96       	adiw	r26, 0x14	; 20
    a1b2:	8d 91       	ld	r24, X+
    a1b4:	9c 91       	ld	r25, X
    a1b6:	55 97       	sbiw	r26, 0x15	; 21
    a1b8:	a0 e0       	ldi	r26, 0x00	; 0
    a1ba:	b0 e0       	ldi	r27, 0x00	; 0
    a1bc:	dc 01       	movw	r26, r24
    a1be:	99 27       	eor	r25, r25
    a1c0:	88 27       	eor	r24, r24
    a1c2:	f6 01       	movw	r30, r12
    a1c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    a1c6:	33 8d       	ldd	r19, Z+27	; 0x1b
    a1c8:	40 e0       	ldi	r20, 0x00	; 0
    a1ca:	50 e0       	ldi	r21, 0x00	; 0
    a1cc:	82 2b       	or	r24, r18
    a1ce:	93 2b       	or	r25, r19
    a1d0:	a4 2b       	or	r26, r20
    a1d2:	b5 2b       	or	r27, r21
    a1d4:	f5 01       	movw	r30, r10
    a1d6:	86 87       	std	Z+14, r24	; 0x0e
    a1d8:	97 87       	std	Z+15, r25	; 0x0f
    a1da:	a0 8b       	std	Z+16, r26	; 0x10
    a1dc:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    a1de:	f6 01       	movw	r30, r12
    a1e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    a1e2:	95 8d       	ldd	r25, Z+29	; 0x1d
    a1e4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    a1e6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    a1e8:	f5 01       	movw	r30, r10
    a1ea:	82 87       	std	Z+10, r24	; 0x0a
    a1ec:	93 87       	std	Z+11, r25	; 0x0b
    a1ee:	a4 87       	std	Z+12, r26	; 0x0c
    a1f0:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    a1f2:	d5 01       	movw	r26, r10
    a1f4:	16 96       	adiw	r26, 0x06	; 6
    a1f6:	1d 92       	st	X+, r1
    a1f8:	1d 92       	st	X+, r1
    a1fa:	1d 92       	st	X+, r1
    a1fc:	1c 92       	st	X, r1
    a1fe:	19 97       	sbiw	r26, 0x09	; 9
    a200:	8f ef       	ldi	r24, 0xFF	; 255
    a202:	15 96       	adiw	r26, 0x05	; 5
    a204:	8c 93       	st	X, r24
	fp->dsect = 0;
    a206:	16 8a       	std	Z+22, r1	; 0x16
    a208:	17 8a       	std	Z+23, r1	; 0x17
    a20a:	10 8e       	std	Z+24, r1	; 0x18
    a20c:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    a20e:	60 83       	st	Z, r22
    a210:	71 83       	std	Z+1, r23	; 0x01
    a212:	db 01       	movw	r26, r22
    a214:	15 96       	adiw	r26, 0x05	; 5
    a216:	8d 91       	ld	r24, X+
    a218:	9c 91       	ld	r25, X
    a21a:	16 97       	sbiw	r26, 0x06	; 6
    a21c:	82 83       	std	Z+2, r24	; 0x02
    a21e:	93 83       	std	Z+3, r25	; 0x03
    a220:	20 e0       	ldi	r18, 0x00	; 0
    a222:	30 e0       	ldi	r19, 0x00	; 0
    a224:	05 c0       	rjmp	.+10     	; 0xa230 <f_open+0x224>

	LEAVE_FF(dj.fs, FR_OK);
    a226:	27 e0       	ldi	r18, 0x07	; 7
    a228:	30 e0       	ldi	r19, 0x00	; 0
    a22a:	02 c0       	rjmp	.+4      	; 0xa230 <f_open+0x224>
    a22c:	24 e0       	ldi	r18, 0x04	; 4
    a22e:	30 e0       	ldi	r19, 0x00	; 0
}
    a230:	c9 01       	movw	r24, r18
    a232:	a4 96       	adiw	r28, 0x24	; 36
    a234:	ef e0       	ldi	r30, 0x0F	; 15
    a236:	0c 94 b6 5b 	jmp	0xb76c	; 0xb76c <__epilogue_restores__+0x6>

0000a23a <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    a23a:	a4 e0       	ldi	r26, 0x04	; 4
    a23c:	b0 e0       	ldi	r27, 0x00	; 0
    a23e:	e3 e2       	ldi	r30, 0x23	; 35
    a240:	f1 e5       	ldi	r31, 0x51	; 81
    a242:	0c 94 98 5b 	jmp	0xb730	; 0xb730 <__prologue_saves__+0x2>
    a246:	8b 83       	std	Y+3, r24	; 0x03
    a248:	9c 83       	std	Y+4, r25	; 0x04
    a24a:	16 2f       	mov	r17, r22
    a24c:	07 2f       	mov	r16, r23
    a24e:	3a 01       	movw	r6, r20
    a250:	29 83       	std	Y+1, r18	; 0x01
    a252:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    a254:	d9 01       	movw	r26, r18
    a256:	1d 92       	st	X+, r1
    a258:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    a25a:	fc 01       	movw	r30, r24
    a25c:	62 81       	ldd	r22, Z+2	; 0x02
    a25e:	73 81       	ldd	r23, Z+3	; 0x03
    a260:	80 81       	ld	r24, Z
    a262:	91 81       	ldd	r25, Z+1	; 0x01
    a264:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <validate>
    a268:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a26a:	00 97       	sbiw	r24, 0x00	; 0
    a26c:	09 f0       	breq	.+2      	; 0xa270 <f_read+0x36>
    a26e:	8a c1       	rjmp	.+788    	; 0xa584 <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    a270:	ab 81       	ldd	r26, Y+3	; 0x03
    a272:	bc 81       	ldd	r27, Y+4	; 0x04
    a274:	14 96       	adiw	r26, 0x04	; 4
    a276:	8c 91       	ld	r24, X
    a278:	87 fd       	sbrc	r24, 7
    a27a:	60 c0       	rjmp	.+192    	; 0xa33c <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    a27c:	80 fd       	sbrc	r24, 0
    a27e:	04 c0       	rjmp	.+8      	; 0xa288 <f_read+0x4e>
    a280:	97 e0       	ldi	r25, 0x07	; 7
    a282:	89 2e       	mov	r8, r25
    a284:	91 2c       	mov	r9, r1
    a286:	7e c1       	rjmp	.+764    	; 0xa584 <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    a288:	eb 81       	ldd	r30, Y+3	; 0x03
    a28a:	fc 81       	ldd	r31, Y+4	; 0x04
    a28c:	22 85       	ldd	r18, Z+10	; 0x0a
    a28e:	33 85       	ldd	r19, Z+11	; 0x0b
    a290:	44 85       	ldd	r20, Z+12	; 0x0c
    a292:	55 85       	ldd	r21, Z+13	; 0x0d
    a294:	86 81       	ldd	r24, Z+6	; 0x06
    a296:	97 81       	ldd	r25, Z+7	; 0x07
    a298:	a0 85       	ldd	r26, Z+8	; 0x08
    a29a:	b1 85       	ldd	r27, Z+9	; 0x09
    a29c:	28 1b       	sub	r18, r24
    a29e:	39 0b       	sbc	r19, r25
    a2a0:	4a 0b       	sbc	r20, r26
    a2a2:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    a2a4:	c3 01       	movw	r24, r6
    a2a6:	a0 e0       	ldi	r26, 0x00	; 0
    a2a8:	b0 e0       	ldi	r27, 0x00	; 0
    a2aa:	28 17       	cp	r18, r24
    a2ac:	39 07       	cpc	r19, r25
    a2ae:	4a 07       	cpc	r20, r26
    a2b0:	5b 07       	cpc	r21, r27
    a2b2:	08 f4       	brcc	.+2      	; 0xa2b6 <f_read+0x7c>
    a2b4:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    a2b6:	81 2f       	mov	r24, r17
    a2b8:	90 2f       	mov	r25, r16
    a2ba:	9c 01       	movw	r18, r24
    a2bc:	29 01       	movw	r4, r18
    a2be:	5e c1       	rjmp	.+700    	; 0xa57c <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    a2c0:	ab 81       	ldd	r26, Y+3	; 0x03
    a2c2:	bc 81       	ldd	r27, Y+4	; 0x04
    a2c4:	16 96       	adiw	r26, 0x06	; 6
    a2c6:	2d 91       	ld	r18, X+
    a2c8:	3d 91       	ld	r19, X+
    a2ca:	4d 91       	ld	r20, X+
    a2cc:	5c 91       	ld	r21, X
    a2ce:	19 97       	sbiw	r26, 0x09	; 9
    a2d0:	da 01       	movw	r26, r20
    a2d2:	c9 01       	movw	r24, r18
    a2d4:	91 70       	andi	r25, 0x01	; 1
    a2d6:	a0 70       	andi	r26, 0x00	; 0
    a2d8:	b0 70       	andi	r27, 0x00	; 0
    a2da:	00 97       	sbiw	r24, 0x00	; 0
    a2dc:	a1 05       	cpc	r26, r1
    a2de:	b1 05       	cpc	r27, r1
    a2e0:	09 f0       	breq	.+2      	; 0xa2e4 <f_read+0xaa>
    a2e2:	ef c0       	rjmp	.+478    	; 0xa4c2 <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    a2e4:	ab 81       	ldd	r26, Y+3	; 0x03
    a2e6:	bc 81       	ldd	r27, Y+4	; 0x04
    a2e8:	ed 91       	ld	r30, X+
    a2ea:	fc 91       	ld	r31, X
    a2ec:	11 97       	sbiw	r26, 0x01	; 1
    a2ee:	15 96       	adiw	r26, 0x05	; 5
    a2f0:	9c 91       	ld	r25, X
    a2f2:	15 97       	sbiw	r26, 0x05	; 5
    a2f4:	82 81       	ldd	r24, Z+2	; 0x02
    a2f6:	98 17       	cp	r25, r24
    a2f8:	e8 f1       	brcs	.+122    	; 0xa374 <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    a2fa:	21 15       	cp	r18, r1
    a2fc:	31 05       	cpc	r19, r1
    a2fe:	41 05       	cpc	r20, r1
    a300:	51 05       	cpc	r21, r1
    a302:	39 f4       	brne	.+14     	; 0xa312 <f_read+0xd8>
    a304:	1e 96       	adiw	r26, 0x0e	; 14
    a306:	6d 91       	ld	r22, X+
    a308:	7d 91       	ld	r23, X+
    a30a:	8d 91       	ld	r24, X+
    a30c:	9c 91       	ld	r25, X
    a30e:	51 97       	sbiw	r26, 0x11	; 17
    a310:	0b c0       	rjmp	.+22     	; 0xa328 <f_read+0xee>
    a312:	ab 81       	ldd	r26, Y+3	; 0x03
    a314:	bc 81       	ldd	r27, Y+4	; 0x04
    a316:	52 96       	adiw	r26, 0x12	; 18
    a318:	4d 91       	ld	r20, X+
    a31a:	5d 91       	ld	r21, X+
    a31c:	6d 91       	ld	r22, X+
    a31e:	7c 91       	ld	r23, X
    a320:	55 97       	sbiw	r26, 0x15	; 21
    a322:	cf 01       	movw	r24, r30
    a324:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    a328:	62 30       	cpi	r22, 0x02	; 2
    a32a:	71 05       	cpc	r23, r1
    a32c:	81 05       	cpc	r24, r1
    a32e:	91 05       	cpc	r25, r1
    a330:	48 f4       	brcc	.+18     	; 0xa344 <f_read+0x10a>
    a332:	eb 81       	ldd	r30, Y+3	; 0x03
    a334:	fc 81       	ldd	r31, Y+4	; 0x04
    a336:	84 81       	ldd	r24, Z+4	; 0x04
    a338:	80 68       	ori	r24, 0x80	; 128
    a33a:	84 83       	std	Z+4, r24	; 0x04
    a33c:	82 e0       	ldi	r24, 0x02	; 2
    a33e:	88 2e       	mov	r8, r24
    a340:	91 2c       	mov	r9, r1
    a342:	20 c1       	rjmp	.+576    	; 0xa584 <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a344:	6f 3f       	cpi	r22, 0xFF	; 255
    a346:	ff ef       	ldi	r31, 0xFF	; 255
    a348:	7f 07       	cpc	r23, r31
    a34a:	ff ef       	ldi	r31, 0xFF	; 255
    a34c:	8f 07       	cpc	r24, r31
    a34e:	ff ef       	ldi	r31, 0xFF	; 255
    a350:	9f 07       	cpc	r25, r31
    a352:	49 f4       	brne	.+18     	; 0xa366 <f_read+0x12c>
    a354:	ab 81       	ldd	r26, Y+3	; 0x03
    a356:	bc 81       	ldd	r27, Y+4	; 0x04
    a358:	14 96       	adiw	r26, 0x04	; 4
    a35a:	8c 91       	ld	r24, X
    a35c:	14 97       	sbiw	r26, 0x04	; 4
    a35e:	80 68       	ori	r24, 0x80	; 128
    a360:	14 96       	adiw	r26, 0x04	; 4
    a362:	8c 93       	st	X, r24
    a364:	c7 c0       	rjmp	.+398    	; 0xa4f4 <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    a366:	eb 81       	ldd	r30, Y+3	; 0x03
    a368:	fc 81       	ldd	r31, Y+4	; 0x04
    a36a:	62 8b       	std	Z+18, r22	; 0x12
    a36c:	73 8b       	std	Z+19, r23	; 0x13
    a36e:	84 8b       	std	Z+20, r24	; 0x14
    a370:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    a372:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    a374:	ab 81       	ldd	r26, Y+3	; 0x03
    a376:	bc 81       	ldd	r27, Y+4	; 0x04
    a378:	0d 91       	ld	r16, X+
    a37a:	1c 91       	ld	r17, X
    a37c:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    a37e:	52 96       	adiw	r26, 0x12	; 18
    a380:	2d 91       	ld	r18, X+
    a382:	3d 91       	ld	r19, X+
    a384:	4d 91       	ld	r20, X+
    a386:	5c 91       	ld	r21, X
    a388:	55 97       	sbiw	r26, 0x15	; 21
    a38a:	22 50       	subi	r18, 0x02	; 2
    a38c:	30 40       	sbci	r19, 0x00	; 0
    a38e:	40 40       	sbci	r20, 0x00	; 0
    a390:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    a392:	f8 01       	movw	r30, r16
    a394:	86 8d       	ldd	r24, Z+30	; 0x1e
    a396:	97 8d       	ldd	r25, Z+31	; 0x1f
    a398:	a0 a1       	ldd	r26, Z+32	; 0x20
    a39a:	b1 a1       	ldd	r27, Z+33	; 0x21
    a39c:	02 97       	sbiw	r24, 0x02	; 2
    a39e:	a1 09       	sbc	r26, r1
    a3a0:	b1 09       	sbc	r27, r1
    a3a2:	28 17       	cp	r18, r24
    a3a4:	39 07       	cpc	r19, r25
    a3a6:	4a 07       	cpc	r20, r26
    a3a8:	5b 07       	cpc	r21, r27
    a3aa:	b8 f4       	brcc	.+46     	; 0xa3da <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    a3ac:	32 80       	ldd	r3, Z+2	; 0x02
    a3ae:	63 2d       	mov	r22, r3
    a3b0:	70 e0       	ldi	r23, 0x00	; 0
    a3b2:	80 e0       	ldi	r24, 0x00	; 0
    a3b4:	90 e0       	ldi	r25, 0x00	; 0
    a3b6:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    a3ba:	9b 01       	movw	r18, r22
    a3bc:	ac 01       	movw	r20, r24
    a3be:	f8 01       	movw	r30, r16
    a3c0:	82 a5       	ldd	r24, Z+42	; 0x2a
    a3c2:	93 a5       	ldd	r25, Z+43	; 0x2b
    a3c4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    a3c6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    a3c8:	28 0f       	add	r18, r24
    a3ca:	39 1f       	adc	r19, r25
    a3cc:	4a 1f       	adc	r20, r26
    a3ce:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a3d0:	21 15       	cp	r18, r1
    a3d2:	31 05       	cpc	r19, r1
    a3d4:	41 05       	cpc	r20, r1
    a3d6:	51 05       	cpc	r21, r1
    a3d8:	49 f4       	brne	.+18     	; 0xa3ec <f_read+0x1b2>
    a3da:	ab 81       	ldd	r26, Y+3	; 0x03
    a3dc:	bc 81       	ldd	r27, Y+4	; 0x04
    a3de:	14 96       	adiw	r26, 0x04	; 4
    a3e0:	8c 91       	ld	r24, X
    a3e2:	14 97       	sbiw	r26, 0x04	; 4
    a3e4:	80 68       	ori	r24, 0x80	; 128
    a3e6:	14 96       	adiw	r26, 0x04	; 4
    a3e8:	8c 93       	st	X, r24
    a3ea:	a8 cf       	rjmp	.-176    	; 0xa33c <f_read+0x102>
			sect += fp->csect;
    a3ec:	eb 81       	ldd	r30, Y+3	; 0x03
    a3ee:	fc 81       	ldd	r31, Y+4	; 0x04
    a3f0:	85 81       	ldd	r24, Z+5	; 0x05
    a3f2:	69 01       	movw	r12, r18
    a3f4:	7a 01       	movw	r14, r20
    a3f6:	c8 0e       	add	r12, r24
    a3f8:	d1 1c       	adc	r13, r1
    a3fa:	e1 1c       	adc	r14, r1
    a3fc:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    a3fe:	53 01       	movw	r10, r6
    a400:	ab 2c       	mov	r10, r11
    a402:	bb 24       	eor	r11, r11
    a404:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    a406:	a1 14       	cp	r10, r1
    a408:	b1 04       	cpc	r11, r1
    a40a:	09 f4       	brne	.+2      	; 0xa40e <f_read+0x1d4>
    a40c:	52 c0       	rjmp	.+164    	; 0xa4b2 <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a40e:	28 2f       	mov	r18, r24
    a410:	30 e0       	ldi	r19, 0x00	; 0
    a412:	c5 01       	movw	r24, r10
    a414:	82 0f       	add	r24, r18
    a416:	93 1f       	adc	r25, r19
    a418:	63 2d       	mov	r22, r3
    a41a:	70 e0       	ldi	r23, 0x00	; 0
    a41c:	68 17       	cp	r22, r24
    a41e:	79 07       	cpc	r23, r25
    a420:	18 f4       	brcc	.+6      	; 0xa428 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    a422:	5b 01       	movw	r10, r22
    a424:	a2 1a       	sub	r10, r18
    a426:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    a428:	d8 01       	movw	r26, r16
    a42a:	11 96       	adiw	r26, 0x01	; 1
    a42c:	8c 91       	ld	r24, X
    a42e:	b2 01       	movw	r22, r4
    a430:	a7 01       	movw	r20, r14
    a432:	96 01       	movw	r18, r12
    a434:	0a 2d       	mov	r16, r10
    a436:	0e 94 81 54 	call	0xa902	; 0xa902 <disk_read>
    a43a:	89 2b       	or	r24, r25
    a43c:	09 f0       	breq	.+2      	; 0xa440 <f_read+0x206>
    a43e:	55 c0       	rjmp	.+170    	; 0xa4ea <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    a440:	ab 81       	ldd	r26, Y+3	; 0x03
    a442:	bc 81       	ldd	r27, Y+4	; 0x04
    a444:	6d 91       	ld	r22, X+
    a446:	7c 91       	ld	r23, X
    a448:	fb 01       	movw	r30, r22
    a44a:	84 81       	ldd	r24, Z+4	; 0x04
    a44c:	88 23       	and	r24, r24
    a44e:	21 f1       	breq	.+72     	; 0xa498 <f_read+0x25e>
    a450:	26 a5       	ldd	r18, Z+46	; 0x2e
    a452:	37 a5       	ldd	r19, Z+47	; 0x2f
    a454:	40 a9       	ldd	r20, Z+48	; 0x30
    a456:	51 a9       	ldd	r21, Z+49	; 0x31
    a458:	2c 19       	sub	r18, r12
    a45a:	3d 09       	sbc	r19, r13
    a45c:	4e 09       	sbc	r20, r14
    a45e:	5f 09       	sbc	r21, r15
    a460:	c5 01       	movw	r24, r10
    a462:	a0 e0       	ldi	r26, 0x00	; 0
    a464:	b0 e0       	ldi	r27, 0x00	; 0
    a466:	28 17       	cp	r18, r24
    a468:	39 07       	cpc	r19, r25
    a46a:	4a 07       	cpc	r20, r26
    a46c:	5b 07       	cpc	r21, r27
    a46e:	a0 f4       	brcc	.+40     	; 0xa498 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    a470:	a9 e0       	ldi	r26, 0x09	; 9
    a472:	22 0f       	add	r18, r18
    a474:	33 1f       	adc	r19, r19
    a476:	44 1f       	adc	r20, r20
    a478:	55 1f       	adc	r21, r21
    a47a:	aa 95       	dec	r26
    a47c:	d1 f7       	brne	.-12     	; 0xa472 <f_read+0x238>
    a47e:	d2 01       	movw	r26, r4
    a480:	a2 0f       	add	r26, r18
    a482:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    a484:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    a486:	9b 01       	movw	r18, r22
    a488:	2e 5c       	subi	r18, 0xCE	; 206
    a48a:	3d 4f       	sbci	r19, 0xFD	; 253
    a48c:	02 c0       	rjmp	.+4      	; 0xa492 <f_read+0x258>
    a48e:	81 91       	ld	r24, Z+
    a490:	8d 93       	st	X+, r24
    a492:	e2 17       	cp	r30, r18
    a494:	f3 07       	cpc	r31, r19
    a496:	d9 f7       	brne	.-10     	; 0xa48e <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    a498:	ab 81       	ldd	r26, Y+3	; 0x03
    a49a:	bc 81       	ldd	r27, Y+4	; 0x04
    a49c:	15 96       	adiw	r26, 0x05	; 5
    a49e:	8c 91       	ld	r24, X
    a4a0:	15 97       	sbiw	r26, 0x05	; 5
    a4a2:	8a 0d       	add	r24, r10
    a4a4:	15 96       	adiw	r26, 0x05	; 5
    a4a6:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    a4a8:	b5 01       	movw	r22, r10
    a4aa:	76 2f       	mov	r23, r22
    a4ac:	66 27       	eor	r22, r22
    a4ae:	77 0f       	add	r23, r23
    a4b0:	48 c0       	rjmp	.+144    	; 0xa542 <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a4b2:	eb 81       	ldd	r30, Y+3	; 0x03
    a4b4:	fc 81       	ldd	r31, Y+4	; 0x04
    a4b6:	c6 8a       	std	Z+22, r12	; 0x16
    a4b8:	d7 8a       	std	Z+23, r13	; 0x17
    a4ba:	e0 8e       	std	Z+24, r14	; 0x18
    a4bc:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    a4be:	8f 5f       	subi	r24, 0xFF	; 255
    a4c0:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a4c2:	ab 81       	ldd	r26, Y+3	; 0x03
    a4c4:	bc 81       	ldd	r27, Y+4	; 0x04
    a4c6:	16 96       	adiw	r26, 0x06	; 6
    a4c8:	cd 90       	ld	r12, X+
    a4ca:	dd 90       	ld	r13, X+
    a4cc:	ed 90       	ld	r14, X+
    a4ce:	fc 90       	ld	r15, X
    a4d0:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    a4d2:	56 96       	adiw	r26, 0x16	; 22
    a4d4:	4d 91       	ld	r20, X+
    a4d6:	5d 91       	ld	r21, X+
    a4d8:	6d 91       	ld	r22, X+
    a4da:	7c 91       	ld	r23, X
    a4dc:	59 97       	sbiw	r26, 0x19	; 25
    a4de:	8d 91       	ld	r24, X+
    a4e0:	9c 91       	ld	r25, X
    a4e2:	0e 94 ff 3b 	call	0x77fe	; 0x77fe <move_window>
    a4e6:	89 2b       	or	r24, r25
    a4e8:	49 f0       	breq	.+18     	; 0xa4fc <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    a4ea:	eb 81       	ldd	r30, Y+3	; 0x03
    a4ec:	fc 81       	ldd	r31, Y+4	; 0x04
    a4ee:	84 81       	ldd	r24, Z+4	; 0x04
    a4f0:	80 68       	ori	r24, 0x80	; 128
    a4f2:	84 83       	std	Z+4, r24	; 0x04
    a4f4:	81 e0       	ldi	r24, 0x01	; 1
    a4f6:	88 2e       	mov	r8, r24
    a4f8:	91 2c       	mov	r9, r1
    a4fa:	44 c0       	rjmp	.+136    	; 0xa584 <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a4fc:	c6 01       	movw	r24, r12
    a4fe:	91 70       	andi	r25, 0x01	; 1
    a500:	20 e0       	ldi	r18, 0x00	; 0
    a502:	32 e0       	ldi	r19, 0x02	; 2
    a504:	28 1b       	sub	r18, r24
    a506:	39 0b       	sbc	r19, r25
    a508:	b3 01       	movw	r22, r6
    a50a:	26 15       	cp	r18, r6
    a50c:	37 05       	cpc	r19, r7
    a50e:	08 f4       	brcc	.+2      	; 0xa512 <f_read+0x2d8>
    a510:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    a512:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    a514:	ab 81       	ldd	r26, Y+3	; 0x03
    a516:	bc 81       	ldd	r27, Y+4	; 0x04
    a518:	16 96       	adiw	r26, 0x06	; 6
    a51a:	8d 91       	ld	r24, X+
    a51c:	9c 91       	ld	r25, X
    a51e:	17 97       	sbiw	r26, 0x07	; 7
    a520:	91 70       	andi	r25, 0x01	; 1
    a522:	c2 96       	adiw	r24, 0x32	; 50
    a524:	ed 91       	ld	r30, X+
    a526:	fc 91       	ld	r31, X
    a528:	e8 0f       	add	r30, r24
    a52a:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    a52c:	9f 01       	movw	r18, r30
    a52e:	26 0f       	add	r18, r22
    a530:	37 1f       	adc	r19, r23
    a532:	04 c0       	rjmp	.+8      	; 0xa53c <f_read+0x302>
    a534:	81 91       	ld	r24, Z+
    a536:	da 01       	movw	r26, r20
    a538:	8d 93       	st	X+, r24
    a53a:	ad 01       	movw	r20, r26
    a53c:	e2 17       	cp	r30, r18
    a53e:	f3 07       	cpc	r31, r19
    a540:	c9 f7       	brne	.-14     	; 0xa534 <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a542:	46 0e       	add	r4, r22
    a544:	57 1e       	adc	r5, r23
    a546:	cb 01       	movw	r24, r22
    a548:	a0 e0       	ldi	r26, 0x00	; 0
    a54a:	b0 e0       	ldi	r27, 0x00	; 0
    a54c:	eb 81       	ldd	r30, Y+3	; 0x03
    a54e:	fc 81       	ldd	r31, Y+4	; 0x04
    a550:	26 81       	ldd	r18, Z+6	; 0x06
    a552:	37 81       	ldd	r19, Z+7	; 0x07
    a554:	40 85       	ldd	r20, Z+8	; 0x08
    a556:	51 85       	ldd	r21, Z+9	; 0x09
    a558:	28 0f       	add	r18, r24
    a55a:	39 1f       	adc	r19, r25
    a55c:	4a 1f       	adc	r20, r26
    a55e:	5b 1f       	adc	r21, r27
    a560:	26 83       	std	Z+6, r18	; 0x06
    a562:	37 83       	std	Z+7, r19	; 0x07
    a564:	40 87       	std	Z+8, r20	; 0x08
    a566:	51 87       	std	Z+9, r21	; 0x09
    a568:	e9 81       	ldd	r30, Y+1	; 0x01
    a56a:	fa 81       	ldd	r31, Y+2	; 0x02
    a56c:	80 81       	ld	r24, Z
    a56e:	91 81       	ldd	r25, Z+1	; 0x01
    a570:	86 0f       	add	r24, r22
    a572:	97 1f       	adc	r25, r23
    a574:	80 83       	st	Z, r24
    a576:	91 83       	std	Z+1, r25	; 0x01
    a578:	66 1a       	sub	r6, r22
    a57a:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    a57c:	61 14       	cp	r6, r1
    a57e:	71 04       	cpc	r7, r1
    a580:	09 f0       	breq	.+2      	; 0xa584 <f_read+0x34a>
    a582:	9e ce       	rjmp	.-708    	; 0xa2c0 <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    a584:	c4 01       	movw	r24, r8
    a586:	24 96       	adiw	r28, 0x04	; 4
    a588:	e1 e1       	ldi	r30, 0x11	; 17
    a58a:	0c 94 b4 5b 	jmp	0xb768	; 0xb768 <__epilogue_restores__+0x2>

0000a58e <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    a58e:	a2 e0       	ldi	r26, 0x02	; 2
    a590:	b0 e0       	ldi	r27, 0x00	; 0
    a592:	ed ec       	ldi	r30, 0xCD	; 205
    a594:	f2 e5       	ldi	r31, 0x52	; 82
    a596:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <__prologue_saves__+0x8>
    a59a:	6c 01       	movw	r12, r24
    a59c:	5b 01       	movw	r10, r22
    a59e:	4a 01       	movw	r8, r20
    a5a0:	8c 01       	movw	r16, r24
    a5a2:	ee 24       	eor	r14, r14
    a5a4:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    a5a6:	08 94       	sec
    a5a8:	a1 08       	sbc	r10, r1
    a5aa:	b1 08       	sbc	r11, r1
		f_read(fil, p, 1, &rc);
    a5ac:	3e 01       	movw	r6, r28
    a5ae:	08 94       	sec
    a5b0:	61 1c       	adc	r6, r1
    a5b2:	71 1c       	adc	r7, r1
    a5b4:	16 c0       	rjmp	.+44     	; 0xa5e2 <f_gets+0x54>
    a5b6:	c4 01       	movw	r24, r8
    a5b8:	b8 01       	movw	r22, r16
    a5ba:	41 e0       	ldi	r20, 0x01	; 1
    a5bc:	50 e0       	ldi	r21, 0x00	; 0
    a5be:	93 01       	movw	r18, r6
    a5c0:	0e 94 1d 51 	call	0xa23a	; 0xa23a <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    a5c4:	89 81       	ldd	r24, Y+1	; 0x01
    a5c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a5c8:	01 97       	sbiw	r24, 0x01	; 1
    a5ca:	71 f4       	brne	.+28     	; 0xa5e8 <f_gets+0x5a>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
    a5cc:	f8 01       	movw	r30, r16
    a5ce:	80 81       	ld	r24, Z
    a5d0:	8d 30       	cpi	r24, 0x0D	; 13
    a5d2:	39 f0       	breq	.+14     	; 0xa5e2 <f_gets+0x54>
#endif
		i++;
    a5d4:	08 94       	sec
    a5d6:	e1 1c       	adc	r14, r1
    a5d8:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    a5da:	0f 5f       	subi	r16, 0xFF	; 255
    a5dc:	1f 4f       	sbci	r17, 0xFF	; 255
    a5de:	8a 30       	cpi	r24, 0x0A	; 10
    a5e0:	19 f0       	breq	.+6      	; 0xa5e8 <f_gets+0x5a>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    a5e2:	ea 14       	cp	r14, r10
    a5e4:	fb 04       	cpc	r15, r11
    a5e6:	3c f3       	brlt	.-50     	; 0xa5b6 <f_gets+0x28>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    a5e8:	f8 01       	movw	r30, r16
    a5ea:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    a5ec:	e1 14       	cp	r14, r1
    a5ee:	f1 04       	cpc	r15, r1
    a5f0:	11 f4       	brne	.+4      	; 0xa5f6 <f_gets+0x68>
    a5f2:	cc 24       	eor	r12, r12
    a5f4:	dd 24       	eor	r13, r13
}
    a5f6:	c6 01       	movw	r24, r12
    a5f8:	22 96       	adiw	r28, 0x02	; 2
    a5fa:	ee e0       	ldi	r30, 0x0E	; 14
    a5fc:	0c 94 b7 5b 	jmp	0xb76e	; 0xb76e <__epilogue_restores__+0x8>

0000a600 <wait_ready>:
BYTE wait_ready (void)
{
  BYTE res;


  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
    a600:	82 e3       	ldi	r24, 0x32	; 50
    a602:	80 93 73 25 	sts	0x2573, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a606:	8f ef       	ldi	r24, 0xFF	; 255
    a608:	e0 ec       	ldi	r30, 0xC0	; 192
    a60a:	fa e0       	ldi	r31, 0x0A	; 10
    a60c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a60e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a612:	87 ff       	sbrs	r24, 7
    a614:	fc cf       	rjmp	.-8      	; 0xa60e <wait_ready+0xe>
  return SPIE.DATA;
    a616:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a61a:	e0 ec       	ldi	r30, 0xC0	; 192
    a61c:	fa e0       	ldi	r31, 0x0A	; 10
    a61e:	2f ef       	ldi	r18, 0xFF	; 255
    a620:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a622:	80 91 c2 0a 	lds	r24, 0x0AC2
    a626:	87 ff       	sbrs	r24, 7
    a628:	fc cf       	rjmp	.-8      	; 0xa622 <wait_ready+0x22>
  return SPIE.DATA;
    a62a:	90 91 c3 0a 	lds	r25, 0x0AC3

  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
  rcvr_spi();
  do
    res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
    a62e:	9f 3f       	cpi	r25, 0xFF	; 255
    a630:	21 f0       	breq	.+8      	; 0xa63a <wait_ready+0x3a>
    a632:	80 91 73 25 	lds	r24, 0x2573
    a636:	88 23       	and	r24, r24
    a638:	99 f7       	brne	.-26     	; 0xa620 <wait_ready+0x20>

  return res;
}
    a63a:	89 2f       	mov	r24, r25
    a63c:	08 95       	ret

0000a63e <power_off>:
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
}

static
void power_off (void)
{
    a63e:	ff 92       	push	r15
    a640:	0f 93       	push	r16
    a642:	1f 93       	push	r17
  SELECT();        /* Wait for card ready */
    a644:	00 e8       	ldi	r16, 0x80	; 128
    a646:	16 e0       	ldi	r17, 0x06	; 6
    a648:	80 e1       	ldi	r24, 0x10	; 16
    a64a:	f8 2e       	mov	r15, r24
    a64c:	f8 01       	movw	r30, r16
    a64e:	f6 82       	std	Z+6, r15	; 0x06
  wait_ready();
    a650:	0e 94 00 53 	call	0xa600	; 0xa600 <wait_ready>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a654:	f8 01       	movw	r30, r16
    a656:	f5 82       	std	Z+5, r15	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a658:	8f ef       	ldi	r24, 0xFF	; 255
    a65a:	e0 ec       	ldi	r30, 0xC0	; 192
    a65c:	fa e0       	ldi	r31, 0x0A	; 10
    a65e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a660:	80 91 c2 0a 	lds	r24, 0x0AC2
    a664:	87 ff       	sbrs	r24, 7
    a666:	fc cf       	rjmp	.-8      	; 0xa660 <power_off+0x22>
  return SPIE.DATA;
    a668:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  SELECT();        /* Wait for card ready */
  wait_ready();
  release_spi();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    a66c:	80 91 e0 24 	lds	r24, 0x24E0
    a670:	81 60       	ori	r24, 0x01	; 1
    a672:	80 93 e0 24 	sts	0x24E0, r24
}
    a676:	1f 91       	pop	r17
    a678:	0f 91       	pop	r16
    a67a:	ff 90       	pop	r15
    a67c:	08 95       	ret

0000a67e <rcvr_datablock>:
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a67e:	fc 01       	movw	r30, r24
  BYTE token;


  Timer1 = 20;
    a680:	84 e1       	ldi	r24, 0x14	; 20
    a682:	80 93 72 25 	sts	0x2572, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a686:	a0 ec       	ldi	r26, 0xC0	; 192
    a688:	ba e0       	ldi	r27, 0x0A	; 10
    a68a:	9f ef       	ldi	r25, 0xFF	; 255
    a68c:	13 96       	adiw	r26, 0x03	; 3
    a68e:	9c 93       	st	X, r25
    a690:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a692:	80 91 c2 0a 	lds	r24, 0x0AC2
    a696:	87 ff       	sbrs	r24, 7
    a698:	fc cf       	rjmp	.-8      	; 0xa692 <rcvr_datablock+0x14>
  return SPIE.DATA;
    a69a:	80 91 c3 0a 	lds	r24, 0x0AC3


  Timer1 = 20;
  do {              /* Wait for data packet in timeout of 200ms */
    token = rcvr_spi();
  } while ((token == 0xFF) && Timer1);
    a69e:	8f 3f       	cpi	r24, 0xFF	; 255
    a6a0:	29 f4       	brne	.+10     	; 0xa6ac <rcvr_datablock+0x2e>
    a6a2:	80 91 72 25 	lds	r24, 0x2572
    a6a6:	88 23       	and	r24, r24
    a6a8:	89 f7       	brne	.-30     	; 0xa68c <rcvr_datablock+0xe>
    a6aa:	4a c0       	rjmp	.+148    	; 0xa740 <rcvr_datablock+0xc2>
  if(token != 0xFE) return FALSE;  /* If not valid data token, retutn with error */
    a6ac:	8e 3f       	cpi	r24, 0xFE	; 254
    a6ae:	09 f0       	breq	.+2      	; 0xa6b2 <rcvr_datablock+0x34>
    a6b0:	47 c0       	rjmp	.+142    	; 0xa740 <rcvr_datablock+0xc2>

  do {              /* Receive the data block into buffer */
    rcvr_spi_m(buff++);
    a6b2:	a0 ec       	ldi	r26, 0xC0	; 192
    a6b4:	ba e0       	ldi	r27, 0x0A	; 10
    a6b6:	9f ef       	ldi	r25, 0xFF	; 255
    a6b8:	13 96       	adiw	r26, 0x03	; 3
    a6ba:	9c 93       	st	X, r25
    a6bc:	13 97       	sbiw	r26, 0x03	; 3
    a6be:	80 91 c2 0a 	lds	r24, 0x0AC2
    a6c2:	87 ff       	sbrs	r24, 7
    a6c4:	fc cf       	rjmp	.-8      	; 0xa6be <rcvr_datablock+0x40>
    a6c6:	80 91 c3 0a 	lds	r24, 0x0AC3
    a6ca:	80 83       	st	Z, r24
    rcvr_spi_m(buff++);
    a6cc:	13 96       	adiw	r26, 0x03	; 3
    a6ce:	9c 93       	st	X, r25
    a6d0:	13 97       	sbiw	r26, 0x03	; 3
    a6d2:	80 91 c2 0a 	lds	r24, 0x0AC2
    a6d6:	87 ff       	sbrs	r24, 7
    a6d8:	fc cf       	rjmp	.-8      	; 0xa6d2 <rcvr_datablock+0x54>
    a6da:	80 91 c3 0a 	lds	r24, 0x0AC3
    a6de:	81 83       	std	Z+1, r24	; 0x01
    rcvr_spi_m(buff++);
    a6e0:	13 96       	adiw	r26, 0x03	; 3
    a6e2:	9c 93       	st	X, r25
    a6e4:	13 97       	sbiw	r26, 0x03	; 3
    a6e6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a6ea:	87 ff       	sbrs	r24, 7
    a6ec:	fc cf       	rjmp	.-8      	; 0xa6e6 <rcvr_datablock+0x68>
    a6ee:	80 91 c3 0a 	lds	r24, 0x0AC3
    a6f2:	82 83       	std	Z+2, r24	; 0x02
    rcvr_spi_m(buff++);
    a6f4:	13 96       	adiw	r26, 0x03	; 3
    a6f6:	9c 93       	st	X, r25
    a6f8:	13 97       	sbiw	r26, 0x03	; 3
    a6fa:	80 91 c2 0a 	lds	r24, 0x0AC2
    a6fe:	87 ff       	sbrs	r24, 7
    a700:	fc cf       	rjmp	.-8      	; 0xa6fa <rcvr_datablock+0x7c>
    a702:	80 91 c3 0a 	lds	r24, 0x0AC3
    a706:	83 83       	std	Z+3, r24	; 0x03
  } while (btr -= 4);
    a708:	64 50       	subi	r22, 0x04	; 4
    a70a:	70 40       	sbci	r23, 0x00	; 0
    a70c:	11 f0       	breq	.+4      	; 0xa712 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a70e:	34 96       	adiw	r30, 0x04	; 4
    a710:	d3 cf       	rjmp	.-90     	; 0xa6b8 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a712:	8f ef       	ldi	r24, 0xFF	; 255
    a714:	e0 ec       	ldi	r30, 0xC0	; 192
    a716:	fa e0       	ldi	r31, 0x0A	; 10
    a718:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a71a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a71e:	87 ff       	sbrs	r24, 7
    a720:	fc cf       	rjmp	.-8      	; 0xa71a <rcvr_datablock+0x9c>
  return SPIE.DATA;
    a722:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a726:	8f ef       	ldi	r24, 0xFF	; 255
    a728:	e0 ec       	ldi	r30, 0xC0	; 192
    a72a:	fa e0       	ldi	r31, 0x0A	; 10
    a72c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a72e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a732:	87 ff       	sbrs	r24, 7
    a734:	fc cf       	rjmp	.-8      	; 0xa72e <rcvr_datablock+0xb0>
  return SPIE.DATA;
    a736:	80 91 c3 0a 	lds	r24, 0x0AC3
    a73a:	21 e0       	ldi	r18, 0x01	; 1
    a73c:	30 e0       	ldi	r19, 0x00	; 0
    a73e:	02 c0       	rjmp	.+4      	; 0xa744 <rcvr_datablock+0xc6>
    rcvr_spi_m(buff++);
  } while (btr -= 4);
  rcvr_spi();            /* Discard CRC */
  rcvr_spi();

  return TRUE;          /* Return with success */
    a740:	20 e0       	ldi	r18, 0x00	; 0
    a742:	30 e0       	ldi	r19, 0x00	; 0
}
    a744:	c9 01       	movw	r24, r18
    a746:	08 95       	ret

0000a748 <xmit_datablock>:
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a748:	1f 93       	push	r17
    a74a:	cf 93       	push	r28
    a74c:	df 93       	push	r29
    a74e:	ec 01       	movw	r28, r24
    a750:	16 2f       	mov	r17, r22
  BYTE resp, wc;


  if (wait_ready() != 0xFF) return FALSE;
    a752:	0e 94 00 53 	call	0xa600	; 0xa600 <wait_ready>
    a756:	8f 3f       	cpi	r24, 0xFF	; 255
    a758:	19 f0       	breq	.+6      	; 0xa760 <xmit_datablock+0x18>
    a75a:	20 e0       	ldi	r18, 0x00	; 0
    a75c:	30 e0       	ldi	r19, 0x00	; 0
    a75e:	42 c0       	rjmp	.+132    	; 0xa7e4 <xmit_datablock+0x9c>

  xmit_spi(token);          /* Xmit data token */
    a760:	e0 ec       	ldi	r30, 0xC0	; 192
    a762:	fa e0       	ldi	r31, 0x0A	; 10
    a764:	13 83       	std	Z+3, r17	; 0x03
    a766:	80 91 c2 0a 	lds	r24, 0x0AC2
    a76a:	87 ff       	sbrs	r24, 7
    a76c:	fc cf       	rjmp	.-8      	; 0xa766 <xmit_datablock+0x1e>
  if (token != 0xFD) {  /* Is data token */
    a76e:	1d 3f       	cpi	r17, 0xFD	; 253
    a770:	19 f4       	brne	.+6      	; 0xa778 <xmit_datablock+0x30>
    a772:	21 e0       	ldi	r18, 0x01	; 1
    a774:	30 e0       	ldi	r19, 0x00	; 0
    a776:	36 c0       	rjmp	.+108    	; 0xa7e4 <xmit_datablock+0x9c>
    a778:	90 e0       	ldi	r25, 0x00	; 0
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
    a77a:	e0 ec       	ldi	r30, 0xC0	; 192
    a77c:	fa e0       	ldi	r31, 0x0A	; 10
    a77e:	88 81       	ld	r24, Y
    a780:	83 83       	std	Z+3, r24	; 0x03
    a782:	80 91 c2 0a 	lds	r24, 0x0AC2
    a786:	87 ff       	sbrs	r24, 7
    a788:	fc cf       	rjmp	.-8      	; 0xa782 <xmit_datablock+0x3a>
      xmit_spi(*buff++);
    a78a:	89 81       	ldd	r24, Y+1	; 0x01
    a78c:	83 83       	std	Z+3, r24	; 0x03
    a78e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a792:	87 ff       	sbrs	r24, 7
    a794:	fc cf       	rjmp	.-8      	; 0xa78e <xmit_datablock+0x46>
    } while (--wc);
    a796:	91 50       	subi	r25, 0x01	; 1
    a798:	11 f0       	breq	.+4      	; 0xa79e <xmit_datablock+0x56>
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a79a:	22 96       	adiw	r28, 0x02	; 2
    a79c:	f0 cf       	rjmp	.-32     	; 0xa77e <xmit_datablock+0x36>
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
      xmit_spi(*buff++);
    } while (--wc);
    xmit_spi(0xFF);          /* CRC (Dummy) */
    a79e:	8f ef       	ldi	r24, 0xFF	; 255
    a7a0:	e0 ec       	ldi	r30, 0xC0	; 192
    a7a2:	fa e0       	ldi	r31, 0x0A	; 10
    a7a4:	83 83       	std	Z+3, r24	; 0x03
    a7a6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a7aa:	87 ff       	sbrs	r24, 7
    a7ac:	fc cf       	rjmp	.-8      	; 0xa7a6 <xmit_datablock+0x5e>
    xmit_spi(0xFF);
    a7ae:	8f ef       	ldi	r24, 0xFF	; 255
    a7b0:	e0 ec       	ldi	r30, 0xC0	; 192
    a7b2:	fa e0       	ldi	r31, 0x0A	; 10
    a7b4:	83 83       	std	Z+3, r24	; 0x03
    a7b6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a7ba:	87 ff       	sbrs	r24, 7
    a7bc:	fc cf       	rjmp	.-8      	; 0xa7b6 <xmit_datablock+0x6e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a7be:	8f ef       	ldi	r24, 0xFF	; 255
    a7c0:	e0 ec       	ldi	r30, 0xC0	; 192
    a7c2:	fa e0       	ldi	r31, 0x0A	; 10
    a7c4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a7c6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a7ca:	87 ff       	sbrs	r24, 7
    a7cc:	fc cf       	rjmp	.-8      	; 0xa7c6 <xmit_datablock+0x7e>
  return SPIE.DATA;
    a7ce:	80 91 c3 0a 	lds	r24, 0x0AC3
    a7d2:	90 e0       	ldi	r25, 0x00	; 0
    a7d4:	8f 71       	andi	r24, 0x1F	; 31
    a7d6:	85 30       	cpi	r24, 0x05	; 5
    a7d8:	09 f0       	breq	.+2      	; 0xa7dc <xmit_datablock+0x94>
    a7da:	91 e0       	ldi	r25, 0x01	; 1
    a7dc:	81 e0       	ldi	r24, 0x01	; 1
    a7de:	98 27       	eor	r25, r24
    a7e0:	29 2f       	mov	r18, r25
    a7e2:	30 e0       	ldi	r19, 0x00	; 0
    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
      return FALSE;
  }

  return TRUE;
}
    a7e4:	c9 01       	movw	r24, r18
    a7e6:	df 91       	pop	r29
    a7e8:	cf 91       	pop	r28
    a7ea:	1f 91       	pop	r17
    a7ec:	08 95       	ret

0000a7ee <send_cmd>:
static
BYTE send_cmd (
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    a7ee:	df 92       	push	r13
    a7f0:	ef 92       	push	r14
    a7f2:	ff 92       	push	r15
    a7f4:	0f 93       	push	r16
    a7f6:	1f 93       	push	r17
    a7f8:	d8 2e       	mov	r13, r24
    a7fa:	7a 01       	movw	r14, r20
    a7fc:	8b 01       	movw	r16, r22
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a7fe:	87 ff       	sbrs	r24, 7
    a800:	0c c0       	rjmp	.+24     	; 0xa81a <send_cmd+0x2c>
    cmd &= 0x7F;
    res = send_cmd(CMD55, 0);
    a802:	87 e7       	ldi	r24, 0x77	; 119
    a804:	40 e0       	ldi	r20, 0x00	; 0
    a806:	50 e0       	ldi	r21, 0x00	; 0
    a808:	60 e0       	ldi	r22, 0x00	; 0
    a80a:	70 e0       	ldi	r23, 0x00	; 0
    a80c:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    if (res > 1) return res;
    a810:	82 30       	cpi	r24, 0x02	; 2
    a812:	08 f0       	brcs	.+2      	; 0xa816 <send_cmd+0x28>
    a814:	69 c0       	rjmp	.+210    	; 0xa8e8 <send_cmd+0xfa>
{
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    a816:	8f e7       	ldi	r24, 0x7F	; 127
    a818:	d8 22       	and	r13, r24
    res = send_cmd(CMD55, 0);
    if (res > 1) return res;
  }

  /* Select the card and wait for ready */
  DESELECT();
    a81a:	e0 e8       	ldi	r30, 0x80	; 128
    a81c:	f6 e0       	ldi	r31, 0x06	; 6
    a81e:	80 e1       	ldi	r24, 0x10	; 16
    a820:	85 83       	std	Z+5, r24	; 0x05
  SELECT();
    a822:	86 83       	std	Z+6, r24	; 0x06
  if (wait_ready() != 0xFF) return 0xFF;
    a824:	0e 94 00 53 	call	0xa600	; 0xa600 <wait_ready>
    a828:	8f 3f       	cpi	r24, 0xFF	; 255
    a82a:	11 f0       	breq	.+4      	; 0xa830 <send_cmd+0x42>
    a82c:	8f ef       	ldi	r24, 0xFF	; 255
    a82e:	5c c0       	rjmp	.+184    	; 0xa8e8 <send_cmd+0xfa>

  /* Send command packet */
  xmit_spi(cmd);            /* Start + Command index */
    a830:	e0 ec       	ldi	r30, 0xC0	; 192
    a832:	fa e0       	ldi	r31, 0x0A	; 10
    a834:	d3 82       	std	Z+3, r13	; 0x03
    a836:	80 91 c2 0a 	lds	r24, 0x0AC2
    a83a:	87 ff       	sbrs	r24, 7
    a83c:	fc cf       	rjmp	.-8      	; 0xa836 <send_cmd+0x48>
  xmit_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
    a83e:	81 2f       	mov	r24, r17
    a840:	99 27       	eor	r25, r25
    a842:	aa 27       	eor	r26, r26
    a844:	bb 27       	eor	r27, r27
    a846:	e0 ec       	ldi	r30, 0xC0	; 192
    a848:	fa e0       	ldi	r31, 0x0A	; 10
    a84a:	83 83       	std	Z+3, r24	; 0x03
    a84c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a850:	87 ff       	sbrs	r24, 7
    a852:	fc cf       	rjmp	.-8      	; 0xa84c <send_cmd+0x5e>
  xmit_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
    a854:	c8 01       	movw	r24, r16
    a856:	aa 27       	eor	r26, r26
    a858:	bb 27       	eor	r27, r27
    a85a:	e0 ec       	ldi	r30, 0xC0	; 192
    a85c:	fa e0       	ldi	r31, 0x0A	; 10
    a85e:	83 83       	std	Z+3, r24	; 0x03
    a860:	80 91 c2 0a 	lds	r24, 0x0AC2
    a864:	87 ff       	sbrs	r24, 7
    a866:	fc cf       	rjmp	.-8      	; 0xa860 <send_cmd+0x72>
  xmit_spi((BYTE)(arg >> 8));      /* Argument[15..8] */
    a868:	bb 27       	eor	r27, r27
    a86a:	a1 2f       	mov	r26, r17
    a86c:	90 2f       	mov	r25, r16
    a86e:	8f 2d       	mov	r24, r15
    a870:	e0 ec       	ldi	r30, 0xC0	; 192
    a872:	fa e0       	ldi	r31, 0x0A	; 10
    a874:	83 83       	std	Z+3, r24	; 0x03
    a876:	80 91 c2 0a 	lds	r24, 0x0AC2
    a87a:	87 ff       	sbrs	r24, 7
    a87c:	fc cf       	rjmp	.-8      	; 0xa876 <send_cmd+0x88>
  xmit_spi((BYTE)arg);        /* Argument[7..0] */
    a87e:	e0 ec       	ldi	r30, 0xC0	; 192
    a880:	fa e0       	ldi	r31, 0x0A	; 10
    a882:	e3 82       	std	Z+3, r14	; 0x03
    a884:	80 91 c2 0a 	lds	r24, 0x0AC2
    a888:	87 ff       	sbrs	r24, 7
    a88a:	fc cf       	rjmp	.-8      	; 0xa884 <send_cmd+0x96>
  n = 0x01;              /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
    a88c:	80 e4       	ldi	r24, 0x40	; 64
    a88e:	d8 16       	cp	r13, r24
    a890:	11 f4       	brne	.+4      	; 0xa896 <send_cmd+0xa8>
    a892:	85 e9       	ldi	r24, 0x95	; 149
    a894:	06 c0       	rjmp	.+12     	; 0xa8a2 <send_cmd+0xb4>
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
    a896:	88 e4       	ldi	r24, 0x48	; 72
    a898:	d8 16       	cp	r13, r24
    a89a:	11 f4       	brne	.+4      	; 0xa8a0 <send_cmd+0xb2>
    a89c:	87 e8       	ldi	r24, 0x87	; 135
    a89e:	01 c0       	rjmp	.+2      	; 0xa8a2 <send_cmd+0xb4>
    a8a0:	81 e0       	ldi	r24, 0x01	; 1
  xmit_spi(n);
    a8a2:	e0 ec       	ldi	r30, 0xC0	; 192
    a8a4:	fa e0       	ldi	r31, 0x0A	; 10
    a8a6:	83 83       	std	Z+3, r24	; 0x03
    a8a8:	80 91 c2 0a 	lds	r24, 0x0AC2
    a8ac:	87 ff       	sbrs	r24, 7
    a8ae:	fc cf       	rjmp	.-8      	; 0xa8a8 <send_cmd+0xba>

  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
    a8b0:	8c e4       	ldi	r24, 0x4C	; 76
    a8b2:	d8 16       	cp	r13, r24
    a8b4:	51 f4       	brne	.+20     	; 0xa8ca <send_cmd+0xdc>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8b6:	8f ef       	ldi	r24, 0xFF	; 255
    a8b8:	e0 ec       	ldi	r30, 0xC0	; 192
    a8ba:	fa e0       	ldi	r31, 0x0A	; 10
    a8bc:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a8be:	80 91 c2 0a 	lds	r24, 0x0AC2
    a8c2:	87 ff       	sbrs	r24, 7
    a8c4:	fc cf       	rjmp	.-8      	; 0xa8be <send_cmd+0xd0>
  return SPIE.DATA;
    a8c6:	80 91 c3 0a 	lds	r24, 0x0AC3
    a8ca:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8cc:	e0 ec       	ldi	r30, 0xC0	; 192
    a8ce:	fa e0       	ldi	r31, 0x0A	; 10
    a8d0:	2f ef       	ldi	r18, 0xFF	; 255
    a8d2:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a8d4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a8d8:	87 ff       	sbrs	r24, 7
    a8da:	fc cf       	rjmp	.-8      	; 0xa8d4 <send_cmd+0xe6>
  return SPIE.DATA;
    a8dc:	80 91 c3 0a 	lds	r24, 0x0AC3
  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    res = rcvr_spi();
  while ((res & 0x80) && --n);
    a8e0:	87 ff       	sbrs	r24, 7
    a8e2:	02 c0       	rjmp	.+4      	; 0xa8e8 <send_cmd+0xfa>
    a8e4:	91 50       	subi	r25, 0x01	; 1
    a8e6:	a9 f7       	brne	.-22     	; 0xa8d2 <send_cmd+0xe4>

  return res;      /* Return with the response value */
}
    a8e8:	1f 91       	pop	r17
    a8ea:	0f 91       	pop	r16
    a8ec:	ff 90       	pop	r15
    a8ee:	ef 90       	pop	r14
    a8f0:	df 90       	pop	r13
    a8f2:	08 95       	ret

0000a8f4 <disk_status>:

DSTATUS disk_status (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;    /* Supports only single drive */
    a8f4:	88 23       	and	r24, r24
    a8f6:	11 f0       	breq	.+4      	; 0xa8fc <disk_status+0x8>
    a8f8:	81 e0       	ldi	r24, 0x01	; 1
    a8fa:	08 95       	ret
  return Stat;
    a8fc:	80 91 e0 24 	lds	r24, 0x24E0
}
    a900:	08 95       	ret

0000a902 <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a902:	0f 93       	push	r16
    a904:	cf 93       	push	r28
    a906:	df 93       	push	r29
    a908:	eb 01       	movw	r28, r22
  if (drv || !count) return RES_PARERR;
    a90a:	88 23       	and	r24, r24
    a90c:	09 f0       	breq	.+2      	; 0xa910 <disk_read+0xe>
    a90e:	57 c0       	rjmp	.+174    	; 0xa9be <disk_read+0xbc>
    a910:	00 23       	and	r16, r16
    a912:	09 f4       	brne	.+2      	; 0xa916 <disk_read+0x14>
    a914:	54 c0       	rjmp	.+168    	; 0xa9be <disk_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a916:	80 91 e0 24 	lds	r24, 0x24E0
    a91a:	80 ff       	sbrs	r24, 0
    a91c:	03 c0       	rjmp	.+6      	; 0xa924 <disk_read+0x22>
    a91e:	23 e0       	ldi	r18, 0x03	; 3
    a920:	30 e0       	ldi	r19, 0x00	; 0
    a922:	4f c0       	rjmp	.+158    	; 0xa9c2 <disk_read+0xc0>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a924:	80 91 74 25 	lds	r24, 0x2574
    a928:	83 fd       	sbrc	r24, 3
    a92a:	07 c0       	rjmp	.+14     	; 0xa93a <disk_read+0x38>
    a92c:	69 e0       	ldi	r22, 0x09	; 9
    a92e:	22 0f       	add	r18, r18
    a930:	33 1f       	adc	r19, r19
    a932:	44 1f       	adc	r20, r20
    a934:	55 1f       	adc	r21, r21
    a936:	6a 95       	dec	r22
    a938:	d1 f7       	brne	.-12     	; 0xa92e <disk_read+0x2c>

  if (count == 1) {  /* Single block read */
    a93a:	01 30       	cpi	r16, 0x01	; 1
    a93c:	89 f4       	brne	.+34     	; 0xa960 <disk_read+0x5e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
    a93e:	81 e5       	ldi	r24, 0x51	; 81
    a940:	ba 01       	movw	r22, r20
    a942:	a9 01       	movw	r20, r18
    a944:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    a948:	88 23       	and	r24, r24
    a94a:	21 f5       	brne	.+72     	; 0xa994 <disk_read+0x92>
    a94c:	ce 01       	movw	r24, r28
    a94e:	60 e0       	ldi	r22, 0x00	; 0
    a950:	72 e0       	ldi	r23, 0x02	; 2
    a952:	0e 94 3f 53 	call	0xa67e	; 0xa67e <rcvr_datablock>
    a956:	00 e0       	ldi	r16, 0x00	; 0
    a958:	89 2b       	or	r24, r25
    a95a:	e1 f4       	brne	.+56     	; 0xa994 <disk_read+0x92>
    a95c:	01 e0       	ldi	r16, 0x01	; 1
    a95e:	1a c0       	rjmp	.+52     	; 0xa994 <disk_read+0x92>
      && rcvr_datablock(buff, 512))
      count = 0;
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    a960:	82 e5       	ldi	r24, 0x52	; 82
    a962:	ba 01       	movw	r22, r20
    a964:	a9 01       	movw	r20, r18
    a966:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    a96a:	88 23       	and	r24, r24
    a96c:	99 f4       	brne	.+38     	; 0xa994 <disk_read+0x92>
      do {
        if (!rcvr_datablock(buff, 512)) break;
    a96e:	ce 01       	movw	r24, r28
    a970:	60 e0       	ldi	r22, 0x00	; 0
    a972:	72 e0       	ldi	r23, 0x02	; 2
    a974:	0e 94 3f 53 	call	0xa67e	; 0xa67e <rcvr_datablock>
    a978:	89 2b       	or	r24, r25
    a97a:	29 f0       	breq	.+10     	; 0xa986 <disk_read+0x84>
        buff += 512;
      } while (--count);
    a97c:	01 50       	subi	r16, 0x01	; 1
    a97e:	19 f0       	breq	.+6      	; 0xa986 <disk_read+0x84>
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!rcvr_datablock(buff, 512)) break;
        buff += 512;
    a980:	c0 50       	subi	r28, 0x00	; 0
    a982:	de 4f       	sbci	r29, 0xFE	; 254
    a984:	f4 cf       	rjmp	.-24     	; 0xa96e <disk_read+0x6c>
      } while (--count);
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    a986:	8c e4       	ldi	r24, 0x4C	; 76
    a988:	40 e0       	ldi	r20, 0x00	; 0
    a98a:	50 e0       	ldi	r21, 0x00	; 0
    a98c:	60 e0       	ldi	r22, 0x00	; 0
    a98e:	70 e0       	ldi	r23, 0x00	; 0
    a990:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a994:	80 e1       	ldi	r24, 0x10	; 16
    a996:	e0 e8       	ldi	r30, 0x80	; 128
    a998:	f6 e0       	ldi	r31, 0x06	; 6
    a99a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a99c:	8f ef       	ldi	r24, 0xFF	; 255
    a99e:	e0 ec       	ldi	r30, 0xC0	; 192
    a9a0:	fa e0       	ldi	r31, 0x0A	; 10
    a9a2:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a9a4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a9a8:	87 ff       	sbrs	r24, 7
    a9aa:	fc cf       	rjmp	.-8      	; 0xa9a4 <disk_read+0xa2>
  return SPIE.DATA;
    a9ac:	80 91 c3 0a 	lds	r24, 0x0AC3
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a9b0:	20 e0       	ldi	r18, 0x00	; 0
    a9b2:	30 e0       	ldi	r19, 0x00	; 0
    a9b4:	00 23       	and	r16, r16
    a9b6:	29 f0       	breq	.+10     	; 0xa9c2 <disk_read+0xc0>
    a9b8:	21 e0       	ldi	r18, 0x01	; 1
    a9ba:	30 e0       	ldi	r19, 0x00	; 0
    a9bc:	02 c0       	rjmp	.+4      	; 0xa9c2 <disk_read+0xc0>
    a9be:	24 e0       	ldi	r18, 0x04	; 4
    a9c0:	30 e0       	ldi	r19, 0x00	; 0
}
    a9c2:	c9 01       	movw	r24, r18
    a9c4:	df 91       	pop	r29
    a9c6:	cf 91       	pop	r28
    a9c8:	0f 91       	pop	r16
    a9ca:	08 95       	ret

0000a9cc <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a9cc:	cf 92       	push	r12
    a9ce:	df 92       	push	r13
    a9d0:	ef 92       	push	r14
    a9d2:	ff 92       	push	r15
    a9d4:	0f 93       	push	r16
    a9d6:	cf 93       	push	r28
    a9d8:	df 93       	push	r29
    a9da:	eb 01       	movw	r28, r22
    a9dc:	69 01       	movw	r12, r18
    a9de:	7a 01       	movw	r14, r20
  if (drv || !count) return RES_PARERR;
    a9e0:	88 23       	and	r24, r24
    a9e2:	09 f0       	breq	.+2      	; 0xa9e6 <disk_write+0x1a>
    a9e4:	66 c0       	rjmp	.+204    	; 0xaab2 <disk_write+0xe6>
    a9e6:	00 23       	and	r16, r16
    a9e8:	09 f4       	brne	.+2      	; 0xa9ec <disk_write+0x20>
    a9ea:	63 c0       	rjmp	.+198    	; 0xaab2 <disk_write+0xe6>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a9ec:	80 91 e0 24 	lds	r24, 0x24E0
    a9f0:	80 ff       	sbrs	r24, 0
    a9f2:	03 c0       	rjmp	.+6      	; 0xa9fa <disk_write+0x2e>
    a9f4:	23 e0       	ldi	r18, 0x03	; 3
    a9f6:	30 e0       	ldi	r19, 0x00	; 0
    a9f8:	5e c0       	rjmp	.+188    	; 0xaab6 <disk_write+0xea>
  if (Stat & STA_PROTECT) return RES_WRPRT;
    a9fa:	80 91 e0 24 	lds	r24, 0x24E0
    a9fe:	82 ff       	sbrs	r24, 2
    aa00:	03 c0       	rjmp	.+6      	; 0xaa08 <disk_write+0x3c>
    aa02:	22 e0       	ldi	r18, 0x02	; 2
    aa04:	30 e0       	ldi	r19, 0x00	; 0
    aa06:	57 c0       	rjmp	.+174    	; 0xaab6 <disk_write+0xea>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    aa08:	80 91 74 25 	lds	r24, 0x2574
    aa0c:	90 e0       	ldi	r25, 0x00	; 0
    aa0e:	83 fd       	sbrc	r24, 3
    aa10:	07 c0       	rjmp	.+14     	; 0xaa20 <disk_write+0x54>
    aa12:	79 e0       	ldi	r23, 0x09	; 9
    aa14:	cc 0c       	add	r12, r12
    aa16:	dd 1c       	adc	r13, r13
    aa18:	ee 1c       	adc	r14, r14
    aa1a:	ff 1c       	adc	r15, r15
    aa1c:	7a 95       	dec	r23
    aa1e:	d1 f7       	brne	.-12     	; 0xaa14 <disk_write+0x48>

  if (count == 1) {  /* Single block write */
    aa20:	01 30       	cpi	r16, 0x01	; 1
    aa22:	69 f4       	brne	.+26     	; 0xaa3e <disk_write+0x72>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    aa24:	88 e5       	ldi	r24, 0x58	; 88
    aa26:	b7 01       	movw	r22, r14
    aa28:	a6 01       	movw	r20, r12
    aa2a:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    aa2e:	88 23       	and	r24, r24
    aa30:	59 f5       	brne	.+86     	; 0xaa88 <disk_write+0xbc>
    aa32:	ce 01       	movw	r24, r28
    aa34:	6e ef       	ldi	r22, 0xFE	; 254
    aa36:	0e 94 a4 53 	call	0xa748	; 0xa748 <xmit_datablock>
    aa3a:	00 e0       	ldi	r16, 0x00	; 0
    aa3c:	22 c0       	rjmp	.+68     	; 0xaa82 <disk_write+0xb6>
      && xmit_datablock(buff, 0xFE))
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    aa3e:	86 70       	andi	r24, 0x06	; 6
    aa40:	90 70       	andi	r25, 0x00	; 0
    aa42:	89 2b       	or	r24, r25
    aa44:	39 f0       	breq	.+14     	; 0xaa54 <disk_write+0x88>
    aa46:	40 2f       	mov	r20, r16
    aa48:	50 e0       	ldi	r21, 0x00	; 0
    aa4a:	60 e0       	ldi	r22, 0x00	; 0
    aa4c:	70 e0       	ldi	r23, 0x00	; 0
    aa4e:	87 ed       	ldi	r24, 0xD7	; 215
    aa50:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    aa54:	89 e5       	ldi	r24, 0x59	; 89
    aa56:	b7 01       	movw	r22, r14
    aa58:	a6 01       	movw	r20, r12
    aa5a:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    aa5e:	88 23       	and	r24, r24
    aa60:	99 f4       	brne	.+38     	; 0xaa88 <disk_write+0xbc>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    aa62:	ce 01       	movw	r24, r28
    aa64:	6c ef       	ldi	r22, 0xFC	; 252
    aa66:	0e 94 a4 53 	call	0xa748	; 0xa748 <xmit_datablock>
    aa6a:	89 2b       	or	r24, r25
    aa6c:	29 f0       	breq	.+10     	; 0xaa78 <disk_write+0xac>
        buff += 512;
      } while (--count);
    aa6e:	01 50       	subi	r16, 0x01	; 1
    aa70:	19 f0       	breq	.+6      	; 0xaa78 <disk_write+0xac>
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
        buff += 512;
    aa72:	c0 50       	subi	r28, 0x00	; 0
    aa74:	de 4f       	sbci	r29, 0xFE	; 254
    aa76:	f5 cf       	rjmp	.-22     	; 0xaa62 <disk_write+0x96>
      } while (--count);
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    aa78:	80 e0       	ldi	r24, 0x00	; 0
    aa7a:	90 e0       	ldi	r25, 0x00	; 0
    aa7c:	6d ef       	ldi	r22, 0xFD	; 253
    aa7e:	0e 94 a4 53 	call	0xa748	; 0xa748 <xmit_datablock>
    aa82:	89 2b       	or	r24, r25
    aa84:	09 f4       	brne	.+2      	; 0xaa88 <disk_write+0xbc>
    aa86:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    aa88:	80 e1       	ldi	r24, 0x10	; 16
    aa8a:	e0 e8       	ldi	r30, 0x80	; 128
    aa8c:	f6 e0       	ldi	r31, 0x06	; 6
    aa8e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    aa90:	8f ef       	ldi	r24, 0xFF	; 255
    aa92:	e0 ec       	ldi	r30, 0xC0	; 192
    aa94:	fa e0       	ldi	r31, 0x0A	; 10
    aa96:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    aa98:	80 91 c2 0a 	lds	r24, 0x0AC2
    aa9c:	87 ff       	sbrs	r24, 7
    aa9e:	fc cf       	rjmp	.-8      	; 0xaa98 <disk_write+0xcc>
  return SPIE.DATA;
    aaa0:	80 91 c3 0a 	lds	r24, 0x0AC3
        count = 1;
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    aaa4:	20 e0       	ldi	r18, 0x00	; 0
    aaa6:	30 e0       	ldi	r19, 0x00	; 0
    aaa8:	00 23       	and	r16, r16
    aaaa:	29 f0       	breq	.+10     	; 0xaab6 <disk_write+0xea>
    aaac:	21 e0       	ldi	r18, 0x01	; 1
    aaae:	30 e0       	ldi	r19, 0x00	; 0
    aab0:	02 c0       	rjmp	.+4      	; 0xaab6 <disk_write+0xea>
    aab2:	24 e0       	ldi	r18, 0x04	; 4
    aab4:	30 e0       	ldi	r19, 0x00	; 0
}
    aab6:	c9 01       	movw	r24, r18
    aab8:	df 91       	pop	r29
    aaba:	cf 91       	pop	r28
    aabc:	0f 91       	pop	r16
    aabe:	ff 90       	pop	r15
    aac0:	ef 90       	pop	r14
    aac2:	df 90       	pop	r13
    aac4:	cf 90       	pop	r12
    aac6:	08 95       	ret

0000aac8 <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    aac8:	a0 e1       	ldi	r26, 0x10	; 16
    aaca:	b0 e0       	ldi	r27, 0x00	; 0
    aacc:	ea e6       	ldi	r30, 0x6A	; 106
    aace:	f5 e5       	ldi	r31, 0x55	; 85
    aad0:	0c 94 a4 5b 	jmp	0xb748	; 0xb748 <__prologue_saves__+0x1a>
    aad4:	8a 01       	movw	r16, r20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;


  if (drv) return RES_PARERR;
    aad6:	88 23       	and	r24, r24
    aad8:	09 f0       	breq	.+2      	; 0xaadc <disk_ioctl+0x14>
    aada:	a2 c1       	rjmp	.+836    	; 0xae20 <disk_ioctl+0x358>

  res = RES_ERROR;

  if (ctrl == CTRL_POWER) {
    aadc:	64 30       	cpi	r22, 0x04	; 4
    aade:	f1 f4       	brne	.+60     	; 0xab1c <disk_ioctl+0x54>
    switch (*ptr) {
    aae0:	fa 01       	movw	r30, r20
    aae2:	80 81       	ld	r24, Z
    aae4:	81 30       	cpi	r24, 0x01	; 1
    aae6:	49 f0       	breq	.+18     	; 0xaafa <disk_ioctl+0x32>
    aae8:	81 30       	cpi	r24, 0x01	; 1
    aaea:	20 f0       	brcs	.+8      	; 0xaaf4 <disk_ioctl+0x2c>
    aaec:	82 30       	cpi	r24, 0x02	; 2
    aaee:	09 f0       	breq	.+2      	; 0xaaf2 <disk_ioctl+0x2a>
    aaf0:	97 c1       	rjmp	.+814    	; 0xae20 <disk_ioctl+0x358>
    aaf2:	0e c0       	rjmp	.+28     	; 0xab10 <disk_ioctl+0x48>
    case 0:    /* Sub control code == 0 (POWER_OFF) */
      if (chk_power())
        power_off();    /* Power off */
    aaf4:	0e 94 1f 53 	call	0xa63e	; 0xa63e <power_off>
    aaf8:	0e c0       	rjmp	.+28     	; 0xab16 <disk_ioctl+0x4e>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    aafa:	83 e0       	ldi	r24, 0x03	; 3
    aafc:	80 93 72 25 	sts	0x2572, r24
    ab00:	80 91 72 25 	lds	r24, 0x2572
    ab04:	88 23       	and	r24, r24
    ab06:	e1 f7       	brne	.-8      	; 0xab00 <disk_ioctl+0x38>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    ab08:	83 e5       	ldi	r24, 0x53	; 83
    ab0a:	80 93 c0 0a 	sts	0x0AC0, r24
    ab0e:	03 c0       	rjmp	.+6      	; 0xab16 <disk_ioctl+0x4e>
    case 1:    /* Sub control code == 1 (POWER_ON) */
      power_on();        /* Power on */
      res = RES_OK;
      break;
    case 2:    /* Sub control code == 2 (POWER_GET) */
      *(ptr+1) = (BYTE)chk_power();
    ab10:	81 e0       	ldi	r24, 0x01	; 1
    ab12:	fa 01       	movw	r30, r20
    ab14:	81 83       	std	Z+1, r24	; 0x01
    ab16:	20 e0       	ldi	r18, 0x00	; 0
    ab18:	30 e0       	ldi	r19, 0x00	; 0
    ab1a:	84 c1       	rjmp	.+776    	; 0xae24 <disk_ioctl+0x35c>
    default :
      res = RES_PARERR;
    }
  }
  else {
    if (Stat & STA_NOINIT) return RES_NOTRDY;
    ab1c:	80 91 e0 24 	lds	r24, 0x24E0
    ab20:	80 ff       	sbrs	r24, 0
    ab22:	03 c0       	rjmp	.+6      	; 0xab2a <disk_ioctl+0x62>
    ab24:	23 e0       	ldi	r18, 0x03	; 3
    ab26:	30 e0       	ldi	r19, 0x00	; 0
    ab28:	7d c1       	rjmp	.+762    	; 0xae24 <disk_ioctl+0x35c>

    switch (ctrl) {
    ab2a:	e6 2f       	mov	r30, r22
    ab2c:	f0 e0       	ldi	r31, 0x00	; 0
    ab2e:	ef 30       	cpi	r30, 0x0F	; 15
    ab30:	f1 05       	cpc	r31, r1
    ab32:	20 f4       	brcc	.+8      	; 0xab3c <disk_ioctl+0x74>
    ab34:	e6 5f       	subi	r30, 0xF6	; 246
    ab36:	fe 4f       	sbci	r31, 0xFE	; 254
    ab38:	0c 94 ce 5b 	jmp	0xb79c	; 0xb79c <__tablejump2__>
    ab3c:	24 e0       	ldi	r18, 0x04	; 4
    ab3e:	30 e0       	ldi	r19, 0x00	; 0
    ab40:	60 c1       	rjmp	.+704    	; 0xae02 <disk_ioctl+0x33a>
    case CTRL_SYNC :    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
      SELECT();
    ab42:	80 e1       	ldi	r24, 0x10	; 16
    ab44:	e0 e8       	ldi	r30, 0x80	; 128
    ab46:	f6 e0       	ldi	r31, 0x06	; 6
    ab48:	86 83       	std	Z+6, r24	; 0x06
      if (wait_ready() == 0xFF)
    ab4a:	0e 94 00 53 	call	0xa600	; 0xa600 <wait_ready>
    ab4e:	20 e0       	ldi	r18, 0x00	; 0
    ab50:	30 e0       	ldi	r19, 0x00	; 0
    ab52:	8f 3f       	cpi	r24, 0xFF	; 255
    ab54:	09 f0       	breq	.+2      	; 0xab58 <disk_ioctl+0x90>
    ab56:	53 c1       	rjmp	.+678    	; 0xadfe <disk_ioctl+0x336>
    ab58:	54 c1       	rjmp	.+680    	; 0xae02 <disk_ioctl+0x33a>
        res = RES_OK;
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    ab5a:	89 e4       	ldi	r24, 0x49	; 73
    ab5c:	40 e0       	ldi	r20, 0x00	; 0
    ab5e:	50 e0       	ldi	r21, 0x00	; 0
    ab60:	60 e0       	ldi	r22, 0x00	; 0
    ab62:	70 e0       	ldi	r23, 0x00	; 0
    ab64:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    ab68:	88 23       	and	r24, r24
    ab6a:	09 f0       	breq	.+2      	; 0xab6e <disk_ioctl+0xa6>
    ab6c:	48 c1       	rjmp	.+656    	; 0xadfe <disk_ioctl+0x336>
    ab6e:	ce 01       	movw	r24, r28
    ab70:	01 96       	adiw	r24, 0x01	; 1
    ab72:	60 e1       	ldi	r22, 0x10	; 16
    ab74:	70 e0       	ldi	r23, 0x00	; 0
    ab76:	0e 94 3f 53 	call	0xa67e	; 0xa67e <rcvr_datablock>
    ab7a:	89 2b       	or	r24, r25
    ab7c:	09 f4       	brne	.+2      	; 0xab80 <disk_ioctl+0xb8>
    ab7e:	3f c1       	rjmp	.+638    	; 0xadfe <disk_ioctl+0x336>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    ab80:	89 81       	ldd	r24, Y+1	; 0x01
    ab82:	82 95       	swap	r24
    ab84:	86 95       	lsr	r24
    ab86:	86 95       	lsr	r24
    ab88:	83 70       	andi	r24, 0x03	; 3
    ab8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    ab8c:	49 85       	ldd	r20, Y+9	; 0x09
    ab8e:	81 30       	cpi	r24, 0x01	; 1
    ab90:	89 f4       	brne	.+34     	; 0xabb4 <disk_ioctl+0xec>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
    ab92:	87 2f       	mov	r24, r23
    ab94:	90 e0       	ldi	r25, 0x00	; 0
    ab96:	01 96       	adiw	r24, 0x01	; 1
    ab98:	34 2f       	mov	r19, r20
    ab9a:	20 e0       	ldi	r18, 0x00	; 0
    ab9c:	82 0f       	add	r24, r18
    ab9e:	93 1f       	adc	r25, r19
    aba0:	a0 e0       	ldi	r26, 0x00	; 0
    aba2:	b0 e0       	ldi	r27, 0x00	; 0
    aba4:	2a e0       	ldi	r18, 0x0A	; 10
    aba6:	88 0f       	add	r24, r24
    aba8:	99 1f       	adc	r25, r25
    abaa:	aa 1f       	adc	r26, r26
    abac:	bb 1f       	adc	r27, r27
    abae:	2a 95       	dec	r18
    abb0:	d1 f7       	brne	.-12     	; 0xaba6 <disk_ioctl+0xde>
    abb2:	cd c0       	rjmp	.+410    	; 0xad4e <disk_ioctl+0x286>
        } else {          /* SDC ver 1.XX or MMC*/
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    abb4:	42 95       	swap	r20
    abb6:	46 95       	lsr	r20
    abb8:	46 95       	lsr	r20
    abba:	43 70       	andi	r20, 0x03	; 3
    abbc:	28 85       	ldd	r18, Y+8	; 0x08
    abbe:	30 e0       	ldi	r19, 0x00	; 0
    abc0:	22 0f       	add	r18, r18
    abc2:	33 1f       	adc	r19, r19
    abc4:	22 0f       	add	r18, r18
    abc6:	33 1f       	adc	r19, r19
    abc8:	24 0f       	add	r18, r20
    abca:	31 1d       	adc	r19, r1
    abcc:	2f 5f       	subi	r18, 0xFF	; 255
    abce:	3f 4f       	sbci	r19, 0xFF	; 255
    abd0:	8f 81       	ldd	r24, Y+7	; 0x07
    abd2:	90 e0       	ldi	r25, 0x00	; 0
    abd4:	83 70       	andi	r24, 0x03	; 3
    abd6:	90 70       	andi	r25, 0x00	; 0
    abd8:	98 2f       	mov	r25, r24
    abda:	88 27       	eor	r24, r24
    abdc:	99 0f       	add	r25, r25
    abde:	99 0f       	add	r25, r25
    abe0:	28 0f       	add	r18, r24
    abe2:	39 1f       	adc	r19, r25
    abe4:	40 e0       	ldi	r20, 0x00	; 0
    abe6:	50 e0       	ldi	r21, 0x00	; 0
    abe8:	8e 81       	ldd	r24, Y+6	; 0x06
    abea:	8f 70       	andi	r24, 0x0F	; 15
    abec:	6b 85       	ldd	r22, Y+11	; 0x0b
    abee:	66 1f       	adc	r22, r22
    abf0:	66 27       	eor	r22, r22
    abf2:	66 1f       	adc	r22, r22
    abf4:	86 0f       	add	r24, r22
    abf6:	8e 5f       	subi	r24, 0xFE	; 254
    abf8:	73 70       	andi	r23, 0x03	; 3
    abfa:	77 0f       	add	r23, r23
    abfc:	87 0f       	add	r24, r23
    abfe:	90 e0       	ldi	r25, 0x00	; 0
    ac00:	09 97       	sbiw	r24, 0x09	; 9
    ac02:	04 c0       	rjmp	.+8      	; 0xac0c <disk_ioctl+0x144>
    ac04:	22 0f       	add	r18, r18
    ac06:	33 1f       	adc	r19, r19
    ac08:	44 1f       	adc	r20, r20
    ac0a:	55 1f       	adc	r21, r21
    ac0c:	8a 95       	dec	r24
    ac0e:	d2 f7       	brpl	.-12     	; 0xac04 <disk_ioctl+0x13c>
    ac10:	f8 01       	movw	r30, r16
    ac12:	20 83       	st	Z, r18
    ac14:	31 83       	std	Z+1, r19	; 0x01
    ac16:	42 83       	std	Z+2, r20	; 0x02
    ac18:	53 83       	std	Z+3, r21	; 0x03
    ac1a:	9e c0       	rjmp	.+316    	; 0xad58 <disk_ioctl+0x290>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :  /* Get R/W sector size (WORD) */
      *(WORD*)buff = 512;
    ac1c:	80 e0       	ldi	r24, 0x00	; 0
    ac1e:	92 e0       	ldi	r25, 0x02	; 2
    ac20:	fa 01       	movw	r30, r20
    ac22:	80 83       	st	Z, r24
    ac24:	91 83       	std	Z+1, r25	; 0x01
    ac26:	98 c0       	rjmp	.+304    	; 0xad58 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
    ac28:	80 91 74 25 	lds	r24, 0x2574
    ac2c:	f8 2e       	mov	r15, r24
    ac2e:	82 ff       	sbrs	r24, 2
    ac30:	39 c0       	rjmp	.+114    	; 0xaca4 <disk_ioctl+0x1dc>
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
    ac32:	8d ec       	ldi	r24, 0xCD	; 205
    ac34:	40 e0       	ldi	r20, 0x00	; 0
    ac36:	50 e0       	ldi	r21, 0x00	; 0
    ac38:	60 e0       	ldi	r22, 0x00	; 0
    ac3a:	70 e0       	ldi	r23, 0x00	; 0
    ac3c:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    ac40:	88 23       	and	r24, r24
    ac42:	09 f0       	breq	.+2      	; 0xac46 <disk_ioctl+0x17e>
    ac44:	dc c0       	rjmp	.+440    	; 0xadfe <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ac46:	8f ef       	ldi	r24, 0xFF	; 255
    ac48:	e0 ec       	ldi	r30, 0xC0	; 192
    ac4a:	fa e0       	ldi	r31, 0x0A	; 10
    ac4c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ac4e:	80 91 c2 0a 	lds	r24, 0x0AC2
    ac52:	87 ff       	sbrs	r24, 7
    ac54:	fc cf       	rjmp	.-8      	; 0xac4e <disk_ioctl+0x186>
  return SPIE.DATA;
    ac56:	80 91 c3 0a 	lds	r24, 0x0AC3

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
    ac5a:	ce 01       	movw	r24, r28
    ac5c:	01 96       	adiw	r24, 0x01	; 1
    ac5e:	60 e1       	ldi	r22, 0x10	; 16
    ac60:	70 e0       	ldi	r23, 0x00	; 0
    ac62:	0e 94 3f 53 	call	0xa67e	; 0xa67e <rcvr_datablock>
    ac66:	89 2b       	or	r24, r25
    ac68:	09 f4       	brne	.+2      	; 0xac6c <disk_ioctl+0x1a4>
    ac6a:	c9 c0       	rjmp	.+402    	; 0xadfe <disk_ioctl+0x336>
    ac6c:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ac6e:	e0 ec       	ldi	r30, 0xC0	; 192
    ac70:	fa e0       	ldi	r31, 0x0A	; 10
    ac72:	2f ef       	ldi	r18, 0xFF	; 255
    ac74:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ac76:	80 91 c2 0a 	lds	r24, 0x0AC2
    ac7a:	87 ff       	sbrs	r24, 7
    ac7c:	fc cf       	rjmp	.-8      	; 0xac76 <disk_ioctl+0x1ae>
  return SPIE.DATA;
    ac7e:	80 91 c3 0a 	lds	r24, 0x0AC3
    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
            for (n = 64 - 16; n; n--) rcvr_spi();  /* Purge trailing data */
    ac82:	91 50       	subi	r25, 0x01	; 1
    ac84:	b9 f7       	brne	.-18     	; 0xac74 <disk_ioctl+0x1ac>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    ac86:	2b 85       	ldd	r18, Y+11	; 0x0b
    ac88:	22 95       	swap	r18
    ac8a:	2f 70       	andi	r18, 0x0F	; 15
    ac8c:	80 e1       	ldi	r24, 0x10	; 16
    ac8e:	90 e0       	ldi	r25, 0x00	; 0
    ac90:	a0 e0       	ldi	r26, 0x00	; 0
    ac92:	b0 e0       	ldi	r27, 0x00	; 0
    ac94:	04 c0       	rjmp	.+8      	; 0xac9e <disk_ioctl+0x1d6>
    ac96:	88 0f       	add	r24, r24
    ac98:	99 1f       	adc	r25, r25
    ac9a:	aa 1f       	adc	r26, r26
    ac9c:	bb 1f       	adc	r27, r27
    ac9e:	2a 95       	dec	r18
    aca0:	d2 f7       	brpl	.-12     	; 0xac96 <disk_ioctl+0x1ce>
    aca2:	55 c0       	rjmp	.+170    	; 0xad4e <disk_ioctl+0x286>
            res = RES_OK;
          }
        }
      } else {          /* SDC ver 1.XX or MMC */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
    aca4:	89 e4       	ldi	r24, 0x49	; 73
    aca6:	40 e0       	ldi	r20, 0x00	; 0
    aca8:	50 e0       	ldi	r21, 0x00	; 0
    acaa:	60 e0       	ldi	r22, 0x00	; 0
    acac:	70 e0       	ldi	r23, 0x00	; 0
    acae:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    acb2:	88 23       	and	r24, r24
    acb4:	09 f0       	breq	.+2      	; 0xacb8 <disk_ioctl+0x1f0>
    acb6:	a3 c0       	rjmp	.+326    	; 0xadfe <disk_ioctl+0x336>
    acb8:	ce 01       	movw	r24, r28
    acba:	01 96       	adiw	r24, 0x01	; 1
    acbc:	60 e1       	ldi	r22, 0x10	; 16
    acbe:	70 e0       	ldi	r23, 0x00	; 0
    acc0:	0e 94 3f 53 	call	0xa67e	; 0xa67e <rcvr_datablock>
    acc4:	89 2b       	or	r24, r25
    acc6:	09 f4       	brne	.+2      	; 0xacca <disk_ioctl+0x202>
    acc8:	9a c0       	rjmp	.+308    	; 0xadfe <disk_ioctl+0x336>
    acca:	4b 85       	ldd	r20, Y+11	; 0x0b
    accc:	8c 85       	ldd	r24, Y+12	; 0x0c
          if (CardType & CT_SD1) {  /* SDC ver 1.XX */
    acce:	f1 fe       	sbrs	r15, 1
    acd0:	1b c0       	rjmp	.+54     	; 0xad08 <disk_ioctl+0x240>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    acd2:	88 1f       	adc	r24, r24
    acd4:	88 27       	eor	r24, r24
    acd6:	88 1f       	adc	r24, r24
    acd8:	90 e0       	ldi	r25, 0x00	; 0
    acda:	01 96       	adiw	r24, 0x01	; 1
    acdc:	24 2f       	mov	r18, r20
    acde:	30 e0       	ldi	r19, 0x00	; 0
    ace0:	2f 73       	andi	r18, 0x3F	; 63
    ace2:	30 70       	andi	r19, 0x00	; 0
    ace4:	22 0f       	add	r18, r18
    ace6:	33 1f       	adc	r19, r19
    ace8:	82 0f       	add	r24, r18
    acea:	93 1f       	adc	r25, r19
    acec:	2e 85       	ldd	r18, Y+14	; 0x0e
    acee:	22 95       	swap	r18
    acf0:	26 95       	lsr	r18
    acf2:	26 95       	lsr	r18
    acf4:	23 70       	andi	r18, 0x03	; 3
    acf6:	30 e0       	ldi	r19, 0x00	; 0
    acf8:	21 50       	subi	r18, 0x01	; 1
    acfa:	30 40       	sbci	r19, 0x00	; 0
    acfc:	02 c0       	rjmp	.+4      	; 0xad02 <disk_ioctl+0x23a>
    acfe:	88 0f       	add	r24, r24
    ad00:	99 1f       	adc	r25, r25
    ad02:	2a 95       	dec	r18
    ad04:	e2 f7       	brpl	.-8      	; 0xacfe <disk_ioctl+0x236>
    ad06:	21 c0       	rjmp	.+66     	; 0xad4a <disk_ioctl+0x282>
          } else {          /* MMC */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    ad08:	28 2f       	mov	r18, r24
    ad0a:	30 e0       	ldi	r19, 0x00	; 0
    ad0c:	23 70       	andi	r18, 0x03	; 3
    ad0e:	30 70       	andi	r19, 0x00	; 0
    ad10:	f3 e0       	ldi	r31, 0x03	; 3
    ad12:	22 0f       	add	r18, r18
    ad14:	33 1f       	adc	r19, r19
    ad16:	fa 95       	dec	r31
    ad18:	e1 f7       	brne	.-8      	; 0xad12 <disk_ioctl+0x24a>
    ad1a:	82 95       	swap	r24
    ad1c:	86 95       	lsr	r24
    ad1e:	87 70       	andi	r24, 0x07	; 7
    ad20:	28 0f       	add	r18, r24
    ad22:	31 1d       	adc	r19, r1
    ad24:	2f 5f       	subi	r18, 0xFF	; 255
    ad26:	3f 4f       	sbci	r19, 0xFF	; 255
    ad28:	84 2f       	mov	r24, r20
    ad2a:	90 e0       	ldi	r25, 0x00	; 0
    ad2c:	8c 77       	andi	r24, 0x7C	; 124
    ad2e:	90 70       	andi	r25, 0x00	; 0
    ad30:	95 95       	asr	r25
    ad32:	87 95       	ror	r24
    ad34:	95 95       	asr	r25
    ad36:	87 95       	ror	r24
    ad38:	01 96       	adiw	r24, 0x01	; 1
    ad3a:	ac 01       	movw	r20, r24
    ad3c:	24 9f       	mul	r18, r20
    ad3e:	c0 01       	movw	r24, r0
    ad40:	25 9f       	mul	r18, r21
    ad42:	90 0d       	add	r25, r0
    ad44:	34 9f       	mul	r19, r20
    ad46:	90 0d       	add	r25, r0
    ad48:	11 24       	eor	r1, r1
    ad4a:	a0 e0       	ldi	r26, 0x00	; 0
    ad4c:	b0 e0       	ldi	r27, 0x00	; 0
    ad4e:	f8 01       	movw	r30, r16
    ad50:	80 83       	st	Z, r24
    ad52:	91 83       	std	Z+1, r25	; 0x01
    ad54:	a2 83       	std	Z+2, r26	; 0x02
    ad56:	b3 83       	std	Z+3, r27	; 0x03
    ad58:	20 e0       	ldi	r18, 0x00	; 0
    ad5a:	30 e0       	ldi	r19, 0x00	; 0
    ad5c:	52 c0       	rjmp	.+164    	; 0xae02 <disk_ioctl+0x33a>
        }
      }
      break;

    case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
      *ptr = CardType;
    ad5e:	80 91 74 25 	lds	r24, 0x2574
    ad62:	fa 01       	movw	r30, r20
    ad64:	80 83       	st	Z, r24
    ad66:	f8 cf       	rjmp	.-16     	; 0xad58 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
      if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
    ad68:	89 e4       	ldi	r24, 0x49	; 73
    ad6a:	01 c0       	rjmp	.+2      	; 0xad6e <disk_ioctl+0x2a6>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
      if (send_cmd(CMD10, 0) == 0    /* READ_CID */
    ad6c:	8a e4       	ldi	r24, 0x4A	; 74
    ad6e:	40 e0       	ldi	r20, 0x00	; 0
    ad70:	50 e0       	ldi	r21, 0x00	; 0
    ad72:	60 e0       	ldi	r22, 0x00	; 0
    ad74:	70 e0       	ldi	r23, 0x00	; 0
    ad76:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    ad7a:	88 23       	and	r24, r24
    ad7c:	09 f0       	breq	.+2      	; 0xad80 <disk_ioctl+0x2b8>
    ad7e:	3f c0       	rjmp	.+126    	; 0xadfe <disk_ioctl+0x336>
    ad80:	c8 01       	movw	r24, r16
    ad82:	60 e1       	ldi	r22, 0x10	; 16
    ad84:	70 e0       	ldi	r23, 0x00	; 0
    ad86:	35 c0       	rjmp	.+106    	; 0xadf2 <disk_ioctl+0x32a>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
    ad88:	8a e7       	ldi	r24, 0x7A	; 122
    ad8a:	40 e0       	ldi	r20, 0x00	; 0
    ad8c:	50 e0       	ldi	r21, 0x00	; 0
    ad8e:	60 e0       	ldi	r22, 0x00	; 0
    ad90:	70 e0       	ldi	r23, 0x00	; 0
    ad92:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    ad96:	88 23       	and	r24, r24
    ad98:	91 f5       	brne	.+100    	; 0xadfe <disk_ioctl+0x336>
    ad9a:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ad9c:	a0 ec       	ldi	r26, 0xC0	; 192
    ad9e:	ba e0       	ldi	r27, 0x0A	; 10
    ada0:	9f ef       	ldi	r25, 0xFF	; 255
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    ada2:	98 01       	movw	r18, r16
    ada4:	2d 5f       	subi	r18, 0xFD	; 253
    ada6:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ada8:	13 96       	adiw	r26, 0x03	; 3
    adaa:	9c 93       	st	X, r25
    adac:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    adae:	80 91 c2 0a 	lds	r24, 0x0AC2
    adb2:	87 ff       	sbrs	r24, 7
    adb4:	fc cf       	rjmp	.-8      	; 0xadae <disk_ioctl+0x2e6>
  return SPIE.DATA;
    adb6:	80 91 c3 0a 	lds	r24, 0x0AC3
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    adba:	80 83       	st	Z, r24
    adbc:	e2 17       	cp	r30, r18
    adbe:	f3 07       	cpc	r31, r19
    adc0:	59 f2       	breq	.-106    	; 0xad58 <disk_ioctl+0x290>
    adc2:	31 96       	adiw	r30, 0x01	; 1
    adc4:	f1 cf       	rjmp	.-30     	; 0xada8 <disk_ioctl+0x2e0>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
    adc6:	8d ec       	ldi	r24, 0xCD	; 205
    adc8:	40 e0       	ldi	r20, 0x00	; 0
    adca:	50 e0       	ldi	r21, 0x00	; 0
    adcc:	60 e0       	ldi	r22, 0x00	; 0
    adce:	70 e0       	ldi	r23, 0x00	; 0
    add0:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    add4:	88 23       	and	r24, r24
    add6:	99 f4       	brne	.+38     	; 0xadfe <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    add8:	8f ef       	ldi	r24, 0xFF	; 255
    adda:	e0 ec       	ldi	r30, 0xC0	; 192
    addc:	fa e0       	ldi	r31, 0x0A	; 10
    adde:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ade0:	80 91 c2 0a 	lds	r24, 0x0AC2
    ade4:	87 ff       	sbrs	r24, 7
    ade6:	fc cf       	rjmp	.-8      	; 0xade0 <disk_ioctl+0x318>
  return SPIE.DATA;
    ade8:	80 91 c3 0a 	lds	r24, 0x0AC3
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
        rcvr_spi();
        if (rcvr_datablock(ptr, 64))
    adec:	c8 01       	movw	r24, r16
    adee:	60 e4       	ldi	r22, 0x40	; 64
    adf0:	70 e0       	ldi	r23, 0x00	; 0
    adf2:	0e 94 3f 53 	call	0xa67e	; 0xa67e <rcvr_datablock>
    adf6:	20 e0       	ldi	r18, 0x00	; 0
    adf8:	30 e0       	ldi	r19, 0x00	; 0
    adfa:	89 2b       	or	r24, r25
    adfc:	11 f4       	brne	.+4      	; 0xae02 <disk_ioctl+0x33a>
    adfe:	21 e0       	ldi	r18, 0x01	; 1
    ae00:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    ae02:	80 e1       	ldi	r24, 0x10	; 16
    ae04:	e0 e8       	ldi	r30, 0x80	; 128
    ae06:	f6 e0       	ldi	r31, 0x06	; 6
    ae08:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ae0a:	8f ef       	ldi	r24, 0xFF	; 255
    ae0c:	e0 ec       	ldi	r30, 0xC0	; 192
    ae0e:	fa e0       	ldi	r31, 0x0A	; 10
    ae10:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ae12:	80 91 c2 0a 	lds	r24, 0x0AC2
    ae16:	87 ff       	sbrs	r24, 7
    ae18:	fc cf       	rjmp	.-8      	; 0xae12 <disk_ioctl+0x34a>
  return SPIE.DATA;
    ae1a:	80 91 c3 0a 	lds	r24, 0x0AC3
    ae1e:	02 c0       	rjmp	.+4      	; 0xae24 <disk_ioctl+0x35c>
    ae20:	24 e0       	ldi	r18, 0x04	; 4
    ae22:	30 e0       	ldi	r19, 0x00	; 0

    release_spi();
  }

  return res;
}
    ae24:	c9 01       	movw	r24, r18
    ae26:	60 96       	adiw	r28, 0x10	; 16
    ae28:	e5 e0       	ldi	r30, 0x05	; 5
    ae2a:	0c 94 c0 5b 	jmp	0xb780	; 0xb780 <__epilogue_restores__+0x1a>

0000ae2e <disk_timerproc>:
{
  static BYTE pv;
  BYTE n, s;


  n = Timer1;            /* 100Hz decrement timer */
    ae2e:	80 91 72 25 	lds	r24, 0x2572
  if (n) Timer1 = --n;
    ae32:	88 23       	and	r24, r24
    ae34:	19 f0       	breq	.+6      	; 0xae3c <disk_timerproc+0xe>
    ae36:	81 50       	subi	r24, 0x01	; 1
    ae38:	80 93 72 25 	sts	0x2572, r24
  n = Timer2;
    ae3c:	80 91 73 25 	lds	r24, 0x2573
  if (n) Timer2 = --n;
    ae40:	88 23       	and	r24, r24
    ae42:	19 f0       	breq	.+6      	; 0xae4a <disk_timerproc+0x1c>
    ae44:	81 50       	subi	r24, 0x01	; 1
    ae46:	80 93 73 25 	sts	0x2573, r24

  n = pv;
    ae4a:	90 91 71 25 	lds	r25, 0x2571
  pv = SOCKPORT & (SOCKWP | SOCKINS);  /* Sample socket switch */
    ae4e:	80 91 e8 06 	lds	r24, 0x06E8
    ae52:	83 70       	andi	r24, 0x03	; 3
    ae54:	80 93 71 25 	sts	0x2571, r24

  if (n == pv) {          /* Have contacts stabled? */
    ae58:	98 17       	cp	r25, r24
    ae5a:	71 f4       	brne	.+28     	; 0xae78 <disk_timerproc+0x4a>
    s = Stat;
    ae5c:	80 91 e0 24 	lds	r24, 0x24E0

    if (pv & SOCKWP)      /* WP is H (write protected) */
    ae60:	90 ff       	sbrs	r25, 0
    ae62:	02 c0       	rjmp	.+4      	; 0xae68 <disk_timerproc+0x3a>
      s |= STA_PROTECT;
    ae64:	84 60       	ori	r24, 0x04	; 4
    ae66:	01 c0       	rjmp	.+2      	; 0xae6a <disk_timerproc+0x3c>
    else            /* WP is L (write enabled) */
      s &= ~STA_PROTECT;
    ae68:	8b 7f       	andi	r24, 0xFB	; 251

    if (pv & SOCKINS)      /* INS = H (Socket empty) */
    ae6a:	91 ff       	sbrs	r25, 1
    ae6c:	02 c0       	rjmp	.+4      	; 0xae72 <disk_timerproc+0x44>
      s |= (STA_NODISK | STA_NOINIT);
    ae6e:	83 60       	ori	r24, 0x03	; 3
    ae70:	01 c0       	rjmp	.+2      	; 0xae74 <disk_timerproc+0x46>
    else            /* INS = L (Card inserted) */
      s &= ~STA_NODISK;
    ae72:	8d 7f       	andi	r24, 0xFD	; 253

    Stat = s;
    ae74:	80 93 e0 24 	sts	0x24E0, r24
    ae78:	08 95       	ret

0000ae7a <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    ae7a:	1f 92       	push	r1
    ae7c:	0f 92       	push	r0
    ae7e:	0f b6       	in	r0, 0x3f	; 63
    ae80:	0f 92       	push	r0
    ae82:	08 b6       	in	r0, 0x38	; 56
    ae84:	0f 92       	push	r0
    ae86:	09 b6       	in	r0, 0x39	; 57
    ae88:	0f 92       	push	r0
    ae8a:	0b b6       	in	r0, 0x3b	; 59
    ae8c:	0f 92       	push	r0
    ae8e:	11 24       	eor	r1, r1
    ae90:	18 be       	out	0x38, r1	; 56
    ae92:	19 be       	out	0x39, r1	; 57
    ae94:	1b be       	out	0x3b, r1	; 59
    ae96:	2f 93       	push	r18
    ae98:	3f 93       	push	r19
    ae9a:	4f 93       	push	r20
    ae9c:	5f 93       	push	r21
    ae9e:	6f 93       	push	r22
    aea0:	7f 93       	push	r23
    aea2:	8f 93       	push	r24
    aea4:	9f 93       	push	r25
    aea6:	af 93       	push	r26
    aea8:	bf 93       	push	r27
    aeaa:	ef 93       	push	r30
    aeac:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    aeae:	0e 94 17 57 	call	0xae2e	; 0xae2e <disk_timerproc>
}
    aeb2:	ff 91       	pop	r31
    aeb4:	ef 91       	pop	r30
    aeb6:	bf 91       	pop	r27
    aeb8:	af 91       	pop	r26
    aeba:	9f 91       	pop	r25
    aebc:	8f 91       	pop	r24
    aebe:	7f 91       	pop	r23
    aec0:	6f 91       	pop	r22
    aec2:	5f 91       	pop	r21
    aec4:	4f 91       	pop	r20
    aec6:	3f 91       	pop	r19
    aec8:	2f 91       	pop	r18
    aeca:	0f 90       	pop	r0
    aecc:	0b be       	out	0x3b, r0	; 59
    aece:	0f 90       	pop	r0
    aed0:	09 be       	out	0x39, r0	; 57
    aed2:	0f 90       	pop	r0
    aed4:	08 be       	out	0x38, r0	; 56
    aed6:	0f 90       	pop	r0
    aed8:	0f be       	out	0x3f, r0	; 63
    aeda:	0f 90       	pop	r0
    aedc:	1f 90       	pop	r1
    aede:	18 95       	reti

0000aee0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    aee0:	a4 e0       	ldi	r26, 0x04	; 4
    aee2:	b0 e0       	ldi	r27, 0x00	; 0
    aee4:	e6 e7       	ldi	r30, 0x76	; 118
    aee6:	f7 e5       	ldi	r31, 0x57	; 87
    aee8:	0c 94 a3 5b 	jmp	0xb746	; 0xb746 <__prologue_saves__+0x18>
  BYTE n, cmd, ty, ocr[4];


  if (drv) return STA_NOINIT;      /* Supports only single drive */
    aeec:	88 23       	and	r24, r24
    aeee:	11 f0       	breq	.+4      	; 0xaef4 <disk_initialize+0x14>
    aef0:	81 e0       	ldi	r24, 0x01	; 1
    aef2:	d8 c0       	rjmp	.+432    	; 0xb0a4 <disk_initialize+0x1c4>
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */
    aef4:	80 91 e0 24 	lds	r24, 0x24E0
    aef8:	81 fd       	sbrc	r24, 1
    aefa:	d2 c0       	rjmp	.+420    	; 0xb0a0 <disk_initialize+0x1c0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    aefc:	83 e0       	ldi	r24, 0x03	; 3
    aefe:	80 93 72 25 	sts	0x2572, r24
    af02:	80 91 72 25 	lds	r24, 0x2572
    af06:	88 23       	and	r24, r24
    af08:	e1 f7       	brne	.-8      	; 0xaf02 <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    af0a:	13 e5       	ldi	r17, 0x53	; 83
    af0c:	10 93 c0 0a 	sts	0x0AC0, r17

  if (drv) return STA_NOINIT;      /* Supports only single drive */
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
    af10:	81 e4       	ldi	r24, 0x41	; 65
    af12:	90 e0       	ldi	r25, 0x00	; 0
    af14:	64 e0       	ldi	r22, 0x04	; 4
    af16:	0e 94 33 24 	call	0x4866	; 0x4866 <CCPWrite>
  FCLK_SLOW();
    af1a:	10 93 c0 0a 	sts	0x0AC0, r17
    af1e:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    af20:	e0 ec       	ldi	r30, 0xC0	; 192
    af22:	fa e0       	ldi	r31, 0x0A	; 10
    af24:	2f ef       	ldi	r18, 0xFF	; 255
    af26:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    af28:	80 91 c2 0a 	lds	r24, 0x0AC2
    af2c:	87 ff       	sbrs	r24, 7
    af2e:	fc cf       	rjmp	.-8      	; 0xaf28 <disk_initialize+0x48>
  return SPIE.DATA;
    af30:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
  FCLK_SLOW();
  for (n = 10; n; n--) rcvr_spi();  /* 80 dummy clocks */
    af34:	91 50       	subi	r25, 0x01	; 1
    af36:	b9 f7       	brne	.-18     	; 0xaf26 <disk_initialize+0x46>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    af38:	80 e4       	ldi	r24, 0x40	; 64
    af3a:	40 e0       	ldi	r20, 0x00	; 0
    af3c:	50 e0       	ldi	r21, 0x00	; 0
    af3e:	60 e0       	ldi	r22, 0x00	; 0
    af40:	70 e0       	ldi	r23, 0x00	; 0
    af42:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    af46:	81 30       	cpi	r24, 0x01	; 1
    af48:	09 f0       	breq	.+2      	; 0xaf4c <disk_initialize+0x6c>
    af4a:	87 c0       	rjmp	.+270    	; 0xb05a <disk_initialize+0x17a>
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    af4c:	84 e6       	ldi	r24, 0x64	; 100
    af4e:	80 93 72 25 	sts	0x2572, r24
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
    af52:	88 e4       	ldi	r24, 0x48	; 72
    af54:	4a ea       	ldi	r20, 0xAA	; 170
    af56:	51 e0       	ldi	r21, 0x01	; 1
    af58:	60 e0       	ldi	r22, 0x00	; 0
    af5a:	70 e0       	ldi	r23, 0x00	; 0
    af5c:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    af60:	81 30       	cpi	r24, 0x01	; 1
    af62:	09 f0       	breq	.+2      	; 0xaf66 <disk_initialize+0x86>
    af64:	53 c0       	rjmp	.+166    	; 0xb00c <disk_initialize+0x12c>
    af66:	7e 01       	movw	r14, r28
    af68:	08 94       	sec
    af6a:	e1 1c       	adc	r14, r1
    af6c:	f1 1c       	adc	r15, r1
    af6e:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    af70:	e0 ec       	ldi	r30, 0xC0	; 192
    af72:	fa e0       	ldi	r31, 0x0A	; 10
    af74:	9f ef       	ldi	r25, 0xFF	; 255

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    af76:	9e 01       	movw	r18, r28
    af78:	2b 5f       	subi	r18, 0xFB	; 251
    af7a:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    af7c:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    af7e:	80 91 c2 0a 	lds	r24, 0x0AC2
    af82:	87 ff       	sbrs	r24, 7
    af84:	fc cf       	rjmp	.-8      	; 0xaf7e <disk_initialize+0x9e>
  return SPIE.DATA;
    af86:	80 91 c3 0a 	lds	r24, 0x0AC3

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    af8a:	d8 01       	movw	r26, r16
    af8c:	8d 93       	st	X+, r24
    af8e:	8d 01       	movw	r16, r26
    af90:	a2 17       	cp	r26, r18
    af92:	b3 07       	cpc	r27, r19
    af94:	99 f7       	brne	.-26     	; 0xaf7c <disk_initialize+0x9c>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
    af96:	8b 81       	ldd	r24, Y+3	; 0x03
    af98:	81 30       	cpi	r24, 0x01	; 1
    af9a:	09 f0       	breq	.+2      	; 0xaf9e <disk_initialize+0xbe>
    af9c:	5e c0       	rjmp	.+188    	; 0xb05a <disk_initialize+0x17a>
    af9e:	8c 81       	ldd	r24, Y+4	; 0x04
    afa0:	8a 3a       	cpi	r24, 0xAA	; 170
    afa2:	09 f0       	breq	.+2      	; 0xafa6 <disk_initialize+0xc6>
    afa4:	5a c0       	rjmp	.+180    	; 0xb05a <disk_initialize+0x17a>
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    afa6:	80 91 72 25 	lds	r24, 0x2572
    afaa:	88 23       	and	r24, r24
    afac:	49 f0       	breq	.+18     	; 0xafc0 <disk_initialize+0xe0>
    afae:	89 ee       	ldi	r24, 0xE9	; 233
    afb0:	40 e0       	ldi	r20, 0x00	; 0
    afb2:	50 e0       	ldi	r21, 0x00	; 0
    afb4:	60 e0       	ldi	r22, 0x00	; 0
    afb6:	70 e4       	ldi	r23, 0x40	; 64
    afb8:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    afbc:	88 23       	and	r24, r24
    afbe:	99 f7       	brne	.-26     	; 0xafa6 <disk_initialize+0xc6>
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
    afc0:	80 91 72 25 	lds	r24, 0x2572
    afc4:	88 23       	and	r24, r24
    afc6:	09 f4       	brne	.+2      	; 0xafca <disk_initialize+0xea>
    afc8:	48 c0       	rjmp	.+144    	; 0xb05a <disk_initialize+0x17a>
    afca:	8a e7       	ldi	r24, 0x7A	; 122
    afcc:	40 e0       	ldi	r20, 0x00	; 0
    afce:	50 e0       	ldi	r21, 0x00	; 0
    afd0:	60 e0       	ldi	r22, 0x00	; 0
    afd2:	70 e0       	ldi	r23, 0x00	; 0
    afd4:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    afd8:	88 23       	and	r24, r24
    afda:	09 f0       	breq	.+2      	; 0xafde <disk_initialize+0xfe>
    afdc:	3e c0       	rjmp	.+124    	; 0xb05a <disk_initialize+0x17a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    afde:	e0 ec       	ldi	r30, 0xC0	; 192
    afe0:	fa e0       	ldi	r31, 0x0A	; 10
    afe2:	9f ef       	ldi	r25, 0xFF	; 255
    afe4:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    afe6:	80 91 c2 0a 	lds	r24, 0x0AC2
    afea:	87 ff       	sbrs	r24, 7
    afec:	fc cf       	rjmp	.-8      	; 0xafe6 <disk_initialize+0x106>
  return SPIE.DATA;
    afee:	80 91 c3 0a 	lds	r24, 0x0AC3
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
          for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    aff2:	d7 01       	movw	r26, r14
    aff4:	8d 93       	st	X+, r24
    aff6:	7d 01       	movw	r14, r26
    aff8:	a0 17       	cp	r26, r16
    affa:	b1 07       	cpc	r27, r17
    affc:	99 f7       	brne	.-26     	; 0xafe4 <disk_initialize+0x104>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    affe:	89 81       	ldd	r24, Y+1	; 0x01
    b000:	86 fd       	sbrc	r24, 6
    b002:	02 c0       	rjmp	.+4      	; 0xb008 <disk_initialize+0x128>
    b004:	14 e0       	ldi	r17, 0x04	; 4
    b006:	2a c0       	rjmp	.+84     	; 0xb05c <disk_initialize+0x17c>
    b008:	1c e0       	ldi	r17, 0x0C	; 12
    b00a:	28 c0       	rjmp	.+80     	; 0xb05c <disk_initialize+0x17c>
        }
      }
    } else {              /* SDSC or MMC */
      if (send_cmd(ACMD41, 0) <= 1)   {
    b00c:	89 ee       	ldi	r24, 0xE9	; 233
    b00e:	40 e0       	ldi	r20, 0x00	; 0
    b010:	50 e0       	ldi	r21, 0x00	; 0
    b012:	60 e0       	ldi	r22, 0x00	; 0
    b014:	70 e0       	ldi	r23, 0x00	; 0
    b016:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    b01a:	82 30       	cpi	r24, 0x02	; 2
    b01c:	18 f0       	brcs	.+6      	; 0xb024 <disk_initialize+0x144>
    b01e:	01 e4       	ldi	r16, 0x41	; 65
    b020:	11 e0       	ldi	r17, 0x01	; 1
    b022:	02 c0       	rjmp	.+4      	; 0xb028 <disk_initialize+0x148>
    b024:	09 ee       	ldi	r16, 0xE9	; 233
    b026:	12 e0       	ldi	r17, 0x02	; 2
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      while (Timer1 && send_cmd(cmd, 0));      /* Wait for leaving idle state */
    b028:	80 91 72 25 	lds	r24, 0x2572
    b02c:	88 23       	and	r24, r24
    b02e:	49 f0       	breq	.+18     	; 0xb042 <disk_initialize+0x162>
    b030:	80 2f       	mov	r24, r16
    b032:	40 e0       	ldi	r20, 0x00	; 0
    b034:	50 e0       	ldi	r21, 0x00	; 0
    b036:	60 e0       	ldi	r22, 0x00	; 0
    b038:	70 e0       	ldi	r23, 0x00	; 0
    b03a:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    b03e:	88 23       	and	r24, r24
    b040:	99 f7       	brne	.-26     	; 0xb028 <disk_initialize+0x148>
      if (!Timer1 || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    b042:	80 91 72 25 	lds	r24, 0x2572
    b046:	88 23       	and	r24, r24
    b048:	41 f0       	breq	.+16     	; 0xb05a <disk_initialize+0x17a>
    b04a:	80 e5       	ldi	r24, 0x50	; 80
    b04c:	40 e0       	ldi	r20, 0x00	; 0
    b04e:	52 e0       	ldi	r21, 0x02	; 2
    b050:	60 e0       	ldi	r22, 0x00	; 0
    b052:	70 e0       	ldi	r23, 0x00	; 0
    b054:	0e 94 f7 53 	call	0xa7ee	; 0xa7ee <send_cmd>
    b058:	81 11       	cpse	r24, r1
    b05a:	10 e0       	ldi	r17, 0x00	; 0
        ty = 0;
    }
  }
  CardType = ty;
    b05c:	10 93 74 25 	sts	0x2574, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    b060:	80 e1       	ldi	r24, 0x10	; 16
    b062:	e0 e8       	ldi	r30, 0x80	; 128
    b064:	f6 e0       	ldi	r31, 0x06	; 6
    b066:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    b068:	8f ef       	ldi	r24, 0xFF	; 255
    b06a:	e0 ec       	ldi	r30, 0xC0	; 192
    b06c:	fa e0       	ldi	r31, 0x0A	; 10
    b06e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    b070:	80 91 c2 0a 	lds	r24, 0x0AC2
    b074:	87 ff       	sbrs	r24, 7
    b076:	fc cf       	rjmp	.-8      	; 0xb070 <disk_initialize+0x190>
  return SPIE.DATA;
    b078:	80 91 c3 0a 	lds	r24, 0x0AC3
    }
  }
  CardType = ty;
  release_spi();

  if (ty) {      /* Initialization succeded */
    b07c:	11 23       	and	r17, r17
    b07e:	49 f0       	breq	.+18     	; 0xb092 <disk_initialize+0x1b2>
    Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT */
    b080:	80 91 e0 24 	lds	r24, 0x24E0
    b084:	8e 7f       	andi	r24, 0xFE	; 254
    b086:	80 93 e0 24 	sts	0x24E0, r24
    FCLK_FAST();
    b08a:	80 ed       	ldi	r24, 0xD0	; 208
    b08c:	80 93 c0 0a 	sts	0x0AC0, r24
    b090:	02 c0       	rjmp	.+4      	; 0xb096 <disk_initialize+0x1b6>
  } else {      /* Initialization failed */
    power_off();
    b092:	0e 94 1f 53 	call	0xa63e	; 0xa63e <power_off>
  }

  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
    b096:	81 e4       	ldi	r24, 0x41	; 65
    b098:	90 e0       	ldi	r25, 0x00	; 0
    b09a:	60 e0       	ldi	r22, 0x00	; 0
    b09c:	0e 94 33 24 	call	0x4866	; 0x4866 <CCPWrite>
  return Stat;
    b0a0:	80 91 e0 24 	lds	r24, 0x24E0
}
    b0a4:	24 96       	adiw	r28, 0x04	; 4
    b0a6:	e6 e0       	ldi	r30, 0x06	; 6
    b0a8:	0c 94 bf 5b 	jmp	0xb77e	; 0xb77e <__epilogue_restores__+0x18>

0000b0ac <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    b0ac:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    b0ae:	8e e1       	ldi	r24, 0x1E	; 30
    b0b0:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    b0b2:	8b e3       	ldi	r24, 0x3B	; 59
    b0b4:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    b0b6:	8b e0       	ldi	r24, 0x0B	; 11
    b0b8:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    b0ba:	83 e0       	ldi	r24, 0x03	; 3
    b0bc:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    b0be:	89 e0       	ldi	r24, 0x09	; 9
    b0c0:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    b0c2:	89 ed       	ldi	r24, 0xD9	; 217
    b0c4:	97 e0       	ldi	r25, 0x07	; 7
    b0c6:	80 83       	st	Z, r24
    b0c8:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    b0ca:	81 e0       	ldi	r24, 0x01	; 1
    b0cc:	90 e0       	ldi	r25, 0x00	; 0
    b0ce:	08 95       	ret

0000b0d0 <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    b0d0:	81 e0       	ldi	r24, 0x01	; 1
    b0d2:	90 e0       	ldi	r25, 0x00	; 0
    b0d4:	08 95       	ret

0000b0d6 <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    b0d6:	81 e0       	ldi	r24, 0x01	; 1
    b0d8:	90 e0       	ldi	r25, 0x00	; 0
    b0da:	08 95       	ret

0000b0dc <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    b0dc:	6f e6       	ldi	r22, 0x6F	; 111
    b0de:	7f e5       	ldi	r23, 0x5F	; 95
    b0e0:	83 e2       	ldi	r24, 0x23	; 35
    b0e2:	9b e3       	ldi	r25, 0x3B	; 59
    b0e4:	08 95       	ret

0000b0e6 <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    b0e6:	1f 92       	push	r1
    b0e8:	0f 92       	push	r0
    b0ea:	0f b6       	in	r0, 0x3f	; 63
    b0ec:	0f 92       	push	r0
    b0ee:	08 b6       	in	r0, 0x38	; 56
    b0f0:	0f 92       	push	r0
    b0f2:	09 b6       	in	r0, 0x39	; 57
    b0f4:	0f 92       	push	r0
    b0f6:	11 24       	eor	r1, r1
    b0f8:	18 be       	out	0x38, r1	; 56
    b0fa:	19 be       	out	0x39, r1	; 57
    b0fc:	8f 93       	push	r24
    b0fe:	9f 93       	push	r25
    b100:	af 93       	push	r26
    b102:	bf 93       	push	r27
	ticks++;
    b104:	80 91 75 25 	lds	r24, 0x2575
    b108:	90 91 76 25 	lds	r25, 0x2576
    b10c:	a0 91 77 25 	lds	r26, 0x2577
    b110:	b0 91 78 25 	lds	r27, 0x2578
    b114:	01 96       	adiw	r24, 0x01	; 1
    b116:	a1 1d       	adc	r26, r1
    b118:	b1 1d       	adc	r27, r1
    b11a:	80 93 75 25 	sts	0x2575, r24
    b11e:	90 93 76 25 	sts	0x2576, r25
    b122:	a0 93 77 25 	sts	0x2577, r26
    b126:	b0 93 78 25 	sts	0x2578, r27
}
    b12a:	bf 91       	pop	r27
    b12c:	af 91       	pop	r26
    b12e:	9f 91       	pop	r25
    b130:	8f 91       	pop	r24
    b132:	0f 90       	pop	r0
    b134:	09 be       	out	0x39, r0	; 57
    b136:	0f 90       	pop	r0
    b138:	08 be       	out	0x38, r0	; 56
    b13a:	0f 90       	pop	r0
    b13c:	0f be       	out	0x3f, r0	; 63
    b13e:	0f 90       	pop	r0
    b140:	1f 90       	pop	r1
    b142:	18 95       	reti

0000b144 <timer_init>:


void timer_init(void)
{	
	ticks=0;
    b144:	10 92 75 25 	sts	0x2575, r1
    b148:	10 92 76 25 	sts	0x2576, r1
    b14c:	10 92 77 25 	sts	0x2577, r1
    b150:	10 92 78 25 	sts	0x2578, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    b154:	e0 e0       	ldi	r30, 0x00	; 0
    b156:	fb e0       	ldi	r31, 0x0B	; 11
    b158:	84 e0       	ldi	r24, 0x04	; 4
    b15a:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    b15c:	8f e9       	ldi	r24, 0x9F	; 159
    b15e:	9f e0       	ldi	r25, 0x0F	; 15
    b160:	86 a3       	std	Z+38, r24	; 0x26
    b162:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    b164:	82 e0       	ldi	r24, 0x02	; 2
    b166:	86 83       	std	Z+6, r24	; 0x06
}
    b168:	08 95       	ret

0000b16a <Wait>:

void Wait(uint16_t delay)
{
    b16a:	ef 92       	push	r14
    b16c:	ff 92       	push	r15
    b16e:	0f 93       	push	r16
    b170:	1f 93       	push	r17
	uint32_t temp=ticks;
    b172:	e0 90 75 25 	lds	r14, 0x2575
    b176:	f0 90 76 25 	lds	r15, 0x2576
    b17a:	00 91 77 25 	lds	r16, 0x2577
    b17e:	10 91 78 25 	lds	r17, 0x2578

	while(ticks - temp < delay);
    b182:	9c 01       	movw	r18, r24
    b184:	40 e0       	ldi	r20, 0x00	; 0
    b186:	50 e0       	ldi	r21, 0x00	; 0
    b188:	80 91 75 25 	lds	r24, 0x2575
    b18c:	90 91 76 25 	lds	r25, 0x2576
    b190:	a0 91 77 25 	lds	r26, 0x2577
    b194:	b0 91 78 25 	lds	r27, 0x2578
    b198:	8e 19       	sub	r24, r14
    b19a:	9f 09       	sbc	r25, r15
    b19c:	a0 0b       	sbc	r26, r16
    b19e:	b1 0b       	sbc	r27, r17
    b1a0:	82 17       	cp	r24, r18
    b1a2:	93 07       	cpc	r25, r19
    b1a4:	a4 07       	cpc	r26, r20
    b1a6:	b5 07       	cpc	r27, r21
    b1a8:	78 f3       	brcs	.-34     	; 0xb188 <Wait+0x1e>
}
    b1aa:	1f 91       	pop	r17
    b1ac:	0f 91       	pop	r16
    b1ae:	ff 90       	pop	r15
    b1b0:	ef 90       	pop	r14
    b1b2:	08 95       	ret

0000b1b4 <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    b1b4:	e0 e4       	ldi	r30, 0x40	; 64
    b1b6:	fb e0       	ldi	r31, 0x0B	; 11
    b1b8:	85 e0       	ldi	r24, 0x05	; 5
    b1ba:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    b1bc:	10 a2       	std	Z+32, r1	; 0x20
    b1be:	11 a2       	std	Z+33, r1	; 0x21
}
    b1c0:	08 95       	ret

0000b1c2 <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    b1c2:	e0 e4       	ldi	r30, 0x40	; 64
    b1c4:	fb e0       	ldi	r31, 0x0B	; 11
    b1c6:	20 a1       	ldd	r18, Z+32	; 0x20
    b1c8:	31 a1       	ldd	r19, Z+33	; 0x21
    b1ca:	22 0f       	add	r18, r18
    b1cc:	33 1f       	adc	r19, r19
	return del_t;
}	
    b1ce:	c9 01       	movw	r24, r18
    b1d0:	08 95       	ret

0000b1d2 <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    b1d2:	10 92 75 25 	sts	0x2575, r1
    b1d6:	10 92 76 25 	sts	0x2576, r1
    b1da:	10 92 77 25 	sts	0x2577, r1
    b1de:	10 92 78 25 	sts	0x2578, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    b1e2:	e0 e0       	ldi	r30, 0x00	; 0
    b1e4:	fb e0       	ldi	r31, 0x0B	; 11
    b1e6:	84 e0       	ldi	r24, 0x04	; 4
    b1e8:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    b1ea:	8f e9       	ldi	r24, 0x9F	; 159
    b1ec:	9f e0       	ldi	r25, 0x0F	; 15
    b1ee:	86 a3       	std	Z+38, r24	; 0x26
    b1f0:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    b1f2:	82 e0       	ldi	r24, 0x02	; 2
    b1f4:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    b1f6:	10 a2       	std	Z+32, r1	; 0x20
    b1f8:	11 a2       	std	Z+33, r1	; 0x21
}
    b1fa:	08 95       	ret

0000b1fc <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    b1fc:	20 91 75 25 	lds	r18, 0x2575
    b200:	30 91 76 25 	lds	r19, 0x2576
    b204:	40 91 77 25 	lds	r20, 0x2577
    b208:	50 91 78 25 	lds	r21, 0x2578
	return del_t;
}	
    b20c:	b9 01       	movw	r22, r18
    b20e:	ca 01       	movw	r24, r20
    b210:	08 95       	ret

0000b212 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    b212:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b214:	e0 ec       	ldi	r30, 0xC0	; 192
    b216:	f1 e0       	ldi	r31, 0x01	; 1
    b218:	80 91 cf 01 	lds	r24, 0x01CF
    b21c:	87 fd       	sbrc	r24, 7
    b21e:	fa cf       	rjmp	.-12     	; 0xb214 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    b220:	26 2f       	mov	r18, r22
    b222:	30 e0       	ldi	r19, 0x00	; 0
    b224:	2f 71       	andi	r18, 0x1F	; 31
    b226:	30 70       	andi	r19, 0x00	; 0
    b228:	89 2f       	mov	r24, r25
    b22a:	90 e0       	ldi	r25, 0x00	; 0
    b22c:	45 e0       	ldi	r20, 0x05	; 5
    b22e:	88 0f       	add	r24, r24
    b230:	99 1f       	adc	r25, r25
    b232:	4a 95       	dec	r20
    b234:	e1 f7       	brne	.-8      	; 0xb22e <EEPROM_ReadByte+0x1c>
    b236:	28 2b       	or	r18, r24
    b238:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    b23a:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b23e:	83 2f       	mov	r24, r19
    b240:	8f 71       	andi	r24, 0x1F	; 31
    b242:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b244:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    b246:	86 e0       	ldi	r24, 0x06	; 6
    b248:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b24a:	eb ec       	ldi	r30, 0xCB	; 203
    b24c:	f1 e0       	ldi	r31, 0x01	; 1
    b24e:	21 e0       	ldi	r18, 0x01	; 1
    b250:	30 e0       	ldi	r19, 0x00	; 0
    b252:	88 ed       	ldi	r24, 0xD8	; 216
    b254:	90 e0       	ldi	r25, 0x00	; 0
    b256:	84 bf       	out	0x34, r24	; 52
    b258:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    b25a:	80 91 c4 01 	lds	r24, 0x01C4
}
    b25e:	08 95       	ret

0000b260 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b260:	80 91 cf 01 	lds	r24, 0x01CF
    b264:	87 fd       	sbrc	r24, 7
    b266:	fc cf       	rjmp	.-8      	; 0xb260 <EEPROM_WaitForNVM>
}
    b268:	08 95       	ret

0000b26a <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b26a:	80 91 cf 01 	lds	r24, 0x01CF
    b26e:	87 fd       	sbrc	r24, 7
    b270:	fc cf       	rjmp	.-8      	; 0xb26a <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    b272:	80 91 cf 01 	lds	r24, 0x01CF
    b276:	81 ff       	sbrs	r24, 1
    b278:	0c c0       	rjmp	.+24     	; 0xb292 <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    b27a:	86 e3       	ldi	r24, 0x36	; 54
    b27c:	e0 ec       	ldi	r30, 0xC0	; 192
    b27e:	f1 e0       	ldi	r31, 0x01	; 1
    b280:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b282:	eb ec       	ldi	r30, 0xCB	; 203
    b284:	f1 e0       	ldi	r31, 0x01	; 1
    b286:	21 e0       	ldi	r18, 0x01	; 1
    b288:	30 e0       	ldi	r19, 0x00	; 0
    b28a:	88 ed       	ldi	r24, 0xD8	; 216
    b28c:	90 e0       	ldi	r25, 0x00	; 0
    b28e:	84 bf       	out	0x34, r24	; 52
    b290:	20 83       	st	Z, r18
    b292:	08 95       	ret

0000b294 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    b294:	df 92       	push	r13
    b296:	ef 92       	push	r14
    b298:	ff 92       	push	r15
    b29a:	0f 93       	push	r16
    b29c:	1f 93       	push	r17
    b29e:	e8 2e       	mov	r14, r24
    b2a0:	06 2f       	mov	r16, r22
    b2a2:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    b2a4:	0e 94 35 59 	call	0xb26a	; 0xb26a <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    b2a8:	e0 ec       	ldi	r30, 0xC0	; 192
    b2aa:	f1 e0       	ldi	r31, 0x01	; 1
    b2ac:	83 e3       	ldi	r24, 0x33	; 51
    b2ae:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    b2b0:	10 e0       	ldi	r17, 0x00	; 0
    b2b2:	0f 71       	andi	r16, 0x1F	; 31
    b2b4:	10 70       	andi	r17, 0x00	; 0
    b2b6:	ff 24       	eor	r15, r15
    b2b8:	55 e0       	ldi	r21, 0x05	; 5
    b2ba:	ee 0c       	add	r14, r14
    b2bc:	ff 1c       	adc	r15, r15
    b2be:	5a 95       	dec	r21
    b2c0:	e1 f7       	brne	.-8      	; 0xb2ba <EEPROM_WriteByte+0x26>
    b2c2:	0e 29       	or	r16, r14
    b2c4:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    b2c6:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b2c8:	81 2f       	mov	r24, r17
    b2ca:	8f 71       	andi	r24, 0x1F	; 31
    b2cc:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b2ce:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    b2d0:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    b2d2:	85 e3       	ldi	r24, 0x35	; 53
    b2d4:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b2d6:	eb ec       	ldi	r30, 0xCB	; 203
    b2d8:	f1 e0       	ldi	r31, 0x01	; 1
    b2da:	21 e0       	ldi	r18, 0x01	; 1
    b2dc:	30 e0       	ldi	r19, 0x00	; 0
    b2de:	88 ed       	ldi	r24, 0xD8	; 216
    b2e0:	90 e0       	ldi	r25, 0x00	; 0
    b2e2:	84 bf       	out	0x34, r24	; 52
    b2e4:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    b2e6:	1f 91       	pop	r17
    b2e8:	0f 91       	pop	r16
    b2ea:	ff 90       	pop	r15
    b2ec:	ef 90       	pop	r14
    b2ee:	df 90       	pop	r13
    b2f0:	08 95       	ret

0000b2f2 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    b2f2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b2f4:	e0 ec       	ldi	r30, 0xC0	; 192
    b2f6:	f1 e0       	ldi	r31, 0x01	; 1
    b2f8:	80 91 cf 01 	lds	r24, 0x01CF
    b2fc:	87 fd       	sbrc	r24, 7
    b2fe:	fa cf       	rjmp	.-12     	; 0xb2f4 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    b300:	83 e3       	ldi	r24, 0x33	; 51
    b302:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    b304:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    b308:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    b30a:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    b30c:	64 83       	std	Z+4, r22	; 0x04
}
    b30e:	08 95       	ret

0000b310 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    b310:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b312:	e0 ec       	ldi	r30, 0xC0	; 192
    b314:	f1 e0       	ldi	r31, 0x01	; 1
    b316:	80 91 cf 01 	lds	r24, 0x01CF
    b31a:	87 fd       	sbrc	r24, 7
    b31c:	fa cf       	rjmp	.-12     	; 0xb312 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    b31e:	83 e3       	ldi	r24, 0x33	; 51
    b320:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    b322:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    b324:	12 82       	std	Z+2, r1	; 0x02
    b326:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    b328:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    b32c:	8d 91       	ld	r24, X+
    b32e:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    b330:	9f 5f       	subi	r25, 0xFF	; 255
    b332:	90 32       	cpi	r25, 0x20	; 32
    b334:	c9 f7       	brne	.-14     	; 0xb328 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    b336:	08 95       	ret

0000b338 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    b338:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b33a:	e0 ec       	ldi	r30, 0xC0	; 192
    b33c:	f1 e0       	ldi	r31, 0x01	; 1
    b33e:	80 91 cf 01 	lds	r24, 0x01CF
    b342:	87 fd       	sbrc	r24, 7
    b344:	fa cf       	rjmp	.-12     	; 0xb33a <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    b346:	89 2f       	mov	r24, r25
    b348:	90 e0       	ldi	r25, 0x00	; 0
    b34a:	65 e0       	ldi	r22, 0x05	; 5
    b34c:	88 0f       	add	r24, r24
    b34e:	99 1f       	adc	r25, r25
    b350:	6a 95       	dec	r22
    b352:	e1 f7       	brne	.-8      	; 0xb34c <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    b354:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b358:	89 2f       	mov	r24, r25
    b35a:	8f 71       	andi	r24, 0x1F	; 31
    b35c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b35e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    b360:	85 e3       	ldi	r24, 0x35	; 53
    b362:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b364:	eb ec       	ldi	r30, 0xCB	; 203
    b366:	f1 e0       	ldi	r31, 0x01	; 1
    b368:	21 e0       	ldi	r18, 0x01	; 1
    b36a:	30 e0       	ldi	r19, 0x00	; 0
    b36c:	88 ed       	ldi	r24, 0xD8	; 216
    b36e:	90 e0       	ldi	r25, 0x00	; 0
    b370:	84 bf       	out	0x34, r24	; 52
    b372:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    b374:	08 95       	ret

0000b376 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    b376:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b378:	e0 ec       	ldi	r30, 0xC0	; 192
    b37a:	f1 e0       	ldi	r31, 0x01	; 1
    b37c:	80 91 cf 01 	lds	r24, 0x01CF
    b380:	87 fd       	sbrc	r24, 7
    b382:	fa cf       	rjmp	.-12     	; 0xb378 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    b384:	89 2f       	mov	r24, r25
    b386:	90 e0       	ldi	r25, 0x00	; 0
    b388:	75 e0       	ldi	r23, 0x05	; 5
    b38a:	88 0f       	add	r24, r24
    b38c:	99 1f       	adc	r25, r25
    b38e:	7a 95       	dec	r23
    b390:	e1 f7       	brne	.-8      	; 0xb38a <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    b392:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b396:	89 2f       	mov	r24, r25
    b398:	8f 71       	andi	r24, 0x1F	; 31
    b39a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b39c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    b39e:	82 e3       	ldi	r24, 0x32	; 50
    b3a0:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b3a2:	eb ec       	ldi	r30, 0xCB	; 203
    b3a4:	f1 e0       	ldi	r31, 0x01	; 1
    b3a6:	21 e0       	ldi	r18, 0x01	; 1
    b3a8:	30 e0       	ldi	r19, 0x00	; 0
    b3aa:	88 ed       	ldi	r24, 0xD8	; 216
    b3ac:	90 e0       	ldi	r25, 0x00	; 0
    b3ae:	84 bf       	out	0x34, r24	; 52
    b3b0:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    b3b2:	08 95       	ret

0000b3b4 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    b3b4:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b3b6:	e0 ec       	ldi	r30, 0xC0	; 192
    b3b8:	f1 e0       	ldi	r31, 0x01	; 1
    b3ba:	80 91 cf 01 	lds	r24, 0x01CF
    b3be:	87 fd       	sbrc	r24, 7
    b3c0:	fa cf       	rjmp	.-12     	; 0xb3b6 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    b3c2:	89 2f       	mov	r24, r25
    b3c4:	90 e0       	ldi	r25, 0x00	; 0
    b3c6:	a5 e0       	ldi	r26, 0x05	; 5
    b3c8:	88 0f       	add	r24, r24
    b3ca:	99 1f       	adc	r25, r25
    b3cc:	aa 95       	dec	r26
    b3ce:	e1 f7       	brne	.-8      	; 0xb3c8 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    b3d0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b3d4:	89 2f       	mov	r24, r25
    b3d6:	8f 71       	andi	r24, 0x1F	; 31
    b3d8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b3da:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    b3dc:	84 e3       	ldi	r24, 0x34	; 52
    b3de:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b3e0:	eb ec       	ldi	r30, 0xCB	; 203
    b3e2:	f1 e0       	ldi	r31, 0x01	; 1
    b3e4:	21 e0       	ldi	r18, 0x01	; 1
    b3e6:	30 e0       	ldi	r19, 0x00	; 0
    b3e8:	88 ed       	ldi	r24, 0xD8	; 216
    b3ea:	90 e0       	ldi	r25, 0x00	; 0
    b3ec:	84 bf       	out	0x34, r24	; 52
    b3ee:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    b3f0:	08 95       	ret

0000b3f2 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b3f2:	80 91 cf 01 	lds	r24, 0x01CF
    b3f6:	87 fd       	sbrc	r24, 7
    b3f8:	fc cf       	rjmp	.-8      	; 0xb3f2 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    b3fa:	80 e3       	ldi	r24, 0x30	; 48
    b3fc:	e0 ec       	ldi	r30, 0xC0	; 192
    b3fe:	f1 e0       	ldi	r31, 0x01	; 1
    b400:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b402:	eb ec       	ldi	r30, 0xCB	; 203
    b404:	f1 e0       	ldi	r31, 0x01	; 1
    b406:	21 e0       	ldi	r18, 0x01	; 1
    b408:	30 e0       	ldi	r19, 0x00	; 0
    b40a:	88 ed       	ldi	r24, 0xD8	; 216
    b40c:	90 e0       	ldi	r25, 0x00	; 0
    b40e:	84 bf       	out	0x34, r24	; 52
    b410:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    b412:	08 95       	ret

0000b414 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    b414:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    b416:	19 f4       	brne	.+6      	; 0xb41e <xputc+0xa>
	ldi	r24, 13		;
    b418:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    b41a:	01 d0       	rcall	.+2      	; 0xb41e <xputc+0xa>
	ldi	r24, 10		;/
    b41c:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    b41e:	ff 93       	push	r31
	push	ZL
    b420:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    b422:	e0 91 79 25 	lds	r30, 0x2579
	lds	ZH, xfunc_out+1	;/
    b426:	f0 91 7a 25 	lds	r31, 0x257A
	icall
    b42a:	09 95       	icall
	pop	ZL
    b42c:	ef 91       	pop	r30
	pop	ZH
    b42e:	ff 91       	pop	r31
	ret
    b430:	08 95       	ret

0000b432 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    b432:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    b434:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    b436:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    b438:	11 f0       	breq	.+4      	; 0xb43e <xputs+0xc>
	rcall	xputc
    b43a:	ec df       	rcall	.-40     	; 0xb414 <xputc>
	rjmp	1b
    b43c:	fb cf       	rjmp	.-10     	; 0xb434 <xputs+0x2>
2:	ret
    b43e:	08 95       	ret

0000b440 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    b440:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    b442:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    b444:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    b446:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    b448:	0c c0       	rjmp	.+24     	; 0xb462 <xitoa+0x22>
	neg	r20		;
    b44a:	41 95       	neg	r20
	sbrs	r25, 7		;
    b44c:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    b44e:	09 c0       	rjmp	.+18     	; 0xb462 <xitoa+0x22>
	ldi	r30, '-'	;
    b450:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    b452:	60 95       	com	r22
	com	r23		;
    b454:	70 95       	com	r23
	com	r24		;
    b456:	80 95       	com	r24
	com	r25		;
    b458:	90 95       	com	r25
	adc	r22, r1		;
    b45a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    b45c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    b45e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    b460:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    b462:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    b464:	02 c0       	rjmp	.+4      	; 0xb46a <xitoa+0x2a>
	neg	r18		;
    b466:	21 95       	neg	r18
	ldi	r19, '0'	;/
    b468:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    b46a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    b46c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    b46e:	66 0f       	add	r22, r22
	rol	r23		;
    b470:	77 1f       	adc	r23, r23
	rol	r24		;
    b472:	88 1f       	adc	r24, r24
	rol	r25		;
    b474:	99 1f       	adc	r25, r25
	rol	r26		;
    b476:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    b478:	a4 17       	cp	r26, r20
	brcs	3f		;
    b47a:	10 f0       	brcs	.+4      	; 0xb480 <xitoa+0x40>
	sub	r26, r20	;
    b47c:	a4 1b       	sub	r26, r20
	inc	r22		;
    b47e:	63 95       	inc	r22
3:	dec	r21		;
    b480:	5a 95       	dec	r21
	brne	2b		;/
    b482:	a9 f7       	brne	.-22     	; 0xb46e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    b484:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    b486:	08 f0       	brcs	.+2      	; 0xb48a <xitoa+0x4a>
	subi	r26, -7		;
    b488:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    b48a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    b48c:	af 93       	push	r26
	inc	r31		;/
    b48e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    b490:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    b492:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    b494:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    b496:	91 05       	cpc	r25, r1
	brne	1b		;/
    b498:	41 f7       	brne	.-48     	; 0xb46a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    b49a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    b49c:	11 f4       	brne	.+4      	; 0xb4a2 <xitoa+0x62>
	push	r30		;
    b49e:	ef 93       	push	r30
	inc	r31		;/
    b4a0:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    b4a2:	f2 17       	cp	r31, r18
	brcc	6f		;
    b4a4:	18 f4       	brcc	.+6      	; 0xb4ac <xitoa+0x6c>
	push	r19		;
    b4a6:	3f 93       	push	r19
	inc	r31		;
    b4a8:	f3 95       	inc	r31
	rjmp	5b		;/
    b4aa:	fb cf       	rjmp	.-10     	; 0xb4a2 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    b4ac:	8f 91       	pop	r24
	rcall	xputc		;
    b4ae:	b2 df       	rcall	.-156    	; 0xb414 <xputc>
	dec	r31		;
    b4b0:	fa 95       	dec	r31
	brne	6b		;/
    b4b2:	e1 f7       	brne	.-8      	; 0xb4ac <xitoa+0x6c>

	ret
    b4b4:	08 95       	ret

0000b4b6 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    b4b6:	df 93       	push	r29
	push	YL
    b4b8:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    b4ba:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    b4bc:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    b4be:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    b4c0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    b4c2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    b4c4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    b4c6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    b4c8:	21 f0       	breq	.+8      	; 0xb4d2 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    b4ca:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    b4cc:	29 f0       	breq	.+10     	; 0xb4d8 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    b4ce:	a2 df       	rcall	.-188    	; 0xb414 <xputc>
	rjmp	0b		;/
    b4d0:	f9 cf       	rjmp	.-14     	; 0xb4c4 <xprintf+0xe>
90:	pop	YL
    b4d2:	cf 91       	pop	r28
	pop	YH
    b4d4:	df 91       	pop	r29
	ret
    b4d6:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    b4d8:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    b4da:	e8 94       	clt
	_LPMI	r21		;Get flags
    b4dc:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    b4de:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    b4e0:	b1 f3       	breq	.-20     	; 0xb4ce <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    b4e2:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    b4e4:	11 f4       	brne	.+4      	; 0xb4ea <xprintf+0x34>
	set			;/
    b4e6:	68 94       	set
22:	_LPMI	r21		;Get width
    b4e8:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    b4ea:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    b4ec:	48 f4       	brcc	.+18     	; 0xb500 <xprintf+0x4a>
	subi	r21, '0'	;
    b4ee:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    b4f0:	80 f3       	brcs	.-32     	; 0xb4d2 <xprintf+0x1c>
	lsl	r18		;
    b4f2:	22 0f       	add	r18, r18
	mov	r0, r18		;
    b4f4:	02 2e       	mov	r0, r18
	lsl	r18		;
    b4f6:	22 0f       	add	r18, r18
	lsl	r18		;
    b4f8:	22 0f       	add	r18, r18
	add	r18, r0		;
    b4fa:	20 0d       	add	r18, r0
	add	r18, r21	;
    b4fc:	25 0f       	add	r18, r21
	rjmp	22b		;/
    b4fe:	f4 cf       	rjmp	.-24     	; 0xb4e8 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    b500:	0e f4       	brtc	.+2      	; 0xb504 <xprintf+0x4e>
	neg	r18		;
    b502:	21 95       	neg	r18
25:	ld	r24, Y+		;
    b504:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    b506:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    b508:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    b50a:	09 f3       	breq	.-62     	; 0xb4ce <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    b50c:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    b50e:	29 f1       	breq	.+74     	; 0xb55a <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    b510:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    b512:	59 f1       	breq	.+86     	; 0xb56a <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    b514:	bc 01       	movw	r22, r24
	clr	r24		;
    b516:	88 27       	eor	r24, r24
	clr	r25		;
    b518:	99 27       	eor	r25, r25
	clt			;/
    b51a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    b51c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    b51e:	21 f4       	brne	.+8      	; 0xb528 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    b520:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    b522:	99 91       	ld	r25, Y+
	set			;
    b524:	68 94       	set
	_LPMI	r21		;/
    b526:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    b528:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    b52a:	39 f4       	brne	.+14     	; 0xb53a <xprintf+0x84>
	ldi	r20, -10	;
    b52c:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    b52e:	7e f0       	brts	.+30     	; 0xb54e <xprintf+0x98>
	sbrs	r23, 7		;
    b530:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    b532:	0d c0       	rjmp	.+26     	; 0xb54e <xprintf+0x98>
	ldi	r24, -1		;
    b534:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    b536:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    b538:	0a c0       	rjmp	.+20     	; 0xb54e <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    b53a:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    b53c:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    b53e:	39 f0       	breq	.+14     	; 0xb54e <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    b540:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    b542:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    b544:	21 f0       	breq	.+8      	; 0xb54e <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    b546:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    b548:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    b54a:	09 f0       	breq	.+2      	; 0xb54e <xprintf+0x98>
	rjmp	90b		;abort
    b54c:	c2 cf       	rjmp	.-124    	; 0xb4d2 <xprintf+0x1c>
40:	push	ZH		;Output the value
    b54e:	ff 93       	push	r31
	push	ZL		;
    b550:	ef 93       	push	r30
	rcall	xitoa		;
    b552:	76 df       	rcall	.-276    	; 0xb440 <xitoa>
42:	pop	ZL		;
    b554:	ef 91       	pop	r30
	pop	ZH		;
    b556:	ff 91       	pop	r31
	rjmp	0b		;/
    b558:	b5 cf       	rjmp	.-150    	; 0xb4c4 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    b55a:	ff 93       	push	r31
	push	ZL
    b55c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    b55e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    b560:	81 91       	ld	r24, Z+
	cpi	r24, 0
    b562:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    b564:	b9 f3       	breq	.-18     	; 0xb554 <xprintf+0x9e>
	rcall	xputc
    b566:	56 df       	rcall	.-340    	; 0xb414 <xputc>
	rjmp	51b
    b568:	fb cf       	rjmp	.-10     	; 0xb560 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    b56a:	ff 93       	push	r31
	push	ZL
    b56c:	ef 93       	push	r30
	rcall	xputs
    b56e:	61 df       	rcall	.-318    	; 0xb432 <xputs>
	rjmp	42b
    b570:	f1 cf       	rjmp	.-30     	; 0xb554 <xprintf+0x9e>

0000b572 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    b572:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    b574:	dc 01       	movw	r26, r24
	ld	ZL, X+
    b576:	ed 91       	ld	r30, X+
	ld	ZH, X+
    b578:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    b57a:	22 27       	eor	r18, r18
	clr	r19		;
    b57c:	33 27       	eor	r19, r19
	clr	r20		;
    b57e:	44 27       	eor	r20, r20
	clr	r21		;/
    b580:	55 27       	eor	r21, r21
	clt			;T = 0;
    b582:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    b584:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    b586:	01 c0       	rjmp	.+2      	; 0xb58a <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    b588:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    b58a:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    b58c:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    b58e:	e1 f3       	breq	.-8      	; 0xb588 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    b590:	a8 f1       	brcs	.+106    	; 0xb5fc <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    b592:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    b594:	11 f4       	brne	.+4      	; 0xb59a <xatoi+0x28>
	set			; continue;
    b596:	68 94       	set
	rjmp	40b		;}
    b598:	f7 cf       	rjmp	.-18     	; 0xb588 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    b59a:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    b59c:	78 f5       	brcc	.+94     	; 0xb5fc <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    b59e:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    b5a0:	68 f1       	brcs	.+90     	; 0xb5fc <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    b5a2:	71 f4       	brne	.+28     	; 0xb5c0 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    b5a4:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    b5a6:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    b5a8:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    b5aa:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    b5ac:	48 f1       	brcs	.+82     	; 0xb600 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    b5ae:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    b5b0:	11 f4       	brne	.+4      	; 0xb5b6 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    b5b2:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    b5b4:	03 c0       	rjmp	.+6      	; 0xb5bc <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    b5b6:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    b5b8:	19 f4       	brne	.+6      	; 0xb5c0 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    b5ba:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    b5bc:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    b5be:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    b5c0:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    b5c2:	f0 f0       	brcs	.+60     	; 0xb600 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    b5c4:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    b5c6:	08 f0       	brcs	.+2      	; 0xb5ca <xatoi+0x58>
	subi	r22, 0x20	;/
    b5c8:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    b5ca:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    b5cc:	b8 f0       	brcs	.+46     	; 0xb5fc <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    b5ce:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    b5d0:	18 f0       	brcs	.+6      	; 0xb5d8 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    b5d2:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    b5d4:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    b5d6:	90 f0       	brcs	.+36     	; 0xb5fc <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    b5d8:	69 17       	cp	r22, r25
	brcc	70f		;/
    b5da:	80 f4       	brcc	.+32     	; 0xb5fc <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    b5dc:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    b5de:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    b5e0:	08 f4       	brcc	.+2      	; 0xb5e4 <xatoi+0x72>
	add	r23, r25	;
    b5e2:	79 0f       	add	r23, r25
62:	lsr	r23		;
    b5e4:	76 95       	lsr	r23
	ror	r21		;
    b5e6:	57 95       	ror	r21
	ror	r20		;
    b5e8:	47 95       	ror	r20
	ror	r19		;
    b5ea:	37 95       	ror	r19
	ror	r18		;
    b5ec:	27 95       	ror	r18
	dec	r24		;
    b5ee:	8a 95       	dec	r24
	brne	61b		;/
    b5f0:	b9 f7       	brne	.-18     	; 0xb5e0 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    b5f2:	26 0f       	add	r18, r22
	adc	r19, r24	;
    b5f4:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    b5f6:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    b5f8:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    b5fa:	e0 cf       	rjmp	.-64     	; 0xb5bc <xatoi+0x4a>

70:	ldi	r24, 0
    b5fc:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    b5fe:	01 c0       	rjmp	.+2      	; 0xb602 <xatoi+0x90>
80:	ldi	r24, 1
    b600:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    b602:	4e f4       	brtc	.+18     	; 0xb616 <xatoi+0xa4>
	clr	r22
    b604:	66 27       	eor	r22, r22
	com	r18
    b606:	20 95       	com	r18
	com	r19
    b608:	30 95       	com	r19
	com	r20
    b60a:	40 95       	com	r20
	com	r21
    b60c:	50 95       	com	r21
	adc	r18, r22
    b60e:	26 1f       	adc	r18, r22
	adc	r19, r22
    b610:	36 1f       	adc	r19, r22
	adc	r20, r22
    b612:	46 1f       	adc	r20, r22
	adc	r21, r22
    b614:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    b616:	fe 93       	st	-X, r31
	st	-X, ZL
    b618:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    b61a:	d0 01       	movw	r26, r0
	st	X+, r18
    b61c:	2d 93       	st	X+, r18
	st	X+, r19
    b61e:	3d 93       	st	X+, r19
	st	X+, r20
    b620:	4d 93       	st	X+, r20
	st	X+, r21
    b622:	5d 93       	st	X+, r21
	clr	r1
    b624:	11 24       	eor	r1, r1
	ret
    b626:	08 95       	ret

0000b628 <__mulsi3>:
    b628:	62 9f       	mul	r22, r18
    b62a:	d0 01       	movw	r26, r0
    b62c:	73 9f       	mul	r23, r19
    b62e:	f0 01       	movw	r30, r0
    b630:	82 9f       	mul	r24, r18
    b632:	e0 0d       	add	r30, r0
    b634:	f1 1d       	adc	r31, r1
    b636:	64 9f       	mul	r22, r20
    b638:	e0 0d       	add	r30, r0
    b63a:	f1 1d       	adc	r31, r1
    b63c:	92 9f       	mul	r25, r18
    b63e:	f0 0d       	add	r31, r0
    b640:	83 9f       	mul	r24, r19
    b642:	f0 0d       	add	r31, r0
    b644:	74 9f       	mul	r23, r20
    b646:	f0 0d       	add	r31, r0
    b648:	65 9f       	mul	r22, r21
    b64a:	f0 0d       	add	r31, r0
    b64c:	99 27       	eor	r25, r25
    b64e:	72 9f       	mul	r23, r18
    b650:	b0 0d       	add	r27, r0
    b652:	e1 1d       	adc	r30, r1
    b654:	f9 1f       	adc	r31, r25
    b656:	63 9f       	mul	r22, r19
    b658:	b0 0d       	add	r27, r0
    b65a:	e1 1d       	adc	r30, r1
    b65c:	f9 1f       	adc	r31, r25
    b65e:	bd 01       	movw	r22, r26
    b660:	cf 01       	movw	r24, r30
    b662:	11 24       	eor	r1, r1
    b664:	08 95       	ret

0000b666 <__udivmodhi4>:
    b666:	aa 1b       	sub	r26, r26
    b668:	bb 1b       	sub	r27, r27
    b66a:	51 e1       	ldi	r21, 0x11	; 17
    b66c:	07 c0       	rjmp	.+14     	; 0xb67c <__udivmodhi4_ep>

0000b66e <__udivmodhi4_loop>:
    b66e:	aa 1f       	adc	r26, r26
    b670:	bb 1f       	adc	r27, r27
    b672:	a6 17       	cp	r26, r22
    b674:	b7 07       	cpc	r27, r23
    b676:	10 f0       	brcs	.+4      	; 0xb67c <__udivmodhi4_ep>
    b678:	a6 1b       	sub	r26, r22
    b67a:	b7 0b       	sbc	r27, r23

0000b67c <__udivmodhi4_ep>:
    b67c:	88 1f       	adc	r24, r24
    b67e:	99 1f       	adc	r25, r25
    b680:	5a 95       	dec	r21
    b682:	a9 f7       	brne	.-22     	; 0xb66e <__udivmodhi4_loop>
    b684:	80 95       	com	r24
    b686:	90 95       	com	r25
    b688:	bc 01       	movw	r22, r24
    b68a:	cd 01       	movw	r24, r26
    b68c:	08 95       	ret

0000b68e <__divmodhi4>:
    b68e:	97 fb       	bst	r25, 7
    b690:	09 2e       	mov	r0, r25
    b692:	07 26       	eor	r0, r23
    b694:	0a d0       	rcall	.+20     	; 0xb6aa <__divmodhi4_neg1>
    b696:	77 fd       	sbrc	r23, 7
    b698:	04 d0       	rcall	.+8      	; 0xb6a2 <__divmodhi4_neg2>
    b69a:	e5 df       	rcall	.-54     	; 0xb666 <__udivmodhi4>
    b69c:	06 d0       	rcall	.+12     	; 0xb6aa <__divmodhi4_neg1>
    b69e:	00 20       	and	r0, r0
    b6a0:	1a f4       	brpl	.+6      	; 0xb6a8 <__divmodhi4_exit>

0000b6a2 <__divmodhi4_neg2>:
    b6a2:	70 95       	com	r23
    b6a4:	61 95       	neg	r22
    b6a6:	7f 4f       	sbci	r23, 0xFF	; 255

0000b6a8 <__divmodhi4_exit>:
    b6a8:	08 95       	ret

0000b6aa <__divmodhi4_neg1>:
    b6aa:	f6 f7       	brtc	.-4      	; 0xb6a8 <__divmodhi4_exit>
    b6ac:	90 95       	com	r25
    b6ae:	81 95       	neg	r24
    b6b0:	9f 4f       	sbci	r25, 0xFF	; 255
    b6b2:	08 95       	ret

0000b6b4 <__udivmodsi4>:
    b6b4:	a1 e2       	ldi	r26, 0x21	; 33
    b6b6:	1a 2e       	mov	r1, r26
    b6b8:	aa 1b       	sub	r26, r26
    b6ba:	bb 1b       	sub	r27, r27
    b6bc:	fd 01       	movw	r30, r26
    b6be:	0d c0       	rjmp	.+26     	; 0xb6da <__udivmodsi4_ep>

0000b6c0 <__udivmodsi4_loop>:
    b6c0:	aa 1f       	adc	r26, r26
    b6c2:	bb 1f       	adc	r27, r27
    b6c4:	ee 1f       	adc	r30, r30
    b6c6:	ff 1f       	adc	r31, r31
    b6c8:	a2 17       	cp	r26, r18
    b6ca:	b3 07       	cpc	r27, r19
    b6cc:	e4 07       	cpc	r30, r20
    b6ce:	f5 07       	cpc	r31, r21
    b6d0:	20 f0       	brcs	.+8      	; 0xb6da <__udivmodsi4_ep>
    b6d2:	a2 1b       	sub	r26, r18
    b6d4:	b3 0b       	sbc	r27, r19
    b6d6:	e4 0b       	sbc	r30, r20
    b6d8:	f5 0b       	sbc	r31, r21

0000b6da <__udivmodsi4_ep>:
    b6da:	66 1f       	adc	r22, r22
    b6dc:	77 1f       	adc	r23, r23
    b6de:	88 1f       	adc	r24, r24
    b6e0:	99 1f       	adc	r25, r25
    b6e2:	1a 94       	dec	r1
    b6e4:	69 f7       	brne	.-38     	; 0xb6c0 <__udivmodsi4_loop>
    b6e6:	60 95       	com	r22
    b6e8:	70 95       	com	r23
    b6ea:	80 95       	com	r24
    b6ec:	90 95       	com	r25
    b6ee:	9b 01       	movw	r18, r22
    b6f0:	ac 01       	movw	r20, r24
    b6f2:	bd 01       	movw	r22, r26
    b6f4:	cf 01       	movw	r24, r30
    b6f6:	08 95       	ret

0000b6f8 <__divmodsi4>:
    b6f8:	97 fb       	bst	r25, 7
    b6fa:	09 2e       	mov	r0, r25
    b6fc:	05 26       	eor	r0, r21
    b6fe:	0e d0       	rcall	.+28     	; 0xb71c <__divmodsi4_neg1>
    b700:	57 fd       	sbrc	r21, 7
    b702:	04 d0       	rcall	.+8      	; 0xb70c <__divmodsi4_neg2>
    b704:	d7 df       	rcall	.-82     	; 0xb6b4 <__udivmodsi4>
    b706:	0a d0       	rcall	.+20     	; 0xb71c <__divmodsi4_neg1>
    b708:	00 1c       	adc	r0, r0
    b70a:	38 f4       	brcc	.+14     	; 0xb71a <__divmodsi4_exit>

0000b70c <__divmodsi4_neg2>:
    b70c:	50 95       	com	r21
    b70e:	40 95       	com	r20
    b710:	30 95       	com	r19
    b712:	21 95       	neg	r18
    b714:	3f 4f       	sbci	r19, 0xFF	; 255
    b716:	4f 4f       	sbci	r20, 0xFF	; 255
    b718:	5f 4f       	sbci	r21, 0xFF	; 255

0000b71a <__divmodsi4_exit>:
    b71a:	08 95       	ret

0000b71c <__divmodsi4_neg1>:
    b71c:	f6 f7       	brtc	.-4      	; 0xb71a <__divmodsi4_exit>
    b71e:	90 95       	com	r25
    b720:	80 95       	com	r24
    b722:	70 95       	com	r23
    b724:	61 95       	neg	r22
    b726:	7f 4f       	sbci	r23, 0xFF	; 255
    b728:	8f 4f       	sbci	r24, 0xFF	; 255
    b72a:	9f 4f       	sbci	r25, 0xFF	; 255
    b72c:	08 95       	ret

0000b72e <__prologue_saves__>:
    b72e:	2f 92       	push	r2
    b730:	3f 92       	push	r3
    b732:	4f 92       	push	r4
    b734:	5f 92       	push	r5
    b736:	6f 92       	push	r6
    b738:	7f 92       	push	r7
    b73a:	8f 92       	push	r8
    b73c:	9f 92       	push	r9
    b73e:	af 92       	push	r10
    b740:	bf 92       	push	r11
    b742:	cf 92       	push	r12
    b744:	df 92       	push	r13
    b746:	ef 92       	push	r14
    b748:	ff 92       	push	r15
    b74a:	0f 93       	push	r16
    b74c:	1f 93       	push	r17
    b74e:	cf 93       	push	r28
    b750:	df 93       	push	r29
    b752:	cd b7       	in	r28, 0x3d	; 61
    b754:	de b7       	in	r29, 0x3e	; 62
    b756:	ca 1b       	sub	r28, r26
    b758:	db 0b       	sbc	r29, r27
    b75a:	0f b6       	in	r0, 0x3f	; 63
    b75c:	f8 94       	cli
    b75e:	de bf       	out	0x3e, r29	; 62
    b760:	0f be       	out	0x3f, r0	; 63
    b762:	cd bf       	out	0x3d, r28	; 61
    b764:	19 94       	eijmp

0000b766 <__epilogue_restores__>:
    b766:	2a 88       	ldd	r2, Y+18	; 0x12
    b768:	39 88       	ldd	r3, Y+17	; 0x11
    b76a:	48 88       	ldd	r4, Y+16	; 0x10
    b76c:	5f 84       	ldd	r5, Y+15	; 0x0f
    b76e:	6e 84       	ldd	r6, Y+14	; 0x0e
    b770:	7d 84       	ldd	r7, Y+13	; 0x0d
    b772:	8c 84       	ldd	r8, Y+12	; 0x0c
    b774:	9b 84       	ldd	r9, Y+11	; 0x0b
    b776:	aa 84       	ldd	r10, Y+10	; 0x0a
    b778:	b9 84       	ldd	r11, Y+9	; 0x09
    b77a:	c8 84       	ldd	r12, Y+8	; 0x08
    b77c:	df 80       	ldd	r13, Y+7	; 0x07
    b77e:	ee 80       	ldd	r14, Y+6	; 0x06
    b780:	fd 80       	ldd	r15, Y+5	; 0x05
    b782:	0c 81       	ldd	r16, Y+4	; 0x04
    b784:	1b 81       	ldd	r17, Y+3	; 0x03
    b786:	aa 81       	ldd	r26, Y+2	; 0x02
    b788:	b9 81       	ldd	r27, Y+1	; 0x01
    b78a:	ce 0f       	add	r28, r30
    b78c:	d1 1d       	adc	r29, r1
    b78e:	0f b6       	in	r0, 0x3f	; 63
    b790:	f8 94       	cli
    b792:	de bf       	out	0x3e, r29	; 62
    b794:	0f be       	out	0x3f, r0	; 63
    b796:	cd bf       	out	0x3d, r28	; 61
    b798:	ed 01       	movw	r28, r26
    b79a:	08 95       	ret

0000b79c <__tablejump2__>:
    b79c:	ee 0f       	add	r30, r30
    b79e:	ff 1f       	adc	r31, r31

0000b7a0 <__tablejump__>:
    b7a0:	05 90       	lpm	r0, Z+
    b7a2:	f4 91       	lpm	r31, Z+
    b7a4:	e0 2d       	mov	r30, r0
    b7a6:	19 94       	eijmp

0000b7a8 <malloc>:
    b7a8:	cf 93       	push	r28
    b7aa:	df 93       	push	r29
    b7ac:	bc 01       	movw	r22, r24
    b7ae:	82 30       	cpi	r24, 0x02	; 2
    b7b0:	91 05       	cpc	r25, r1
    b7b2:	10 f4       	brcc	.+4      	; 0xb7b8 <malloc+0x10>
    b7b4:	62 e0       	ldi	r22, 0x02	; 2
    b7b6:	70 e0       	ldi	r23, 0x00	; 0
    b7b8:	a0 91 17 2c 	lds	r26, 0x2C17
    b7bc:	b0 91 18 2c 	lds	r27, 0x2C18
    b7c0:	ed 01       	movw	r28, r26
    b7c2:	e0 e0       	ldi	r30, 0x00	; 0
    b7c4:	f0 e0       	ldi	r31, 0x00	; 0
    b7c6:	40 e0       	ldi	r20, 0x00	; 0
    b7c8:	50 e0       	ldi	r21, 0x00	; 0
    b7ca:	21 c0       	rjmp	.+66     	; 0xb80e <malloc+0x66>
    b7cc:	88 81       	ld	r24, Y
    b7ce:	99 81       	ldd	r25, Y+1	; 0x01
    b7d0:	86 17       	cp	r24, r22
    b7d2:	97 07       	cpc	r25, r23
    b7d4:	69 f4       	brne	.+26     	; 0xb7f0 <malloc+0x48>
    b7d6:	8a 81       	ldd	r24, Y+2	; 0x02
    b7d8:	9b 81       	ldd	r25, Y+3	; 0x03
    b7da:	30 97       	sbiw	r30, 0x00	; 0
    b7dc:	19 f0       	breq	.+6      	; 0xb7e4 <malloc+0x3c>
    b7de:	82 83       	std	Z+2, r24	; 0x02
    b7e0:	93 83       	std	Z+3, r25	; 0x03
    b7e2:	04 c0       	rjmp	.+8      	; 0xb7ec <malloc+0x44>
    b7e4:	80 93 17 2c 	sts	0x2C17, r24
    b7e8:	90 93 18 2c 	sts	0x2C18, r25
    b7ec:	fe 01       	movw	r30, r28
    b7ee:	34 c0       	rjmp	.+104    	; 0xb858 <malloc+0xb0>
    b7f0:	68 17       	cp	r22, r24
    b7f2:	79 07       	cpc	r23, r25
    b7f4:	38 f4       	brcc	.+14     	; 0xb804 <malloc+0x5c>
    b7f6:	41 15       	cp	r20, r1
    b7f8:	51 05       	cpc	r21, r1
    b7fa:	19 f0       	breq	.+6      	; 0xb802 <malloc+0x5a>
    b7fc:	84 17       	cp	r24, r20
    b7fe:	95 07       	cpc	r25, r21
    b800:	08 f4       	brcc	.+2      	; 0xb804 <malloc+0x5c>
    b802:	ac 01       	movw	r20, r24
    b804:	fe 01       	movw	r30, r28
    b806:	8a 81       	ldd	r24, Y+2	; 0x02
    b808:	9b 81       	ldd	r25, Y+3	; 0x03
    b80a:	9c 01       	movw	r18, r24
    b80c:	e9 01       	movw	r28, r18
    b80e:	20 97       	sbiw	r28, 0x00	; 0
    b810:	e9 f6       	brne	.-70     	; 0xb7cc <malloc+0x24>
    b812:	41 15       	cp	r20, r1
    b814:	51 05       	cpc	r21, r1
    b816:	a9 f1       	breq	.+106    	; 0xb882 <malloc+0xda>
    b818:	ca 01       	movw	r24, r20
    b81a:	86 1b       	sub	r24, r22
    b81c:	97 0b       	sbc	r25, r23
    b81e:	04 97       	sbiw	r24, 0x04	; 4
    b820:	08 f4       	brcc	.+2      	; 0xb824 <malloc+0x7c>
    b822:	ba 01       	movw	r22, r20
    b824:	e0 e0       	ldi	r30, 0x00	; 0
    b826:	f0 e0       	ldi	r31, 0x00	; 0
    b828:	2a c0       	rjmp	.+84     	; 0xb87e <malloc+0xd6>
    b82a:	8d 91       	ld	r24, X+
    b82c:	9c 91       	ld	r25, X
    b82e:	11 97       	sbiw	r26, 0x01	; 1
    b830:	84 17       	cp	r24, r20
    b832:	95 07       	cpc	r25, r21
    b834:	f9 f4       	brne	.+62     	; 0xb874 <malloc+0xcc>
    b836:	64 17       	cp	r22, r20
    b838:	75 07       	cpc	r23, r21
    b83a:	81 f4       	brne	.+32     	; 0xb85c <malloc+0xb4>
    b83c:	12 96       	adiw	r26, 0x02	; 2
    b83e:	8d 91       	ld	r24, X+
    b840:	9c 91       	ld	r25, X
    b842:	13 97       	sbiw	r26, 0x03	; 3
    b844:	30 97       	sbiw	r30, 0x00	; 0
    b846:	19 f0       	breq	.+6      	; 0xb84e <malloc+0xa6>
    b848:	82 83       	std	Z+2, r24	; 0x02
    b84a:	93 83       	std	Z+3, r25	; 0x03
    b84c:	04 c0       	rjmp	.+8      	; 0xb856 <malloc+0xae>
    b84e:	80 93 17 2c 	sts	0x2C17, r24
    b852:	90 93 18 2c 	sts	0x2C18, r25
    b856:	fd 01       	movw	r30, r26
    b858:	32 96       	adiw	r30, 0x02	; 2
    b85a:	4f c0       	rjmp	.+158    	; 0xb8fa <malloc+0x152>
    b85c:	ca 01       	movw	r24, r20
    b85e:	86 1b       	sub	r24, r22
    b860:	97 0b       	sbc	r25, r23
    b862:	fd 01       	movw	r30, r26
    b864:	e8 0f       	add	r30, r24
    b866:	f9 1f       	adc	r31, r25
    b868:	61 93       	st	Z+, r22
    b86a:	71 93       	st	Z+, r23
    b86c:	02 97       	sbiw	r24, 0x02	; 2
    b86e:	8d 93       	st	X+, r24
    b870:	9c 93       	st	X, r25
    b872:	43 c0       	rjmp	.+134    	; 0xb8fa <malloc+0x152>
    b874:	fd 01       	movw	r30, r26
    b876:	82 81       	ldd	r24, Z+2	; 0x02
    b878:	93 81       	ldd	r25, Z+3	; 0x03
    b87a:	9c 01       	movw	r18, r24
    b87c:	d9 01       	movw	r26, r18
    b87e:	10 97       	sbiw	r26, 0x00	; 0
    b880:	a1 f6       	brne	.-88     	; 0xb82a <malloc+0x82>
    b882:	80 91 15 2c 	lds	r24, 0x2C15
    b886:	90 91 16 2c 	lds	r25, 0x2C16
    b88a:	89 2b       	or	r24, r25
    b88c:	41 f4       	brne	.+16     	; 0xb89e <malloc+0xf6>
    b88e:	80 91 e3 24 	lds	r24, 0x24E3
    b892:	90 91 e4 24 	lds	r25, 0x24E4
    b896:	80 93 15 2c 	sts	0x2C15, r24
    b89a:	90 93 16 2c 	sts	0x2C16, r25
    b89e:	40 91 e5 24 	lds	r20, 0x24E5
    b8a2:	50 91 e6 24 	lds	r21, 0x24E6
    b8a6:	41 15       	cp	r20, r1
    b8a8:	51 05       	cpc	r21, r1
    b8aa:	41 f4       	brne	.+16     	; 0xb8bc <malloc+0x114>
    b8ac:	4d b7       	in	r20, 0x3d	; 61
    b8ae:	5e b7       	in	r21, 0x3e	; 62
    b8b0:	80 91 e1 24 	lds	r24, 0x24E1
    b8b4:	90 91 e2 24 	lds	r25, 0x24E2
    b8b8:	48 1b       	sub	r20, r24
    b8ba:	59 0b       	sbc	r21, r25
    b8bc:	20 91 15 2c 	lds	r18, 0x2C15
    b8c0:	30 91 16 2c 	lds	r19, 0x2C16
    b8c4:	24 17       	cp	r18, r20
    b8c6:	35 07       	cpc	r19, r21
    b8c8:	b0 f4       	brcc	.+44     	; 0xb8f6 <malloc+0x14e>
    b8ca:	ca 01       	movw	r24, r20
    b8cc:	82 1b       	sub	r24, r18
    b8ce:	93 0b       	sbc	r25, r19
    b8d0:	86 17       	cp	r24, r22
    b8d2:	97 07       	cpc	r25, r23
    b8d4:	80 f0       	brcs	.+32     	; 0xb8f6 <malloc+0x14e>
    b8d6:	ab 01       	movw	r20, r22
    b8d8:	4e 5f       	subi	r20, 0xFE	; 254
    b8da:	5f 4f       	sbci	r21, 0xFF	; 255
    b8dc:	84 17       	cp	r24, r20
    b8de:	95 07       	cpc	r25, r21
    b8e0:	50 f0       	brcs	.+20     	; 0xb8f6 <malloc+0x14e>
    b8e2:	42 0f       	add	r20, r18
    b8e4:	53 1f       	adc	r21, r19
    b8e6:	40 93 15 2c 	sts	0x2C15, r20
    b8ea:	50 93 16 2c 	sts	0x2C16, r21
    b8ee:	f9 01       	movw	r30, r18
    b8f0:	61 93       	st	Z+, r22
    b8f2:	71 93       	st	Z+, r23
    b8f4:	02 c0       	rjmp	.+4      	; 0xb8fa <malloc+0x152>
    b8f6:	e0 e0       	ldi	r30, 0x00	; 0
    b8f8:	f0 e0       	ldi	r31, 0x00	; 0
    b8fa:	cf 01       	movw	r24, r30
    b8fc:	df 91       	pop	r29
    b8fe:	cf 91       	pop	r28
    b900:	08 95       	ret

0000b902 <free>:
    b902:	cf 93       	push	r28
    b904:	df 93       	push	r29
    b906:	00 97       	sbiw	r24, 0x00	; 0
    b908:	09 f4       	brne	.+2      	; 0xb90c <free+0xa>
    b90a:	50 c0       	rjmp	.+160    	; 0xb9ac <free+0xaa>
    b90c:	ec 01       	movw	r28, r24
    b90e:	22 97       	sbiw	r28, 0x02	; 2
    b910:	1a 82       	std	Y+2, r1	; 0x02
    b912:	1b 82       	std	Y+3, r1	; 0x03
    b914:	a0 91 17 2c 	lds	r26, 0x2C17
    b918:	b0 91 18 2c 	lds	r27, 0x2C18
    b91c:	10 97       	sbiw	r26, 0x00	; 0
    b91e:	09 f1       	breq	.+66     	; 0xb962 <free+0x60>
    b920:	40 e0       	ldi	r20, 0x00	; 0
    b922:	50 e0       	ldi	r21, 0x00	; 0
    b924:	ac 17       	cp	r26, r28
    b926:	bd 07       	cpc	r27, r29
    b928:	08 f1       	brcs	.+66     	; 0xb96c <free+0x6a>
    b92a:	aa 83       	std	Y+2, r26	; 0x02
    b92c:	bb 83       	std	Y+3, r27	; 0x03
    b92e:	fe 01       	movw	r30, r28
    b930:	21 91       	ld	r18, Z+
    b932:	31 91       	ld	r19, Z+
    b934:	e2 0f       	add	r30, r18
    b936:	f3 1f       	adc	r31, r19
    b938:	ae 17       	cp	r26, r30
    b93a:	bf 07       	cpc	r27, r31
    b93c:	79 f4       	brne	.+30     	; 0xb95c <free+0x5a>
    b93e:	8d 91       	ld	r24, X+
    b940:	9c 91       	ld	r25, X
    b942:	11 97       	sbiw	r26, 0x01	; 1
    b944:	28 0f       	add	r18, r24
    b946:	39 1f       	adc	r19, r25
    b948:	2e 5f       	subi	r18, 0xFE	; 254
    b94a:	3f 4f       	sbci	r19, 0xFF	; 255
    b94c:	28 83       	st	Y, r18
    b94e:	39 83       	std	Y+1, r19	; 0x01
    b950:	12 96       	adiw	r26, 0x02	; 2
    b952:	8d 91       	ld	r24, X+
    b954:	9c 91       	ld	r25, X
    b956:	13 97       	sbiw	r26, 0x03	; 3
    b958:	8a 83       	std	Y+2, r24	; 0x02
    b95a:	9b 83       	std	Y+3, r25	; 0x03
    b95c:	41 15       	cp	r20, r1
    b95e:	51 05       	cpc	r21, r1
    b960:	71 f4       	brne	.+28     	; 0xb97e <free+0x7c>
    b962:	c0 93 17 2c 	sts	0x2C17, r28
    b966:	d0 93 18 2c 	sts	0x2C18, r29
    b96a:	20 c0       	rjmp	.+64     	; 0xb9ac <free+0xaa>
    b96c:	12 96       	adiw	r26, 0x02	; 2
    b96e:	8d 91       	ld	r24, X+
    b970:	9c 91       	ld	r25, X
    b972:	13 97       	sbiw	r26, 0x03	; 3
    b974:	ad 01       	movw	r20, r26
    b976:	00 97       	sbiw	r24, 0x00	; 0
    b978:	11 f0       	breq	.+4      	; 0xb97e <free+0x7c>
    b97a:	dc 01       	movw	r26, r24
    b97c:	d3 cf       	rjmp	.-90     	; 0xb924 <free+0x22>
    b97e:	fa 01       	movw	r30, r20
    b980:	c2 83       	std	Z+2, r28	; 0x02
    b982:	d3 83       	std	Z+3, r29	; 0x03
    b984:	21 91       	ld	r18, Z+
    b986:	31 91       	ld	r19, Z+
    b988:	e2 0f       	add	r30, r18
    b98a:	f3 1f       	adc	r31, r19
    b98c:	ce 17       	cp	r28, r30
    b98e:	df 07       	cpc	r29, r31
    b990:	69 f4       	brne	.+26     	; 0xb9ac <free+0xaa>
    b992:	88 81       	ld	r24, Y
    b994:	99 81       	ldd	r25, Y+1	; 0x01
    b996:	28 0f       	add	r18, r24
    b998:	39 1f       	adc	r19, r25
    b99a:	2e 5f       	subi	r18, 0xFE	; 254
    b99c:	3f 4f       	sbci	r19, 0xFF	; 255
    b99e:	fa 01       	movw	r30, r20
    b9a0:	20 83       	st	Z, r18
    b9a2:	31 83       	std	Z+1, r19	; 0x01
    b9a4:	8a 81       	ldd	r24, Y+2	; 0x02
    b9a6:	9b 81       	ldd	r25, Y+3	; 0x03
    b9a8:	82 83       	std	Z+2, r24	; 0x02
    b9aa:	93 83       	std	Z+3, r25	; 0x03
    b9ac:	df 91       	pop	r29
    b9ae:	cf 91       	pop	r28
    b9b0:	08 95       	ret

0000b9b2 <strtoul>:
    b9b2:	3f 92       	push	r3
    b9b4:	4f 92       	push	r4
    b9b6:	5f 92       	push	r5
    b9b8:	6f 92       	push	r6
    b9ba:	7f 92       	push	r7
    b9bc:	8f 92       	push	r8
    b9be:	9f 92       	push	r9
    b9c0:	af 92       	push	r10
    b9c2:	bf 92       	push	r11
    b9c4:	cf 92       	push	r12
    b9c6:	df 92       	push	r13
    b9c8:	ef 92       	push	r14
    b9ca:	ff 92       	push	r15
    b9cc:	0f 93       	push	r16
    b9ce:	1f 93       	push	r17
    b9d0:	cf 93       	push	r28
    b9d2:	df 93       	push	r29
    b9d4:	ec 01       	movw	r28, r24
    b9d6:	2b 01       	movw	r4, r22
    b9d8:	6a 01       	movw	r12, r20
    b9da:	61 15       	cp	r22, r1
    b9dc:	71 05       	cpc	r23, r1
    b9de:	19 f0       	breq	.+6      	; 0xb9e6 <strtoul+0x34>
    b9e0:	fb 01       	movw	r30, r22
    b9e2:	80 83       	st	Z, r24
    b9e4:	91 83       	std	Z+1, r25	; 0x01
    b9e6:	c1 14       	cp	r12, r1
    b9e8:	d1 04       	cpc	r13, r1
    b9ea:	49 f0       	breq	.+18     	; 0xb9fe <strtoul+0x4c>
    b9ec:	c6 01       	movw	r24, r12
    b9ee:	02 97       	sbiw	r24, 0x02	; 2
    b9f0:	83 97       	sbiw	r24, 0x23	; 35
    b9f2:	28 f0       	brcs	.+10     	; 0xb9fe <strtoul+0x4c>
    b9f4:	20 e0       	ldi	r18, 0x00	; 0
    b9f6:	30 e0       	ldi	r19, 0x00	; 0
    b9f8:	40 e0       	ldi	r20, 0x00	; 0
    b9fa:	50 e0       	ldi	r21, 0x00	; 0
    b9fc:	dc c0       	rjmp	.+440    	; 0xbbb6 <strtoul+0x204>
    b9fe:	a9 90       	ld	r10, Y+
    ba00:	8a 2d       	mov	r24, r10
    ba02:	90 e0       	ldi	r25, 0x00	; 0
    ba04:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <isspace>
    ba08:	89 2b       	or	r24, r25
    ba0a:	c9 f7       	brne	.-14     	; 0xb9fe <strtoul+0x4c>
    ba0c:	fd e2       	ldi	r31, 0x2D	; 45
    ba0e:	af 16       	cp	r10, r31
    ba10:	21 f4       	brne	.+8      	; 0xba1a <strtoul+0x68>
    ba12:	a9 90       	ld	r10, Y+
    ba14:	33 24       	eor	r3, r3
    ba16:	33 94       	inc	r3
    ba18:	05 c0       	rjmp	.+10     	; 0xba24 <strtoul+0x72>
    ba1a:	8b e2       	ldi	r24, 0x2B	; 43
    ba1c:	a8 16       	cp	r10, r24
    ba1e:	09 f4       	brne	.+2      	; 0xba22 <strtoul+0x70>
    ba20:	a9 90       	ld	r10, Y+
    ba22:	33 24       	eor	r3, r3
    ba24:	c1 14       	cp	r12, r1
    ba26:	d1 04       	cpc	r13, r1
    ba28:	21 f0       	breq	.+8      	; 0xba32 <strtoul+0x80>
    ba2a:	e0 e1       	ldi	r30, 0x10	; 16
    ba2c:	ce 16       	cp	r12, r30
    ba2e:	d1 04       	cpc	r13, r1
    ba30:	11 f5       	brne	.+68     	; 0xba76 <strtoul+0xc4>
    ba32:	f0 e3       	ldi	r31, 0x30	; 48
    ba34:	af 16       	cp	r10, r31
    ba36:	69 f4       	brne	.+26     	; 0xba52 <strtoul+0xa0>
    ba38:	88 81       	ld	r24, Y
    ba3a:	88 37       	cpi	r24, 0x78	; 120
    ba3c:	11 f0       	breq	.+4      	; 0xba42 <strtoul+0x90>
    ba3e:	88 35       	cpi	r24, 0x58	; 88
    ba40:	41 f4       	brne	.+16     	; 0xba52 <strtoul+0xa0>
    ba42:	a9 80       	ldd	r10, Y+1	; 0x01
    ba44:	22 96       	adiw	r28, 0x02	; 2
    ba46:	82 e0       	ldi	r24, 0x02	; 2
    ba48:	38 2a       	or	r3, r24
    ba4a:	20 e1       	ldi	r18, 0x10	; 16
    ba4c:	c2 2e       	mov	r12, r18
    ba4e:	d1 2c       	mov	r13, r1
    ba50:	12 c0       	rjmp	.+36     	; 0xba76 <strtoul+0xc4>
    ba52:	c1 14       	cp	r12, r1
    ba54:	d1 04       	cpc	r13, r1
    ba56:	79 f4       	brne	.+30     	; 0xba76 <strtoul+0xc4>
    ba58:	e0 e3       	ldi	r30, 0x30	; 48
    ba5a:	ae 16       	cp	r10, r30
    ba5c:	59 f1       	breq	.+86     	; 0xbab4 <strtoul+0x102>
    ba5e:	99 e9       	ldi	r25, 0x99	; 153
    ba60:	e9 2e       	mov	r14, r25
    ba62:	99 e9       	ldi	r25, 0x99	; 153
    ba64:	f9 2e       	mov	r15, r25
    ba66:	99 e9       	ldi	r25, 0x99	; 153
    ba68:	09 2f       	mov	r16, r25
    ba6a:	99 e1       	ldi	r25, 0x19	; 25
    ba6c:	19 2f       	mov	r17, r25
    ba6e:	8a e0       	ldi	r24, 0x0A	; 10
    ba70:	c8 2e       	mov	r12, r24
    ba72:	d1 2c       	mov	r13, r1
    ba74:	3a c0       	rjmp	.+116    	; 0xbaea <strtoul+0x138>
    ba76:	fa e0       	ldi	r31, 0x0A	; 10
    ba78:	cf 16       	cp	r12, r31
    ba7a:	d1 04       	cpc	r13, r1
    ba7c:	91 f0       	breq	.+36     	; 0xbaa2 <strtoul+0xf0>
    ba7e:	80 e1       	ldi	r24, 0x10	; 16
    ba80:	c8 16       	cp	r12, r24
    ba82:	d1 04       	cpc	r13, r1
    ba84:	29 f0       	breq	.+10     	; 0xba90 <strtoul+0xde>
    ba86:	e8 e0       	ldi	r30, 0x08	; 8
    ba88:	ce 16       	cp	r12, r30
    ba8a:	d1 04       	cpc	r13, r1
    ba8c:	f9 f4       	brne	.+62     	; 0xbacc <strtoul+0x11a>
    ba8e:	15 c0       	rjmp	.+42     	; 0xbaba <strtoul+0x108>
    ba90:	bf ef       	ldi	r27, 0xFF	; 255
    ba92:	eb 2e       	mov	r14, r27
    ba94:	bf ef       	ldi	r27, 0xFF	; 255
    ba96:	fb 2e       	mov	r15, r27
    ba98:	bf ef       	ldi	r27, 0xFF	; 255
    ba9a:	0b 2f       	mov	r16, r27
    ba9c:	bf e0       	ldi	r27, 0x0F	; 15
    ba9e:	1b 2f       	mov	r17, r27
    baa0:	24 c0       	rjmp	.+72     	; 0xbaea <strtoul+0x138>
    baa2:	a9 e9       	ldi	r26, 0x99	; 153
    baa4:	ea 2e       	mov	r14, r26
    baa6:	a9 e9       	ldi	r26, 0x99	; 153
    baa8:	fa 2e       	mov	r15, r26
    baaa:	a9 e9       	ldi	r26, 0x99	; 153
    baac:	0a 2f       	mov	r16, r26
    baae:	a9 e1       	ldi	r26, 0x19	; 25
    bab0:	1a 2f       	mov	r17, r26
    bab2:	1b c0       	rjmp	.+54     	; 0xbaea <strtoul+0x138>
    bab4:	f8 e0       	ldi	r31, 0x08	; 8
    bab6:	cf 2e       	mov	r12, r31
    bab8:	d1 2c       	mov	r13, r1
    baba:	ef ef       	ldi	r30, 0xFF	; 255
    babc:	ee 2e       	mov	r14, r30
    babe:	ef ef       	ldi	r30, 0xFF	; 255
    bac0:	fe 2e       	mov	r15, r30
    bac2:	ef ef       	ldi	r30, 0xFF	; 255
    bac4:	0e 2f       	mov	r16, r30
    bac6:	ef e1       	ldi	r30, 0x1F	; 31
    bac8:	1e 2f       	mov	r17, r30
    baca:	0f c0       	rjmp	.+30     	; 0xbaea <strtoul+0x138>
    bacc:	96 01       	movw	r18, r12
    bace:	44 27       	eor	r20, r20
    bad0:	37 fd       	sbrc	r19, 7
    bad2:	40 95       	com	r20
    bad4:	54 2f       	mov	r21, r20
    bad6:	6f ef       	ldi	r22, 0xFF	; 255
    bad8:	7f ef       	ldi	r23, 0xFF	; 255
    bada:	8f ef       	ldi	r24, 0xFF	; 255
    badc:	9f ef       	ldi	r25, 0xFF	; 255
    bade:	0e 94 5a 5b 	call	0xb6b4	; 0xb6b4 <__udivmodsi4>
    bae2:	c9 01       	movw	r24, r18
    bae4:	da 01       	movw	r26, r20
    bae6:	7c 01       	movw	r14, r24
    bae8:	8d 01       	movw	r16, r26
    baea:	20 e0       	ldi	r18, 0x00	; 0
    baec:	30 e0       	ldi	r19, 0x00	; 0
    baee:	40 e0       	ldi	r20, 0x00	; 0
    baf0:	50 e0       	ldi	r21, 0x00	; 0
    baf2:	60 e0       	ldi	r22, 0x00	; 0
    baf4:	36 01       	movw	r6, r12
    baf6:	88 24       	eor	r8, r8
    baf8:	77 fc       	sbrc	r7, 7
    bafa:	80 94       	com	r8
    bafc:	98 2c       	mov	r9, r8
    bafe:	70 ed       	ldi	r23, 0xD0	; 208
    bb00:	b7 2e       	mov	r11, r23
    bb02:	ba 0c       	add	r11, r10
    bb04:	f9 e0       	ldi	r31, 0x09	; 9
    bb06:	fb 15       	cp	r31, r11
    bb08:	70 f4       	brcc	.+28     	; 0xbb26 <strtoul+0x174>
    bb0a:	8a 2d       	mov	r24, r10
    bb0c:	81 54       	subi	r24, 0x41	; 65
    bb0e:	8a 31       	cpi	r24, 0x1A	; 26
    bb10:	18 f4       	brcc	.+6      	; 0xbb18 <strtoul+0x166>
    bb12:	99 ec       	ldi	r25, 0xC9	; 201
    bb14:	b9 2e       	mov	r11, r25
    bb16:	06 c0       	rjmp	.+12     	; 0xbb24 <strtoul+0x172>
    bb18:	8a 2d       	mov	r24, r10
    bb1a:	81 56       	subi	r24, 0x61	; 97
    bb1c:	8a 31       	cpi	r24, 0x1A	; 26
    bb1e:	48 f5       	brcc	.+82     	; 0xbb72 <strtoul+0x1c0>
    bb20:	89 ea       	ldi	r24, 0xA9	; 169
    bb22:	b8 2e       	mov	r11, r24
    bb24:	ba 0c       	add	r11, r10
    bb26:	8b 2d       	mov	r24, r11
    bb28:	90 e0       	ldi	r25, 0x00	; 0
    bb2a:	8c 15       	cp	r24, r12
    bb2c:	9d 05       	cpc	r25, r13
    bb2e:	0c f5       	brge	.+66     	; 0xbb72 <strtoul+0x1c0>
    bb30:	6f 3f       	cpi	r22, 0xFF	; 255
    bb32:	e9 f0       	breq	.+58     	; 0xbb6e <strtoul+0x1bc>
    bb34:	e2 16       	cp	r14, r18
    bb36:	f3 06       	cpc	r15, r19
    bb38:	04 07       	cpc	r16, r20
    bb3a:	15 07       	cpc	r17, r21
    bb3c:	b8 f0       	brcs	.+46     	; 0xbb6c <strtoul+0x1ba>
    bb3e:	ca 01       	movw	r24, r20
    bb40:	b9 01       	movw	r22, r18
    bb42:	a4 01       	movw	r20, r8
    bb44:	93 01       	movw	r18, r6
    bb46:	0e 94 14 5b 	call	0xb628	; 0xb628 <__mulsi3>
    bb4a:	9b 01       	movw	r18, r22
    bb4c:	ac 01       	movw	r20, r24
    bb4e:	8b 2d       	mov	r24, r11
    bb50:	90 e0       	ldi	r25, 0x00	; 0
    bb52:	a0 e0       	ldi	r26, 0x00	; 0
    bb54:	b0 e0       	ldi	r27, 0x00	; 0
    bb56:	28 0f       	add	r18, r24
    bb58:	39 1f       	adc	r19, r25
    bb5a:	4a 1f       	adc	r20, r26
    bb5c:	5b 1f       	adc	r21, r27
    bb5e:	28 17       	cp	r18, r24
    bb60:	39 07       	cpc	r19, r25
    bb62:	4a 07       	cpc	r20, r26
    bb64:	5b 07       	cpc	r21, r27
    bb66:	10 f0       	brcs	.+4      	; 0xbb6c <strtoul+0x1ba>
    bb68:	61 e0       	ldi	r22, 0x01	; 1
    bb6a:	01 c0       	rjmp	.+2      	; 0xbb6e <strtoul+0x1bc>
    bb6c:	6f ef       	ldi	r22, 0xFF	; 255
    bb6e:	a9 90       	ld	r10, Y+
    bb70:	c6 cf       	rjmp	.-116    	; 0xbafe <strtoul+0x14c>
    bb72:	41 14       	cp	r4, r1
    bb74:	51 04       	cpc	r5, r1
    bb76:	51 f0       	breq	.+20     	; 0xbb8c <strtoul+0x1da>
    bb78:	66 23       	and	r22, r22
    bb7a:	11 f0       	breq	.+4      	; 0xbb80 <strtoul+0x1ce>
    bb7c:	21 97       	sbiw	r28, 0x01	; 1
    bb7e:	03 c0       	rjmp	.+6      	; 0xbb86 <strtoul+0x1d4>
    bb80:	31 fe       	sbrs	r3, 1
    bb82:	04 c0       	rjmp	.+8      	; 0xbb8c <strtoul+0x1da>
    bb84:	22 97       	sbiw	r28, 0x02	; 2
    bb86:	f2 01       	movw	r30, r4
    bb88:	c0 83       	st	Z, r28
    bb8a:	d1 83       	std	Z+1, r29	; 0x01
    bb8c:	30 fe       	sbrs	r3, 0
    bb8e:	07 c0       	rjmp	.+14     	; 0xbb9e <strtoul+0x1ec>
    bb90:	50 95       	com	r21
    bb92:	40 95       	com	r20
    bb94:	30 95       	com	r19
    bb96:	21 95       	neg	r18
    bb98:	3f 4f       	sbci	r19, 0xFF	; 255
    bb9a:	4f 4f       	sbci	r20, 0xFF	; 255
    bb9c:	5f 4f       	sbci	r21, 0xFF	; 255
    bb9e:	67 ff       	sbrs	r22, 7
    bba0:	0a c0       	rjmp	.+20     	; 0xbbb6 <strtoul+0x204>
    bba2:	82 e2       	ldi	r24, 0x22	; 34
    bba4:	90 e0       	ldi	r25, 0x00	; 0
    bba6:	80 93 19 2c 	sts	0x2C19, r24
    bbaa:	90 93 1a 2c 	sts	0x2C1A, r25
    bbae:	2f ef       	ldi	r18, 0xFF	; 255
    bbb0:	3f ef       	ldi	r19, 0xFF	; 255
    bbb2:	4f ef       	ldi	r20, 0xFF	; 255
    bbb4:	5f ef       	ldi	r21, 0xFF	; 255
    bbb6:	b9 01       	movw	r22, r18
    bbb8:	ca 01       	movw	r24, r20
    bbba:	df 91       	pop	r29
    bbbc:	cf 91       	pop	r28
    bbbe:	1f 91       	pop	r17
    bbc0:	0f 91       	pop	r16
    bbc2:	ff 90       	pop	r15
    bbc4:	ef 90       	pop	r14
    bbc6:	df 90       	pop	r13
    bbc8:	cf 90       	pop	r12
    bbca:	bf 90       	pop	r11
    bbcc:	af 90       	pop	r10
    bbce:	9f 90       	pop	r9
    bbd0:	8f 90       	pop	r8
    bbd2:	7f 90       	pop	r7
    bbd4:	6f 90       	pop	r6
    bbd6:	5f 90       	pop	r5
    bbd8:	4f 90       	pop	r4
    bbda:	3f 90       	pop	r3
    bbdc:	08 95       	ret

0000bbde <isspace>:
    bbde:	91 11       	cpse	r25, r1
    bbe0:	64 c2       	rjmp	.+1224   	; 0xc0aa <__ctype_isfalse>
    bbe2:	80 32       	cpi	r24, 0x20	; 32
    bbe4:	19 f0       	breq	.+6      	; 0xbbec <isspace+0xe>
    bbe6:	89 50       	subi	r24, 0x09	; 9
    bbe8:	85 50       	subi	r24, 0x05	; 5
    bbea:	d0 f7       	brcc	.-12     	; 0xbbe0 <isspace+0x2>
    bbec:	08 95       	ret

0000bbee <sprintf>:
    bbee:	0f 93       	push	r16
    bbf0:	1f 93       	push	r17
    bbf2:	df 93       	push	r29
    bbf4:	cf 93       	push	r28
    bbf6:	cd b7       	in	r28, 0x3d	; 61
    bbf8:	de b7       	in	r29, 0x3e	; 62
    bbfa:	2e 97       	sbiw	r28, 0x0e	; 14
    bbfc:	cd bf       	out	0x3d, r28	; 61
    bbfe:	de bf       	out	0x3e, r29	; 62
    bc00:	0e 89       	ldd	r16, Y+22	; 0x16
    bc02:	1f 89       	ldd	r17, Y+23	; 0x17
    bc04:	86 e0       	ldi	r24, 0x06	; 6
    bc06:	8c 83       	std	Y+4, r24	; 0x04
    bc08:	09 83       	std	Y+1, r16	; 0x01
    bc0a:	1a 83       	std	Y+2, r17	; 0x02
    bc0c:	8f ef       	ldi	r24, 0xFF	; 255
    bc0e:	9f e7       	ldi	r25, 0x7F	; 127
    bc10:	8d 83       	std	Y+5, r24	; 0x05
    bc12:	9e 83       	std	Y+6, r25	; 0x06
    bc14:	9e 01       	movw	r18, r28
    bc16:	26 5e       	subi	r18, 0xE6	; 230
    bc18:	3f 4f       	sbci	r19, 0xFF	; 255
    bc1a:	ce 01       	movw	r24, r28
    bc1c:	01 96       	adiw	r24, 0x01	; 1
    bc1e:	68 8d       	ldd	r22, Y+24	; 0x18
    bc20:	79 8d       	ldd	r23, Y+25	; 0x19
    bc22:	a9 01       	movw	r20, r18
    bc24:	0e 94 22 5e 	call	0xbc44	; 0xbc44 <vfprintf>
    bc28:	2f 81       	ldd	r18, Y+7	; 0x07
    bc2a:	38 85       	ldd	r19, Y+8	; 0x08
    bc2c:	02 0f       	add	r16, r18
    bc2e:	13 1f       	adc	r17, r19
    bc30:	f8 01       	movw	r30, r16
    bc32:	10 82       	st	Z, r1
    bc34:	2e 96       	adiw	r28, 0x0e	; 14
    bc36:	cd bf       	out	0x3d, r28	; 61
    bc38:	de bf       	out	0x3e, r29	; 62
    bc3a:	cf 91       	pop	r28
    bc3c:	df 91       	pop	r29
    bc3e:	1f 91       	pop	r17
    bc40:	0f 91       	pop	r16
    bc42:	08 95       	ret

0000bc44 <vfprintf>:
    bc44:	2f 92       	push	r2
    bc46:	3f 92       	push	r3
    bc48:	4f 92       	push	r4
    bc4a:	5f 92       	push	r5
    bc4c:	6f 92       	push	r6
    bc4e:	7f 92       	push	r7
    bc50:	8f 92       	push	r8
    bc52:	9f 92       	push	r9
    bc54:	af 92       	push	r10
    bc56:	bf 92       	push	r11
    bc58:	cf 92       	push	r12
    bc5a:	df 92       	push	r13
    bc5c:	ef 92       	push	r14
    bc5e:	ff 92       	push	r15
    bc60:	0f 93       	push	r16
    bc62:	1f 93       	push	r17
    bc64:	df 93       	push	r29
    bc66:	cf 93       	push	r28
    bc68:	cd b7       	in	r28, 0x3d	; 61
    bc6a:	de b7       	in	r29, 0x3e	; 62
    bc6c:	2b 97       	sbiw	r28, 0x0b	; 11
    bc6e:	cd bf       	out	0x3d, r28	; 61
    bc70:	de bf       	out	0x3e, r29	; 62
    bc72:	3c 01       	movw	r6, r24
    bc74:	2b 01       	movw	r4, r22
    bc76:	5a 01       	movw	r10, r20
    bc78:	fc 01       	movw	r30, r24
    bc7a:	16 82       	std	Z+6, r1	; 0x06
    bc7c:	17 82       	std	Z+7, r1	; 0x07
    bc7e:	83 81       	ldd	r24, Z+3	; 0x03
    bc80:	81 fd       	sbrc	r24, 1
    bc82:	03 c0       	rjmp	.+6      	; 0xbc8a <vfprintf+0x46>
    bc84:	6f ef       	ldi	r22, 0xFF	; 255
    bc86:	7f ef       	ldi	r23, 0xFF	; 255
    bc88:	c6 c1       	rjmp	.+908    	; 0xc016 <vfprintf+0x3d2>
    bc8a:	9a e0       	ldi	r25, 0x0A	; 10
    bc8c:	89 2e       	mov	r8, r25
    bc8e:	1e 01       	movw	r2, r28
    bc90:	08 94       	sec
    bc92:	21 1c       	adc	r2, r1
    bc94:	31 1c       	adc	r3, r1
    bc96:	f3 01       	movw	r30, r6
    bc98:	23 81       	ldd	r18, Z+3	; 0x03
    bc9a:	f2 01       	movw	r30, r4
    bc9c:	23 fd       	sbrc	r18, 3
    bc9e:	85 91       	lpm	r24, Z+
    bca0:	23 ff       	sbrs	r18, 3
    bca2:	81 91       	ld	r24, Z+
    bca4:	2f 01       	movw	r4, r30
    bca6:	88 23       	and	r24, r24
    bca8:	09 f4       	brne	.+2      	; 0xbcac <vfprintf+0x68>
    bcaa:	b2 c1       	rjmp	.+868    	; 0xc010 <vfprintf+0x3cc>
    bcac:	85 32       	cpi	r24, 0x25	; 37
    bcae:	39 f4       	brne	.+14     	; 0xbcbe <vfprintf+0x7a>
    bcb0:	23 fd       	sbrc	r18, 3
    bcb2:	85 91       	lpm	r24, Z+
    bcb4:	23 ff       	sbrs	r18, 3
    bcb6:	81 91       	ld	r24, Z+
    bcb8:	2f 01       	movw	r4, r30
    bcba:	85 32       	cpi	r24, 0x25	; 37
    bcbc:	29 f4       	brne	.+10     	; 0xbcc8 <vfprintf+0x84>
    bcbe:	90 e0       	ldi	r25, 0x00	; 0
    bcc0:	b3 01       	movw	r22, r6
    bcc2:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    bcc6:	e7 cf       	rjmp	.-50     	; 0xbc96 <vfprintf+0x52>
    bcc8:	98 2f       	mov	r25, r24
    bcca:	ff 24       	eor	r15, r15
    bccc:	ee 24       	eor	r14, r14
    bcce:	99 24       	eor	r9, r9
    bcd0:	ff e1       	ldi	r31, 0x1F	; 31
    bcd2:	ff 15       	cp	r31, r15
    bcd4:	d0 f0       	brcs	.+52     	; 0xbd0a <vfprintf+0xc6>
    bcd6:	9b 32       	cpi	r25, 0x2B	; 43
    bcd8:	69 f0       	breq	.+26     	; 0xbcf4 <vfprintf+0xb0>
    bcda:	9c 32       	cpi	r25, 0x2C	; 44
    bcdc:	28 f4       	brcc	.+10     	; 0xbce8 <vfprintf+0xa4>
    bcde:	90 32       	cpi	r25, 0x20	; 32
    bce0:	59 f0       	breq	.+22     	; 0xbcf8 <vfprintf+0xb4>
    bce2:	93 32       	cpi	r25, 0x23	; 35
    bce4:	91 f4       	brne	.+36     	; 0xbd0a <vfprintf+0xc6>
    bce6:	0e c0       	rjmp	.+28     	; 0xbd04 <vfprintf+0xc0>
    bce8:	9d 32       	cpi	r25, 0x2D	; 45
    bcea:	49 f0       	breq	.+18     	; 0xbcfe <vfprintf+0xba>
    bcec:	90 33       	cpi	r25, 0x30	; 48
    bcee:	69 f4       	brne	.+26     	; 0xbd0a <vfprintf+0xc6>
    bcf0:	41 e0       	ldi	r20, 0x01	; 1
    bcf2:	24 c0       	rjmp	.+72     	; 0xbd3c <vfprintf+0xf8>
    bcf4:	52 e0       	ldi	r21, 0x02	; 2
    bcf6:	f5 2a       	or	r15, r21
    bcf8:	84 e0       	ldi	r24, 0x04	; 4
    bcfa:	f8 2a       	or	r15, r24
    bcfc:	28 c0       	rjmp	.+80     	; 0xbd4e <vfprintf+0x10a>
    bcfe:	98 e0       	ldi	r25, 0x08	; 8
    bd00:	f9 2a       	or	r15, r25
    bd02:	25 c0       	rjmp	.+74     	; 0xbd4e <vfprintf+0x10a>
    bd04:	e0 e1       	ldi	r30, 0x10	; 16
    bd06:	fe 2a       	or	r15, r30
    bd08:	22 c0       	rjmp	.+68     	; 0xbd4e <vfprintf+0x10a>
    bd0a:	f7 fc       	sbrc	r15, 7
    bd0c:	29 c0       	rjmp	.+82     	; 0xbd60 <vfprintf+0x11c>
    bd0e:	89 2f       	mov	r24, r25
    bd10:	80 53       	subi	r24, 0x30	; 48
    bd12:	8a 30       	cpi	r24, 0x0A	; 10
    bd14:	70 f4       	brcc	.+28     	; 0xbd32 <vfprintf+0xee>
    bd16:	f6 fe       	sbrs	r15, 6
    bd18:	05 c0       	rjmp	.+10     	; 0xbd24 <vfprintf+0xe0>
    bd1a:	98 9c       	mul	r9, r8
    bd1c:	90 2c       	mov	r9, r0
    bd1e:	11 24       	eor	r1, r1
    bd20:	98 0e       	add	r9, r24
    bd22:	15 c0       	rjmp	.+42     	; 0xbd4e <vfprintf+0x10a>
    bd24:	e8 9c       	mul	r14, r8
    bd26:	e0 2c       	mov	r14, r0
    bd28:	11 24       	eor	r1, r1
    bd2a:	e8 0e       	add	r14, r24
    bd2c:	f0 e2       	ldi	r31, 0x20	; 32
    bd2e:	ff 2a       	or	r15, r31
    bd30:	0e c0       	rjmp	.+28     	; 0xbd4e <vfprintf+0x10a>
    bd32:	9e 32       	cpi	r25, 0x2E	; 46
    bd34:	29 f4       	brne	.+10     	; 0xbd40 <vfprintf+0xfc>
    bd36:	f6 fc       	sbrc	r15, 6
    bd38:	6b c1       	rjmp	.+726    	; 0xc010 <vfprintf+0x3cc>
    bd3a:	40 e4       	ldi	r20, 0x40	; 64
    bd3c:	f4 2a       	or	r15, r20
    bd3e:	07 c0       	rjmp	.+14     	; 0xbd4e <vfprintf+0x10a>
    bd40:	9c 36       	cpi	r25, 0x6C	; 108
    bd42:	19 f4       	brne	.+6      	; 0xbd4a <vfprintf+0x106>
    bd44:	50 e8       	ldi	r21, 0x80	; 128
    bd46:	f5 2a       	or	r15, r21
    bd48:	02 c0       	rjmp	.+4      	; 0xbd4e <vfprintf+0x10a>
    bd4a:	98 36       	cpi	r25, 0x68	; 104
    bd4c:	49 f4       	brne	.+18     	; 0xbd60 <vfprintf+0x11c>
    bd4e:	f2 01       	movw	r30, r4
    bd50:	23 fd       	sbrc	r18, 3
    bd52:	95 91       	lpm	r25, Z+
    bd54:	23 ff       	sbrs	r18, 3
    bd56:	91 91       	ld	r25, Z+
    bd58:	2f 01       	movw	r4, r30
    bd5a:	99 23       	and	r25, r25
    bd5c:	09 f0       	breq	.+2      	; 0xbd60 <vfprintf+0x11c>
    bd5e:	b8 cf       	rjmp	.-144    	; 0xbcd0 <vfprintf+0x8c>
    bd60:	89 2f       	mov	r24, r25
    bd62:	85 54       	subi	r24, 0x45	; 69
    bd64:	83 30       	cpi	r24, 0x03	; 3
    bd66:	18 f0       	brcs	.+6      	; 0xbd6e <vfprintf+0x12a>
    bd68:	80 52       	subi	r24, 0x20	; 32
    bd6a:	83 30       	cpi	r24, 0x03	; 3
    bd6c:	38 f4       	brcc	.+14     	; 0xbd7c <vfprintf+0x138>
    bd6e:	44 e0       	ldi	r20, 0x04	; 4
    bd70:	50 e0       	ldi	r21, 0x00	; 0
    bd72:	a4 0e       	add	r10, r20
    bd74:	b5 1e       	adc	r11, r21
    bd76:	5f e3       	ldi	r21, 0x3F	; 63
    bd78:	59 83       	std	Y+1, r21	; 0x01
    bd7a:	0f c0       	rjmp	.+30     	; 0xbd9a <vfprintf+0x156>
    bd7c:	93 36       	cpi	r25, 0x63	; 99
    bd7e:	31 f0       	breq	.+12     	; 0xbd8c <vfprintf+0x148>
    bd80:	93 37       	cpi	r25, 0x73	; 115
    bd82:	79 f0       	breq	.+30     	; 0xbda2 <vfprintf+0x15e>
    bd84:	93 35       	cpi	r25, 0x53	; 83
    bd86:	09 f0       	breq	.+2      	; 0xbd8a <vfprintf+0x146>
    bd88:	56 c0       	rjmp	.+172    	; 0xbe36 <vfprintf+0x1f2>
    bd8a:	20 c0       	rjmp	.+64     	; 0xbdcc <vfprintf+0x188>
    bd8c:	f5 01       	movw	r30, r10
    bd8e:	80 81       	ld	r24, Z
    bd90:	89 83       	std	Y+1, r24	; 0x01
    bd92:	42 e0       	ldi	r20, 0x02	; 2
    bd94:	50 e0       	ldi	r21, 0x00	; 0
    bd96:	a4 0e       	add	r10, r20
    bd98:	b5 1e       	adc	r11, r21
    bd9a:	61 01       	movw	r12, r2
    bd9c:	01 e0       	ldi	r16, 0x01	; 1
    bd9e:	10 e0       	ldi	r17, 0x00	; 0
    bda0:	12 c0       	rjmp	.+36     	; 0xbdc6 <vfprintf+0x182>
    bda2:	f5 01       	movw	r30, r10
    bda4:	c0 80       	ld	r12, Z
    bda6:	d1 80       	ldd	r13, Z+1	; 0x01
    bda8:	f6 fc       	sbrc	r15, 6
    bdaa:	03 c0       	rjmp	.+6      	; 0xbdb2 <vfprintf+0x16e>
    bdac:	6f ef       	ldi	r22, 0xFF	; 255
    bdae:	7f ef       	ldi	r23, 0xFF	; 255
    bdb0:	02 c0       	rjmp	.+4      	; 0xbdb6 <vfprintf+0x172>
    bdb2:	69 2d       	mov	r22, r9
    bdb4:	70 e0       	ldi	r23, 0x00	; 0
    bdb6:	42 e0       	ldi	r20, 0x02	; 2
    bdb8:	50 e0       	ldi	r21, 0x00	; 0
    bdba:	a4 0e       	add	r10, r20
    bdbc:	b5 1e       	adc	r11, r21
    bdbe:	c6 01       	movw	r24, r12
    bdc0:	0e 94 63 60 	call	0xc0c6	; 0xc0c6 <strnlen>
    bdc4:	8c 01       	movw	r16, r24
    bdc6:	5f e7       	ldi	r21, 0x7F	; 127
    bdc8:	f5 22       	and	r15, r21
    bdca:	14 c0       	rjmp	.+40     	; 0xbdf4 <vfprintf+0x1b0>
    bdcc:	f5 01       	movw	r30, r10
    bdce:	c0 80       	ld	r12, Z
    bdd0:	d1 80       	ldd	r13, Z+1	; 0x01
    bdd2:	f6 fc       	sbrc	r15, 6
    bdd4:	03 c0       	rjmp	.+6      	; 0xbddc <vfprintf+0x198>
    bdd6:	6f ef       	ldi	r22, 0xFF	; 255
    bdd8:	7f ef       	ldi	r23, 0xFF	; 255
    bdda:	02 c0       	rjmp	.+4      	; 0xbde0 <vfprintf+0x19c>
    bddc:	69 2d       	mov	r22, r9
    bdde:	70 e0       	ldi	r23, 0x00	; 0
    bde0:	42 e0       	ldi	r20, 0x02	; 2
    bde2:	50 e0       	ldi	r21, 0x00	; 0
    bde4:	a4 0e       	add	r10, r20
    bde6:	b5 1e       	adc	r11, r21
    bde8:	c6 01       	movw	r24, r12
    bdea:	0e 94 58 60 	call	0xc0b0	; 0xc0b0 <strnlen_P>
    bdee:	8c 01       	movw	r16, r24
    bdf0:	50 e8       	ldi	r21, 0x80	; 128
    bdf2:	f5 2a       	or	r15, r21
    bdf4:	f3 fe       	sbrs	r15, 3
    bdf6:	07 c0       	rjmp	.+14     	; 0xbe06 <vfprintf+0x1c2>
    bdf8:	1a c0       	rjmp	.+52     	; 0xbe2e <vfprintf+0x1ea>
    bdfa:	80 e2       	ldi	r24, 0x20	; 32
    bdfc:	90 e0       	ldi	r25, 0x00	; 0
    bdfe:	b3 01       	movw	r22, r6
    be00:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    be04:	ea 94       	dec	r14
    be06:	8e 2d       	mov	r24, r14
    be08:	90 e0       	ldi	r25, 0x00	; 0
    be0a:	08 17       	cp	r16, r24
    be0c:	19 07       	cpc	r17, r25
    be0e:	a8 f3       	brcs	.-22     	; 0xbdfa <vfprintf+0x1b6>
    be10:	0e c0       	rjmp	.+28     	; 0xbe2e <vfprintf+0x1ea>
    be12:	f6 01       	movw	r30, r12
    be14:	f7 fc       	sbrc	r15, 7
    be16:	85 91       	lpm	r24, Z+
    be18:	f7 fe       	sbrs	r15, 7
    be1a:	81 91       	ld	r24, Z+
    be1c:	6f 01       	movw	r12, r30
    be1e:	90 e0       	ldi	r25, 0x00	; 0
    be20:	b3 01       	movw	r22, r6
    be22:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    be26:	e1 10       	cpse	r14, r1
    be28:	ea 94       	dec	r14
    be2a:	01 50       	subi	r16, 0x01	; 1
    be2c:	10 40       	sbci	r17, 0x00	; 0
    be2e:	01 15       	cp	r16, r1
    be30:	11 05       	cpc	r17, r1
    be32:	79 f7       	brne	.-34     	; 0xbe12 <vfprintf+0x1ce>
    be34:	ea c0       	rjmp	.+468    	; 0xc00a <vfprintf+0x3c6>
    be36:	94 36       	cpi	r25, 0x64	; 100
    be38:	11 f0       	breq	.+4      	; 0xbe3e <vfprintf+0x1fa>
    be3a:	99 36       	cpi	r25, 0x69	; 105
    be3c:	69 f5       	brne	.+90     	; 0xbe98 <vfprintf+0x254>
    be3e:	f7 fe       	sbrs	r15, 7
    be40:	08 c0       	rjmp	.+16     	; 0xbe52 <vfprintf+0x20e>
    be42:	f5 01       	movw	r30, r10
    be44:	20 81       	ld	r18, Z
    be46:	31 81       	ldd	r19, Z+1	; 0x01
    be48:	42 81       	ldd	r20, Z+2	; 0x02
    be4a:	53 81       	ldd	r21, Z+3	; 0x03
    be4c:	84 e0       	ldi	r24, 0x04	; 4
    be4e:	90 e0       	ldi	r25, 0x00	; 0
    be50:	0a c0       	rjmp	.+20     	; 0xbe66 <vfprintf+0x222>
    be52:	f5 01       	movw	r30, r10
    be54:	80 81       	ld	r24, Z
    be56:	91 81       	ldd	r25, Z+1	; 0x01
    be58:	9c 01       	movw	r18, r24
    be5a:	44 27       	eor	r20, r20
    be5c:	37 fd       	sbrc	r19, 7
    be5e:	40 95       	com	r20
    be60:	54 2f       	mov	r21, r20
    be62:	82 e0       	ldi	r24, 0x02	; 2
    be64:	90 e0       	ldi	r25, 0x00	; 0
    be66:	a8 0e       	add	r10, r24
    be68:	b9 1e       	adc	r11, r25
    be6a:	9f e6       	ldi	r25, 0x6F	; 111
    be6c:	f9 22       	and	r15, r25
    be6e:	57 ff       	sbrs	r21, 7
    be70:	09 c0       	rjmp	.+18     	; 0xbe84 <vfprintf+0x240>
    be72:	50 95       	com	r21
    be74:	40 95       	com	r20
    be76:	30 95       	com	r19
    be78:	21 95       	neg	r18
    be7a:	3f 4f       	sbci	r19, 0xFF	; 255
    be7c:	4f 4f       	sbci	r20, 0xFF	; 255
    be7e:	5f 4f       	sbci	r21, 0xFF	; 255
    be80:	e0 e8       	ldi	r30, 0x80	; 128
    be82:	fe 2a       	or	r15, r30
    be84:	ca 01       	movw	r24, r20
    be86:	b9 01       	movw	r22, r18
    be88:	a1 01       	movw	r20, r2
    be8a:	2a e0       	ldi	r18, 0x0A	; 10
    be8c:	30 e0       	ldi	r19, 0x00	; 0
    be8e:	0e 94 9a 60 	call	0xc134	; 0xc134 <__ultoa_invert>
    be92:	d8 2e       	mov	r13, r24
    be94:	d2 18       	sub	r13, r2
    be96:	40 c0       	rjmp	.+128    	; 0xbf18 <vfprintf+0x2d4>
    be98:	95 37       	cpi	r25, 0x75	; 117
    be9a:	29 f4       	brne	.+10     	; 0xbea6 <vfprintf+0x262>
    be9c:	1f 2d       	mov	r17, r15
    be9e:	1f 7e       	andi	r17, 0xEF	; 239
    bea0:	2a e0       	ldi	r18, 0x0A	; 10
    bea2:	30 e0       	ldi	r19, 0x00	; 0
    bea4:	1d c0       	rjmp	.+58     	; 0xbee0 <vfprintf+0x29c>
    bea6:	1f 2d       	mov	r17, r15
    bea8:	19 7f       	andi	r17, 0xF9	; 249
    beaa:	9f 36       	cpi	r25, 0x6F	; 111
    beac:	61 f0       	breq	.+24     	; 0xbec6 <vfprintf+0x282>
    beae:	90 37       	cpi	r25, 0x70	; 112
    beb0:	20 f4       	brcc	.+8      	; 0xbeba <vfprintf+0x276>
    beb2:	98 35       	cpi	r25, 0x58	; 88
    beb4:	09 f0       	breq	.+2      	; 0xbeb8 <vfprintf+0x274>
    beb6:	ac c0       	rjmp	.+344    	; 0xc010 <vfprintf+0x3cc>
    beb8:	0f c0       	rjmp	.+30     	; 0xbed8 <vfprintf+0x294>
    beba:	90 37       	cpi	r25, 0x70	; 112
    bebc:	39 f0       	breq	.+14     	; 0xbecc <vfprintf+0x288>
    bebe:	98 37       	cpi	r25, 0x78	; 120
    bec0:	09 f0       	breq	.+2      	; 0xbec4 <vfprintf+0x280>
    bec2:	a6 c0       	rjmp	.+332    	; 0xc010 <vfprintf+0x3cc>
    bec4:	04 c0       	rjmp	.+8      	; 0xbece <vfprintf+0x28a>
    bec6:	28 e0       	ldi	r18, 0x08	; 8
    bec8:	30 e0       	ldi	r19, 0x00	; 0
    beca:	0a c0       	rjmp	.+20     	; 0xbee0 <vfprintf+0x29c>
    becc:	10 61       	ori	r17, 0x10	; 16
    bece:	14 fd       	sbrc	r17, 4
    bed0:	14 60       	ori	r17, 0x04	; 4
    bed2:	20 e1       	ldi	r18, 0x10	; 16
    bed4:	30 e0       	ldi	r19, 0x00	; 0
    bed6:	04 c0       	rjmp	.+8      	; 0xbee0 <vfprintf+0x29c>
    bed8:	14 fd       	sbrc	r17, 4
    beda:	16 60       	ori	r17, 0x06	; 6
    bedc:	20 e1       	ldi	r18, 0x10	; 16
    bede:	32 e0       	ldi	r19, 0x02	; 2
    bee0:	17 ff       	sbrs	r17, 7
    bee2:	08 c0       	rjmp	.+16     	; 0xbef4 <vfprintf+0x2b0>
    bee4:	f5 01       	movw	r30, r10
    bee6:	60 81       	ld	r22, Z
    bee8:	71 81       	ldd	r23, Z+1	; 0x01
    beea:	82 81       	ldd	r24, Z+2	; 0x02
    beec:	93 81       	ldd	r25, Z+3	; 0x03
    beee:	44 e0       	ldi	r20, 0x04	; 4
    bef0:	50 e0       	ldi	r21, 0x00	; 0
    bef2:	08 c0       	rjmp	.+16     	; 0xbf04 <vfprintf+0x2c0>
    bef4:	f5 01       	movw	r30, r10
    bef6:	80 81       	ld	r24, Z
    bef8:	91 81       	ldd	r25, Z+1	; 0x01
    befa:	bc 01       	movw	r22, r24
    befc:	80 e0       	ldi	r24, 0x00	; 0
    befe:	90 e0       	ldi	r25, 0x00	; 0
    bf00:	42 e0       	ldi	r20, 0x02	; 2
    bf02:	50 e0       	ldi	r21, 0x00	; 0
    bf04:	a4 0e       	add	r10, r20
    bf06:	b5 1e       	adc	r11, r21
    bf08:	a1 01       	movw	r20, r2
    bf0a:	0e 94 9a 60 	call	0xc134	; 0xc134 <__ultoa_invert>
    bf0e:	d8 2e       	mov	r13, r24
    bf10:	d2 18       	sub	r13, r2
    bf12:	8f e7       	ldi	r24, 0x7F	; 127
    bf14:	f8 2e       	mov	r15, r24
    bf16:	f1 22       	and	r15, r17
    bf18:	f6 fe       	sbrs	r15, 6
    bf1a:	0b c0       	rjmp	.+22     	; 0xbf32 <vfprintf+0x2ee>
    bf1c:	5e ef       	ldi	r21, 0xFE	; 254
    bf1e:	f5 22       	and	r15, r21
    bf20:	d9 14       	cp	r13, r9
    bf22:	38 f4       	brcc	.+14     	; 0xbf32 <vfprintf+0x2ee>
    bf24:	f4 fe       	sbrs	r15, 4
    bf26:	07 c0       	rjmp	.+14     	; 0xbf36 <vfprintf+0x2f2>
    bf28:	f2 fc       	sbrc	r15, 2
    bf2a:	05 c0       	rjmp	.+10     	; 0xbf36 <vfprintf+0x2f2>
    bf2c:	8f ee       	ldi	r24, 0xEF	; 239
    bf2e:	f8 22       	and	r15, r24
    bf30:	02 c0       	rjmp	.+4      	; 0xbf36 <vfprintf+0x2f2>
    bf32:	1d 2d       	mov	r17, r13
    bf34:	01 c0       	rjmp	.+2      	; 0xbf38 <vfprintf+0x2f4>
    bf36:	19 2d       	mov	r17, r9
    bf38:	f4 fe       	sbrs	r15, 4
    bf3a:	0d c0       	rjmp	.+26     	; 0xbf56 <vfprintf+0x312>
    bf3c:	fe 01       	movw	r30, r28
    bf3e:	ed 0d       	add	r30, r13
    bf40:	f1 1d       	adc	r31, r1
    bf42:	80 81       	ld	r24, Z
    bf44:	80 33       	cpi	r24, 0x30	; 48
    bf46:	19 f4       	brne	.+6      	; 0xbf4e <vfprintf+0x30a>
    bf48:	99 ee       	ldi	r25, 0xE9	; 233
    bf4a:	f9 22       	and	r15, r25
    bf4c:	08 c0       	rjmp	.+16     	; 0xbf5e <vfprintf+0x31a>
    bf4e:	1f 5f       	subi	r17, 0xFF	; 255
    bf50:	f2 fe       	sbrs	r15, 2
    bf52:	05 c0       	rjmp	.+10     	; 0xbf5e <vfprintf+0x31a>
    bf54:	03 c0       	rjmp	.+6      	; 0xbf5c <vfprintf+0x318>
    bf56:	8f 2d       	mov	r24, r15
    bf58:	86 78       	andi	r24, 0x86	; 134
    bf5a:	09 f0       	breq	.+2      	; 0xbf5e <vfprintf+0x31a>
    bf5c:	1f 5f       	subi	r17, 0xFF	; 255
    bf5e:	0f 2d       	mov	r16, r15
    bf60:	f3 fc       	sbrc	r15, 3
    bf62:	14 c0       	rjmp	.+40     	; 0xbf8c <vfprintf+0x348>
    bf64:	f0 fe       	sbrs	r15, 0
    bf66:	0f c0       	rjmp	.+30     	; 0xbf86 <vfprintf+0x342>
    bf68:	1e 15       	cp	r17, r14
    bf6a:	10 f0       	brcs	.+4      	; 0xbf70 <vfprintf+0x32c>
    bf6c:	9d 2c       	mov	r9, r13
    bf6e:	0b c0       	rjmp	.+22     	; 0xbf86 <vfprintf+0x342>
    bf70:	9d 2c       	mov	r9, r13
    bf72:	9e 0c       	add	r9, r14
    bf74:	91 1a       	sub	r9, r17
    bf76:	1e 2d       	mov	r17, r14
    bf78:	06 c0       	rjmp	.+12     	; 0xbf86 <vfprintf+0x342>
    bf7a:	80 e2       	ldi	r24, 0x20	; 32
    bf7c:	90 e0       	ldi	r25, 0x00	; 0
    bf7e:	b3 01       	movw	r22, r6
    bf80:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    bf84:	1f 5f       	subi	r17, 0xFF	; 255
    bf86:	1e 15       	cp	r17, r14
    bf88:	c0 f3       	brcs	.-16     	; 0xbf7a <vfprintf+0x336>
    bf8a:	04 c0       	rjmp	.+8      	; 0xbf94 <vfprintf+0x350>
    bf8c:	1e 15       	cp	r17, r14
    bf8e:	10 f4       	brcc	.+4      	; 0xbf94 <vfprintf+0x350>
    bf90:	e1 1a       	sub	r14, r17
    bf92:	01 c0       	rjmp	.+2      	; 0xbf96 <vfprintf+0x352>
    bf94:	ee 24       	eor	r14, r14
    bf96:	04 ff       	sbrs	r16, 4
    bf98:	0f c0       	rjmp	.+30     	; 0xbfb8 <vfprintf+0x374>
    bf9a:	80 e3       	ldi	r24, 0x30	; 48
    bf9c:	90 e0       	ldi	r25, 0x00	; 0
    bf9e:	b3 01       	movw	r22, r6
    bfa0:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    bfa4:	02 ff       	sbrs	r16, 2
    bfa6:	1d c0       	rjmp	.+58     	; 0xbfe2 <vfprintf+0x39e>
    bfa8:	01 fd       	sbrc	r16, 1
    bfaa:	03 c0       	rjmp	.+6      	; 0xbfb2 <vfprintf+0x36e>
    bfac:	88 e7       	ldi	r24, 0x78	; 120
    bfae:	90 e0       	ldi	r25, 0x00	; 0
    bfb0:	0e c0       	rjmp	.+28     	; 0xbfce <vfprintf+0x38a>
    bfb2:	88 e5       	ldi	r24, 0x58	; 88
    bfb4:	90 e0       	ldi	r25, 0x00	; 0
    bfb6:	0b c0       	rjmp	.+22     	; 0xbfce <vfprintf+0x38a>
    bfb8:	80 2f       	mov	r24, r16
    bfba:	86 78       	andi	r24, 0x86	; 134
    bfbc:	91 f0       	breq	.+36     	; 0xbfe2 <vfprintf+0x39e>
    bfbe:	01 ff       	sbrs	r16, 1
    bfc0:	02 c0       	rjmp	.+4      	; 0xbfc6 <vfprintf+0x382>
    bfc2:	8b e2       	ldi	r24, 0x2B	; 43
    bfc4:	01 c0       	rjmp	.+2      	; 0xbfc8 <vfprintf+0x384>
    bfc6:	80 e2       	ldi	r24, 0x20	; 32
    bfc8:	f7 fc       	sbrc	r15, 7
    bfca:	8d e2       	ldi	r24, 0x2D	; 45
    bfcc:	90 e0       	ldi	r25, 0x00	; 0
    bfce:	b3 01       	movw	r22, r6
    bfd0:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    bfd4:	06 c0       	rjmp	.+12     	; 0xbfe2 <vfprintf+0x39e>
    bfd6:	80 e3       	ldi	r24, 0x30	; 48
    bfd8:	90 e0       	ldi	r25, 0x00	; 0
    bfda:	b3 01       	movw	r22, r6
    bfdc:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    bfe0:	9a 94       	dec	r9
    bfe2:	d9 14       	cp	r13, r9
    bfe4:	c0 f3       	brcs	.-16     	; 0xbfd6 <vfprintf+0x392>
    bfe6:	da 94       	dec	r13
    bfe8:	f1 01       	movw	r30, r2
    bfea:	ed 0d       	add	r30, r13
    bfec:	f1 1d       	adc	r31, r1
    bfee:	80 81       	ld	r24, Z
    bff0:	90 e0       	ldi	r25, 0x00	; 0
    bff2:	b3 01       	movw	r22, r6
    bff4:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    bff8:	dd 20       	and	r13, r13
    bffa:	a9 f7       	brne	.-22     	; 0xbfe6 <vfprintf+0x3a2>
    bffc:	06 c0       	rjmp	.+12     	; 0xc00a <vfprintf+0x3c6>
    bffe:	80 e2       	ldi	r24, 0x20	; 32
    c000:	90 e0       	ldi	r25, 0x00	; 0
    c002:	b3 01       	movw	r22, r6
    c004:	0e 94 6e 60 	call	0xc0dc	; 0xc0dc <fputc>
    c008:	ea 94       	dec	r14
    c00a:	ee 20       	and	r14, r14
    c00c:	c1 f7       	brne	.-16     	; 0xbffe <vfprintf+0x3ba>
    c00e:	43 ce       	rjmp	.-890    	; 0xbc96 <vfprintf+0x52>
    c010:	f3 01       	movw	r30, r6
    c012:	66 81       	ldd	r22, Z+6	; 0x06
    c014:	77 81       	ldd	r23, Z+7	; 0x07
    c016:	cb 01       	movw	r24, r22
    c018:	2b 96       	adiw	r28, 0x0b	; 11
    c01a:	cd bf       	out	0x3d, r28	; 61
    c01c:	de bf       	out	0x3e, r29	; 62
    c01e:	cf 91       	pop	r28
    c020:	df 91       	pop	r29
    c022:	1f 91       	pop	r17
    c024:	0f 91       	pop	r16
    c026:	ff 90       	pop	r15
    c028:	ef 90       	pop	r14
    c02a:	df 90       	pop	r13
    c02c:	cf 90       	pop	r12
    c02e:	bf 90       	pop	r11
    c030:	af 90       	pop	r10
    c032:	9f 90       	pop	r9
    c034:	8f 90       	pop	r8
    c036:	7f 90       	pop	r7
    c038:	6f 90       	pop	r6
    c03a:	5f 90       	pop	r5
    c03c:	4f 90       	pop	r4
    c03e:	3f 90       	pop	r3
    c040:	2f 90       	pop	r2
    c042:	08 95       	ret

0000c044 <__eerd_byte_x128a1>:
    c044:	03 d0       	rcall	.+6      	; 0xc04c <eeprom_mapen>
    c046:	80 81       	ld	r24, Z
    c048:	99 27       	eor	r25, r25
    c04a:	08 95       	ret

0000c04c <eeprom_mapen>:
    c04c:	e0 ec       	ldi	r30, 0xC0	; 192
    c04e:	f1 e0       	ldi	r31, 0x01	; 1
    c050:	37 85       	ldd	r19, Z+15	; 0x0f
    c052:	37 fd       	sbrc	r19, 7
    c054:	fd cf       	rjmp	.-6      	; 0xc050 <eeprom_mapen+0x4>
    c056:	34 85       	ldd	r19, Z+12	; 0x0c
    c058:	38 60       	ori	r19, 0x08	; 8
    c05a:	34 87       	std	Z+12, r19	; 0x0c
    c05c:	fc 01       	movw	r30, r24
    c05e:	e0 50       	subi	r30, 0x00	; 0
    c060:	f0 4f       	sbci	r31, 0xF0	; 240
    c062:	08 95       	ret

0000c064 <__eewr_byte_x128a1>:
    c064:	26 2f       	mov	r18, r22

0000c066 <__eewr_r18_x128a1>:
    c066:	e0 ec       	ldi	r30, 0xC0	; 192
    c068:	f1 e0       	ldi	r31, 0x01	; 1
    c06a:	37 85       	ldd	r19, Z+15	; 0x0f
    c06c:	37 fd       	sbrc	r19, 7
    c06e:	fd cf       	rjmp	.-6      	; 0xc06a <__eewr_r18_x128a1+0x4>
    c070:	34 85       	ldd	r19, Z+12	; 0x0c
    c072:	37 7f       	andi	r19, 0xF7	; 247
    c074:	34 87       	std	Z+12, r19	; 0x0c
    c076:	37 85       	ldd	r19, Z+15	; 0x0f
    c078:	31 ff       	sbrs	r19, 1
    c07a:	09 c0       	rjmp	.+18     	; 0xc08e <__eewr_r18_x128a1+0x28>
    c07c:	36 e3       	ldi	r19, 0x36	; 54
    c07e:	32 87       	std	Z+10, r19	; 0x0a
    c080:	38 ed       	ldi	r19, 0xD8	; 216
    c082:	34 bf       	out	0x34, r19	; 52
    c084:	31 e0       	ldi	r19, 0x01	; 1
    c086:	33 87       	std	Z+11, r19	; 0x0b
    c088:	37 85       	ldd	r19, Z+15	; 0x0f
    c08a:	37 fd       	sbrc	r19, 7
    c08c:	fd cf       	rjmp	.-6      	; 0xc088 <__eewr_r18_x128a1+0x22>
    c08e:	33 e3       	ldi	r19, 0x33	; 51
    c090:	32 87       	std	Z+10, r19	; 0x0a
    c092:	80 83       	st	Z, r24
    c094:	91 83       	std	Z+1, r25	; 0x01
    c096:	12 82       	std	Z+2, r1	; 0x02
    c098:	24 83       	std	Z+4, r18	; 0x04
    c09a:	25 e3       	ldi	r18, 0x35	; 53
    c09c:	22 87       	std	Z+10, r18	; 0x0a
    c09e:	28 ed       	ldi	r18, 0xD8	; 216
    c0a0:	31 e0       	ldi	r19, 0x01	; 1
    c0a2:	24 bf       	out	0x34, r18	; 52
    c0a4:	33 87       	std	Z+11, r19	; 0x0b
    c0a6:	01 96       	adiw	r24, 0x01	; 1
    c0a8:	08 95       	ret

0000c0aa <__ctype_isfalse>:
    c0aa:	99 27       	eor	r25, r25
    c0ac:	88 27       	eor	r24, r24

0000c0ae <__ctype_istrue>:
    c0ae:	08 95       	ret

0000c0b0 <strnlen_P>:
    c0b0:	fc 01       	movw	r30, r24
    c0b2:	05 90       	lpm	r0, Z+
    c0b4:	61 50       	subi	r22, 0x01	; 1
    c0b6:	70 40       	sbci	r23, 0x00	; 0
    c0b8:	01 10       	cpse	r0, r1
    c0ba:	d8 f7       	brcc	.-10     	; 0xc0b2 <strnlen_P+0x2>
    c0bc:	80 95       	com	r24
    c0be:	90 95       	com	r25
    c0c0:	8e 0f       	add	r24, r30
    c0c2:	9f 1f       	adc	r25, r31
    c0c4:	08 95       	ret

0000c0c6 <strnlen>:
    c0c6:	fc 01       	movw	r30, r24
    c0c8:	61 50       	subi	r22, 0x01	; 1
    c0ca:	70 40       	sbci	r23, 0x00	; 0
    c0cc:	01 90       	ld	r0, Z+
    c0ce:	01 10       	cpse	r0, r1
    c0d0:	d8 f7       	brcc	.-10     	; 0xc0c8 <strnlen+0x2>
    c0d2:	80 95       	com	r24
    c0d4:	90 95       	com	r25
    c0d6:	8e 0f       	add	r24, r30
    c0d8:	9f 1f       	adc	r25, r31
    c0da:	08 95       	ret

0000c0dc <fputc>:
    c0dc:	0f 93       	push	r16
    c0de:	1f 93       	push	r17
    c0e0:	cf 93       	push	r28
    c0e2:	df 93       	push	r29
    c0e4:	8c 01       	movw	r16, r24
    c0e6:	eb 01       	movw	r28, r22
    c0e8:	8b 81       	ldd	r24, Y+3	; 0x03
    c0ea:	81 ff       	sbrs	r24, 1
    c0ec:	1b c0       	rjmp	.+54     	; 0xc124 <fputc+0x48>
    c0ee:	82 ff       	sbrs	r24, 2
    c0f0:	0d c0       	rjmp	.+26     	; 0xc10c <fputc+0x30>
    c0f2:	2e 81       	ldd	r18, Y+6	; 0x06
    c0f4:	3f 81       	ldd	r19, Y+7	; 0x07
    c0f6:	8c 81       	ldd	r24, Y+4	; 0x04
    c0f8:	9d 81       	ldd	r25, Y+5	; 0x05
    c0fa:	28 17       	cp	r18, r24
    c0fc:	39 07       	cpc	r19, r25
    c0fe:	64 f4       	brge	.+24     	; 0xc118 <fputc+0x3c>
    c100:	e8 81       	ld	r30, Y
    c102:	f9 81       	ldd	r31, Y+1	; 0x01
    c104:	01 93       	st	Z+, r16
    c106:	e8 83       	st	Y, r30
    c108:	f9 83       	std	Y+1, r31	; 0x01
    c10a:	06 c0       	rjmp	.+12     	; 0xc118 <fputc+0x3c>
    c10c:	e8 85       	ldd	r30, Y+8	; 0x08
    c10e:	f9 85       	ldd	r31, Y+9	; 0x09
    c110:	80 2f       	mov	r24, r16
    c112:	19 95       	eicall
    c114:	89 2b       	or	r24, r25
    c116:	31 f4       	brne	.+12     	; 0xc124 <fputc+0x48>
    c118:	8e 81       	ldd	r24, Y+6	; 0x06
    c11a:	9f 81       	ldd	r25, Y+7	; 0x07
    c11c:	01 96       	adiw	r24, 0x01	; 1
    c11e:	8e 83       	std	Y+6, r24	; 0x06
    c120:	9f 83       	std	Y+7, r25	; 0x07
    c122:	02 c0       	rjmp	.+4      	; 0xc128 <fputc+0x4c>
    c124:	0f ef       	ldi	r16, 0xFF	; 255
    c126:	1f ef       	ldi	r17, 0xFF	; 255
    c128:	c8 01       	movw	r24, r16
    c12a:	df 91       	pop	r29
    c12c:	cf 91       	pop	r28
    c12e:	1f 91       	pop	r17
    c130:	0f 91       	pop	r16
    c132:	08 95       	ret

0000c134 <__ultoa_invert>:
    c134:	fa 01       	movw	r30, r20
    c136:	aa 27       	eor	r26, r26
    c138:	28 30       	cpi	r18, 0x08	; 8
    c13a:	51 f1       	breq	.+84     	; 0xc190 <__ultoa_invert+0x5c>
    c13c:	20 31       	cpi	r18, 0x10	; 16
    c13e:	81 f1       	breq	.+96     	; 0xc1a0 <__ultoa_invert+0x6c>
    c140:	e8 94       	clt
    c142:	6f 93       	push	r22
    c144:	6e 7f       	andi	r22, 0xFE	; 254
    c146:	6e 5f       	subi	r22, 0xFE	; 254
    c148:	7f 4f       	sbci	r23, 0xFF	; 255
    c14a:	8f 4f       	sbci	r24, 0xFF	; 255
    c14c:	9f 4f       	sbci	r25, 0xFF	; 255
    c14e:	af 4f       	sbci	r26, 0xFF	; 255
    c150:	b1 e0       	ldi	r27, 0x01	; 1
    c152:	3e d0       	rcall	.+124    	; 0xc1d0 <__ultoa_invert+0x9c>
    c154:	b4 e0       	ldi	r27, 0x04	; 4
    c156:	3c d0       	rcall	.+120    	; 0xc1d0 <__ultoa_invert+0x9c>
    c158:	67 0f       	add	r22, r23
    c15a:	78 1f       	adc	r23, r24
    c15c:	89 1f       	adc	r24, r25
    c15e:	9a 1f       	adc	r25, r26
    c160:	a1 1d       	adc	r26, r1
    c162:	68 0f       	add	r22, r24
    c164:	79 1f       	adc	r23, r25
    c166:	8a 1f       	adc	r24, r26
    c168:	91 1d       	adc	r25, r1
    c16a:	a1 1d       	adc	r26, r1
    c16c:	6a 0f       	add	r22, r26
    c16e:	71 1d       	adc	r23, r1
    c170:	81 1d       	adc	r24, r1
    c172:	91 1d       	adc	r25, r1
    c174:	a1 1d       	adc	r26, r1
    c176:	20 d0       	rcall	.+64     	; 0xc1b8 <__ultoa_invert+0x84>
    c178:	09 f4       	brne	.+2      	; 0xc17c <__ultoa_invert+0x48>
    c17a:	68 94       	set
    c17c:	3f 91       	pop	r19
    c17e:	2a e0       	ldi	r18, 0x0A	; 10
    c180:	26 9f       	mul	r18, r22
    c182:	11 24       	eor	r1, r1
    c184:	30 19       	sub	r19, r0
    c186:	30 5d       	subi	r19, 0xD0	; 208
    c188:	31 93       	st	Z+, r19
    c18a:	de f6       	brtc	.-74     	; 0xc142 <__ultoa_invert+0xe>
    c18c:	cf 01       	movw	r24, r30
    c18e:	08 95       	ret
    c190:	46 2f       	mov	r20, r22
    c192:	47 70       	andi	r20, 0x07	; 7
    c194:	40 5d       	subi	r20, 0xD0	; 208
    c196:	41 93       	st	Z+, r20
    c198:	b3 e0       	ldi	r27, 0x03	; 3
    c19a:	0f d0       	rcall	.+30     	; 0xc1ba <__ultoa_invert+0x86>
    c19c:	c9 f7       	brne	.-14     	; 0xc190 <__ultoa_invert+0x5c>
    c19e:	f6 cf       	rjmp	.-20     	; 0xc18c <__ultoa_invert+0x58>
    c1a0:	46 2f       	mov	r20, r22
    c1a2:	4f 70       	andi	r20, 0x0F	; 15
    c1a4:	40 5d       	subi	r20, 0xD0	; 208
    c1a6:	4a 33       	cpi	r20, 0x3A	; 58
    c1a8:	18 f0       	brcs	.+6      	; 0xc1b0 <__ultoa_invert+0x7c>
    c1aa:	49 5d       	subi	r20, 0xD9	; 217
    c1ac:	31 fd       	sbrc	r19, 1
    c1ae:	40 52       	subi	r20, 0x20	; 32
    c1b0:	41 93       	st	Z+, r20
    c1b2:	02 d0       	rcall	.+4      	; 0xc1b8 <__ultoa_invert+0x84>
    c1b4:	a9 f7       	brne	.-22     	; 0xc1a0 <__ultoa_invert+0x6c>
    c1b6:	ea cf       	rjmp	.-44     	; 0xc18c <__ultoa_invert+0x58>
    c1b8:	b4 e0       	ldi	r27, 0x04	; 4
    c1ba:	a6 95       	lsr	r26
    c1bc:	97 95       	ror	r25
    c1be:	87 95       	ror	r24
    c1c0:	77 95       	ror	r23
    c1c2:	67 95       	ror	r22
    c1c4:	ba 95       	dec	r27
    c1c6:	c9 f7       	brne	.-14     	; 0xc1ba <__ultoa_invert+0x86>
    c1c8:	00 97       	sbiw	r24, 0x00	; 0
    c1ca:	61 05       	cpc	r22, r1
    c1cc:	71 05       	cpc	r23, r1
    c1ce:	08 95       	ret
    c1d0:	9b 01       	movw	r18, r22
    c1d2:	ac 01       	movw	r20, r24
    c1d4:	0a 2e       	mov	r0, r26
    c1d6:	06 94       	lsr	r0
    c1d8:	57 95       	ror	r21
    c1da:	47 95       	ror	r20
    c1dc:	37 95       	ror	r19
    c1de:	27 95       	ror	r18
    c1e0:	ba 95       	dec	r27
    c1e2:	c9 f7       	brne	.-14     	; 0xc1d6 <__ultoa_invert+0xa2>
    c1e4:	62 0f       	add	r22, r18
    c1e6:	73 1f       	adc	r23, r19
    c1e8:	84 1f       	adc	r24, r20
    c1ea:	95 1f       	adc	r25, r21
    c1ec:	a0 1d       	adc	r26, r0
    c1ee:	08 95       	ret

0000c1f0 <_exit>:
    c1f0:	f8 94       	cli

0000c1f2 <__stop_program>:
    c1f2:	ff cf       	rjmp	.-2      	; 0xc1f2 <__stop_program>
