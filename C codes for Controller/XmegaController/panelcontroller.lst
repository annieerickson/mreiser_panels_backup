
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ba0c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004e0  00802000  0000ba0c  0000bac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000071d  008024e0  008024e0  0000bfa0  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000bfa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000c024  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000d7c  00000000  00000000  0000cedc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000951d  00000000  00000000  0000dc58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015d4  00000000  00000000  00017175  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006697  00000000  00000000  00018749  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a30  00000000  00000000  0001ede0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000202a  00000000  00000000  0001f810  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000078b4  00000000  00000000  0002183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000258  00000000  00000000  000290ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__ctors_end>
       4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
       8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
       c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      10:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      14:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      18:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      1c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      20:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      24:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      28:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      2c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      30:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      34:	0c 94 14 20 	jmp	0x4028	; 0x4028 <__vector_13>
      38:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      3c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      40:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      44:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      48:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      4c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      50:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      54:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      58:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      5c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      60:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      64:	0c 94 89 2d 	jmp	0x5b12	; 0x5b12 <__vector_25>
      68:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__vector_26>
      6c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      70:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      74:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      78:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      7c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      80:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      84:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      88:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      8c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      90:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      94:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      98:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      9c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      a0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      a4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      a8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      ac:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      b0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      b4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      b8:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <__vector_46>
      bc:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <__vector_47>
      c0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      c4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      c8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      cc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      d0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      d4:	0c 94 49 53 	jmp	0xa692	; 0xa692 <__vector_53>
      d8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      dc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      e0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      e4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      e8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      ec:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      f0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      f4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      f8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
      fc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     100:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     104:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     108:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     10c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     110:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     114:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     118:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     11c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     120:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     124:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     128:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     12c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     130:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__vector_76>
     134:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     138:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     13c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     140:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     144:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     148:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     14c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     150:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     154:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     158:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     15c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     160:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     164:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     168:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     16c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     170:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     174:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     178:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     17c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     180:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     184:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     188:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     18c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     190:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     194:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     198:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     19c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1a0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1a4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1a8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1ac:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__vector_107>
     1b0:	0c 94 7f 54 	jmp	0xa8fe	; 0xa8fe <__vector_108>
     1b4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1b8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1bc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1c0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1c4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1c8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1cc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1d0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1d4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1d8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1dc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1e0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1e4:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1e8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1ec:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1f0:	0c 94 06 08 	jmp	0x100c	; 0x100c <__bad_interrupt>
     1f4:	b7 1a       	sub	r11, r23
     1f6:	bc 1a       	sub	r11, r28
     1f8:	c1 1a       	sub	r12, r17
     1fa:	c5 1a       	sub	r12, r21
     1fc:	c9 1a       	sub	r12, r25
     1fe:	cd 1a       	sub	r12, r29
     200:	d6 1a       	sub	r13, r22
     202:	da 1a       	sub	r13, r26
     204:	de 1a       	sub	r13, r30
     206:	ad 51       	subi	r26, 0x1D	; 29
     208:	b9 51       	subi	r27, 0x19	; 25
     20a:	1a 52       	subi	r17, 0x2A	; 42
     20c:	20 52       	subi	r18, 0x20	; 32
     20e:	aa 51       	subi	r26, 0x1A	; 26
     210:	aa 51       	subi	r26, 0x1A	; 26
     212:	aa 51       	subi	r26, 0x1A	; 26
     214:	aa 51       	subi	r26, 0x1A	; 26
     216:	aa 51       	subi	r26, 0x1A	; 26
     218:	aa 51       	subi	r26, 0x1A	; 26
     21a:	bb 52       	subi	r27, 0x2B	; 43
     21c:	c0 52       	subi	r28, 0x20	; 32
     21e:	c2 52       	subi	r28, 0x22	; 34
     220:	d0 52       	subi	r29, 0x20	; 32
     222:	ef 52       	subi	r30, 0x2F	; 47

00000224 <__c.5504>:
     224:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     234:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000241 <__c.5502>:
     241:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     251:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000262 <__c.5497>:
     262:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     272:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

00000280 <__c.5445>:
     280:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     290:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     2a0:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     2b0:	75 66 66 65 72 0a 00                                uffer..

000002b7 <__c.5443>:
     2b7:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002c2 <__c.5441>:
     2c2:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     2d2:	69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43 6e     in update_funcCn
     2e2:	74 5f 79 0a 00                                      t_y..

000002e7 <__c.5439>:
     2e7:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002f2 <__c.5384>:
     2f2:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     302:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     312:	6e 74 5f 78 0a 00                                   nt_x..

00000318 <__c.5382>:
     318:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000323 <__c.5380>:
     323:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     333:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     343:	63 43 6e 74 5f 78 0a 00                             cCnt_x..

0000034b <__c.5378>:
     34b:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000356 <__c.5328>:
     356:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     366:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     376:	2e 0a 00                                            ...

00000379 <__c.5325>:
     379:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     389:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

0000039a <__c.5323>:
     39a:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     3aa:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000003bb <__c.5321>:
     3bb:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     3cb:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     3db:	20 59 0a 00                                          Y..

000003df <__c.5317>:
     3df:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     3ef:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000400 <__c.5315>:
     400:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     410:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000421 <__c.5313>:
     421:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     431:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     441:	72 20 58 0a 00                                      r X..

00000446 <__c.5263>:
     446:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     456:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     466:	2e 0a 00                                            ...

00000469 <__c.5260>:
     469:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     479:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

0000048a <__c.5258>:
     48a:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     49a:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

000004a8 <__c.5256>:
     4a8:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     4b8:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4c8:	20 59 0a 00                                          Y..

000004cc <__c.5252>:
     4cc:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     4dc:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000004ed <__c.5250>:
     4ed:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     4fd:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

0000050a <__c.5248>:
     50a:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     51a:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     52a:	20 58 0a 00                                          X..

0000052e <__c.5226>:
     52e:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     53e:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

0000054e <__c.5220>:
     54e:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     55e:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

0000056f <__c.5213>:
     56f:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     57f:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

00000590 <__c.5164>:
     590:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     5a0:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     5b0:	20 3d 20 25 75 0a 00                                 = %u..

000005b7 <__c.5140>:
     5b7:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     5c7:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     5d7:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     5e7:	61 72 64 2e 0a 00                                   ard...

000005ed <__c.5138>:
     5ed:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 72 65 61     Successfully rea
     5fd:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     60d:	6f 6e 66 69 67 20 66 69 6c 65 0a 00                 onfig file..

00000619 <__c.5083>:
     619:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     629:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

00000635 <__c.5081>:
     635:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     645:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000654 <__c.5079>:
     654:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     664:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     674:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     684:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     694:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     6a4:	75 0a 00                                            u..

000006a7 <__c.5077>:
     6a7:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     6b7:	25 75 3a 0a 00                                      %u:..

000006bc <__c.4764>:
     6bc:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     6cc:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     6dc:	75 0a 00                                            u..

000006df <__c.4762>:
     6df:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     6ef:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     6ff:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000709 <__c.4760>:
     709:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     719:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000727 <__c.4758>:
     727:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     737:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     747:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

00000750 <__c.4681>:
     750:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     760:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     770:	6e 2e 0a 00                                         n...

00000774 <__c.4625>:
     774:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     784:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     794:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     7a4:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

000007b0 <__c.4588>:
     7b0:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     7c0:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     7d0:	2e 0a 00                                            ...

000007d3 <__c.4585>:
     7d3:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     7e3:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     7f3:	2e 0a 00                                            ...

000007f6 <__c.4487>:
     7f6:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     806:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     816:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     826:	0a 00                                               ..

00000828 <__c.4484>:
     828:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     838:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     848:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     858:	0a 00                                               ..

0000085a <__c.4481>:
     85a:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     86a:	0a 00                                               ..

0000086c <__c.4472>:
     86c:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     87c:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

0000088b <__c.4377>:
     88b:	6d 65 73 73 61 67 65 5f 6c 65 6e 67 74 68 20 3d     message_length =
     89b:	20 25 75 0a 00                                       %u..

000008a0 <__c.4371>:
     8a0:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     8b0:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     8c0:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

000008ce <__c.4360>:
     8ce:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     8de:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     8ee:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

000008fc <__c.4357>:
     8fc:	3f 3f 3f 0a 00                                      ???..

00000901 <__c.4354>:
     901:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

0000090e <__c.4351>:
     90e:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     91e:	21 0a 00                                            !..

00000921 <__c.4348>:
     921:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

0000092a <__c.4344>:
     92a:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00000934 <__c.4341>:
     934:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     944:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

0000094d <__c.4339>:
     94d:	3f 3f 3f 0a 00                                      ???..

00000952 <__c.4336>:
     952:	53 44 48 43 0a 00                                   SDHC..

00000958 <__c.4333>:
     958:	42 4c 4b 0a 00                                      BLK..

0000095d <__c.4330>:
     95d:	53 44 43 0a 00                                      SDC..

00000962 <__c.4327>:
     962:	53 44 32 0a 00                                      SD2..

00000967 <__c.4324>:
     967:	53 44 0a 00                                         SD..

0000096b <__c.4320>:
     96b:	4d 4d 43 0a 00                                      MMC..

00000970 <__c.4317>:
     970:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

0000097c <__c.4315>:
     97c:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     98c:	61 6c 69 7a 65 64 0a 00                             alized..

00000994 <__c.4307>:
     994:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     9a4:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

000009ae <__c.4302>:
     9ae:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     9be:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

000009cb <__c.4297>:
     9cb:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

000009da <__c.4295>:
     9da:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     9ea:	20 57 6f 72 6b 73 0a 00                              Works..

000009f2 <__c.4519>:
     9f2:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     a02:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000a0d <__c.4517>:
     a0d:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     a1d:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000a28 <__c.4511>:
     a28:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     a38:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     a48:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     a58:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000a69 <__c.4509>:
     a69:	0a 00                                               ..

00000a6b <__c.4507>:
     a6b:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     a7b:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000a88 <__c.4502>:
     a88:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     a98:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000aa5 <__c.4500>:
     aa5:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     ab5:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     ac5:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000ad0 <__c.4498>:
     ad0:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     ae0:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     af0:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     b00:	78 0a 00                                            x..

00000b03 <__c.4492>:
     b03:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000b10 <__c.4490>:
     b10:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     b20:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000b2e <__c.4487>:
     b2e:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     b3e:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     b4e:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     b5e:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     b6e:	0a 00                                               ..

00000b70 <__c.4482>:
     b70:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     b80:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     b90:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000b9b <__c.4480>:
     b9b:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     bab:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     bbb:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     bcb:	78 2e 0a 00                                         x...

00000bcf <__c.4474>:
     bcf:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000bdc <__c.4472>:
     bdc:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     bec:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000bfa <__c.4467>:
     bfa:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
     c0a:	0a 00                                               ..

00000c0c <__c.4465>:
     c0c:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     c1c:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00000c29 <__c.4588>:
     c29:	25 53 0a 00                                         %S..

00000c2d <str.4574>:
     c2d:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     c3d:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     c4d:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     c5d:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     c6d:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     c7d:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     c8d:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     c9d:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     cad:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     cbd:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     ccd:	45 4f 55 54 00 00                                   EOUT..

00000cd3 <__c.4387>:
     cd3:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     ce3:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000cee <__c.4385>:
     cee:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     cfe:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000d09 <__c.4379>:
     d09:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     d19:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     d29:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     d39:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000d49 <__c.4377>:
     d49:	0a 00                                               ..

00000d4b <__c.4375>:
     d4b:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d5b:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d68 <__c.4370>:
     d68:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d78:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d85 <__c.4368>:
     d85:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     d95:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     da5:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000db0 <__c.4366>:
     db0:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     dc0:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     dd0:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     de0:	0a 00                                               ..

00000de2 <__c.4360>:
     de2:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000def <__c.4358>:
     def:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     dff:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00000e0c <__c.4355>:
     e0c:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     e1c:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     e2c:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     e3c:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000e4c <__c.4350>:
     e4c:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     e5c:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     e6c:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000e77 <__c.4348>:
     e77:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     e87:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     e97:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     ea7:	2e 0a 00                                            ...

00000eaa <__c.4342>:
     eaa:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000eb7 <__c.4340>:
     eb7:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     ec7:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000ed5 <__c.4335>:
     ed5:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

00000ee6 <__c.4333>:
     ee6:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     ef6:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

00000f02 <__c.4283>:
     f02:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f12:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f1f <__c.4278>:
     f1f:	23 00                                               #.

00000f21 <__c.4248>:
     f21:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f31:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f3e <__c.4243>:
     f3e:	23 00                                               #.

00000f40 <__c.4222>:
     f40:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
     f50:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00000f5f <__c.4217>:
     f5f:	23 00                                               #.

00000f61 <__c.4186>:
     f61:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f71:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f7e <__c.4181>:
     f7e:	23 00                                               #.

00000f80 <__c.4150>:
     f80:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f90:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f9d <__c.4145>:
     f9d:	23 00                                               #.

00000f9f <__c.4123>:
     f9f:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
     faf:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000fbd <__c.4118>:
     fbd:	23 00 00                                            #..

00000fc0 <__ctors_end>:
     fc0:	11 24       	eor	r1, r1
     fc2:	1f be       	out	0x3f, r1	; 63
     fc4:	cf ef       	ldi	r28, 0xFF	; 255
     fc6:	df e3       	ldi	r29, 0x3F	; 63
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	0c bf       	out	0x3c, r16	; 60
     fd0:	18 be       	out	0x38, r1	; 56
     fd2:	19 be       	out	0x39, r1	; 57
     fd4:	1a be       	out	0x3a, r1	; 58
     fd6:	1b be       	out	0x3b, r1	; 59

00000fd8 <__do_copy_data>:
     fd8:	14 e2       	ldi	r17, 0x24	; 36
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e2       	ldi	r27, 0x20	; 32
     fde:	ec e0       	ldi	r30, 0x0C	; 12
     fe0:	fa eb       	ldi	r31, 0xBA	; 186
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	0b bf       	out	0x3b, r16	; 59
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <__do_copy_data+0x14>
     fe8:	07 90       	elpm	r0, Z+
     fea:	0d 92       	st	X+, r0
     fec:	a0 3e       	cpi	r26, 0xE0	; 224
     fee:	b1 07       	cpc	r27, r17
     ff0:	d9 f7       	brne	.-10     	; 0xfe8 <__do_copy_data+0x10>
     ff2:	1b be       	out	0x3b, r1	; 59

00000ff4 <__do_clear_bss>:
     ff4:	1b e2       	ldi	r17, 0x2B	; 43
     ff6:	a0 ee       	ldi	r26, 0xE0	; 224
     ff8:	b4 e2       	ldi	r27, 0x24	; 36
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <.do_clear_bss_start>

00000ffc <.do_clear_bss_loop>:
     ffc:	1d 92       	st	X+, r1

00000ffe <.do_clear_bss_start>:
     ffe:	ad 3f       	cpi	r26, 0xFD	; 253
    1000:	b1 07       	cpc	r27, r17
    1002:	e1 f7       	brne	.-8      	; 0xffc <.do_clear_bss_loop>
    1004:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <main>
    1008:	0c 94 04 5d 	jmp	0xba08	; 0xba08 <_exit>

0000100c <__bad_interrupt>:
    100c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001010 <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    1010:	80 91 9b 27 	lds	r24, 0x279B
    1014:	90 91 9c 27 	lds	r25, 0x279C
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	80 93 9b 27 	sts	0x279B, r24
    101e:	90 93 9c 27 	sts	0x279C, r25
    if (index_x >= x_num)
    1022:	80 91 9b 27 	lds	r24, 0x279B
    1026:	90 91 9c 27 	lds	r25, 0x279C
    102a:	40 91 05 28 	lds	r20, 0x2805
    102e:	50 91 06 28 	lds	r21, 0x2806
    1032:	84 17       	cp	r24, r20
    1034:	95 07       	cpc	r25, r21
    1036:	20 f0       	brcs	.+8      	; 0x1040 <increment_index_x+0x30>
    {index_x = 0;}
    1038:	10 92 9b 27 	sts	0x279B, r1
    103c:	10 92 9c 27 	sts	0x279C, r1
    
    
    frame_num = index_y*x_num + index_x;
    1040:	80 91 50 29 	lds	r24, 0x2950
    1044:	90 91 51 29 	lds	r25, 0x2951
    1048:	20 91 9b 27 	lds	r18, 0x279B
    104c:	30 91 9c 27 	lds	r19, 0x279C
    1050:	bc 01       	movw	r22, r24
    1052:	64 9f       	mul	r22, r20
    1054:	c0 01       	movw	r24, r0
    1056:	65 9f       	mul	r22, r21
    1058:	90 0d       	add	r25, r0
    105a:	74 9f       	mul	r23, r20
    105c:	90 0d       	add	r25, r0
    105e:	11 24       	eor	r1, r1
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	80 93 e5 24 	sts	0x24E5, r24
    1068:	90 93 e6 24 	sts	0x24E6, r25
	
    if (x_gt_y) display_flag++;
    106c:	80 91 e1 24 	lds	r24, 0x24E1
    1070:	88 23       	and	r24, r24
    1072:	29 f0       	breq	.+10     	; 0x107e <increment_index_x+0x6e>
    1074:	80 91 e0 24 	lds	r24, 0x24E0
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 e0 24 	sts	0x24E0, r24
    107e:	08 95       	ret

00001080 <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    1080:	80 91 50 29 	lds	r24, 0x2950
    1084:	90 91 51 29 	lds	r25, 0x2951
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	80 93 50 29 	sts	0x2950, r24
    108e:	90 93 51 29 	sts	0x2951, r25
    if (index_y >= y_num)
    1092:	20 91 50 29 	lds	r18, 0x2950
    1096:	30 91 51 29 	lds	r19, 0x2951
    109a:	80 91 a6 25 	lds	r24, 0x25A6
    109e:	90 91 a7 25 	lds	r25, 0x25A7
    10a2:	28 17       	cp	r18, r24
    10a4:	39 07       	cpc	r19, r25
    10a6:	20 f0       	brcs	.+8      	; 0x10b0 <increment_index_y+0x30>
    {index_y = 0;}
    10a8:	10 92 50 29 	sts	0x2950, r1
    10ac:	10 92 51 29 	sts	0x2951, r1
    
    frame_num = index_y*x_num + index_x;
    10b0:	20 91 50 29 	lds	r18, 0x2950
    10b4:	30 91 51 29 	lds	r19, 0x2951
    10b8:	40 91 9b 27 	lds	r20, 0x279B
    10bc:	50 91 9c 27 	lds	r21, 0x279C
    10c0:	80 91 05 28 	lds	r24, 0x2805
    10c4:	90 91 06 28 	lds	r25, 0x2806
    10c8:	bc 01       	movw	r22, r24
    10ca:	26 9f       	mul	r18, r22
    10cc:	c0 01       	movw	r24, r0
    10ce:	27 9f       	mul	r18, r23
    10d0:	90 0d       	add	r25, r0
    10d2:	36 9f       	mul	r19, r22
    10d4:	90 0d       	add	r25, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	84 0f       	add	r24, r20
    10da:	95 1f       	adc	r25, r21
    10dc:	80 93 e5 24 	sts	0x24E5, r24
    10e0:	90 93 e6 24 	sts	0x24E6, r25
	
    if (x_gt_y == 0) display_flag++;
    10e4:	80 91 e1 24 	lds	r24, 0x24E1
    10e8:	88 23       	and	r24, r24
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <increment_index_y+0x76>
    10ec:	80 91 e0 24 	lds	r24, 0x24E0
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 e0 24 	sts	0x24E0, r24
    10f6:	08 95       	ret

000010f8 <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    10f8:	80 91 9b 27 	lds	r24, 0x279B
    10fc:	90 91 9c 27 	lds	r25, 0x279C
    1100:	89 2b       	or	r24, r25
    1102:	29 f4       	brne	.+10     	; 0x110e <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    1104:	80 91 05 28 	lds	r24, 0x2805
    1108:	90 91 06 28 	lds	r25, 0x2806
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <decrement_index_x+0x1e>
    else
    {index_x--;}
    110e:	80 91 9b 27 	lds	r24, 0x279B
    1112:	90 91 9c 27 	lds	r25, 0x279C
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	80 93 9b 27 	sts	0x279B, r24
    111c:	90 93 9c 27 	sts	0x279C, r25
    
    frame_num = index_y*x_num + index_x;
    1120:	20 91 50 29 	lds	r18, 0x2950
    1124:	30 91 51 29 	lds	r19, 0x2951
    1128:	40 91 9b 27 	lds	r20, 0x279B
    112c:	50 91 9c 27 	lds	r21, 0x279C
    1130:	80 91 05 28 	lds	r24, 0x2805
    1134:	90 91 06 28 	lds	r25, 0x2806
    1138:	bc 01       	movw	r22, r24
    113a:	26 9f       	mul	r18, r22
    113c:	c0 01       	movw	r24, r0
    113e:	27 9f       	mul	r18, r23
    1140:	90 0d       	add	r25, r0
    1142:	36 9f       	mul	r19, r22
    1144:	90 0d       	add	r25, r0
    1146:	11 24       	eor	r1, r1
    1148:	84 0f       	add	r24, r20
    114a:	95 1f       	adc	r25, r21
    114c:	80 93 e5 24 	sts	0x24E5, r24
    1150:	90 93 e6 24 	sts	0x24E6, r25
    if (x_gt_y) display_flag++;
    1154:	80 91 e1 24 	lds	r24, 0x24E1
    1158:	88 23       	and	r24, r24
    115a:	29 f0       	breq	.+10     	; 0x1166 <decrement_index_x+0x6e>
    115c:	80 91 e0 24 	lds	r24, 0x24E0
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	80 93 e0 24 	sts	0x24E0, r24
    1166:	08 95       	ret

00001168 <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    1168:	80 91 50 29 	lds	r24, 0x2950
    116c:	90 91 51 29 	lds	r25, 0x2951
    1170:	89 2b       	or	r24, r25
    1172:	29 f4       	brne	.+10     	; 0x117e <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    1174:	80 91 a6 25 	lds	r24, 0x25A6
    1178:	90 91 a7 25 	lds	r25, 0x25A7
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <decrement_index_y+0x1e>
    else
    {index_y--;}
    117e:	80 91 50 29 	lds	r24, 0x2950
    1182:	90 91 51 29 	lds	r25, 0x2951
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	80 93 50 29 	sts	0x2950, r24
    118c:	90 93 51 29 	sts	0x2951, r25
    
    frame_num = index_y*x_num + index_x;
    1190:	20 91 50 29 	lds	r18, 0x2950
    1194:	30 91 51 29 	lds	r19, 0x2951
    1198:	40 91 9b 27 	lds	r20, 0x279B
    119c:	50 91 9c 27 	lds	r21, 0x279C
    11a0:	80 91 05 28 	lds	r24, 0x2805
    11a4:	90 91 06 28 	lds	r25, 0x2806
    11a8:	bc 01       	movw	r22, r24
    11aa:	26 9f       	mul	r18, r22
    11ac:	c0 01       	movw	r24, r0
    11ae:	27 9f       	mul	r18, r23
    11b0:	90 0d       	add	r25, r0
    11b2:	36 9f       	mul	r19, r22
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	84 0f       	add	r24, r20
    11ba:	95 1f       	adc	r25, r21
    11bc:	80 93 e5 24 	sts	0x24E5, r24
    11c0:	90 93 e6 24 	sts	0x24E6, r25
    if (x_gt_y == 0) display_flag++;
    11c4:	80 91 e1 24 	lds	r24, 0x24E1
    11c8:	88 23       	and	r24, r24
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <decrement_index_y+0x6e>
    11cc:	80 91 e0 24 	lds	r24, 0x24E0
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	80 93 e0 24 	sts	0x24E0, r24
    11d6:	08 95       	ret

000011d8 <handle_message_length_12>:
//load laser trigger pattern. Laer patter has 96 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_12(uint8_t *msg_buffer)
{   
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
	   for (j=0; j<8; j++)
	   {
		if ((tempVal & (1<<(7-j))) == 0)
			laserPattern[i*8+j] = 0;
		else
			laserPattern[i*8+j] = 1;
    11e4:	11 e0       	ldi	r17, 0x01	; 1
{   
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
	{ 
	   tempVal = msg_buffer[i];
    11e6:	88 81       	ld	r24, Y
    11e8:	fa 01       	movw	r30, r20
    11ea:	ea 57       	subi	r30, 0x7A	; 122
    11ec:	f9 4d       	sbci	r31, 0xD9	; 217
    11ee:	df 01       	movw	r26, r30
    11f0:	27 e0       	ldi	r18, 0x07	; 7
    11f2:	30 e0       	ldi	r19, 0x00	; 0
	   for (j=0; j<8; j++)
	   {
		if ((tempVal & (1<<(7-j))) == 0)
    11f4:	68 2f       	mov	r22, r24
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	cb 01       	movw	r24, r22
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <handle_message_length_12+0x2a>
    11fe:	95 95       	asr	r25
    1200:	87 95       	ror	r24
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <handle_message_length_12+0x26>
    1206:	80 fd       	sbrc	r24, 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <handle_message_length_12+0x36>
			laserPattern[i*8+j] = 0;
    120a:	10 82       	st	Z, r1
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <handle_message_length_12+0x38>
		else
			laserPattern[i*8+j] = 1;
    120e:	1c 93       	st	X, r17
    1210:	21 50       	subi	r18, 0x01	; 1
    1212:	30 40       	sbci	r19, 0x00	; 0
    1214:	31 96       	adiw	r30, 0x01	; 1
    1216:	11 96       	adiw	r26, 0x01	; 1
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
	{ 
	   tempVal = msg_buffer[i];
	   for (j=0; j<8; j++)
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	2f 3f       	cpi	r18, 0xFF	; 255
    121c:	38 07       	cpc	r19, r24
    121e:	61 f7       	brne	.-40     	; 0x11f8 <handle_message_length_12+0x20>
    1220:	21 96       	adiw	r28, 0x01	; 1
    1222:	48 5f       	subi	r20, 0xF8	; 248
    1224:	5f 4f       	sbci	r21, 0xFF	; 255

void handle_message_length_12(uint8_t *msg_buffer)
{   
	uint8_t i,j, tempVal;
	
	for (i=0; i<12; i++)
    1226:	40 36       	cpi	r20, 0x60	; 96
    1228:	51 05       	cpc	r21, r1
    122a:	e9 f6       	brne	.-70     	; 0x11e6 <handle_message_length_12+0xe>
		else
			laserPattern[i*8+j] = 1;
	   }
	}
	
	if (quiet_mode_on == 0)
    122c:	80 91 f3 24 	lds	r24, 0x24F3
    1230:	88 23       	and	r24, r24
    1232:	21 f4       	brne	.+8      	; 0x123c <handle_message_length_12+0x64>
        xputs(PSTR("Success set the new laser pattern.\n"));
    1234:	80 e5       	ldi	r24, 0x50	; 80
    1236:	97 e0       	ldi	r25, 0x07	; 7
    1238:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>

}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	08 95       	ret

00001244 <dump_mat>:
    
}


//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    1244:	a4 e3       	ldi	r26, 0x34	; 52
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e2       	ldi	r30, 0x28	; 40
    124a:	f9 e0       	ldi	r31, 0x09	; 9
    124c:	0c 94 a4 57 	jmp	0xaf48	; 0xaf48 <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    1250:	85 ee       	ldi	r24, 0xE5	; 229
    1252:	97 e2       	ldi	r25, 0x27	; 39
    1254:	61 eb       	ldi	r22, 0xB1	; 177
    1256:	70 e2       	ldi	r23, 0x20	; 32
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
    if (res == FR_OK) {
    125e:	88 23       	and	r24, r24
    1260:	09 f0       	breq	.+2      	; 0x1264 <dump_mat+0x20>
    1262:	b5 c0       	rjmp	.+362    	; 0x13ce <dump_mat+0x18a>
        // looks good
        iteration = file4.fsize/50;
    1264:	80 90 ef 27 	lds	r8, 0x27EF
    1268:	70 91 f0 27 	lds	r23, 0x27F0
    126c:	68 2d       	mov	r22, r8
    126e:	80 91 f1 27 	lds	r24, 0x27F1
    1272:	90 91 f2 27 	lds	r25, 0x27F2
    1276:	22 e3       	ldi	r18, 0x32	; 50
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    1282:	79 01       	movw	r14, r18
    1284:	8a 01       	movw	r16, r20
    1286:	99 24       	eor	r9, r9
    1288:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    128a:	22 e3       	ldi	r18, 0x32	; 50
    128c:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    128e:	93 e0       	ldi	r25, 0x03	; 3
    1290:	69 2e       	mov	r6, r25
    1292:	71 2c       	mov	r7, r1
    1294:	6c 0e       	add	r6, r28
    1296:	7d 1e       	adc	r7, r29
    1298:	2e 01       	movw	r4, r28
    129a:	08 94       	sec
    129c:	41 1c       	adc	r4, r1
    129e:	51 1c       	adc	r5, r1
    12a0:	3a c0       	rjmp	.+116    	; 0x1316 <dump_mat+0xd2>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    12a2:	93 9c       	mul	r9, r3
    12a4:	c0 01       	movw	r24, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	c2 97       	sbiw	r24, 0x32	; 50
    12aa:	5c 01       	movw	r10, r24
    12ac:	cc 24       	eor	r12, r12
    12ae:	b7 fc       	sbrc	r11, 7
    12b0:	c0 94       	com	r12
    12b2:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    12b4:	85 ee       	ldi	r24, 0xE5	; 229
    12b6:	97 e2       	ldi	r25, 0x27	; 39
    12b8:	b6 01       	movw	r22, r12
    12ba:	a5 01       	movw	r20, r10
    12bc:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    12c0:	88 23       	and	r24, r24
    12c2:	01 f5       	brne	.+64     	; 0x1304 <dump_mat+0xc0>
    12c4:	80 91 eb 27 	lds	r24, 0x27EB
    12c8:	90 91 ec 27 	lds	r25, 0x27EC
    12cc:	a0 91 ed 27 	lds	r26, 0x27ED
    12d0:	b0 91 ee 27 	lds	r27, 0x27EE
    12d4:	8a 15       	cp	r24, r10
    12d6:	9b 05       	cpc	r25, r11
    12d8:	ac 05       	cpc	r26, r12
    12da:	bd 05       	cpc	r27, r13
    12dc:	99 f4       	brne	.+38     	; 0x1304 <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    12de:	85 ee       	ldi	r24, 0xE5	; 229
    12e0:	97 e2       	ldi	r25, 0x27	; 39
    12e2:	b3 01       	movw	r22, r6
    12e4:	42 e3       	ldi	r20, 0x32	; 50
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	92 01       	movw	r18, r4
    12ea:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    12ee:	88 23       	and	r24, r24
    12f0:	89 f4       	brne	.+34     	; 0x1314 <dump_mat+0xd0>
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	c2 97       	sbiw	r24, 0x32	; 50
    12f8:	69 f4       	brne	.+26     	; 0x1314 <dump_mat+0xd0>
                    send_Tx_buffer(matBuff, 50);
    12fa:	c3 01       	movw	r24, r6
    12fc:	62 e3       	ldi	r22, 0x32	; 50
    12fe:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <send_Tx_buffer>
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <dump_mat+0xd0>
                }
            }else {
                if (quiet_mode_on == 0)
    1304:	80 91 f3 24 	lds	r24, 0x24F3
    1308:	88 23       	and	r24, r24
    130a:	21 f4       	brne	.+8      	; 0x1314 <dump_mat+0xd0>
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    130c:	82 e6       	ldi	r24, 0x62	; 98
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    1314:	93 94       	inc	r9
    1316:	89 2d       	mov	r24, r9
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a0 e0       	ldi	r26, 0x00	; 0
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 16       	cp	r14, r24
    1320:	f9 06       	cpc	r15, r25
    1322:	0a 07       	cpc	r16, r26
    1324:	1b 07       	cpc	r17, r27
    1326:	08 f0       	brcs	.+2      	; 0x132a <dump_mat+0xe6>
    1328:	bc cf       	rjmp	.-136    	; 0x12a2 <dump_mat+0x5e>
                if (quiet_mode_on == 0)
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
            }
        }
        //send the remained data
        offset = (b1-1)*50;
    132a:	82 e3       	ldi	r24, 0x32	; 50
    132c:	98 9e       	mul	r9, r24
    132e:	c0 01       	movw	r24, r0
    1330:	11 24       	eor	r1, r1
    1332:	c2 97       	sbiw	r24, 0x32	; 50
    1334:	5c 01       	movw	r10, r24
    1336:	cc 24       	eor	r12, r12
    1338:	b7 fc       	sbrc	r11, 7
    133a:	c0 94       	com	r12
    133c:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    133e:	85 ee       	ldi	r24, 0xE5	; 229
    1340:	97 e2       	ldi	r25, 0x27	; 39
    1342:	b6 01       	movw	r22, r12
    1344:	a5 01       	movw	r20, r10
    1346:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    134a:	88 23       	and	r24, r24
    134c:	99 f5       	brne	.+102    	; 0x13b4 <dump_mat+0x170>
    134e:	80 91 eb 27 	lds	r24, 0x27EB
    1352:	90 91 ec 27 	lds	r25, 0x27EC
    1356:	a0 91 ed 27 	lds	r26, 0x27ED
    135a:	b0 91 ee 27 	lds	r27, 0x27EE
    135e:	8a 15       	cp	r24, r10
    1360:	9b 05       	cpc	r25, r11
    1362:	ac 05       	cpc	r26, r12
    1364:	bd 05       	cpc	r27, r13
    1366:	31 f5       	brne	.+76     	; 0x13b4 <dump_mat+0x170>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    1368:	c8 01       	movw	r24, r16
    136a:	b7 01       	movw	r22, r14
    136c:	22 e3       	ldi	r18, 0x32	; 50
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    1378:	d8 2c       	mov	r13, r8
    137a:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    137c:	0d 2d       	mov	r16, r13
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	e8 2e       	mov	r14, r24
    1384:	f1 2c       	mov	r15, r1
    1386:	ec 0e       	add	r14, r28
    1388:	fd 1e       	adc	r15, r29
    138a:	85 ee       	ldi	r24, 0xE5	; 229
    138c:	97 e2       	ldi	r25, 0x27	; 39
    138e:	b7 01       	movw	r22, r14
    1390:	a8 01       	movw	r20, r16
    1392:	9e 01       	movw	r18, r28
    1394:	2f 5f       	subi	r18, 0xFF	; 255
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    139c:	88 23       	and	r24, r24
    139e:	91 f4       	brne	.+36     	; 0x13c4 <dump_mat+0x180>
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	80 17       	cp	r24, r16
    13a6:	91 07       	cpc	r25, r17
    13a8:	69 f4       	brne	.+26     	; 0x13c4 <dump_mat+0x180>
                send_Tx_buffer(matBuff, fileRemain);
    13aa:	c7 01       	movw	r24, r14
    13ac:	6d 2d       	mov	r22, r13
    13ae:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <send_Tx_buffer>
    13b2:	08 c0       	rjmp	.+16     	; 0x13c4 <dump_mat+0x180>
            }
        }else {
            if (quiet_mode_on == 0)
    13b4:	80 91 f3 24 	lds	r24, 0x24F3
    13b8:	88 23       	and	r24, r24
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <dump_mat+0x180>
                xputs(PSTR("Error f_lseek in remained data.\n"));
    13bc:	81 e4       	ldi	r24, 0x41	; 65
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
        }
        
        f_close(&file4);
    13c4:	85 ee       	ldi	r24, 0xE5	; 229
    13c6:	97 e2       	ldi	r25, 0x27	; 39
    13c8:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
    13cc:	08 c0       	rjmp	.+16     	; 0x13de <dump_mat+0x19a>
    } else {
        if (quiet_mode_on == 0)
    13ce:	80 91 f3 24 	lds	r24, 0x24F3
    13d2:	88 23       	and	r24, r24
    13d4:	21 f4       	brne	.+8      	; 0x13de <dump_mat+0x19a>
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK)
    13d6:	84 e2       	ldi	r24, 0x24	; 36
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    }
    
}
    13de:	e4 96       	adiw	r28, 0x34	; 52
    13e0:	e1 e1       	ldi	r30, 0x11	; 17
    13e2:	0c 94 c0 57 	jmp	0xaf80	; 0xaf80 <__epilogue_restores__+0x2>

000013e6 <update_funcCnt_y>:
        X_dac_val = (65535/2) + 328*function_X[function_counter_x];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    }
}

void update_funcCnt_y(void) {
    13e6:	ac ec       	ldi	r26, 0xCC	; 204
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
    uint16_t cnt, j, offset;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcYBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_Y != 0){
    13f2:	80 91 f6 24 	lds	r24, 0x24F6
    13f6:	90 91 f7 24 	lds	r25, 0x24F7
    13fa:	20 91 e9 24 	lds	r18, 0x24E9
    13fe:	30 91 ea 24 	lds	r19, 0x24EA
    1402:	89 2b       	or	r24, r25
    1404:	09 f4       	brne	.+2      	; 0x1408 <update_funcCnt_y+0x22>
    1406:	04 c1       	rjmp	.+520    	; 0x1610 <update_funcCnt_y+0x22a>
        function_counter_y ++;
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	20 93 e9 24 	sts	0x24E9, r18
    1410:	30 93 ea 24 	sts	0x24EA, r19
        func_global_counter_y = func_global_counter_y + 2;
    1414:	40 91 ef 24 	lds	r20, 0x24EF
    1418:	50 91 f0 24 	lds	r21, 0x24F0
    141c:	60 91 f1 24 	lds	r22, 0x24F1
    1420:	70 91 f2 24 	lds	r23, 0x24F2
    1424:	4e 5f       	subi	r20, 0xFE	; 254
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	6f 4f       	sbci	r22, 0xFF	; 255
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	40 93 ef 24 	sts	0x24EF, r20
    1430:	50 93 f0 24 	sts	0x24F0, r21
    1434:	60 93 f1 24 	sts	0x24F1, r22
    1438:	70 93 f2 24 	sts	0x24F2, r23
        
        
        if ((function_counter_y >= loadYBuffer/2) || (func_global_counter_y >= funcSize_y)) {
    143c:	80 91 af 20 	lds	r24, 0x20AF
    1440:	90 91 b0 20 	lds	r25, 0x20B0
    1444:	96 95       	lsr	r25
    1446:	87 95       	ror	r24
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
    144c:	70 f4       	brcc	.+28     	; 0x146a <update_funcCnt_y+0x84>
    144e:	80 91 a9 20 	lds	r24, 0x20A9
    1452:	90 91 aa 20 	lds	r25, 0x20AA
    1456:	a0 91 ab 20 	lds	r26, 0x20AB
    145a:	b0 91 ac 20 	lds	r27, 0x20AC
    145e:	48 17       	cp	r20, r24
    1460:	59 07       	cpc	r21, r25
    1462:	6a 07       	cpc	r22, r26
    1464:	7b 07       	cpc	r23, r27
    1466:	08 f4       	brcc	.+2      	; 0x146a <update_funcCnt_y+0x84>
    1468:	dd c0       	rjmp	.+442    	; 0x1624 <update_funcCnt_y+0x23e>
            // need to update function_Y[FUNCITION_LENGTH]
            if (func_global_counter_y >= funcSize_y){
    146a:	80 91 a9 20 	lds	r24, 0x20A9
    146e:	90 91 aa 20 	lds	r25, 0x20AA
    1472:	a0 91 ab 20 	lds	r26, 0x20AB
    1476:	b0 91 ac 20 	lds	r27, 0x20AC
    147a:	48 17       	cp	r20, r24
    147c:	59 07       	cpc	r21, r25
    147e:	6a 07       	cpc	r22, r26
    1480:	7b 07       	cpc	r23, r27
    1482:	78 f0       	brcs	.+30     	; 0x14a2 <update_funcCnt_y+0xbc>
                //read from the start
                offset = 512;
                func_global_counter_y =0;
    1484:	10 92 ef 24 	sts	0x24EF, r1
    1488:	10 92 f0 24 	sts	0x24F0, r1
    148c:	10 92 f1 24 	sts	0x24F1, r1
    1490:	10 92 f2 24 	sts	0x24F2, r1
                function_counter_y = 0;
    1494:	10 92 e9 24 	sts	0x24E9, r1
    1498:	10 92 ea 24 	sts	0x24EA, r1
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	52 e0       	ldi	r21, 0x02	; 2
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <update_funcCnt_y+0xc8>
            }
            else{
                offset = 512 + func_global_counter_y;
    14a2:	40 50       	subi	r20, 0x00	; 0
    14a4:	5e 4f       	sbci	r21, 0xFE	; 254
                function_counter_y = 0;
    14a6:	10 92 e9 24 	sts	0x24E9, r1
    14aa:	10 92 ea 24 	sts	0x24EA, r1
            }
            
            res = f_lseek(&file3, offset);
    14ae:	7a 01       	movw	r14, r20
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	88 ee       	ldi	r24, 0xE8	; 232
    14b6:	96 e2       	ldi	r25, 0x26	; 38
    14b8:	b8 01       	movw	r22, r16
    14ba:	a7 01       	movw	r20, r14
    14bc:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
    14c0:	28 2f       	mov	r18, r24
            if ((res == FR_OK) && (file3.fptr == offset)) {
    14c2:	88 23       	and	r24, r24
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <update_funcCnt_y+0xe2>
    14c6:	86 c0       	rjmp	.+268    	; 0x15d4 <update_funcCnt_y+0x1ee>
    14c8:	80 91 ee 26 	lds	r24, 0x26EE
    14cc:	90 91 ef 26 	lds	r25, 0x26EF
    14d0:	a0 91 f0 26 	lds	r26, 0x26F0
    14d4:	b0 91 f1 26 	lds	r27, 0x26F1
    14d8:	8e 15       	cp	r24, r14
    14da:	9f 05       	cpc	r25, r15
    14dc:	a0 07       	cpc	r26, r16
    14de:	b1 07       	cpc	r27, r17
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <update_funcCnt_y+0xfe>
    14e2:	78 c0       	rjmp	.+240    	; 0x15d4 <update_funcCnt_y+0x1ee>
                
                if (funcSize_y - func_global_counter_y >= 2*FUNCTION_LENGTH) {
    14e4:	e0 90 a9 20 	lds	r14, 0x20A9
    14e8:	f0 90 aa 20 	lds	r15, 0x20AA
    14ec:	00 91 ab 20 	lds	r16, 0x20AB
    14f0:	10 91 ac 20 	lds	r17, 0x20AC
    14f4:	20 91 ef 24 	lds	r18, 0x24EF
    14f8:	30 91 f0 24 	lds	r19, 0x24F0
    14fc:	40 91 f1 24 	lds	r20, 0x24F1
    1500:	50 91 f2 24 	lds	r21, 0x24F2
    1504:	d8 01       	movw	r26, r16
    1506:	c7 01       	movw	r24, r14
    1508:	82 1b       	sub	r24, r18
    150a:	93 0b       	sbc	r25, r19
    150c:	a4 0b       	sbc	r26, r20
    150e:	b5 0b       	sbc	r27, r21
    1510:	88 3c       	cpi	r24, 0xC8	; 200
    1512:	91 05       	cpc	r25, r1
    1514:	a1 05       	cpc	r26, r1
    1516:	b1 05       	cpc	r27, r1
    1518:	18 f0       	brcs	.+6      	; 0x1520 <update_funcCnt_y+0x13a>
                    loadYBuffer = 2*FUNCTION_LENGTH;
    151a:	88 ec       	ldi	r24, 0xC8	; 200
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <update_funcCnt_y+0x140>
                }
                else {
                    loadYBuffer = funcSize_y - func_global_counter_y;
    1520:	c7 01       	movw	r24, r14
    1522:	82 1b       	sub	r24, r18
    1524:	93 0b       	sbc	r25, r19
    1526:	80 93 af 20 	sts	0x20AF, r24
    152a:	90 93 b0 20 	sts	0x20B0, r25
                }
                
                res = f_read(&file3, funcYBuff, loadYBuffer, &cnt);
    152e:	8e 01       	movw	r16, r28
    1530:	0b 5f       	subi	r16, 0xFB	; 251
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	40 91 af 20 	lds	r20, 0x20AF
    1538:	50 91 b0 20 	lds	r21, 0x20B0
    153c:	88 ee       	ldi	r24, 0xE8	; 232
    153e:	96 e2       	ldi	r25, 0x26	; 38
    1540:	b8 01       	movw	r22, r16
    1542:	9e 01       	movw	r18, r28
    1544:	2f 5f       	subi	r18, 0xFF	; 255
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
    154c:	48 2f       	mov	r20, r24
                if ((res == FR_OK) && (cnt == loadYBuffer)) {
    154e:	88 23       	and	r24, r24
    1550:	21 f5       	brne	.+72     	; 0x159a <update_funcCnt_y+0x1b4>
    1552:	29 81       	ldd	r18, Y+1	; 0x01
    1554:	3a 81       	ldd	r19, Y+2	; 0x02
    1556:	80 91 af 20 	lds	r24, 0x20AF
    155a:	90 91 b0 20 	lds	r25, 0x20B0
    155e:	28 17       	cp	r18, r24
    1560:	39 07       	cpc	r19, r25
    1562:	d9 f4       	brne	.+54     	; 0x159a <update_funcCnt_y+0x1b4>
                    
                    for (j = 0; j < loadYBuffer/2; j++)
    1564:	f8 01       	movw	r30, r16
    1566:	6b ea       	ldi	r22, 0xAB	; 171
    1568:	75 e2       	ldi	r23, 0x25	; 37
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	20 0f       	add	r18, r16
    156e:	31 1f       	adc	r19, r17
                    {   ((uint8_t*)&tempVal)[0] = funcYBuff[2*j];
    1570:	ae 01       	movw	r20, r28
    1572:	4d 5f       	subi	r20, 0xFD	; 253
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <update_funcCnt_y+0x1ac>
    1578:	80 81       	ld	r24, Z
    157a:	da 01       	movw	r26, r20
    157c:	8c 93       	st	X, r24
                        ((uint8_t*)&tempVal)[1] = funcYBuff[2*j+1];
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	8c 93       	st	X, r24
                        function_Y [j] = tempVal;
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	db 01       	movw	r26, r22
    158a:	8d 93       	st	X+, r24
    158c:	9d 93       	st	X+, r25
    158e:	bd 01       	movw	r22, r26
    1590:	32 96       	adiw	r30, 0x02	; 2
                }
                
                res = f_read(&file3, funcYBuff, loadYBuffer, &cnt);
                if ((res == FR_OK) && (cnt == loadYBuffer)) {
                    
                    for (j = 0; j < loadYBuffer/2; j++)
    1592:	e2 17       	cp	r30, r18
    1594:	f3 07       	cpc	r31, r19
    1596:	81 f7       	brne	.-32     	; 0x1578 <update_funcCnt_y+0x192>
    1598:	45 c0       	rjmp	.+138    	; 0x1624 <update_funcCnt_y+0x23e>
                        ((uint8_t*)&tempVal)[1] = funcYBuff[2*j+1];
                        function_Y [j] = tempVal;
                    }
                    
                } else {
                    if (quiet_mode_on == 0){
    159a:	80 91 f3 24 	lds	r24, 0x24F3
    159e:	88 23       	and	r24, r24
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <update_funcCnt_y+0x1be>
    15a2:	40 c0       	rjmp	.+128    	; 0x1624 <update_funcCnt_y+0x23e>
                        xprintf(PSTR("res =  %u\n"), res);
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <update_funcCnt_y+0x1c0>
    15a6:	0f 92       	push	r0
    15a8:	ed b7       	in	r30, 0x3d	; 61
    15aa:	fe b7       	in	r31, 0x3e	; 62
    15ac:	31 96       	adiw	r30, 0x01	; 1
    15ae:	87 ee       	ldi	r24, 0xE7	; 231
    15b0:	92 e0       	ldi	r25, 0x02	; 2
    15b2:	ad b7       	in	r26, 0x3d	; 61
    15b4:	be b7       	in	r27, 0x3e	; 62
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	8d 93       	st	X+, r24
    15ba:	9c 93       	st	X, r25
    15bc:	12 97       	sbiw	r26, 0x02	; 2
    15be:	42 83       	std	Z+2, r20	; 0x02
    15c0:	13 82       	std	Z+3, r1	; 0x03
    15c2:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                        xputs(PSTR("Error in f_read in update_funcCnt_y\n"));
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	82 ec       	ldi	r24, 0xC2	; 194
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	1b c0       	rjmp	.+54     	; 0x160a <update_funcCnt_y+0x224>
                    }
                }
            } else {
                if (quiet_mode_on == 0){
    15d4:	80 91 f3 24 	lds	r24, 0x24F3
    15d8:	88 23       	and	r24, r24
    15da:	21 f5       	brne	.+72     	; 0x1624 <update_funcCnt_y+0x23e>
                    xprintf(PSTR("res =  %u\n"), res);
    15dc:	00 d0       	rcall	.+0      	; 0x15de <update_funcCnt_y+0x1f8>
    15de:	0f 92       	push	r0
    15e0:	ed b7       	in	r30, 0x3d	; 61
    15e2:	fe b7       	in	r31, 0x3e	; 62
    15e4:	31 96       	adiw	r30, 0x01	; 1
    15e6:	87 eb       	ldi	r24, 0xB7	; 183
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	ad b7       	in	r26, 0x3d	; 61
    15ec:	be b7       	in	r27, 0x3e	; 62
    15ee:	11 96       	adiw	r26, 0x01	; 1
    15f0:	8d 93       	st	X+, r24
    15f2:	9c 93       	st	X, r25
    15f4:	12 97       	sbiw	r26, 0x02	; 2
    15f6:	22 83       	std	Z+2, r18	; 0x02
    15f8:	13 82       	std	Z+3, r1	; 0x03
    15fa:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                    xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	80 e8       	ldi	r24, 0x80	; 128
    1608:	92 e0       	ldi	r25, 0x02	; 2
    160a:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <update_funcCnt_y+0x23e>
                }
            }
        } //end if (function_counter >= 1000) && (func_global_counter <= funcSize)
    }
    else{
        function_counter_y = (function_counter_y + 1)%FUNCTION_LENGTH;
    1610:	c9 01       	movw	r24, r18
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	64 e6       	ldi	r22, 0x64	; 100
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    161c:	80 93 e9 24 	sts	0x24E9, r24
    1620:	90 93 ea 24 	sts	0x24EA, r25
    }
    
//update analog output
    if (y_mode == 5){
    1624:	80 91 e3 27 	lds	r24, 0x27E3
    1628:	85 30       	cpi	r24, 0x05	; 5
    162a:	e9 f4       	brne	.+58     	; 0x1666 <update_funcCnt_y+0x280>
        Y_dac_val = (65535/2) + 328*function_Y[function_counter_y];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(1, Y_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    162c:	e0 91 e9 24 	lds	r30, 0x24E9
    1630:	f0 91 ea 24 	lds	r31, 0x24EA
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	e5 55       	subi	r30, 0x55	; 85
    163a:	fa 4d       	sbci	r31, 0xDA	; 218
    163c:	20 81       	ld	r18, Z
    163e:	31 81       	ldd	r19, Z+1	; 0x01
    1640:	88 e4       	ldi	r24, 0x48	; 72
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	28 9f       	mul	r18, r24
    1646:	b0 01       	movw	r22, r0
    1648:	29 9f       	mul	r18, r25
    164a:	70 0d       	add	r23, r0
    164c:	38 9f       	mul	r19, r24
    164e:	70 0d       	add	r23, r0
    1650:	11 24       	eor	r1, r1
    1652:	61 50       	subi	r22, 0x01	; 1
    1654:	70 48       	sbci	r23, 0x80	; 128
    1656:	35 e0       	ldi	r19, 0x05	; 5
    1658:	76 95       	lsr	r23
    165a:	67 95       	ror	r22
    165c:	3a 95       	dec	r19
    165e:	e1 f7       	brne	.-8      	; 0x1658 <update_funcCnt_y+0x272>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    }
    
}
    1666:	c4 53       	subi	r28, 0x34	; 52
    1668:	df 4f       	sbci	r29, 0xFF	; 255
    166a:	e6 e0       	ldi	r30, 0x06	; 6
    166c:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

00001670 <update_funcCnt_x>:
                xputs(PSTR("Error input for function channel.\n"));
            break;
    }
}

void update_funcCnt_x(void) {
    1670:	ac ec       	ldi	r26, 0xCC	; 204
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e3       	ldi	r30, 0x3E	; 62
    1676:	fb e0       	ldi	r31, 0x0B	; 11
    1678:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
    uint16_t cnt, j, offset;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcXBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_X != 0){
    167c:	80 91 f4 24 	lds	r24, 0x24F4
    1680:	90 91 f5 24 	lds	r25, 0x24F5
    1684:	20 91 e7 24 	lds	r18, 0x24E7
    1688:	30 91 e8 24 	lds	r19, 0x24E8
    168c:	89 2b       	or	r24, r25
    168e:	09 f4       	brne	.+2      	; 0x1692 <update_funcCnt_x+0x22>
    1690:	04 c1       	rjmp	.+520    	; 0x189a <update_funcCnt_x+0x22a>
        
        function_counter_x++;  //min:0, max:FUNCTION_LENGTH
    1692:	2f 5f       	subi	r18, 0xFF	; 255
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	20 93 e7 24 	sts	0x24E7, r18
    169a:	30 93 e8 24 	sts	0x24E8, r19
        func_global_counter_x = func_global_counter_x + 2; //min:0, max:funcSize_x Note:size of each function datum is 2 bytes.
    169e:	40 91 eb 24 	lds	r20, 0x24EB
    16a2:	50 91 ec 24 	lds	r21, 0x24EC
    16a6:	60 91 ed 24 	lds	r22, 0x24ED
    16aa:	70 91 ee 24 	lds	r23, 0x24EE
    16ae:	4e 5f       	subi	r20, 0xFE	; 254
    16b0:	5f 4f       	sbci	r21, 0xFF	; 255
    16b2:	6f 4f       	sbci	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	40 93 eb 24 	sts	0x24EB, r20
    16ba:	50 93 ec 24 	sts	0x24EC, r21
    16be:	60 93 ed 24 	sts	0x24ED, r22
    16c2:	70 93 ee 24 	sts	0x24EE, r23
        
        if ((function_counter_x >= loadXBuffer/2) || (func_global_counter_x >= funcSize_x)) {
    16c6:	80 91 ad 20 	lds	r24, 0x20AD
    16ca:	90 91 ae 20 	lds	r25, 0x20AE
    16ce:	96 95       	lsr	r25
    16d0:	87 95       	ror	r24
    16d2:	28 17       	cp	r18, r24
    16d4:	39 07       	cpc	r19, r25
    16d6:	70 f4       	brcc	.+28     	; 0x16f4 <update_funcCnt_x+0x84>
    16d8:	80 91 a5 20 	lds	r24, 0x20A5
    16dc:	90 91 a6 20 	lds	r25, 0x20A6
    16e0:	a0 91 a7 20 	lds	r26, 0x20A7
    16e4:	b0 91 a8 20 	lds	r27, 0x20A8
    16e8:	48 17       	cp	r20, r24
    16ea:	59 07       	cpc	r21, r25
    16ec:	6a 07       	cpc	r22, r26
    16ee:	7b 07       	cpc	r23, r27
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <update_funcCnt_x+0x84>
    16f2:	dd c0       	rjmp	.+442    	; 0x18ae <update_funcCnt_x+0x23e>
            // need to update function_X[FUNCITION_LENGTH]
            if (func_global_counter_x >= funcSize_x){
    16f4:	80 91 a5 20 	lds	r24, 0x20A5
    16f8:	90 91 a6 20 	lds	r25, 0x20A6
    16fc:	a0 91 a7 20 	lds	r26, 0x20A7
    1700:	b0 91 a8 20 	lds	r27, 0x20A8
    1704:	48 17       	cp	r20, r24
    1706:	59 07       	cpc	r21, r25
    1708:	6a 07       	cpc	r22, r26
    170a:	7b 07       	cpc	r23, r27
    170c:	78 f0       	brcs	.+30     	; 0x172c <update_funcCnt_x+0xbc>
                
                offset = 512;
                func_global_counter_x =0;
    170e:	10 92 eb 24 	sts	0x24EB, r1
    1712:	10 92 ec 24 	sts	0x24EC, r1
    1716:	10 92 ed 24 	sts	0x24ED, r1
    171a:	10 92 ee 24 	sts	0x24EE, r1
                function_counter_x = 0;
    171e:	10 92 e7 24 	sts	0x24E7, r1
    1722:	10 92 e8 24 	sts	0x24E8, r1
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	52 e0       	ldi	r21, 0x02	; 2
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <update_funcCnt_x+0xc8>
            }
            else{
                
                //read the next loadBuffer bytes
                offset = 512 + func_global_counter_x;
    172c:	40 50       	subi	r20, 0x00	; 0
    172e:	5e 4f       	sbci	r21, 0xFE	; 254
                function_counter_x = 0;
    1730:	10 92 e7 24 	sts	0x24E7, r1
    1734:	10 92 e8 24 	sts	0x24E8, r1
            }
            
            res = f_lseek(&file2, offset);
    1738:	7a 01       	movw	r14, r20
    173a:	00 e0       	ldi	r16, 0x00	; 0
    173c:	10 e0       	ldi	r17, 0x00	; 0
    173e:	86 e7       	ldi	r24, 0x76	; 118
    1740:	95 e2       	ldi	r25, 0x25	; 37
    1742:	b8 01       	movw	r22, r16
    1744:	a7 01       	movw	r20, r14
    1746:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
    174a:	28 2f       	mov	r18, r24
            if ((res == FR_OK) && (file2.fptr == offset)) {
    174c:	88 23       	and	r24, r24
    174e:	09 f0       	breq	.+2      	; 0x1752 <update_funcCnt_x+0xe2>
    1750:	86 c0       	rjmp	.+268    	; 0x185e <update_funcCnt_x+0x1ee>
    1752:	80 91 7c 25 	lds	r24, 0x257C
    1756:	90 91 7d 25 	lds	r25, 0x257D
    175a:	a0 91 7e 25 	lds	r26, 0x257E
    175e:	b0 91 7f 25 	lds	r27, 0x257F
    1762:	8e 15       	cp	r24, r14
    1764:	9f 05       	cpc	r25, r15
    1766:	a0 07       	cpc	r26, r16
    1768:	b1 07       	cpc	r27, r17
    176a:	09 f0       	breq	.+2      	; 0x176e <update_funcCnt_x+0xfe>
    176c:	78 c0       	rjmp	.+240    	; 0x185e <update_funcCnt_x+0x1ee>
                
                if (funcSize_x - func_global_counter_x >= 2*FUNCTION_LENGTH) {
    176e:	e0 90 a5 20 	lds	r14, 0x20A5
    1772:	f0 90 a6 20 	lds	r15, 0x20A6
    1776:	00 91 a7 20 	lds	r16, 0x20A7
    177a:	10 91 a8 20 	lds	r17, 0x20A8
    177e:	20 91 eb 24 	lds	r18, 0x24EB
    1782:	30 91 ec 24 	lds	r19, 0x24EC
    1786:	40 91 ed 24 	lds	r20, 0x24ED
    178a:	50 91 ee 24 	lds	r21, 0x24EE
    178e:	d8 01       	movw	r26, r16
    1790:	c7 01       	movw	r24, r14
    1792:	82 1b       	sub	r24, r18
    1794:	93 0b       	sbc	r25, r19
    1796:	a4 0b       	sbc	r26, r20
    1798:	b5 0b       	sbc	r27, r21
    179a:	88 3c       	cpi	r24, 0xC8	; 200
    179c:	91 05       	cpc	r25, r1
    179e:	a1 05       	cpc	r26, r1
    17a0:	b1 05       	cpc	r27, r1
    17a2:	18 f0       	brcs	.+6      	; 0x17aa <update_funcCnt_x+0x13a>
                    loadXBuffer = 2*FUNCTION_LENGTH;
    17a4:	88 ec       	ldi	r24, 0xC8	; 200
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <update_funcCnt_x+0x140>
                }
                else {
                    loadXBuffer = funcSize_x - func_global_counter_x;
    17aa:	c7 01       	movw	r24, r14
    17ac:	82 1b       	sub	r24, r18
    17ae:	93 0b       	sbc	r25, r19
    17b0:	80 93 ad 20 	sts	0x20AD, r24
    17b4:	90 93 ae 20 	sts	0x20AE, r25
                }
                
                res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
    17b8:	8e 01       	movw	r16, r28
    17ba:	0b 5f       	subi	r16, 0xFB	; 251
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	40 91 ad 20 	lds	r20, 0x20AD
    17c2:	50 91 ae 20 	lds	r21, 0x20AE
    17c6:	86 e7       	ldi	r24, 0x76	; 118
    17c8:	95 e2       	ldi	r25, 0x25	; 37
    17ca:	b8 01       	movw	r22, r16
    17cc:	9e 01       	movw	r18, r28
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
    17d6:	48 2f       	mov	r20, r24
                if ((res == FR_OK) && (cnt == loadXBuffer)) {
    17d8:	88 23       	and	r24, r24
    17da:	21 f5       	brne	.+72     	; 0x1824 <update_funcCnt_x+0x1b4>
    17dc:	29 81       	ldd	r18, Y+1	; 0x01
    17de:	3a 81       	ldd	r19, Y+2	; 0x02
    17e0:	80 91 ad 20 	lds	r24, 0x20AD
    17e4:	90 91 ae 20 	lds	r25, 0x20AE
    17e8:	28 17       	cp	r18, r24
    17ea:	39 07       	cpc	r19, r25
    17ec:	d9 f4       	brne	.+54     	; 0x1824 <update_funcCnt_x+0x1b4>
                    
                    for (j = 0; j < loadXBuffer/2; j++)
    17ee:	f8 01       	movw	r30, r16
    17f0:	67 e0       	ldi	r22, 0x07	; 7
    17f2:	78 e2       	ldi	r23, 0x28	; 40
    17f4:	2e 7f       	andi	r18, 0xFE	; 254
    17f6:	20 0f       	add	r18, r16
    17f8:	31 1f       	adc	r19, r17
                    {   ((uint8_t*)&tempVal)[0] = funcXBuff[2*j];
    17fa:	ae 01       	movw	r20, r28
    17fc:	4d 5f       	subi	r20, 0xFD	; 253
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	0d c0       	rjmp	.+26     	; 0x181c <update_funcCnt_x+0x1ac>
    1802:	80 81       	ld	r24, Z
    1804:	da 01       	movw	r26, r20
    1806:	8c 93       	st	X, r24
                        ((uint8_t*)&tempVal)[1] = funcXBuff[2*j+1];
    1808:	81 81       	ldd	r24, Z+1	; 0x01
    180a:	11 96       	adiw	r26, 0x01	; 1
    180c:	8c 93       	st	X, r24
                        function_X [j] = tempVal;
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	db 01       	movw	r26, r22
    1814:	8d 93       	st	X+, r24
    1816:	9d 93       	st	X+, r25
    1818:	bd 01       	movw	r22, r26
    181a:	32 96       	adiw	r30, 0x02	; 2
                }
                
                res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
                if ((res == FR_OK) && (cnt == loadXBuffer)) {
                    
                    for (j = 0; j < loadXBuffer/2; j++)
    181c:	e2 17       	cp	r30, r18
    181e:	f3 07       	cpc	r31, r19
    1820:	81 f7       	brne	.-32     	; 0x1802 <update_funcCnt_x+0x192>
    1822:	45 c0       	rjmp	.+138    	; 0x18ae <update_funcCnt_x+0x23e>
                        ((uint8_t*)&tempVal)[1] = funcXBuff[2*j+1];
                        function_X [j] = tempVal;
                    }
                    
                } else {
                    if (quiet_mode_on == 0){
    1824:	80 91 f3 24 	lds	r24, 0x24F3
    1828:	88 23       	and	r24, r24
    182a:	09 f0       	breq	.+2      	; 0x182e <update_funcCnt_x+0x1be>
    182c:	40 c0       	rjmp	.+128    	; 0x18ae <update_funcCnt_x+0x23e>
                        xprintf(PSTR("res =  %u\n"), res);
    182e:	00 d0       	rcall	.+0      	; 0x1830 <update_funcCnt_x+0x1c0>
    1830:	0f 92       	push	r0
    1832:	ed b7       	in	r30, 0x3d	; 61
    1834:	fe b7       	in	r31, 0x3e	; 62
    1836:	31 96       	adiw	r30, 0x01	; 1
    1838:	8b e4       	ldi	r24, 0x4B	; 75
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	ad b7       	in	r26, 0x3d	; 61
    183e:	be b7       	in	r27, 0x3e	; 62
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	8d 93       	st	X+, r24
    1844:	9c 93       	st	X, r25
    1846:	12 97       	sbiw	r26, 0x02	; 2
    1848:	42 83       	std	Z+2, r20	; 0x02
    184a:	13 82       	std	Z+3, r1	; 0x03
    184c:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                        xputs(PSTR("Error in f_read in in update_funcCnt_x\n"));
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	83 e2       	ldi	r24, 0x23	; 35
    185a:	93 e0       	ldi	r25, 0x03	; 3
    185c:	1b c0       	rjmp	.+54     	; 0x1894 <update_funcCnt_x+0x224>
                    }
                }
            } else {
                if (quiet_mode_on == 0){
    185e:	80 91 f3 24 	lds	r24, 0x24F3
    1862:	88 23       	and	r24, r24
    1864:	21 f5       	brne	.+72     	; 0x18ae <update_funcCnt_x+0x23e>
                    xprintf(PSTR("res =  %u\n"), res);
    1866:	00 d0       	rcall	.+0      	; 0x1868 <update_funcCnt_x+0x1f8>
    1868:	0f 92       	push	r0
    186a:	ed b7       	in	r30, 0x3d	; 61
    186c:	fe b7       	in	r31, 0x3e	; 62
    186e:	31 96       	adiw	r30, 0x01	; 1
    1870:	88 e1       	ldi	r24, 0x18	; 24
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	ad b7       	in	r26, 0x3d	; 61
    1876:	be b7       	in	r27, 0x3e	; 62
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	8d 93       	st	X+, r24
    187c:	9c 93       	st	X, r25
    187e:	12 97       	sbiw	r26, 0x02	; 2
    1880:	22 83       	std	Z+2, r18	; 0x02
    1882:	13 82       	std	Z+3, r1	; 0x03
    1884:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                    xputs(PSTR("Error in f_lseek in update_funcCnt_x\n"));
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	82 ef       	ldi	r24, 0xF2	; 242
    1892:	92 e0       	ldi	r25, 0x02	; 2
    1894:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <update_funcCnt_x+0x23e>
            }
        } //end if ((function_counter_x >= loadBuffer/2) || (func_global_counter_x >= funcSize_x))
        
    }
    else{
        function_counter_x = (function_counter_x + 1)%FUNCTION_LENGTH;
    189a:	c9 01       	movw	r24, r18
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	64 e6       	ldi	r22, 0x64	; 100
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    18a6:	80 93 e7 24 	sts	0x24E7, r24
    18aa:	90 93 e8 24 	sts	0x24E8, r25
    }
    
    if (x_mode == 5)   // in function DBG mode - show the function gen
    18ae:	80 91 99 27 	lds	r24, 0x2799
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	e9 f4       	brne	.+58     	; 0x18f0 <update_funcCnt_x+0x280>
    {
        X_dac_val = (65535/2) + 328*function_X[function_counter_x];   //328 should convert 1V (=20) to 0.5 V
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    18b6:	e0 91 e7 24 	lds	r30, 0x24E7
    18ba:	f0 91 e8 24 	lds	r31, 0x24E8
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	e9 5f       	subi	r30, 0xF9	; 249
    18c4:	f7 4d       	sbci	r31, 0xD7	; 215
    18c6:	20 81       	ld	r18, Z
    18c8:	31 81       	ldd	r19, Z+1	; 0x01
    18ca:	88 e4       	ldi	r24, 0x48	; 72
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	28 9f       	mul	r18, r24
    18d0:	b0 01       	movw	r22, r0
    18d2:	29 9f       	mul	r18, r25
    18d4:	70 0d       	add	r23, r0
    18d6:	38 9f       	mul	r19, r24
    18d8:	70 0d       	add	r23, r0
    18da:	11 24       	eor	r1, r1
    18dc:	61 50       	subi	r22, 0x01	; 1
    18de:	70 48       	sbci	r23, 0x80	; 128
    18e0:	f5 e0       	ldi	r31, 0x05	; 5
    18e2:	76 95       	lsr	r23
    18e4:	67 95       	ror	r22
    18e6:	fa 95       	dec	r31
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <update_funcCnt_x+0x272>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    }
}
    18f0:	c4 53       	subi	r28, 0x34	; 52
    18f2:	df 4f       	sbci	r29, 0xFF	; 255
    18f4:	e6 e0       	ldi	r30, 0x06	; 6
    18f6:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

000018fa <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    18fa:	ae e0       	ldi	r26, 0x0E	; 14
    18fc:	b2 e0       	ldi	r27, 0x02	; 2
    18fe:	e3 e8       	ldi	r30, 0x83	; 131
    1900:	fc e0       	ldi	r31, 0x0C	; 12
    1902:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x1a>
    1906:	f8 2e       	mov	r15, r24
    1908:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    190a:	6a 30       	cpi	r22, 0x0A	; 10
    190c:	80 f4       	brcc	.+32     	; 0x192e <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    190e:	00 d0       	rcall	.+0      	; 0x1910 <set_vel_func+0x16>
    1910:	00 d0       	rcall	.+0      	; 0x1912 <set_vel_func+0x18>
    1912:	ed b7       	in	r30, 0x3d	; 61
    1914:	fe b7       	in	r31, 0x3e	; 62
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	ce 01       	movw	r24, r28
    191a:	03 96       	adiw	r24, 0x03	; 3
    191c:	ad b7       	in	r26, 0x3d	; 61
    191e:	be b7       	in	r27, 0x3e	; 62
    1920:	11 96       	adiw	r26, 0x01	; 1
    1922:	8d 93       	st	X+, r24
    1924:	9c 93       	st	X, r25
    1926:	12 97       	sbiw	r26, 0x02	; 2
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e2       	ldi	r25, 0x20	; 32
    192c:	1f c0       	rjmp	.+62     	; 0x196c <set_vel_func+0x72>
    192e:	ce 01       	movw	r24, r28
    1930:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1932:	64 36       	cpi	r22, 0x64	; 100
    1934:	70 f4       	brcc	.+28     	; 0x1952 <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    1936:	00 d0       	rcall	.+0      	; 0x1938 <set_vel_func+0x3e>
    1938:	00 d0       	rcall	.+0      	; 0x193a <set_vel_func+0x40>
    193a:	ed b7       	in	r30, 0x3d	; 61
    193c:	fe b7       	in	r31, 0x3e	; 62
    193e:	31 96       	adiw	r30, 0x01	; 1
    1940:	ad b7       	in	r26, 0x3d	; 61
    1942:	be b7       	in	r27, 0x3e	; 62
    1944:	11 96       	adiw	r26, 0x01	; 1
    1946:	8d 93       	st	X+, r24
    1948:	9c 93       	st	X, r25
    194a:	12 97       	sbiw	r26, 0x02	; 2
    194c:	8e e0       	ldi	r24, 0x0E	; 14
    194e:	90 e2       	ldi	r25, 0x20	; 32
    1950:	0d c0       	rjmp	.+26     	; 0x196c <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    1952:	00 d0       	rcall	.+0      	; 0x1954 <set_vel_func+0x5a>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <set_vel_func+0x5c>
    1956:	ed b7       	in	r30, 0x3d	; 61
    1958:	fe b7       	in	r31, 0x3e	; 62
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	ad b7       	in	r26, 0x3d	; 61
    195e:	be b7       	in	r27, 0x3e	; 62
    1960:	11 96       	adiw	r26, 0x01	; 1
    1962:	8d 93       	st	X+, r24
    1964:	9c 93       	st	X, r25
    1966:	12 97       	sbiw	r26, 0x02	; 2
    1968:	8b e1       	ldi	r24, 0x1B	; 27
    196a:	90 e2       	ldi	r25, 0x20	; 32
    196c:	82 83       	std	Z+2, r24	; 0x02
    196e:	93 83       	std	Z+3, r25	; 0x03
    1970:	14 83       	std	Z+4, r17	; 0x04
    1972:	15 82       	std	Z+5, r1	; 0x05
    1974:	0e 94 03 5a 	call	0xb406	; 0xb406 <sprintf>
    1978:	8d b7       	in	r24, 0x3d	; 61
    197a:	9e b7       	in	r25, 0x3e	; 62
    197c:	06 96       	adiw	r24, 0x06	; 6
    197e:	8d bf       	out	0x3d, r24	; 61
    1980:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	f9 16       	cp	r15, r25
    1986:	29 f0       	breq	.+10     	; 0x1992 <set_vel_func+0x98>
    1988:	a2 e0       	ldi	r26, 0x02	; 2
    198a:	fa 16       	cp	r15, r26
    198c:	09 f0       	breq	.+2      	; 0x1990 <set_vel_func+0x96>
    198e:	17 c1       	rjmp	.+558    	; 0x1bbe <set_vel_func+0x2c4>
    1990:	89 c0       	rjmp	.+274    	; 0x1aa4 <set_vel_func+0x1aa>
        case 1:    //channel x
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
    1992:	40 91 9f 20 	lds	r20, 0x209F
    1996:	50 91 a0 20 	lds	r21, 0x20A0
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	88 e3       	ldi	r24, 0x38	; 56
    19a0:	9b e0       	ldi	r25, 0x0B	; 11
    19a2:	24 e0       	ldi	r18, 0x04	; 4
    19a4:	00 e0       	ldi	r16, 0x00	; 0
    19a6:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            //read the header block and send back the function name
            res = f_close(&file2);
    19aa:	86 e7       	ldi	r24, 0x76	; 118
    19ac:	95 e2       	ldi	r25, 0x25	; 37
    19ae:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    19b2:	86 e7       	ldi	r24, 0x76	; 118
    19b4:	95 e2       	ldi	r25, 0x25	; 37
    19b6:	be 01       	movw	r22, r28
    19b8:	6d 5f       	subi	r22, 0xFD	; 253
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
            
            if (res == FR_OK) {
    19c2:	88 23       	and	r24, r24
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <set_vel_func+0xce>
    19c6:	48 c0       	rjmp	.+144    	; 0x1a58 <set_vel_func+0x15e>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    19c8:	86 e7       	ldi	r24, 0x76	; 118
    19ca:	95 e2       	ldi	r25, 0x25	; 37
    19cc:	be 01       	movw	r22, r28
    19ce:	61 5f       	subi	r22, 0xF1	; 241
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	52 e0       	ldi	r21, 0x02	; 2
    19d6:	9e 01       	movw	r18, r28
    19d8:	2f 5f       	subi	r18, 0xFF	; 255
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    19e0:	88 23       	and	r24, r24
    19e2:	99 f5       	brne	.+102    	; 0x1a4a <set_vel_func+0x150>
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	80 50       	subi	r24, 0x00	; 0
    19ea:	92 40       	sbci	r25, 0x02	; 2
    19ec:	71 f5       	brne	.+92     	; 0x1a4a <set_vel_func+0x150>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    19ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f0:	80 93 a5 20 	sts	0x20A5, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    19f4:	88 89       	ldd	r24, Y+16	; 0x10
    19f6:	80 93 a6 20 	sts	0x20A6, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    19fa:	89 89       	ldd	r24, Y+17	; 0x11
    19fc:	80 93 a7 20 	sts	0x20A7, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    1a00:	8a 89       	ldd	r24, Y+18	; 0x12
    1a02:	80 93 a8 20 	sts	0x20A8, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    1a06:	10 93 f4 24 	sts	0x24F4, r17
    1a0a:	10 92 f5 24 	sts	0x24F5, r1
                    
                    Stop = 1;
    1a0e:	f0 92 9c 20 	sts	0x209C, r15
                    display_flag = 0;  //clear the display flag
    1a12:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1a16:	80 91 f3 24 	lds	r24, 0x24F3
    1a1a:	88 23       	and	r24, r24
    1a1c:	29 f5       	brne	.+74     	; 0x1a68 <set_vel_func+0x16e>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <set_vel_func+0x126>
    1a20:	0f 92       	push	r0
    1a22:	ed b7       	in	r30, 0x3d	; 61
    1a24:	fe b7       	in	r31, 0x3e	; 62
    1a26:	31 96       	adiw	r30, 0x01	; 1
    1a28:	81 e2       	ldi	r24, 0x21	; 33
    1a2a:	94 e0       	ldi	r25, 0x04	; 4
    1a2c:	ad b7       	in	r26, 0x3d	; 61
    1a2e:	be b7       	in	r27, 0x3e	; 62
    1a30:	11 96       	adiw	r26, 0x01	; 1
    1a32:	8d 93       	st	X+, r24
    1a34:	9c 93       	st	X, r25
    1a36:	12 97       	sbiw	r26, 0x02	; 2
    1a38:	12 83       	std	Z+2, r17	; 0x02
    1a3a:	13 82       	std	Z+3, r1	; 0x03
    1a3c:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <set_vel_func+0x16e>
                    
                } else {
                    if (quiet_mode_on == 0)
    1a4a:	80 91 f3 24 	lds	r24, 0x24F3
    1a4e:	88 23       	and	r24, r24
    1a50:	59 f4       	brne	.+22     	; 0x1a68 <set_vel_func+0x16e>
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	94 e0       	ldi	r25, 0x04	; 4
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <set_vel_func+0x16a>
                }
            } else {
                if (quiet_mode_on == 0)
    1a58:	80 91 f3 24 	lds	r24, 0x24F3
    1a5c:	88 23       	and	r24, r24
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <set_vel_func+0x16e>
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    1a60:	8f ed       	ldi	r24, 0xDF	; 223
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            }
            function_counter_x = 0;
    1a68:	10 92 e7 24 	sts	0x24E7, r1
    1a6c:	10 92 e8 24 	sts	0x24E8, r1
            func_global_counter_x = funcSize_x;
    1a70:	80 91 a5 20 	lds	r24, 0x20A5
    1a74:	90 91 a6 20 	lds	r25, 0x20A6
    1a78:	a0 91 a7 20 	lds	r26, 0x20A7
    1a7c:	b0 91 a8 20 	lds	r27, 0x20A8
    1a80:	80 93 eb 24 	sts	0x24EB, r24
    1a84:	90 93 ec 24 	sts	0x24EC, r25
    1a88:	a0 93 ed 24 	sts	0x24ED, r26
    1a8c:	b0 93 ee 24 	sts	0x24EE, r27
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1); //enable ISR
    1a90:	40 91 9f 20 	lds	r20, 0x209F
    1a94:	50 91 a0 20 	lds	r21, 0x20A0
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	88 e3       	ldi	r24, 0x38	; 56
    1a9e:	9b e0       	ldi	r25, 0x0B	; 11
    1aa0:	24 e0       	ldi	r18, 0x04	; 4
    1aa2:	89 c0       	rjmp	.+274    	; 0x1bb6 <set_vel_func+0x2bc>
            break;
            
        case 2:
            
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
    1aa4:	40 91 a1 20 	lds	r20, 0x20A1
    1aa8:	50 91 a2 20 	lds	r21, 0x20A2
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	83 ef       	ldi	r24, 0xF3	; 243
    1ab2:	99 e0       	ldi	r25, 0x09	; 9
    1ab4:	25 e0       	ldi	r18, 0x05	; 5
    1ab6:	00 e0       	ldi	r16, 0x00	; 0
    1ab8:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            
            res = f_close(&file3);
    1abc:	88 ee       	ldi	r24, 0xE8	; 232
    1abe:	96 e2       	ldi	r25, 0x26	; 38
    1ac0:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1ac4:	88 ee       	ldi	r24, 0xE8	; 232
    1ac6:	96 e2       	ldi	r25, 0x26	; 38
    1ac8:	be 01       	movw	r22, r28
    1aca:	6d 5f       	subi	r22, 0xFD	; 253
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
            
            if (res == FR_OK) {
    1ad4:	88 23       	and	r24, r24
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <set_vel_func+0x1e0>
    1ad8:	49 c0       	rjmp	.+146    	; 0x1b6c <set_vel_func+0x272>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    1ada:	88 ee       	ldi	r24, 0xE8	; 232
    1adc:	96 e2       	ldi	r25, 0x26	; 38
    1ade:	be 01       	movw	r22, r28
    1ae0:	61 5f       	subi	r22, 0xF1	; 241
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	52 e0       	ldi	r21, 0x02	; 2
    1ae8:	9e 01       	movw	r18, r28
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1af2:	88 23       	and	r24, r24
    1af4:	a1 f5       	brne	.+104    	; 0x1b5e <set_vel_func+0x264>
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	80 50       	subi	r24, 0x00	; 0
    1afc:	92 40       	sbci	r25, 0x02	; 2
    1afe:	79 f5       	brne	.+94     	; 0x1b5e <set_vel_func+0x264>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    1b00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b02:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    1b06:	88 89       	ldd	r24, Y+16	; 0x10
    1b08:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    1b0c:	89 89       	ldd	r24, Y+17	; 0x11
    1b0e:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    1b12:	8a 89       	ldd	r24, Y+18	; 0x12
    1b14:	80 93 ac 20 	sts	0x20AC, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    1b18:	10 93 f6 24 	sts	0x24F6, r17
    1b1c:	10 92 f7 24 	sts	0x24F7, r1
                    
                    Stop = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1b26:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1b2a:	80 91 f3 24 	lds	r24, 0x24F3
    1b2e:	88 23       	and	r24, r24
    1b30:	29 f5       	brne	.+74     	; 0x1b7c <set_vel_func+0x282>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <set_vel_func+0x23a>
    1b34:	0f 92       	push	r0
    1b36:	ed b7       	in	r30, 0x3d	; 61
    1b38:	fe b7       	in	r31, 0x3e	; 62
    1b3a:	31 96       	adiw	r30, 0x01	; 1
    1b3c:	8b eb       	ldi	r24, 0xBB	; 187
    1b3e:	93 e0       	ldi	r25, 0x03	; 3
    1b40:	ad b7       	in	r26, 0x3d	; 61
    1b42:	be b7       	in	r27, 0x3e	; 62
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	8d 93       	st	X+, r24
    1b48:	9c 93       	st	X, r25
    1b4a:	12 97       	sbiw	r26, 0x02	; 2
    1b4c:	12 83       	std	Z+2, r17	; 0x02
    1b4e:	13 82       	std	Z+3, r1	; 0x03
    1b50:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <set_vel_func+0x282>
                    
                } else {
                    if (quiet_mode_on == 0)
    1b5e:	80 91 f3 24 	lds	r24, 0x24F3
    1b62:	88 23       	and	r24, r24
    1b64:	59 f4       	brne	.+22     	; 0x1b7c <set_vel_func+0x282>
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    1b66:	8a e9       	ldi	r24, 0x9A	; 154
    1b68:	93 e0       	ldi	r25, 0x03	; 3
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <set_vel_func+0x27e>
                }
            } else {
                if (quiet_mode_on == 0)
    1b6c:	80 91 f3 24 	lds	r24, 0x24F3
    1b70:	88 23       	and	r24, r24
    1b72:	21 f4       	brne	.+8      	; 0x1b7c <set_vel_func+0x282>
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    1b74:	89 e7       	ldi	r24, 0x79	; 121
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            }
            function_counter_y = 0;
    1b7c:	10 92 e9 24 	sts	0x24E9, r1
    1b80:	10 92 ea 24 	sts	0x24EA, r1
            func_global_counter_y = funcSize_y;
    1b84:	80 91 a9 20 	lds	r24, 0x20A9
    1b88:	90 91 aa 20 	lds	r25, 0x20AA
    1b8c:	a0 91 ab 20 	lds	r26, 0x20AB
    1b90:	b0 91 ac 20 	lds	r27, 0x20AC
    1b94:	80 93 ef 24 	sts	0x24EF, r24
    1b98:	90 93 f0 24 	sts	0x24F0, r25
    1b9c:	a0 93 f1 24 	sts	0x24F1, r26
    1ba0:	b0 93 f2 24 	sts	0x24F2, r27
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
    1ba4:	40 91 a1 20 	lds	r20, 0x20A1
    1ba8:	50 91 a2 20 	lds	r21, 0x20A2
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	83 ef       	ldi	r24, 0xF3	; 243
    1bb2:	99 e0       	ldi	r25, 0x09	; 9
    1bb4:	25 e0       	ldi	r18, 0x05	; 5
    1bb6:	01 e0       	ldi	r16, 0x01	; 1
    1bb8:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
    1bbc:	08 c0       	rjmp	.+16     	; 0x1bce <set_vel_func+0x2d4>
            break;
            
        default:
            if (quiet_mode_on == 0)
    1bbe:	80 91 f3 24 	lds	r24, 0x24F3
    1bc2:	88 23       	and	r24, r24
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <set_vel_func+0x2d4>
                xputs(PSTR("Error input for function channel.\n"));
    1bc6:	86 e5       	ldi	r24, 0x56	; 86
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            break;
    }
}
    1bce:	c2 5f       	subi	r28, 0xF2	; 242
    1bd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1bd2:	e5 e0       	ldi	r30, 0x05	; 5
    1bd4:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x1a>

00001bd8 <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    1bd8:	ae e0       	ldi	r26, 0x0E	; 14
    1bda:	b2 e0       	ldi	r27, 0x02	; 2
    1bdc:	e2 ef       	ldi	r30, 0xF2	; 242
    1bde:	fd e0       	ldi	r31, 0x0D	; 13
    1be0:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x1a>
    1be4:	f8 2e       	mov	r15, r24
    1be6:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    1be8:	6a 30       	cpi	r22, 0x0A	; 10
    1bea:	80 f4       	brcc	.+32     	; 0x1c0c <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <set_pos_func+0x16>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <set_pos_func+0x18>
    1bf0:	ed b7       	in	r30, 0x3d	; 61
    1bf2:	fe b7       	in	r31, 0x3e	; 62
    1bf4:	31 96       	adiw	r30, 0x01	; 1
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	03 96       	adiw	r24, 0x03	; 3
    1bfa:	ad b7       	in	r26, 0x3d	; 61
    1bfc:	be b7       	in	r27, 0x3e	; 62
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	8d 93       	st	X+, r24
    1c02:	9c 93       	st	X, r25
    1c04:	12 97       	sbiw	r26, 0x02	; 2
    1c06:	87 e2       	ldi	r24, 0x27	; 39
    1c08:	90 e2       	ldi	r25, 0x20	; 32
    1c0a:	1f c0       	rjmp	.+62     	; 0x1c4a <set_pos_func+0x72>
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1c10:	64 36       	cpi	r22, 0x64	; 100
    1c12:	70 f4       	brcc	.+28     	; 0x1c30 <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <set_pos_func+0x3e>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <set_pos_func+0x40>
    1c18:	ed b7       	in	r30, 0x3d	; 61
    1c1a:	fe b7       	in	r31, 0x3e	; 62
    1c1c:	31 96       	adiw	r30, 0x01	; 1
    1c1e:	ad b7       	in	r26, 0x3d	; 61
    1c20:	be b7       	in	r27, 0x3e	; 62
    1c22:	11 96       	adiw	r26, 0x01	; 1
    1c24:	8d 93       	st	X+, r24
    1c26:	9c 93       	st	X, r25
    1c28:	12 97       	sbiw	r26, 0x02	; 2
    1c2a:	85 e3       	ldi	r24, 0x35	; 53
    1c2c:	90 e2       	ldi	r25, 0x20	; 32
    1c2e:	0d c0       	rjmp	.+26     	; 0x1c4a <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <set_pos_func+0x5a>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <set_pos_func+0x5c>
    1c34:	ed b7       	in	r30, 0x3d	; 61
    1c36:	fe b7       	in	r31, 0x3e	; 62
    1c38:	31 96       	adiw	r30, 0x01	; 1
    1c3a:	ad b7       	in	r26, 0x3d	; 61
    1c3c:	be b7       	in	r27, 0x3e	; 62
    1c3e:	11 96       	adiw	r26, 0x01	; 1
    1c40:	8d 93       	st	X+, r24
    1c42:	9c 93       	st	X, r25
    1c44:	12 97       	sbiw	r26, 0x02	; 2
    1c46:	82 e4       	ldi	r24, 0x42	; 66
    1c48:	90 e2       	ldi	r25, 0x20	; 32
    1c4a:	82 83       	std	Z+2, r24	; 0x02
    1c4c:	93 83       	std	Z+3, r25	; 0x03
    1c4e:	14 83       	std	Z+4, r17	; 0x04
    1c50:	15 82       	std	Z+5, r1	; 0x05
    1c52:	0e 94 03 5a 	call	0xb406	; 0xb406 <sprintf>
    1c56:	8d b7       	in	r24, 0x3d	; 61
    1c58:	9e b7       	in	r25, 0x3e	; 62
    1c5a:	06 96       	adiw	r24, 0x06	; 6
    1c5c:	8d bf       	out	0x3d, r24	; 61
    1c5e:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	f9 16       	cp	r15, r25
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <set_pos_func+0x98>
    1c66:	a2 e0       	ldi	r26, 0x02	; 2
    1c68:	fa 16       	cp	r15, r26
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <set_pos_func+0x96>
    1c6c:	17 c1       	rjmp	.+558    	; 0x1e9c <set_pos_func+0x2c4>
    1c6e:	89 c0       	rjmp	.+274    	; 0x1d82 <set_pos_func+0x1aa>
        case 1:    //channel x
            //read the header block and send back the function name
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
    1c70:	40 91 9f 20 	lds	r20, 0x209F
    1c74:	50 91 a0 20 	lds	r21, 0x20A0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	88 e3       	ldi	r24, 0x38	; 56
    1c7e:	9b e0       	ldi	r25, 0x0B	; 11
    1c80:	24 e0       	ldi	r18, 0x04	; 4
    1c82:	00 e0       	ldi	r16, 0x00	; 0
    1c84:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            
            res = f_close(&file2);
    1c88:	86 e7       	ldi	r24, 0x76	; 118
    1c8a:	95 e2       	ldi	r25, 0x25	; 37
    1c8c:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1c90:	86 e7       	ldi	r24, 0x76	; 118
    1c92:	95 e2       	ldi	r25, 0x25	; 37
    1c94:	be 01       	movw	r22, r28
    1c96:	6d 5f       	subi	r22, 0xFD	; 253
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
            if (res == FR_OK) {
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <set_pos_func+0xce>
    1ca4:	48 c0       	rjmp	.+144    	; 0x1d36 <set_pos_func+0x15e>
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    1ca6:	86 e7       	ldi	r24, 0x76	; 118
    1ca8:	95 e2       	ldi	r25, 0x25	; 37
    1caa:	be 01       	movw	r22, r28
    1cac:	61 5f       	subi	r22, 0xF1	; 241
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	52 e0       	ldi	r21, 0x02	; 2
    1cb4:	9e 01       	movw	r18, r28
    1cb6:	2f 5f       	subi	r18, 0xFF	; 255
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1cbe:	88 23       	and	r24, r24
    1cc0:	99 f5       	brne	.+102    	; 0x1d28 <set_pos_func+0x150>
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	80 50       	subi	r24, 0x00	; 0
    1cc8:	92 40       	sbci	r25, 0x02	; 2
    1cca:	71 f5       	brne	.+92     	; 0x1d28 <set_pos_func+0x150>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    1ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cce:	80 93 a5 20 	sts	0x20A5, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    1cd2:	88 89       	ldd	r24, Y+16	; 0x10
    1cd4:	80 93 a6 20 	sts	0x20A6, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    1cd8:	89 89       	ldd	r24, Y+17	; 0x11
    1cda:	80 93 a7 20 	sts	0x20A7, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    1cde:	8a 89       	ldd	r24, Y+18	; 0x12
    1ce0:	80 93 a8 20 	sts	0x20A8, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    1ce4:	10 93 f4 24 	sts	0x24F4, r17
    1ce8:	10 92 f5 24 	sts	0x24F5, r1
                    
                    Stop = 1;
    1cec:	f0 92 9c 20 	sts	0x209C, r15
                    display_flag = 0;  //clear the display flag
    1cf0:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1cf4:	80 91 f3 24 	lds	r24, 0x24F3
    1cf8:	88 23       	and	r24, r24
    1cfa:	29 f5       	brne	.+74     	; 0x1d46 <set_pos_func+0x16e>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <set_pos_func+0x126>
    1cfe:	0f 92       	push	r0
    1d00:	ed b7       	in	r30, 0x3d	; 61
    1d02:	fe b7       	in	r31, 0x3e	; 62
    1d04:	31 96       	adiw	r30, 0x01	; 1
    1d06:	8a e0       	ldi	r24, 0x0A	; 10
    1d08:	95 e0       	ldi	r25, 0x05	; 5
    1d0a:	ad b7       	in	r26, 0x3d	; 61
    1d0c:	be b7       	in	r27, 0x3e	; 62
    1d0e:	11 96       	adiw	r26, 0x01	; 1
    1d10:	8d 93       	st	X+, r24
    1d12:	9c 93       	st	X, r25
    1d14:	12 97       	sbiw	r26, 0x02	; 2
    1d16:	12 83       	std	Z+2, r17	; 0x02
    1d18:	13 82       	std	Z+3, r1	; 0x03
    1d1a:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <set_pos_func+0x16e>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else {
                    if (quiet_mode_on == 0)
    1d28:	80 91 f3 24 	lds	r24, 0x24F3
    1d2c:	88 23       	and	r24, r24
    1d2e:	59 f4       	brne	.+22     	; 0x1d46 <set_pos_func+0x16e>
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    1d30:	8d ee       	ldi	r24, 0xED	; 237
    1d32:	94 e0       	ldi	r25, 0x04	; 4
    1d34:	06 c0       	rjmp	.+12     	; 0x1d42 <set_pos_func+0x16a>
                }
            } else {
                if (quiet_mode_on == 0)
    1d36:	80 91 f3 24 	lds	r24, 0x24F3
    1d3a:	88 23       	and	r24, r24
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <set_pos_func+0x16e>
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    1d3e:	8c ec       	ldi	r24, 0xCC	; 204
    1d40:	94 e0       	ldi	r25, 0x04	; 4
    1d42:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            }
            function_counter_x = 0;
    1d46:	10 92 e7 24 	sts	0x24E7, r1
    1d4a:	10 92 e8 24 	sts	0x24E8, r1
            func_global_counter_x = funcSize_x;
    1d4e:	80 91 a5 20 	lds	r24, 0x20A5
    1d52:	90 91 a6 20 	lds	r25, 0x20A6
    1d56:	a0 91 a7 20 	lds	r26, 0x20A7
    1d5a:	b0 91 a8 20 	lds	r27, 0x20A8
    1d5e:	80 93 eb 24 	sts	0x24EB, r24
    1d62:	90 93 ec 24 	sts	0x24EC, r25
    1d66:	a0 93 ed 24 	sts	0x24ED, r26
    1d6a:	b0 93 ee 24 	sts	0x24EE, r27
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//enable ISR
    1d6e:	40 91 9f 20 	lds	r20, 0x209F
    1d72:	50 91 a0 20 	lds	r21, 0x20A0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	88 e3       	ldi	r24, 0x38	; 56
    1d7c:	9b e0       	ldi	r25, 0x0B	; 11
    1d7e:	24 e0       	ldi	r18, 0x04	; 4
    1d80:	89 c0       	rjmp	.+274    	; 0x1e94 <set_pos_func+0x2bc>
            break;
            
        case 2:
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
    1d82:	40 91 a1 20 	lds	r20, 0x20A1
    1d86:	50 91 a2 20 	lds	r21, 0x20A2
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	83 ef       	ldi	r24, 0xF3	; 243
    1d90:	99 e0       	ldi	r25, 0x09	; 9
    1d92:	25 e0       	ldi	r18, 0x05	; 5
    1d94:	00 e0       	ldi	r16, 0x00	; 0
    1d96:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            //read the header block and send back the function name
            res = f_close(&file3);
    1d9a:	88 ee       	ldi	r24, 0xE8	; 232
    1d9c:	96 e2       	ldi	r25, 0x26	; 38
    1d9e:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1da2:	88 ee       	ldi	r24, 0xE8	; 232
    1da4:	96 e2       	ldi	r25, 0x26	; 38
    1da6:	be 01       	movw	r22, r28
    1da8:	6d 5f       	subi	r22, 0xFD	; 253
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
            if (res == FR_OK) {
    1db2:	88 23       	and	r24, r24
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <set_pos_func+0x1e0>
    1db6:	49 c0       	rjmp	.+146    	; 0x1e4a <set_pos_func+0x272>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    1db8:	88 ee       	ldi	r24, 0xE8	; 232
    1dba:	96 e2       	ldi	r25, 0x26	; 38
    1dbc:	be 01       	movw	r22, r28
    1dbe:	61 5f       	subi	r22, 0xF1	; 241
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	52 e0       	ldi	r21, 0x02	; 2
    1dc6:	9e 01       	movw	r18, r28
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1dd0:	88 23       	and	r24, r24
    1dd2:	a1 f5       	brne	.+104    	; 0x1e3c <set_pos_func+0x264>
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	80 50       	subi	r24, 0x00	; 0
    1dda:	92 40       	sbci	r25, 0x02	; 2
    1ddc:	79 f5       	brne	.+94     	; 0x1e3c <set_pos_func+0x264>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    1de4:	88 89       	ldd	r24, Y+16	; 0x10
    1de6:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    1dea:	89 89       	ldd	r24, Y+17	; 0x11
    1dec:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    1df0:	8a 89       	ldd	r24, Y+18	; 0x12
    1df2:	80 93 ac 20 	sts	0x20AC, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_y[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_y[func_name_len] = '\0';
                    
                    func_ID_Y = func_id;
    1df6:	10 93 f6 24 	sts	0x24F6, r17
    1dfa:	10 92 f7 24 	sts	0x24F7, r1
                    
                    Stop = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1e04:	10 92 e0 24 	sts	0x24E0, r1
                    if (quiet_mode_on == 0)
    1e08:	80 91 f3 24 	lds	r24, 0x24F3
    1e0c:	88 23       	and	r24, r24
    1e0e:	29 f5       	brne	.+74     	; 0x1e5a <set_pos_func+0x282>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <set_pos_func+0x23a>
    1e12:	0f 92       	push	r0
    1e14:	ed b7       	in	r30, 0x3d	; 61
    1e16:	fe b7       	in	r31, 0x3e	; 62
    1e18:	31 96       	adiw	r30, 0x01	; 1
    1e1a:	88 ea       	ldi	r24, 0xA8	; 168
    1e1c:	94 e0       	ldi	r25, 0x04	; 4
    1e1e:	ad b7       	in	r26, 0x3d	; 61
    1e20:	be b7       	in	r27, 0x3e	; 62
    1e22:	11 96       	adiw	r26, 0x01	; 1
    1e24:	8d 93       	st	X+, r24
    1e26:	9c 93       	st	X, r25
    1e28:	12 97       	sbiw	r26, 0x02	; 2
    1e2a:	12 83       	std	Z+2, r17	; 0x02
    1e2c:	13 82       	std	Z+3, r1	; 0x03
    1e2e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <set_pos_func+0x282>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                    if (quiet_mode_on == 0)
    1e3c:	80 91 f3 24 	lds	r24, 0x24F3
    1e40:	88 23       	and	r24, r24
    1e42:	59 f4       	brne	.+22     	; 0x1e5a <set_pos_func+0x282>
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    1e44:	8a e8       	ldi	r24, 0x8A	; 138
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <set_pos_func+0x27e>
                }
            } else {
                if (quiet_mode_on == 0)
    1e4a:	80 91 f3 24 	lds	r24, 0x24F3
    1e4e:	88 23       	and	r24, r24
    1e50:	21 f4       	brne	.+8      	; 0x1e5a <set_pos_func+0x282>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    1e52:	89 e6       	ldi	r24, 0x69	; 105
    1e54:	94 e0       	ldi	r25, 0x04	; 4
    1e56:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            }
            function_counter_y = 0;
    1e5a:	10 92 e9 24 	sts	0x24E9, r1
    1e5e:	10 92 ea 24 	sts	0x24EA, r1
            func_global_counter_y = funcSize_y;
    1e62:	80 91 a9 20 	lds	r24, 0x20A9
    1e66:	90 91 aa 20 	lds	r25, 0x20AA
    1e6a:	a0 91 ab 20 	lds	r26, 0x20AB
    1e6e:	b0 91 ac 20 	lds	r27, 0x20AC
    1e72:	80 93 ef 24 	sts	0x24EF, r24
    1e76:	90 93 f0 24 	sts	0x24F0, r25
    1e7a:	a0 93 f1 24 	sts	0x24F1, r26
    1e7e:	b0 93 f2 24 	sts	0x24F2, r27
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
    1e82:	40 91 a1 20 	lds	r20, 0x20A1
    1e86:	50 91 a2 20 	lds	r21, 0x20A2
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	83 ef       	ldi	r24, 0xF3	; 243
    1e90:	99 e0       	ldi	r25, 0x09	; 9
    1e92:	25 e0       	ldi	r18, 0x05	; 5
    1e94:	01 e0       	ldi	r16, 0x01	; 1
    1e96:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
    1e9a:	08 c0       	rjmp	.+16     	; 0x1eac <set_pos_func+0x2d4>
            break;
            
        default:
            if (quiet_mode_on == 0)
    1e9c:	80 91 f3 24 	lds	r24, 0x24F3
    1ea0:	88 23       	and	r24, r24
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <set_pos_func+0x2d4>
                xputs(PSTR("Error input for function channel.\n"));
    1ea4:	86 e4       	ldi	r24, 0x46	; 70
    1ea6:	94 e0       	ldi	r25, 0x04	; 4
    1ea8:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            break;
    }
}
    1eac:	c2 5f       	subi	r28, 0xF2	; 242
    1eae:	dd 4f       	sbci	r29, 0xFD	; 253
    1eb0:	e5 e0       	ldi	r30, 0x05	; 5
    1eb2:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x1a>

00001eb6 <set_default_func>:
            TWI_MasterWrite(twi, addr, data, len);
        }
    }
}

void set_default_func(uint8_t func_channel) {
    1eb6:	0f 93       	push	r16
    uint16_t funcCnt;
    
    switch (func_channel) {
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	31 f0       	breq	.+12     	; 0x1ec8 <set_default_func+0x12>
    1ebc:	90 91 f3 24 	lds	r25, 0x24F3
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <set_default_func+0x10>
    1ec4:	61 c0       	rjmp	.+194    	; 0x1f88 <set_default_func+0xd2>
    1ec6:	33 c0       	rjmp	.+102    	; 0x1f2e <set_default_func+0x78>
        case 1:
            if (quiet_mode_on == 0)
    1ec8:	80 91 f3 24 	lds	r24, 0x24F3
    1ecc:	88 23       	and	r24, r24
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <set_default_func+0x22>
                xputs(PSTR("Setting default function for X.\n"));
    1ed0:	8f e6       	ldi	r24, 0x6F	; 111
    1ed2:	95 e0       	ldi	r25, 0x05	; 5
    1ed4:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
    1ed8:	40 91 9f 20 	lds	r20, 0x209F
    1edc:	50 91 a0 20 	lds	r21, 0x20A0
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	88 e3       	ldi	r24, 0x38	; 56
    1ee6:	9b e0       	ldi	r25, 0x0B	; 11
    1ee8:	24 e0       	ldi	r18, 0x04	; 4
    1eea:	00 e0       	ldi	r16, 0x00	; 0
    1eec:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            func_ID_X = 0;
    1ef0:	10 92 f4 24 	sts	0x24F4, r1
    1ef4:	10 92 f5 24 	sts	0x24F5, r1
            funcSize_x = FUNCTION_LENGTH;
    1ef8:	84 e6       	ldi	r24, 0x64	; 100
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	80 93 a5 20 	sts	0x20A5, r24
    1f04:	90 93 a6 20 	sts	0x20A6, r25
    1f08:	a0 93 a7 20 	sts	0x20A7, r26
    1f0c:	b0 93 a8 20 	sts	0x20A8, r27
    1f10:	e7 e0       	ldi	r30, 0x07	; 7
    1f12:	f8 e2       	ldi	r31, 0x28	; 40
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_X[funcCnt] = 10; }
    1f14:	8a e0       	ldi	r24, 0x0A	; 10
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	81 93       	st	Z+, r24
    1f1a:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1f1c:	28 e2       	ldi	r18, 0x28	; 40
    1f1e:	ef 3c       	cpi	r30, 0xCF	; 207
    1f20:	f2 07       	cpc	r31, r18
    1f22:	d1 f7       	brne	.-12     	; 0x1f18 <set_default_func+0x62>
            { function_X[funcCnt] = 10; }
            function_counter_x = 0;
    1f24:	10 92 e7 24 	sts	0x24E7, r1
    1f28:	10 92 e8 24 	sts	0x24E8, r1
    1f2c:	33 c0       	rjmp	.+102    	; 0x1f94 <set_default_func+0xde>
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    1f2e:	99 23       	and	r25, r25
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <set_default_func+0x84>
                xputs(PSTR("Setting default function for Y.\n"));
    1f32:	8e e4       	ldi	r24, 0x4E	; 78
    1f34:	95 e0       	ldi	r25, 0x05	; 5
    1f36:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
    1f3a:	40 91 a1 20 	lds	r20, 0x20A1
    1f3e:	50 91 a2 20 	lds	r21, 0x20A2
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	83 ef       	ldi	r24, 0xF3	; 243
    1f48:	99 e0       	ldi	r25, 0x09	; 9
    1f4a:	25 e0       	ldi	r18, 0x05	; 5
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            func_ID_Y = 0;
    1f52:	10 92 f6 24 	sts	0x24F6, r1
    1f56:	10 92 f7 24 	sts	0x24F7, r1
            funcSize_y = FUNCTION_LENGTH;
    1f5a:	84 e6       	ldi	r24, 0x64	; 100
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	80 93 a9 20 	sts	0x20A9, r24
    1f66:	90 93 aa 20 	sts	0x20AA, r25
    1f6a:	a0 93 ab 20 	sts	0x20AB, r26
    1f6e:	b0 93 ac 20 	sts	0x20AC, r27
    1f72:	eb ea       	ldi	r30, 0xAB	; 171
    1f74:	f5 e2       	ldi	r31, 0x25	; 37
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    1f76:	8a e0       	ldi	r24, 0x0A	; 10
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	81 93       	st	Z+, r24
    1f7c:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1f7e:	26 e2       	ldi	r18, 0x26	; 38
    1f80:	e3 37       	cpi	r30, 0x73	; 115
    1f82:	f2 07       	cpc	r31, r18
    1f84:	d1 f7       	brne	.-12     	; 0x1f7a <set_default_func+0xc4>
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <set_default_func+0xde>
            { function_Y[funcCnt] = 10; }
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            if (quiet_mode_on == 0)
    1f88:	99 23       	and	r25, r25
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <set_default_func+0xde>
                xputs(PSTR("Wrong function channel number.\n"));
    1f8c:	8e e2       	ldi	r24, 0x2E	; 46
    1f8e:	95 e0       	ldi	r25, 0x05	; 5
    1f90:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    }
    
}
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	16 2f       	mov	r17, r22
    1fa0:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    1fa2:	88 23       	and	r24, r24
    1fa4:	49 f5       	brne	.+82     	; 0x1ff8 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    1fa6:	80 91 82 26 	lds	r24, 0x2682
    1faa:	88 23       	and	r24, r24
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    1fae:	85 e7       	ldi	r24, 0x75	; 117
    1fb0:	96 e2       	ldi	r25, 0x26	; 38
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	ae 01       	movw	r20, r28
    1fb6:	21 2f       	mov	r18, r17
    1fb8:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    1fbc:	80 91 7f 29 	lds	r24, 0x297F
    1fc0:	88 23       	and	r24, r24
    1fc2:	e1 f7       	brne	.-8      	; 0x1fbc <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    1fc4:	82 e7       	ldi	r24, 0x72	; 114
    1fc6:	99 e2       	ldi	r25, 0x29	; 41
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	ae 01       	movw	r20, r28
    1fcc:	21 2f       	mov	r18, r17
    1fce:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    1fd2:	80 91 15 27 	lds	r24, 0x2715
    1fd6:	88 23       	and	r24, r24
    1fd8:	e1 f7       	brne	.-8      	; 0x1fd2 <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    1fda:	88 e0       	ldi	r24, 0x08	; 8
    1fdc:	97 e2       	ldi	r25, 0x27	; 39
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	ae 01       	movw	r20, r28
    1fe2:	21 2f       	mov	r18, r17
    1fe4:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    1fe8:	80 91 a4 25 	lds	r24, 0x25A4
    1fec:	88 23       	and	r24, r24
    1fee:	e1 f7       	brne	.-8      	; 0x1fe8 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    1ff0:	87 e9       	ldi	r24, 0x97	; 151
    1ff2:	95 e2       	ldi	r25, 0x25	; 37
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	22 c0       	rjmp	.+68     	; 0x203c <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    1ff8:	e8 2f       	mov	r30, r24
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	df 01       	movw	r26, r30
    1ffe:	a8 5e       	subi	r26, 0xE8	; 232
    2000:	b8 4d       	sbci	r27, 0xD8	; 216
    2002:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    2004:	e1 53       	subi	r30, 0x31	; 49
    2006:	f7 4d       	sbci	r31, 0xD7	; 215
    2008:	60 81       	ld	r22, Z
        if (ch != 0){
    200a:	aa 23       	and	r26, r26
    200c:	d9 f0       	breq	.+54     	; 0x2044 <i2cMasterSend+0xac>
            
            switch (ch) {
    200e:	a3 30       	cpi	r26, 0x03	; 3
    2010:	51 f0       	breq	.+20     	; 0x2026 <i2cMasterSend+0x8e>
    2012:	a4 30       	cpi	r26, 0x04	; 4
    2014:	59 f0       	breq	.+22     	; 0x202c <i2cMasterSend+0x94>
    2016:	a2 30       	cpi	r26, 0x02	; 2
    2018:	19 f4       	brne	.+6      	; 0x2020 <i2cMasterSend+0x88>
    201a:	a2 e7       	ldi	r26, 0x72	; 114
    201c:	b9 e2       	ldi	r27, 0x29	; 41
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <i2cMasterSend+0x98>
    2020:	a5 e7       	ldi	r26, 0x75	; 117
    2022:	b6 e2       	ldi	r27, 0x26	; 38
    2024:	05 c0       	rjmp	.+10     	; 0x2030 <i2cMasterSend+0x98>
    2026:	a8 e0       	ldi	r26, 0x08	; 8
    2028:	b7 e2       	ldi	r27, 0x27	; 39
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    202c:	a7 e9       	ldi	r26, 0x97	; 151
    202e:	b5 e2       	ldi	r27, 0x25	; 37
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    2030:	1d 96       	adiw	r26, 0x0d	; 13
    2032:	8c 91       	ld	r24, X
    2034:	1d 97       	sbiw	r26, 0x0d	; 13
    2036:	88 23       	and	r24, r24
    2038:	d9 f7       	brne	.-10     	; 0x2030 <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    203a:	cd 01       	movw	r24, r26
    203c:	ae 01       	movw	r20, r28
    203e:	21 2f       	mov	r18, r17
    2040:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
        }
    }
}
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	08 95       	ret

0000204c <set_hwConfig>:
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    204c:	a2 e8       	ldi	r26, 0x82	; 130
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ec e2       	ldi	r30, 0x2C	; 44
    2052:	f0 e1       	ldi	r31, 0x10	; 16
    2054:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    2058:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    205a:	8a 30       	cpi	r24, 0x0A	; 10
    205c:	80 f4       	brcc	.+32     	; 0x207e <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    205e:	00 d0       	rcall	.+0      	; 0x2060 <set_hwConfig+0x14>
    2060:	00 d0       	rcall	.+0      	; 0x2062 <set_hwConfig+0x16>
    2062:	ed b7       	in	r30, 0x3d	; 61
    2064:	fe b7       	in	r31, 0x3e	; 62
    2066:	31 96       	adiw	r30, 0x01	; 1
    2068:	88 ef       	ldi	r24, 0xF8	; 248
    206a:	94 e2       	ldi	r25, 0x24	; 36
    206c:	ad b7       	in	r26, 0x3d	; 61
    206e:	be b7       	in	r27, 0x3e	; 62
    2070:	11 96       	adiw	r26, 0x01	; 1
    2072:	8d 93       	st	X+, r24
    2074:	9c 93       	st	X, r25
    2076:	12 97       	sbiw	r26, 0x02	; 2
    2078:	8e e4       	ldi	r24, 0x4E	; 78
    207a:	90 e2       	ldi	r25, 0x20	; 32
    207c:	1f c0       	rjmp	.+62     	; 0x20bc <set_hwConfig+0x70>
    207e:	88 ef       	ldi	r24, 0xF8	; 248
    2080:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    2082:	24 36       	cpi	r18, 0x64	; 100
    2084:	70 f4       	brcc	.+28     	; 0x20a2 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    2086:	00 d0       	rcall	.+0      	; 0x2088 <set_hwConfig+0x3c>
    2088:	00 d0       	rcall	.+0      	; 0x208a <set_hwConfig+0x3e>
    208a:	ed b7       	in	r30, 0x3d	; 61
    208c:	fe b7       	in	r31, 0x3e	; 62
    208e:	31 96       	adiw	r30, 0x01	; 1
    2090:	ad b7       	in	r26, 0x3d	; 61
    2092:	be b7       	in	r27, 0x3e	; 62
    2094:	11 96       	adiw	r26, 0x01	; 1
    2096:	8d 93       	st	X+, r24
    2098:	9c 93       	st	X, r25
    209a:	12 97       	sbiw	r26, 0x02	; 2
    209c:	8c e5       	ldi	r24, 0x5C	; 92
    209e:	90 e2       	ldi	r25, 0x20	; 32
    20a0:	0d c0       	rjmp	.+26     	; 0x20bc <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <set_hwConfig+0x58>
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <set_hwConfig+0x5a>
    20a6:	ed b7       	in	r30, 0x3d	; 61
    20a8:	fe b7       	in	r31, 0x3e	; 62
    20aa:	31 96       	adiw	r30, 0x01	; 1
    20ac:	ad b7       	in	r26, 0x3d	; 61
    20ae:	be b7       	in	r27, 0x3e	; 62
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	8d 93       	st	X+, r24
    20b4:	9c 93       	st	X, r25
    20b6:	12 97       	sbiw	r26, 0x02	; 2
    20b8:	89 e6       	ldi	r24, 0x69	; 105
    20ba:	90 e2       	ldi	r25, 0x20	; 32
    20bc:	82 83       	std	Z+2, r24	; 0x02
    20be:	93 83       	std	Z+3, r25	; 0x03
    20c0:	24 83       	std	Z+4, r18	; 0x04
    20c2:	15 82       	std	Z+5, r1	; 0x05
    20c4:	0e 94 03 5a 	call	0xb406	; 0xb406 <sprintf>
    20c8:	ed b7       	in	r30, 0x3d	; 61
    20ca:	fe b7       	in	r31, 0x3e	; 62
    20cc:	36 96       	adiw	r30, 0x06	; 6
    20ce:	ed bf       	out	0x3d, r30	; 61
    20d0:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    20d2:	85 ee       	ldi	r24, 0xE5	; 229
    20d4:	97 e2       	ldi	r25, 0x27	; 39
    20d6:	68 ef       	ldi	r22, 0xF8	; 248
    20d8:	74 e2       	ldi	r23, 0x24	; 36
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
    if (res == FR_OK) {
    20e0:	88 23       	and	r24, r24
    20e2:	c9 f5       	brne	.+114    	; 0x2156 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	c8 2e       	mov	r12, r24
    20e8:	d1 2c       	mov	r13, r1
    20ea:	cc 0e       	add	r12, r28
    20ec:	dd 1e       	adc	r13, r29
    20ee:	85 ee       	ldi	r24, 0xE5	; 229
    20f0:	97 e2       	ldi	r25, 0x27	; 39
    20f2:	b6 01       	movw	r22, r12
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	9e 01       	movw	r18, r28
    20fa:	2f 5f       	subi	r18, 0xFF	; 255
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    2102:	88 23       	and	r24, r24
    2104:	09 f5       	brne	.+66     	; 0x2148 <set_hwConfig+0xfc>
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	80 38       	cpi	r24, 0x80	; 128
    210c:	91 05       	cpc	r25, r1
    210e:	e1 f4       	brne	.+56     	; 0x2148 <set_hwConfig+0xfc>
    2110:	19 e1       	ldi	r17, 0x19	; 25
    2112:	e1 2e       	mov	r14, r17
    2114:	17 e2       	ldi	r17, 0x27	; 39
    2116:	f1 2e       	mov	r15, r17
    2118:	00 e0       	ldi	r16, 0x00	; 0
    211a:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    211c:	f6 01       	movw	r30, r12
    211e:	e0 0f       	add	r30, r16
    2120:	f1 1f       	adc	r31, r17
    2122:	60 81       	ld	r22, Z
    2124:	d7 01       	movw	r26, r14
    2126:	6d 93       	st	X+, r22
    2128:	7d 01       	movw	r14, r26
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    212a:	0f 5f       	subi	r16, 0xFF	; 255
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    212e:	c8 01       	movw	r24, r16
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2138:	00 38       	cpi	r16, 0x80	; 128
    213a:	11 05       	cpc	r17, r1
    213c:	79 f7       	brne	.-34     	; 0x211c <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2148:	85 ee       	ldi	r24, 0xE5	; 229
    214a:	97 e2       	ldi	r25, 0x27	; 39
    214c:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
        xputs(PSTR("Successfully read the hardware config file\n"));
    2150:	8d ee       	ldi	r24, 0xED	; 237
    2152:	95 e0       	ldi	r25, 0x05	; 5
    2154:	02 c0       	rjmp	.+4      	; 0x215a <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2156:	87 eb       	ldi	r24, 0xB7	; 183
    2158:	95 e0       	ldi	r25, 0x05	; 5
    215a:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    }
}
    215e:	ce 57       	subi	r28, 0x7E	; 126
    2160:	df 4f       	sbci	r29, 0xFF	; 255
    2162:	e8 e0       	ldi	r30, 0x08	; 8
    2164:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0x14>

00002168 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	0e 94 14 21 	call	0x4228	; 0x4228 <digitalToggle>
}
    216e:	08 95       	ret

00002170 <Update_display>:
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
}

void Update_display(void) {
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    int16_t X_ADC1, X_ADC2, Y_ADC1, Y_ADC2;
    int16_t temp_ADC_val;
    
    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    217c:	80 91 99 27 	lds	r24, 0x2799
    2180:	82 30       	cpi	r24, 0x02	; 2
    2182:	09 f4       	brne	.+2      	; 0x2186 <Update_display+0x16>
    2184:	a4 c0       	rjmp	.+328    	; 0x22ce <Update_display+0x15e>
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	30 f4       	brcc	.+12     	; 0x2196 <Update_display+0x26>
    218a:	88 23       	and	r24, r24
    218c:	59 f0       	breq	.+22     	; 0x21a4 <Update_display+0x34>
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	09 f0       	breq	.+2      	; 0x2194 <Update_display+0x24>
    2192:	9b c1       	rjmp	.+822    	; 0x24ca <Update_display+0x35a>
    2194:	32 c0       	rjmp	.+100    	; 0x21fa <Update_display+0x8a>
    2196:	83 30       	cpi	r24, 0x03	; 3
    2198:	09 f4       	brne	.+2      	; 0x219c <Update_display+0x2c>
    219a:	ff c0       	rjmp	.+510    	; 0x239a <Update_display+0x22a>
    219c:	84 30       	cpi	r24, 0x04	; 4
    219e:	09 f0       	breq	.+2      	; 0x21a2 <Update_display+0x32>
    21a0:	94 c1       	rjmp	.+808    	; 0x24ca <Update_display+0x35a>
    21a2:	49 c1       	rjmp	.+658    	; 0x2436 <Update_display+0x2c6>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[function_counter_x];
    21a4:	e0 91 e7 24 	lds	r30, 0x24E7
    21a8:	f0 91 e8 24 	lds	r31, 0x24E8
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	e9 5f       	subi	r30, 0xF9	; 249
    21b2:	f7 4d       	sbci	r31, 0xD7	; 215
    21b4:	20 81       	ld	r18, Z
    21b6:	31 81       	ldd	r19, Z+1	; 0x01
    21b8:	22 0f       	add	r18, r18
    21ba:	33 1f       	adc	r19, r19
    21bc:	20 93 84 26 	sts	0x2684, r18
    21c0:	30 93 85 26 	sts	0x2685, r19
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    21c4:	80 91 e4 27 	lds	r24, 0x27E4
    21c8:	99 27       	eor	r25, r25
    21ca:	87 fd       	sbrc	r24, 7
    21cc:	90 95       	com	r25
    21ce:	ac 01       	movw	r20, r24
    21d0:	24 9f       	mul	r18, r20
    21d2:	c0 01       	movw	r24, r0
    21d4:	25 9f       	mul	r18, r21
    21d6:	90 0d       	add	r25, r0
    21d8:	34 9f       	mul	r19, r20
    21da:	90 0d       	add	r25, r0
    21dc:	11 24       	eor	r1, r1
    21de:	6a e0       	ldi	r22, 0x0A	; 10
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    21e6:	cb 01       	movw	r24, r22
    21e8:	20 91 96 25 	lds	r18, 0x2596
    21ec:	45 e0       	ldi	r20, 0x05	; 5
    21ee:	24 02       	muls	r18, r20
    21f0:	90 01       	movw	r18, r0
    21f2:	11 24       	eor	r1, r1
    21f4:	82 0f       	add	r24, r18
    21f6:	93 1f       	adc	r25, r19
    21f8:	ca c0       	rjmp	.+404    	; 0x238e <Update_display+0x21e>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  X_ADC2 = analogRead(1)/4; // 1 volt = 102 frames/sec
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    2200:	64 e0       	ldi	r22, 0x04	; 4
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2208:	16 2f       	mov	r17, r22
    220a:	07 2f       	mov	r16, r23
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    2212:	64 e0       	ldi	r22, 0x04	; 4
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            if (X_ADC2 < 0)
                X_ADC2 = 0;
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*(X_ADC1 - X_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    221a:	21 2f       	mov	r18, r17
    221c:	30 2f       	mov	r19, r16
    221e:	c9 01       	movw	r24, r18
    2220:	ac 01       	movw	r20, r24
    2222:	97 ff       	sbrs	r25, 7
    2224:	02 c0       	rjmp	.+4      	; 0x222a <Update_display+0xba>
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	9b 01       	movw	r18, r22
    222c:	77 ff       	sbrs	r23, 7
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <Update_display+0xc4>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	42 1b       	sub	r20, r18
    2236:	53 0b       	sbc	r21, r19
    2238:	44 0f       	add	r20, r20
    223a:	55 1f       	adc	r21, r21
    223c:	44 0f       	add	r20, r20
    223e:	55 1f       	adc	r21, r21
    2240:	20 91 84 26 	lds	r18, 0x2684
    2244:	30 91 85 26 	lds	r19, 0x2685
    2248:	c9 01       	movw	r24, r18
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	82 0f       	add	r24, r18
    2250:	93 1f       	adc	r25, r19
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	84 0f       	add	r24, r20
    2258:	95 1f       	adc	r25, r21
    225a:	6a e0       	ldi	r22, 0x0A	; 10
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2262:	9b 01       	movw	r18, r22
    2264:	60 93 84 26 	sts	0x2684, r22
    2268:	70 93 85 26 	sts	0x2685, r23
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    226c:	80 91 e4 27 	lds	r24, 0x27E4
    2270:	99 27       	eor	r25, r25
    2272:	87 fd       	sbrc	r24, 7
    2274:	90 95       	com	r25
    2276:	bc 01       	movw	r22, r24
    2278:	26 9f       	mul	r18, r22
    227a:	c0 01       	movw	r24, r0
    227c:	27 9f       	mul	r18, r23
    227e:	90 0d       	add	r25, r0
    2280:	36 9f       	mul	r19, r22
    2282:	90 0d       	add	r25, r0
    2284:	11 24       	eor	r1, r1
    2286:	6a e0       	ldi	r22, 0x0A	; 10
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    228e:	cb 01       	movw	r24, r22
    2290:	20 91 96 25 	lds	r18, 0x2596
    2294:	45 e0       	ldi	r20, 0x05	; 5
    2296:	24 02       	muls	r18, r20
    2298:	90 01       	movw	r18, r0
    229a:	11 24       	eor	r1, r1
    229c:	82 0f       	add	r24, r18
    229e:	93 1f       	adc	r25, r19
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    22a8:	9b 01       	movw	r18, r22
    22aa:	7b 01       	movw	r14, r22
            
            //set a frame rate limit 256fps
            if (X_rate >256)
    22ac:	71 e0       	ldi	r23, 0x01	; 1
    22ae:	21 30       	cpi	r18, 0x01	; 1
    22b0:	37 07       	cpc	r19, r23
    22b2:	24 f0       	brlt	.+8      	; 0x22bc <Update_display+0x14c>
    22b4:	e1 2c       	mov	r14, r1
    22b6:	a1 e0       	ldi	r26, 0x01	; 1
    22b8:	fa 2e       	mov	r15, r26
    22ba:	09 c1       	rjmp	.+530    	; 0x24ce <Update_display+0x35e>
                X_rate = 256;
            else if (X_rate < -256)
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	20 30       	cpi	r18, 0x00	; 0
    22c0:	38 07       	cpc	r19, r24
    22c2:	0c f0       	brlt	.+2      	; 0x22c6 <Update_display+0x156>
    22c4:	04 c1       	rjmp	.+520    	; 0x24ce <Update_display+0x35e>
    22c6:	e1 2c       	mov	r14, r1
    22c8:	ff ef       	ldi	r31, 0xFF	; 255
    22ca:	ff 2e       	mov	r15, r31
    22cc:	00 c1       	rjmp	.+512    	; 0x24ce <Update_display+0x35e>
                X_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4;  X_ADC2 = analogRead(1)/4; // 1 volt = 102
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    22dc:	16 2f       	mov	r17, r22
    22de:	07 2f       	mov	r16, r23
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    22e6:	64 e0       	ldi	r22, 0x04	; 4
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            if (X_ADC2 < 0)
                X_ADC2 = 0;
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*(X_ADC1 - X_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    22ee:	21 2f       	mov	r18, r17
    22f0:	30 2f       	mov	r19, r16
    22f2:	c9 01       	movw	r24, r18
    22f4:	ac 01       	movw	r20, r24
    22f6:	97 ff       	sbrs	r25, 7
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <Update_display+0x18e>
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	9b 01       	movw	r18, r22
    2300:	77 ff       	sbrs	r23, 7
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <Update_display+0x198>
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	42 1b       	sub	r20, r18
    230a:	53 0b       	sbc	r21, r19
    230c:	44 0f       	add	r20, r20
    230e:	55 1f       	adc	r21, r21
    2310:	44 0f       	add	r20, r20
    2312:	55 1f       	adc	r21, r21
    2314:	20 91 84 26 	lds	r18, 0x2684
    2318:	30 91 85 26 	lds	r19, 0x2685
    231c:	c9 01       	movw	r24, r18
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	84 0f       	add	r24, r20
    232c:	95 1f       	adc	r25, r21
    232e:	6a e0       	ldi	r22, 0x0A	; 10
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2336:	60 93 84 26 	sts	0x2684, r22
    233a:	70 93 85 26 	sts	0x2685, r23
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[function_counter_x] + 5*bias_x)/2;
    233e:	e0 91 e7 24 	lds	r30, 0x24E7
    2342:	f0 91 e8 24 	lds	r31, 0x24E8
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e9 5f       	subi	r30, 0xF9	; 249
    234c:	f7 4d       	sbci	r31, 0xD7	; 215
    234e:	20 81       	ld	r18, Z
    2350:	31 81       	ldd	r19, Z+1	; 0x01
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	80 91 96 25 	lds	r24, 0x2596
    235a:	45 e0       	ldi	r20, 0x05	; 5
    235c:	84 02       	muls	r24, r20
    235e:	c0 01       	movw	r24, r0
    2360:	11 24       	eor	r1, r1
    2362:	28 0f       	add	r18, r24
    2364:	39 1f       	adc	r19, r25
    2366:	80 91 e4 27 	lds	r24, 0x27E4
    236a:	99 27       	eor	r25, r25
    236c:	87 fd       	sbrc	r24, 7
    236e:	90 95       	com	r25
    2370:	ac 01       	movw	r20, r24
    2372:	64 9f       	mul	r22, r20
    2374:	c0 01       	movw	r24, r0
    2376:	65 9f       	mul	r22, r21
    2378:	90 0d       	add	r25, r0
    237a:	74 9f       	mul	r23, r20
    237c:	90 0d       	add	r25, r0
    237e:	11 24       	eor	r1, r1
    2380:	6a e0       	ldi	r22, 0x0A	; 10
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2388:	c9 01       	movw	r24, r18
    238a:	86 0f       	add	r24, r22
    238c:	97 1f       	adc	r25, r23
    238e:	62 e0       	ldi	r22, 0x02	; 2
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2396:	7b 01       	movw	r14, r22
    2398:	9a c0       	rjmp	.+308    	; 0x24ce <Update_display+0x35e>
            break;
        case 3: // POS mode, use CH4 to set the frame position (pos ctrl, not vel ctrl)
            X_ADC1 = analogRead(4)/2;  //used to use CH0, changed this so no need to change connections
    239a:	84 e0       	ldi	r24, 0x04	; 4
    239c:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
            // set to 0 if negative to be compatibel with old code
            if (X_ADC1 < 0)
                X_ADC1 = 0;
            index_x = X_ADC1/gain_x + bias_x;
    23a8:	cb 01       	movw	r24, r22
    23aa:	77 ff       	sbrs	r23, 7
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <Update_display+0x242>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	60 91 e4 27 	lds	r22, 0x27E4
    23b6:	77 27       	eor	r23, r23
    23b8:	67 fd       	sbrc	r22, 7
    23ba:	70 95       	com	r23
    23bc:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    23c0:	80 91 96 25 	lds	r24, 0x2596
    23c4:	99 27       	eor	r25, r25
    23c6:	87 fd       	sbrc	r24, 7
    23c8:	90 95       	com	r25
    23ca:	86 0f       	add	r24, r22
    23cc:	97 1f       	adc	r25, r23
    23ce:	80 93 9b 27 	sts	0x279B, r24
    23d2:	90 93 9c 27 	sts	0x279C, r25
            if (index_x >= x_num)  {index_x = x_num - 1;} //check if too big
    23d6:	80 91 9b 27 	lds	r24, 0x279B
    23da:	90 91 9c 27 	lds	r25, 0x279C
    23de:	40 91 05 28 	lds	r20, 0x2805
    23e2:	50 91 06 28 	lds	r21, 0x2806
    23e6:	84 17       	cp	r24, r20
    23e8:	95 07       	cpc	r25, r21
    23ea:	40 f0       	brcs	.+16     	; 0x23fc <Update_display+0x28c>
    23ec:	41 50       	subi	r20, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	40 93 9b 27 	sts	0x279B, r20
    23f4:	50 93 9c 27 	sts	0x279C, r21
    23f8:	4f 5f       	subi	r20, 0xFF	; 255
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
            if (index_x <= 0)  {index_x = 0;} //or too small
    23fc:	80 91 9b 27 	lds	r24, 0x279B
    2400:	90 91 9c 27 	lds	r25, 0x279C
    2404:	89 2b       	or	r24, r25
    2406:	21 f4       	brne	.+8      	; 0x2410 <Update_display+0x2a0>
    2408:	10 92 9b 27 	sts	0x279B, r1
    240c:	10 92 9c 27 	sts	0x279C, r1
            frame_num = index_y*x_num + index_x;
    2410:	80 91 50 29 	lds	r24, 0x2950
    2414:	90 91 51 29 	lds	r25, 0x2951
    2418:	20 91 9b 27 	lds	r18, 0x279B
    241c:	30 91 9c 27 	lds	r19, 0x279C
    2420:	bc 01       	movw	r22, r24
    2422:	64 9f       	mul	r22, r20
    2424:	c0 01       	movw	r24, r0
    2426:	65 9f       	mul	r22, r21
    2428:	90 0d       	add	r25, r0
    242a:	74 9f       	mul	r23, r20
    242c:	90 0d       	add	r25, r0
    242e:	11 24       	eor	r1, r1
    2430:	82 0f       	add	r24, r18
    2432:	93 1f       	adc	r25, r19
    2434:	46 c0       	rjmp	.+140    	; 0x24c2 <Update_display+0x352>
            X_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (X_pos_index + function_X[function_counter_x]);
    2436:	e0 91 e7 24 	lds	r30, 0x24E7
    243a:	f0 91 e8 24 	lds	r31, 0x24E8
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	e9 5f       	subi	r30, 0xF9	; 249
    2444:	f7 4d       	sbci	r31, 0xD7	; 215
    2446:	01 90       	ld	r0, Z+
    2448:	f0 81       	ld	r31, Z
    244a:	e0 2d       	mov	r30, r0
    244c:	80 91 e6 26 	lds	r24, 0x26E6
    2450:	90 91 e7 26 	lds	r25, 0x26E7
    2454:	e8 0f       	add	r30, r24
    2456:	f9 1f       	adc	r31, r25
    2458:	20 91 05 28 	lds	r18, 0x2805
    245c:	30 91 06 28 	lds	r19, 0x2806
            if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    2460:	f7 fd       	sbrc	r31, 7
    2462:	09 c0       	rjmp	.+18     	; 0x2476 <Update_display+0x306>
    2464:	cf 01       	movw	r24, r30
    2466:	b9 01       	movw	r22, r18
    2468:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    246c:	80 93 9b 27 	sts	0x279B, r24
    2470:	90 93 9c 27 	sts	0x279C, r25
    2474:	10 c0       	rjmp	.+32     	; 0x2496 <Update_display+0x326>
            if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    2476:	88 27       	eor	r24, r24
    2478:	99 27       	eor	r25, r25
    247a:	8e 1b       	sub	r24, r30
    247c:	9f 0b       	sbc	r25, r31
    247e:	b9 01       	movw	r22, r18
    2480:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    2484:	21 50       	subi	r18, 0x01	; 1
    2486:	30 40       	sbci	r19, 0x00	; 0
    2488:	a9 01       	movw	r20, r18
    248a:	48 1b       	sub	r20, r24
    248c:	59 0b       	sbc	r21, r25
    248e:	40 93 9b 27 	sts	0x279B, r20
    2492:	50 93 9c 27 	sts	0x279C, r21
            frame_num = index_y*x_num + index_x;
    2496:	20 91 50 29 	lds	r18, 0x2950
    249a:	30 91 51 29 	lds	r19, 0x2951
    249e:	40 91 9b 27 	lds	r20, 0x279B
    24a2:	50 91 9c 27 	lds	r21, 0x279C
    24a6:	80 91 05 28 	lds	r24, 0x2805
    24aa:	90 91 06 28 	lds	r25, 0x2806
    24ae:	bc 01       	movw	r22, r24
    24b0:	26 9f       	mul	r18, r22
    24b2:	c0 01       	movw	r24, r0
    24b4:	27 9f       	mul	r18, r23
    24b6:	90 0d       	add	r25, r0
    24b8:	36 9f       	mul	r19, r22
    24ba:	90 0d       	add	r25, r0
    24bc:	11 24       	eor	r1, r1
    24be:	84 0f       	add	r24, r20
    24c0:	95 1f       	adc	r25, r21
    24c2:	80 93 e5 24 	sts	0x24E5, r24
    24c6:	90 93 e6 24 	sts	0x24E6, r25
    24ca:	ee 24       	eor	r14, r14
    24cc:	ff 24       	eor	r15, r15
            break;
            //do something with errors here for default case
    }
    
    
    switch(y_mode) {
    24ce:	80 91 e3 27 	lds	r24, 0x27E3
    24d2:	82 30       	cpi	r24, 0x02	; 2
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <Update_display+0x368>
    24d6:	a2 c0       	rjmp	.+324    	; 0x261c <Update_display+0x4ac>
    24d8:	83 30       	cpi	r24, 0x03	; 3
    24da:	30 f4       	brcc	.+12     	; 0x24e8 <Update_display+0x378>
    24dc:	88 23       	and	r24, r24
    24de:	59 f0       	breq	.+22     	; 0x24f6 <Update_display+0x386>
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <Update_display+0x376>
    24e4:	85 c1       	rjmp	.+778    	; 0x27f0 <Update_display+0x680>
    24e6:	32 c0       	rjmp	.+100    	; 0x254c <Update_display+0x3dc>
    24e8:	83 30       	cpi	r24, 0x03	; 3
    24ea:	09 f4       	brne	.+2      	; 0x24ee <Update_display+0x37e>
    24ec:	fd c0       	rjmp	.+506    	; 0x26e8 <Update_display+0x578>
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <Update_display+0x384>
    24f2:	7e c1       	rjmp	.+764    	; 0x27f0 <Update_display+0x680>
    24f4:	33 c1       	rjmp	.+614    	; 0x275c <Update_display+0x5ec>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[function_counter_y];
    24f6:	e0 91 e9 24 	lds	r30, 0x24E9
    24fa:	f0 91 ea 24 	lds	r31, 0x24EA
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	e5 55       	subi	r30, 0x55	; 85
    2504:	fa 4d       	sbci	r31, 0xDA	; 218
    2506:	20 81       	ld	r18, Z
    2508:	31 81       	ldd	r19, Z+1	; 0x01
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	20 93 a8 25 	sts	0x25A8, r18
    2512:	30 93 a9 25 	sts	0x25A9, r19
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    2516:	80 91 9d 27 	lds	r24, 0x279D
    251a:	99 27       	eor	r25, r25
    251c:	87 fd       	sbrc	r24, 7
    251e:	90 95       	com	r25
    2520:	ac 01       	movw	r20, r24
    2522:	24 9f       	mul	r18, r20
    2524:	c0 01       	movw	r24, r0
    2526:	25 9f       	mul	r18, r21
    2528:	90 0d       	add	r25, r0
    252a:	34 9f       	mul	r19, r20
    252c:	90 0d       	add	r25, r0
    252e:	11 24       	eor	r1, r1
    2530:	6a e0       	ldi	r22, 0x0A	; 10
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2538:	cb 01       	movw	r24, r22
    253a:	20 91 b4 2b 	lds	r18, 0x2BB4
    253e:	45 e0       	ldi	r20, 0x05	; 5
    2540:	24 02       	muls	r18, r20
    2542:	90 01       	movw	r18, r0
    2544:	11 24       	eor	r1, r1
    2546:	82 0f       	add	r24, r18
    2548:	93 1f       	adc	r25, r19
    254a:	c8 c0       	rjmp	.+400    	; 0x26dc <Update_display+0x56c>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(2)/4;  Y_ADC2 = analogRead(3)/4; // 1 volt = 102fps
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    2552:	64 e0       	ldi	r22, 0x04	; 4
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    255a:	16 2f       	mov	r17, r22
    255c:	07 2f       	mov	r16, r23
    255e:	83 e0       	ldi	r24, 0x03	; 3
    2560:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    2564:	64 e0       	ldi	r22, 0x04	; 4
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            if (Y_ADC2 < 0)
                Y_ADC2 = 0;
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*(Y_ADC1 - Y_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    256c:	21 2f       	mov	r18, r17
    256e:	30 2f       	mov	r19, r16
    2570:	c9 01       	movw	r24, r18
    2572:	ac 01       	movw	r20, r24
    2574:	97 ff       	sbrs	r25, 7
    2576:	02 c0       	rjmp	.+4      	; 0x257c <Update_display+0x40c>
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	9b 01       	movw	r18, r22
    257e:	77 ff       	sbrs	r23, 7
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <Update_display+0x416>
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	42 1b       	sub	r20, r18
    2588:	53 0b       	sbc	r21, r19
    258a:	44 0f       	add	r20, r20
    258c:	55 1f       	adc	r21, r21
    258e:	44 0f       	add	r20, r20
    2590:	55 1f       	adc	r21, r21
    2592:	20 91 a8 25 	lds	r18, 0x25A8
    2596:	30 91 a9 25 	lds	r19, 0x25A9
    259a:	c9 01       	movw	r24, r18
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	82 0f       	add	r24, r18
    25a2:	93 1f       	adc	r25, r19
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	84 0f       	add	r24, r20
    25aa:	95 1f       	adc	r25, r21
    25ac:	6a e0       	ldi	r22, 0x0A	; 10
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    25b4:	9b 01       	movw	r18, r22
    25b6:	60 93 a8 25 	sts	0x25A8, r22
    25ba:	70 93 a9 25 	sts	0x25A9, r23
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    25be:	80 91 9d 27 	lds	r24, 0x279D
    25c2:	99 27       	eor	r25, r25
    25c4:	87 fd       	sbrc	r24, 7
    25c6:	90 95       	com	r25
    25c8:	bc 01       	movw	r22, r24
    25ca:	26 9f       	mul	r18, r22
    25cc:	c0 01       	movw	r24, r0
    25ce:	27 9f       	mul	r18, r23
    25d0:	90 0d       	add	r25, r0
    25d2:	36 9f       	mul	r19, r22
    25d4:	90 0d       	add	r25, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	6a e0       	ldi	r22, 0x0A	; 10
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    25e0:	cb 01       	movw	r24, r22
    25e2:	20 91 b4 2b 	lds	r18, 0x2BB4
    25e6:	45 e0       	ldi	r20, 0x05	; 5
    25e8:	24 02       	muls	r18, r20
    25ea:	90 01       	movw	r18, r0
    25ec:	11 24       	eor	r1, r1
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    25fa:	9b 01       	movw	r18, r22
    25fc:	eb 01       	movw	r28, r22
            
            //set a frame rate limit 256fps
            if (Y_rate > 256)
    25fe:	71 e0       	ldi	r23, 0x01	; 1
    2600:	21 30       	cpi	r18, 0x01	; 1
    2602:	37 07       	cpc	r19, r23
    2604:	1c f0       	brlt	.+6      	; 0x260c <Update_display+0x49c>
    2606:	c0 e0       	ldi	r28, 0x00	; 0
    2608:	d1 e0       	ldi	r29, 0x01	; 1
    260a:	f4 c0       	rjmp	.+488    	; 0x27f4 <Update_display+0x684>
                Y_rate = 256;
            else if (Y_rate < -256)
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	20 30       	cpi	r18, 0x00	; 0
    2610:	38 07       	cpc	r19, r24
    2612:	0c f0       	brlt	.+2      	; 0x2616 <Update_display+0x4a6>
    2614:	ef c0       	rjmp	.+478    	; 0x27f4 <Update_display+0x684>
    2616:	c0 e0       	ldi	r28, 0x00	; 0
    2618:	df ef       	ldi	r29, 0xFF	; 255
    261a:	ec c0       	rjmp	.+472    	; 0x27f4 <Update_display+0x684>
                Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(2)/4;  Y_ADC2 = analogRead(3)/4; // 1 volt = 102
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    2622:	64 e0       	ldi	r22, 0x04	; 4
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    262a:	16 2f       	mov	r17, r22
    262c:	07 2f       	mov	r16, r23
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    2634:	64 e0       	ldi	r22, 0x04	; 4
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            if (Y_ADC2 < 0)
                Y_ADC2 = 0;
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*(Y_ADC1 - Y_ADC2) )/10;   //this is a 60% old value, 40% new value smoother
    263c:	21 2f       	mov	r18, r17
    263e:	30 2f       	mov	r19, r16
    2640:	c9 01       	movw	r24, r18
    2642:	ac 01       	movw	r20, r24
    2644:	97 ff       	sbrs	r25, 7
    2646:	02 c0       	rjmp	.+4      	; 0x264c <Update_display+0x4dc>
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	9b 01       	movw	r18, r22
    264e:	77 ff       	sbrs	r23, 7
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <Update_display+0x4e6>
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	42 1b       	sub	r20, r18
    2658:	53 0b       	sbc	r21, r19
    265a:	44 0f       	add	r20, r20
    265c:	55 1f       	adc	r21, r21
    265e:	44 0f       	add	r20, r20
    2660:	55 1f       	adc	r21, r21
    2662:	20 91 a8 25 	lds	r18, 0x25A8
    2666:	30 91 a9 25 	lds	r19, 0x25A9
    266a:	c9 01       	movw	r24, r18
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	84 0f       	add	r24, r20
    267a:	95 1f       	adc	r25, r21
    267c:	6a e0       	ldi	r22, 0x0A	; 10
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    2684:	60 93 a8 25 	sts	0x25A8, r22
    2688:	70 93 a9 25 	sts	0x25A9, r23
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[function_counter_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    268c:	e0 91 e9 24 	lds	r30, 0x24E9
    2690:	f0 91 ea 24 	lds	r31, 0x24EA
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	e5 55       	subi	r30, 0x55	; 85
    269a:	fa 4d       	sbci	r31, 0xDA	; 218
    269c:	20 81       	ld	r18, Z
    269e:	31 81       	ldd	r19, Z+1	; 0x01
    26a0:	22 0f       	add	r18, r18
    26a2:	33 1f       	adc	r19, r19
    26a4:	80 91 b4 2b 	lds	r24, 0x2BB4
    26a8:	45 e0       	ldi	r20, 0x05	; 5
    26aa:	84 02       	muls	r24, r20
    26ac:	c0 01       	movw	r24, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	28 0f       	add	r18, r24
    26b2:	39 1f       	adc	r19, r25
    26b4:	80 91 9d 27 	lds	r24, 0x279D
    26b8:	99 27       	eor	r25, r25
    26ba:	87 fd       	sbrc	r24, 7
    26bc:	90 95       	com	r25
    26be:	ac 01       	movw	r20, r24
    26c0:	64 9f       	mul	r22, r20
    26c2:	c0 01       	movw	r24, r0
    26c4:	65 9f       	mul	r22, r21
    26c6:	90 0d       	add	r25, r0
    26c8:	74 9f       	mul	r23, r20
    26ca:	90 0d       	add	r25, r0
    26cc:	11 24       	eor	r1, r1
    26ce:	6a e0       	ldi	r22, 0x0A	; 10
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    26d6:	c9 01       	movw	r24, r18
    26d8:	86 0f       	add	r24, r22
    26da:	97 1f       	adc	r25, r23
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    26e4:	eb 01       	movw	r28, r22
    26e6:	86 c0       	rjmp	.+268    	; 0x27f4 <Update_display+0x684>
            break;
        case 3: // POS mode, use CH5 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC1 = analogRead(5)/2;
    26e8:	85 e0       	ldi	r24, 0x05	; 5
    26ea:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
            // set to 0 if negative to be compatibel with old code
            if (Y_ADC1 < 0)
                Y_ADC1 = 0;
            index_y = Y_ADC1/gain_y + bias_y;
    26f6:	cb 01       	movw	r24, r22
    26f8:	77 ff       	sbrs	r23, 7
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <Update_display+0x590>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	60 91 9d 27 	lds	r22, 0x279D
    2704:	77 27       	eor	r23, r23
    2706:	67 fd       	sbrc	r22, 7
    2708:	70 95       	com	r23
    270a:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divmodhi4>
    270e:	80 91 b4 2b 	lds	r24, 0x2BB4
    2712:	99 27       	eor	r25, r25
    2714:	87 fd       	sbrc	r24, 7
    2716:	90 95       	com	r25
    2718:	86 0f       	add	r24, r22
    271a:	97 1f       	adc	r25, r23
    271c:	80 93 50 29 	sts	0x2950, r24
    2720:	90 93 51 29 	sts	0x2951, r25
            if (index_y >= y_num)  {index_y = y_num - 1;} //check if too big
    2724:	80 91 50 29 	lds	r24, 0x2950
    2728:	90 91 51 29 	lds	r25, 0x2951
    272c:	20 91 a6 25 	lds	r18, 0x25A6
    2730:	30 91 a7 25 	lds	r19, 0x25A7
    2734:	82 17       	cp	r24, r18
    2736:	93 07       	cpc	r25, r19
    2738:	30 f0       	brcs	.+12     	; 0x2746 <Update_display+0x5d6>
    273a:	21 50       	subi	r18, 0x01	; 1
    273c:	30 40       	sbci	r19, 0x00	; 0
    273e:	20 93 50 29 	sts	0x2950, r18
    2742:	30 93 51 29 	sts	0x2951, r19
            if (index_y <= 0)  {index_y = 0;} //or too small
    2746:	80 91 50 29 	lds	r24, 0x2950
    274a:	90 91 51 29 	lds	r25, 0x2951
    274e:	89 2b       	or	r24, r25
    2750:	a9 f5       	brne	.+106    	; 0x27bc <Update_display+0x64c>
    2752:	10 92 50 29 	sts	0x2950, r1
    2756:	10 92 51 29 	sts	0x2951, r1
    275a:	30 c0       	rjmp	.+96     	; 0x27bc <Update_display+0x64c>
            frame_num = index_y*x_num + index_x;
            Y_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[function_counter_y]);
    275c:	e0 91 e9 24 	lds	r30, 0x24E9
    2760:	f0 91 ea 24 	lds	r31, 0x24EA
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	e5 55       	subi	r30, 0x55	; 85
    276a:	fa 4d       	sbci	r31, 0xDA	; 218
    276c:	01 90       	ld	r0, Z+
    276e:	f0 81       	ld	r31, Z
    2770:	e0 2d       	mov	r30, r0
    2772:	80 91 73 26 	lds	r24, 0x2673
    2776:	90 91 74 26 	lds	r25, 0x2674
    277a:	e8 0f       	add	r30, r24
    277c:	f9 1f       	adc	r31, r25
    277e:	20 91 a6 25 	lds	r18, 0x25A6
    2782:	30 91 a7 25 	lds	r19, 0x25A7
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    2786:	f7 fd       	sbrc	r31, 7
    2788:	09 c0       	rjmp	.+18     	; 0x279c <Update_display+0x62c>
    278a:	cf 01       	movw	r24, r30
    278c:	b9 01       	movw	r22, r18
    278e:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    2792:	80 93 50 29 	sts	0x2950, r24
    2796:	90 93 51 29 	sts	0x2951, r25
    279a:	10 c0       	rjmp	.+32     	; 0x27bc <Update_display+0x64c>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    279c:	88 27       	eor	r24, r24
    279e:	99 27       	eor	r25, r25
    27a0:	8e 1b       	sub	r24, r30
    27a2:	9f 0b       	sbc	r25, r31
    27a4:	b9 01       	movw	r22, r18
    27a6:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    27aa:	21 50       	subi	r18, 0x01	; 1
    27ac:	30 40       	sbci	r19, 0x00	; 0
    27ae:	a9 01       	movw	r20, r18
    27b0:	48 1b       	sub	r20, r24
    27b2:	59 0b       	sbc	r21, r25
    27b4:	40 93 50 29 	sts	0x2950, r20
    27b8:	50 93 51 29 	sts	0x2951, r21
            frame_num = index_y*x_num + index_x;
    27bc:	20 91 50 29 	lds	r18, 0x2950
    27c0:	30 91 51 29 	lds	r19, 0x2951
    27c4:	40 91 9b 27 	lds	r20, 0x279B
    27c8:	50 91 9c 27 	lds	r21, 0x279C
    27cc:	80 91 05 28 	lds	r24, 0x2805
    27d0:	90 91 06 28 	lds	r25, 0x2806
    27d4:	bc 01       	movw	r22, r24
    27d6:	26 9f       	mul	r18, r22
    27d8:	c0 01       	movw	r24, r0
    27da:	27 9f       	mul	r18, r23
    27dc:	90 0d       	add	r25, r0
    27de:	36 9f       	mul	r19, r22
    27e0:	90 0d       	add	r25, r0
    27e2:	11 24       	eor	r1, r1
    27e4:	84 0f       	add	r24, r20
    27e6:	95 1f       	adc	r25, r21
    27e8:	80 93 e5 24 	sts	0x24E5, r24
    27ec:	90 93 e6 24 	sts	0x24E6, r25
    27f0:	c0 e0       	ldi	r28, 0x00	; 0
    27f2:	d0 e0       	ldi	r29, 0x00	; 0
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    27f4:	80 91 9c 20 	lds	r24, 0x209C
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	59 f1       	breq	.+86     	; 0x2852 <Update_display+0x6e2>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    27fc:	1e 14       	cp	r1, r14
    27fe:	1f 04       	cpc	r1, r15
    2800:	74 f4       	brge	.+28     	; 0x281e <Update_display+0x6ae>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2802:	97 01       	movw	r18, r14
    2804:	44 27       	eor	r20, r20
    2806:	37 fd       	sbrc	r19, 7
    2808:	40 95       	com	r20
    280a:	54 2f       	mov	r21, r20
    280c:	62 e1       	ldi	r22, 0x12	; 18
    280e:	7a e7       	ldi	r23, 0x7A	; 122
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    2818:	88 e0       	ldi	r24, 0x08	; 8
    281a:	98 e0       	ldi	r25, 0x08	; 8
    281c:	13 c0       	rjmp	.+38     	; 0x2844 <Update_display+0x6d4>
    else if (X_rate < 0)
    281e:	e1 14       	cp	r14, r1
    2820:	f1 04       	cpc	r15, r1
    2822:	c9 f0       	breq	.+50     	; 0x2856 <Update_display+0x6e6>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2824:	22 27       	eor	r18, r18
    2826:	33 27       	eor	r19, r19
    2828:	2e 19       	sub	r18, r14
    282a:	3f 09       	sbc	r19, r15
    282c:	44 27       	eor	r20, r20
    282e:	37 fd       	sbrc	r19, 7
    2830:	40 95       	com	r20
    2832:	54 2f       	mov	r21, r20
    2834:	62 e1       	ldi	r22, 0x12	; 18
    2836:	7a e7       	ldi	r23, 0x7A	; 122
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    2840:	8c e7       	ldi	r24, 0x7C	; 124
    2842:	98 e0       	ldi	r25, 0x08	; 8
    2844:	ba 01       	movw	r22, r20
    2846:	a9 01       	movw	r20, r18
    2848:	22 e0       	ldi	r18, 0x02	; 2
    284a:	01 e0       	ldi	r16, 0x01	; 1
    284c:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <Update_Reg_Handler>
    2850:	0e c0       	rjmp	.+28     	; 0x286e <Update_display+0x6fe>
    2852:	c0 e0       	ldi	r28, 0x00	; 0
    2854:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    2856:	8c e7       	ldi	r24, 0x7C	; 124
    2858:	98 e0       	ldi	r25, 0x08	; 8
    285a:	4e e4       	ldi	r20, 0x4E	; 78
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	22 e0       	ldi	r18, 0x02	; 2
    2864:	00 e0       	ldi	r16, 0x00	; 0
    2866:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <Update_Reg_Handler>
    286a:	ee 24       	eor	r14, r14
    286c:	ff 24       	eor	r15, r15
    
    
    if (Y_rate > 0)
    286e:	1c 16       	cp	r1, r28
    2870:	1d 06       	cpc	r1, r29
    2872:	74 f4       	brge	.+28     	; 0x2890 <Update_display+0x720>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2874:	9e 01       	movw	r18, r28
    2876:	44 27       	eor	r20, r20
    2878:	37 fd       	sbrc	r19, 7
    287a:	40 95       	com	r20
    287c:	54 2f       	mov	r21, r20
    287e:	62 e1       	ldi	r22, 0x12	; 18
    2880:	7a e7       	ldi	r23, 0x7A	; 122
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    288a:	80 e4       	ldi	r24, 0x40	; 64
    288c:	98 e0       	ldi	r25, 0x08	; 8
    288e:	12 c0       	rjmp	.+36     	; 0x28b4 <Update_display+0x744>
    else if (Y_rate < 0)
    2890:	20 97       	sbiw	r28, 0x00	; 0
    2892:	a9 f0       	breq	.+42     	; 0x28be <Update_display+0x74e>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2894:	22 27       	eor	r18, r18
    2896:	33 27       	eor	r19, r19
    2898:	2c 1b       	sub	r18, r28
    289a:	3d 0b       	sbc	r19, r29
    289c:	44 27       	eor	r20, r20
    289e:	37 fd       	sbrc	r19, 7
    28a0:	40 95       	com	r20
    28a2:	54 2f       	mov	r21, r20
    28a4:	62 e1       	ldi	r22, 0x12	; 18
    28a6:	7a e7       	ldi	r23, 0x7A	; 122
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    28b0:	84 eb       	ldi	r24, 0xB4	; 180
    28b2:	98 e0       	ldi	r25, 0x08	; 8
    28b4:	ba 01       	movw	r22, r20
    28b6:	a9 01       	movw	r20, r18
    28b8:	23 e0       	ldi	r18, 0x03	; 3
    28ba:	01 e0       	ldi	r16, 0x01	; 1
    28bc:	08 c0       	rjmp	.+16     	; 0x28ce <Update_display+0x75e>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    28be:	84 eb       	ldi	r24, 0xB4	; 180
    28c0:	98 e0       	ldi	r25, 0x08	; 8
    28c2:	4e e4       	ldi	r20, 0x4E	; 78
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	23 e0       	ldi	r18, 0x03	; 3
    28cc:	00 e0       	ldi	r16, 0x00	; 0
    28ce:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    28d2:	10 92 e1 24 	sts	0x24E1, r1
    28d6:	ec 16       	cp	r14, r28
    28d8:	fd 06       	cpc	r15, r29
    28da:	1c f0       	brlt	.+6      	; 0x28e2 <Update_display+0x772>
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 e1 24 	sts	0x24E1, r24
}
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	e6 e0       	ldi	r30, 0x06	; 6
    28e8:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

000028ec <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    28ec:	a2 e0       	ldi	r26, 0x02	; 2
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ec e7       	ldi	r30, 0x7C	; 124
    28f2:	f4 e1       	ldi	r31, 0x14	; 20
    28f4:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x1a>
    28f8:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    28fa:	fc 01       	movw	r30, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	80 32       	cpi	r24, 0x20	; 32
    2900:	09 f4       	brne	.+2      	; 0x2904 <handle_message_length_3+0x18>
    2902:	a5 c0       	rjmp	.+330    	; 0x2a4e <handle_message_length_3+0x162>
    2904:	81 32       	cpi	r24, 0x21	; 33
    2906:	38 f4       	brcc	.+14     	; 0x2916 <handle_message_length_3+0x2a>
    2908:	80 31       	cpi	r24, 0x10	; 16
    290a:	09 f4       	brne	.+2      	; 0x290e <handle_message_length_3+0x22>
    290c:	8f c0       	rjmp	.+286    	; 0x2a2c <handle_message_length_3+0x140>
    290e:	85 31       	cpi	r24, 0x15	; 21
    2910:	09 f0       	breq	.+2      	; 0x2914 <handle_message_length_3+0x28>
    2912:	11 c1       	rjmp	.+546    	; 0x2b36 <handle_message_length_3+0x24a>
    2914:	93 c0       	rjmp	.+294    	; 0x2a3c <handle_message_length_3+0x150>
    2916:	80 33       	cpi	r24, 0x30	; 48
    2918:	09 f4       	brne	.+2      	; 0x291c <handle_message_length_3+0x30>
    291a:	d8 c0       	rjmp	.+432    	; 0x2acc <handle_message_length_3+0x1e0>
    291c:	8f 3f       	cpi	r24, 0xFF	; 255
    291e:	21 f0       	breq	.+8      	; 0x2928 <handle_message_length_3+0x3c>
    2920:	85 32       	cpi	r24, 0x25	; 37
    2922:	09 f0       	breq	.+2      	; 0x2926 <handle_message_length_3+0x3a>
    2924:	08 c1       	rjmp	.+528    	; 0x2b36 <handle_message_length_3+0x24a>
    2926:	a0 c0       	rjmp	.+320    	; 0x2a68 <handle_message_length_3+0x17c>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    2928:	f8 01       	movw	r30, r16
    292a:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    292c:	80 91 82 26 	lds	r24, 0x2682
    2930:	88 23       	and	r24, r24
    2932:	e1 f7       	brne	.-8      	; 0x292c <handle_message_length_3+0x40>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    2934:	85 e7       	ldi	r24, 0x75	; 117
    2936:	96 e2       	ldi	r25, 0x26	; 38
    2938:	6f 2d       	mov	r22, r15
    293a:	49 ef       	ldi	r20, 0xF9	; 249
    293c:	50 e2       	ldi	r21, 0x20	; 32
    293e:	22 e0       	ldi	r18, 0x02	; 2
    2940:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    2944:	80 91 7f 29 	lds	r24, 0x297F
    2948:	88 23       	and	r24, r24
    294a:	e1 f7       	brne	.-8      	; 0x2944 <handle_message_length_3+0x58>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    294c:	82 e7       	ldi	r24, 0x72	; 114
    294e:	99 e2       	ldi	r25, 0x29	; 41
    2950:	6f 2d       	mov	r22, r15
    2952:	49 ef       	ldi	r20, 0xF9	; 249
    2954:	50 e2       	ldi	r21, 0x20	; 32
    2956:	22 e0       	ldi	r18, 0x02	; 2
    2958:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    295c:	80 91 15 27 	lds	r24, 0x2715
    2960:	88 23       	and	r24, r24
    2962:	e1 f7       	brne	.-8      	; 0x295c <handle_message_length_3+0x70>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    2964:	88 e0       	ldi	r24, 0x08	; 8
    2966:	97 e2       	ldi	r25, 0x27	; 39
    2968:	6f 2d       	mov	r22, r15
    296a:	49 ef       	ldi	r20, 0xF9	; 249
    296c:	50 e2       	ldi	r21, 0x20	; 32
    296e:	22 e0       	ldi	r18, 0x02	; 2
    2970:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    2974:	80 91 a4 25 	lds	r24, 0x25A4
    2978:	88 23       	and	r24, r24
    297a:	e1 f7       	brne	.-8      	; 0x2974 <handle_message_length_3+0x88>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    297c:	87 e9       	ldi	r24, 0x97	; 151
    297e:	95 e2       	ldi	r25, 0x25	; 37
    2980:	6f 2d       	mov	r22, r15
    2982:	49 ef       	ldi	r20, 0xF9	; 249
    2984:	50 e2       	ldi	r21, 0x20	; 32
    2986:	22 e0       	ldi	r18, 0x02	; 2
    2988:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
    298c:	80 ef       	ldi	r24, 0xF0	; 240
    298e:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2990:	20 e2       	ldi	r18, 0x20	; 32
    2992:	33 e0       	ldi	r19, 0x03	; 3
    2994:	f9 01       	movw	r30, r18
    2996:	31 97       	sbiw	r30, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <handle_message_length_3+0xaa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	d9 f7       	brne	.-10     	; 0x2994 <handle_message_length_3+0xa8>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	f8 01       	movw	r30, r16
    29a4:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    29a6:	80 91 82 26 	lds	r24, 0x2682
    29aa:	88 23       	and	r24, r24
    29ac:	e1 f7       	brne	.-8      	; 0x29a6 <handle_message_length_3+0xba>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    29ae:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    29b0:	85 e7       	ldi	r24, 0x75	; 117
    29b2:	96 e2       	ldi	r25, 0x26	; 38
    29b4:	6f 2d       	mov	r22, r15
    29b6:	ae 01       	movw	r20, r28
    29b8:	4f 5f       	subi	r20, 0xFF	; 255
    29ba:	5f 4f       	sbci	r21, 0xFF	; 255
    29bc:	22 e0       	ldi	r18, 0x02	; 2
    29be:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    29c2:	80 91 7f 29 	lds	r24, 0x297F
    29c6:	88 23       	and	r24, r24
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <handle_message_length_3+0xd6>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    29ca:	82 e7       	ldi	r24, 0x72	; 114
    29cc:	99 e2       	ldi	r25, 0x29	; 41
    29ce:	6f 2d       	mov	r22, r15
    29d0:	ae 01       	movw	r20, r28
    29d2:	4f 5f       	subi	r20, 0xFF	; 255
    29d4:	5f 4f       	sbci	r21, 0xFF	; 255
    29d6:	22 e0       	ldi	r18, 0x02	; 2
    29d8:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    29dc:	80 91 15 27 	lds	r24, 0x2715
    29e0:	88 23       	and	r24, r24
    29e2:	e1 f7       	brne	.-8      	; 0x29dc <handle_message_length_3+0xf0>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    29e4:	88 e0       	ldi	r24, 0x08	; 8
    29e6:	97 e2       	ldi	r25, 0x27	; 39
    29e8:	6f 2d       	mov	r22, r15
    29ea:	ae 01       	movw	r20, r28
    29ec:	4f 5f       	subi	r20, 0xFF	; 255
    29ee:	5f 4f       	sbci	r21, 0xFF	; 255
    29f0:	22 e0       	ldi	r18, 0x02	; 2
    29f2:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    29f6:	80 91 a4 25 	lds	r24, 0x25A4
    29fa:	88 23       	and	r24, r24
    29fc:	e1 f7       	brne	.-8      	; 0x29f6 <handle_message_length_3+0x10a>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    29fe:	87 e9       	ldi	r24, 0x97	; 151
    2a00:	95 e2       	ldi	r25, 0x25	; 37
    2a02:	6f 2d       	mov	r22, r15
    2a04:	ae 01       	movw	r20, r28
    2a06:	4f 5f       	subi	r20, 0xFF	; 255
    2a08:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0a:	22 e0       	ldi	r18, 0x02	; 2
    2a0c:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <TWI_MasterWrite>
    2a10:	84 ef       	ldi	r24, 0xF4	; 244
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	20 e2       	ldi	r18, 0x20	; 32
    2a16:	33 e0       	ldi	r19, 0x03	; 3
    2a18:	f9 01       	movw	r30, r18
    2a1a:	31 97       	sbiw	r30, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <handle_message_length_3+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	d9 f7       	brne	.-10     	; 0x2a18 <handle_message_length_3+0x12c>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	49 ef       	ldi	r20, 0xF9	; 249
    2a28:	50 e2       	ldi	r21, 0x20	; 32
    2a2a:	89 c0       	rjmp	.+274    	; 0x2b3e <handle_message_length_3+0x252>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	81 81       	ldd	r24, Z+1	; 0x01
    2a30:	80 93 99 27 	sts	0x2799, r24
            y_mode = msg_buffer[2];
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	80 93 e3 27 	sts	0x27E3, r24
    2a3a:	83 c0       	rjmp	.+262    	; 0x2b42 <handle_message_length_3+0x256>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	62 81       	ldd	r22, Z+2	; 0x02
    2a40:	66 23       	and	r22, r22
    2a42:	49 f0       	breq	.+18     	; 0x2a56 <handle_message_length_3+0x16a>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    2a44:	f8 01       	movw	r30, r16
    2a46:	81 81       	ldd	r24, Z+1	; 0x01
    2a48:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <set_pos_func>
    2a4c:	7a c0       	rjmp	.+244    	; 0x2b42 <handle_message_length_3+0x256>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    2a4e:	f8 01       	movw	r30, r16
    2a50:	62 81       	ldd	r22, Z+2	; 0x02
    2a52:	66 23       	and	r22, r22
    2a54:	21 f4       	brne	.+8      	; 0x2a5e <handle_message_length_3+0x172>
                set_default_func(msg_buffer[1]);}
    2a56:	81 81       	ldd	r24, Z+1	; 0x01
    2a58:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <set_default_func>
    2a5c:	72 c0       	rjmp	.+228    	; 0x2b42 <handle_message_length_3+0x256>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    2a5e:	f8 01       	movw	r30, r16
    2a60:	81 81       	ldd	r24, Z+1	; 0x01
    2a62:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <set_vel_func>
    2a66:	6d c0       	rjmp	.+218    	; 0x2b42 <handle_message_length_3+0x256>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2a68:	f8 01       	movw	r30, r16
    2a6a:	92 81       	ldd	r25, Z+2	; 0x02
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	21 81       	ldd	r18, Z+1	; 0x01
    2a70:	8c 01       	movw	r16, r24
    2a72:	02 0f       	add	r16, r18
    2a74:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    2a76:	98 01       	movw	r18, r16
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	62 e1       	ldi	r22, 0x12	; 18
    2a7e:	7a e7       	ldi	r23, 0x7A	; 122
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__divmodsi4>
    2a88:	20 93 9f 20 	sts	0x209F, r18
    2a8c:	30 93 a0 20 	sts	0x20A0, r19
            if (quiet_mode_on == 0)
    2a90:	80 91 f3 24 	lds	r24, 0x24F3
    2a94:	88 23       	and	r24, r24
    2a96:	81 f4       	brne	.+32     	; 0x2ab8 <handle_message_length_3+0x1cc>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <handle_message_length_3+0x1ae>
    2a9a:	0f 92       	push	r0
    2a9c:	83 ed       	ldi	r24, 0xD3	; 211
    2a9e:	97 e0       	ldi	r25, 0x07	; 7
    2aa0:	ed b7       	in	r30, 0x3d	; 61
    2aa2:	fe b7       	in	r31, 0x3e	; 62
    2aa4:	81 83       	std	Z+1, r24	; 0x01
    2aa6:	92 83       	std	Z+2, r25	; 0x02
    2aa8:	03 83       	std	Z+3, r16	; 0x03
    2aaa:	14 83       	std	Z+4, r17	; 0x04
    2aac:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
            Update_Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    2ab8:	40 91 9f 20 	lds	r20, 0x209F
    2abc:	50 91 a0 20 	lds	r21, 0x20A0
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	88 e3       	ldi	r24, 0x38	; 56
    2ac6:	9b e0       	ldi	r25, 0x0B	; 11
    2ac8:	24 e0       	ldi	r18, 0x04	; 4
    2aca:	31 c0       	rjmp	.+98     	; 0x2b2e <handle_message_length_3+0x242>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2acc:	f8 01       	movw	r30, r16
    2ace:	92 81       	ldd	r25, Z+2	; 0x02
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	21 81       	ldd	r18, Z+1	; 0x01
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	02 0f       	add	r16, r18
    2ad8:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    2ada:	98 01       	movw	r18, r16
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	62 e1       	ldi	r22, 0x12	; 18
    2ae2:	7a e7       	ldi	r23, 0x7A	; 122
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__divmodsi4>
    2aec:	20 93 a1 20 	sts	0x20A1, r18
    2af0:	30 93 a2 20 	sts	0x20A2, r19
            if (quiet_mode_on == 0)
    2af4:	80 91 f3 24 	lds	r24, 0x24F3
    2af8:	88 23       	and	r24, r24
    2afa:	81 f4       	brne	.+32     	; 0x2b1c <handle_message_length_3+0x230>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <handle_message_length_3+0x212>
    2afe:	0f 92       	push	r0
    2b00:	80 eb       	ldi	r24, 0xB0	; 176
    2b02:	97 e0       	ldi	r25, 0x07	; 7
    2b04:	ed b7       	in	r30, 0x3d	; 61
    2b06:	fe b7       	in	r31, 0x3e	; 62
    2b08:	81 83       	std	Z+1, r24	; 0x01
    2b0a:	92 83       	std	Z+2, r25	; 0x02
    2b0c:	03 83       	std	Z+3, r16	; 0x03
    2b0e:	14 83       	std	Z+4, r17	; 0x04
    2b10:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
            Update_Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);
    2b1c:	40 91 a1 20 	lds	r20, 0x20A1
    2b20:	50 91 a2 20 	lds	r21, 0x20A2
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	83 ef       	ldi	r24, 0xF3	; 243
    2b2a:	99 e0       	ldi	r25, 0x09	; 9
    2b2c:	25 e0       	ldi	r18, 0x05	; 5
    2b2e:	01 e0       	ldi	r16, 0x01	; 1
    2b30:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <Update_Reg_Handler>
    2b34:	06 c0       	rjmp	.+12     	; 0x2b42 <handle_message_length_3+0x256>
            break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	68 e0       	ldi	r22, 0x08	; 8
    2b3a:	41 ed       	ldi	r20, 0xD1	; 209
    2b3c:	50 e2       	ldi	r21, 0x20	; 32
    2b3e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    }
}
    2b42:	22 96       	adiw	r28, 0x02	; 2
    2b44:	e5 e0       	ldi	r30, 0x05	; 5
    2b46:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x1a>

00002b4a <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    2b4a:	a1 e0       	ldi	r26, 0x01	; 1
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	eb ea       	ldi	r30, 0xAB	; 171
    2b50:	f5 e1       	ldi	r31, 0x15	; 21
    2b52:	0c 94 ab 57 	jmp	0xaf56	; 0xaf56 <__prologue_saves__+0x10>
    2b56:	5c 01       	movw	r10, r24
    //The first two byte is the x_dac_val
    //The second two byte is the y_dac_val
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    2b58:	fc 01       	movw	r30, r24
    2b5a:	e0 80       	ld	r14, Z
    2b5c:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    2b5e:	c2 80       	ldd	r12, Z+2	; 0x02
    2b60:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    2b62:	84 81       	ldd	r24, Z+4	; 0x04
    2b64:	80 93 e4 24 	sts	0x24E4, r24
    gs_value =msg_buffer[5];
    2b68:	95 81       	ldd	r25, Z+5	; 0x05
    2b6a:	90 93 17 27 	sts	0x2717, r25
    row_compress = msg_buffer[6];
    2b6e:	86 81       	ldd	r24, Z+6	; 0x06
    2b70:	80 93 aa 25 	sts	0x25AA, r24


    if (row_compress)
    2b74:	88 23       	and	r24, r24
    2b76:	19 f0       	breq	.+6      	; 0x2b7e <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    2b78:	90 93 9a 27 	sts	0x279A, r25
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    2b7e:	89 2f       	mov	r24, r25
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	33 e0       	ldi	r19, 0x03	; 3
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	3a 95       	dec	r19
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <display_dumped_frame+0x3a>
    2b8c:	80 93 9a 27 	sts	0x279A, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    2b90:	10 92 e0 24 	sts	0x24E0, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <digitalWrite>
    2b9c:	07 e0       	ldi	r16, 0x07	; 7
    2b9e:	10 e0       	ldi	r17, 0x00	; 0
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	0f c0       	rjmp	.+30     	; 0x2bc2 <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    2ba4:	a5 01       	movw	r20, r10
    2ba6:	40 0f       	add	r20, r16
    2ba8:	51 1f       	adc	r21, r17
    2baa:	89 2f       	mov	r24, r25
    2bac:	60 91 9a 27 	lds	r22, 0x279A
    2bb0:	99 83       	std	Y+1, r25	; 0x01
    2bb2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    2bb6:	80 91 9a 27 	lds	r24, 0x279A
    2bba:	08 0f       	add	r16, r24
    2bbc:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2bbe:	99 81       	ldd	r25, Y+1	; 0x01
    2bc0:	9f 5f       	subi	r25, 0xFF	; 255
    2bc2:	80 91 e4 24 	lds	r24, 0x24E4
    2bc6:	89 17       	cp	r24, r25
    2bc8:	68 f7       	brcc	.-38     	; 0x2ba4 <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 2047 (0 - 5V)
    2bca:	7f 2d       	mov	r23, r15
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	6e 0d       	add	r22, r14
    2bd0:	71 1d       	adc	r23, r1
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    analogWrite(1, y_dac_val); 
    2bd8:	7d 2d       	mov	r23, r13
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	6c 0d       	add	r22, r12
    2bde:	71 1d       	adc	r23, r1
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <digitalWrite>
}
    2bee:	21 96       	adiw	r28, 0x01	; 1
    2bf0:	ea e0       	ldi	r30, 0x0A	; 10
    2bf2:	0c 94 c7 57 	jmp	0xaf8e	; 0xaf8e <__epilogue_restores__+0x10>

00002bf6 <fetch_display_frame>:





void fetch_display_frame(uint16_t f_num){
    2bf6:	a6 e2       	ldi	r26, 0x26	; 38
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e1 e0       	ldi	r30, 0x01	; 1
    2bfc:	f6 e1       	ldi	r31, 0x16	; 22
    2bfe:	0c 94 a5 57 	jmp	0xaf4a	; 0xaf4a <__prologue_saves__+0x4>
    2c02:	4c 01       	movw	r8, r24
    else
      digitalWrite(2, HIGH);   // turn off laser
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
}
    2c04:	4d b6       	in	r4, 0x3d	; 61
    2c06:	5e b6       	in	r5, 0x3e	; 62
    uint8_t FLASH[32];
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    2c08:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
    
    digitalWrite(1, HIGH); // set line high at start of frame write
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	61 e0       	ldi	r22, 0x01	; 1
    2c0e:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <digitalWrite>
    len = num_panels * bytes_per_panel_frame;
    2c12:	90 91 9a 27 	lds	r25, 0x279A
    2c16:	80 91 e4 24 	lds	r24, 0x24E4
    2c1a:	98 9f       	mul	r25, r24
    2c1c:	50 01       	movw	r10, r0
    2c1e:	11 24       	eor	r1, r1
	block_per_frame = len/512 + 1;
    uint8_t  frameBuff[len];
    2c20:	8d b7       	in	r24, 0x3d	; 61
    2c22:	9e b7       	in	r25, 0x3e	; 62
    2c24:	8a 19       	sub	r24, r10
    2c26:	9b 09       	sbc	r25, r11
    2c28:	8d bf       	out	0x3d, r24	; 61
    2c2a:	9e bf       	out	0x3e, r25	; 62
    2c2c:	6d b6       	in	r6, 0x3d	; 61
    2c2e:	7e b6       	in	r7, 0x3e	; 62
    2c30:	08 94       	sec
    2c32:	61 1c       	adc	r6, r1
    2c34:	71 1c       	adc	r7, r1
    //offset = 512 + (uint32_t)f_num * (uint32_t)len;  //byte offset into the file
    offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    2c36:	6b 2d       	mov	r22, r11
    2c38:	66 95       	lsr	r22
    2c3a:	6f 5f       	subi	r22, 0xFF	; 255
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	94 01       	movw	r18, r8
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    2c4c:	6b 01       	movw	r12, r22
    2c4e:	7c 01       	movw	r14, r24
    2c50:	08 94       	sec
    2c52:	c1 1c       	adc	r12, r1
    2c54:	d1 1c       	adc	r13, r1
    2c56:	e1 1c       	adc	r14, r1
    2c58:	f1 1c       	adc	r15, r1
    2c5a:	e9 e0       	ldi	r30, 0x09	; 9
    2c5c:	cc 0c       	add	r12, r12
    2c5e:	dd 1c       	adc	r13, r13
    2c60:	ee 1c       	adc	r14, r14
    2c62:	ff 1c       	adc	r15, r15
    2c64:	ea 95       	dec	r30
    2c66:	d1 f7       	brne	.-12     	; 0x2c5c <fetch_display_frame+0x66>
	
    Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //straigforward way to avoid fs reentrant
    2c68:	40 91 9f 20 	lds	r20, 0x209F
    2c6c:	50 91 a0 20 	lds	r21, 0x20A0
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	88 e3       	ldi	r24, 0x38	; 56
    2c76:	9b e0       	ldi	r25, 0x0B	; 11
    2c78:	24 e0       	ldi	r18, 0x04	; 4
    2c7a:	00 e0       	ldi	r16, 0x00	; 0
    2c7c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //straigforward way to avoid fs reentrant
    2c80:	40 91 a1 20 	lds	r20, 0x20A1
    2c84:	50 91 a2 20 	lds	r21, 0x20A2
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	83 ef       	ldi	r24, 0xF3	; 243
    2c8e:	99 e0       	ldi	r25, 0x09	; 9
    2c90:	25 e0       	ldi	r18, 0x05	; 5
    2c92:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
    
    res = f_lseek(&file1, offset);
    2c96:	82 e5       	ldi	r24, 0x52	; 82
    2c98:	99 e2       	ldi	r25, 0x29	; 41
    2c9a:	b7 01       	movw	r22, r14
    2c9c:	a6 01       	movw	r20, r12
    2c9e:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
    2ca2:	18 2f       	mov	r17, r24
    if ((res == FR_OK) && (file1.fptr == offset)) {
    2ca4:	88 23       	and	r24, r24
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <fetch_display_frame+0xb4>
    2ca8:	84 c1       	rjmp	.+776    	; 0x2fb2 <fetch_display_frame+0x3bc>
    2caa:	80 91 58 29 	lds	r24, 0x2958
    2cae:	90 91 59 29 	lds	r25, 0x2959
    2cb2:	a0 91 5a 29 	lds	r26, 0x295A
    2cb6:	b0 91 5b 29 	lds	r27, 0x295B
    2cba:	8c 15       	cp	r24, r12
    2cbc:	9d 05       	cpc	r25, r13
    2cbe:	ae 05       	cpc	r26, r14
    2cc0:	bf 05       	cpc	r27, r15
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <fetch_display_frame+0xd0>
    2cc4:	76 c1       	rjmp	.+748    	; 0x2fb2 <fetch_display_frame+0x3bc>
        res = f_read(&file1, frameBuff, len, &cnt);
    2cc6:	82 e5       	ldi	r24, 0x52	; 82
    2cc8:	99 e2       	ldi	r25, 0x29	; 41
    2cca:	b3 01       	movw	r22, r6
    2ccc:	a5 01       	movw	r20, r10
    2cce:	9e 01       	movw	r18, r28
    2cd0:	2f 5f       	subi	r18, 0xFF	; 255
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
    2cd8:	08 2f       	mov	r16, r24
        if ((res == FR_OK) && (cnt == len)) {	
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <fetch_display_frame+0xea>
    2cde:	44 c1       	rjmp	.+648    	; 0x2f68 <fetch_display_frame+0x372>
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	8a 15       	cp	r24, r10
    2ce6:	9b 05       	cpc	r25, r11
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <fetch_display_frame+0xf6>
    2cea:	3e c1       	rjmp	.+636    	; 0x2f68 <fetch_display_frame+0x372>
		    if (func_ID_X != 0)
    2cec:	80 91 f4 24 	lds	r24, 0x24F4
    2cf0:	90 91 f5 24 	lds	r25, 0x24F5
    2cf4:	89 2b       	or	r24, r25
    2cf6:	61 f0       	breq	.+24     	; 0x2d10 <fetch_display_frame+0x11a>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);  //straigforward way to avoid fs reentrant
    2cf8:	40 91 9f 20 	lds	r20, 0x209F
    2cfc:	50 91 a0 20 	lds	r21, 0x20A0
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	88 e3       	ldi	r24, 0x38	; 56
    2d06:	9b e0       	ldi	r25, 0x0B	; 11
    2d08:	24 e0       	ldi	r18, 0x04	; 4
    2d0a:	01 e0       	ldi	r16, 0x01	; 1
    2d0c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
        
			if (func_ID_Y != 0)
    2d10:	80 91 f6 24 	lds	r24, 0x24F6
    2d14:	90 91 f7 24 	lds	r25, 0x24F7
    2d18:	89 2b       	or	r24, r25
    2d1a:	61 f0       	breq	.+24     	; 0x2d34 <fetch_display_frame+0x13e>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //straigforward way to avoid fs reentrant
    2d1c:	40 91 a1 20 	lds	r20, 0x20A1
    2d20:	50 91 a2 20 	lds	r21, 0x20A2
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	83 ef       	ldi	r24, 0xF3	; 243
    2d2a:	99 e0       	ldi	r25, 0x09	; 9
    2d2c:	25 e0       	ldi	r18, 0x05	; 5
    2d2e:	01 e0       	ldi	r16, 0x01	; 1
    2d30:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
        
		
            if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    2d34:	80 91 e0 24 	lds	r24, 0x24E0
    2d38:	82 30       	cpi	r24, 0x02	; 2
    2d3a:	18 f0       	brcs	.+6      	; 0x2d42 <fetch_display_frame+0x14c>
                ledToggle(1);    //toggle LED 1
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	0e 94 81 20 	call	0x4102	; 0x4102 <ledToggle>
            }
            
            display_flag = 0;  //clear the display flag
    2d42:	10 92 e0 24 	sts	0x24E0, r1
    2d46:	01 e0       	ldi	r16, 0x01	; 1
    2d48:	ee 24       	eor	r14, r14
    2d4a:	ff 24       	eor	r15, r15
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2d4c:	77 e0       	ldi	r23, 0x07	; 7
    2d4e:	c7 2e       	mov	r12, r23
    2d50:	d1 2c       	mov	r13, r1
    2d52:	cc 0e       	add	r12, r28
    2d54:	dd 1e       	adc	r13, r29
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
                                                        gscale[0] = FLASH[0];
                                                        gscale[1] = FLASH[8];
                                                        gscale[2] = FLASH[16];
                                                        gscale[3] = FLASH[24];
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2d56:	63 e0       	ldi	r22, 0x03	; 3
    2d58:	a6 2e       	mov	r10, r22
    2d5a:	b1 2c       	mov	r11, r1
    2d5c:	ac 0e       	add	r10, r28
    2d5e:	bd 1e       	adc	r11, r29
    2d60:	f7 c0       	rjmp	.+494    	; 0x2f50 <fetch_display_frame+0x35a>
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
    2d62:	8d 91       	ld	r24, X+
    2d64:	81 93       	st	Z+, r24
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2d66:	8e 2f       	mov	r24, r30
    2d68:	8c 19       	sub	r24, r12
    2d6a:	89 17       	cp	r24, r25
    2d6c:	d0 f3       	brcs	.-12     	; 0x2d62 <fetch_display_frame+0x16c>
    2d6e:	e9 0e       	add	r14, r25
    2d70:	f1 1c       	adc	r15, r1
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
                }
                packet_sent = 0; //used with compression to simplify coniditionals.
                if (ident_compress == 1) {
    2d72:	80 91 81 29 	lds	r24, 0x2981
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <fetch_display_frame+0x186>
    2d7a:	e3 c0       	rjmp	.+454    	; 0x2f42 <fetch_display_frame+0x34c>
                    if (bytes_per_panel_frame == 8){
    2d7c:	98 30       	cpi	r25, 0x08	; 8
    2d7e:	e9 f4       	brne	.+58     	; 0x2dba <fetch_display_frame+0x1c4>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2d80:	9f 81       	ldd	r25, Y+7	; 0x07
    2d82:	88 85       	ldd	r24, Y+8	; 0x08
    2d84:	98 17       	cp	r25, r24
    2d86:	c9 f4       	brne	.+50     	; 0x2dba <fetch_display_frame+0x1c4>
    2d88:	49 85       	ldd	r20, Y+9	; 0x09
    2d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d8c:	48 17       	cp	r20, r24
    2d8e:	a9 f4       	brne	.+42     	; 0x2dba <fetch_display_frame+0x1c4>
    2d90:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d94:	38 17       	cp	r19, r24
    2d96:	89 f4       	brne	.+34     	; 0x2dba <fetch_display_frame+0x1c4>
    2d98:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9c:	28 17       	cp	r18, r24
    2d9e:	69 f4       	brne	.+26     	; 0x2dba <fetch_display_frame+0x1c4>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2da0:	94 17       	cp	r25, r20
    2da2:	59 f4       	brne	.+22     	; 0x2dba <fetch_display_frame+0x1c4>
    2da4:	93 17       	cp	r25, r19
    2da6:	49 f4       	brne	.+18     	; 0x2dba <fetch_display_frame+0x1c4>
    2da8:	92 17       	cp	r25, r18
    2daa:	39 f4       	brne	.+14     	; 0x2dba <fetch_display_frame+0x1c4>
                                i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    2dac:	80 2f       	mov	r24, r16
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	a6 01       	movw	r20, r12
    2db2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    2db6:	e1 e0       	ldi	r30, 0x01	; 1
    2db8:	01 c0       	rjmp	.+2      	; 0x2dbc <fetch_display_frame+0x1c6>
    2dba:	e0 e0       	ldi	r30, 0x00	; 0
                                packet_sent = 1;
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 8
                    
                    if (bytes_per_panel_frame == 24){
    2dbc:	80 91 9a 27 	lds	r24, 0x279A
    2dc0:	88 31       	cpi	r24, 0x18	; 24
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <fetch_display_frame+0x1d0>
    2dc4:	4e c0       	rjmp	.+156    	; 0x2e62 <fetch_display_frame+0x26c>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	88 85       	ldd	r24, Y+8	; 0x08
    2dca:	68 17       	cp	r22, r24
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <fetch_display_frame+0x1da>
    2dce:	49 c0       	rjmp	.+146    	; 0x2e62 <fetch_display_frame+0x26c>
    2dd0:	39 85       	ldd	r19, Y+9	; 0x09
    2dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dd4:	38 17       	cp	r19, r24
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <fetch_display_frame+0x1e4>
    2dd8:	44 c0       	rjmp	.+136    	; 0x2e62 <fetch_display_frame+0x26c>
    2dda:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ddc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dde:	28 17       	cp	r18, r24
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <fetch_display_frame+0x1ee>
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <fetch_display_frame+0x26c>
    2de4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2de6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de8:	98 17       	cp	r25, r24
    2dea:	d9 f5       	brne	.+118    	; 0x2e62 <fetch_display_frame+0x26c>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2dec:	63 17       	cp	r22, r19
    2dee:	c9 f5       	brne	.+114    	; 0x2e62 <fetch_display_frame+0x26c>
    2df0:	62 17       	cp	r22, r18
    2df2:	b9 f5       	brne	.+110    	; 0x2e62 <fetch_display_frame+0x26c>
    2df4:	69 17       	cp	r22, r25
    2df6:	a9 f5       	brne	.+106    	; 0x2e62 <fetch_display_frame+0x26c>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2df8:	4f 85       	ldd	r20, Y+15	; 0x0f
    2dfa:	88 89       	ldd	r24, Y+16	; 0x10
    2dfc:	48 17       	cp	r20, r24
    2dfe:	89 f5       	brne	.+98     	; 0x2e62 <fetch_display_frame+0x26c>
    2e00:	39 89       	ldd	r19, Y+17	; 0x11
    2e02:	8a 89       	ldd	r24, Y+18	; 0x12
    2e04:	38 17       	cp	r19, r24
    2e06:	69 f5       	brne	.+90     	; 0x2e62 <fetch_display_frame+0x26c>
    2e08:	2b 89       	ldd	r18, Y+19	; 0x13
    2e0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e0c:	28 17       	cp	r18, r24
    2e0e:	49 f5       	brne	.+82     	; 0x2e62 <fetch_display_frame+0x26c>
    2e10:	9d 89       	ldd	r25, Y+21	; 0x15
    2e12:	8e 89       	ldd	r24, Y+22	; 0x16
    2e14:	98 17       	cp	r25, r24
    2e16:	29 f5       	brne	.+74     	; 0x2e62 <fetch_display_frame+0x26c>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2e18:	43 17       	cp	r20, r19
    2e1a:	19 f5       	brne	.+70     	; 0x2e62 <fetch_display_frame+0x26c>
    2e1c:	42 17       	cp	r20, r18
    2e1e:	09 f5       	brne	.+66     	; 0x2e62 <fetch_display_frame+0x26c>
    2e20:	49 17       	cp	r20, r25
    2e22:	f9 f4       	brne	.+62     	; 0x2e62 <fetch_display_frame+0x26c>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2e24:	9f 89       	ldd	r25, Y+23	; 0x17
    2e26:	88 8d       	ldd	r24, Y+24	; 0x18
    2e28:	98 17       	cp	r25, r24
    2e2a:	d9 f4       	brne	.+54     	; 0x2e62 <fetch_display_frame+0x26c>
    2e2c:	59 8d       	ldd	r21, Y+25	; 0x19
    2e2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e30:	58 17       	cp	r21, r24
    2e32:	b9 f4       	brne	.+46     	; 0x2e62 <fetch_display_frame+0x26c>
    2e34:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2e36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e38:	38 17       	cp	r19, r24
    2e3a:	99 f4       	brne	.+38     	; 0x2e62 <fetch_display_frame+0x26c>
    2e3c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e40:	28 17       	cp	r18, r24
    2e42:	79 f4       	brne	.+30     	; 0x2e62 <fetch_display_frame+0x26c>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2e44:	95 17       	cp	r25, r21
    2e46:	69 f4       	brne	.+26     	; 0x2e62 <fetch_display_frame+0x26c>
    2e48:	93 17       	cp	r25, r19
    2e4a:	59 f4       	brne	.+22     	; 0x2e62 <fetch_display_frame+0x26c>
    2e4c:	92 17       	cp	r25, r18
    2e4e:	49 f4       	brne	.+18     	; 0x2e62 <fetch_display_frame+0x26c>
                                                gscale[0] = FLASH[0];
    2e50:	6b 83       	std	Y+3, r22	; 0x03
                                                gscale[1] = FLASH[8];
    2e52:	4c 83       	std	Y+4, r20	; 0x04
                                                gscale[2] = FLASH[16];
    2e54:	9d 83       	std	Y+5, r25	; 0x05
                                                i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    2e56:	80 2f       	mov	r24, r16
    2e58:	63 e0       	ldi	r22, 0x03	; 3
    2e5a:	a5 01       	movw	r20, r10
    2e5c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    2e60:	e1 e0       	ldi	r30, 0x01	; 1
                                } //end of third round of comparisons
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 24
                    
                    if (bytes_per_panel_frame == 32){
    2e62:	80 91 9a 27 	lds	r24, 0x279A
    2e66:	80 32       	cpi	r24, 0x20	; 32
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <fetch_display_frame+0x276>
    2e6a:	69 c0       	rjmp	.+210    	; 0x2f3e <fetch_display_frame+0x348>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2e6c:	7f 81       	ldd	r23, Y+7	; 0x07
    2e6e:	88 85       	ldd	r24, Y+8	; 0x08
    2e70:	78 17       	cp	r23, r24
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <fetch_display_frame+0x280>
    2e74:	64 c0       	rjmp	.+200    	; 0x2f3e <fetch_display_frame+0x348>
    2e76:	39 85       	ldd	r19, Y+9	; 0x09
    2e78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7a:	38 17       	cp	r19, r24
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <fetch_display_frame+0x28a>
    2e7e:	5f c0       	rjmp	.+190    	; 0x2f3e <fetch_display_frame+0x348>
    2e80:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e84:	28 17       	cp	r18, r24
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <fetch_display_frame+0x294>
    2e88:	5a c0       	rjmp	.+180    	; 0x2f3e <fetch_display_frame+0x348>
    2e8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e8e:	98 17       	cp	r25, r24
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <fetch_display_frame+0x29e>
    2e92:	55 c0       	rjmp	.+170    	; 0x2f3e <fetch_display_frame+0x348>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2e94:	73 17       	cp	r23, r19
    2e96:	09 f0       	breq	.+2      	; 0x2e9a <fetch_display_frame+0x2a4>
    2e98:	52 c0       	rjmp	.+164    	; 0x2f3e <fetch_display_frame+0x348>
    2e9a:	72 17       	cp	r23, r18
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <fetch_display_frame+0x2aa>
    2e9e:	4f c0       	rjmp	.+158    	; 0x2f3e <fetch_display_frame+0x348>
    2ea0:	79 17       	cp	r23, r25
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <fetch_display_frame+0x2b0>
    2ea4:	4c c0       	rjmp	.+152    	; 0x2f3e <fetch_display_frame+0x348>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2ea6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ea8:	88 89       	ldd	r24, Y+16	; 0x10
    2eaa:	68 17       	cp	r22, r24
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <fetch_display_frame+0x2ba>
    2eae:	47 c0       	rjmp	.+142    	; 0x2f3e <fetch_display_frame+0x348>
    2eb0:	39 89       	ldd	r19, Y+17	; 0x11
    2eb2:	8a 89       	ldd	r24, Y+18	; 0x12
    2eb4:	38 17       	cp	r19, r24
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <fetch_display_frame+0x2c4>
    2eb8:	42 c0       	rjmp	.+132    	; 0x2f3e <fetch_display_frame+0x348>
    2eba:	2b 89       	ldd	r18, Y+19	; 0x13
    2ebc:	8c 89       	ldd	r24, Y+20	; 0x14
    2ebe:	28 17       	cp	r18, r24
    2ec0:	f1 f5       	brne	.+124    	; 0x2f3e <fetch_display_frame+0x348>
    2ec2:	9d 89       	ldd	r25, Y+21	; 0x15
    2ec4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ec6:	98 17       	cp	r25, r24
    2ec8:	d1 f5       	brne	.+116    	; 0x2f3e <fetch_display_frame+0x348>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2eca:	63 17       	cp	r22, r19
    2ecc:	c1 f5       	brne	.+112    	; 0x2f3e <fetch_display_frame+0x348>
    2ece:	62 17       	cp	r22, r18
    2ed0:	b1 f5       	brne	.+108    	; 0x2f3e <fetch_display_frame+0x348>
    2ed2:	69 17       	cp	r22, r25
    2ed4:	a1 f5       	brne	.+104    	; 0x2f3e <fetch_display_frame+0x348>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2ed6:	4f 89       	ldd	r20, Y+23	; 0x17
    2ed8:	88 8d       	ldd	r24, Y+24	; 0x18
    2eda:	48 17       	cp	r20, r24
    2edc:	81 f5       	brne	.+96     	; 0x2f3e <fetch_display_frame+0x348>
    2ede:	39 8d       	ldd	r19, Y+25	; 0x19
    2ee0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ee2:	38 17       	cp	r19, r24
    2ee4:	61 f5       	brne	.+88     	; 0x2f3e <fetch_display_frame+0x348>
    2ee6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2ee8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eea:	28 17       	cp	r18, r24
    2eec:	41 f5       	brne	.+80     	; 0x2f3e <fetch_display_frame+0x348>
    2eee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef2:	98 17       	cp	r25, r24
    2ef4:	21 f5       	brne	.+72     	; 0x2f3e <fetch_display_frame+0x348>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2ef6:	43 17       	cp	r20, r19
    2ef8:	11 f5       	brne	.+68     	; 0x2f3e <fetch_display_frame+0x348>
    2efa:	42 17       	cp	r20, r18
    2efc:	01 f5       	brne	.+64     	; 0x2f3e <fetch_display_frame+0x348>
    2efe:	49 17       	cp	r20, r25
    2f00:	f1 f4       	brne	.+60     	; 0x2f3e <fetch_display_frame+0x348>
                                                if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    2f02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f04:	88 a1       	ldd	r24, Y+32	; 0x20
    2f06:	98 17       	cp	r25, r24
    2f08:	d1 f4       	brne	.+52     	; 0x2f3e <fetch_display_frame+0x348>
    2f0a:	59 a1       	ldd	r21, Y+33	; 0x21
    2f0c:	8a a1       	ldd	r24, Y+34	; 0x22
    2f0e:	58 17       	cp	r21, r24
    2f10:	b1 f4       	brne	.+44     	; 0x2f3e <fetch_display_frame+0x348>
    2f12:	3b a1       	ldd	r19, Y+35	; 0x23
    2f14:	8c a1       	ldd	r24, Y+36	; 0x24
    2f16:	38 17       	cp	r19, r24
    2f18:	91 f4       	brne	.+36     	; 0x2f3e <fetch_display_frame+0x348>
    2f1a:	2d a1       	ldd	r18, Y+37	; 0x25
    2f1c:	8e a1       	ldd	r24, Y+38	; 0x26
    2f1e:	28 17       	cp	r18, r24
    2f20:	71 f4       	brne	.+28     	; 0x2f3e <fetch_display_frame+0x348>
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    2f22:	95 17       	cp	r25, r21
    2f24:	61 f4       	brne	.+24     	; 0x2f3e <fetch_display_frame+0x348>
    2f26:	93 17       	cp	r25, r19
    2f28:	51 f4       	brne	.+20     	; 0x2f3e <fetch_display_frame+0x348>
    2f2a:	92 17       	cp	r25, r18
    2f2c:	41 f4       	brne	.+16     	; 0x2f3e <fetch_display_frame+0x348>
                                                        gscale[0] = FLASH[0];
    2f2e:	7b 83       	std	Y+3, r23	; 0x03
                                                        gscale[1] = FLASH[8];
    2f30:	6c 83       	std	Y+4, r22	; 0x04
                                                        gscale[2] = FLASH[16];
    2f32:	4d 83       	std	Y+5, r20	; 0x05
                                                        gscale[3] = FLASH[24];
    2f34:	9e 83       	std	Y+6, r25	; 0x06
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2f36:	80 2f       	mov	r24, r16
    2f38:	64 e0       	ldi	r22, 0x04	; 4
    2f3a:	a5 01       	movw	r20, r10
    2f3c:	06 c0       	rjmp	.+12     	; 0x2f4a <fetch_display_frame+0x354>
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 32
                } //end of if ident_compress == 1
                
                if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    2f3e:	ee 23       	and	r30, r30
    2f40:	31 f4       	brne	.+12     	; 0x2f4e <fetch_display_frame+0x358>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    2f42:	80 2f       	mov	r24, r16
    2f44:	60 91 9a 27 	lds	r22, 0x279A
    2f48:	a6 01       	movw	r20, r12
    2f4a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
            }
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2f4e:	0f 5f       	subi	r16, 0xFF	; 255
    2f50:	80 91 e4 24 	lds	r24, 0x24E4
    2f54:	80 17       	cp	r24, r16
    2f56:	08 f4       	brcc	.+2      	; 0x2f5a <fetch_display_frame+0x364>
    2f58:	75 c0       	rjmp	.+234    	; 0x3044 <fetch_display_frame+0x44e>
                for(j = 0;j < bytes_per_panel_frame;j++){
    2f5a:	90 91 9a 27 	lds	r25, 0x279A
    2f5e:	d3 01       	movw	r26, r6
    2f60:	ae 0d       	add	r26, r14
    2f62:	bf 1d       	adc	r27, r15
    2f64:	f6 01       	movw	r30, r12
    2f66:	ff ce       	rjmp	.-514    	; 0x2d66 <fetch_display_frame+0x170>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
                }
            } //end of for all panels loop
        }
        else {
            if (quiet_mode_on == 0){
    2f68:	80 91 f3 24 	lds	r24, 0x24F3
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f0       	breq	.+2      	; 0x2f72 <fetch_display_frame+0x37c>
    2f70:	69 c0       	rjmp	.+210    	; 0x3044 <fetch_display_frame+0x44e>
                xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    2f72:	87 e2       	ldi	r24, 0x27	; 39
    2f74:	97 e0       	ldi	r25, 0x07	; 7
    2f76:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
                xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    2f7a:	ad b7       	in	r26, 0x3d	; 61
    2f7c:	be b7       	in	r27, 0x3e	; 62
    2f7e:	18 97       	sbiw	r26, 0x08	; 8
    2f80:	ad bf       	out	0x3d, r26	; 61
    2f82:	be bf       	out	0x3e, r27	; 62
    2f84:	ed b7       	in	r30, 0x3d	; 61
    2f86:	fe b7       	in	r31, 0x3e	; 62
    2f88:	31 96       	adiw	r30, 0x01	; 1
    2f8a:	89 e0       	ldi	r24, 0x09	; 9
    2f8c:	97 e0       	ldi	r25, 0x07	; 7
    2f8e:	11 96       	adiw	r26, 0x01	; 1
    2f90:	8d 93       	st	X+, r24
    2f92:	9c 93       	st	X, r25
    2f94:	12 97       	sbiw	r26, 0x02	; 2
    2f96:	02 83       	std	Z+2, r16	; 0x02
    2f98:	13 82       	std	Z+3, r1	; 0x03
    2f9a:	84 82       	std	Z+4, r8	; 0x04
    2f9c:	95 82       	std	Z+5, r9	; 0x05
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	86 83       	std	Z+6, r24	; 0x06
    2fa4:	97 83       	std	Z+7, r25	; 0x07
    2fa6:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    2faa:	8d b7       	in	r24, 0x3d	; 61
    2fac:	9e b7       	in	r25, 0x3e	; 62
    2fae:	08 96       	adiw	r24, 0x08	; 8
    2fb0:	47 c0       	rjmp	.+142    	; 0x3040 <fetch_display_frame+0x44a>
            }
        }
    } else {
        //SREG = sreg;
        if (func_ID_X != 0)
    2fb2:	80 91 f4 24 	lds	r24, 0x24F4
    2fb6:	90 91 f5 24 	lds	r25, 0x24F5
    2fba:	89 2b       	or	r24, r25
    2fbc:	61 f0       	breq	.+24     	; 0x2fd6 <fetch_display_frame+0x3e0>
            Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);	//straigforward way to avoid fs reentrant
    2fbe:	40 91 9f 20 	lds	r20, 0x209F
    2fc2:	50 91 a0 20 	lds	r21, 0x20A0
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	88 e3       	ldi	r24, 0x38	; 56
    2fcc:	9b e0       	ldi	r25, 0x0B	; 11
    2fce:	24 e0       	ldi	r18, 0x04	; 4
    2fd0:	01 e0       	ldi	r16, 0x01	; 1
    2fd2:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
        
        if (func_ID_Y != 0)
    2fd6:	80 91 f6 24 	lds	r24, 0x24F6
    2fda:	90 91 f7 24 	lds	r25, 0x24F7
    2fde:	89 2b       	or	r24, r25
    2fe0:	61 f0       	breq	.+24     	; 0x2ffa <fetch_display_frame+0x404>
            Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);   //straigforward way to avoid fs reentrant
    2fe2:	40 91 a1 20 	lds	r20, 0x20A1
    2fe6:	50 91 a2 20 	lds	r21, 0x20A2
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	83 ef       	ldi	r24, 0xF3	; 243
    2ff0:	99 e0       	ldi	r25, 0x09	; 9
    2ff2:	25 e0       	ldi	r18, 0x05	; 5
    2ff4:	01 e0       	ldi	r16, 0x01	; 1
    2ff6:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
        
        if (quiet_mode_on == 0){
    2ffa:	80 91 f3 24 	lds	r24, 0x24F3
    2ffe:	88 23       	and	r24, r24
    3000:	09 f5       	brne	.+66     	; 0x3044 <fetch_display_frame+0x44e>
            xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    3002:	8f ed       	ldi	r24, 0xDF	; 223
    3004:	96 e0       	ldi	r25, 0x06	; 6
    3006:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    300a:	ad b7       	in	r26, 0x3d	; 61
    300c:	be b7       	in	r27, 0x3e	; 62
    300e:	1a 97       	sbiw	r26, 0x0a	; 10
    3010:	ad bf       	out	0x3d, r26	; 61
    3012:	be bf       	out	0x3e, r27	; 62
    3014:	ed b7       	in	r30, 0x3d	; 61
    3016:	fe b7       	in	r31, 0x3e	; 62
    3018:	31 96       	adiw	r30, 0x01	; 1
    301a:	8c eb       	ldi	r24, 0xBC	; 188
    301c:	96 e0       	ldi	r25, 0x06	; 6
    301e:	11 96       	adiw	r26, 0x01	; 1
    3020:	8d 93       	st	X+, r24
    3022:	9c 93       	st	X, r25
    3024:	12 97       	sbiw	r26, 0x02	; 2
    3026:	12 83       	std	Z+2, r17	; 0x02
    3028:	13 82       	std	Z+3, r1	; 0x03
    302a:	84 82       	std	Z+4, r8	; 0x04
    302c:	95 82       	std	Z+5, r9	; 0x05
    302e:	c6 82       	std	Z+6, r12	; 0x06
    3030:	d7 82       	std	Z+7, r13	; 0x07
    3032:	e0 86       	std	Z+8, r14	; 0x08
    3034:	f1 86       	std	Z+9, r15	; 0x09
    3036:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    303a:	8d b7       	in	r24, 0x3d	; 61
    303c:	9e b7       	in	r25, 0x3e	; 62
    303e:	0a 96       	adiw	r24, 0x0a	; 10
    3040:	8d bf       	out	0x3d, r24	; 61
    3042:	9e bf       	out	0x3e, r25	; 62
        }
    }
    
    //update analog out
    if (x_mode != 5){
    3044:	80 91 99 27 	lds	r24, 0x2799
    3048:	85 30       	cpi	r24, 0x05	; 5
    304a:	e9 f0       	breq	.+58     	; 0x3086 <fetch_display_frame+0x490>
        X_dac_val = (index_x*65535)/x_num;
    304c:	60 91 9b 27 	lds	r22, 0x279B
    3050:	70 91 9c 27 	lds	r23, 0x279C
        analogWrite(0, X_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	2f ef       	ldi	r18, 0xFF	; 255
    305a:	3f ef       	ldi	r19, 0xFF	; 255
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    3064:	20 91 05 28 	lds	r18, 0x2805
    3068:	30 91 06 28 	lds	r19, 0x2806
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__divmodsi4>
    3074:	55 e0       	ldi	r21, 0x05	; 5
    3076:	36 95       	lsr	r19
    3078:	27 95       	ror	r18
    307a:	5a 95       	dec	r21
    307c:	e1 f7       	brne	.-8      	; 0x3076 <fetch_display_frame+0x480>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	b9 01       	movw	r22, r18
    3082:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    }
    
    if (y_mode != 5){
    3086:	80 91 e3 27 	lds	r24, 0x27E3
    308a:	85 30       	cpi	r24, 0x05	; 5
    308c:	e9 f0       	breq	.+58     	; 0x30c8 <fetch_display_frame+0x4d2>
        Y_dac_val = (index_y*65535)/y_num;
    308e:	60 91 50 29 	lds	r22, 0x2950
    3092:	70 91 51 29 	lds	r23, 0x2951
        
        
        analogWrite(1, Y_dac_val>>5); // make it a value in the range 0 - 2047 (0 - 5V)
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	2f ef       	ldi	r18, 0xFF	; 255
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    30a6:	20 91 a6 25 	lds	r18, 0x25A6
    30aa:	30 91 a7 25 	lds	r19, 0x25A7
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__divmodsi4>
    30b6:	45 e0       	ldi	r20, 0x05	; 5
    30b8:	36 95       	lsr	r19
    30ba:	27 95       	ror	r18
    30bc:	4a 95       	dec	r20
    30be:	e1 f7       	brne	.-8      	; 0x30b8 <fetch_display_frame+0x4c2>
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	b9 01       	movw	r22, r18
    30c4:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    }
	
	  //also update the output lines for quadrant-type learning patterns
  if (Laser_active == 1)
    30c8:	80 91 e2 24 	lds	r24, 0x24E2
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	81 f4       	brne	.+32     	; 0x30f0 <fetch_display_frame+0x4fa>
  {
    if (laserPattern[index_x] == 0) 
    30d0:	e0 91 9b 27 	lds	r30, 0x279B
    30d4:	f0 91 9c 27 	lds	r31, 0x279C
    30d8:	ea 57       	subi	r30, 0x7A	; 122
    30da:	f9 4d       	sbci	r31, 0xD9	; 217
    30dc:	80 81       	ld	r24, Z
    30de:	88 23       	and	r24, r24
    30e0:	19 f4       	brne	.+6      	; 0x30e8 <fetch_display_frame+0x4f2>
      digitalWrite(2, LOW);  // turn on laser
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <fetch_display_frame+0x4f6>
    else
      digitalWrite(2, HIGH);   // turn off laser
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <digitalWrite>
  }  
	
    digitalWrite(1, LOW); // set line low at end of frame write
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <digitalWrite>
}
    30f8:	4d be       	out	0x3d, r4	; 61
    30fa:	5e be       	out	0x3e, r5	; 62
    30fc:	a6 96       	adiw	r28, 0x26	; 38
    30fe:	e0 e1       	ldi	r30, 0x10	; 16
    3100:	0c 94 c1 57 	jmp	0xaf82	; 0xaf82 <__epilogue_restores__+0x4>

00003104 <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    3104:	a0 e0       	ldi	r26, 0x00	; 0
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e8 e8       	ldi	r30, 0x88	; 136
    310a:	f8 e1       	ldi	r31, 0x18	; 24
    310c:	0c 94 ab 57 	jmp	0xaf56	; 0xaf56 <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    3116:	20 91 a6 25 	lds	r18, 0x25A6
    311a:	30 91 a7 25 	lds	r19, 0x25A7
    311e:	80 91 05 28 	lds	r24, 0x2805
    3122:	90 91 06 28 	lds	r25, 0x2806
    3126:	28 9f       	mul	r18, r24
    3128:	50 01       	movw	r10, r0
    312a:	29 9f       	mul	r18, r25
    312c:	b0 0c       	add	r11, r0
    312e:	38 9f       	mul	r19, r24
    3130:	b0 0c       	add	r11, r0
    3132:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    3134:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <timer_coarse_tic>
    3138:	c0 e0       	ldi	r28, 0x00	; 0
    313a:	d0 e0       	ldi	r29, 0x00	; 0
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <benchmark_pattern+0x42>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind);
    313e:	ce 01       	movw	r24, r28
    3140:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    3144:	21 96       	adiw	r28, 0x01	; 1
    3146:	ca 15       	cp	r28, r10
    3148:	db 05       	cpc	r29, r11
    314a:	c8 f3       	brcs	.-14     	; 0x313e <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind);
    
    bench_time = timer_coarse_toc();
    314c:	0e 94 0a 55 	call	0xaa14	; 0xaa14 <timer_coarse_toc>
    3150:	7b 01       	movw	r14, r22
    3152:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    3154:	8d b7       	in	r24, 0x3d	; 61
    3156:	9e b7       	in	r25, 0x3e	; 62
    3158:	08 97       	sbiw	r24, 0x08	; 8
    315a:	8d bf       	out	0x3d, r24	; 61
    315c:	9e bf       	out	0x3e, r25	; 62
    315e:	cd b6       	in	r12, 0x3d	; 61
    3160:	de b6       	in	r13, 0x3e	; 62
    3162:	08 94       	sec
    3164:	c1 1c       	adc	r12, r1
    3166:	d1 1c       	adc	r13, r1
    3168:	80 e9       	ldi	r24, 0x90	; 144
    316a:	95 e0       	ldi	r25, 0x05	; 5
    316c:	ed b7       	in	r30, 0x3d	; 61
    316e:	fe b7       	in	r31, 0x3e	; 62
    3170:	81 83       	std	Z+1, r24	; 0x01
    3172:	92 83       	std	Z+2, r25	; 0x02
    3174:	f6 01       	movw	r30, r12
    3176:	e2 82       	std	Z+2, r14	; 0x02
    3178:	f3 82       	std	Z+3, r15	; 0x03
    317a:	04 83       	std	Z+4, r16	; 0x04
    317c:	15 83       	std	Z+5, r17	; 0x05
    317e:	b5 01       	movw	r22, r10
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	28 ee       	ldi	r18, 0xE8	; 232
    3186:	33 e0       	ldi	r19, 0x03	; 3
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	50 e0       	ldi	r21, 0x00	; 0
    318c:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    3190:	a8 01       	movw	r20, r16
    3192:	97 01       	movw	r18, r14
    3194:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    3198:	f6 01       	movw	r30, r12
    319a:	26 83       	std	Z+6, r18	; 0x06
    319c:	37 83       	std	Z+7, r19	; 0x07
    319e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    31a2:	8d b7       	in	r24, 0x3d	; 61
    31a4:	9e b7       	in	r25, 0x3e	; 62
    31a6:	08 96       	adiw	r24, 0x08	; 8
    31a8:	8d bf       	out	0x3d, r24	; 61
    31aa:	9e bf       	out	0x3e, r25	; 62
}
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	ea e0       	ldi	r30, 0x0A	; 10
    31b2:	0c 94 c7 57 	jmp	0xaf8e	; 0xaf8e <__epilogue_restores__+0x10>

000031b6 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}



void set_pattern(uint8_t pat_num) {
    31b6:	a2 e0       	ldi	r26, 0x02	; 2
    31b8:	b2 e0       	ldi	r27, 0x02	; 2
    31ba:	e1 ee       	ldi	r30, 0xE1	; 225
    31bc:	f8 e1       	ldi	r31, 0x18	; 24
    31be:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x1c>
    31c2:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    31c4:	8a 30       	cpi	r24, 0x0A	; 10
    31c6:	80 f4       	brcc	.+32     	; 0x31e8 <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <set_pattern+0x14>
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <set_pattern+0x16>
    31cc:	ed b7       	in	r30, 0x3d	; 61
    31ce:	fe b7       	in	r31, 0x3e	; 62
    31d0:	31 96       	adiw	r30, 0x01	; 1
    31d2:	84 e0       	ldi	r24, 0x04	; 4
    31d4:	95 e2       	ldi	r25, 0x25	; 37
    31d6:	ad b7       	in	r26, 0x3d	; 61
    31d8:	be b7       	in	r27, 0x3e	; 62
    31da:	11 96       	adiw	r26, 0x01	; 1
    31dc:	8d 93       	st	X+, r24
    31de:	9c 93       	st	X, r25
    31e0:	12 97       	sbiw	r26, 0x02	; 2
    31e2:	85 e7       	ldi	r24, 0x75	; 117
    31e4:	90 e2       	ldi	r25, 0x20	; 32
    31e6:	1f c0       	rjmp	.+62     	; 0x3226 <set_pattern+0x70>
    31e8:	84 e0       	ldi	r24, 0x04	; 4
    31ea:	95 e2       	ldi	r25, 0x25	; 37
    else if (pat_num < 100)
    31ec:	14 36       	cpi	r17, 0x64	; 100
    31ee:	70 f4       	brcc	.+28     	; 0x320c <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <set_pattern+0x3c>
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <set_pattern+0x3e>
    31f4:	ed b7       	in	r30, 0x3d	; 61
    31f6:	fe b7       	in	r31, 0x3e	; 62
    31f8:	31 96       	adiw	r30, 0x01	; 1
    31fa:	ad b7       	in	r26, 0x3d	; 61
    31fc:	be b7       	in	r27, 0x3e	; 62
    31fe:	11 96       	adiw	r26, 0x01	; 1
    3200:	8d 93       	st	X+, r24
    3202:	9c 93       	st	X, r25
    3204:	12 97       	sbiw	r26, 0x02	; 2
    3206:	83 e8       	ldi	r24, 0x83	; 131
    3208:	90 e2       	ldi	r25, 0x20	; 32
    320a:	0d c0       	rjmp	.+26     	; 0x3226 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    320c:	00 d0       	rcall	.+0      	; 0x320e <set_pattern+0x58>
    320e:	00 d0       	rcall	.+0      	; 0x3210 <set_pattern+0x5a>
    3210:	ed b7       	in	r30, 0x3d	; 61
    3212:	fe b7       	in	r31, 0x3e	; 62
    3214:	31 96       	adiw	r30, 0x01	; 1
    3216:	ad b7       	in	r26, 0x3d	; 61
    3218:	be b7       	in	r27, 0x3e	; 62
    321a:	11 96       	adiw	r26, 0x01	; 1
    321c:	8d 93       	st	X+, r24
    321e:	9c 93       	st	X, r25
    3220:	12 97       	sbiw	r26, 0x02	; 2
    3222:	80 e9       	ldi	r24, 0x90	; 144
    3224:	90 e2       	ldi	r25, 0x20	; 32
    3226:	82 83       	std	Z+2, r24	; 0x02
    3228:	93 83       	std	Z+3, r25	; 0x03
    322a:	14 83       	std	Z+4, r17	; 0x04
    322c:	15 82       	std	Z+5, r1	; 0x05
    322e:	0e 94 03 5a 	call	0xb406	; 0xb406 <sprintf>
    3232:	8d b7       	in	r24, 0x3d	; 61
    3234:	9e b7       	in	r25, 0x3e	; 62
    3236:	06 96       	adiw	r24, 0x06	; 6
    3238:	8d bf       	out	0x3d, r24	; 61
    323a:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
    
    
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //straigforward way to avoid fs reentrant
    323c:	40 91 9f 20 	lds	r20, 0x209F
    3240:	50 91 a0 20 	lds	r21, 0x20A0
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	70 e0       	ldi	r23, 0x00	; 0
    3248:	88 e3       	ldi	r24, 0x38	; 56
    324a:	9b e0       	ldi	r25, 0x0B	; 11
    324c:	24 e0       	ldi	r18, 0x04	; 4
    324e:	00 e0       	ldi	r16, 0x00	; 0
    3250:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
    Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //straigforward way to avoid fs reentrant
    3254:	40 91 a1 20 	lds	r20, 0x20A1
    3258:	50 91 a2 20 	lds	r21, 0x20A2
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	83 ef       	ldi	r24, 0xF3	; 243
    3262:	99 e0       	ldi	r25, 0x09	; 9
    3264:	25 e0       	ldi	r18, 0x05	; 5
    3266:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
	
    res = f_close(&file1);
    326a:	82 e5       	ldi	r24, 0x52	; 82
    326c:	99 e2       	ldi	r25, 0x29	; 41
    326e:	0e 94 56 48 	call	0x90ac	; 0x90ac <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    3272:	82 e5       	ldi	r24, 0x52	; 82
    3274:	99 e2       	ldi	r25, 0x29	; 41
    3276:	64 e0       	ldi	r22, 0x04	; 4
    3278:	75 e2       	ldi	r23, 0x25	; 37
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
    if (res == FR_OK) {
    3280:	88 23       	and	r24, r24
    3282:	09 f0       	breq	.+2      	; 0x3286 <set_pattern+0xd0>
    3284:	cb c0       	rjmp	.+406    	; 0x341c <set_pattern+0x266>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    3286:	82 e5       	ldi	r24, 0x52	; 82
    3288:	99 e2       	ldi	r25, 0x29	; 41
    328a:	be 01       	movw	r22, r28
    328c:	6d 5f       	subi	r22, 0xFD	; 253
    328e:	7f 4f       	sbci	r23, 0xFF	; 255
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	52 e0       	ldi	r21, 0x02	; 2
    3294:	9e 01       	movw	r18, r28
    3296:	2f 5f       	subi	r18, 0xFF	; 255
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    329e:	88 23       	and	r24, r24
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <set_pattern+0xee>
    32a2:	b5 c0       	rjmp	.+362    	; 0x340e <set_pattern+0x258>
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	80 50       	subi	r24, 0x00	; 0
    32aa:	92 40       	sbci	r25, 0x02	; 2
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <set_pattern+0xfa>
    32ae:	af c0       	rjmp	.+350    	; 0x340e <set_pattern+0x258>
		    if (func_ID_X != 0)
    32b0:	80 91 f4 24 	lds	r24, 0x24F4
    32b4:	90 91 f5 24 	lds	r25, 0x24F5
    32b8:	89 2b       	or	r24, r25
    32ba:	61 f0       	breq	.+24     	; 0x32d4 <set_pattern+0x11e>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);  //straigforward way to avoid fs reentrant
    32bc:	40 91 9f 20 	lds	r20, 0x209F
    32c0:	50 91 a0 20 	lds	r21, 0x20A0
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	88 e3       	ldi	r24, 0x38	; 56
    32ca:	9b e0       	ldi	r25, 0x0B	; 11
    32cc:	24 e0       	ldi	r18, 0x04	; 4
    32ce:	01 e0       	ldi	r16, 0x01	; 1
    32d0:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
        
			if (func_ID_Y != 0)
    32d4:	80 91 f6 24 	lds	r24, 0x24F6
    32d8:	90 91 f7 24 	lds	r25, 0x24F7
    32dc:	89 2b       	or	r24, r25
    32de:	61 f0       	breq	.+24     	; 0x32f8 <set_pattern+0x142>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //straigforward way to avoid fs reentrant
    32e0:	40 91 a1 20 	lds	r20, 0x20A1
    32e4:	50 91 a2 20 	lds	r21, 0x20A2
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	83 ef       	ldi	r24, 0xF3	; 243
    32ee:	99 e0       	ldi	r25, 0x09	; 9
    32f0:	25 e0       	ldi	r18, 0x05	; 5
    32f2:	01 e0       	ldi	r16, 0x01	; 1
    32f4:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
			
            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	80 93 05 28 	sts	0x2805, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    32fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3300:	80 93 06 28 	sts	0x2806, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	80 93 a6 25 	sts	0x25A6, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    330a:	8e 81       	ldd	r24, Y+6	; 0x06
    330c:	80 93 a7 25 	sts	0x25A7, r24
            num_panels = pattDataBuff[4];
    3310:	8f 81       	ldd	r24, Y+7	; 0x07
    3312:	80 93 e4 24 	sts	0x24E4, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    3316:	98 85       	ldd	r25, Y+8	; 0x08
    3318:	90 93 17 27 	sts	0x2717, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    331c:	89 2f       	mov	r24, r25
    331e:	8b 50       	subi	r24, 0x0B	; 11
    3320:	84 30       	cpi	r24, 0x04	; 4
    3322:	48 f4       	brcc	.+18     	; 0x3336 <set_pattern+0x180>
                gs_value = gs_value - 10;
    3324:	9a 50       	subi	r25, 0x0A	; 10
    3326:	90 93 17 27 	sts	0x2717, r25
                row_compress = 1;
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	80 93 aa 25 	sts	0x25AA, r24
                bytes_per_panel_frame = gs_value;
    3330:	90 93 9a 27 	sts	0x279A, r25
    3334:	0b c0       	rjmp	.+22     	; 0x334c <set_pattern+0x196>
            }
            else {
                row_compress = 0;
    3336:	10 92 aa 25 	sts	0x25AA, r1
                bytes_per_panel_frame = gs_value * 8;
    333a:	89 2f       	mov	r24, r25
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	f3 e0       	ldi	r31, 0x03	; 3
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	fa 95       	dec	r31
    3346:	e1 f7       	brne	.-8      	; 0x3340 <set_pattern+0x18a>
    3348:	80 93 9a 27 	sts	0x279A, r24
            }
            index_x = index_y = 0;
    334c:	10 92 50 29 	sts	0x2950, r1
    3350:	10 92 51 29 	sts	0x2951, r1
    3354:	80 91 50 29 	lds	r24, 0x2950
    3358:	90 91 51 29 	lds	r25, 0x2951
    335c:	80 93 9b 27 	sts	0x279B, r24
    3360:	90 93 9c 27 	sts	0x279C, r25
            frame_num = 0;
    3364:	10 92 e5 24 	sts	0x24E5, r1
    3368:	10 92 e6 24 	sts	0x24E6, r1
            Stop = 1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    3372:	10 92 e0 24 	sts	0x24E0, r1
            if (quiet_mode_on == 0){
    3376:	80 91 f3 24 	lds	r24, 0x24F3
    337a:	88 23       	and	r24, r24
    337c:	09 f0       	breq	.+2      	; 0x3380 <set_pattern+0x1ca>
    337e:	40 c0       	rjmp	.+128    	; 0x3400 <set_pattern+0x24a>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    3380:	00 d0       	rcall	.+0      	; 0x3382 <set_pattern+0x1cc>
    3382:	0f 92       	push	r0
    3384:	ed b7       	in	r30, 0x3d	; 61
    3386:	fe b7       	in	r31, 0x3e	; 62
    3388:	31 96       	adiw	r30, 0x01	; 1
    338a:	87 ea       	ldi	r24, 0xA7	; 167
    338c:	96 e0       	ldi	r25, 0x06	; 6
    338e:	ad b7       	in	r26, 0x3d	; 61
    3390:	be b7       	in	r27, 0x3e	; 62
    3392:	11 96       	adiw	r26, 0x01	; 1
    3394:	8d 93       	st	X+, r24
    3396:	9c 93       	st	X, r25
    3398:	12 97       	sbiw	r26, 0x02	; 2
    339a:	12 83       	std	Z+2, r17	; 0x02
    339c:	13 82       	std	Z+3, r1	; 0x03
    339e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    33a2:	8d b7       	in	r24, 0x3d	; 61
    33a4:	9e b7       	in	r25, 0x3e	; 62
    33a6:	08 97       	sbiw	r24, 0x08	; 8
    33a8:	8d bf       	out	0x3d, r24	; 61
    33aa:	9e bf       	out	0x3e, r25	; 62
    33ac:	ed b7       	in	r30, 0x3d	; 61
    33ae:	fe b7       	in	r31, 0x3e	; 62
    33b0:	31 96       	adiw	r30, 0x01	; 1
    33b2:	84 e5       	ldi	r24, 0x54	; 84
    33b4:	96 e0       	ldi	r25, 0x06	; 6
    33b6:	ad b7       	in	r26, 0x3d	; 61
    33b8:	be b7       	in	r27, 0x3e	; 62
    33ba:	11 96       	adiw	r26, 0x01	; 1
    33bc:	8d 93       	st	X+, r24
    33be:	9c 93       	st	X, r25
    33c0:	12 97       	sbiw	r26, 0x02	; 2
    33c2:	80 91 05 28 	lds	r24, 0x2805
    33c6:	90 91 06 28 	lds	r25, 0x2806
    33ca:	82 83       	std	Z+2, r24	; 0x02
    33cc:	93 83       	std	Z+3, r25	; 0x03
    33ce:	80 91 a6 25 	lds	r24, 0x25A6
    33d2:	90 91 a7 25 	lds	r25, 0x25A7
    33d6:	84 83       	std	Z+4, r24	; 0x04
    33d8:	95 83       	std	Z+5, r25	; 0x05
    33da:	80 91 e4 24 	lds	r24, 0x24E4
    33de:	86 83       	std	Z+6, r24	; 0x06
    33e0:	17 82       	std	Z+7, r1	; 0x07
    33e2:	80 91 17 27 	lds	r24, 0x2717
    33e6:	80 87       	std	Z+8, r24	; 0x08
    33e8:	11 86       	std	Z+9, r1	; 0x09
    33ea:	80 91 aa 25 	lds	r24, 0x25AA
    33ee:	82 87       	std	Z+10, r24	; 0x0a
    33f0:	13 86       	std	Z+11, r1	; 0x0b
    33f2:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    33f6:	8d b7       	in	r24, 0x3d	; 61
    33f8:	9e b7       	in	r25, 0x3e	; 62
    33fa:	0c 96       	adiw	r24, 0x0c	; 12
    33fc:	8d bf       	out	0x3d, r24	; 61
    33fe:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num);
    3400:	80 91 e5 24 	lds	r24, 0x24E5
    3404:	90 91 e6 24 	lds	r25, 0x24E6
    3408:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <fetch_display_frame>
    340c:	0f c0       	rjmp	.+30     	; 0x342c <set_pattern+0x276>
        } else {
            if (quiet_mode_on == 0)
    340e:	80 91 f3 24 	lds	r24, 0x24F3
    3412:	88 23       	and	r24, r24
    3414:	59 f4       	brne	.+22     	; 0x342c <set_pattern+0x276>
                xputs(PSTR("Error reading in pattern file\n"));
    3416:	85 e3       	ldi	r24, 0x35	; 53
    3418:	96 e0       	ldi	r25, 0x06	; 6
    341a:	06 c0       	rjmp	.+12     	; 0x3428 <set_pattern+0x272>
        }
    } else {
        if (quiet_mode_on == 0)
    341c:	80 91 f3 24 	lds	r24, 0x24F3
    3420:	88 23       	and	r24, r24
    3422:	21 f4       	brne	.+8      	; 0x342c <set_pattern+0x276>
            xputs(PSTR("Error opening pattern file\n"));
    3424:	89 e1       	ldi	r24, 0x19	; 25
    3426:	96 e0       	ldi	r25, 0x06	; 6
    3428:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    }
}
    342c:	ce 5f       	subi	r28, 0xFE	; 254
    342e:	dd 4f       	sbci	r29, 0xFD	; 253
    3430:	e4 e0       	ldi	r30, 0x04	; 4
    3432:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x1c>

00003436 <handle_message_length_5>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    3436:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    3438:	80 81       	ld	r24, Z
    343a:	80 37       	cpi	r24, 0x70	; 112
    343c:	21 f0       	breq	.+8      	; 0x3446 <handle_message_length_5+0x10>
    343e:	81 37       	cpi	r24, 0x71	; 113
    3440:	09 f0       	breq	.+2      	; 0x3444 <handle_message_length_5+0xe>
    3442:	81 c0       	rjmp	.+258    	; 0x3546 <handle_message_length_5+0x110>
    3444:	73 c0       	rjmp	.+230    	; 0x352c <handle_message_length_5+0xf6>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    3446:	92 81       	ldd	r25, Z+2	; 0x02
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	21 81       	ldd	r18, Z+1	; 0x01
    344c:	82 0f       	add	r24, r18
    344e:	91 1d       	adc	r25, r1
    3450:	80 93 9b 27 	sts	0x279B, r24
    3454:	90 93 9c 27 	sts	0x279C, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    3458:	94 81       	ldd	r25, Z+4	; 0x04
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	23 81       	ldd	r18, Z+3	; 0x03
    345e:	82 0f       	add	r24, r18
    3460:	91 1d       	adc	r25, r1
    3462:	80 93 50 29 	sts	0x2950, r24
    3466:	90 93 51 29 	sts	0x2951, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    346a:	80 91 9b 27 	lds	r24, 0x279B
    346e:	90 91 9c 27 	lds	r25, 0x279C
    3472:	80 93 e6 26 	sts	0x26E6, r24
    3476:	90 93 e7 26 	sts	0x26E7, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    347a:	80 91 50 29 	lds	r24, 0x2950
    347e:	90 91 51 29 	lds	r25, 0x2951
    3482:	80 93 73 26 	sts	0x2673, r24
    3486:	90 93 74 26 	sts	0x2674, r25
            frame_num = index_y* x_num + index_x;
    348a:	20 91 50 29 	lds	r18, 0x2950
    348e:	30 91 51 29 	lds	r19, 0x2951
    3492:	40 91 9b 27 	lds	r20, 0x279B
    3496:	50 91 9c 27 	lds	r21, 0x279C
    349a:	80 91 05 28 	lds	r24, 0x2805
    349e:	90 91 06 28 	lds	r25, 0x2806
    34a2:	bc 01       	movw	r22, r24
    34a4:	26 9f       	mul	r18, r22
    34a6:	c0 01       	movw	r24, r0
    34a8:	27 9f       	mul	r18, r23
    34aa:	90 0d       	add	r25, r0
    34ac:	36 9f       	mul	r19, r22
    34ae:	90 0d       	add	r25, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	84 0f       	add	r24, r20
    34b4:	95 1f       	adc	r25, r21
    34b6:	80 93 e5 24 	sts	0x24E5, r24
    34ba:	90 93 e6 24 	sts	0x24E6, r25
            display_flag = 0;  //clear the display flag
    34be:	10 92 e0 24 	sts	0x24E0, r1
            if (quiet_mode_on == 0)
    34c2:	80 91 f3 24 	lds	r24, 0x24F3
    34c6:	88 23       	and	r24, r24
    34c8:	51 f5       	brne	.+84     	; 0x351e <handle_message_length_5+0xe8>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    34ca:	20 91 9b 27 	lds	r18, 0x279B
    34ce:	30 91 9c 27 	lds	r19, 0x279C
    34d2:	40 91 50 29 	lds	r20, 0x2950
    34d6:	50 91 51 29 	lds	r21, 0x2951
    34da:	60 91 e5 24 	lds	r22, 0x24E5
    34de:	70 91 e6 24 	lds	r23, 0x24E6
    34e2:	8d b7       	in	r24, 0x3d	; 61
    34e4:	9e b7       	in	r25, 0x3e	; 62
    34e6:	08 97       	sbiw	r24, 0x08	; 8
    34e8:	8d bf       	out	0x3d, r24	; 61
    34ea:	9e bf       	out	0x3e, r25	; 62
    34ec:	ed b7       	in	r30, 0x3d	; 61
    34ee:	fe b7       	in	r31, 0x3e	; 62
    34f0:	31 96       	adiw	r30, 0x01	; 1
    34f2:	84 e7       	ldi	r24, 0x74	; 116
    34f4:	97 e0       	ldi	r25, 0x07	; 7
    34f6:	ad b7       	in	r26, 0x3d	; 61
    34f8:	be b7       	in	r27, 0x3e	; 62
    34fa:	11 96       	adiw	r26, 0x01	; 1
    34fc:	8d 93       	st	X+, r24
    34fe:	9c 93       	st	X, r25
    3500:	12 97       	sbiw	r26, 0x02	; 2
    3502:	22 83       	std	Z+2, r18	; 0x02
    3504:	33 83       	std	Z+3, r19	; 0x03
    3506:	44 83       	std	Z+4, r20	; 0x04
    3508:	55 83       	std	Z+5, r21	; 0x05
    350a:	66 83       	std	Z+6, r22	; 0x06
    350c:	77 83       	std	Z+7, r23	; 0x07
    350e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    3512:	6d b7       	in	r22, 0x3d	; 61
    3514:	7e b7       	in	r23, 0x3e	; 62
    3516:	68 5f       	subi	r22, 0xF8	; 248
    3518:	7f 4f       	sbci	r23, 0xFF	; 255
    351a:	6d bf       	out	0x3d, r22	; 61
    351c:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num);
    351e:	80 91 e5 24 	lds	r24, 0x24E5
    3522:	90 91 e6 24 	lds	r25, 0x24E6
    3526:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <fetch_display_frame>
    352a:	08 95       	ret
            break;
            
        case 0x71:
            //'send_gain_bias', all of these are signed byte values
            gain_x = msg_buffer[1];
    352c:	81 81       	ldd	r24, Z+1	; 0x01
    352e:	80 93 e4 27 	sts	0x27E4, r24
            bias_x = msg_buffer[2];
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	80 93 96 25 	sts	0x2596, r24
            gain_y = msg_buffer[3];
    3538:	83 81       	ldd	r24, Z+3	; 0x03
    353a:	80 93 9d 27 	sts	0x279D, r24
            bias_y = msg_buffer[4];
    353e:	84 81       	ldd	r24, Z+4	; 0x04
    3540:	80 93 b4 2b 	sts	0x2BB4, r24
    3544:	08 95       	ret
            break;
            
            
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	68 e0       	ldi	r22, 0x08	; 8
    354a:	49 ed       	ldi	r20, 0xD9	; 217
    354c:	50 e2       	ldi	r21, 0x20	; 32
    354e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    3552:	08 95       	ret

00003554 <handle_message_length_2>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    3554:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    3556:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    3558:	80 81       	ld	r24, Z
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	fc 01       	movw	r30, r24
    355e:	31 97       	sbiw	r30, 0x01	; 1
    3560:	e9 30       	cpi	r30, 0x09	; 9
    3562:	f1 05       	cpc	r31, r1
    3564:	78 f5       	brcc	.+94     	; 0x35c4 <handle_message_length_2+0x70>
    3566:	e6 50       	subi	r30, 0x06	; 6
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	0c 94 da 57 	jmp	0xafb4	; 0xafb4 <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    356e:	82 2f       	mov	r24, r18
    3570:	62 e0       	ldi	r22, 0x02	; 2
    3572:	49 ef       	ldi	r20, 0xF9	; 249
    3574:	50 e2       	ldi	r21, 0x20	; 32
    3576:	2a c0       	rjmp	.+84     	; 0x35cc <handle_message_length_2+0x78>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    3578:	82 2f       	mov	r24, r18
    357a:	62 e0       	ldi	r22, 0x02	; 2
    357c:	4b ef       	ldi	r20, 0xFB	; 251
    357e:	50 e2       	ldi	r21, 0x20	; 32
    3580:	25 c0       	rjmp	.+74     	; 0x35cc <handle_message_length_2+0x78>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    3582:	82 2f       	mov	r24, r18
    3584:	0e 94 db 18 	call	0x31b6	; 0x31b6 <set_pattern>
    3588:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    358a:	82 2f       	mov	r24, r18
    358c:	0e 94 19 22 	call	0x4432	; 0x4432 <test_ADC>
    3590:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    3592:	82 2f       	mov	r24, r18
    3594:	0e 94 bd 21 	call	0x437a	; 0x437a <test_DIO>
    3598:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    359a:	82 2f       	mov	r24, r18
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	80 93 a3 20 	sts	0x20A3, r24
    35a6:	90 93 a4 20 	sts	0x20A4, r25
    35aa:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    35ac:	82 2f       	mov	r24, r18
    35ae:	0e 94 77 28 	call	0x50ee	; 0x50ee <flash_panel>
    35b2:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    35b4:	82 2f       	mov	r24, r18
    35b6:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <eeprom_panel>
    35ba:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    35bc:	82 2f       	mov	r24, r18
    35be:	0e 94 26 10 	call	0x204c	; 0x204c <set_hwConfig>
    35c2:	08 95       	ret
            break;	
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	68 e0       	ldi	r22, 0x08	; 8
    35c8:	49 ec       	ldi	r20, 0xC9	; 201
    35ca:	50 e2       	ldi	r21, 0x20	; 32
    35cc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    35d0:	08 95       	ret

000035d2 <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    35d2:	a2 e0       	ldi	r26, 0x02	; 2
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ef ee       	ldi	r30, 0xEF	; 239
    35d8:	fa e1       	ldi	r31, 0x1A	; 26
    35da:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    35de:	fc 01       	movw	r30, r24
    uint8_t CMD[2];
    uint8_t i;
    
    switch(msg_buffer[0]) {
    35e0:	e0 81       	ld	r30, Z
    35e2:	e5 34       	cpi	r30, 0x45	; 69
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <handle_message_length_1+0x16>
    35e6:	7a c1       	rjmp	.+756    	; 0x38dc <handle_message_length_1+0x30a>
    35e8:	e6 34       	cpi	r30, 0x46	; 70
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <handle_message_length_1+0x1c>
    35ec:	58 c0       	rjmp	.+176    	; 0x369e <handle_message_length_1+0xcc>
    35ee:	e9 31       	cpi	r30, 0x19	; 25
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <handle_message_length_1+0x22>
    35f2:	20 c2       	rjmp	.+1088   	; 0x3a34 <handle_message_length_1+0x462>
    35f4:	ea 31       	cpi	r30, 0x1A	; 26
    35f6:	40 f5       	brcc	.+80     	; 0x3648 <handle_message_length_1+0x76>
    35f8:	e3 31       	cpi	r30, 0x13	; 19
    35fa:	09 f4       	brne	.+2      	; 0x35fe <handle_message_length_1+0x2c>
    35fc:	eb c1       	rjmp	.+982    	; 0x39d4 <handle_message_length_1+0x402>
    35fe:	e4 31       	cpi	r30, 0x14	; 20
    3600:	80 f4       	brcc	.+32     	; 0x3622 <handle_message_length_1+0x50>
    3602:	e0 31       	cpi	r30, 0x10	; 16
    3604:	09 f4       	brne	.+2      	; 0x3608 <handle_message_length_1+0x36>
    3606:	d7 c1       	rjmp	.+942    	; 0x39b6 <handle_message_length_1+0x3e4>
    3608:	e1 31       	cpi	r30, 0x11	; 17
    360a:	20 f4       	brcc	.+8      	; 0x3614 <handle_message_length_1+0x42>
    360c:	ee 23       	and	r30, r30
    360e:	09 f4       	brne	.+2      	; 0x3612 <handle_message_length_1+0x40>
    3610:	47 c1       	rjmp	.+654    	; 0x38a0 <handle_message_length_1+0x2ce>
    3612:	40 c2       	rjmp	.+1152   	; 0x3a94 <handle_message_length_1+0x4c2>
    3614:	e1 31       	cpi	r30, 0x11	; 17
    3616:	09 f4       	brne	.+2      	; 0x361a <handle_message_length_1+0x48>
    3618:	d2 c1       	rjmp	.+932    	; 0x39be <handle_message_length_1+0x3ec>
    361a:	e2 31       	cpi	r30, 0x12	; 18
    361c:	09 f0       	breq	.+2      	; 0x3620 <handle_message_length_1+0x4e>
    361e:	3a c2       	rjmp	.+1140   	; 0x3a94 <handle_message_length_1+0x4c2>
    3620:	d5 c1       	rjmp	.+938    	; 0x39cc <handle_message_length_1+0x3fa>
    3622:	e6 31       	cpi	r30, 0x16	; 22
    3624:	09 f4       	brne	.+2      	; 0x3628 <handle_message_length_1+0x56>
    3626:	e7 c1       	rjmp	.+974    	; 0x39f6 <handle_message_length_1+0x424>
    3628:	e7 31       	cpi	r30, 0x17	; 23
    362a:	38 f4       	brcc	.+14     	; 0x363a <handle_message_length_1+0x68>
    362c:	e4 31       	cpi	r30, 0x14	; 20
    362e:	09 f4       	brne	.+2      	; 0x3632 <handle_message_length_1+0x60>
    3630:	d4 c1       	rjmp	.+936    	; 0x39da <handle_message_length_1+0x408>
    3632:	e5 31       	cpi	r30, 0x15	; 21
    3634:	09 f0       	breq	.+2      	; 0x3638 <handle_message_length_1+0x66>
    3636:	2e c2       	rjmp	.+1116   	; 0x3a94 <handle_message_length_1+0x4c2>
    3638:	d3 c1       	rjmp	.+934    	; 0x39e0 <handle_message_length_1+0x40e>
    363a:	e7 31       	cpi	r30, 0x17	; 23
    363c:	09 f4       	brne	.+2      	; 0x3640 <handle_message_length_1+0x6e>
    363e:	f3 c1       	rjmp	.+998    	; 0x3a26 <handle_message_length_1+0x454>
    3640:	e8 31       	cpi	r30, 0x18	; 24
    3642:	09 f0       	breq	.+2      	; 0x3646 <handle_message_length_1+0x74>
    3644:	27 c2       	rjmp	.+1102   	; 0x3a94 <handle_message_length_1+0x4c2>
    3646:	f3 c1       	rjmp	.+998    	; 0x3a2e <handle_message_length_1+0x45c>
    3648:	e5 33       	cpi	r30, 0x35	; 53
    364a:	09 f4       	brne	.+2      	; 0x364e <handle_message_length_1+0x7c>
    364c:	f5 c0       	rjmp	.+490    	; 0x3838 <handle_message_length_1+0x266>
    364e:	e6 33       	cpi	r30, 0x36	; 54
    3650:	98 f4       	brcc	.+38     	; 0x3678 <handle_message_length_1+0xa6>
    3652:	e2 32       	cpi	r30, 0x22	; 34
    3654:	09 f4       	brne	.+2      	; 0x3658 <handle_message_length_1+0x86>
    3656:	0c c2       	rjmp	.+1048   	; 0x3a70 <handle_message_length_1+0x49e>
    3658:	e3 32       	cpi	r30, 0x23	; 35
    365a:	38 f4       	brcc	.+14     	; 0x366a <handle_message_length_1+0x98>
    365c:	e0 32       	cpi	r30, 0x20	; 32
    365e:	09 f4       	brne	.+2      	; 0x3662 <handle_message_length_1+0x90>
    3660:	73 c0       	rjmp	.+230    	; 0x3748 <handle_message_length_1+0x176>
    3662:	e1 32       	cpi	r30, 0x21	; 33
    3664:	09 f0       	breq	.+2      	; 0x3668 <handle_message_length_1+0x96>
    3666:	16 c2       	rjmp	.+1068   	; 0x3a94 <handle_message_length_1+0x4c2>
    3668:	f9 c1       	rjmp	.+1010   	; 0x3a5c <handle_message_length_1+0x48a>
    366a:	e5 32       	cpi	r30, 0x25	; 37
    366c:	09 f4       	brne	.+2      	; 0x3670 <handle_message_length_1+0x9e>
    366e:	ab c0       	rjmp	.+342    	; 0x37c6 <handle_message_length_1+0x1f4>
    3670:	e0 33       	cpi	r30, 0x30	; 48
    3672:	09 f0       	breq	.+2      	; 0x3676 <handle_message_length_1+0xa4>
    3674:	0f c2       	rjmp	.+1054   	; 0x3a94 <handle_message_length_1+0x4c2>
    3676:	87 c0       	rjmp	.+270    	; 0x3786 <handle_message_length_1+0x1b4>
    3678:	e2 34       	cpi	r30, 0x42	; 66
    367a:	09 f4       	brne	.+2      	; 0x367e <handle_message_length_1+0xac>
    367c:	20 c1       	rjmp	.+576    	; 0x38be <handle_message_length_1+0x2ec>
    367e:	e3 34       	cpi	r30, 0x43	; 67
    3680:	38 f4       	brcc	.+14     	; 0x3690 <handle_message_length_1+0xbe>
    3682:	e0 34       	cpi	r30, 0x40	; 64
    3684:	09 f4       	brne	.+2      	; 0x3688 <handle_message_length_1+0xb6>
    3686:	11 c1       	rjmp	.+546    	; 0x38aa <handle_message_length_1+0x2d8>
    3688:	e1 34       	cpi	r30, 0x41	; 65
    368a:	09 f0       	breq	.+2      	; 0x368e <handle_message_length_1+0xbc>
    368c:	03 c2       	rjmp	.+1030   	; 0x3a94 <handle_message_length_1+0x4c2>
    368e:	12 c1       	rjmp	.+548    	; 0x38b4 <handle_message_length_1+0x2e2>
    3690:	e3 34       	cpi	r30, 0x43	; 67
    3692:	09 f4       	brne	.+2      	; 0x3696 <handle_message_length_1+0xc4>
    3694:	19 c1       	rjmp	.+562    	; 0x38c8 <handle_message_length_1+0x2f6>
    3696:	e4 34       	cpi	r30, 0x44	; 68
    3698:	09 f0       	breq	.+2      	; 0x369c <handle_message_length_1+0xca>
    369a:	fc c1       	rjmp	.+1016   	; 0x3a94 <handle_message_length_1+0x4c2>
    369c:	1a c1       	rjmp	.+564    	; 0x38d2 <handle_message_length_1+0x300>
    369e:	e5 39       	cpi	r30, 0x95	; 149
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <handle_message_length_1+0xd2>
    36a2:	52 c1       	rjmp	.+676    	; 0x3948 <handle_message_length_1+0x376>
    36a4:	e6 39       	cpi	r30, 0x96	; 150
    36a6:	28 f5       	brcc	.+74     	; 0x36f2 <handle_message_length_1+0x120>
    36a8:	e0 37       	cpi	r30, 0x70	; 112
    36aa:	09 f4       	brne	.+2      	; 0x36ae <handle_message_length_1+0xdc>
    36ac:	31 c1       	rjmp	.+610    	; 0x3910 <handle_message_length_1+0x33e>
    36ae:	e1 37       	cpi	r30, 0x71	; 113
    36b0:	68 f4       	brcc	.+26     	; 0x36cc <handle_message_length_1+0xfa>
    36b2:	e7 34       	cpi	r30, 0x47	; 71
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <handle_message_length_1+0xe6>
    36b6:	1c c1       	rjmp	.+568    	; 0x38f0 <handle_message_length_1+0x31e>
    36b8:	e7 34       	cpi	r30, 0x47	; 71
    36ba:	08 f4       	brcc	.+2      	; 0x36be <handle_message_length_1+0xec>
    36bc:	14 c1       	rjmp	.+552    	; 0x38e6 <handle_message_length_1+0x314>
    36be:	e0 35       	cpi	r30, 0x50	; 80
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <handle_message_length_1+0xf2>
    36c2:	20 c1       	rjmp	.+576    	; 0x3904 <handle_message_length_1+0x332>
    36c4:	e0 36       	cpi	r30, 0x60	; 96
    36c6:	09 f0       	breq	.+2      	; 0x36ca <handle_message_length_1+0xf8>
    36c8:	e5 c1       	rjmp	.+970    	; 0x3a94 <handle_message_length_1+0x4c2>
    36ca:	1f c1       	rjmp	.+574    	; 0x390a <handle_message_length_1+0x338>
    36cc:	e2 39       	cpi	r30, 0x92	; 146
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <handle_message_length_1+0x100>
    36d0:	2c c1       	rjmp	.+600    	; 0x392a <handle_message_length_1+0x358>
    36d2:	e3 39       	cpi	r30, 0x93	; 147
    36d4:	38 f4       	brcc	.+14     	; 0x36e4 <handle_message_length_1+0x112>
    36d6:	e0 39       	cpi	r30, 0x90	; 144
    36d8:	09 f4       	brne	.+2      	; 0x36dc <handle_message_length_1+0x10a>
    36da:	1d c1       	rjmp	.+570    	; 0x3916 <handle_message_length_1+0x344>
    36dc:	e1 39       	cpi	r30, 0x91	; 145
    36de:	09 f0       	breq	.+2      	; 0x36e2 <handle_message_length_1+0x110>
    36e0:	d9 c1       	rjmp	.+946    	; 0x3a94 <handle_message_length_1+0x4c2>
    36e2:	1e c1       	rjmp	.+572    	; 0x3920 <handle_message_length_1+0x34e>
    36e4:	e3 39       	cpi	r30, 0x93	; 147
    36e6:	09 f4       	brne	.+2      	; 0x36ea <handle_message_length_1+0x118>
    36e8:	25 c1       	rjmp	.+586    	; 0x3934 <handle_message_length_1+0x362>
    36ea:	e4 39       	cpi	r30, 0x94	; 148
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <handle_message_length_1+0x11e>
    36ee:	d2 c1       	rjmp	.+932    	; 0x3a94 <handle_message_length_1+0x4c2>
    36f0:	26 c1       	rjmp	.+588    	; 0x393e <handle_message_length_1+0x36c>
    36f2:	eb 39       	cpi	r30, 0x9B	; 155
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <handle_message_length_1+0x126>
    36f6:	46 c1       	rjmp	.+652    	; 0x3984 <handle_message_length_1+0x3b2>
    36f8:	ec 39       	cpi	r30, 0x9C	; 156
    36fa:	98 f4       	brcc	.+38     	; 0x3722 <handle_message_length_1+0x150>
    36fc:	e8 39       	cpi	r30, 0x98	; 152
    36fe:	09 f4       	brne	.+2      	; 0x3702 <handle_message_length_1+0x130>
    3700:	32 c1       	rjmp	.+612    	; 0x3966 <handle_message_length_1+0x394>
    3702:	e9 39       	cpi	r30, 0x99	; 153
    3704:	38 f4       	brcc	.+14     	; 0x3714 <handle_message_length_1+0x142>
    3706:	e6 39       	cpi	r30, 0x96	; 150
    3708:	09 f4       	brne	.+2      	; 0x370c <handle_message_length_1+0x13a>
    370a:	23 c1       	rjmp	.+582    	; 0x3952 <handle_message_length_1+0x380>
    370c:	e7 39       	cpi	r30, 0x97	; 151
    370e:	09 f0       	breq	.+2      	; 0x3712 <handle_message_length_1+0x140>
    3710:	c1 c1       	rjmp	.+898    	; 0x3a94 <handle_message_length_1+0x4c2>
    3712:	24 c1       	rjmp	.+584    	; 0x395c <handle_message_length_1+0x38a>
    3714:	e9 39       	cpi	r30, 0x99	; 153
    3716:	09 f4       	brne	.+2      	; 0x371a <handle_message_length_1+0x148>
    3718:	2b c1       	rjmp	.+598    	; 0x3970 <handle_message_length_1+0x39e>
    371a:	ea 39       	cpi	r30, 0x9A	; 154
    371c:	09 f0       	breq	.+2      	; 0x3720 <handle_message_length_1+0x14e>
    371e:	ba c1       	rjmp	.+884    	; 0x3a94 <handle_message_length_1+0x4c2>
    3720:	2c c1       	rjmp	.+600    	; 0x397a <handle_message_length_1+0x3a8>
    3722:	ee 39       	cpi	r30, 0x9E	; 158
    3724:	09 f4       	brne	.+2      	; 0x3728 <handle_message_length_1+0x156>
    3726:	3d c1       	rjmp	.+634    	; 0x39a2 <handle_message_length_1+0x3d0>
    3728:	ef 39       	cpi	r30, 0x9F	; 159
    372a:	38 f4       	brcc	.+14     	; 0x373a <handle_message_length_1+0x168>
    372c:	ec 39       	cpi	r30, 0x9C	; 156
    372e:	09 f4       	brne	.+2      	; 0x3732 <handle_message_length_1+0x160>
    3730:	2e c1       	rjmp	.+604    	; 0x398e <handle_message_length_1+0x3bc>
    3732:	ed 39       	cpi	r30, 0x9D	; 157
    3734:	09 f0       	breq	.+2      	; 0x3738 <handle_message_length_1+0x166>
    3736:	ae c1       	rjmp	.+860    	; 0x3a94 <handle_message_length_1+0x4c2>
    3738:	2f c1       	rjmp	.+606    	; 0x3998 <handle_message_length_1+0x3c6>
    373a:	ef 39       	cpi	r30, 0x9F	; 159
    373c:	09 f4       	brne	.+2      	; 0x3740 <handle_message_length_1+0x16e>
    373e:	36 c1       	rjmp	.+620    	; 0x39ac <handle_message_length_1+0x3da>
    3740:	ef 3f       	cpi	r30, 0xFF	; 255
    3742:	09 f0       	breq	.+2      	; 0x3746 <handle_message_length_1+0x174>
    3744:	a7 c1       	rjmp	.+846    	; 0x3a94 <handle_message_length_1+0x4c2>
    3746:	d9 c0       	rjmp	.+434    	; 0x38fa <handle_message_length_1+0x328>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
            function_counter_x = 0;
    3748:	10 92 e7 24 	sts	0x24E7, r1
    374c:	10 92 e8 24 	sts	0x24E8, r1
            function_counter_y = 0;
    3750:	10 92 e9 24 	sts	0x24E9, r1
    3754:	10 92 ea 24 	sts	0x24EA, r1
            Stop = 0;
    3758:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    375c:	10 92 e0 24 	sts	0x24E0, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3760:	88 eb       	ldi	r24, 0xB8	; 184
    3762:	90 e1       	ldi	r25, 0x10	; 16
    3764:	4e e4       	ldi	r20, 0x4E	; 78
    3766:	50 e0       	ldi	r21, 0x00	; 0
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	21 e0       	ldi	r18, 0x01	; 1
    376e:	01 e0       	ldi	r16, 0x01	; 1
    3770:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    3774:	88 e0       	ldi	r24, 0x08	; 8
    3776:	98 e0       	ldi	r25, 0x08	; 8
    3778:	4e e4       	ldi	r20, 0x4E	; 78
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	22 e0       	ldi	r18, 0x02	; 2
    3782:	00 e0       	ldi	r16, 0x00	; 0
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <handle_message_length_1+0x1dc>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
            break;                        //by the Update_display interupt.
            
        case 0x30: //stop display
            Stop = 1;
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    378c:	88 eb       	ldi	r24, 0xB8	; 184
    378e:	90 e1       	ldi	r25, 0x10	; 16
    3790:	4e e4       	ldi	r20, 0x4E	; 78
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	21 e0       	ldi	r18, 0x01	; 1
    379a:	00 e0       	ldi	r16, 0x00	; 0
    379c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    37a0:	88 e0       	ldi	r24, 0x08	; 8
    37a2:	98 e0       	ldi	r25, 0x08	; 8
    37a4:	4e e4       	ldi	r20, 0x4E	; 78
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	70 e0       	ldi	r23, 0x00	; 0
    37ac:	22 e0       	ldi	r18, 0x02	; 2
    37ae:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    37b2:	80 e4       	ldi	r24, 0x40	; 64
    37b4:	98 e0       	ldi	r25, 0x08	; 8
    37b6:	4e e4       	ldi	r20, 0x4E	; 78
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	23 e0       	ldi	r18, 0x03	; 3
    37c0:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
    37c4:	6d c1       	rjmp	.+730    	; 0x3aa0 <handle_message_length_1+0x4ce>
            
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
            function_counter_x = 0;
    37c6:	10 92 e7 24 	sts	0x24E7, r1
    37ca:	10 92 e8 24 	sts	0x24E8, r1
            function_counter_y = 0;
    37ce:	10 92 e9 24 	sts	0x24E9, r1
    37d2:	10 92 ea 24 	sts	0x24EA, r1
            Stop = 0;
    37d6:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    37da:	10 92 e0 24 	sts	0x24E0, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    37de:	88 eb       	ldi	r24, 0xB8	; 184
    37e0:	90 e1       	ldi	r25, 0x10	; 16
    37e2:	4e e4       	ldi	r20, 0x4E	; 78
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	70 e0       	ldi	r23, 0x00	; 0
    37ea:	21 e0       	ldi	r18, 0x01	; 1
    37ec:	01 e0       	ldi	r16, 0x01	; 1
    37ee:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    37f2:	88 e0       	ldi	r24, 0x08	; 8
    37f4:	98 e0       	ldi	r25, 0x08	; 8
    37f6:	4e e4       	ldi	r20, 0x4E	; 78
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	22 e0       	ldi	r18, 0x02	; 2
    3800:	00 e0       	ldi	r16, 0x00	; 0
    3802:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3806:	80 e4       	ldi	r24, 0x40	; 64
    3808:	98 e0       	ldi	r25, 0x08	; 8
    380a:	4e e4       	ldi	r20, 0x4E	; 78
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	23 e0       	ldi	r18, 0x03	; 3
    3814:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    3818:	60 91 a3 20 	lds	r22, 0x20A3
    381c:	70 91 a4 20 	lds	r23, 0x20A4
    3820:	82 e1       	ldi	r24, 0x12	; 18
    3822:	9a e7       	ldi	r25, 0x7A	; 122
    3824:	0e 94 3f 57 	call	0xae7e	; 0xae7e <__udivmodhi4>
    3828:	ab 01       	movw	r20, r22
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	70 e0       	ldi	r23, 0x00	; 0
    382e:	84 eb       	ldi	r24, 0xB4	; 180
    3830:	90 e1       	ldi	r25, 0x10	; 16
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	01 e0       	ldi	r16, 0x01	; 1
    3836:	c4 cf       	rjmp	.-120    	; 0x37c0 <handle_message_length_1+0x1ee>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    383e:	88 eb       	ldi	r24, 0xB8	; 184
    3840:	90 e1       	ldi	r25, 0x10	; 16
    3842:	4e e4       	ldi	r20, 0x4E	; 78
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	60 e0       	ldi	r22, 0x00	; 0
    3848:	70 e0       	ldi	r23, 0x00	; 0
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	00 e0       	ldi	r16, 0x00	; 0
    384e:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3852:	88 e0       	ldi	r24, 0x08	; 8
    3854:	98 e0       	ldi	r25, 0x08	; 8
    3856:	4e e4       	ldi	r20, 0x4E	; 78
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	60 e0       	ldi	r22, 0x00	; 0
    385c:	70 e0       	ldi	r23, 0x00	; 0
    385e:	22 e0       	ldi	r18, 0x02	; 2
    3860:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3864:	80 e4       	ldi	r24, 0x40	; 64
    3866:	98 e0       	ldi	r25, 0x08	; 8
    3868:	4e e4       	ldi	r20, 0x4E	; 78
    386a:	50 e0       	ldi	r21, 0x00	; 0
    386c:	60 e0       	ldi	r22, 0x00	; 0
    386e:	70 e0       	ldi	r23, 0x00	; 0
    3870:	23 e0       	ldi	r18, 0x03	; 3
    3872:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    3876:	20 91 a3 20 	lds	r18, 0x20A3
    387a:	30 91 a4 20 	lds	r19, 0x20A4
    387e:	40 e0       	ldi	r20, 0x00	; 0
    3880:	50 e0       	ldi	r21, 0x00	; 0
    3882:	62 e1       	ldi	r22, 0x12	; 18
    3884:	7a e7       	ldi	r23, 0x7A	; 122
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__divmodsi4>
    388e:	84 eb       	ldi	r24, 0xB4	; 180
    3890:	90 e1       	ldi	r25, 0x10	; 16
    3892:	ba 01       	movw	r22, r20
    3894:	a9 01       	movw	r20, r18
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <Reg_Handler>
			digitalWrite(3,LOW);    //set the output to low
    389c:	83 e0       	ldi	r24, 0x03	; 3
    389e:	92 c0       	rjmp	.+292    	; 0x39c4 <handle_message_length_1+0x3f2>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	68 e0       	ldi	r22, 0x08	; 8
    38a4:	40 e1       	ldi	r20, 0x10	; 16
    38a6:	55 e2       	ldi	r21, 0x25	; 37
    38a8:	f9 c0       	rjmp	.+498    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	68 e1       	ldi	r22, 0x18	; 24
    38ae:	4d ef       	ldi	r20, 0xFD	; 253
    38b0:	50 e2       	ldi	r21, 0x20	; 32
    38b2:	f4 c0       	rjmp	.+488    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	68 e1       	ldi	r22, 0x18	; 24
    38b8:	45 e1       	ldi	r20, 0x15	; 21
    38ba:	51 e2       	ldi	r21, 0x21	; 33
    38bc:	ef c0       	rjmp	.+478    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	68 e1       	ldi	r22, 0x18	; 24
    38c2:	4d e2       	ldi	r20, 0x2D	; 45
    38c4:	51 e2       	ldi	r21, 0x21	; 33
    38c6:	ea c0       	rjmp	.+468    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	68 e1       	ldi	r22, 0x18	; 24
    38cc:	45 e4       	ldi	r20, 0x45	; 69
    38ce:	51 e2       	ldi	r21, 0x21	; 33
    38d0:	e5 c0       	rjmp	.+458    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	68 e1       	ldi	r22, 0x18	; 24
    38d6:	4d e5       	ldi	r20, 0x5D	; 93
    38d8:	51 e2       	ldi	r21, 0x21	; 33
    38da:	e0 c0       	rjmp	.+448    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	68 e1       	ldi	r22, 0x18	; 24
    38e0:	45 e7       	ldi	r20, 0x75	; 117
    38e2:	51 e2       	ldi	r21, 0x21	; 33
    38e4:	db c0       	rjmp	.+438    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	68 e1       	ldi	r22, 0x18	; 24
    38ea:	4d e8       	ldi	r20, 0x8D	; 141
    38ec:	51 e2       	ldi	r21, 0x21	; 33
    38ee:	d6 c0       	rjmp	.+428    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	68 e1       	ldi	r22, 0x18	; 24
    38f4:	45 ea       	ldi	r20, 0xA5	; 165
    38f6:	51 e2       	ldi	r21, 0x21	; 33
    38f8:	d1 c0       	rjmp	.+418    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	68 e0       	ldi	r22, 0x08	; 8
    38fe:	4d eb       	ldi	r20, 0xBD	; 189
    3900:	51 e2       	ldi	r21, 0x21	; 33
    3902:	cc c0       	rjmp	.+408    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x50:  ledBlink(); break;
    3904:	0e 94 94 20 	call	0x4128	; 0x4128 <ledBlink>
    3908:	cb c0       	rjmp	.+406    	; 0x3aa0 <handle_message_length_1+0x4ce>
        case 0x60:  SystemReset();  break;
    390a:	0e 94 01 22 	call	0x4402	; 0x4402 <SystemReset>
    390e:	c8 c0       	rjmp	.+400    	; 0x3aa0 <handle_message_length_1+0x4ce>
        case 0x70:  benchmark_pattern(); break;
    3910:	0e 94 82 18 	call	0x3104	; 0x3104 <benchmark_pattern>
    3914:	c5 c0       	rjmp	.+394    	; 0x3aa0 <handle_message_length_1+0x4ce>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	60 e2       	ldi	r22, 0x20	; 32
    391a:	45 ec       	ldi	r20, 0xC5	; 197
    391c:	51 e2       	ldi	r21, 0x21	; 33
    391e:	be c0       	rjmp	.+380    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	60 e2       	ldi	r22, 0x20	; 32
    3924:	45 ee       	ldi	r20, 0xE5	; 229
    3926:	51 e2       	ldi	r21, 0x21	; 33
    3928:	b9 c0       	rjmp	.+370    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	60 e2       	ldi	r22, 0x20	; 32
    392e:	45 e0       	ldi	r20, 0x05	; 5
    3930:	52 e2       	ldi	r21, 0x22	; 34
    3932:	b4 c0       	rjmp	.+360    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	60 e2       	ldi	r22, 0x20	; 32
    3938:	45 e2       	ldi	r20, 0x25	; 37
    393a:	52 e2       	ldi	r21, 0x22	; 34
    393c:	af c0       	rjmp	.+350    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	60 e2       	ldi	r22, 0x20	; 32
    3942:	45 e4       	ldi	r20, 0x45	; 69
    3944:	52 e2       	ldi	r21, 0x22	; 34
    3946:	aa c0       	rjmp	.+340    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	60 e2       	ldi	r22, 0x20	; 32
    394c:	45 e6       	ldi	r20, 0x65	; 101
    394e:	52 e2       	ldi	r21, 0x22	; 34
    3950:	a5 c0       	rjmp	.+330    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	60 e2       	ldi	r22, 0x20	; 32
    3956:	45 e8       	ldi	r20, 0x85	; 133
    3958:	52 e2       	ldi	r21, 0x22	; 34
    395a:	a0 c0       	rjmp	.+320    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	60 e2       	ldi	r22, 0x20	; 32
    3960:	45 ea       	ldi	r20, 0xA5	; 165
    3962:	52 e2       	ldi	r21, 0x22	; 34
    3964:	9b c0       	rjmp	.+310    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	60 e2       	ldi	r22, 0x20	; 32
    396a:	45 ec       	ldi	r20, 0xC5	; 197
    396c:	52 e2       	ldi	r21, 0x22	; 34
    396e:	96 c0       	rjmp	.+300    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	60 e2       	ldi	r22, 0x20	; 32
    3974:	45 ee       	ldi	r20, 0xE5	; 229
    3976:	52 e2       	ldi	r21, 0x22	; 34
    3978:	91 c0       	rjmp	.+290    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	60 e2       	ldi	r22, 0x20	; 32
    397e:	45 e0       	ldi	r20, 0x05	; 5
    3980:	53 e2       	ldi	r21, 0x23	; 35
    3982:	8c c0       	rjmp	.+280    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	60 e2       	ldi	r22, 0x20	; 32
    3988:	45 e2       	ldi	r20, 0x25	; 37
    398a:	53 e2       	ldi	r21, 0x23	; 35
    398c:	87 c0       	rjmp	.+270    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	60 e2       	ldi	r22, 0x20	; 32
    3992:	45 e4       	ldi	r20, 0x45	; 69
    3994:	53 e2       	ldi	r21, 0x23	; 35
    3996:	82 c0       	rjmp	.+260    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	60 e2       	ldi	r22, 0x20	; 32
    399c:	45 e6       	ldi	r20, 0x65	; 101
    399e:	53 e2       	ldi	r21, 0x23	; 35
    39a0:	7d c0       	rjmp	.+250    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	60 e2       	ldi	r22, 0x20	; 32
    39a6:	45 e8       	ldi	r20, 0x85	; 133
    39a8:	53 e2       	ldi	r21, 0x23	; 35
    39aa:	78 c0       	rjmp	.+240    	; 0x3a9c <handle_message_length_1+0x4ca>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	60 e2       	ldi	r22, 0x20	; 32
    39b0:	45 ea       	ldi	r20, 0xA5	; 165
    39b2:	53 e2       	ldi	r21, 0x23	; 35
    39b4:	73 c0       	rjmp	.+230    	; 0x3a9c <handle_message_length_1+0x4ca>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	80 93 e2 24 	sts	0x24E2, r24
    39bc:	71 c0       	rjmp	.+226    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    39be:	10 92 e2 24 	sts	0x24E2, r1
            // turn off the lines that may be connected
            digitalWrite(2, LOW);
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	60 e0       	ldi	r22, 0x00	; 0
    39c6:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <digitalWrite>
    39ca:	6a c0       	rjmp	.+212    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	80 93 81 29 	sts	0x2981, r24
    39d2:	66 c0       	rjmp	.+204    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    39d4:	10 92 81 29 	sts	0x2981, r1
    39d8:	63 c0       	rjmp	.+198    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    39da:	0e 94 22 09 	call	0x1244	; 0x1244 <dump_mat>
    39de:	60 c0       	rjmp	.+192    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    39e0:	00 d0       	rcall	.+0      	; 0x39e2 <handle_message_length_1+0x410>
    39e2:	0f 92       	push	r0
    39e4:	8c e6       	ldi	r24, 0x6C	; 108
    39e6:	98 e0       	ldi	r25, 0x08	; 8
    39e8:	ed b7       	in	r30, 0x3d	; 61
    39ea:	fe b7       	in	r31, 0x3e	; 62
    39ec:	81 83       	std	Z+1, r24	; 0x01
    39ee:	92 83       	std	Z+2, r25	; 0x02
    39f0:	85 ec       	ldi	r24, 0xC5	; 197
    39f2:	93 e2       	ldi	r25, 0x23	; 35
    39f4:	2a c0       	rjmp	.+84     	; 0x3a4a <handle_message_length_1+0x478>
            break;
    39f6:	b9 e1       	ldi	r27, 0x19	; 25
    39f8:	eb 2e       	mov	r14, r27
    39fa:	b7 e2       	ldi	r27, 0x27	; 39
    39fc:	fb 2e       	mov	r15, r27
    39fe:	01 e0       	ldi	r16, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3a00:	1e ef       	ldi	r17, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    3a02:	6e 01       	movw	r12, r28
    3a04:	08 94       	sec
    3a06:	c1 1c       	adc	r12, r1
    3a08:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3a0a:	19 83       	std	Y+1, r17	; 0x01
    3a0c:	f7 01       	movw	r30, r14
    3a0e:	81 91       	ld	r24, Z+
    3a10:	7f 01       	movw	r14, r30
    3a12:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    3a14:	80 2f       	mov	r24, r16
    3a16:	62 e0       	ldi	r22, 0x02	; 2
    3a18:	a6 01       	movw	r20, r12
    3a1a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    3a1e:	0f 5f       	subi	r16, 0xFF	; 255
    3a20:	01 38       	cpi	r16, 0x81	; 129
    3a22:	99 f7       	brne	.-26     	; 0x3a0a <handle_message_length_1+0x438>
    3a24:	3d c0       	rjmp	.+122    	; 0x3aa0 <handle_message_length_1+0x4ce>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	80 93 f3 24 	sts	0x24F3, r24
    3a2c:	39 c0       	rjmp	.+114    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    3a2e:	10 92 f3 24 	sts	0x24F3, r1
    3a32:	36 c0       	rjmp	.+108    	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
            
        case 0x19:  // get ADC value from ADC0 to debug ADC
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(0));
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <handle_message_length_1+0x46a>
    3a3c:	0f 92       	push	r0
    3a3e:	2a e5       	ldi	r18, 0x5A	; 90
    3a40:	38 e0       	ldi	r19, 0x08	; 8
    3a42:	ed b7       	in	r30, 0x3d	; 61
    3a44:	fe b7       	in	r31, 0x3e	; 62
    3a46:	21 83       	std	Z+1, r18	; 0x01
    3a48:	32 83       	std	Z+2, r19	; 0x02
    3a4a:	83 83       	std	Z+3, r24	; 0x03
    3a4c:	94 83       	std	Z+4, r25	; 0x04
    3a4e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	22 c0       	rjmp	.+68     	; 0x3aa0 <handle_message_length_1+0x4ce>
            break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	6f ef       	ldi	r22, 0xFF	; 255
    3a62:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    3a66:	0f 92       	push	r0
    3a68:	0f 92       	push	r0
    3a6a:	88 e2       	ldi	r24, 0x28	; 40
    3a6c:	98 e0       	ldi	r25, 0x08	; 8
    3a6e:	09 c0       	rjmp	.+18     	; 0x3a82 <handle_message_length_1+0x4b0>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    3a7a:	0f 92       	push	r0
    3a7c:	0f 92       	push	r0
    3a7e:	86 ef       	ldi	r24, 0xF6	; 246
    3a80:	97 e0       	ldi	r25, 0x07	; 7
    3a82:	ed b7       	in	r30, 0x3d	; 61
    3a84:	fe b7       	in	r31, 0x3e	; 62
    3a86:	81 83       	std	Z+1, r24	; 0x01
    3a88:	92 83       	std	Z+2, r25	; 0x02
    3a8a:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <handle_message_length_1+0x4ce>
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	68 e0       	ldi	r22, 0x08	; 8
    3a98:	41 ec       	ldi	r20, 0xC1	; 193
    3a9a:	50 e2       	ldi	r21, 0x20	; 32
    3a9c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    }
}
    3aa0:	22 96       	adiw	r28, 0x02	; 2
    3aa2:	e8 e0       	ldi	r30, 0x08	; 8
    3aa4:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0x14>

00003aa8 <main>:
}




int main(void) {
    3aa8:	a6 e4       	ldi	r26, 0x46	; 70
    3aaa:	b6 e0       	ldi	r27, 0x06	; 6
    3aac:	ea e5       	ldi	r30, 0x5A	; 90
    3aae:	fd e1       	ldi	r31, 0x1D	; 29
    3ab0:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    uint16_t message_length;
    uint16_t lcv;
    uint8_t  tempBuff[128];
	uint8_t workingModes;
	
	workingModes = eeprom_read_byte(work_mode);
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 2e 5c 	call	0xb85c	; 0xb85c <__eerd_byte_x128a1>
    3abc:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    3abe:	85 e7       	ldi	r24, 0x75	; 117
    3ac0:	96 e2       	ldi	r25, 0x26	; 38
    3ac2:	6e 2d       	mov	r22, r14
    3ac4:	0e 94 73 30 	call	0x60e6	; 0x60e6 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    3ac8:	82 e7       	ldi	r24, 0x72	; 114
    3aca:	99 e2       	ldi	r25, 0x29	; 41
    3acc:	6e 2d       	mov	r22, r14
    3ace:	0e 94 73 30 	call	0x60e6	; 0x60e6 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    3ad2:	88 e0       	ldi	r24, 0x08	; 8
    3ad4:	97 e2       	ldi	r25, 0x27	; 39
    3ad6:	6e 2d       	mov	r22, r14
    3ad8:	0e 94 73 30 	call	0x60e6	; 0x60e6 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    3adc:	87 e9       	ldi	r24, 0x97	; 151
    3ade:	95 e2       	ldi	r25, 0x25	; 37
    3ae0:	6e 2d       	mov	r22, r14
    3ae2:	0e 94 73 30 	call	0x60e6	; 0x60e6 <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    3ae6:	85 e7       	ldi	r24, 0x75	; 117
    3ae8:	96 e2       	ldi	r25, 0x26	; 38
    3aea:	60 e8       	ldi	r22, 0x80	; 128
    3aec:	74 e0       	ldi	r23, 0x04	; 4
    3aee:	40 e4       	ldi	r20, 0x40	; 64
    3af0:	50 e0       	ldi	r21, 0x00	; 0
    3af2:	23 e2       	ldi	r18, 0x23	; 35
    3af4:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    3af8:	82 e7       	ldi	r24, 0x72	; 114
    3afa:	99 e2       	ldi	r25, 0x29	; 41
    3afc:	60 e9       	ldi	r22, 0x90	; 144
    3afe:	74 e0       	ldi	r23, 0x04	; 4
    3b00:	40 e4       	ldi	r20, 0x40	; 64
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	23 e2       	ldi	r18, 0x23	; 35
    3b06:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    3b0a:	88 e0       	ldi	r24, 0x08	; 8
    3b0c:	97 e2       	ldi	r25, 0x27	; 39
    3b0e:	60 ea       	ldi	r22, 0xA0	; 160
    3b10:	74 e0       	ldi	r23, 0x04	; 4
    3b12:	40 e4       	ldi	r20, 0x40	; 64
    3b14:	50 e0       	ldi	r21, 0x00	; 0
    3b16:	23 e2       	ldi	r18, 0x23	; 35
    3b18:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    3b1c:	87 e9       	ldi	r24, 0x97	; 151
    3b1e:	95 e2       	ldi	r25, 0x25	; 37
    3b20:	60 eb       	ldi	r22, 0xB0	; 176
    3b22:	74 e0       	ldi	r23, 0x04	; 4
    3b24:	40 e4       	ldi	r20, 0x40	; 64
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	23 e2       	ldi	r18, 0x23	; 35
    3b2a:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    3b2e:	8e 2d       	mov	r24, r14
    3b30:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <createRxBuff>
    init_all();
    3b34:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    3b38:	84 ee       	ldi	r24, 0xE4	; 228
    3b3a:	9c e2       	ldi	r25, 0x2C	; 44
    3b3c:	80 93 74 25 	sts	0x2574, r24
    3b40:	90 93 75 25 	sts	0x2575, r25
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    3b48:	2a e0       	ldi	r18, 0x0A	; 10
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e5 55       	subi	r30, 0x55	; 85
    3b50:	fa 4d       	sbci	r31, 0xDA	; 218
    3b52:	20 83       	st	Z, r18
    3b54:	31 83       	std	Z+1, r19	; 0x01
    3b56:	fc 01       	movw	r30, r24
    3b58:	e9 5f       	subi	r30, 0xF9	; 249
    3b5a:	f7 4d       	sbci	r31, 0xD7	; 215
    3b5c:	20 83       	st	Z, r18
    3b5e:	31 83       	std	Z+1, r19	; 0x01
    3b60:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    3b62:	88 3c       	cpi	r24, 0xC8	; 200
    3b64:	91 05       	cpc	r25, r1
    3b66:	91 f7       	brne	.-28     	; 0x3b4c <main+0xa4>
    3b68:	e6 e8       	ldi	r30, 0x86	; 134
    3b6a:	f6 e2       	ldi	r31, 0x26	; 38
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 23)) || ((lcv >= 48)&&(lcv <= 71)))
	        laserPattern[lcv] = 1;
    3b70:	41 e0       	ldi	r20, 0x01	; 1
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 23)) || ((lcv >= 48)&&(lcv <= 71)))
    3b72:	28 31       	cpi	r18, 0x18	; 24
    3b74:	31 05       	cpc	r19, r1
    3b76:	20 f0       	brcs	.+8      	; 0x3b80 <main+0xd8>
    3b78:	c9 01       	movw	r24, r18
    3b7a:	c0 97       	sbiw	r24, 0x30	; 48
    3b7c:	48 97       	sbiw	r24, 0x18	; 24
    3b7e:	10 f4       	brcc	.+4      	; 0x3b84 <main+0xdc>
	        laserPattern[lcv] = 1;
    3b80:	40 83       	st	Z, r20
    3b82:	01 c0       	rjmp	.+2      	; 0x3b86 <main+0xde>
		else
			laserPattern[lcv] = 0;
    3b84:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 96; lcv++)
    3b86:	2f 5f       	subi	r18, 0xFF	; 255
    3b88:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8a:	31 96       	adiw	r30, 0x01	; 1
    3b8c:	20 36       	cpi	r18, 0x60	; 96
    3b8e:	31 05       	cpc	r19, r1
    3b90:	81 f7       	brne	.-32     	; 0x3b72 <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    3b92:	10 92 50 29 	sts	0x2950, r1
    3b96:	10 92 51 29 	sts	0x2951, r1
    3b9a:	80 91 50 29 	lds	r24, 0x2950
    3b9e:	90 91 51 29 	lds	r25, 0x2951
    3ba2:	80 93 9b 27 	sts	0x279B, r24
    3ba6:	90 93 9c 27 	sts	0x279C, r25
    3baa:	80 91 9b 27 	lds	r24, 0x279B
    3bae:	90 91 9c 27 	lds	r25, 0x279C
    3bb2:	80 93 73 26 	sts	0x2673, r24
    3bb6:	90 93 74 26 	sts	0x2674, r25
    3bba:	80 93 e6 26 	sts	0x26E6, r24
    3bbe:	90 93 e7 26 	sts	0x26E7, r25
    bias_x = bias_y = 0;
    3bc2:	10 92 b4 2b 	sts	0x2BB4, r1
    3bc6:	10 92 96 25 	sts	0x2596, r1
    gain_x = gain_y = 10;
    3bca:	8a e0       	ldi	r24, 0x0A	; 10
    3bcc:	80 93 9d 27 	sts	0x279D, r24
    3bd0:	80 93 e4 27 	sts	0x27E4, r24
    x_mode = y_mode = 0;
    3bd4:	10 92 e3 27 	sts	0x27E3, r1
    3bd8:	10 92 99 27 	sts	0x2799, r1
    X_val = Y_val = 0;
    3bdc:	10 92 a8 25 	sts	0x25A8, r1
    3be0:	10 92 a9 25 	sts	0x25A9, r1
    3be4:	10 92 84 26 	sts	0x2684, r1
    3be8:	10 92 85 26 	sts	0x2685, r1
    gs_value = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	80 93 17 27 	sts	0x2717, r24
    row_compress = 0;
    3bf2:	10 92 aa 25 	sts	0x25AA, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    3bf6:	10 92 81 29 	sts	0x2981, r1
    
    temp = eeprom_read_byte(arena_config);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 2e 5c 	call	0xb85c	; 0xb85c <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    3c02:	8f 3f       	cpi	r24, 0xFF	; 255
    3c04:	c1 f4       	brne	.+48     	; 0x3c36 <main+0x18e>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3c06:	80 e0       	ldi	r24, 0x00	; 0
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    3c08:	24 e0       	ldi	r18, 0x04	; 4
    3c0a:	11 c0       	rjmp	.+34     	; 0x3c2e <main+0x186>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    3c0c:	e8 2f       	mov	r30, r24
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	98 2f       	mov	r25, r24
    3c12:	93 70       	andi	r25, 0x03	; 3
    3c14:	df 01       	movw	r26, r30
    3c16:	a8 5e       	subi	r26, 0xE8	; 232
    3c18:	b8 4d       	sbci	r27, 0xD8	; 216
    3c1a:	9c 93       	st	X, r25
			if (b1 && (chMap[b1] == 0))
    3c1c:	88 23       	and	r24, r24
    3c1e:	19 f0       	breq	.+6      	; 0x3c26 <main+0x17e>
    3c20:	99 23       	and	r25, r25
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <main+0x17e>
				chMap[b1] = 4;
    3c24:	2c 93       	st	X, r18
			adrMap[b1] = b1; // panel address identity mapping
    3c26:	e1 53       	subi	r30, 0x31	; 49
    3c28:	f7 4d       	sbci	r31, 0xD7	; 215
    3c2a:	80 83       	st	Z, r24
    3c2c:	8f 5f       	subi	r24, 0xFF	; 255
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3c2e:	81 38       	cpi	r24, 0x81	; 129
    3c30:	68 f3       	brcs	.-38     	; 0x3c0c <main+0x164>
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	17 c0       	rjmp	.+46     	; 0x3c64 <main+0x1bc>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3c36:	19 82       	std	Y+1, r1	; 0x01
    3c38:	11 c0       	rjmp	.+34     	; 0x3c5c <main+0x1b4>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    3c3a:	0f 2d       	mov	r16, r15
    3c3c:	10 e0       	ldi	r17, 0x00	; 0
    3c3e:	c8 01       	movw	r24, r16
    3c40:	8f 5f       	subi	r24, 0xFF	; 255
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	0e 94 2e 5c 	call	0xb85c	; 0xb85c <__eerd_byte_x128a1>
    3c48:	f8 01       	movw	r30, r16
    3c4a:	e8 5e       	subi	r30, 0xE8	; 232
    3c4c:	f8 4d       	sbci	r31, 0xD8	; 216
    3c4e:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    3c50:	01 53       	subi	r16, 0x31	; 49
    3c52:	17 4d       	sbci	r17, 0xD7	; 215
    3c54:	f8 01       	movw	r30, r16
    3c56:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3c58:	f3 94       	inc	r15
    3c5a:	f9 82       	std	Y+1, r15	; 0x01
    3c5c:	f9 80       	ldd	r15, Y+1	; 0x01
    3c5e:	f0 e8       	ldi	r31, 0x80	; 128
    3c60:	ff 15       	cp	r31, r15
    3c62:	58 f7       	brcc	.-42     	; 0x3c3a <main+0x192>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    3c64:	8a ed       	ldi	r24, 0xDA	; 218
    3c66:	99 e0       	ldi	r25, 0x09	; 9
    3c68:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	61 e0       	ldi	r22, 0x01	; 1
    3c70:	0e 94 5e 20 	call	0x40bc	; 0x40bc <ledWrite>
    3c74:	01 e0       	ldi	r16, 0x01	; 1
    3c76:	90 e2       	ldi	r25, 0x20	; 32
    3c78:	c9 2e       	mov	r12, r25
    3c7a:	93 e0       	ldi	r25, 0x03	; 3
    3c7c:	d9 2e       	mov	r13, r25
    3c7e:	3a c0       	rjmp	.+116    	; 0x3cf4 <main+0x24c>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	0e 94 86 50 	call	0xa10c	; 0xa10c <disk_status>
    3c86:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    3c88:	81 ff       	sbrs	r24, 1
    3c8a:	0d c0       	rjmp	.+26     	; 0x3ca6 <main+0x1fe>
            xputs(PSTR("Insert SD card"));
    3c8c:	8b ec       	ldi	r24, 0xCB	; 203
    3c8e:	99 e0       	ldi	r25, 0x09	; 9
    3c90:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            uart_crlf();
    3c94:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <uart_crlf>
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <main+0x1fa>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	0e 94 86 50 	call	0xa10c	; 0xa10c <disk_status>
    3ca0:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    3ca2:	01 fd       	sbrc	r16, 1
    3ca4:	fa cf       	rjmp	.-12     	; 0x3c9a <main+0x1f2>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    3ca6:	02 ff       	sbrs	r16, 2
    3ca8:	04 c0       	rjmp	.+8      	; 0x3cb2 <main+0x20a>
            xputs(PSTR("SD card is Write Protected!\n"));
    3caa:	8e ea       	ldi	r24, 0xAE	; 174
    3cac:	99 e0       	ldi	r25, 0x09	; 9
    3cae:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3cb2:	19 82       	std	Y+1, r1	; 0x01
    3cb4:	10 c0       	rjmp	.+32     	; 0x3cd6 <main+0x22e>
            sta = disk_initialize(0);
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	0e 94 7c 53 	call	0xa6f8	; 0xa6f8 <disk_initialize>
    3cbc:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    3cbe:	80 ff       	sbrs	r24, 0
    3cc0:	0d c0       	rjmp	.+26     	; 0x3cdc <main+0x234>
    3cc2:	29 81       	ldd	r18, Y+1	; 0x01
    3cc4:	84 ef       	ldi	r24, 0xF4	; 244
    3cc6:	91 e0       	ldi	r25, 0x01	; 1
    3cc8:	f6 01       	movw	r30, r12
    3cca:	31 97       	sbiw	r30, 0x01	; 1
    3ccc:	f1 f7       	brne	.-4      	; 0x3cca <main+0x222>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	d9 f7       	brne	.-10     	; 0x3cc8 <main+0x220>
    3cd2:	2f 5f       	subi	r18, 0xFF	; 255
    3cd4:	29 83       	std	Y+1, r18	; 0x01
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	84 30       	cpi	r24, 0x04	; 4
    3cda:	68 f3       	brcs	.-38     	; 0x3cb6 <main+0x20e>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    3cdc:	00 ff       	sbrs	r16, 0
    3cde:	0a c0       	rjmp	.+20     	; 0x3cf4 <main+0x24c>
            xputs(PSTR("Initialization failed!!!\n"));
    3ce0:	84 e9       	ldi	r24, 0x94	; 148
    3ce2:	99 e0       	ldi	r25, 0x09	; 9
    3ce4:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	0e 94 86 50 	call	0xa10c	; 0xa10c <disk_status>
    3cee:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    3cf0:	81 ff       	sbrs	r24, 1
    3cf2:	fa cf       	rjmp	.-12     	; 0x3ce8 <main+0x240>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    3cf4:	00 fd       	sbrc	r16, 0
    3cf6:	c4 cf       	rjmp	.-120    	; 0x3c80 <main+0x1d8>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    3cf8:	8c e7       	ldi	r24, 0x7C	; 124
    3cfa:	99 e0       	ldi	r25, 0x09	; 9
    3cfc:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	6a e0       	ldi	r22, 0x0A	; 10
    3d04:	ae 01       	movw	r20, r28
    3d06:	4f 5f       	subi	r20, 0xFF	; 255
    3d08:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0a:	0e 94 70 51 	call	0xa2e0	; 0xa2e0 <disk_ioctl>
    3d0e:	89 2b       	or	r24, r25
    3d10:	59 f5       	brne	.+86     	; 0x3d68 <main+0x2c0>
        xputs(PSTR("Card type: "));
    3d12:	80 e7       	ldi	r24, 0x70	; 112
    3d14:	99 e0       	ldi	r25, 0x09	; 9
    3d16:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
        switch(b1) {
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	84 30       	cpi	r24, 0x04	; 4
    3d1e:	a1 f0       	breq	.+40     	; 0x3d48 <main+0x2a0>
    3d20:	85 30       	cpi	r24, 0x05	; 5
    3d22:	28 f4       	brcc	.+10     	; 0x3d2e <main+0x286>
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	51 f0       	breq	.+20     	; 0x3d3c <main+0x294>
    3d28:	82 30       	cpi	r24, 0x02	; 2
    3d2a:	d1 f4       	brne	.+52     	; 0x3d60 <main+0x2b8>
    3d2c:	0a c0       	rjmp	.+20     	; 0x3d42 <main+0x29a>
    3d2e:	88 30       	cpi	r24, 0x08	; 8
    3d30:	89 f0       	breq	.+34     	; 0x3d54 <main+0x2ac>
    3d32:	8c 30       	cpi	r24, 0x0C	; 12
    3d34:	91 f0       	breq	.+36     	; 0x3d5a <main+0x2b2>
    3d36:	86 30       	cpi	r24, 0x06	; 6
    3d38:	99 f4       	brne	.+38     	; 0x3d60 <main+0x2b8>
    3d3a:	09 c0       	rjmp	.+18     	; 0x3d4e <main+0x2a6>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    3d3c:	8b e6       	ldi	r24, 0x6B	; 107
    3d3e:	99 e0       	ldi	r25, 0x09	; 9
    3d40:	11 c0       	rjmp	.+34     	; 0x3d64 <main+0x2bc>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    3d42:	87 e6       	ldi	r24, 0x67	; 103
    3d44:	99 e0       	ldi	r25, 0x09	; 9
    3d46:	0e c0       	rjmp	.+28     	; 0x3d64 <main+0x2bc>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    3d48:	82 e6       	ldi	r24, 0x62	; 98
    3d4a:	99 e0       	ldi	r25, 0x09	; 9
    3d4c:	0b c0       	rjmp	.+22     	; 0x3d64 <main+0x2bc>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    3d4e:	8d e5       	ldi	r24, 0x5D	; 93
    3d50:	99 e0       	ldi	r25, 0x09	; 9
    3d52:	08 c0       	rjmp	.+16     	; 0x3d64 <main+0x2bc>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    3d54:	88 e5       	ldi	r24, 0x58	; 88
    3d56:	99 e0       	ldi	r25, 0x09	; 9
    3d58:	05 c0       	rjmp	.+10     	; 0x3d64 <main+0x2bc>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    3d5a:	82 e5       	ldi	r24, 0x52	; 82
    3d5c:	99 e0       	ldi	r25, 0x09	; 9
    3d5e:	02 c0       	rjmp	.+4      	; 0x3d64 <main+0x2bc>
            default: xputs(PSTR("???\n"));
    3d60:	8d e4       	ldi	r24, 0x4D	; 77
    3d62:	99 e0       	ldi	r25, 0x09	; 9
    3d64:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    3d68:	84 e3       	ldi	r24, 0x34	; 52
    3d6a:	99 e0       	ldi	r25, 0x09	; 9
    3d6c:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    res = f_mount(0, &fatfs);
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	62 e8       	ldi	r22, 0x82	; 130
    3d74:	79 e2       	ldi	r23, 0x29	; 41
    3d76:	0e 94 14 31 	call	0x6228	; 0x6228 <f_mount>
    switch(res) {
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	51 f0       	breq	.+20     	; 0x3d92 <main+0x2ea>
    3d7e:	81 30       	cpi	r24, 0x01	; 1
    3d80:	28 f0       	brcs	.+10     	; 0x3d8c <main+0x2e4>
    3d82:	82 30       	cpi	r24, 0x02	; 2
    3d84:	49 f0       	breq	.+18     	; 0x3d98 <main+0x2f0>
    3d86:	83 30       	cpi	r24, 0x03	; 3
    3d88:	69 f4       	brne	.+26     	; 0x3da4 <main+0x2fc>
    3d8a:	09 c0       	rjmp	.+18     	; 0x3d9e <main+0x2f6>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    3d8c:	8a e2       	ldi	r24, 0x2A	; 42
    3d8e:	99 e0       	ldi	r25, 0x09	; 9
    3d90:	0b c0       	rjmp	.+22     	; 0x3da8 <main+0x300>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    3d92:	81 e2       	ldi	r24, 0x21	; 33
    3d94:	99 e0       	ldi	r25, 0x09	; 9
    3d96:	08 c0       	rjmp	.+16     	; 0x3da8 <main+0x300>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    3d98:	8e e0       	ldi	r24, 0x0E	; 14
    3d9a:	99 e0       	ldi	r25, 0x09	; 9
    3d9c:	05 c0       	rjmp	.+10     	; 0x3da8 <main+0x300>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	99 e0       	ldi	r25, 0x09	; 9
    3da2:	02 c0       	rjmp	.+4      	; 0x3da8 <main+0x300>
        default: xputs(PSTR("???\n"));
    3da4:	8c ef       	ldi	r24, 0xFC	; 252
    3da6:	98 e0       	ldi	r25, 0x08	; 8
    3da8:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	68 e0       	ldi	r22, 0x08	; 8
    3db0:	40 e1       	ldi	r20, 0x10	; 16
    3db2:	55 e2       	ldi	r21, 0x25	; 37
    3db4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    ledWrite(LED1, OFF);
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	0e 94 5e 20 	call	0x40bc	; 0x40bc <ledWrite>
    ledBlink();
    3dc0:	0e 94 94 20 	call	0x4128	; 0x4128 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    3dc4:	8f ef       	ldi	r24, 0xFF	; 255
    3dc6:	e8 16       	cp	r14, r24
    3dc8:	09 f0       	breq	.+2      	; 0x3dcc <main+0x324>
    3dca:	59 c0       	rjmp	.+178    	; 0x3e7e <main+0x3d6>
        uint8_t msg_buffer[55];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    3dcc:	8e ec       	ldi	r24, 0xCE	; 206
    3dce:	98 e0       	ldi	r25, 0x08	; 8
    3dd0:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3dd4:	8e 01       	movw	r16, r28
    3dd6:	0e 5f       	subi	r16, 0xFE	; 254
    3dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    if (workingModes == 0xff) {
        uint8_t msg_buffer[55];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    3dda:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_test>
    3dde:	89 2b       	or	r24, r25
    3de0:	79 f1       	breq	.+94     	; 0x3e40 <main+0x398>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3de2:	c8 01       	movw	r24, r16
    3de4:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <fill_Rx_buffer>
                switch(message_length) {
    3de8:	83 30       	cpi	r24, 0x03	; 3
    3dea:	91 05       	cpc	r25, r1
    3dec:	b9 f0       	breq	.+46     	; 0x3e1c <main+0x374>
    3dee:	84 30       	cpi	r24, 0x04	; 4
    3df0:	91 05       	cpc	r25, r1
    3df2:	30 f4       	brcc	.+12     	; 0x3e00 <main+0x358>
    3df4:	81 30       	cpi	r24, 0x01	; 1
    3df6:	91 05       	cpc	r25, r1
    3df8:	49 f0       	breq	.+18     	; 0x3e0c <main+0x364>
    3dfa:	02 97       	sbiw	r24, 0x02	; 2
    3dfc:	d9 f4       	brne	.+54     	; 0x3e34 <main+0x38c>
    3dfe:	0a c0       	rjmp	.+20     	; 0x3e14 <main+0x36c>
    3e00:	85 30       	cpi	r24, 0x05	; 5
    3e02:	91 05       	cpc	r25, r1
    3e04:	79 f0       	breq	.+30     	; 0x3e24 <main+0x37c>
    3e06:	0c 97       	sbiw	r24, 0x0c	; 12
    3e08:	a9 f4       	brne	.+42     	; 0x3e34 <main+0x38c>
    3e0a:	10 c0       	rjmp	.+32     	; 0x3e2c <main+0x384>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    3e0c:	c8 01       	movw	r24, r16
    3e0e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <handle_message_length_1>
    3e12:	16 c0       	rjmp	.+44     	; 0x3e40 <main+0x398>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    3e14:	c8 01       	movw	r24, r16
    3e16:	0e 94 aa 1a 	call	0x3554	; 0x3554 <handle_message_length_2>
    3e1a:	12 c0       	rjmp	.+36     	; 0x3e40 <main+0x398>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    3e1c:	c8 01       	movw	r24, r16
    3e1e:	0e 94 76 14 	call	0x28ec	; 0x28ec <handle_message_length_3>
    3e22:	0e c0       	rjmp	.+28     	; 0x3e40 <main+0x398>
                        break;
                    case 5: // if length 5, then decode, set x,y index, or set gain, bias
                        handle_message_length_5(&msg_buffer[0]);
    3e24:	c8 01       	movw	r24, r16
    3e26:	0e 94 1b 1a 	call	0x3436	; 0x3436 <handle_message_length_5>
    3e2a:	0a c0       	rjmp	.+20     	; 0x3e40 <main+0x398>
                        break;
                    case 12: //if length 12, then set laser trigger pattern
                        handle_message_length_12(&msg_buffer[0]);
    3e2c:	c8 01       	movw	r24, r16
    3e2e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <handle_message_length_12>
    3e32:	06 c0       	rjmp	.+12     	; 0x3e40 <main+0x398>
                        break;
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	68 e0       	ldi	r22, 0x08	; 8
    3e38:	49 ee       	ldi	r20, 0xE9	; 233
    3e3a:	50 e2       	ldi	r21, 0x20	; 32
    3e3c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has changed
    3e40:	80 91 9c 20 	lds	r24, 0x209C
    3e44:	88 23       	and	r24, r24
    3e46:	49 f6       	brne	.-110    	; 0x3dda <main+0x332>
                if (frame_num != frame_num_old) {
    3e48:	20 91 e5 24 	lds	r18, 0x24E5
    3e4c:	30 91 e6 24 	lds	r19, 0x24E6
    3e50:	80 91 9d 20 	lds	r24, 0x209D
    3e54:	90 91 9e 20 	lds	r25, 0x209E
    3e58:	28 17       	cp	r18, r24
    3e5a:	39 07       	cpc	r19, r25
    3e5c:	09 f4       	brne	.+2      	; 0x3e60 <main+0x3b8>
    3e5e:	bd cf       	rjmp	.-134    	; 0x3dda <main+0x332>
                    frame_num_old = frame_num; //update the 'old' frame number
    3e60:	80 91 e5 24 	lds	r24, 0x24E5
    3e64:	90 91 e6 24 	lds	r25, 0x24E6
    3e68:	80 93 9d 20 	sts	0x209D, r24
    3e6c:	90 93 9e 20 	sts	0x209E, r25
                    fetch_display_frame(frame_num);
    3e70:	80 91 e5 24 	lds	r24, 0x24E5
    3e74:	90 91 e6 24 	lds	r25, 0x24E6
    3e78:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <fetch_display_frame>
    3e7c:	ae cf       	rjmp	.-164    	; 0x3dda <main+0x332>
                }
            }
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    3e7e:	80 ea       	ldi	r24, 0xA0	; 160
    3e80:	98 e0       	ldi	r25, 0x08	; 8
    3e82:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3e86:	8e 01       	movw	r16, r28
    3e88:	07 5c       	subi	r16, 0xC7	; 199
    3e8a:	1f 4f       	sbci	r17, 0xFF	; 255
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
                        break;
                    default:
xprintf(PSTR("message_length = %u\n"), message_length);					
    3e8c:	8b e8       	ldi	r24, 0x8B	; 139
    3e8e:	e8 2e       	mov	r14, r24
    3e90:	88 e0       	ldi	r24, 0x08	; 8
    3e92:	f8 2e       	mov	r15, r24
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    3e94:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_test>
    3e98:	89 2b       	or	r24, r25
    3e9a:	e1 f3       	breq	.-8      	; 0x3e94 <main+0x3ec>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    3e9c:	c8 01       	movw	r24, r16
    3e9e:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <fill_Rx_buffer>
                switch(message_length) {
    3ea2:	81 30       	cpi	r24, 0x01	; 1
    3ea4:	91 05       	cpc	r25, r1
    3ea6:	21 f0       	breq	.+8      	; 0x3eb0 <main+0x408>
    3ea8:	82 33       	cpi	r24, 0x32	; 50
    3eaa:	91 05       	cpc	r25, r1
    3eac:	49 f4       	brne	.+18     	; 0x3ec0 <main+0x418>
    3eae:	04 c0       	rjmp	.+8      	; 0x3eb8 <main+0x410>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    3eb0:	c8 01       	movw	r24, r16
    3eb2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <handle_message_length_1>
    3eb6:	ee cf       	rjmp	.-36     	; 0x3e94 <main+0x3ec>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    3eb8:	c8 01       	movw	r24, r16
    3eba:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <display_dumped_frame>
    3ebe:	ea cf       	rjmp	.-44     	; 0x3e94 <main+0x3ec>
                        break;
                    default:
xprintf(PSTR("message_length = %u\n"), message_length);					
    3ec0:	00 d0       	rcall	.+0      	; 0x3ec2 <main+0x41a>
    3ec2:	0f 92       	push	r0
    3ec4:	ed b7       	in	r30, 0x3d	; 61
    3ec6:	fe b7       	in	r31, 0x3e	; 62
    3ec8:	e1 82       	std	Z+1, r14	; 0x01
    3eca:	f2 82       	std	Z+2, r15	; 0x02
    3ecc:	83 83       	std	Z+3, r24	; 0x03
    3ece:	94 83       	std	Z+4, r25	; 0x04
    3ed0:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	68 e0       	ldi	r22, 0x08	; 8
    3ee0:	49 ee       	ldi	r20, 0xE9	; 233
    3ee2:	50 e2       	ldi	r21, 0x20	; 32
    3ee4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <i2cMasterSend>
    3ee8:	d5 cf       	rjmp	.-86     	; 0x3e94 <main+0x3ec>

00003eea <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    3eea:	1f 92       	push	r1
    3eec:	0f 92       	push	r0
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	0f 92       	push	r0
    3ef2:	08 b6       	in	r0, 0x38	; 56
    3ef4:	0f 92       	push	r0
    3ef6:	09 b6       	in	r0, 0x39	; 57
    3ef8:	0f 92       	push	r0
    3efa:	0b b6       	in	r0, 0x3b	; 59
    3efc:	0f 92       	push	r0
    3efe:	11 24       	eor	r1, r1
    3f00:	18 be       	out	0x38, r1	; 56
    3f02:	19 be       	out	0x39, r1	; 57
    3f04:	1b be       	out	0x3b, r1	; 59
    3f06:	2f 93       	push	r18
    3f08:	3f 93       	push	r19
    3f0a:	4f 93       	push	r20
    3f0c:	5f 93       	push	r21
    3f0e:	6f 93       	push	r22
    3f10:	7f 93       	push	r23
    3f12:	8f 93       	push	r24
    3f14:	9f 93       	push	r25
    3f16:	af 93       	push	r26
    3f18:	bf 93       	push	r27
    3f1a:	ef 93       	push	r30
    3f1c:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    3f1e:	87 e9       	ldi	r24, 0x97	; 151
    3f20:	95 e2       	ldi	r25, 0x25	; 37
    3f22:	0e 94 40 30 	call	0x6080	; 0x6080 <TWI_MasterInterruptHandler>
}
    3f26:	ff 91       	pop	r31
    3f28:	ef 91       	pop	r30
    3f2a:	bf 91       	pop	r27
    3f2c:	af 91       	pop	r26
    3f2e:	9f 91       	pop	r25
    3f30:	8f 91       	pop	r24
    3f32:	7f 91       	pop	r23
    3f34:	6f 91       	pop	r22
    3f36:	5f 91       	pop	r21
    3f38:	4f 91       	pop	r20
    3f3a:	3f 91       	pop	r19
    3f3c:	2f 91       	pop	r18
    3f3e:	0f 90       	pop	r0
    3f40:	0b be       	out	0x3b, r0	; 59
    3f42:	0f 90       	pop	r0
    3f44:	09 be       	out	0x39, r0	; 57
    3f46:	0f 90       	pop	r0
    3f48:	08 be       	out	0x38, r0	; 56
    3f4a:	0f 90       	pop	r0
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	0f 90       	pop	r0
    3f50:	1f 90       	pop	r1
    3f52:	18 95       	reti

00003f54 <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    3f54:	1f 92       	push	r1
    3f56:	0f 92       	push	r0
    3f58:	0f b6       	in	r0, 0x3f	; 63
    3f5a:	0f 92       	push	r0
    3f5c:	08 b6       	in	r0, 0x38	; 56
    3f5e:	0f 92       	push	r0
    3f60:	09 b6       	in	r0, 0x39	; 57
    3f62:	0f 92       	push	r0
    3f64:	0b b6       	in	r0, 0x3b	; 59
    3f66:	0f 92       	push	r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	18 be       	out	0x38, r1	; 56
    3f6c:	19 be       	out	0x39, r1	; 57
    3f6e:	1b be       	out	0x3b, r1	; 59
    3f70:	2f 93       	push	r18
    3f72:	3f 93       	push	r19
    3f74:	4f 93       	push	r20
    3f76:	5f 93       	push	r21
    3f78:	6f 93       	push	r22
    3f7a:	7f 93       	push	r23
    3f7c:	8f 93       	push	r24
    3f7e:	9f 93       	push	r25
    3f80:	af 93       	push	r26
    3f82:	bf 93       	push	r27
    3f84:	ef 93       	push	r30
    3f86:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    3f88:	88 e0       	ldi	r24, 0x08	; 8
    3f8a:	97 e2       	ldi	r25, 0x27	; 39
    3f8c:	0e 94 40 30 	call	0x6080	; 0x6080 <TWI_MasterInterruptHandler>
}
    3f90:	ff 91       	pop	r31
    3f92:	ef 91       	pop	r30
    3f94:	bf 91       	pop	r27
    3f96:	af 91       	pop	r26
    3f98:	9f 91       	pop	r25
    3f9a:	8f 91       	pop	r24
    3f9c:	7f 91       	pop	r23
    3f9e:	6f 91       	pop	r22
    3fa0:	5f 91       	pop	r21
    3fa2:	4f 91       	pop	r20
    3fa4:	3f 91       	pop	r19
    3fa6:	2f 91       	pop	r18
    3fa8:	0f 90       	pop	r0
    3faa:	0b be       	out	0x3b, r0	; 59
    3fac:	0f 90       	pop	r0
    3fae:	09 be       	out	0x39, r0	; 57
    3fb0:	0f 90       	pop	r0
    3fb2:	08 be       	out	0x38, r0	; 56
    3fb4:	0f 90       	pop	r0
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	0f 90       	pop	r0
    3fba:	1f 90       	pop	r1
    3fbc:	18 95       	reti

00003fbe <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    3fbe:	1f 92       	push	r1
    3fc0:	0f 92       	push	r0
    3fc2:	0f b6       	in	r0, 0x3f	; 63
    3fc4:	0f 92       	push	r0
    3fc6:	08 b6       	in	r0, 0x38	; 56
    3fc8:	0f 92       	push	r0
    3fca:	09 b6       	in	r0, 0x39	; 57
    3fcc:	0f 92       	push	r0
    3fce:	0b b6       	in	r0, 0x3b	; 59
    3fd0:	0f 92       	push	r0
    3fd2:	11 24       	eor	r1, r1
    3fd4:	18 be       	out	0x38, r1	; 56
    3fd6:	19 be       	out	0x39, r1	; 57
    3fd8:	1b be       	out	0x3b, r1	; 59
    3fda:	2f 93       	push	r18
    3fdc:	3f 93       	push	r19
    3fde:	4f 93       	push	r20
    3fe0:	5f 93       	push	r21
    3fe2:	6f 93       	push	r22
    3fe4:	7f 93       	push	r23
    3fe6:	8f 93       	push	r24
    3fe8:	9f 93       	push	r25
    3fea:	af 93       	push	r26
    3fec:	bf 93       	push	r27
    3fee:	ef 93       	push	r30
    3ff0:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    3ff2:	82 e7       	ldi	r24, 0x72	; 114
    3ff4:	99 e2       	ldi	r25, 0x29	; 41
    3ff6:	0e 94 40 30 	call	0x6080	; 0x6080 <TWI_MasterInterruptHandler>
}
    3ffa:	ff 91       	pop	r31
    3ffc:	ef 91       	pop	r30
    3ffe:	bf 91       	pop	r27
    4000:	af 91       	pop	r26
    4002:	9f 91       	pop	r25
    4004:	8f 91       	pop	r24
    4006:	7f 91       	pop	r23
    4008:	6f 91       	pop	r22
    400a:	5f 91       	pop	r21
    400c:	4f 91       	pop	r20
    400e:	3f 91       	pop	r19
    4010:	2f 91       	pop	r18
    4012:	0f 90       	pop	r0
    4014:	0b be       	out	0x3b, r0	; 59
    4016:	0f 90       	pop	r0
    4018:	09 be       	out	0x39, r0	; 57
    401a:	0f 90       	pop	r0
    401c:	08 be       	out	0x38, r0	; 56
    401e:	0f 90       	pop	r0
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	0f 90       	pop	r0
    4024:	1f 90       	pop	r1
    4026:	18 95       	reti

00004028 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    4028:	1f 92       	push	r1
    402a:	0f 92       	push	r0
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	0f 92       	push	r0
    4030:	08 b6       	in	r0, 0x38	; 56
    4032:	0f 92       	push	r0
    4034:	09 b6       	in	r0, 0x39	; 57
    4036:	0f 92       	push	r0
    4038:	0b b6       	in	r0, 0x3b	; 59
    403a:	0f 92       	push	r0
    403c:	11 24       	eor	r1, r1
    403e:	18 be       	out	0x38, r1	; 56
    4040:	19 be       	out	0x39, r1	; 57
    4042:	1b be       	out	0x3b, r1	; 59
    4044:	2f 93       	push	r18
    4046:	3f 93       	push	r19
    4048:	4f 93       	push	r20
    404a:	5f 93       	push	r21
    404c:	6f 93       	push	r22
    404e:	7f 93       	push	r23
    4050:	8f 93       	push	r24
    4052:	9f 93       	push	r25
    4054:	af 93       	push	r26
    4056:	bf 93       	push	r27
    4058:	ef 93       	push	r30
    405a:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    405c:	85 e7       	ldi	r24, 0x75	; 117
    405e:	96 e2       	ldi	r25, 0x26	; 38
    4060:	0e 94 40 30 	call	0x6080	; 0x6080 <TWI_MasterInterruptHandler>
}
    4064:	ff 91       	pop	r31
    4066:	ef 91       	pop	r30
    4068:	bf 91       	pop	r27
    406a:	af 91       	pop	r26
    406c:	9f 91       	pop	r25
    406e:	8f 91       	pop	r24
    4070:	7f 91       	pop	r23
    4072:	6f 91       	pop	r22
    4074:	5f 91       	pop	r21
    4076:	4f 91       	pop	r20
    4078:	3f 91       	pop	r19
    407a:	2f 91       	pop	r18
    407c:	0f 90       	pop	r0
    407e:	0b be       	out	0x3b, r0	; 59
    4080:	0f 90       	pop	r0
    4082:	09 be       	out	0x39, r0	; 57
    4084:	0f 90       	pop	r0
    4086:	08 be       	out	0x38, r0	; 56
    4088:	0f 90       	pop	r0
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	0f 90       	pop	r0
    408e:	1f 90       	pop	r1
    4090:	18 95       	reti

00004092 <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    4092:	0f 93       	push	r16
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	0f 92       	push	r0
    409a:	cd b7       	in	r28, 0x3d	; 61
    409c:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    409e:	2f b7       	in	r18, 0x3f	; 63
    40a0:	29 83       	std	Y+1, r18	; 0x01
  cli();
    40a2:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    40a4:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    40a6:	fc 01       	movw	r30, r24
    40a8:	08 ed       	ldi	r16, 0xD8	; 216
    40aa:	04 bf       	out	0x34, r16	; 52
    40ac:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	8f bf       	out	0x3f, r24	; 63
}
    40b2:	0f 90       	pop	r0
    40b4:	cf 91       	pop	r28
    40b6:	df 91       	pop	r29
    40b8:	0f 91       	pop	r16
    40ba:	08 95       	ret

000040bc <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    40bc:	28 2f       	mov	r18, r24
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	c9 01       	movw	r24, r18
    40c2:	8c 7f       	andi	r24, 0xFC	; 252
    40c4:	89 2b       	or	r24, r25
    40c6:	e1 f4       	brne	.+56     	; 0x4100 <ledWrite+0x44>
    40c8:	86 2f       	mov	r24, r22
    40ca:	8e 7f       	andi	r24, 0xFE	; 254
    40cc:	c9 f4       	brne	.+50     	; 0x4100 <ledWrite+0x44>
    40ce:	2c 5f       	subi	r18, 0xFC	; 252
    40d0:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    40d2:	61 30       	cpi	r22, 0x01	; 1
    40d4:	59 f4       	brne	.+22     	; 0x40ec <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	02 c0       	rjmp	.+4      	; 0x40e0 <ledWrite+0x24>
    40dc:	88 0f       	add	r24, r24
    40de:	99 1f       	adc	r25, r25
    40e0:	2a 95       	dec	r18
    40e2:	e2 f7       	brpl	.-8      	; 0x40dc <ledWrite+0x20>
    40e4:	e0 e0       	ldi	r30, 0x00	; 0
    40e6:	f7 e0       	ldi	r31, 0x07	; 7
    40e8:	86 83       	std	Z+6, r24	; 0x06
    40ea:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <ledWrite+0x3a>
    40f2:	88 0f       	add	r24, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	2a 95       	dec	r18
    40f8:	e2 f7       	brpl	.-8      	; 0x40f2 <ledWrite+0x36>
    40fa:	e0 e0       	ldi	r30, 0x00	; 0
    40fc:	f7 e0       	ldi	r31, 0x07	; 7
    40fe:	85 83       	std	Z+5, r24	; 0x05
    4100:	08 95       	ret

00004102 <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    4102:	28 2f       	mov	r18, r24
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	c9 01       	movw	r24, r18
    4108:	8c 7f       	andi	r24, 0xFC	; 252
    410a:	89 2b       	or	r24, r25
    410c:	61 f4       	brne	.+24     	; 0x4126 <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    410e:	2c 5f       	subi	r18, 0xFC	; 252
    4110:	3f 4f       	sbci	r19, 0xFF	; 255
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	02 c0       	rjmp	.+4      	; 0x411c <ledToggle+0x1a>
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	2a 95       	dec	r18
    411e:	e2 f7       	brpl	.-8      	; 0x4118 <ledToggle+0x16>
    4120:	e0 e0       	ldi	r30, 0x00	; 0
    4122:	f7 e0       	ldi	r31, 0x07	; 7
    4124:	87 83       	std	Z+7, r24	; 0x07
    4126:	08 95       	ret

00004128 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    412c:	a0 e0       	ldi	r26, 0x00	; 0
    412e:	b7 e0       	ldi	r27, 0x07	; 7
    4130:	60 e2       	ldi	r22, 0x20	; 32
    4132:	40 e2       	ldi	r20, 0x20	; 32
    4134:	53 e0       	ldi	r21, 0x03	; 3
    4136:	17 96       	adiw	r26, 0x07	; 7
    4138:	6c 93       	st	X, r22
    413a:	17 97       	sbiw	r26, 0x07	; 7
    413c:	8c ea       	ldi	r24, 0xAC	; 172
    413e:	9d e0       	ldi	r25, 0x0D	; 13
    4140:	fa 01       	movw	r30, r20
    4142:	31 97       	sbiw	r30, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4148:	d9 f7       	brne	.-10     	; 0x4140 <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    414a:	2f 5f       	subi	r18, 0xFF	; 255
    414c:	3f 4f       	sbci	r19, 0xFF	; 255
    414e:	2a 30       	cpi	r18, 0x0A	; 10
    4150:	31 05       	cpc	r19, r1
    4152:	89 f7       	brne	.-30     	; 0x4136 <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    4154:	08 95       	ret

00004156 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    4156:	48 2f       	mov	r20, r24
    4158:	50 e0       	ldi	r21, 0x00	; 0
    415a:	ca 01       	movw	r24, r20
    415c:	8c 7f       	andi	r24, 0xFC	; 252
    415e:	89 2b       	or	r24, r25
    4160:	79 f5       	brne	.+94     	; 0x41c0 <digitalMode+0x6a>
    if (mode == OUTPUT) {
    4162:	66 23       	and	r22, r22
    4164:	b9 f4       	brne	.+46     	; 0x4194 <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    4166:	4c 5f       	subi	r20, 0xFC	; 252
    4168:	5f 4f       	sbci	r21, 0xFF	; 255
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	9c 01       	movw	r18, r24
    4170:	04 2e       	mov	r0, r20
    4172:	02 c0       	rjmp	.+4      	; 0x4178 <digitalMode+0x22>
    4174:	22 0f       	add	r18, r18
    4176:	33 1f       	adc	r19, r19
    4178:	0a 94       	dec	r0
    417a:	e2 f7       	brpl	.-8      	; 0x4174 <digitalMode+0x1e>
    417c:	44 50       	subi	r20, 0x04	; 4
    417e:	50 40       	sbci	r21, 0x00	; 0
    4180:	e0 e2       	ldi	r30, 0x20	; 32
    4182:	f7 e0       	ldi	r31, 0x07	; 7
    4184:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    4186:	02 c0       	rjmp	.+4      	; 0x418c <digitalMode+0x36>
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	4a 95       	dec	r20
    418e:	e2 f7       	brpl	.-8      	; 0x4188 <digitalMode+0x32>
    4190:	81 83       	std	Z+1, r24	; 0x01
    4192:	08 95       	ret
    } else if (mode == INPUT) {
    4194:	61 30       	cpi	r22, 0x01	; 1
    4196:	a1 f4       	brne	.+40     	; 0x41c0 <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	9c 01       	movw	r18, r24
    419e:	04 2e       	mov	r0, r20
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <digitalMode+0x50>
    41a2:	22 0f       	add	r18, r18
    41a4:	33 1f       	adc	r19, r19
    41a6:	0a 94       	dec	r0
    41a8:	e2 f7       	brpl	.-8      	; 0x41a2 <digitalMode+0x4c>
    41aa:	e0 e2       	ldi	r30, 0x20	; 32
    41ac:	f7 e0       	ldi	r31, 0x07	; 7
    41ae:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    41b0:	4c 5f       	subi	r20, 0xFC	; 252
    41b2:	5f 4f       	sbci	r21, 0xFF	; 255
    41b4:	02 c0       	rjmp	.+4      	; 0x41ba <digitalMode+0x64>
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	4a 95       	dec	r20
    41bc:	e2 f7       	brpl	.-8      	; 0x41b6 <digitalMode+0x60>
    41be:	85 83       	std	Z+5, r24	; 0x05
    41c0:	08 95       	ret

000041c2 <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    41c2:	28 2f       	mov	r18, r24
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	c9 01       	movw	r24, r18
    41c8:	8c 7f       	andi	r24, 0xFC	; 252
    41ca:	89 2b       	or	r24, r25
    41cc:	11 f0       	breq	.+4      	; 0x41d2 <digitalRead+0x10>
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    41d2:	80 91 28 07 	lds	r24, 0x0728
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <digitalRead+0x1c>
    41da:	95 95       	asr	r25
    41dc:	87 95       	ror	r24
    41de:	2a 95       	dec	r18
    41e0:	e2 f7       	brpl	.-8      	; 0x41da <digitalRead+0x18>
    41e2:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    41e4:	08 95       	ret

000041e6 <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	c9 01       	movw	r24, r18
    41ec:	8c 7f       	andi	r24, 0xFC	; 252
    41ee:	89 2b       	or	r24, r25
    41f0:	d1 f4       	brne	.+52     	; 0x4226 <digitalWrite+0x40>
    41f2:	86 2f       	mov	r24, r22
    41f4:	8e 7f       	andi	r24, 0xFE	; 254
    41f6:	b9 f4       	brne	.+46     	; 0x4226 <digitalWrite+0x40>
    if (value == 1) {
    41f8:	61 30       	cpi	r22, 0x01	; 1
    41fa:	59 f4       	brne	.+22     	; 0x4212 <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <digitalWrite+0x20>
    4202:	88 0f       	add	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	2a 95       	dec	r18
    4208:	e2 f7       	brpl	.-8      	; 0x4202 <digitalWrite+0x1c>
    420a:	e0 e2       	ldi	r30, 0x20	; 32
    420c:	f7 e0       	ldi	r31, 0x07	; 7
    420e:	85 83       	std	Z+5, r24	; 0x05
    4210:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	02 c0       	rjmp	.+4      	; 0x421c <digitalWrite+0x36>
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	2a 95       	dec	r18
    421e:	e2 f7       	brpl	.-8      	; 0x4218 <digitalWrite+0x32>
    4220:	e0 e2       	ldi	r30, 0x20	; 32
    4222:	f7 e0       	ldi	r31, 0x07	; 7
    4224:	86 83       	std	Z+6, r24	; 0x06
    4226:	08 95       	ret

00004228 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    4228:	28 2f       	mov	r18, r24
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	c9 01       	movw	r24, r18
    422e:	8c 7f       	andi	r24, 0xFC	; 252
    4230:	89 2b       	or	r24, r25
    4232:	51 f4       	brne	.+20     	; 0x4248 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	02 c0       	rjmp	.+4      	; 0x423e <digitalToggle+0x16>
    423a:	88 0f       	add	r24, r24
    423c:	99 1f       	adc	r25, r25
    423e:	2a 95       	dec	r18
    4240:	e2 f7       	brpl	.-8      	; 0x423a <digitalToggle+0x12>
    4242:	e0 e2       	ldi	r30, 0x20	; 32
    4244:	f7 e0       	ldi	r31, 0x07	; 7
    4246:	87 83       	std	Z+7, r24	; 0x07
    4248:	08 95       	ret

0000424a <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    424a:	a2 e0       	ldi	r26, 0x02	; 2
    424c:	b0 e0       	ldi	r27, 0x00	; 0
    424e:	eb e2       	ldi	r30, 0x2B	; 43
    4250:	f1 e2       	ldi	r31, 0x21	; 33
    4252:	0c 94 b3 57 	jmp	0xaf66	; 0xaf66 <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    4256:	28 2f       	mov	r18, r24
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	c9 01       	movw	r24, r18
    425c:	88 7f       	andi	r24, 0xF8	; 248
    425e:	89 2b       	or	r24, r25
    4260:	19 f0       	breq	.+6      	; 0x4268 <analogRead+0x1e>
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	49 c0       	rjmp	.+146    	; 0x42fa <analogRead+0xb0>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    4268:	80 e1       	ldi	r24, 0x10	; 16
    426a:	e0 e4       	ldi	r30, 0x40	; 64
    426c:	f6 e0       	ldi	r31, 0x06	; 6
    426e:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    4270:	27 70       	andi	r18, 0x07	; 7
    4272:	30 70       	andi	r19, 0x00	; 0
    4274:	22 0f       	add	r18, r18
    4276:	33 1f       	adc	r19, r19
    4278:	22 0f       	add	r18, r18
    427a:	33 1f       	adc	r19, r19
    427c:	82 2f       	mov	r24, r18
    427e:	80 68       	ori	r24, 0x80	; 128
    4280:	e0 ec       	ldi	r30, 0xC0	; 192
    4282:	f8 e0       	ldi	r31, 0x08	; 8
    4284:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4286:	80 91 c2 08 	lds	r24, 0x08C2
    428a:	87 ff       	sbrs	r24, 7
    428c:	fc cf       	rjmp	.-8      	; 0x4286 <analogRead+0x3c>
    SPIC.DATA = 0x10;
    428e:	80 e1       	ldi	r24, 0x10	; 16
    4290:	e0 ec       	ldi	r30, 0xC0	; 192
    4292:	f8 e0       	ldi	r31, 0x08	; 8
    4294:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4296:	80 91 c2 08 	lds	r24, 0x08C2
    429a:	87 ff       	sbrs	r24, 7
    429c:	fc cf       	rjmp	.-8      	; 0x4296 <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    429e:	e0 e4       	ldi	r30, 0x40	; 64
    42a0:	f6 e0       	ldi	r31, 0x06	; 6
    42a2:	80 e1       	ldi	r24, 0x10	; 16
    42a4:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    42a6:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    42a8:	e0 ec       	ldi	r30, 0xC0	; 192
    42aa:	f8 e0       	ldi	r31, 0x08	; 8
    42ac:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    42ae:	80 91 c2 08 	lds	r24, 0x08C2
    42b2:	87 ff       	sbrs	r24, 7
    42b4:	fc cf       	rjmp	.-8      	; 0x42ae <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    42b6:	de 01       	movw	r26, r28
    42b8:	11 96       	adiw	r26, 0x01	; 1
    42ba:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    42be:	e0 ec       	ldi	r30, 0xC0	; 192
    42c0:	f8 e0       	ldi	r31, 0x08	; 8
    42c2:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    42c4:	80 91 c2 08 	lds	r24, 0x08C2
    42c8:	87 ff       	sbrs	r24, 7
    42ca:	fc cf       	rjmp	.-8      	; 0x42c4 <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    42cc:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    42d0:	11 96       	adiw	r26, 0x01	; 1
    42d2:	9c 93       	st	X, r25
    42d4:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    42d6:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    42d8:	80 e1       	ldi	r24, 0x10	; 16
    42da:	e0 e4       	ldi	r30, 0x40	; 64
    42dc:	f6 e0       	ldi	r31, 0x06	; 6
    42de:	85 83       	std	Z+5, r24	; 0x05
	
	//in this way, 0v ->0, 5V -> 2047, 10V->4095
    if (w1 & 1 << 12) {
    42e0:	89 81       	ldd	r24, Y+1	; 0x01
    42e2:	9a 81       	ldd	r25, Y+2	; 0x02
    42e4:	94 ff       	sbrs	r25, 4
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <analogRead+0xa2>
      w1 = (w1 & 0x0fff) >> 1;
    42e8:	9f 70       	andi	r25, 0x0F	; 15
    42ea:	01 c0       	rjmp	.+2      	; 0x42ee <analogRead+0xa4>
    } 
	else{
	  w1 = (w1 | 0x1000) >> 1;
    42ec:	90 61       	ori	r25, 0x10	; 16
    42ee:	95 95       	asr	r25
    42f0:	87 95       	ror	r24
    42f2:	89 83       	std	Y+1, r24	; 0x01
    42f4:	9a 83       	std	Y+2, r25	; 0x02
	}
    return w1;
    42f6:	29 81       	ldd	r18, Y+1	; 0x01
    42f8:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else {
    return 0;
  }
}
    42fa:	c9 01       	movw	r24, r18
    42fc:	22 96       	adiw	r28, 0x02	; 2
    42fe:	e2 e0       	ldi	r30, 0x02	; 2
    4300:	0c 94 cf 57 	jmp	0xaf9e	; 0xaf9e <__epilogue_restores__+0x20>

00004304 <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    4304:	28 2f       	mov	r18, r24
  if (!((ch & ~3) || ((value & ~2047) && (~value & ~2047)))) {
    4306:	8c 7f       	andi	r24, 0xFC	; 252
    4308:	b9 f5       	brne	.+110    	; 0x4378 <analogWrite+0x74>
    430a:	cb 01       	movw	r24, r22
    430c:	80 70       	andi	r24, 0x00	; 0
    430e:	98 7f       	andi	r25, 0xF8	; 248
    4310:	89 2b       	or	r24, r25
    4312:	39 f0       	breq	.+14     	; 0x4322 <analogWrite+0x1e>
    4314:	cb 01       	movw	r24, r22
    4316:	80 95       	com	r24
    4318:	90 95       	com	r25
    431a:	80 70       	andi	r24, 0x00	; 0
    431c:	98 7f       	andi	r25, 0xF8	; 248
    431e:	89 2b       	or	r24, r25
    4320:	59 f5       	brne	.+86     	; 0x4378 <analogWrite+0x74>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    4322:	80 e1       	ldi	r24, 0x10	; 16
    4324:	e0 e6       	ldi	r30, 0x60	; 96
    4326:	f6 e0       	ldi	r31, 0x06	; 6
    4328:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    432a:	27 70       	andi	r18, 0x07	; 7
    432c:	e0 ec       	ldi	r30, 0xC0	; 192
    432e:	f9 e0       	ldi	r31, 0x09	; 9
    4330:	23 83       	std	Z+3, r18	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4332:	80 91 c2 09 	lds	r24, 0x09C2
    4336:	87 ff       	sbrs	r24, 7
    4338:	fc cf       	rjmp	.-8      	; 0x4332 <analogWrite+0x2e>
    SPID.DATA = (uint8_t)((value & 0xff0) >> 4);
    433a:	cb 01       	movw	r24, r22
    433c:	80 7f       	andi	r24, 0xF0	; 240
    433e:	9f 70       	andi	r25, 0x0F	; 15
    4340:	e4 e0       	ldi	r30, 0x04	; 4
    4342:	95 95       	asr	r25
    4344:	87 95       	ror	r24
    4346:	ea 95       	dec	r30
    4348:	e1 f7       	brne	.-8      	; 0x4342 <analogWrite+0x3e>
    434a:	e0 ec       	ldi	r30, 0xC0	; 192
    434c:	f9 e0       	ldi	r31, 0x09	; 9
    434e:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4350:	80 91 c2 09 	lds	r24, 0x09C2
    4354:	87 ff       	sbrs	r24, 7
    4356:	fc cf       	rjmp	.-8      	; 0x4350 <analogWrite+0x4c>
    SPID.DATA = (uint8_t)((value & 0xf) << 4);
    4358:	54 e0       	ldi	r21, 0x04	; 4
    435a:	66 0f       	add	r22, r22
    435c:	77 1f       	adc	r23, r23
    435e:	5a 95       	dec	r21
    4360:	e1 f7       	brne	.-8      	; 0x435a <analogWrite+0x56>
    4362:	e0 ec       	ldi	r30, 0xC0	; 192
    4364:	f9 e0       	ldi	r31, 0x09	; 9
    4366:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4368:	80 91 c2 09 	lds	r24, 0x09C2
    436c:	87 ff       	sbrs	r24, 7
    436e:	fc cf       	rjmp	.-8      	; 0x4368 <analogWrite+0x64>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    4370:	80 e1       	ldi	r24, 0x10	; 16
    4372:	e0 e6       	ldi	r30, 0x60	; 96
    4374:	f6 e0       	ldi	r31, 0x06	; 6
    4376:	85 83       	std	Z+5, r24	; 0x05
    4378:	08 95       	ret

0000437a <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    437a:	a0 e0       	ldi	r26, 0x00	; 0
    437c:	b0 e0       	ldi	r27, 0x00	; 0
    437e:	e3 ec       	ldi	r30, 0xC3	; 195
    4380:	f1 e2       	ldi	r31, 0x21	; 33
    4382:	0c 94 a7 57 	jmp	0xaf4e	; 0xaf4e <__prologue_saves__+0x8>
    4386:	b8 2e       	mov	r11, r24
    4388:	c0 e0       	ldi	r28, 0x00	; 0
    438a:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    438c:	00 e2       	ldi	r16, 0x20	; 32
    438e:	17 e0       	ldi	r17, 0x07	; 7
    4390:	66 24       	eor	r6, r6
    4392:	63 94       	inc	r6
    4394:	22 e0       	ldi	r18, 0x02	; 2
    4396:	72 2e       	mov	r7, r18
    4398:	94 e0       	ldi	r25, 0x04	; 4
    439a:	89 2e       	mov	r8, r25
    439c:	88 e0       	ldi	r24, 0x08	; 8
    439e:	98 2e       	mov	r9, r24
    43a0:	b0 e2       	ldi	r27, 0x20	; 32
    43a2:	eb 2e       	mov	r14, r27
    43a4:	b3 e0       	ldi	r27, 0x03	; 3
    43a6:	fb 2e       	mov	r15, r27

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    43a8:	c1 2c       	mov	r12, r1
    43aa:	a7 e0       	ldi	r26, 0x07	; 7
    43ac:	da 2e       	mov	r13, r26
    43ae:	f0 e2       	ldi	r31, 0x20	; 32
    43b0:	af 2e       	mov	r10, r31

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    43b2:	f8 01       	movw	r30, r16
    43b4:	67 82       	std	Z+7, r6	; 0x07
    43b6:	77 82       	std	Z+7, r7	; 0x07
    43b8:	87 82       	std	Z+7, r8	; 0x07
    43ba:	97 82       	std	Z+7, r9	; 0x07
    43bc:	88 ee       	ldi	r24, 0xE8	; 232
    43be:	93 e0       	ldi	r25, 0x03	; 3
    43c0:	f7 01       	movw	r30, r14
    43c2:	31 97       	sbiw	r30, 0x01	; 1
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43c8:	d9 f7       	brne	.-10     	; 0x43c0 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    43ca:	8b 2d       	mov	r24, r11
    43cc:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    43d0:	bc 01       	movw	r22, r24
    43d2:	28 ee       	ldi	r18, 0xE8	; 232
    43d4:	33 e0       	ldi	r19, 0x03	; 3
    43d6:	f7 01       	movw	r30, r14
    43d8:	31 97       	sbiw	r30, 0x01	; 1
    43da:	f1 f7       	brne	.-4      	; 0x43d8 <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43dc:	21 50       	subi	r18, 0x01	; 1
    43de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e0:	d1 f7       	brne	.-12     	; 0x43d6 <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    if (k % 2)
    43e8:	c0 ff       	sbrs	r28, 0
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    43ec:	f6 01       	movw	r30, r12
    43ee:	a7 82       	std	Z+7, r10	; 0x07
    43f0:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    43f2:	cc 33       	cpi	r28, 0x3C	; 60
    43f4:	d1 05       	cpc	r29, r1
    43f6:	e9 f6       	brne	.-70     	; 0x43b2 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per triangle wave pulse
  }
}
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	ee e0       	ldi	r30, 0x0E	; 14
    43fe:	0c 94 c3 57 	jmp	0xaf86	; 0xaf86 <__epilogue_restores__+0x8>

00004402 <SystemReset>:

void SystemReset(void) {
    4402:	0f 93       	push	r16
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	0f 92       	push	r0
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    440e:	8f b7       	in	r24, 0x3f	; 63
    4410:	89 83       	std	Y+1, r24	; 0x01
  cli();
    4412:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    4414:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    4416:	21 e0       	ldi	r18, 0x01	; 1
    4418:	89 e7       	ldi	r24, 0x79	; 121
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	fc 01       	movw	r30, r24
    441e:	08 ed       	ldi	r16, 0xD8	; 216
    4420:	04 bf       	out	0x34, r16	; 52
    4422:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    4424:	89 81       	ldd	r24, Y+1	; 0x01
    4426:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    4428:	0f 90       	pop	r0
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	0f 91       	pop	r16
    4430:	08 95       	ret

00004432 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    4432:	a0 e0       	ldi	r26, 0x00	; 0
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	ef e1       	ldi	r30, 0x1F	; 31
    4438:	f2 e2       	ldi	r31, 0x22	; 34
    443a:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__+0xc>
    443e:	98 2e       	mov	r9, r24
    4440:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4442:	60 ea       	ldi	r22, 0xA0	; 160
    4444:	a6 2e       	mov	r10, r22
    4446:	6f e0       	ldi	r22, 0x0F	; 15
    4448:	b6 2e       	mov	r11, r22
    444a:	50 e8       	ldi	r21, 0x80	; 128
    444c:	c5 2e       	mov	r12, r21
    444e:	5e e3       	ldi	r21, 0x3E	; 62
    4450:	d5 2e       	mov	r13, r21

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4452:	e1 2c       	mov	r14, r1
    4454:	47 e0       	ldi	r20, 0x07	; 7
    4456:	f4 2e       	mov	r15, r20
    4458:	30 e2       	ldi	r19, 0x20	; 32
    445a:	83 2e       	mov	r8, r19
    445c:	1d c0       	rjmp	.+58     	; 0x4498 <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    445e:	14 36       	cpi	r17, 0x64	; 100
    4460:	10 f4       	brcc	.+4      	; 0x4466 <test_ADC+0x34>
    4462:	be 01       	movw	r22, r28
    4464:	03 c0       	rjmp	.+6      	; 0x446c <test_ADC+0x3a>
    4466:	b5 01       	movw	r22, r10
    4468:	6c 1b       	sub	r22, r28
    446a:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    446c:	80 e0       	ldi	r24, 0x00	; 0
    446e:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    4472:	89 2d       	mov	r24, r9
    4474:	0e 94 25 21 	call	0x424a	; 0x424a <analogRead>
    4478:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	0e 94 82 21 	call	0x4304	; 0x4304 <analogWrite>
    4480:	c6 01       	movw	r24, r12
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    4486:	1f 5f       	subi	r17, 0xFF	; 255
    4488:	64 96       	adiw	r28, 0x14	; 20
    448a:	18 3c       	cpi	r17, 0xC8	; 200
    448c:	41 f7       	brne	.-48     	; 0x445e <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    448e:	f7 01       	movw	r30, r14
    4490:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    4492:	0f 5f       	subi	r16, 0xFF	; 255
    4494:	0e 31       	cpi	r16, 0x1E	; 30
    4496:	21 f0       	breq	.+8      	; 0x44a0 <test_ADC+0x6e>
    4498:	10 e0       	ldi	r17, 0x00	; 0
    449a:	c0 e0       	ldi	r28, 0x00	; 0
    449c:	d0 e0       	ldi	r29, 0x00	; 0
    449e:	df cf       	rjmp	.-66     	; 0x445e <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	ec e0       	ldi	r30, 0x0C	; 12
    44a6:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__epilogue_restores__+0xc>

000044aa <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    44aa:	bc 01       	movw	r22, r24
    44ac:	2d e2       	ldi	r18, 0x2D	; 45
    44ae:	3c e0       	ldi	r19, 0x0C	; 12
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	50 e0       	ldi	r21, 0x00	; 0
    44b4:	08 c0       	rjmp	.+16     	; 0x44c6 <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    44b6:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    44b8:	2f 5f       	subi	r18, 0xFF	; 255
    44ba:	3f 4f       	sbci	r19, 0xFF	; 255
    44bc:	e4 91       	lpm	r30, Z+
    44be:	ee 23       	and	r30, r30
    44c0:	d1 f7       	brne	.-12     	; 0x44b6 <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    44c2:	4f 5f       	subi	r20, 0xFF	; 255
    44c4:	5f 4f       	sbci	r21, 0xFF	; 255
    44c6:	46 17       	cp	r20, r22
    44c8:	57 07       	cpc	r21, r23
    44ca:	21 f0       	breq	.+8      	; 0x44d4 <put_rc+0x2a>
    44cc:	f9 01       	movw	r30, r18
    44ce:	84 91       	lpm	r24, Z+
    44d0:	88 23       	and	r24, r24
    44d2:	89 f7       	brne	.-30     	; 0x44b6 <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    44d4:	00 d0       	rcall	.+0      	; 0x44d6 <put_rc+0x2c>
    44d6:	0f 92       	push	r0
    44d8:	89 e2       	ldi	r24, 0x29	; 41
    44da:	9c e0       	ldi	r25, 0x0C	; 12
    44dc:	ed b7       	in	r30, 0x3d	; 61
    44de:	fe b7       	in	r31, 0x3e	; 62
    44e0:	81 83       	std	Z+1, r24	; 0x01
    44e2:	92 83       	std	Z+2, r25	; 0x02
    44e4:	23 83       	std	Z+3, r18	; 0x03
    44e6:	34 83       	std	Z+4, r19	; 0x04
    44e8:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
}
    44f4:	08 95       	ret

000044f6 <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    44f6:	a0 e0       	ldi	r26, 0x00	; 0
    44f8:	b0 e0       	ldi	r27, 0x00	; 0
    44fa:	e1 e8       	ldi	r30, 0x81	; 129
    44fc:	f2 e2       	ldi	r31, 0x22	; 34
    44fe:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0xe>
    4502:	5c 01       	movw	r10, r24
    4504:	6a 01       	movw	r12, r20
    4506:	7b 01       	movw	r14, r22
    4508:	92 2e       	mov	r9, r18
    450a:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    450c:	8f e1       	ldi	r24, 0x1F	; 31
    450e:	9f e0       	ldi	r25, 0x0F	; 15
    4510:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    buff[0] = 'g';
    4514:	87 e6       	ldi	r24, 0x67	; 103
    4516:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4518:	bb 27       	eor	r27, r27
    451a:	af 2d       	mov	r26, r15
    451c:	9e 2d       	mov	r25, r14
    451e:	8d 2d       	mov	r24, r13
    4520:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4522:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    4524:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4526:	85 e4       	ldi	r24, 0x45	; 69
    4528:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    452a:	c5 01       	movw	r24, r10
    452c:	60 e7       	ldi	r22, 0x70	; 112
    452e:	a8 01       	movw	r20, r16
    4530:	25 e0       	ldi	r18, 0x05	; 5
    4532:	09 2d       	mov	r16, r9
    4534:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4538:	d5 01       	movw	r26, r10
    453a:	1d 96       	adiw	r26, 0x0d	; 13
    453c:	8c 91       	ld	r24, X
    453e:	1d 97       	sbiw	r26, 0x0d	; 13
    4540:	88 23       	and	r24, r24
    4542:	d1 f7       	brne	.-12     	; 0x4538 <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4544:	1e 96       	adiw	r26, 0x0e	; 14
    4546:	8c 91       	ld	r24, X
    4548:	1e 97       	sbiw	r26, 0x0e	; 14
    454a:	81 30       	cpi	r24, 0x01	; 1
    454c:	b9 f0       	breq	.+46     	; 0x457c <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    454e:	1e 96       	adiw	r26, 0x0e	; 14
    4550:	2c 91       	ld	r18, X
    4552:	00 d0       	rcall	.+0      	; 0x4554 <verifyEEPage+0x5e>
    4554:	0f 92       	push	r0
    4556:	ed b7       	in	r30, 0x3d	; 61
    4558:	fe b7       	in	r31, 0x3e	; 62
    455a:	31 96       	adiw	r30, 0x01	; 1
    455c:	82 e0       	ldi	r24, 0x02	; 2
    455e:	9f e0       	ldi	r25, 0x0F	; 15
    4560:	ad b7       	in	r26, 0x3d	; 61
    4562:	be b7       	in	r27, 0x3e	; 62
    4564:	11 96       	adiw	r26, 0x01	; 1
    4566:	8d 93       	st	X+, r24
    4568:	9c 93       	st	X, r25
    456a:	12 97       	sbiw	r26, 0x02	; 2
    456c:	22 83       	std	Z+2, r18	; 0x02
    456e:	13 82       	std	Z+3, r1	; 0x03
    4570:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    4574:	0f 90       	pop	r0
    4576:	0f 90       	pop	r0
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	de 01       	movw	r26, r28
    457e:	31 e0       	ldi	r19, 0x01	; 1
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	0d c0       	rjmp	.+26     	; 0x459e <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4584:	e5 01       	movw	r28, r10
    4586:	ed 81       	ldd	r30, Y+5	; 0x05
    4588:	fe 81       	ldd	r31, Y+6	; 0x06
    458a:	e2 0f       	add	r30, r18
    458c:	f1 1d       	adc	r31, r1
    458e:	90 81       	ld	r25, Z
    4590:	15 96       	adiw	r26, 0x05	; 5
    4592:	8c 91       	ld	r24, X
    4594:	15 97       	sbiw	r26, 0x05	; 5
    4596:	98 13       	cpse	r25, r24
    4598:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    459a:	2f 5f       	subi	r18, 0xFF	; 255
    459c:	11 96       	adiw	r26, 0x01	; 1
    459e:	29 15       	cp	r18, r9
    45a0:	88 f3       	brcs	.-30     	; 0x4584 <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    45a2:	83 2f       	mov	r24, r19
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	eb e0       	ldi	r30, 0x0B	; 11
    45ac:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0xe>

000045b0 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    45b0:	a0 e0       	ldi	r26, 0x00	; 0
    45b2:	b0 e0       	ldi	r27, 0x00	; 0
    45b4:	ee ed       	ldi	r30, 0xDE	; 222
    45b6:	f2 e2       	ldi	r31, 0x22	; 34
    45b8:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0xe>
    45bc:	5c 01       	movw	r10, r24
    45be:	6a 01       	movw	r12, r20
    45c0:	7b 01       	movw	r14, r22
    45c2:	92 2e       	mov	r9, r18
    45c4:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    45c6:	8e e3       	ldi	r24, 0x3E	; 62
    45c8:	9f e0       	ldi	r25, 0x0F	; 15
    45ca:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    buff[0] = 'g';
    45ce:	87 e6       	ldi	r24, 0x67	; 103
    45d0:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    45d2:	bb 27       	eor	r27, r27
    45d4:	af 2d       	mov	r26, r15
    45d6:	9e 2d       	mov	r25, r14
    45d8:	8d 2d       	mov	r24, r13
    45da:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    45dc:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    45de:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    45e0:	85 e4       	ldi	r24, 0x45	; 69
    45e2:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    45e4:	c5 01       	movw	r24, r10
    45e6:	60 e7       	ldi	r22, 0x70	; 112
    45e8:	a8 01       	movw	r20, r16
    45ea:	25 e0       	ldi	r18, 0x05	; 5
    45ec:	09 2d       	mov	r16, r9
    45ee:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    45f2:	d5 01       	movw	r26, r10
    45f4:	1d 96       	adiw	r26, 0x0d	; 13
    45f6:	8c 91       	ld	r24, X
    45f8:	1d 97       	sbiw	r26, 0x0d	; 13
    45fa:	88 23       	and	r24, r24
    45fc:	d1 f7       	brne	.-12     	; 0x45f2 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    45fe:	1e 96       	adiw	r26, 0x0e	; 14
    4600:	8c 91       	ld	r24, X
    4602:	1e 97       	sbiw	r26, 0x0e	; 14
    4604:	81 30       	cpi	r24, 0x01	; 1
    4606:	b9 f0       	breq	.+46     	; 0x4636 <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4608:	1e 96       	adiw	r26, 0x0e	; 14
    460a:	2c 91       	ld	r18, X
    460c:	00 d0       	rcall	.+0      	; 0x460e <readEEPage+0x5e>
    460e:	0f 92       	push	r0
    4610:	ed b7       	in	r30, 0x3d	; 61
    4612:	fe b7       	in	r31, 0x3e	; 62
    4614:	31 96       	adiw	r30, 0x01	; 1
    4616:	81 e2       	ldi	r24, 0x21	; 33
    4618:	9f e0       	ldi	r25, 0x0F	; 15
    461a:	ad b7       	in	r26, 0x3d	; 61
    461c:	be b7       	in	r27, 0x3e	; 62
    461e:	11 96       	adiw	r26, 0x01	; 1
    4620:	8d 93       	st	X+, r24
    4622:	9c 93       	st	X, r25
    4624:	12 97       	sbiw	r26, 0x02	; 2
    4626:	22 83       	std	Z+2, r18	; 0x02
    4628:	13 82       	std	Z+3, r1	; 0x03
    462a:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    462e:	0f 90       	pop	r0
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
    4634:	0f 90       	pop	r0
    4636:	de 01       	movw	r26, r28
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	0a c0       	rjmp	.+20     	; 0x4650 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    463c:	e5 01       	movw	r28, r10
    463e:	ed 81       	ldd	r30, Y+5	; 0x05
    4640:	fe 81       	ldd	r31, Y+6	; 0x06
    4642:	e9 0f       	add	r30, r25
    4644:	f1 1d       	adc	r31, r1
    4646:	80 81       	ld	r24, Z
    4648:	14 96       	adiw	r26, 0x04	; 4
    464a:	8c 93       	st	X, r24
    464c:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    464e:	9f 5f       	subi	r25, 0xFF	; 255
    4650:	11 96       	adiw	r26, 0x01	; 1
    4652:	99 15       	cp	r25, r9
    4654:	98 f3       	brcs	.-26     	; 0x463c <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	eb e0       	ldi	r30, 0x0B	; 11
    465c:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0xe>

00004660 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4660:	a0 e0       	ldi	r26, 0x00	; 0
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	e6 e3       	ldi	r30, 0x36	; 54
    4666:	f3 e2       	ldi	r31, 0x23	; 35
    4668:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x12>
    466c:	ec 01       	movw	r28, r24
    466e:	6a 01       	movw	r12, r20
    4670:	7b 01       	movw	r14, r22
    4672:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    4674:	8f e5       	ldi	r24, 0x5F	; 95
    4676:	9f e0       	ldi	r25, 0x0F	; 15
    4678:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    buff[0] = 'B';
    467c:	82 e4       	ldi	r24, 0x42	; 66
    467e:	d8 01       	movw	r26, r16
    4680:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4682:	bb 27       	eor	r27, r27
    4684:	af 2d       	mov	r26, r15
    4686:	9e 2d       	mov	r25, r14
    4688:	8d 2d       	mov	r24, r13
    468a:	f8 01       	movw	r30, r16
    468c:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    468e:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    4690:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    4692:	85 e4       	ldi	r24, 0x45	; 69
    4694:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    4696:	f5 e0       	ldi	r31, 0x05	; 5
    4698:	bf 0e       	add	r11, r31
    469a:	ce 01       	movw	r24, r28
    469c:	60 e7       	ldi	r22, 0x70	; 112
    469e:	a8 01       	movw	r20, r16
    46a0:	2b 2d       	mov	r18, r11
    46a2:	00 e0       	ldi	r16, 0x00	; 0
    46a4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    46a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46aa:	88 23       	and	r24, r24
    46ac:	e9 f7       	brne	.-6      	; 0x46a8 <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    46ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    46b0:	81 30       	cpi	r24, 0x01	; 1
    46b2:	b1 f0       	breq	.+44     	; 0x46e0 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    46b4:	2e 85       	ldd	r18, Y+14	; 0x0e
    46b6:	00 d0       	rcall	.+0      	; 0x46b8 <progEEPage+0x58>
    46b8:	0f 92       	push	r0
    46ba:	ed b7       	in	r30, 0x3d	; 61
    46bc:	fe b7       	in	r31, 0x3e	; 62
    46be:	31 96       	adiw	r30, 0x01	; 1
    46c0:	80 e4       	ldi	r24, 0x40	; 64
    46c2:	9f e0       	ldi	r25, 0x0F	; 15
    46c4:	ad b7       	in	r26, 0x3d	; 61
    46c6:	be b7       	in	r27, 0x3e	; 62
    46c8:	11 96       	adiw	r26, 0x01	; 1
    46ca:	8d 93       	st	X+, r24
    46cc:	9c 93       	st	X, r25
    46ce:	12 97       	sbiw	r26, 0x02	; 2
    46d0:	22 83       	std	Z+2, r18	; 0x02
    46d2:	13 82       	std	Z+3, r1	; 0x03
    46d4:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    }
}
    46e0:	cd b7       	in	r28, 0x3d	; 61
    46e2:	de b7       	in	r29, 0x3e	; 62
    46e4:	e9 e0       	ldi	r30, 0x09	; 9
    46e6:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x12>

000046ea <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    46ea:	a0 e0       	ldi	r26, 0x00	; 0
    46ec:	b0 e0       	ldi	r27, 0x00	; 0
    46ee:	eb e7       	ldi	r30, 0x7B	; 123
    46f0:	f3 e2       	ldi	r31, 0x23	; 35
    46f2:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0xe>
    46f6:	5c 01       	movw	r10, r24
    46f8:	6a 01       	movw	r12, r20
    46fa:	7b 01       	movw	r14, r22
    46fc:	92 2e       	mov	r9, r18
    46fe:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4700:	8e e7       	ldi	r24, 0x7E	; 126
    4702:	9f e0       	ldi	r25, 0x0F	; 15
    4704:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    buff[0] = 'g';
    4708:	87 e6       	ldi	r24, 0x67	; 103
    470a:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    470c:	bb 27       	eor	r27, r27
    470e:	af 2d       	mov	r26, r15
    4710:	9e 2d       	mov	r25, r14
    4712:	8d 2d       	mov	r24, r13
    4714:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4716:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4718:	89 2d       	mov	r24, r9
    471a:	86 95       	lsr	r24
    471c:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    471e:	86 e4       	ldi	r24, 0x46	; 70
    4720:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4722:	c5 01       	movw	r24, r10
    4724:	60 e7       	ldi	r22, 0x70	; 112
    4726:	a8 01       	movw	r20, r16
    4728:	25 e0       	ldi	r18, 0x05	; 5
    472a:	09 2d       	mov	r16, r9
    472c:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4730:	d5 01       	movw	r26, r10
    4732:	1d 96       	adiw	r26, 0x0d	; 13
    4734:	8c 91       	ld	r24, X
    4736:	1d 97       	sbiw	r26, 0x0d	; 13
    4738:	88 23       	and	r24, r24
    473a:	d1 f7       	brne	.-12     	; 0x4730 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    473c:	1e 96       	adiw	r26, 0x0e	; 14
    473e:	8c 91       	ld	r24, X
    4740:	1e 97       	sbiw	r26, 0x0e	; 14
    4742:	81 30       	cpi	r24, 0x01	; 1
    4744:	b9 f0       	breq	.+46     	; 0x4774 <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4746:	1e 96       	adiw	r26, 0x0e	; 14
    4748:	2c 91       	ld	r18, X
    474a:	00 d0       	rcall	.+0      	; 0x474c <verifyPage+0x62>
    474c:	0f 92       	push	r0
    474e:	ed b7       	in	r30, 0x3d	; 61
    4750:	fe b7       	in	r31, 0x3e	; 62
    4752:	31 96       	adiw	r30, 0x01	; 1
    4754:	81 e6       	ldi	r24, 0x61	; 97
    4756:	9f e0       	ldi	r25, 0x0F	; 15
    4758:	ad b7       	in	r26, 0x3d	; 61
    475a:	be b7       	in	r27, 0x3e	; 62
    475c:	11 96       	adiw	r26, 0x01	; 1
    475e:	8d 93       	st	X+, r24
    4760:	9c 93       	st	X, r25
    4762:	12 97       	sbiw	r26, 0x02	; 2
    4764:	22 83       	std	Z+2, r18	; 0x02
    4766:	13 82       	std	Z+3, r1	; 0x03
    4768:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    476c:	0f 90       	pop	r0
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	de 01       	movw	r26, r28
    4776:	31 e0       	ldi	r19, 0x01	; 1
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	0d c0       	rjmp	.+26     	; 0x4796 <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    477c:	e5 01       	movw	r28, r10
    477e:	ed 81       	ldd	r30, Y+5	; 0x05
    4780:	fe 81       	ldd	r31, Y+6	; 0x06
    4782:	e2 0f       	add	r30, r18
    4784:	f1 1d       	adc	r31, r1
    4786:	90 81       	ld	r25, Z
    4788:	15 96       	adiw	r26, 0x05	; 5
    478a:	8c 91       	ld	r24, X
    478c:	15 97       	sbiw	r26, 0x05	; 5
    478e:	98 13       	cpse	r25, r24
    4790:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4792:	2f 5f       	subi	r18, 0xFF	; 255
    4794:	11 96       	adiw	r26, 0x01	; 1
    4796:	29 15       	cp	r18, r9
    4798:	88 f3       	brcs	.-30     	; 0x477c <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    479a:	83 2f       	mov	r24, r19
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	cd b7       	in	r28, 0x3d	; 61
    47a0:	de b7       	in	r29, 0x3e	; 62
    47a2:	eb e0       	ldi	r30, 0x0B	; 11
    47a4:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0xe>

000047a8 <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    47a8:	a0 e0       	ldi	r26, 0x00	; 0
    47aa:	b0 e0       	ldi	r27, 0x00	; 0
    47ac:	ea ed       	ldi	r30, 0xDA	; 218
    47ae:	f3 e2       	ldi	r31, 0x23	; 35
    47b0:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0xe>
    47b4:	5c 01       	movw	r10, r24
    47b6:	6a 01       	movw	r12, r20
    47b8:	7b 01       	movw	r14, r22
    47ba:	92 2e       	mov	r9, r18
    47bc:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    47be:	8d e9       	ldi	r24, 0x9D	; 157
    47c0:	9f e0       	ldi	r25, 0x0F	; 15
    47c2:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    buff[0] = 'g';
    47c6:	87 e6       	ldi	r24, 0x67	; 103
    47c8:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    47ca:	bb 27       	eor	r27, r27
    47cc:	af 2d       	mov	r26, r15
    47ce:	9e 2d       	mov	r25, r14
    47d0:	8d 2d       	mov	r24, r13
    47d2:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    47d4:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    47d6:	89 2d       	mov	r24, r9
    47d8:	86 95       	lsr	r24
    47da:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    47dc:	86 e4       	ldi	r24, 0x46	; 70
    47de:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    47e0:	c5 01       	movw	r24, r10
    47e2:	60 e7       	ldi	r22, 0x70	; 112
    47e4:	a8 01       	movw	r20, r16
    47e6:	25 e0       	ldi	r18, 0x05	; 5
    47e8:	09 2d       	mov	r16, r9
    47ea:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    47ee:	d5 01       	movw	r26, r10
    47f0:	1d 96       	adiw	r26, 0x0d	; 13
    47f2:	8c 91       	ld	r24, X
    47f4:	1d 97       	sbiw	r26, 0x0d	; 13
    47f6:	88 23       	and	r24, r24
    47f8:	d1 f7       	brne	.-12     	; 0x47ee <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    47fa:	1e 96       	adiw	r26, 0x0e	; 14
    47fc:	8c 91       	ld	r24, X
    47fe:	1e 97       	sbiw	r26, 0x0e	; 14
    4800:	81 30       	cpi	r24, 0x01	; 1
    4802:	b9 f0       	breq	.+46     	; 0x4832 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4804:	1e 96       	adiw	r26, 0x0e	; 14
    4806:	2c 91       	ld	r18, X
    4808:	00 d0       	rcall	.+0      	; 0x480a <readPage+0x62>
    480a:	0f 92       	push	r0
    480c:	ed b7       	in	r30, 0x3d	; 61
    480e:	fe b7       	in	r31, 0x3e	; 62
    4810:	31 96       	adiw	r30, 0x01	; 1
    4812:	80 e8       	ldi	r24, 0x80	; 128
    4814:	9f e0       	ldi	r25, 0x0F	; 15
    4816:	ad b7       	in	r26, 0x3d	; 61
    4818:	be b7       	in	r27, 0x3e	; 62
    481a:	11 96       	adiw	r26, 0x01	; 1
    481c:	8d 93       	st	X+, r24
    481e:	9c 93       	st	X, r25
    4820:	12 97       	sbiw	r26, 0x02	; 2
    4822:	22 83       	std	Z+2, r18	; 0x02
    4824:	13 82       	std	Z+3, r1	; 0x03
    4826:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    4830:	0f 90       	pop	r0
    4832:	de 01       	movw	r26, r28
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	0a c0       	rjmp	.+20     	; 0x484c <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4838:	e5 01       	movw	r28, r10
    483a:	ed 81       	ldd	r30, Y+5	; 0x05
    483c:	fe 81       	ldd	r31, Y+6	; 0x06
    483e:	e9 0f       	add	r30, r25
    4840:	f1 1d       	adc	r31, r1
    4842:	80 81       	ld	r24, Z
    4844:	14 96       	adiw	r26, 0x04	; 4
    4846:	8c 93       	st	X, r24
    4848:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    484a:	9f 5f       	subi	r25, 0xFF	; 255
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	99 15       	cp	r25, r9
    4850:	98 f3       	brcs	.-26     	; 0x4838 <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
    4856:	eb e0       	ldi	r30, 0x0B	; 11
    4858:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0xe>

0000485c <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    485c:	a0 e0       	ldi	r26, 0x00	; 0
    485e:	b0 e0       	ldi	r27, 0x00	; 0
    4860:	e4 e3       	ldi	r30, 0x34	; 52
    4862:	f4 e2       	ldi	r31, 0x24	; 36
    4864:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x12>
    4868:	ec 01       	movw	r28, r24
    486a:	6a 01       	movw	r12, r20
    486c:	7b 01       	movw	r14, r22
    486e:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    4870:	8d eb       	ldi	r24, 0xBD	; 189
    4872:	9f e0       	ldi	r25, 0x0F	; 15
    4874:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    4878:	82 e4       	ldi	r24, 0x42	; 66
    487a:	d8 01       	movw	r26, r16
    487c:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    487e:	bb 27       	eor	r27, r27
    4880:	af 2d       	mov	r26, r15
    4882:	9e 2d       	mov	r25, r14
    4884:	8d 2d       	mov	r24, r13
    4886:	f8 01       	movw	r30, r16
    4888:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    488a:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    488c:	8b 2d       	mov	r24, r11
    488e:	86 95       	lsr	r24
    4890:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    4892:	86 e4       	ldi	r24, 0x46	; 70
    4894:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    4896:	f5 e0       	ldi	r31, 0x05	; 5
    4898:	bf 0e       	add	r11, r31
    489a:	ce 01       	movw	r24, r28
    489c:	60 e7       	ldi	r22, 0x70	; 112
    489e:	a8 01       	movw	r20, r16
    48a0:	2b 2d       	mov	r18, r11
    48a2:	00 e0       	ldi	r16, 0x00	; 0
    48a4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    48a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48aa:	88 23       	and	r24, r24
    48ac:	e9 f7       	brne	.-6      	; 0x48a8 <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    48ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    48b0:	81 30       	cpi	r24, 0x01	; 1
    48b2:	b1 f0       	breq	.+44     	; 0x48e0 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    48b4:	2e 85       	ldd	r18, Y+14	; 0x0e
    48b6:	00 d0       	rcall	.+0      	; 0x48b8 <progPage+0x5c>
    48b8:	0f 92       	push	r0
    48ba:	ed b7       	in	r30, 0x3d	; 61
    48bc:	fe b7       	in	r31, 0x3e	; 62
    48be:	31 96       	adiw	r30, 0x01	; 1
    48c0:	8f e9       	ldi	r24, 0x9F	; 159
    48c2:	9f e0       	ldi	r25, 0x0F	; 15
    48c4:	ad b7       	in	r26, 0x3d	; 61
    48c6:	be b7       	in	r27, 0x3e	; 62
    48c8:	11 96       	adiw	r26, 0x01	; 1
    48ca:	8d 93       	st	X+, r24
    48cc:	9c 93       	st	X, r25
    48ce:	12 97       	sbiw	r26, 0x02	; 2
    48d0:	22 83       	std	Z+2, r18	; 0x02
    48d2:	13 82       	std	Z+3, r1	; 0x03
    48d4:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    48d8:	0f 90       	pop	r0
    48da:	0f 90       	pop	r0
    48dc:	0f 90       	pop	r0
    48de:	0f 90       	pop	r0
    }
}
    48e0:	cd b7       	in	r28, 0x3d	; 61
    48e2:	de b7       	in	r29, 0x3e	; 62
    48e4:	e9 e0       	ldi	r30, 0x09	; 9
    48e6:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x12>

000048ea <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    48ea:	af e0       	ldi	r26, 0x0F	; 15
    48ec:	b0 e0       	ldi	r27, 0x00	; 0
    48ee:	eb e7       	ldi	r30, 0x7B	; 123
    48f0:	f4 e2       	ldi	r31, 0x24	; 36
    48f2:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    48f6:	7c 01       	movw	r14, r24
    48f8:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    48fa:	db 01       	movw	r26, r22
    48fc:	0d 90       	ld	r0, X+
    48fe:	00 20       	and	r0, r0
    4900:	e9 f7       	brne	.-6      	; 0x48fc <ihex_readrec+0x12>
    4902:	6d 01       	movw	r12, r26
    4904:	08 94       	sec
    4906:	c1 08       	sbc	r12, r1
    4908:	d1 08       	sbc	r13, r1
    490a:	c6 1a       	sub	r12, r22
    490c:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    490e:	b3 e0       	ldi	r27, 0x03	; 3
    4910:	cb 16       	cp	r12, r27
    4912:	d1 04       	cpc	r13, r1
    4914:	0c f4       	brge	.+2      	; 0x4918 <ihex_readrec+0x2e>
    4916:	f2 c0       	rjmp	.+484    	; 0x4afc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4918:	fb 01       	movw	r30, r22
    491a:	81 81       	ldd	r24, Z+1	; 0x01
    491c:	8b 83       	std	Y+3, r24	; 0x03
    491e:	82 81       	ldd	r24, Z+2	; 0x02
    4920:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4922:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    4924:	ce 01       	movw	r24, r28
    4926:	03 96       	adiw	r24, 0x03	; 3
    4928:	8c 87       	std	Y+12, r24	; 0x0c
    492a:	9d 87       	std	Y+13, r25	; 0x0d
    492c:	ce 01       	movw	r24, r28
    492e:	03 96       	adiw	r24, 0x03	; 3
    4930:	be 01       	movw	r22, r28
    4932:	6f 5f       	subi	r22, 0xFF	; 255
    4934:	7f 4f       	sbci	r23, 0xFF	; 255
    4936:	40 e1       	ldi	r20, 0x10	; 16
    4938:	50 e0       	ldi	r21, 0x00	; 0
    493a:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <strtoul>
    493e:	d7 01       	movw	r26, r14
    4940:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4942:	e9 81       	ldd	r30, Y+1	; 0x01
    4944:	fa 81       	ldd	r31, Y+2	; 0x02
    4946:	8c 85       	ldd	r24, Y+12	; 0x0c
    4948:	9d 85       	ldd	r25, Y+13	; 0x0d
    494a:	e8 17       	cp	r30, r24
    494c:	f9 07       	cpc	r31, r25
    494e:	09 f4       	brne	.+2      	; 0x4952 <ihex_readrec+0x68>
    4950:	d5 c0       	rjmp	.+426    	; 0x4afc <ihex_readrec+0x212>
    4952:	80 81       	ld	r24, Z
    4954:	88 23       	and	r24, r24
    4956:	09 f0       	breq	.+2      	; 0x495a <ihex_readrec+0x70>
    4958:	d1 c0       	rjmp	.+418    	; 0x4afc <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    495a:	97 e0       	ldi	r25, 0x07	; 7
    495c:	c9 16       	cp	r12, r25
    495e:	d1 04       	cpc	r13, r1
    4960:	0c f4       	brge	.+2      	; 0x4964 <ihex_readrec+0x7a>
    4962:	cc c0       	rjmp	.+408    	; 0x4afc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    4964:	d8 01       	movw	r26, r16
    4966:	13 96       	adiw	r26, 0x03	; 3
    4968:	8c 91       	ld	r24, X
    496a:	13 97       	sbiw	r26, 0x03	; 3
    496c:	8b 83       	std	Y+3, r24	; 0x03
    496e:	14 96       	adiw	r26, 0x04	; 4
    4970:	8c 91       	ld	r24, X
    4972:	14 97       	sbiw	r26, 0x04	; 4
    4974:	8c 83       	std	Y+4, r24	; 0x04
    4976:	15 96       	adiw	r26, 0x05	; 5
    4978:	8c 91       	ld	r24, X
    497a:	15 97       	sbiw	r26, 0x05	; 5
    497c:	8d 83       	std	Y+5, r24	; 0x05
    497e:	16 96       	adiw	r26, 0x06	; 6
    4980:	8c 91       	ld	r24, X
    4982:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    4984:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    4986:	ce 01       	movw	r24, r28
    4988:	03 96       	adiw	r24, 0x03	; 3
    498a:	be 01       	movw	r22, r28
    498c:	6f 5f       	subi	r22, 0xFF	; 255
    498e:	7f 4f       	sbci	r23, 0xFF	; 255
    4990:	40 e1       	ldi	r20, 0x10	; 16
    4992:	50 e0       	ldi	r21, 0x00	; 0
    4994:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <strtoul>
    4998:	f7 01       	movw	r30, r14
    499a:	61 83       	std	Z+1, r22	; 0x01
    499c:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    499e:	e9 81       	ldd	r30, Y+1	; 0x01
    49a0:	fa 81       	ldd	r31, Y+2	; 0x02
    49a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    49a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    49a6:	e8 17       	cp	r30, r24
    49a8:	f9 07       	cpc	r31, r25
    49aa:	09 f4       	brne	.+2      	; 0x49ae <ihex_readrec+0xc4>
    49ac:	a7 c0       	rjmp	.+334    	; 0x4afc <ihex_readrec+0x212>
    49ae:	80 81       	ld	r24, Z
    49b0:	88 23       	and	r24, r24
    49b2:	09 f0       	breq	.+2      	; 0x49b6 <ihex_readrec+0xcc>
    49b4:	a3 c0       	rjmp	.+326    	; 0x4afc <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    49b6:	99 e0       	ldi	r25, 0x09	; 9
    49b8:	c9 16       	cp	r12, r25
    49ba:	d1 04       	cpc	r13, r1
    49bc:	0c f4       	brge	.+2      	; 0x49c0 <ihex_readrec+0xd6>
    49be:	9e c0       	rjmp	.+316    	; 0x4afc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    49c0:	d8 01       	movw	r26, r16
    49c2:	17 96       	adiw	r26, 0x07	; 7
    49c4:	8c 91       	ld	r24, X
    49c6:	17 97       	sbiw	r26, 0x07	; 7
    49c8:	8b 83       	std	Y+3, r24	; 0x03
    49ca:	18 96       	adiw	r26, 0x08	; 8
    49cc:	8c 91       	ld	r24, X
    49ce:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    49d0:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    49d2:	ce 01       	movw	r24, r28
    49d4:	03 96       	adiw	r24, 0x03	; 3
    49d6:	be 01       	movw	r22, r28
    49d8:	6f 5f       	subi	r22, 0xFF	; 255
    49da:	7f 4f       	sbci	r23, 0xFF	; 255
    49dc:	40 e1       	ldi	r20, 0x10	; 16
    49de:	50 e0       	ldi	r21, 0x00	; 0
    49e0:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <strtoul>
    49e4:	f7 01       	movw	r30, r14
    49e6:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    49e8:	e9 81       	ldd	r30, Y+1	; 0x01
    49ea:	fa 81       	ldd	r31, Y+2	; 0x02
    49ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    49f0:	e8 17       	cp	r30, r24
    49f2:	f9 07       	cpc	r31, r25
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <ihex_readrec+0x10e>
    49f6:	82 c0       	rjmp	.+260    	; 0x4afc <ihex_readrec+0x212>
    49f8:	80 81       	ld	r24, Z
    49fa:	88 23       	and	r24, r24
    49fc:	09 f0       	breq	.+2      	; 0x4a00 <ihex_readrec+0x116>
    49fe:	7e c0       	rjmp	.+252    	; 0x4afc <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    4a00:	d7 01       	movw	r26, r14
    4a02:	11 96       	adiw	r26, 0x01	; 1
    4a04:	8c 91       	ld	r24, X
    4a06:	11 97       	sbiw	r26, 0x01	; 1
    4a08:	12 96       	adiw	r26, 0x02	; 2
    4a0a:	9c 91       	ld	r25, X
    4a0c:	12 97       	sbiw	r26, 0x02	; 2
    4a0e:	7c 90       	ld	r7, X
    4a10:	78 0e       	add	r7, r24
    4a12:	79 0e       	add	r7, r25
    4a14:	76 0e       	add	r7, r22
    4a16:	48 01       	movw	r8, r16
    4a18:	17 01       	movw	r2, r14
    4a1a:	44 24       	eor	r4, r4
    4a1c:	55 24       	eor	r5, r5
    4a1e:	99 e0       	ldi	r25, 0x09	; 9
    4a20:	a9 2e       	mov	r10, r25
    4a22:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    4a24:	fe 01       	movw	r30, r28
    4a26:	33 96       	adiw	r30, 0x03	; 3
    4a28:	ee 87       	std	Y+14, r30	; 0x0e
    4a2a:	ff 87       	std	Y+15, r31	; 0x0f
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	01 96       	adiw	r24, 0x01	; 1
    4a30:	8b 87       	std	Y+11, r24	; 0x0b
    4a32:	69 2e       	mov	r6, r25
    4a34:	32 c0       	rjmp	.+100    	; 0x4a9a <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    4a36:	2c 15       	cp	r18, r12
    4a38:	3d 05       	cpc	r19, r13
    4a3a:	0c f0       	brlt	.+2      	; 0x4a3e <ihex_readrec+0x154>
    4a3c:	5f c0       	rjmp	.+190    	; 0x4afc <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    4a3e:	d4 01       	movw	r26, r8
    4a40:	19 96       	adiw	r26, 0x09	; 9
    4a42:	8c 91       	ld	r24, X
    4a44:	19 97       	sbiw	r26, 0x09	; 9
    4a46:	8b 83       	std	Y+3, r24	; 0x03
    4a48:	1a 96       	adiw	r26, 0x0a	; 10
    4a4a:	8c 91       	ld	r24, X
    4a4c:	8c 83       	std	Y+4, r24	; 0x04
    4a4e:	e2 e0       	ldi	r30, 0x02	; 2
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	ae 0e       	add	r10, r30
    4a54:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    4a56:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    4a58:	ce 01       	movw	r24, r28
    4a5a:	03 96       	adiw	r24, 0x03	; 3
    4a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a5e:	76 2d       	mov	r23, r6
    4a60:	40 e1       	ldi	r20, 0x10	; 16
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <strtoul>
    4a68:	d1 01       	movw	r26, r2
    4a6a:	14 96       	adiw	r26, 0x04	; 4
    4a6c:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    4a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a70:	fa 81       	ldd	r31, Y+2	; 0x02
    4a72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a74:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a76:	e8 17       	cp	r30, r24
    4a78:	f9 07       	cpc	r31, r25
    4a7a:	09 f4       	brne	.+2      	; 0x4a7e <ihex_readrec+0x194>
    4a7c:	3f c0       	rjmp	.+126    	; 0x4afc <ihex_readrec+0x212>
    4a7e:	a2 e0       	ldi	r26, 0x02	; 2
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	8a 0e       	add	r8, r26
    4a84:	9b 1e       	adc	r9, r27
    4a86:	08 94       	sec
    4a88:	21 1c       	adc	r2, r1
    4a8a:	31 1c       	adc	r3, r1
    4a8c:	80 81       	ld	r24, Z
    4a8e:	88 23       	and	r24, r24
    4a90:	a9 f5       	brne	.+106    	; 0x4afc <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    4a92:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    4a94:	08 94       	sec
    4a96:	41 1c       	adc	r4, r1
    4a98:	51 1c       	adc	r5, r1
    4a9a:	f7 01       	movw	r30, r14
    4a9c:	80 81       	ld	r24, Z
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	95 01       	movw	r18, r10
    4aa2:	2f 5f       	subi	r18, 0xFF	; 255
    4aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa6:	48 16       	cp	r4, r24
    4aa8:	59 06       	cpc	r5, r25
    4aaa:	2c f2       	brlt	.-118    	; 0x4a36 <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    4aac:	2c 15       	cp	r18, r12
    4aae:	3d 05       	cpc	r19, r13
    4ab0:	2c f5       	brge	.+74     	; 0x4afc <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4ab2:	f8 01       	movw	r30, r16
    4ab4:	ea 0d       	add	r30, r10
    4ab6:	fb 1d       	adc	r31, r11
    4ab8:	80 81       	ld	r24, Z
    4aba:	8b 83       	std	Y+3, r24	; 0x03
    4abc:	81 81       	ldd	r24, Z+1	; 0x01
    4abe:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4ac0:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    4ac2:	8e 01       	movw	r16, r28
    4ac4:	0d 5f       	subi	r16, 0xFD	; 253
    4ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac8:	c8 01       	movw	r24, r16
    4aca:	be 01       	movw	r22, r28
    4acc:	6f 5f       	subi	r22, 0xFF	; 255
    4ace:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad0:	40 e1       	ldi	r20, 0x10	; 16
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <strtoul>
    4ad8:	84 e0       	ldi	r24, 0x04	; 4
    4ada:	91 e0       	ldi	r25, 0x01	; 1
    4adc:	e8 0e       	add	r14, r24
    4ade:	f9 1e       	adc	r15, r25
    4ae0:	d7 01       	movw	r26, r14
    4ae2:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ae8:	e0 17       	cp	r30, r16
    4aea:	f1 07       	cpc	r31, r17
    4aec:	39 f0       	breq	.+14     	; 0x4afc <ihex_readrec+0x212>
    4aee:	80 81       	ld	r24, Z
    4af0:	88 23       	and	r24, r24
    4af2:	21 f4       	brne	.+8      	; 0x4afc <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    4af4:	71 94       	neg	r7
    4af6:	27 2d       	mov	r18, r7
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <ihex_readrec+0x216>
    
    return rc;
    4afc:	2f ef       	ldi	r18, 0xFF	; 255
    4afe:	3f ef       	ldi	r19, 0xFF	; 255
    4b00:	c9 01       	movw	r24, r18
    4b02:	2f 96       	adiw	r28, 0x0f	; 15
    4b04:	e2 e1       	ldi	r30, 0x12	; 18
    4b06:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

00004b0a <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    4b0a:	a0 e9       	ldi	r26, 0x90	; 144
    4b0c:	b2 e0       	ldi	r27, 0x02	; 2
    4b0e:	eb e8       	ldi	r30, 0x8B	; 139
    4b10:	f5 e2       	ldi	r31, 0x25	; 37
    4b12:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    4b16:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    4b18:	e8 2e       	mov	r14, r24
    4b1a:	ff 24       	eor	r15, r15
    4b1c:	f7 01       	movw	r30, r14
    4b1e:	e8 5e       	subi	r30, 0xE8	; 232
    4b20:	f8 4d       	sbci	r31, 0xD8	; 216
    4b22:	e0 81       	ld	r30, Z
    if (ch != 0){
    4b24:	ee 23       	and	r30, r30
    4b26:	09 f4       	brne	.+2      	; 0x4b2a <eeprom_panel+0x20>
    4b28:	cd c2       	rjmp	.+1434   	; 0x50c4 <eeprom_panel+0x5ba>
        
        switch (ch) {
    4b2a:	e3 30       	cpi	r30, 0x03	; 3
    4b2c:	71 f0       	breq	.+28     	; 0x4b4a <eeprom_panel+0x40>
    4b2e:	e4 30       	cpi	r30, 0x04	; 4
    4b30:	89 f0       	breq	.+34     	; 0x4b54 <eeprom_panel+0x4a>
    4b32:	e2 30       	cpi	r30, 0x02	; 2
    4b34:	29 f4       	brne	.+10     	; 0x4b40 <eeprom_panel+0x36>
    4b36:	22 e7       	ldi	r18, 0x72	; 114
    4b38:	82 2e       	mov	r8, r18
    4b3a:	29 e2       	ldi	r18, 0x29	; 41
    4b3c:	92 2e       	mov	r9, r18
    4b3e:	0e c0       	rjmp	.+28     	; 0x4b5c <eeprom_panel+0x52>
    4b40:	95 e7       	ldi	r25, 0x75	; 117
    4b42:	89 2e       	mov	r8, r25
    4b44:	96 e2       	ldi	r25, 0x26	; 38
    4b46:	99 2e       	mov	r9, r25
    4b48:	09 c0       	rjmp	.+18     	; 0x4b5c <eeprom_panel+0x52>
    4b4a:	88 e0       	ldi	r24, 0x08	; 8
    4b4c:	88 2e       	mov	r8, r24
    4b4e:	87 e2       	ldi	r24, 0x27	; 39
    4b50:	98 2e       	mov	r9, r24
    4b52:	04 c0       	rjmp	.+8      	; 0x4b5c <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    4b54:	17 e9       	ldi	r17, 0x97	; 151
    4b56:	81 2e       	mov	r8, r17
    4b58:	15 e2       	ldi	r17, 0x25	; 37
    4b5a:	91 2e       	mov	r9, r17
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    4b5c:	83 ec       	ldi	r24, 0xC3	; 195
    4b5e:	97 e2       	ldi	r25, 0x27	; 39
    4b60:	6a ec       	ldi	r22, 0xCA	; 202
    4b62:	73 e2       	ldi	r23, 0x23	; 35
    4b64:	41 e0       	ldi	r20, 0x01	; 1
    4b66:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
    4b6a:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4b6c:	88 23       	and	r24, r24
    4b6e:	49 f0       	breq	.+18     	; 0x4b82 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    4b70:	8c e0       	ldi	r24, 0x0C	; 12
    4b72:	9c e0       	ldi	r25, 0x0C	; 12
    4b74:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            put_rc(res);
    4b78:	81 2f       	mov	r24, r17
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	0e 94 55 22 	call	0x44aa	; 0x44aa <put_rc>
    4b80:	3d c0       	rjmp	.+122    	; 0x4bfc <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    4b82:	00 d0       	rcall	.+0      	; 0x4b84 <eeprom_panel+0x7a>
    4b84:	0f 92       	push	r0
    4b86:	8a ef       	ldi	r24, 0xFA	; 250
    4b88:	9b e0       	ldi	r25, 0x0B	; 11
    4b8a:	ad b7       	in	r26, 0x3d	; 61
    4b8c:	be b7       	in	r27, 0x3e	; 62
    4b8e:	11 96       	adiw	r26, 0x01	; 1
    4b90:	8d 93       	st	X+, r24
    4b92:	9c 93       	st	X, r25
    4b94:	12 97       	sbiw	r26, 0x02	; 2
    4b96:	13 96       	adiw	r26, 0x03	; 3
    4b98:	ed 92       	st	X+, r14
    4b9a:	fc 92       	st	X, r15
    4b9c:	14 97       	sbiw	r26, 0x04	; 4
    4b9e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                pagebuff[0] = 0x00;
    4ba2:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
    4ba6:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	c4 01       	movw	r24, r8
    4bb2:	60 2f       	mov	r22, r16
    4bb4:	ae 01       	movw	r20, r28
    4bb6:	4f 5f       	subi	r20, 0xFF	; 255
    4bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    4bba:	22 e0       	ldi	r18, 0x02	; 2
    4bbc:	00 e0       	ldi	r16, 0x00	; 0
    4bbe:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    4bc2:	f4 01       	movw	r30, r8
    4bc4:	85 85       	ldd	r24, Z+13	; 0x0d
    4bc6:	88 23       	and	r24, r24
    4bc8:	e1 f7       	brne	.-8      	; 0x4bc2 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    4bca:	86 85       	ldd	r24, Z+14	; 0x0e
    4bcc:	81 30       	cpi	r24, 0x01	; 1
    4bce:	b1 f0       	breq	.+44     	; 0x4bfc <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    4bd0:	26 85       	ldd	r18, Z+14	; 0x0e
    4bd2:	00 d0       	rcall	.+0      	; 0x4bd4 <eeprom_panel+0xca>
    4bd4:	0f 92       	push	r0
    4bd6:	ed b7       	in	r30, 0x3d	; 61
    4bd8:	fe b7       	in	r31, 0x3e	; 62
    4bda:	31 96       	adiw	r30, 0x01	; 1
    4bdc:	8c ed       	ldi	r24, 0xDC	; 220
    4bde:	9b e0       	ldi	r25, 0x0B	; 11
    4be0:	ad b7       	in	r26, 0x3d	; 61
    4be2:	be b7       	in	r27, 0x3e	; 62
    4be4:	11 96       	adiw	r26, 0x01	; 1
    4be6:	8d 93       	st	X+, r24
    4be8:	9c 93       	st	X, r25
    4bea:	12 97       	sbiw	r26, 0x02	; 2
    4bec:	22 83       	std	Z+2, r18	; 0x02
    4bee:	13 82       	std	Z+3, r1	; 0x03
    4bf0:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	88 e8       	ldi	r24, 0x88	; 136
    4bfe:	93 e1       	ldi	r25, 0x13	; 19
    4c00:	20 e2       	ldi	r18, 0x20	; 32
    4c02:	33 e0       	ldi	r19, 0x03	; 3
    4c04:	f9 01       	movw	r30, r18
    4c06:	31 97       	sbiw	r30, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c0c:	d9 f7       	brne	.-10     	; 0x4c04 <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    4c0e:	8f ec       	ldi	r24, 0xCF	; 207
    4c10:	9b e0       	ldi	r25, 0x0B	; 11
    4c12:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    4c16:	0f ef       	ldi	r16, 0xFF	; 255
    4c18:	1f ef       	ldi	r17, 0xFF	; 255
    4c1a:	cc 24       	eor	r12, r12
    4c1c:	dd 24       	eor	r13, r13
    4c1e:	66 24       	eor	r6, r6
    4c20:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4c22:	b6 e8       	ldi	r27, 0x86	; 134
    4c24:	2b 2e       	mov	r2, r27
    4c26:	31 2c       	mov	r3, r1
    4c28:	2c 0e       	add	r2, r28
    4c2a:	3d 1e       	adc	r3, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4c2c:	a6 e8       	ldi	r26, 0x86	; 134
    4c2e:	4a 2e       	mov	r4, r26
    4c30:	a1 e0       	ldi	r26, 0x01	; 1
    4c32:	5a 2e       	mov	r5, r26
    4c34:	4c 0e       	add	r4, r28
    4c36:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4c38:	f2 01       	movw	r30, r4
    4c3a:	34 96       	adiw	r30, 0x04	; 4
    4c3c:	c3 57       	subi	r28, 0x73	; 115
    4c3e:	dd 4f       	sbci	r29, 0xFD	; 253
    4c40:	e8 83       	st	Y, r30
    4c42:	f9 83       	std	Y+1, r31	; 0x01
    4c44:	cd 58       	subi	r28, 0x8D	; 141
    4c46:	d2 40       	sbci	r29, 0x02	; 2
    4c48:	cb c0       	rjmp	.+406    	; 0x4de0 <eeprom_panel+0x2d6>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    4c4a:	08 94       	sec
    4c4c:	61 1c       	adc	r6, r1
    4c4e:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    4c50:	f1 01       	movw	r30, r2
    4c52:	01 90       	ld	r0, Z+
    4c54:	00 20       	and	r0, r0
    4c56:	e9 f7       	brne	.-6      	; 0x4c52 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    4c58:	32 97       	sbiw	r30, 0x02	; 2
    4c5a:	80 81       	ld	r24, Z
    4c5c:	8a 30       	cpi	r24, 0x0A	; 10
    4c5e:	09 f4       	brne	.+2      	; 0x4c62 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    4c60:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    4c62:	d1 01       	movw	r26, r2
    4c64:	8c 91       	ld	r24, X
    4c66:	8a 33       	cpi	r24, 0x3A	; 58
    4c68:	09 f0       	breq	.+2      	; 0x4c6c <eeprom_panel+0x162>
    4c6a:	ba c0       	rjmp	.+372    	; 0x4de0 <eeprom_panel+0x2d6>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4c6c:	c2 01       	movw	r24, r4
    4c6e:	b1 01       	movw	r22, r2
    4c70:	0e 94 75 24 	call	0x48ea	; 0x48ea <ihex_readrec>
    4c74:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    4c76:	c6 57       	subi	r28, 0x76	; 118
    4c78:	dd 4f       	sbci	r29, 0xFD	; 253
    4c7a:	88 81       	ld	r24, Y
    4c7c:	ca 58       	subi	r28, 0x8A	; 138
    4c7e:	d2 40       	sbci	r29, 0x02	; 2
    4c80:	f8 16       	cp	r15, r24
    4c82:	19 f1       	breq	.+70     	; 0x4cca <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    4c84:	00 d0       	rcall	.+0      	; 0x4c86 <eeprom_panel+0x17c>
    4c86:	0f 92       	push	r0
    4c88:	8b e9       	ldi	r24, 0x9B	; 155
    4c8a:	9b e0       	ldi	r25, 0x0B	; 11
    4c8c:	ed b7       	in	r30, 0x3d	; 61
    4c8e:	fe b7       	in	r31, 0x3e	; 62
    4c90:	81 83       	std	Z+1, r24	; 0x01
    4c92:	92 83       	std	Z+2, r25	; 0x02
    4c94:	63 82       	std	Z+3, r6	; 0x03
    4c96:	74 82       	std	Z+4, r7	; 0x04
    4c98:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    4c9c:	0f 92       	push	r0
    4c9e:	0f 92       	push	r0
    4ca0:	ed b7       	in	r30, 0x3d	; 61
    4ca2:	fe b7       	in	r31, 0x3e	; 62
    4ca4:	31 96       	adiw	r30, 0x01	; 1
    4ca6:	80 e7       	ldi	r24, 0x70	; 112
    4ca8:	9b e0       	ldi	r25, 0x0B	; 11
    4caa:	ad b7       	in	r26, 0x3d	; 61
    4cac:	be b7       	in	r27, 0x3e	; 62
    4cae:	11 96       	adiw	r26, 0x01	; 1
    4cb0:	8d 93       	st	X+, r24
    4cb2:	9c 93       	st	X, r25
    4cb4:	12 97       	sbiw	r26, 0x02	; 2
    4cb6:	c6 57       	subi	r28, 0x76	; 118
    4cb8:	dd 4f       	sbci	r29, 0xFD	; 253
    4cba:	88 81       	ld	r24, Y
    4cbc:	ca 58       	subi	r28, 0x8A	; 138
    4cbe:	d2 40       	sbci	r29, 0x02	; 2
    4cc0:	82 83       	std	Z+2, r24	; 0x02
    4cc2:	13 82       	std	Z+3, r1	; 0x03
    4cc4:	f4 82       	std	Z+4, r15	; 0x04
    4cc6:	15 82       	std	Z+5, r1	; 0x05
    4cc8:	82 c0       	rjmp	.+260    	; 0x4dce <eeprom_panel+0x2c4>
                break;
            } else {
                if (ihex.rectyp == 0) {
    4cca:	d2 01       	movw	r26, r4
    4ccc:	13 96       	adiw	r26, 0x03	; 3
    4cce:	2c 91       	ld	r18, X
    4cd0:	13 97       	sbiw	r26, 0x03	; 3
    4cd2:	22 23       	and	r18, r18
    4cd4:	09 f0       	breq	.+2      	; 0x4cd8 <eeprom_panel+0x1ce>
    4cd6:	53 c0       	rjmp	.+166    	; 0x4d7e <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    4cd8:	11 96       	adiw	r26, 0x01	; 1
    4cda:	ed 90       	ld	r14, X+
    4cdc:	fc 90       	ld	r15, X
    4cde:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    4ce0:	57 01       	movw	r10, r14
    4ce2:	aa 0c       	add	r10, r10
    4ce4:	ab 2c       	mov	r10, r11
    4ce6:	aa 1c       	adc	r10, r10
    4ce8:	bb 08       	sbc	r11, r11
    4cea:	b1 94       	neg	r11
    4cec:	a0 16       	cp	r10, r16
    4cee:	b1 06       	cpc	r11, r17
    4cf0:	c1 f0       	breq	.+48     	; 0x4d22 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    4cf2:	cd 14       	cp	r12, r13
    4cf4:	91 f0       	breq	.+36     	; 0x4d1a <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    4cf6:	16 95       	lsr	r17
    4cf8:	10 2f       	mov	r17, r16
    4cfa:	00 27       	eor	r16, r16
    4cfc:	17 95       	ror	r17
    4cfe:	07 95       	ror	r16
    4d00:	0c 0d       	add	r16, r12
    4d02:	11 1d       	adc	r17, r1
    4d04:	a8 01       	movw	r20, r16
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	dc 18       	sub	r13, r12
    4d0c:	c4 01       	movw	r24, r8
    4d0e:	2d 2d       	mov	r18, r13
    4d10:	8e 01       	movw	r16, r28
    4d12:	0f 5f       	subi	r16, 0xFF	; 255
    4d14:	1f 4f       	sbci	r17, 0xFF	; 255
    4d16:	0e 94 30 23 	call	0x4660	; 0x4660 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    4d1a:	7f e7       	ldi	r23, 0x7F	; 127
    4d1c:	d7 2e       	mov	r13, r23
    4d1e:	de 20       	and	r13, r14
    4d20:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    4d22:	4e 2d       	mov	r20, r14
    4d24:	4f 77       	andi	r20, 0x7F	; 127
    4d26:	4c 15       	cp	r20, r12
    4d28:	08 f4       	brcc	.+2      	; 0x4d2c <eeprom_panel+0x222>
    4d2a:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4d2c:	f2 01       	movw	r30, r4
    4d2e:	50 81       	ld	r21, Z
    4d30:	25 2f       	mov	r18, r21
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	c3 57       	subi	r28, 0x73	; 115
    4d36:	dd 4f       	sbci	r29, 0xFD	; 253
    4d38:	a8 81       	ld	r26, Y
    4d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    4d3c:	cd 58       	subi	r28, 0x8D	; 141
    4d3e:	d2 40       	sbci	r29, 0x02	; 2
    4d40:	e4 2f       	mov	r30, r20
    4d42:	f0 e0       	ldi	r31, 0x00	; 0
    4d44:	35 96       	adiw	r30, 0x05	; 5
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	8c 0f       	add	r24, r28
    4d4c:	9d 1f       	adc	r25, r29
    4d4e:	e8 0f       	add	r30, r24
    4d50:	f9 1f       	adc	r31, r25
    4d52:	2c 5f       	subi	r18, 0xFC	; 252
    4d54:	3f 4f       	sbci	r19, 0xFF	; 255
    4d56:	24 0d       	add	r18, r4
    4d58:	35 1d       	adc	r19, r5
    4d5a:	02 c0       	rjmp	.+4      	; 0x4d60 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    4d5c:	8d 91       	ld	r24, X+
    4d5e:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4d60:	a2 17       	cp	r26, r18
    4d62:	b3 07       	cpc	r27, r19
    4d64:	d9 f7       	brne	.-10     	; 0x4d5c <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    4d66:	85 2f       	mov	r24, r21
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	84 0f       	add	r24, r20
    4d6c:	91 1d       	adc	r25, r1
    4d6e:	2d 2d       	mov	r18, r13
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	28 17       	cp	r18, r24
    4d74:	39 07       	cpc	r19, r25
    4d76:	9c f5       	brge	.+102    	; 0x4dde <eeprom_panel+0x2d4>
                        pageendaddr = pageoffset+ihex.reclen;
    4d78:	d4 2e       	mov	r13, r20
    4d7a:	d5 0e       	add	r13, r21
    4d7c:	30 c0       	rjmp	.+96     	; 0x4dde <eeprom_panel+0x2d4>
                } else if (ihex.rectyp == 1) {
    4d7e:	21 30       	cpi	r18, 0x01	; 1
    4d80:	a9 f4       	brne	.+42     	; 0x4dac <eeprom_panel+0x2a2>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    4d82:	cd 14       	cp	r12, r13
    4d84:	b9 f1       	breq	.+110    	; 0x4df4 <eeprom_panel+0x2ea>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    4d86:	16 95       	lsr	r17
    4d88:	10 2f       	mov	r17, r16
    4d8a:	00 27       	eor	r16, r16
    4d8c:	17 95       	ror	r17
    4d8e:	07 95       	ror	r16
    4d90:	0c 0d       	add	r16, r12
    4d92:	11 1d       	adc	r17, r1
    4d94:	a8 01       	movw	r20, r16
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	dc 18       	sub	r13, r12
    4d9c:	c4 01       	movw	r24, r8
    4d9e:	2d 2d       	mov	r18, r13
    4da0:	8e 01       	movw	r16, r28
    4da2:	0f 5f       	subi	r16, 0xFF	; 255
    4da4:	1f 4f       	sbci	r17, 0xFF	; 255
    4da6:	0e 94 30 23 	call	0x4660	; 0x4660 <progEEPage>
    4daa:	24 c0       	rjmp	.+72     	; 0x4df4 <eeprom_panel+0x2ea>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    4dac:	00 d0       	rcall	.+0      	; 0x4dae <eeprom_panel+0x2a4>
    4dae:	00 d0       	rcall	.+0      	; 0x4db0 <eeprom_panel+0x2a6>
    4db0:	ed b7       	in	r30, 0x3d	; 61
    4db2:	fe b7       	in	r31, 0x3e	; 62
    4db4:	31 96       	adiw	r30, 0x01	; 1
    4db6:	8e e2       	ldi	r24, 0x2E	; 46
    4db8:	9b e0       	ldi	r25, 0x0B	; 11
    4dba:	ad b7       	in	r26, 0x3d	; 61
    4dbc:	be b7       	in	r27, 0x3e	; 62
    4dbe:	11 96       	adiw	r26, 0x01	; 1
    4dc0:	8d 93       	st	X+, r24
    4dc2:	9c 93       	st	X, r25
    4dc4:	12 97       	sbiw	r26, 0x02	; 2
    4dc6:	22 83       	std	Z+2, r18	; 0x02
    4dc8:	13 82       	std	Z+3, r1	; 0x03
    4dca:	64 82       	std	Z+4, r6	; 0x04
    4dcc:	75 82       	std	Z+5, r7	; 0x05
    4dce:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    4dd2:	ed b7       	in	r30, 0x3d	; 61
    4dd4:	fe b7       	in	r31, 0x3e	; 62
    4dd6:	36 96       	adiw	r30, 0x06	; 6
    4dd8:	ed bf       	out	0x3d, r30	; 61
    4dda:	fe bf       	out	0x3e, r31	; 62
    4ddc:	0b c0       	rjmp	.+22     	; 0x4df4 <eeprom_panel+0x2ea>
                            ihex.rectyp, lineno);
                    break;
    4dde:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4de0:	c1 01       	movw	r24, r2
    4de2:	60 e0       	ldi	r22, 0x00	; 0
    4de4:	71 e0       	ldi	r23, 0x01	; 1
    4de6:	43 ec       	ldi	r20, 0xC3	; 195
    4de8:	57 e2       	ldi	r21, 0x27	; 39
    4dea:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <f_gets>
    4dee:	89 2b       	or	r24, r25
    4df0:	09 f0       	breq	.+2      	; 0x4df4 <eeprom_panel+0x2ea>
    4df2:	2b cf       	rjmp	.-426    	; 0x4c4a <eeprom_panel+0x140>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    4df4:	83 ec       	ldi	r24, 0xC3	; 195
    4df6:	97 e2       	ldi	r25, 0x27	; 39
    4df8:	40 e0       	ldi	r20, 0x00	; 0
    4dfa:	50 e0       	ldi	r21, 0x00	; 0
    4dfc:	60 e0       	ldi	r22, 0x00	; 0
    4dfe:	70 e0       	ldi	r23, 0x00	; 0
    4e00:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
    4e04:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4e06:	88 23       	and	r24, r24
    4e08:	49 f0       	breq	.+18     	; 0x4e1c <eeprom_panel+0x312>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    4e0a:	80 e1       	ldi	r24, 0x10	; 16
    4e0c:	9b e0       	ldi	r25, 0x0B	; 11
    4e0e:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            put_rc(res);
    4e12:	81 2f       	mov	r24, r17
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	0e 94 55 22 	call	0x44aa	; 0x44aa <put_rc>
    4e1a:	2c c1       	rjmp	.+600    	; 0x5074 <eeprom_panel+0x56a>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    4e1c:	83 e0       	ldi	r24, 0x03	; 3
    4e1e:	9b e0       	ldi	r25, 0x0B	; 11
    4e20:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    4e24:	cc 24       	eor	r12, r12
    4e26:	ca 94       	dec	r12
    4e28:	dc 2c       	mov	r13, r12
    4e2a:	00 e0       	ldi	r16, 0x00	; 0
    4e2c:	10 e0       	ldi	r17, 0x00	; 0
    4e2e:	66 24       	eor	r6, r6
    4e30:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    4e32:	ce 01       	movw	r24, r28
    4e34:	8a 57       	subi	r24, 0x7A	; 122
    4e36:	9f 4f       	sbci	r25, 0xFF	; 255
    4e38:	c1 57       	subi	r28, 0x71	; 113
    4e3a:	dd 4f       	sbci	r29, 0xFD	; 253
    4e3c:	88 83       	st	Y, r24
    4e3e:	99 83       	std	Y+1, r25	; 0x01
    4e40:	cf 58       	subi	r28, 0x8F	; 143
    4e42:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    4e44:	56 e8       	ldi	r21, 0x86	; 134
    4e46:	45 2e       	mov	r4, r21
    4e48:	51 e0       	ldi	r21, 0x01	; 1
    4e4a:	55 2e       	mov	r5, r21
    4e4c:	4c 0e       	add	r4, r28
    4e4e:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4e50:	d2 01       	movw	r26, r4
    4e52:	14 96       	adiw	r26, 0x04	; 4
    4e54:	c5 57       	subi	r28, 0x75	; 117
    4e56:	dd 4f       	sbci	r29, 0xFD	; 253
    4e58:	a8 83       	st	Y, r26
    4e5a:	b9 83       	std	Y+1, r27	; 0x01
    4e5c:	cb 58       	subi	r28, 0x8B	; 139
    4e5e:	d2 40       	sbci	r29, 0x02	; 2
    4e60:	ff c0       	rjmp	.+510    	; 0x5060 <eeprom_panel+0x556>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    4e62:	08 94       	sec
    4e64:	61 1c       	adc	r6, r1
    4e66:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    4e68:	c1 57       	subi	r28, 0x71	; 113
    4e6a:	dd 4f       	sbci	r29, 0xFD	; 253
    4e6c:	e8 81       	ld	r30, Y
    4e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e70:	cf 58       	subi	r28, 0x8F	; 143
    4e72:	d2 40       	sbci	r29, 0x02	; 2
    4e74:	01 90       	ld	r0, Z+
    4e76:	00 20       	and	r0, r0
    4e78:	e9 f7       	brne	.-6      	; 0x4e74 <eeprom_panel+0x36a>
                if (eepromBuff[len-1] == '\n')
    4e7a:	32 97       	sbiw	r30, 0x02	; 2
    4e7c:	80 81       	ld	r24, Z
    4e7e:	8a 30       	cpi	r24, 0x0A	; 10
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <eeprom_panel+0x37a>
                    eepromBuff[--len] = 0;
    4e82:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    4e84:	ca 57       	subi	r28, 0x7A	; 122
    4e86:	df 4f       	sbci	r29, 0xFF	; 255
    4e88:	88 81       	ld	r24, Y
    4e8a:	c6 58       	subi	r28, 0x86	; 134
    4e8c:	d0 40       	sbci	r29, 0x00	; 0
    4e8e:	8a 33       	cpi	r24, 0x3A	; 58
    4e90:	09 f0       	breq	.+2      	; 0x4e94 <eeprom_panel+0x38a>
    4e92:	e6 c0       	rjmp	.+460    	; 0x5060 <eeprom_panel+0x556>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    4e94:	c2 01       	movw	r24, r4
    4e96:	b1 01       	movw	r22, r2
    4e98:	0e 94 75 24 	call	0x48ea	; 0x48ea <ihex_readrec>
    4e9c:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    4e9e:	c6 57       	subi	r28, 0x76	; 118
    4ea0:	dd 4f       	sbci	r29, 0xFD	; 253
    4ea2:	88 81       	ld	r24, Y
    4ea4:	ca 58       	subi	r28, 0x8A	; 138
    4ea6:	d2 40       	sbci	r29, 0x02	; 2
    4ea8:	f8 16       	cp	r15, r24
    4eaa:	19 f1       	breq	.+70     	; 0x4ef2 <eeprom_panel+0x3e8>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    4eac:	00 d0       	rcall	.+0      	; 0x4eae <eeprom_panel+0x3a4>
    4eae:	0f 92       	push	r0
    4eb0:	80 ed       	ldi	r24, 0xD0	; 208
    4eb2:	9a e0       	ldi	r25, 0x0A	; 10
    4eb4:	ed b7       	in	r30, 0x3d	; 61
    4eb6:	fe b7       	in	r31, 0x3e	; 62
    4eb8:	81 83       	std	Z+1, r24	; 0x01
    4eba:	92 83       	std	Z+2, r25	; 0x02
    4ebc:	63 82       	std	Z+3, r6	; 0x03
    4ebe:	74 82       	std	Z+4, r7	; 0x04
    4ec0:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    4ec4:	0f 92       	push	r0
    4ec6:	0f 92       	push	r0
    4ec8:	ed b7       	in	r30, 0x3d	; 61
    4eca:	fe b7       	in	r31, 0x3e	; 62
    4ecc:	31 96       	adiw	r30, 0x01	; 1
    4ece:	85 ea       	ldi	r24, 0xA5	; 165
    4ed0:	9a e0       	ldi	r25, 0x0A	; 10
    4ed2:	ad b7       	in	r26, 0x3d	; 61
    4ed4:	be b7       	in	r27, 0x3e	; 62
    4ed6:	11 96       	adiw	r26, 0x01	; 1
    4ed8:	8d 93       	st	X+, r24
    4eda:	9c 93       	st	X, r25
    4edc:	12 97       	sbiw	r26, 0x02	; 2
    4ede:	c6 57       	subi	r28, 0x76	; 118
    4ee0:	dd 4f       	sbci	r29, 0xFD	; 253
    4ee2:	88 81       	ld	r24, Y
    4ee4:	ca 58       	subi	r28, 0x8A	; 138
    4ee6:	d2 40       	sbci	r29, 0x02	; 2
    4ee8:	82 83       	std	Z+2, r24	; 0x02
    4eea:	13 82       	std	Z+3, r1	; 0x03
    4eec:	f4 82       	std	Z+4, r15	; 0x04
    4eee:	15 82       	std	Z+5, r1	; 0x05
    4ef0:	ae c0       	rjmp	.+348    	; 0x504e <eeprom_panel+0x544>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    4ef2:	d2 01       	movw	r26, r4
    4ef4:	13 96       	adiw	r26, 0x03	; 3
    4ef6:	2c 91       	ld	r18, X
    4ef8:	13 97       	sbiw	r26, 0x03	; 3
    4efa:	22 23       	and	r18, r18
    4efc:	09 f0       	breq	.+2      	; 0x4f00 <eeprom_panel+0x3f6>
    4efe:	65 c0       	rjmp	.+202    	; 0x4fca <eeprom_panel+0x4c0>
                        // data record
                        nextaddr = ihex.loadofs;
    4f00:	11 96       	adiw	r26, 0x01	; 1
    4f02:	ed 90       	ld	r14, X+
    4f04:	fc 90       	ld	r15, X
    4f06:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    4f08:	57 01       	movw	r10, r14
    4f0a:	aa 0c       	add	r10, r10
    4f0c:	ab 2c       	mov	r10, r11
    4f0e:	aa 1c       	adc	r10, r10
    4f10:	bb 08       	sbc	r11, r11
    4f12:	b1 94       	neg	r11
    4f14:	ac 14       	cp	r10, r12
    4f16:	bd 04       	cpc	r11, r13
    4f18:	49 f1       	breq	.+82     	; 0x4f6c <eeprom_panel+0x462>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    4f1a:	01 17       	cp	r16, r17
    4f1c:	21 f1       	breq	.+72     	; 0x4f66 <eeprom_panel+0x45c>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    4f1e:	a6 01       	movw	r20, r12
    4f20:	56 95       	lsr	r21
    4f22:	54 2f       	mov	r21, r20
    4f24:	44 27       	eor	r20, r20
    4f26:	57 95       	ror	r21
    4f28:	47 95       	ror	r20
    4f2a:	40 0f       	add	r20, r16
    4f2c:	51 1d       	adc	r21, r1
    4f2e:	60 e0       	ldi	r22, 0x00	; 0
    4f30:	70 e0       	ldi	r23, 0x00	; 0
    4f32:	10 1b       	sub	r17, r16
    4f34:	c4 01       	movw	r24, r8
    4f36:	21 2f       	mov	r18, r17
    4f38:	8e 01       	movw	r16, r28
    4f3a:	0f 5f       	subi	r16, 0xFF	; 255
    4f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <verifyEEPage>
    4f42:	89 2b       	or	r24, r25
    4f44:	81 f4       	brne	.+32     	; 0x4f66 <eeprom_panel+0x45c>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    4f46:	00 d0       	rcall	.+0      	; 0x4f48 <eeprom_panel+0x43e>
    4f48:	0f 92       	push	r0
    4f4a:	88 e8       	ldi	r24, 0x88	; 136
    4f4c:	9a e0       	ldi	r25, 0x0A	; 10
    4f4e:	ed b7       	in	r30, 0x3d	; 61
    4f50:	fe b7       	in	r31, 0x3e	; 62
    4f52:	81 83       	std	Z+1, r24	; 0x01
    4f54:	92 83       	std	Z+2, r25	; 0x02
    4f56:	c3 82       	std	Z+3, r12	; 0x03
    4f58:	d4 82       	std	Z+4, r13	; 0x04
    4f5a:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    4f5e:	0f 90       	pop	r0
    4f60:	0f 90       	pop	r0
    4f62:	0f 90       	pop	r0
    4f64:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    4f66:	1e 2d       	mov	r17, r14
    4f68:	1f 77       	andi	r17, 0x7F	; 127
    4f6a:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    4f6c:	4e 2d       	mov	r20, r14
    4f6e:	4f 77       	andi	r20, 0x7F	; 127
    4f70:	40 17       	cp	r20, r16
    4f72:	08 f4       	brcc	.+2      	; 0x4f76 <eeprom_panel+0x46c>
    4f74:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4f76:	d2 01       	movw	r26, r4
    4f78:	5c 91       	ld	r21, X
    4f7a:	25 2f       	mov	r18, r21
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	c5 57       	subi	r28, 0x75	; 117
    4f80:	dd 4f       	sbci	r29, 0xFD	; 253
    4f82:	a8 81       	ld	r26, Y
    4f84:	b9 81       	ldd	r27, Y+1	; 0x01
    4f86:	cb 58       	subi	r28, 0x8B	; 139
    4f88:	d2 40       	sbci	r29, 0x02	; 2
    4f8a:	e4 2f       	mov	r30, r20
    4f8c:	f0 e0       	ldi	r31, 0x00	; 0
    4f8e:	35 96       	adiw	r30, 0x05	; 5
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	8c 0f       	add	r24, r28
    4f96:	9d 1f       	adc	r25, r29
    4f98:	e8 0f       	add	r30, r24
    4f9a:	f9 1f       	adc	r31, r25
    4f9c:	2c 5f       	subi	r18, 0xFC	; 252
    4f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa0:	24 0d       	add	r18, r4
    4fa2:	35 1d       	adc	r19, r5
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <eeprom_panel+0x4a0>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    4fa6:	8d 91       	ld	r24, X+
    4fa8:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    4faa:	a2 17       	cp	r26, r18
    4fac:	b3 07       	cpc	r27, r19
    4fae:	d9 f7       	brne	.-10     	; 0x4fa6 <eeprom_panel+0x49c>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    4fb0:	85 2f       	mov	r24, r21
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	84 0f       	add	r24, r20
    4fb6:	91 1d       	adc	r25, r1
    4fb8:	21 2f       	mov	r18, r17
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	28 17       	cp	r18, r24
    4fbe:	39 07       	cpc	r19, r25
    4fc0:	0c f0       	brlt	.+2      	; 0x4fc4 <eeprom_panel+0x4ba>
    4fc2:	4d c0       	rjmp	.+154    	; 0x505e <eeprom_panel+0x554>
                            pageendaddr = pageoffset+ihex.reclen;
    4fc4:	14 2f       	mov	r17, r20
    4fc6:	15 0f       	add	r17, r21
    4fc8:	4a c0       	rjmp	.+148    	; 0x505e <eeprom_panel+0x554>
                    } else if (ihex.rectyp == 1) {
    4fca:	21 30       	cpi	r18, 0x01	; 1
    4fcc:	79 f5       	brne	.+94     	; 0x502c <eeprom_panel+0x522>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    4fce:	01 17       	cp	r16, r17
    4fd0:	41 f1       	breq	.+80     	; 0x5022 <eeprom_panel+0x518>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    4fd2:	a6 01       	movw	r20, r12
    4fd4:	56 95       	lsr	r21
    4fd6:	54 2f       	mov	r21, r20
    4fd8:	44 27       	eor	r20, r20
    4fda:	57 95       	ror	r21
    4fdc:	47 95       	ror	r20
    4fde:	40 0f       	add	r20, r16
    4fe0:	51 1d       	adc	r21, r1
    4fe2:	60 e0       	ldi	r22, 0x00	; 0
    4fe4:	70 e0       	ldi	r23, 0x00	; 0
    4fe6:	10 1b       	sub	r17, r16
    4fe8:	c4 01       	movw	r24, r8
    4fea:	21 2f       	mov	r18, r17
    4fec:	8e 01       	movw	r16, r28
    4fee:	0f 5f       	subi	r16, 0xFF	; 255
    4ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff2:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <verifyEEPage>
    4ff6:	89 2b       	or	r24, r25
    4ff8:	a1 f4       	brne	.+40     	; 0x5022 <eeprom_panel+0x518>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    4ffa:	00 d0       	rcall	.+0      	; 0x4ffc <eeprom_panel+0x4f2>
    4ffc:	0f 92       	push	r0
    4ffe:	8b e6       	ldi	r24, 0x6B	; 107
    5000:	9a e0       	ldi	r25, 0x0A	; 10
    5002:	ad b7       	in	r26, 0x3d	; 61
    5004:	be b7       	in	r27, 0x3e	; 62
    5006:	11 96       	adiw	r26, 0x01	; 1
    5008:	8d 93       	st	X+, r24
    500a:	9c 93       	st	X, r25
    500c:	12 97       	sbiw	r26, 0x02	; 2
    500e:	13 96       	adiw	r26, 0x03	; 3
    5010:	cd 92       	st	X+, r12
    5012:	dc 92       	st	X, r13
    5014:	14 97       	sbiw	r26, 0x04	; 4
    5016:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5022:	89 e6       	ldi	r24, 0x69	; 105
    5024:	9a e0       	ldi	r25, 0x0A	; 10
    5026:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    502a:	24 c0       	rjmp	.+72     	; 0x5074 <eeprom_panel+0x56a>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    502c:	00 d0       	rcall	.+0      	; 0x502e <eeprom_panel+0x524>
    502e:	00 d0       	rcall	.+0      	; 0x5030 <eeprom_panel+0x526>
    5030:	ed b7       	in	r30, 0x3d	; 61
    5032:	fe b7       	in	r31, 0x3e	; 62
    5034:	31 96       	adiw	r30, 0x01	; 1
    5036:	88 e2       	ldi	r24, 0x28	; 40
    5038:	9a e0       	ldi	r25, 0x0A	; 10
    503a:	ad b7       	in	r26, 0x3d	; 61
    503c:	be b7       	in	r27, 0x3e	; 62
    503e:	11 96       	adiw	r26, 0x01	; 1
    5040:	8d 93       	st	X+, r24
    5042:	9c 93       	st	X, r25
    5044:	12 97       	sbiw	r26, 0x02	; 2
    5046:	22 83       	std	Z+2, r18	; 0x02
    5048:	13 82       	std	Z+3, r1	; 0x03
    504a:	64 82       	std	Z+4, r6	; 0x04
    504c:	75 82       	std	Z+5, r7	; 0x05
    504e:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    5052:	ed b7       	in	r30, 0x3d	; 61
    5054:	fe b7       	in	r31, 0x3e	; 62
    5056:	36 96       	adiw	r30, 0x06	; 6
    5058:	ed bf       	out	0x3d, r30	; 61
    505a:	fe bf       	out	0x3e, r31	; 62
    505c:	0b c0       	rjmp	.+22     	; 0x5074 <eeprom_panel+0x56a>
                                ihex.rectyp, lineno);
                        break;
    505e:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    5060:	c1 01       	movw	r24, r2
    5062:	60 e0       	ldi	r22, 0x00	; 0
    5064:	71 e0       	ldi	r23, 0x01	; 1
    5066:	43 ec       	ldi	r20, 0xC3	; 195
    5068:	57 e2       	ldi	r21, 0x27	; 39
    506a:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <f_gets>
    506e:	89 2b       	or	r24, r25
    5070:	09 f0       	breq	.+2      	; 0x5074 <eeprom_panel+0x56a>
    5072:	f7 ce       	rjmp	.-530    	; 0x4e62 <eeprom_panel+0x358>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5074:	85 e4       	ldi	r24, 0x45	; 69
    5076:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    5078:	c4 01       	movw	r24, r8
    507a:	60 e7       	ldi	r22, 0x70	; 112
    507c:	ae 01       	movw	r20, r28
    507e:	4f 5f       	subi	r20, 0xFF	; 255
    5080:	5f 4f       	sbci	r21, 0xFF	; 255
    5082:	21 e0       	ldi	r18, 0x01	; 1
    5084:	00 e0       	ldi	r16, 0x00	; 0
    5086:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    508a:	d4 01       	movw	r26, r8
    508c:	1d 96       	adiw	r26, 0x0d	; 13
    508e:	8c 91       	ld	r24, X
    5090:	1d 97       	sbiw	r26, 0x0d	; 13
    5092:	88 23       	and	r24, r24
    5094:	d1 f7       	brne	.-12     	; 0x508a <eeprom_panel+0x580>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    5096:	1e 96       	adiw	r26, 0x0e	; 14
    5098:	8c 91       	ld	r24, X
    509a:	1e 97       	sbiw	r26, 0x0e	; 14
    509c:	81 30       	cpi	r24, 0x01	; 1
    509e:	11 f1       	breq	.+68     	; 0x50e4 <eeprom_panel+0x5da>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    50a0:	1e 96       	adiw	r26, 0x0e	; 14
    50a2:	2c 91       	ld	r18, X
    50a4:	00 d0       	rcall	.+0      	; 0x50a6 <eeprom_panel+0x59c>
    50a6:	0f 92       	push	r0
    50a8:	ed b7       	in	r30, 0x3d	; 61
    50aa:	fe b7       	in	r31, 0x3e	; 62
    50ac:	31 96       	adiw	r30, 0x01	; 1
    50ae:	8d e0       	ldi	r24, 0x0D	; 13
    50b0:	9a e0       	ldi	r25, 0x0A	; 10
    50b2:	ad b7       	in	r26, 0x3d	; 61
    50b4:	be b7       	in	r27, 0x3e	; 62
    50b6:	11 96       	adiw	r26, 0x01	; 1
    50b8:	8d 93       	st	X+, r24
    50ba:	9c 93       	st	X, r25
    50bc:	12 97       	sbiw	r26, 0x02	; 2
    50be:	22 83       	std	Z+2, r18	; 0x02
    50c0:	13 82       	std	Z+3, r1	; 0x03
    50c2:	0a c0       	rjmp	.+20     	; 0x50d8 <eeprom_panel+0x5ce>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <eeprom_panel+0x5bc>
    50c6:	0f 92       	push	r0
    50c8:	82 ef       	ldi	r24, 0xF2	; 242
    50ca:	99 e0       	ldi	r25, 0x09	; 9
    50cc:	ed b7       	in	r30, 0x3d	; 61
    50ce:	fe b7       	in	r31, 0x3e	; 62
    50d0:	81 83       	std	Z+1, r24	; 0x01
    50d2:	92 83       	std	Z+2, r25	; 0x02
    50d4:	e3 82       	std	Z+3, r14	; 0x03
    50d6:	f4 82       	std	Z+4, r15	; 0x04
    50d8:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    50dc:	0f 90       	pop	r0
    50de:	0f 90       	pop	r0
    50e0:	0f 90       	pop	r0
    50e2:	0f 90       	pop	r0
    }
    
};
    50e4:	c0 57       	subi	r28, 0x70	; 112
    50e6:	dd 4f       	sbci	r29, 0xFD	; 253
    50e8:	e2 e1       	ldi	r30, 0x12	; 18
    50ea:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

000050ee <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    50ee:	a0 e9       	ldi	r26, 0x90	; 144
    50f0:	b2 e0       	ldi	r27, 0x02	; 2
    50f2:	ed e7       	ldi	r30, 0x7D	; 125
    50f4:	f8 e2       	ldi	r31, 0x28	; 40
    50f6:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    50fa:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    50fc:	e8 2e       	mov	r14, r24
    50fe:	ff 24       	eor	r15, r15
    5100:	f7 01       	movw	r30, r14
    5102:	e8 5e       	subi	r30, 0xE8	; 232
    5104:	f8 4d       	sbci	r31, 0xD8	; 216
    5106:	e0 81       	ld	r30, Z
    if (ch != 0){
    5108:	ee 23       	and	r30, r30
    510a:	09 f4       	brne	.+2      	; 0x510e <flash_panel+0x20>
    510c:	e1 c2       	rjmp	.+1474   	; 0x56d0 <flash_panel+0x5e2>
        
        switch (ch) {
    510e:	e3 30       	cpi	r30, 0x03	; 3
    5110:	71 f0       	breq	.+28     	; 0x512e <flash_panel+0x40>
    5112:	e4 30       	cpi	r30, 0x04	; 4
    5114:	89 f0       	breq	.+34     	; 0x5138 <flash_panel+0x4a>
    5116:	e2 30       	cpi	r30, 0x02	; 2
    5118:	29 f4       	brne	.+10     	; 0x5124 <flash_panel+0x36>
    511a:	62 e7       	ldi	r22, 0x72	; 114
    511c:	86 2e       	mov	r8, r22
    511e:	69 e2       	ldi	r22, 0x29	; 41
    5120:	96 2e       	mov	r9, r22
    5122:	0e c0       	rjmp	.+28     	; 0x5140 <flash_panel+0x52>
    5124:	55 e7       	ldi	r21, 0x75	; 117
    5126:	85 2e       	mov	r8, r21
    5128:	56 e2       	ldi	r21, 0x26	; 38
    512a:	95 2e       	mov	r9, r21
    512c:	09 c0       	rjmp	.+18     	; 0x5140 <flash_panel+0x52>
    512e:	48 e0       	ldi	r20, 0x08	; 8
    5130:	84 2e       	mov	r8, r20
    5132:	47 e2       	ldi	r20, 0x27	; 39
    5134:	94 2e       	mov	r9, r20
    5136:	04 c0       	rjmp	.+8      	; 0x5140 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    5138:	37 e9       	ldi	r19, 0x97	; 151
    513a:	83 2e       	mov	r8, r19
    513c:	35 e2       	ldi	r19, 0x25	; 37
    513e:	93 2e       	mov	r9, r19
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    5140:	83 ea       	ldi	r24, 0xA3	; 163
    5142:	97 e2       	ldi	r25, 0x27	; 39
    5144:	65 ed       	ldi	r22, 0xD5	; 213
    5146:	73 e2       	ldi	r23, 0x23	; 35
    5148:	41 e0       	ldi	r20, 0x01	; 1
    514a:	0e 94 12 4c 	call	0x9824	; 0x9824 <f_open>
    514e:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5150:	88 23       	and	r24, r24
    5152:	49 f0       	breq	.+18     	; 0x5166 <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    5154:	86 ee       	ldi	r24, 0xE6	; 230
    5156:	9e e0       	ldi	r25, 0x0E	; 14
    5158:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            put_rc(res);
    515c:	81 2f       	mov	r24, r17
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	0e 94 55 22 	call	0x44aa	; 0x44aa <put_rc>
    5164:	51 c0       	rjmp	.+162    	; 0x5208 <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    5166:	07 ff       	sbrs	r16, 7
    5168:	12 c0       	rjmp	.+36     	; 0x518e <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    516a:	84 e0       	ldi	r24, 0x04	; 4
    516c:	e0 e6       	ldi	r30, 0x60	; 96
    516e:	f6 e0       	ldi	r31, 0x06	; 6
    5170:	86 83       	std	Z+6, r24	; 0x06
    5172:	84 e6       	ldi	r24, 0x64	; 100
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	20 e2       	ldi	r18, 0x20	; 32
    5178:	33 e0       	ldi	r19, 0x03	; 3
    517a:	f9 01       	movw	r30, r18
    517c:	31 97       	sbiw	r30, 0x01	; 1
    517e:	f1 f7       	brne	.-4      	; 0x517c <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5182:	d9 f7       	brne	.-10     	; 0x517a <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    5184:	84 e0       	ldi	r24, 0x04	; 4
    5186:	e0 e6       	ldi	r30, 0x60	; 96
    5188:	f6 e0       	ldi	r31, 0x06	; 6
    518a:	85 83       	std	Z+5, r24	; 0x05
    518c:	3d c0       	rjmp	.+122    	; 0x5208 <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    518e:	00 d0       	rcall	.+0      	; 0x5190 <flash_panel+0xa2>
    5190:	0f 92       	push	r0
    5192:	85 ed       	ldi	r24, 0xD5	; 213
    5194:	9e e0       	ldi	r25, 0x0E	; 14
    5196:	ad b7       	in	r26, 0x3d	; 61
    5198:	be b7       	in	r27, 0x3e	; 62
    519a:	11 96       	adiw	r26, 0x01	; 1
    519c:	8d 93       	st	X+, r24
    519e:	9c 93       	st	X, r25
    51a0:	12 97       	sbiw	r26, 0x02	; 2
    51a2:	13 96       	adiw	r26, 0x03	; 3
    51a4:	ed 92       	st	X+, r14
    51a6:	fc 92       	st	X, r15
    51a8:	14 97       	sbiw	r26, 0x04	; 4
    51aa:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                pagebuff[0] = 0x00;
    51ae:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    51b4:	0f 90       	pop	r0
    51b6:	0f 90       	pop	r0
    51b8:	0f 90       	pop	r0
    51ba:	0f 90       	pop	r0
    51bc:	c4 01       	movw	r24, r8
    51be:	60 2f       	mov	r22, r16
    51c0:	ae 01       	movw	r20, r28
    51c2:	4f 5f       	subi	r20, 0xFF	; 255
    51c4:	5f 4f       	sbci	r21, 0xFF	; 255
    51c6:	22 e0       	ldi	r18, 0x02	; 2
    51c8:	00 e0       	ldi	r16, 0x00	; 0
    51ca:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    51ce:	f4 01       	movw	r30, r8
    51d0:	85 85       	ldd	r24, Z+13	; 0x0d
    51d2:	88 23       	and	r24, r24
    51d4:	e1 f7       	brne	.-8      	; 0x51ce <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    51d6:	86 85       	ldd	r24, Z+14	; 0x0e
    51d8:	81 30       	cpi	r24, 0x01	; 1
    51da:	b1 f0       	breq	.+44     	; 0x5208 <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    51dc:	26 85       	ldd	r18, Z+14	; 0x0e
    51de:	00 d0       	rcall	.+0      	; 0x51e0 <flash_panel+0xf2>
    51e0:	0f 92       	push	r0
    51e2:	ed b7       	in	r30, 0x3d	; 61
    51e4:	fe b7       	in	r31, 0x3e	; 62
    51e6:	31 96       	adiw	r30, 0x01	; 1
    51e8:	87 eb       	ldi	r24, 0xB7	; 183
    51ea:	9e e0       	ldi	r25, 0x0E	; 14
    51ec:	ad b7       	in	r26, 0x3d	; 61
    51ee:	be b7       	in	r27, 0x3e	; 62
    51f0:	11 96       	adiw	r26, 0x01	; 1
    51f2:	8d 93       	st	X+, r24
    51f4:	9c 93       	st	X, r25
    51f6:	12 97       	sbiw	r26, 0x02	; 2
    51f8:	22 83       	std	Z+2, r18	; 0x02
    51fa:	13 82       	std	Z+3, r1	; 0x03
    51fc:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    5200:	0f 90       	pop	r0
    5202:	0f 90       	pop	r0
    5204:	0f 90       	pop	r0
    5206:	0f 90       	pop	r0
    5208:	88 e8       	ldi	r24, 0x88	; 136
    520a:	93 e1       	ldi	r25, 0x13	; 19
    520c:	20 e2       	ldi	r18, 0x20	; 32
    520e:	33 e0       	ldi	r19, 0x03	; 3
    5210:	f9 01       	movw	r30, r18
    5212:	31 97       	sbiw	r30, 0x01	; 1
    5214:	f1 f7       	brne	.-4      	; 0x5212 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5218:	d9 f7       	brne	.-10     	; 0x5210 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    521a:	8a ea       	ldi	r24, 0xAA	; 170
    521c:	9e e0       	ldi	r25, 0x0E	; 14
    521e:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    5222:	0f ef       	ldi	r16, 0xFF	; 255
    5224:	1f ef       	ldi	r17, 0xFF	; 255
    5226:	cc 24       	eor	r12, r12
    5228:	dd 24       	eor	r13, r13
    522a:	66 24       	eor	r6, r6
    522c:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    522e:	26 e8       	ldi	r18, 0x86	; 134
    5230:	22 2e       	mov	r2, r18
    5232:	31 2c       	mov	r3, r1
    5234:	2c 0e       	add	r2, r28
    5236:	3d 1e       	adc	r3, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5238:	96 e8       	ldi	r25, 0x86	; 134
    523a:	49 2e       	mov	r4, r25
    523c:	91 e0       	ldi	r25, 0x01	; 1
    523e:	59 2e       	mov	r5, r25
    5240:	4c 0e       	add	r4, r28
    5242:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5244:	f2 01       	movw	r30, r4
    5246:	34 96       	adiw	r30, 0x04	; 4
    5248:	c3 57       	subi	r28, 0x73	; 115
    524a:	dd 4f       	sbci	r29, 0xFD	; 253
    524c:	e8 83       	st	Y, r30
    524e:	f9 83       	std	Y+1, r31	; 0x01
    5250:	cd 58       	subi	r28, 0x8D	; 141
    5252:	d2 40       	sbci	r29, 0x02	; 2
    5254:	cb c0       	rjmp	.+406    	; 0x53ec <flash_panel+0x2fe>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    5256:	08 94       	sec
    5258:	61 1c       	adc	r6, r1
    525a:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    525c:	f1 01       	movw	r30, r2
    525e:	01 90       	ld	r0, Z+
    5260:	00 20       	and	r0, r0
    5262:	e9 f7       	brne	.-6      	; 0x525e <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    5264:	32 97       	sbiw	r30, 0x02	; 2
    5266:	80 81       	ld	r24, Z
    5268:	8a 30       	cpi	r24, 0x0A	; 10
    526a:	09 f4       	brne	.+2      	; 0x526e <flash_panel+0x180>
                flashBuff[--len] = 0;
    526c:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    526e:	d1 01       	movw	r26, r2
    5270:	8c 91       	ld	r24, X
    5272:	8a 33       	cpi	r24, 0x3A	; 58
    5274:	09 f0       	breq	.+2      	; 0x5278 <flash_panel+0x18a>
    5276:	ba c0       	rjmp	.+372    	; 0x53ec <flash_panel+0x2fe>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    5278:	c2 01       	movw	r24, r4
    527a:	b1 01       	movw	r22, r2
    527c:	0e 94 75 24 	call	0x48ea	; 0x48ea <ihex_readrec>
    5280:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    5282:	c6 57       	subi	r28, 0x76	; 118
    5284:	dd 4f       	sbci	r29, 0xFD	; 253
    5286:	88 81       	ld	r24, Y
    5288:	ca 58       	subi	r28, 0x8A	; 138
    528a:	d2 40       	sbci	r29, 0x02	; 2
    528c:	f8 16       	cp	r15, r24
    528e:	19 f1       	breq	.+70     	; 0x52d6 <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    5290:	00 d0       	rcall	.+0      	; 0x5292 <flash_panel+0x1a4>
    5292:	0f 92       	push	r0
    5294:	87 e7       	ldi	r24, 0x77	; 119
    5296:	9e e0       	ldi	r25, 0x0E	; 14
    5298:	ed b7       	in	r30, 0x3d	; 61
    529a:	fe b7       	in	r31, 0x3e	; 62
    529c:	81 83       	std	Z+1, r24	; 0x01
    529e:	92 83       	std	Z+2, r25	; 0x02
    52a0:	63 82       	std	Z+3, r6	; 0x03
    52a2:	74 82       	std	Z+4, r7	; 0x04
    52a4:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    52a8:	0f 92       	push	r0
    52aa:	0f 92       	push	r0
    52ac:	ed b7       	in	r30, 0x3d	; 61
    52ae:	fe b7       	in	r31, 0x3e	; 62
    52b0:	31 96       	adiw	r30, 0x01	; 1
    52b2:	8c e4       	ldi	r24, 0x4C	; 76
    52b4:	9e e0       	ldi	r25, 0x0E	; 14
    52b6:	ad b7       	in	r26, 0x3d	; 61
    52b8:	be b7       	in	r27, 0x3e	; 62
    52ba:	11 96       	adiw	r26, 0x01	; 1
    52bc:	8d 93       	st	X+, r24
    52be:	9c 93       	st	X, r25
    52c0:	12 97       	sbiw	r26, 0x02	; 2
    52c2:	c6 57       	subi	r28, 0x76	; 118
    52c4:	dd 4f       	sbci	r29, 0xFD	; 253
    52c6:	88 81       	ld	r24, Y
    52c8:	ca 58       	subi	r28, 0x8A	; 138
    52ca:	d2 40       	sbci	r29, 0x02	; 2
    52cc:	82 83       	std	Z+2, r24	; 0x02
    52ce:	13 82       	std	Z+3, r1	; 0x03
    52d0:	f4 82       	std	Z+4, r15	; 0x04
    52d2:	15 82       	std	Z+5, r1	; 0x05
    52d4:	82 c0       	rjmp	.+260    	; 0x53da <flash_panel+0x2ec>
                break;
            } else {
                if (ihex.rectyp == 0) {
    52d6:	d2 01       	movw	r26, r4
    52d8:	13 96       	adiw	r26, 0x03	; 3
    52da:	2c 91       	ld	r18, X
    52dc:	13 97       	sbiw	r26, 0x03	; 3
    52de:	22 23       	and	r18, r18
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <flash_panel+0x1f6>
    52e2:	53 c0       	rjmp	.+166    	; 0x538a <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    52e4:	11 96       	adiw	r26, 0x01	; 1
    52e6:	ed 90       	ld	r14, X+
    52e8:	fc 90       	ld	r15, X
    52ea:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    52ec:	57 01       	movw	r10, r14
    52ee:	aa 0c       	add	r10, r10
    52f0:	ab 2c       	mov	r10, r11
    52f2:	aa 1c       	adc	r10, r10
    52f4:	bb 08       	sbc	r11, r11
    52f6:	b1 94       	neg	r11
    52f8:	a0 16       	cp	r10, r16
    52fa:	b1 06       	cpc	r11, r17
    52fc:	c1 f0       	breq	.+48     	; 0x532e <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    52fe:	cd 14       	cp	r12, r13
    5300:	91 f0       	breq	.+36     	; 0x5326 <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    5302:	16 95       	lsr	r17
    5304:	10 2f       	mov	r17, r16
    5306:	00 27       	eor	r16, r16
    5308:	17 95       	ror	r17
    530a:	07 95       	ror	r16
    530c:	0c 0d       	add	r16, r12
    530e:	11 1d       	adc	r17, r1
    5310:	a8 01       	movw	r20, r16
    5312:	60 e0       	ldi	r22, 0x00	; 0
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	dc 18       	sub	r13, r12
    5318:	c4 01       	movw	r24, r8
    531a:	2d 2d       	mov	r18, r13
    531c:	8e 01       	movw	r16, r28
    531e:	0f 5f       	subi	r16, 0xFF	; 255
    5320:	1f 4f       	sbci	r17, 0xFF	; 255
    5322:	0e 94 2e 24 	call	0x485c	; 0x485c <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5326:	af e7       	ldi	r26, 0x7F	; 127
    5328:	da 2e       	mov	r13, r26
    532a:	de 20       	and	r13, r14
    532c:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    532e:	4e 2d       	mov	r20, r14
    5330:	4f 77       	andi	r20, 0x7F	; 127
    5332:	4c 15       	cp	r20, r12
    5334:	08 f4       	brcc	.+2      	; 0x5338 <flash_panel+0x24a>
    5336:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5338:	f2 01       	movw	r30, r4
    533a:	50 81       	ld	r21, Z
    533c:	25 2f       	mov	r18, r21
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	c3 57       	subi	r28, 0x73	; 115
    5342:	dd 4f       	sbci	r29, 0xFD	; 253
    5344:	a8 81       	ld	r26, Y
    5346:	b9 81       	ldd	r27, Y+1	; 0x01
    5348:	cd 58       	subi	r28, 0x8D	; 141
    534a:	d2 40       	sbci	r29, 0x02	; 2
    534c:	e4 2f       	mov	r30, r20
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	35 96       	adiw	r30, 0x05	; 5
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	8c 0f       	add	r24, r28
    5358:	9d 1f       	adc	r25, r29
    535a:	e8 0f       	add	r30, r24
    535c:	f9 1f       	adc	r31, r25
    535e:	2c 5f       	subi	r18, 0xFC	; 252
    5360:	3f 4f       	sbci	r19, 0xFF	; 255
    5362:	24 0d       	add	r18, r4
    5364:	35 1d       	adc	r19, r5
    5366:	02 c0       	rjmp	.+4      	; 0x536c <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5368:	8d 91       	ld	r24, X+
    536a:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    536c:	a2 17       	cp	r26, r18
    536e:	b3 07       	cpc	r27, r19
    5370:	d9 f7       	brne	.-10     	; 0x5368 <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    5372:	85 2f       	mov	r24, r21
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	84 0f       	add	r24, r20
    5378:	91 1d       	adc	r25, r1
    537a:	2d 2d       	mov	r18, r13
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	28 17       	cp	r18, r24
    5380:	39 07       	cpc	r19, r25
    5382:	9c f5       	brge	.+102    	; 0x53ea <flash_panel+0x2fc>
                        pageendaddr = pageoffset+ihex.reclen;
    5384:	d4 2e       	mov	r13, r20
    5386:	d5 0e       	add	r13, r21
    5388:	30 c0       	rjmp	.+96     	; 0x53ea <flash_panel+0x2fc>
                } else if (ihex.rectyp == 1) {
    538a:	21 30       	cpi	r18, 0x01	; 1
    538c:	a9 f4       	brne	.+42     	; 0x53b8 <flash_panel+0x2ca>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    538e:	cd 14       	cp	r12, r13
    5390:	b9 f1       	breq	.+110    	; 0x5400 <flash_panel+0x312>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    5392:	16 95       	lsr	r17
    5394:	10 2f       	mov	r17, r16
    5396:	00 27       	eor	r16, r16
    5398:	17 95       	ror	r17
    539a:	07 95       	ror	r16
    539c:	0c 0d       	add	r16, r12
    539e:	11 1d       	adc	r17, r1
    53a0:	a8 01       	movw	r20, r16
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	70 e0       	ldi	r23, 0x00	; 0
    53a6:	dc 18       	sub	r13, r12
    53a8:	c4 01       	movw	r24, r8
    53aa:	2d 2d       	mov	r18, r13
    53ac:	8e 01       	movw	r16, r28
    53ae:	0f 5f       	subi	r16, 0xFF	; 255
    53b0:	1f 4f       	sbci	r17, 0xFF	; 255
    53b2:	0e 94 2e 24 	call	0x485c	; 0x485c <progPage>
    53b6:	24 c0       	rjmp	.+72     	; 0x5400 <flash_panel+0x312>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    53b8:	00 d0       	rcall	.+0      	; 0x53ba <flash_panel+0x2cc>
    53ba:	00 d0       	rcall	.+0      	; 0x53bc <flash_panel+0x2ce>
    53bc:	ed b7       	in	r30, 0x3d	; 61
    53be:	fe b7       	in	r31, 0x3e	; 62
    53c0:	31 96       	adiw	r30, 0x01	; 1
    53c2:	8c e0       	ldi	r24, 0x0C	; 12
    53c4:	9e e0       	ldi	r25, 0x0E	; 14
    53c6:	ad b7       	in	r26, 0x3d	; 61
    53c8:	be b7       	in	r27, 0x3e	; 62
    53ca:	11 96       	adiw	r26, 0x01	; 1
    53cc:	8d 93       	st	X+, r24
    53ce:	9c 93       	st	X, r25
    53d0:	12 97       	sbiw	r26, 0x02	; 2
    53d2:	22 83       	std	Z+2, r18	; 0x02
    53d4:	13 82       	std	Z+3, r1	; 0x03
    53d6:	64 82       	std	Z+4, r6	; 0x04
    53d8:	75 82       	std	Z+5, r7	; 0x05
    53da:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    53de:	ed b7       	in	r30, 0x3d	; 61
    53e0:	fe b7       	in	r31, 0x3e	; 62
    53e2:	36 96       	adiw	r30, 0x06	; 6
    53e4:	ed bf       	out	0x3d, r30	; 61
    53e6:	fe bf       	out	0x3e, r31	; 62
    53e8:	0b c0       	rjmp	.+22     	; 0x5400 <flash_panel+0x312>
                            ihex.rectyp, lineno);
                    break;
    53ea:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    53ec:	c1 01       	movw	r24, r2
    53ee:	60 e0       	ldi	r22, 0x00	; 0
    53f0:	71 e0       	ldi	r23, 0x01	; 1
    53f2:	43 ea       	ldi	r20, 0xA3	; 163
    53f4:	57 e2       	ldi	r21, 0x27	; 39
    53f6:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <f_gets>
    53fa:	89 2b       	or	r24, r25
    53fc:	09 f0       	breq	.+2      	; 0x5400 <flash_panel+0x312>
    53fe:	2b cf       	rjmp	.-426    	; 0x5256 <flash_panel+0x168>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    5400:	83 ea       	ldi	r24, 0xA3	; 163
    5402:	97 e2       	ldi	r25, 0x27	; 39
    5404:	40 e0       	ldi	r20, 0x00	; 0
    5406:	50 e0       	ldi	r21, 0x00	; 0
    5408:	60 e0       	ldi	r22, 0x00	; 0
    540a:	70 e0       	ldi	r23, 0x00	; 0
    540c:	0e 94 bc 3b 	call	0x7778	; 0x7778 <f_lseek>
    5410:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5412:	88 23       	and	r24, r24
    5414:	49 f0       	breq	.+18     	; 0x5428 <flash_panel+0x33a>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    5416:	8f ee       	ldi	r24, 0xEF	; 239
    5418:	9d e0       	ldi	r25, 0x0D	; 13
    541a:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
            put_rc(res);
    541e:	81 2f       	mov	r24, r17
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	0e 94 55 22 	call	0x44aa	; 0x44aa <put_rc>
    5426:	2c c1       	rjmp	.+600    	; 0x5680 <flash_panel+0x592>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    5428:	82 ee       	ldi	r24, 0xE2	; 226
    542a:	9d e0       	ldi	r25, 0x0D	; 13
    542c:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    5430:	cc 24       	eor	r12, r12
    5432:	ca 94       	dec	r12
    5434:	dc 2c       	mov	r13, r12
    5436:	00 e0       	ldi	r16, 0x00	; 0
    5438:	10 e0       	ldi	r17, 0x00	; 0
    543a:	66 24       	eor	r6, r6
    543c:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    543e:	ce 01       	movw	r24, r28
    5440:	8a 57       	subi	r24, 0x7A	; 122
    5442:	9f 4f       	sbci	r25, 0xFF	; 255
    5444:	c1 57       	subi	r28, 0x71	; 113
    5446:	dd 4f       	sbci	r29, 0xFD	; 253
    5448:	88 83       	st	Y, r24
    544a:	99 83       	std	Y+1, r25	; 0x01
    544c:	cf 58       	subi	r28, 0x8F	; 143
    544e:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5450:	e6 e8       	ldi	r30, 0x86	; 134
    5452:	4e 2e       	mov	r4, r30
    5454:	e1 e0       	ldi	r30, 0x01	; 1
    5456:	5e 2e       	mov	r5, r30
    5458:	4c 0e       	add	r4, r28
    545a:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    545c:	d2 01       	movw	r26, r4
    545e:	14 96       	adiw	r26, 0x04	; 4
    5460:	c5 57       	subi	r28, 0x75	; 117
    5462:	dd 4f       	sbci	r29, 0xFD	; 253
    5464:	a8 83       	st	Y, r26
    5466:	b9 83       	std	Y+1, r27	; 0x01
    5468:	cb 58       	subi	r28, 0x8B	; 139
    546a:	d2 40       	sbci	r29, 0x02	; 2
    546c:	ff c0       	rjmp	.+510    	; 0x566c <flash_panel+0x57e>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    546e:	08 94       	sec
    5470:	61 1c       	adc	r6, r1
    5472:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    5474:	c1 57       	subi	r28, 0x71	; 113
    5476:	dd 4f       	sbci	r29, 0xFD	; 253
    5478:	e8 81       	ld	r30, Y
    547a:	f9 81       	ldd	r31, Y+1	; 0x01
    547c:	cf 58       	subi	r28, 0x8F	; 143
    547e:	d2 40       	sbci	r29, 0x02	; 2
    5480:	01 90       	ld	r0, Z+
    5482:	00 20       	and	r0, r0
    5484:	e9 f7       	brne	.-6      	; 0x5480 <flash_panel+0x392>
                if (flashBuff[len-1] == '\n')
    5486:	32 97       	sbiw	r30, 0x02	; 2
    5488:	80 81       	ld	r24, Z
    548a:	8a 30       	cpi	r24, 0x0A	; 10
    548c:	09 f4       	brne	.+2      	; 0x5490 <flash_panel+0x3a2>
                    flashBuff[--len] = 0;
    548e:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    5490:	ca 57       	subi	r28, 0x7A	; 122
    5492:	df 4f       	sbci	r29, 0xFF	; 255
    5494:	88 81       	ld	r24, Y
    5496:	c6 58       	subi	r28, 0x86	; 134
    5498:	d0 40       	sbci	r29, 0x00	; 0
    549a:	8a 33       	cpi	r24, 0x3A	; 58
    549c:	09 f0       	breq	.+2      	; 0x54a0 <flash_panel+0x3b2>
    549e:	e6 c0       	rjmp	.+460    	; 0x566c <flash_panel+0x57e>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    54a0:	c2 01       	movw	r24, r4
    54a2:	b1 01       	movw	r22, r2
    54a4:	0e 94 75 24 	call	0x48ea	; 0x48ea <ihex_readrec>
    54a8:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    54aa:	c6 57       	subi	r28, 0x76	; 118
    54ac:	dd 4f       	sbci	r29, 0xFD	; 253
    54ae:	88 81       	ld	r24, Y
    54b0:	ca 58       	subi	r28, 0x8A	; 138
    54b2:	d2 40       	sbci	r29, 0x02	; 2
    54b4:	f8 16       	cp	r15, r24
    54b6:	19 f1       	breq	.+70     	; 0x54fe <flash_panel+0x410>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    54b8:	00 d0       	rcall	.+0      	; 0x54ba <flash_panel+0x3cc>
    54ba:	0f 92       	push	r0
    54bc:	80 eb       	ldi	r24, 0xB0	; 176
    54be:	9d e0       	ldi	r25, 0x0D	; 13
    54c0:	ed b7       	in	r30, 0x3d	; 61
    54c2:	fe b7       	in	r31, 0x3e	; 62
    54c4:	81 83       	std	Z+1, r24	; 0x01
    54c6:	92 83       	std	Z+2, r25	; 0x02
    54c8:	63 82       	std	Z+3, r6	; 0x03
    54ca:	74 82       	std	Z+4, r7	; 0x04
    54cc:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    54d0:	0f 92       	push	r0
    54d2:	0f 92       	push	r0
    54d4:	ed b7       	in	r30, 0x3d	; 61
    54d6:	fe b7       	in	r31, 0x3e	; 62
    54d8:	31 96       	adiw	r30, 0x01	; 1
    54da:	85 e8       	ldi	r24, 0x85	; 133
    54dc:	9d e0       	ldi	r25, 0x0D	; 13
    54de:	ad b7       	in	r26, 0x3d	; 61
    54e0:	be b7       	in	r27, 0x3e	; 62
    54e2:	11 96       	adiw	r26, 0x01	; 1
    54e4:	8d 93       	st	X+, r24
    54e6:	9c 93       	st	X, r25
    54e8:	12 97       	sbiw	r26, 0x02	; 2
    54ea:	c6 57       	subi	r28, 0x76	; 118
    54ec:	dd 4f       	sbci	r29, 0xFD	; 253
    54ee:	88 81       	ld	r24, Y
    54f0:	ca 58       	subi	r28, 0x8A	; 138
    54f2:	d2 40       	sbci	r29, 0x02	; 2
    54f4:	82 83       	std	Z+2, r24	; 0x02
    54f6:	13 82       	std	Z+3, r1	; 0x03
    54f8:	f4 82       	std	Z+4, r15	; 0x04
    54fa:	15 82       	std	Z+5, r1	; 0x05
    54fc:	ae c0       	rjmp	.+348    	; 0x565a <flash_panel+0x56c>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    54fe:	d2 01       	movw	r26, r4
    5500:	13 96       	adiw	r26, 0x03	; 3
    5502:	2c 91       	ld	r18, X
    5504:	13 97       	sbiw	r26, 0x03	; 3
    5506:	22 23       	and	r18, r18
    5508:	09 f0       	breq	.+2      	; 0x550c <flash_panel+0x41e>
    550a:	65 c0       	rjmp	.+202    	; 0x55d6 <flash_panel+0x4e8>
                        // data record
                        nextaddr = ihex.loadofs;
    550c:	11 96       	adiw	r26, 0x01	; 1
    550e:	ed 90       	ld	r14, X+
    5510:	fc 90       	ld	r15, X
    5512:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5514:	57 01       	movw	r10, r14
    5516:	aa 0c       	add	r10, r10
    5518:	ab 2c       	mov	r10, r11
    551a:	aa 1c       	adc	r10, r10
    551c:	bb 08       	sbc	r11, r11
    551e:	b1 94       	neg	r11
    5520:	ac 14       	cp	r10, r12
    5522:	bd 04       	cpc	r11, r13
    5524:	49 f1       	breq	.+82     	; 0x5578 <flash_panel+0x48a>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    5526:	01 17       	cp	r16, r17
    5528:	21 f1       	breq	.+72     	; 0x5572 <flash_panel+0x484>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    552a:	a6 01       	movw	r20, r12
    552c:	56 95       	lsr	r21
    552e:	54 2f       	mov	r21, r20
    5530:	44 27       	eor	r20, r20
    5532:	57 95       	ror	r21
    5534:	47 95       	ror	r20
    5536:	40 0f       	add	r20, r16
    5538:	51 1d       	adc	r21, r1
    553a:	60 e0       	ldi	r22, 0x00	; 0
    553c:	70 e0       	ldi	r23, 0x00	; 0
    553e:	10 1b       	sub	r17, r16
    5540:	c4 01       	movw	r24, r8
    5542:	21 2f       	mov	r18, r17
    5544:	8e 01       	movw	r16, r28
    5546:	0f 5f       	subi	r16, 0xFF	; 255
    5548:	1f 4f       	sbci	r17, 0xFF	; 255
    554a:	0e 94 75 23 	call	0x46ea	; 0x46ea <verifyPage>
    554e:	89 2b       	or	r24, r25
    5550:	81 f4       	brne	.+32     	; 0x5572 <flash_panel+0x484>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    5552:	00 d0       	rcall	.+0      	; 0x5554 <flash_panel+0x466>
    5554:	0f 92       	push	r0
    5556:	88 e6       	ldi	r24, 0x68	; 104
    5558:	9d e0       	ldi	r25, 0x0D	; 13
    555a:	ed b7       	in	r30, 0x3d	; 61
    555c:	fe b7       	in	r31, 0x3e	; 62
    555e:	81 83       	std	Z+1, r24	; 0x01
    5560:	92 83       	std	Z+2, r25	; 0x02
    5562:	c3 82       	std	Z+3, r12	; 0x03
    5564:	d4 82       	std	Z+4, r13	; 0x04
    5566:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    556a:	0f 90       	pop	r0
    556c:	0f 90       	pop	r0
    556e:	0f 90       	pop	r0
    5570:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5572:	1e 2d       	mov	r17, r14
    5574:	1f 77       	andi	r17, 0x7F	; 127
    5576:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    5578:	4e 2d       	mov	r20, r14
    557a:	4f 77       	andi	r20, 0x7F	; 127
    557c:	40 17       	cp	r20, r16
    557e:	08 f4       	brcc	.+2      	; 0x5582 <flash_panel+0x494>
    5580:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5582:	d2 01       	movw	r26, r4
    5584:	5c 91       	ld	r21, X
    5586:	25 2f       	mov	r18, r21
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	c5 57       	subi	r28, 0x75	; 117
    558c:	dd 4f       	sbci	r29, 0xFD	; 253
    558e:	a8 81       	ld	r26, Y
    5590:	b9 81       	ldd	r27, Y+1	; 0x01
    5592:	cb 58       	subi	r28, 0x8B	; 139
    5594:	d2 40       	sbci	r29, 0x02	; 2
    5596:	e4 2f       	mov	r30, r20
    5598:	f0 e0       	ldi	r31, 0x00	; 0
    559a:	35 96       	adiw	r30, 0x05	; 5
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	8c 0f       	add	r24, r28
    55a2:	9d 1f       	adc	r25, r29
    55a4:	e8 0f       	add	r30, r24
    55a6:	f9 1f       	adc	r31, r25
    55a8:	2c 5f       	subi	r18, 0xFC	; 252
    55aa:	3f 4f       	sbci	r19, 0xFF	; 255
    55ac:	24 0d       	add	r18, r4
    55ae:	35 1d       	adc	r19, r5
    55b0:	02 c0       	rjmp	.+4      	; 0x55b6 <flash_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    55b2:	8d 91       	ld	r24, X+
    55b4:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    55b6:	a2 17       	cp	r26, r18
    55b8:	b3 07       	cpc	r27, r19
    55ba:	d9 f7       	brne	.-10     	; 0x55b2 <flash_panel+0x4c4>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    55bc:	85 2f       	mov	r24, r21
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	84 0f       	add	r24, r20
    55c2:	91 1d       	adc	r25, r1
    55c4:	21 2f       	mov	r18, r17
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	28 17       	cp	r18, r24
    55ca:	39 07       	cpc	r19, r25
    55cc:	0c f0       	brlt	.+2      	; 0x55d0 <flash_panel+0x4e2>
    55ce:	4d c0       	rjmp	.+154    	; 0x566a <flash_panel+0x57c>
                            pageendaddr = pageoffset+ihex.reclen;
    55d0:	14 2f       	mov	r17, r20
    55d2:	15 0f       	add	r17, r21
    55d4:	4a c0       	rjmp	.+148    	; 0x566a <flash_panel+0x57c>
                    } else if (ihex.rectyp == 1) {
    55d6:	21 30       	cpi	r18, 0x01	; 1
    55d8:	79 f5       	brne	.+94     	; 0x5638 <flash_panel+0x54a>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    55da:	01 17       	cp	r16, r17
    55dc:	41 f1       	breq	.+80     	; 0x562e <flash_panel+0x540>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    55de:	a6 01       	movw	r20, r12
    55e0:	56 95       	lsr	r21
    55e2:	54 2f       	mov	r21, r20
    55e4:	44 27       	eor	r20, r20
    55e6:	57 95       	ror	r21
    55e8:	47 95       	ror	r20
    55ea:	40 0f       	add	r20, r16
    55ec:	51 1d       	adc	r21, r1
    55ee:	60 e0       	ldi	r22, 0x00	; 0
    55f0:	70 e0       	ldi	r23, 0x00	; 0
    55f2:	10 1b       	sub	r17, r16
    55f4:	c4 01       	movw	r24, r8
    55f6:	21 2f       	mov	r18, r17
    55f8:	8e 01       	movw	r16, r28
    55fa:	0f 5f       	subi	r16, 0xFF	; 255
    55fc:	1f 4f       	sbci	r17, 0xFF	; 255
    55fe:	0e 94 75 23 	call	0x46ea	; 0x46ea <verifyPage>
    5602:	89 2b       	or	r24, r25
    5604:	a1 f4       	brne	.+40     	; 0x562e <flash_panel+0x540>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    5606:	00 d0       	rcall	.+0      	; 0x5608 <flash_panel+0x51a>
    5608:	0f 92       	push	r0
    560a:	8b e4       	ldi	r24, 0x4B	; 75
    560c:	9d e0       	ldi	r25, 0x0D	; 13
    560e:	ad b7       	in	r26, 0x3d	; 61
    5610:	be b7       	in	r27, 0x3e	; 62
    5612:	11 96       	adiw	r26, 0x01	; 1
    5614:	8d 93       	st	X+, r24
    5616:	9c 93       	st	X, r25
    5618:	12 97       	sbiw	r26, 0x02	; 2
    561a:	13 96       	adiw	r26, 0x03	; 3
    561c:	cd 92       	st	X+, r12
    561e:	dc 92       	st	X, r13
    5620:	14 97       	sbiw	r26, 0x04	; 4
    5622:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    562e:	89 e4       	ldi	r24, 0x49	; 73
    5630:	9d e0       	ldi	r25, 0x0D	; 13
    5632:	0e 94 25 56 	call	0xac4a	; 0xac4a <xputs>
    5636:	24 c0       	rjmp	.+72     	; 0x5680 <flash_panel+0x592>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5638:	00 d0       	rcall	.+0      	; 0x563a <flash_panel+0x54c>
    563a:	00 d0       	rcall	.+0      	; 0x563c <flash_panel+0x54e>
    563c:	ed b7       	in	r30, 0x3d	; 61
    563e:	fe b7       	in	r31, 0x3e	; 62
    5640:	31 96       	adiw	r30, 0x01	; 1
    5642:	89 e0       	ldi	r24, 0x09	; 9
    5644:	9d e0       	ldi	r25, 0x0D	; 13
    5646:	ad b7       	in	r26, 0x3d	; 61
    5648:	be b7       	in	r27, 0x3e	; 62
    564a:	11 96       	adiw	r26, 0x01	; 1
    564c:	8d 93       	st	X+, r24
    564e:	9c 93       	st	X, r25
    5650:	12 97       	sbiw	r26, 0x02	; 2
    5652:	22 83       	std	Z+2, r18	; 0x02
    5654:	13 82       	std	Z+3, r1	; 0x03
    5656:	64 82       	std	Z+4, r6	; 0x04
    5658:	75 82       	std	Z+5, r7	; 0x05
    565a:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    565e:	ed b7       	in	r30, 0x3d	; 61
    5660:	fe b7       	in	r31, 0x3e	; 62
    5662:	36 96       	adiw	r30, 0x06	; 6
    5664:	ed bf       	out	0x3d, r30	; 61
    5666:	fe bf       	out	0x3e, r31	; 62
    5668:	0b c0       	rjmp	.+22     	; 0x5680 <flash_panel+0x592>
                                ihex.rectyp, lineno);
                        break;
    566a:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    566c:	c1 01       	movw	r24, r2
    566e:	60 e0       	ldi	r22, 0x00	; 0
    5670:	71 e0       	ldi	r23, 0x01	; 1
    5672:	43 ea       	ldi	r20, 0xA3	; 163
    5674:	57 e2       	ldi	r21, 0x27	; 39
    5676:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <f_gets>
    567a:	89 2b       	or	r24, r25
    567c:	09 f0       	breq	.+2      	; 0x5680 <flash_panel+0x592>
    567e:	f7 ce       	rjmp	.-530    	; 0x546e <flash_panel+0x380>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5680:	85 e4       	ldi	r24, 0x45	; 69
    5682:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    5684:	c4 01       	movw	r24, r8
    5686:	60 e7       	ldi	r22, 0x70	; 112
    5688:	ae 01       	movw	r20, r28
    568a:	4f 5f       	subi	r20, 0xFF	; 255
    568c:	5f 4f       	sbci	r21, 0xFF	; 255
    568e:	21 e0       	ldi	r18, 0x01	; 1
    5690:	00 e0       	ldi	r16, 0x00	; 0
    5692:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    5696:	d4 01       	movw	r26, r8
    5698:	1d 96       	adiw	r26, 0x0d	; 13
    569a:	8c 91       	ld	r24, X
    569c:	1d 97       	sbiw	r26, 0x0d	; 13
    569e:	88 23       	and	r24, r24
    56a0:	d1 f7       	brne	.-12     	; 0x5696 <flash_panel+0x5a8>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    56a2:	1e 96       	adiw	r26, 0x0e	; 14
    56a4:	8c 91       	ld	r24, X
    56a6:	1e 97       	sbiw	r26, 0x0e	; 14
    56a8:	81 30       	cpi	r24, 0x01	; 1
    56aa:	11 f1       	breq	.+68     	; 0x56f0 <flash_panel+0x602>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    56ac:	1e 96       	adiw	r26, 0x0e	; 14
    56ae:	2c 91       	ld	r18, X
    56b0:	00 d0       	rcall	.+0      	; 0x56b2 <flash_panel+0x5c4>
    56b2:	0f 92       	push	r0
    56b4:	ed b7       	in	r30, 0x3d	; 61
    56b6:	fe b7       	in	r31, 0x3e	; 62
    56b8:	31 96       	adiw	r30, 0x01	; 1
    56ba:	8e ee       	ldi	r24, 0xEE	; 238
    56bc:	9c e0       	ldi	r25, 0x0C	; 12
    56be:	ad b7       	in	r26, 0x3d	; 61
    56c0:	be b7       	in	r27, 0x3e	; 62
    56c2:	11 96       	adiw	r26, 0x01	; 1
    56c4:	8d 93       	st	X+, r24
    56c6:	9c 93       	st	X, r25
    56c8:	12 97       	sbiw	r26, 0x02	; 2
    56ca:	22 83       	std	Z+2, r18	; 0x02
    56cc:	13 82       	std	Z+3, r1	; 0x03
    56ce:	0a c0       	rjmp	.+20     	; 0x56e4 <flash_panel+0x5f6>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    56d0:	00 d0       	rcall	.+0      	; 0x56d2 <flash_panel+0x5e4>
    56d2:	0f 92       	push	r0
    56d4:	83 ed       	ldi	r24, 0xD3	; 211
    56d6:	9c e0       	ldi	r25, 0x0C	; 12
    56d8:	ed b7       	in	r30, 0x3d	; 61
    56da:	fe b7       	in	r31, 0x3e	; 62
    56dc:	81 83       	std	Z+1, r24	; 0x01
    56de:	92 83       	std	Z+2, r25	; 0x02
    56e0:	e3 82       	std	Z+3, r14	; 0x03
    56e2:	f4 82       	std	Z+4, r15	; 0x04
    56e4:	0e 94 67 56 	call	0xacce	; 0xacce <xprintf>
    56e8:	0f 90       	pop	r0
    56ea:	0f 90       	pop	r0
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    }
};
    56f0:	c0 57       	subi	r28, 0x70	; 112
    56f2:	dd 4f       	sbci	r29, 0xFD	; 253
    56f4:	e2 e1       	ldi	r30, 0x12	; 18
    56f6:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

000056fa <init_all>:
#include "utils.h"

void init_all()
{ 
    56fa:	0f 93       	push	r16
    56fc:	df 93       	push	r29
    56fe:	cf 93       	push	r28
    5700:	0f 92       	push	r0
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62
  ledWrite(LED0, ON);
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	61 e0       	ldi	r22, 0x01	; 1
    570a:	0e 94 5e 20 	call	0x40bc	; 0x40bc <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    570e:	e0 e4       	ldi	r30, 0x40	; 64
    5710:	f6 e0       	ldi	r31, 0x06	; 6
    5712:	88 e0       	ldi	r24, 0x08	; 8
    5714:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    5716:	84 e0       	ldi	r24, 0x04	; 4
    5718:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    571a:	80 e1       	ldi	r24, 0x10	; 16
    571c:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    571e:	90 e2       	ldi	r25, 0x20	; 32
    5720:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    5722:	20 e8       	ldi	r18, 0x80	; 128
    5724:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    5726:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5728:	e0 e6       	ldi	r30, 0x60	; 96
    572a:	f6 e0       	ldi	r31, 0x06	; 6
    572c:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    572e:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    5730:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    5732:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    5734:	80 eb       	ldi	r24, 0xB0	; 176
    5736:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    573a:	e0 e8       	ldi	r30, 0x80	; 128
    573c:	f6 e0       	ldi	r31, 0x06	; 6
    573e:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    5740:	e0 ee       	ldi	r30, 0xE0	; 224
    5742:	f6 e0       	ldi	r31, 0x06	; 6
    5744:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    5746:	80 e4       	ldi	r24, 0x40	; 64
    5748:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    574a:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    574c:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    574e:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    5750:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    5752:	80 ef       	ldi	r24, 0xF0	; 240
    5754:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    5758:	e0 e0       	ldi	r30, 0x00	; 0
    575a:	f7 e0       	ldi	r31, 0x07	; 7
    575c:	84 83       	std	Z+4, r24	; 0x04
/*
  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
*/
  // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	60 e0       	ldi	r22, 0x00	; 0
    5762:	0e 94 ab 20 	call	0x4156	; 0x4156 <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	0e 94 ab 20 	call	0x4156	; 0x4156 <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger laser
    576e:	82 e0       	ldi	r24, 0x02	; 2
    5770:	60 e0       	ldi	r22, 0x00	; 0
    5772:	0e 94 ab 20 	call	0x4156	; 0x4156 <digitalMode>
  digitalMode(3, OUTPUT);     //used to trigger camera
    5776:	83 e0       	ldi	r24, 0x03	; 3
    5778:	60 e0       	ldi	r22, 0x00	; 0
    577a:	0e 94 ab 20 	call	0x4156	; 0x4156 <digitalMode>
  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    577e:	e0 e5       	ldi	r30, 0x50	; 80
    5780:	f0 e0       	ldi	r31, 0x00	; 0
    5782:	87 e4       	ldi	r24, 0x47	; 71
    5784:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    5786:	84 ec       	ldi	r24, 0xC4	; 196
    5788:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    578a:	88 e1       	ldi	r24, 0x18	; 24
    578c:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    5790:	80 91 51 00 	lds	r24, 0x0051
    5794:	84 ff       	sbrs	r24, 4
    5796:	fc cf       	rjmp	.-8      	; 0x5790 <init_all+0x96>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    5798:	8f b7       	in	r24, 0x3f	; 63
    579a:	89 83       	std	Y+1, r24	; 0x01
  cli();
    579c:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    579e:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    57a0:	24 e0       	ldi	r18, 0x04	; 4
    57a2:	80 e4       	ldi	r24, 0x40	; 64
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	fc 01       	movw	r30, r24
    57a8:	08 ed       	ldi	r16, 0xD8	; 216
    57aa:	04 bf       	out	0x34, r16	; 52
    57ac:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    57ae:	89 81       	ldd	r24, Y+1	; 0x01
    57b0:	8f bf       	out	0x3f, r24	; 63
    57b2:	88 ee       	ldi	r24, 0xE8	; 232
    57b4:	93 e0       	ldi	r25, 0x03	; 3
    57b6:	20 e2       	ldi	r18, 0x20	; 32
    57b8:	33 e0       	ldi	r19, 0x03	; 3
    57ba:	f9 01       	movw	r30, r18
    57bc:	31 97       	sbiw	r30, 0x01	; 1
    57be:	f1 f7       	brne	.-4      	; 0x57bc <init_all+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57c2:	d9 f7       	brne	.-10     	; 0x57ba <init_all+0xc0>
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    57c4:	e0 e4       	ldi	r30, 0x40	; 64
    57c6:	fa e0       	ldi	r31, 0x0A	; 10
    57c8:	84 e0       	ldi	r24, 0x04	; 4
    57ca:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    57ce:	8f e3       	ldi	r24, 0x3F	; 63
    57d0:	9c e9       	ldi	r25, 0x9C	; 156
    57d2:	86 a3       	std	Z+38, r24	; 0x26
    57d4:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    57d6:	82 e0       	ldi	r24, 0x02	; 2
    57d8:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    57da:	88 e5       	ldi	r24, 0x58	; 88
    57dc:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: 0-10v range on ch 0,1,2,3
  PORTC.OUTCLR = PIN4_bm;
    57e0:	80 e1       	ldi	r24, 0x10	; 16
    57e2:	e0 e4       	ldi	r30, 0x40	; 64
    57e4:	f6 e0       	ldi	r31, 0x06	; 6
    57e6:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xbf;
    57e8:	8f eb       	ldi	r24, 0xBF	; 191
    57ea:	e0 ec       	ldi	r30, 0xC0	; 192
    57ec:	f8 e0       	ldi	r31, 0x08	; 8
    57ee:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    57f0:	80 91 c2 08 	lds	r24, 0x08C2
    57f4:	87 ff       	sbrs	r24, 7
    57f6:	fc cf       	rjmp	.-8      	; 0x57f0 <init_all+0xf6>
  SPIC.DATA = 0xe0;
    57f8:	80 ee       	ldi	r24, 0xE0	; 224
    57fa:	e0 ec       	ldi	r30, 0xC0	; 192
    57fc:	f8 e0       	ldi	r31, 0x08	; 8
    57fe:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5800:	80 91 c2 08 	lds	r24, 0x08C2
    5804:	87 ff       	sbrs	r24, 7
    5806:	fc cf       	rjmp	.-8      	; 0x5800 <init_all+0x106>
  PORTC.OUTSET = PIN4_bm;
    5808:	e0 e4       	ldi	r30, 0x40	; 64
    580a:	f6 e0       	ldi	r31, 0x06	; 6
    580c:	80 e1       	ldi	r24, 0x10	; 16
    580e:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10V range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    5810:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    5812:	8f ed       	ldi	r24, 0xDF	; 223
    5814:	e0 ec       	ldi	r30, 0xC0	; 192
    5816:	f8 e0       	ldi	r31, 0x08	; 8
    5818:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    581a:	80 91 c2 08 	lds	r24, 0x08C2
    581e:	87 ff       	sbrs	r24, 7
    5820:	fc cf       	rjmp	.-8      	; 0x581a <init_all+0x120>
  SPIC.DATA = 0xe0;
    5822:	80 ee       	ldi	r24, 0xE0	; 224
    5824:	e0 ec       	ldi	r30, 0xC0	; 192
    5826:	f8 e0       	ldi	r31, 0x08	; 8
    5828:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    582a:	80 91 c2 08 	lds	r24, 0x08C2
    582e:	87 ff       	sbrs	r24, 7
    5830:	fc cf       	rjmp	.-8      	; 0x582a <init_all+0x130>
  PORTC.OUTSET = PIN4_bm;
    5832:	e0 e4       	ldi	r30, 0x40	; 64
    5834:	f6 e0       	ldi	r31, 0x06	; 6
    5836:	80 e1       	ldi	r24, 0x10	; 16
    5838:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    583a:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    583c:	80 ee       	ldi	r24, 0xE0	; 224
    583e:	e0 ec       	ldi	r30, 0xC0	; 192
    5840:	f8 e0       	ldi	r31, 0x08	; 8
    5842:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5844:	80 91 c2 08 	lds	r24, 0x08C2
    5848:	87 ff       	sbrs	r24, 7
    584a:	fc cf       	rjmp	.-8      	; 0x5844 <init_all+0x14a>
  SPIC.DATA = 0x00;
    584c:	e0 ec       	ldi	r30, 0xC0	; 192
    584e:	f8 e0       	ldi	r31, 0x08	; 8
    5850:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5852:	80 91 c2 08 	lds	r24, 0x08C2
    5856:	87 ff       	sbrs	r24, 7
    5858:	fc cf       	rjmp	.-8      	; 0x5852 <init_all+0x158>
  PORTC.OUTSET = PIN4_bm;
    585a:	e0 e4       	ldi	r30, 0x40	; 64
    585c:	f6 e0       	ldi	r31, 0x06	; 6
    585e:	80 e1       	ldi	r24, 0x10	; 16
    5860:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 1, ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    5862:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    5864:	80 e8       	ldi	r24, 0x80	; 128
    5866:	e0 ec       	ldi	r30, 0xC0	; 192
    5868:	f8 e0       	ldi	r31, 0x08	; 8
    586a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    586c:	80 91 c2 08 	lds	r24, 0x08C2
    5870:	87 ff       	sbrs	r24, 7
    5872:	fc cf       	rjmp	.-8      	; 0x586c <init_all+0x172>
  SPIC.DATA = 0x30;
    5874:	80 e3       	ldi	r24, 0x30	; 48
    5876:	e0 ec       	ldi	r30, 0xC0	; 192
    5878:	f8 e0       	ldi	r31, 0x08	; 8
    587a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    587c:	80 91 c2 08 	lds	r24, 0x08C2
    5880:	87 ff       	sbrs	r24, 7
    5882:	fc cf       	rjmp	.-8      	; 0x587c <init_all+0x182>
  PORTC.OUTSET = PIN4_bm;
    5884:	90 e1       	ldi	r25, 0x10	; 16
    5886:	e0 e4       	ldi	r30, 0x40	; 64
    5888:	f6 e0       	ldi	r31, 0x06	; 6
    588a:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    588c:	88 e5       	ldi	r24, 0x58	; 88
    588e:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    5892:	e0 e6       	ldi	r30, 0x60	; 96
    5894:	f6 e0       	ldi	r31, 0x06	; 6
    5896:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    5898:	e0 ec       	ldi	r30, 0xC0	; 192
    589a:	f9 e0       	ldi	r31, 0x09	; 9
    589c:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    589e:	80 91 c2 09 	lds	r24, 0x09C2
    58a2:	87 ff       	sbrs	r24, 7
    58a4:	fc cf       	rjmp	.-8      	; 0x589e <init_all+0x1a4>
  SPID.DATA = 0x00;
    58a6:	e0 ec       	ldi	r30, 0xC0	; 192
    58a8:	f9 e0       	ldi	r31, 0x09	; 9
    58aa:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58ac:	80 91 c2 09 	lds	r24, 0x09C2
    58b0:	87 ff       	sbrs	r24, 7
    58b2:	fc cf       	rjmp	.-8      	; 0x58ac <init_all+0x1b2>
  SPID.DATA = 0x1f;
    58b4:	8f e1       	ldi	r24, 0x1F	; 31
    58b6:	e0 ec       	ldi	r30, 0xC0	; 192
    58b8:	f9 e0       	ldi	r31, 0x09	; 9
    58ba:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58bc:	80 91 c2 09 	lds	r24, 0x09C2
    58c0:	87 ff       	sbrs	r24, 7
    58c2:	fc cf       	rjmp	.-8      	; 0x58bc <init_all+0x1c2>
  PORTD.OUTSET = PIN4_bm;
    58c4:	e0 e6       	ldi	r30, 0x60	; 96
    58c6:	f6 e0       	ldi	r31, 0x06	; 6
    58c8:	80 e1       	ldi	r24, 0x10	; 16
    58ca:	85 83       	std	Z+5, r24	; 0x05

  // DAC output range register (all ch +/-5V range)
  PORTD.OUTCLR = PIN4_bm;
    58cc:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    58ce:	8c e0       	ldi	r24, 0x0C	; 12
    58d0:	e0 ec       	ldi	r30, 0xC0	; 192
    58d2:	f9 e0       	ldi	r31, 0x09	; 9
    58d4:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    58d6:	80 91 c2 09 	lds	r24, 0x09C2
    58da:	87 ff       	sbrs	r24, 7
    58dc:	fc cf       	rjmp	.-8      	; 0x58d6 <init_all+0x1dc>
  SPID.DATA = 0x00;
    58de:	e0 ec       	ldi	r30, 0xC0	; 192
    58e0:	f9 e0       	ldi	r31, 0x09	; 9
    58e2:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58e4:	80 91 c2 09 	lds	r24, 0x09C2
    58e8:	87 ff       	sbrs	r24, 7
    58ea:	fc cf       	rjmp	.-8      	; 0x58e4 <init_all+0x1ea>
  SPID.DATA = 0x03;
    58ec:	83 e0       	ldi	r24, 0x03	; 3
    58ee:	e0 ec       	ldi	r30, 0xC0	; 192
    58f0:	f9 e0       	ldi	r31, 0x09	; 9
    58f2:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    58f4:	80 91 c2 09 	lds	r24, 0x09C2
    58f8:	87 ff       	sbrs	r24, 7
    58fa:	fc cf       	rjmp	.-8      	; 0x58f4 <init_all+0x1fa>
  PORTD.OUTSET = PIN4_bm;
    58fc:	80 e1       	ldi	r24, 0x10	; 16
    58fe:	e0 e6       	ldi	r30, 0x60	; 96
    5900:	f6 e0       	ldi	r31, 0x06	; 6
    5902:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    5904:	0e 94 92 2c 	call	0x5924	; 0x5924 <uart_init>
  
  //initialize timer
  timer_init();
    5908:	0e 94 ae 54 	call	0xa95c	; 0xa95c <timer_init>
  
  Handler_Init();
    590c:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    5910:	87 e0       	ldi	r24, 0x07	; 7
    5912:	e0 ea       	ldi	r30, 0xA0	; 160
    5914:	f0 e0       	ldi	r31, 0x00	; 0
    5916:	82 83       	std	Z+2, r24	; 0x02
  sei();
    5918:	78 94       	sei
}
    591a:	0f 90       	pop	r0
    591c:	cf 91       	pop	r28
    591e:	df 91       	pop	r29
    5920:	0f 91       	pop	r16
    5922:	08 95       	ret

00005924 <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    5924:	10 92 5d 25 	sts	0x255D, r1
    5928:	10 92 5e 25 	sts	0x255E, r1
  rxfifo.idx_w = 0;
    592c:	10 92 5b 25 	sts	0x255B, r1
    5930:	10 92 5c 25 	sts	0x255C, r1
  rxfifo.count = 0;
    5934:	10 92 5f 25 	sts	0x255F, r1
    5938:	10 92 60 25 	sts	0x2560, r1
  txfifo.idx_r = 0;
    593c:	10 92 19 25 	sts	0x2519, r1
  txfifo.idx_w = 0;
    5940:	10 92 18 25 	sts	0x2518, r1
  txfifo.count = 0;
    5944:	10 92 1a 25 	sts	0x251A, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    5948:	e0 ea       	ldi	r30, 0xA0	; 160
    594a:	f8 e0       	ldi	r31, 0x08	; 8
    594c:	8b e4       	ldi	r24, 0x4B	; 75
    594e:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    5950:	80 ea       	ldi	r24, 0xA0	; 160
    5952:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    5954:	80 e1       	ldi	r24, 0x10	; 16
    5956:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    5958:	83 e0       	ldi	r24, 0x03	; 3
    595a:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    595c:	88 e1       	ldi	r24, 0x18	; 24
    595e:	84 83       	std	Z+4, r24	; 0x04
}
    5960:	08 95       	ret

00005962 <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5962:	20 91 5f 25 	lds	r18, 0x255F
    5966:	30 91 60 25 	lds	r19, 0x2560
}
    596a:	c9 01       	movw	r24, r18
    596c:	08 95       	ret

0000596e <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    596e:	20 91 5d 25 	lds	r18, 0x255D
    5972:	30 91 5e 25 	lds	r19, 0x255E
  while(rxfifo.count == 0);
    5976:	80 91 5f 25 	lds	r24, 0x255F
    597a:	90 91 60 25 	lds	r25, 0x2560
    597e:	89 2b       	or	r24, r25
    5980:	d1 f3       	breq	.-12     	; 0x5976 <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    5982:	e0 91 63 25 	lds	r30, 0x2563
    5986:	f0 91 64 25 	lds	r31, 0x2564
    598a:	e2 0f       	add	r30, r18
    598c:	f3 1f       	adc	r31, r19
    598e:	e0 81       	ld	r30, Z
    5990:	2f 5f       	subi	r18, 0xFF	; 255
    5992:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    5994:	f8 94       	cli
  rxfifo.count--;
    5996:	80 91 5f 25 	lds	r24, 0x255F
    599a:	90 91 60 25 	lds	r25, 0x2560
    599e:	01 97       	sbiw	r24, 0x01	; 1
    59a0:	80 93 5f 25 	sts	0x255F, r24
    59a4:	90 93 60 25 	sts	0x2560, r25
  sei();
    59a8:	78 94       	sei
  if(i >= rxfifo.size)
    59aa:	80 91 61 25 	lds	r24, 0x2561
    59ae:	90 91 62 25 	lds	r25, 0x2562
    59b2:	28 17       	cp	r18, r24
    59b4:	39 07       	cpc	r19, r25
    59b6:	10 f0       	brcs	.+4      	; 0x59bc <uart_get+0x4e>
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    59bc:	20 93 5d 25 	sts	0x255D, r18
    59c0:	30 93 5e 25 	sts	0x255E, r19

  return d;
}
    59c4:	8e 2f       	mov	r24, r30
    59c6:	08 95       	ret

000059c8 <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    59c8:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    59ca:	90 91 18 25 	lds	r25, 0x2518
  while(txfifo.count >= sizeof(txfifo.buff));
    59ce:	80 91 1a 25 	lds	r24, 0x251A
    59d2:	80 34       	cpi	r24, 0x40	; 64
    59d4:	e0 f7       	brcc	.-8      	; 0x59ce <uart_put+0x6>
  txfifo.buff[i++] = d;
    59d6:	e9 2f       	mov	r30, r25
    59d8:	f0 e0       	ldi	r31, 0x00	; 0
    59da:	e8 5e       	subi	r30, 0xE8	; 232
    59dc:	fa 4d       	sbci	r31, 0xDA	; 218
    59de:	23 83       	std	Z+3, r18	; 0x03
    59e0:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    59e2:	f8 94       	cli
  txfifo.count++;
    59e4:	80 91 1a 25 	lds	r24, 0x251A
    59e8:	8f 5f       	subi	r24, 0xFF	; 255
    59ea:	80 93 1a 25 	sts	0x251A, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    59ee:	81 e1       	ldi	r24, 0x11	; 17
    59f0:	e0 ea       	ldi	r30, 0xA0	; 160
    59f2:	f8 e0       	ldi	r31, 0x08	; 8
    59f4:	83 83       	std	Z+3, r24	; 0x03

  sei();
    59f6:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    59f8:	90 34       	cpi	r25, 0x40	; 64
    59fa:	08 f0       	brcs	.+2      	; 0x59fe <uart_put+0x36>
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    59fe:	90 93 18 25 	sts	0x2518, r25
}
    5a02:	08 95       	ret

00005a04 <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    5a04:	cf 93       	push	r28
    5a06:	df 93       	push	r29
    5a08:	ec 01       	movw	r28, r24
    5a0a:	03 c0       	rjmp	.+6      	; 0x5a12 <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    5a0c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <uart_put>
    s++;
    5a10:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    5a12:	fe 01       	movw	r30, r28
    5a14:	84 91       	lpm	r24, Z+
    5a16:	88 23       	and	r24, r24
    5a18:	c9 f7       	brne	.-14     	; 0x5a0c <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    5a1a:	df 91       	pop	r29
    5a1c:	cf 91       	pop	r28
    5a1e:	08 95       	ret

00005a20 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    5a20:	8d e0       	ldi	r24, 0x0D	; 13
    5a22:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <uart_put>
  uart_put(LF);
    5a26:	8a e0       	ldi	r24, 0x0A	; 10
    5a28:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <uart_put>
}
    5a2c:	08 95       	ret

00005a2e <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    5a2e:	cf 92       	push	r12
    5a30:	df 92       	push	r13
    5a32:	ff 92       	push	r15
    5a34:	0f 93       	push	r16
    5a36:	1f 93       	push	r17
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5a3e:	80 91 5f 25 	lds	r24, 0x255F
    5a42:	90 91 60 25 	lds	r25, 0x2560
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    5a46:	89 2b       	or	r24, r25
    5a48:	11 f4       	brne	.+4      	; 0x5a4e <fill_Rx_buffer+0x20>
    5a4a:	ff 24       	eor	r15, r15
    5a4c:	3c c0       	rjmp	.+120    	; 0x5ac6 <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    5a4e:	0e 94 b7 2c 	call	0x596e	; 0x596e <uart_get>
    5a52:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    5a54:	82 e3       	ldi	r24, 0x32	; 50
    5a56:	f8 16       	cp	r15, r24
    5a58:	29 f0       	breq	.+10     	; 0x5a64 <fill_Rx_buffer+0x36>
    5a5a:	c0 e0       	ldi	r28, 0x00	; 0
    5a5c:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5a5e:	0f 2d       	mov	r16, r15
    5a60:	10 e0       	ldi	r17, 0x00	; 0
    5a62:	2e c0       	rjmp	.+92     	; 0x5ac0 <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    5a64:	0e 94 b7 2c 	call	0x596e	; 0x596e <uart_get>
    5a68:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    5a6a:	0e 94 b7 2c 	call	0x596e	; 0x596e <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    5a6e:	38 2f       	mov	r19, r24
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	c9 01       	movw	r24, r18
    5a74:	81 0f       	add	r24, r17
    5a76:	91 1d       	adc	r25, r1
    5a78:	8c 01       	movw	r16, r24
    5a7a:	c0 e0       	ldi	r28, 0x00	; 0
    5a7c:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    5a7e:	09 5f       	subi	r16, 0xF9	; 249
    5a80:	1f 4f       	sbci	r17, 0xFF	; 255
    5a82:	0d c0       	rjmp	.+26     	; 0x5a9e <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5a84:	80 91 5f 25 	lds	r24, 0x255F
    5a88:	90 91 60 25 	lds	r25, 0x2560

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    5a8c:	89 2b       	or	r24, r25
    5a8e:	d1 f3       	breq	.-12     	; 0x5a84 <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    5a90:	0e 94 b7 2c 	call	0x596e	; 0x596e <uart_get>
    5a94:	f6 01       	movw	r30, r12
    5a96:	ec 0f       	add	r30, r28
    5a98:	fd 1f       	adc	r31, r29
    5a9a:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    5a9c:	21 96       	adiw	r28, 0x01	; 1
    5a9e:	c0 17       	cp	r28, r16
    5aa0:	d1 07       	cpc	r29, r17
    5aa2:	80 f3       	brcs	.-32     	; 0x5a84 <fill_Rx_buffer+0x56>
    5aa4:	10 c0       	rjmp	.+32     	; 0x5ac6 <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5aa6:	80 91 5f 25 	lds	r24, 0x255F
    5aaa:	90 91 60 25 	lds	r25, 0x2560
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    5aae:	89 2b       	or	r24, r25
    5ab0:	d1 f3       	breq	.-12     	; 0x5aa6 <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    5ab2:	0e 94 b7 2c 	call	0x596e	; 0x596e <uart_get>
    5ab6:	f6 01       	movw	r30, r12
    5ab8:	ec 0f       	add	r30, r28
    5aba:	fd 1f       	adc	r31, r29
    5abc:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5abe:	21 96       	adiw	r28, 0x01	; 1
    5ac0:	c0 17       	cp	r28, r16
    5ac2:	d1 07       	cpc	r29, r17
    5ac4:	80 f3       	brcs	.-32     	; 0x5aa6 <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    5ac6:	8f 2d       	mov	r24, r15
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	df 91       	pop	r29
    5acc:	cf 91       	pop	r28
    5ace:	1f 91       	pop	r17
    5ad0:	0f 91       	pop	r16
    5ad2:	ff 90       	pop	r15
    5ad4:	df 90       	pop	r13
    5ad6:	cf 90       	pop	r12
    5ad8:	08 95       	ret

00005ada <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    5ada:	ff 92       	push	r15
    5adc:	0f 93       	push	r16
    5ade:	1f 93       	push	r17
    5ae0:	cf 93       	push	r28
    5ae2:	df 93       	push	r29
    5ae4:	18 2f       	mov	r17, r24
    5ae6:	09 2f       	mov	r16, r25
    5ae8:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    5aea:	86 2f       	mov	r24, r22
    5aec:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <uart_put>
    5af0:	21 2f       	mov	r18, r17
    5af2:	30 2f       	mov	r19, r16
    5af4:	c9 01       	movw	r24, r18
    5af6:	ec 01       	movw	r28, r24
    5af8:	10 e0       	ldi	r17, 0x00	; 0
    5afa:	04 c0       	rjmp	.+8      	; 0x5b04 <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    5afc:	89 91       	ld	r24, Y+
    5afe:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    5b02:	1f 5f       	subi	r17, 0xFF	; 255
    5b04:	1f 15       	cp	r17, r15
    5b06:	d0 f3       	brcs	.-12     	; 0x5afc <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    5b08:	cd b7       	in	r28, 0x3d	; 61
    5b0a:	de b7       	in	r29, 0x3e	; 62
    5b0c:	e5 e0       	ldi	r30, 0x05	; 5
    5b0e:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x1a>

00005b12 <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    5b12:	1f 92       	push	r1
    5b14:	0f 92       	push	r0
    5b16:	0f b6       	in	r0, 0x3f	; 63
    5b18:	0f 92       	push	r0
    5b1a:	08 b6       	in	r0, 0x38	; 56
    5b1c:	0f 92       	push	r0
    5b1e:	0b b6       	in	r0, 0x3b	; 59
    5b20:	0f 92       	push	r0
    5b22:	11 24       	eor	r1, r1
    5b24:	18 be       	out	0x38, r1	; 56
    5b26:	1b be       	out	0x3b, r1	; 59
    5b28:	2f 93       	push	r18
    5b2a:	3f 93       	push	r19
    5b2c:	4f 93       	push	r20
    5b2e:	8f 93       	push	r24
    5b30:	9f 93       	push	r25
    5b32:	ef 93       	push	r30
    5b34:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    5b36:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    5b3a:	20 91 5f 25 	lds	r18, 0x255F
    5b3e:	30 91 60 25 	lds	r19, 0x2560
  if(n < rxfifo.size) {
    5b42:	80 91 61 25 	lds	r24, 0x2561
    5b46:	90 91 62 25 	lds	r25, 0x2562
    5b4a:	28 17       	cp	r18, r24
    5b4c:	39 07       	cpc	r19, r25
    5b4e:	08 f5       	brcc	.+66     	; 0x5b92 <__vector_25+0x80>
    rxfifo.count = ++n;
    5b50:	2f 5f       	subi	r18, 0xFF	; 255
    5b52:	3f 4f       	sbci	r19, 0xFF	; 255
    5b54:	20 93 5f 25 	sts	0x255F, r18
    5b58:	30 93 60 25 	sts	0x2560, r19
    i = rxfifo.idx_w;
    5b5c:	80 91 5b 25 	lds	r24, 0x255B
    5b60:	90 91 5c 25 	lds	r25, 0x255C
    *(rxfifo.PRxBuff + i++) = d;
    5b64:	e0 91 63 25 	lds	r30, 0x2563
    5b68:	f0 91 64 25 	lds	r31, 0x2564
    5b6c:	e8 0f       	add	r30, r24
    5b6e:	f9 1f       	adc	r31, r25
    5b70:	40 83       	st	Z, r20
    5b72:	9c 01       	movw	r18, r24
    5b74:	2f 5f       	subi	r18, 0xFF	; 255
    5b76:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    5b78:	80 91 61 25 	lds	r24, 0x2561
    5b7c:	90 91 62 25 	lds	r25, 0x2562
    5b80:	28 17       	cp	r18, r24
    5b82:	39 07       	cpc	r19, r25
    5b84:	10 f0       	brcs	.+4      	; 0x5b8a <__vector_25+0x78>
    5b86:	20 e0       	ldi	r18, 0x00	; 0
    5b88:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    5b8a:	20 93 5b 25 	sts	0x255B, r18
    5b8e:	30 93 5c 25 	sts	0x255C, r19
  }
}
    5b92:	ff 91       	pop	r31
    5b94:	ef 91       	pop	r30
    5b96:	9f 91       	pop	r25
    5b98:	8f 91       	pop	r24
    5b9a:	4f 91       	pop	r20
    5b9c:	3f 91       	pop	r19
    5b9e:	2f 91       	pop	r18
    5ba0:	0f 90       	pop	r0
    5ba2:	0b be       	out	0x3b, r0	; 59
    5ba4:	0f 90       	pop	r0
    5ba6:	08 be       	out	0x38, r0	; 56
    5ba8:	0f 90       	pop	r0
    5baa:	0f be       	out	0x3f, r0	; 63
    5bac:	0f 90       	pop	r0
    5bae:	1f 90       	pop	r1
    5bb0:	18 95       	reti

00005bb2 <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    5bb2:	1f 92       	push	r1
    5bb4:	0f 92       	push	r0
    5bb6:	0f b6       	in	r0, 0x3f	; 63
    5bb8:	0f 92       	push	r0
    5bba:	08 b6       	in	r0, 0x38	; 56
    5bbc:	0f 92       	push	r0
    5bbe:	0b b6       	in	r0, 0x3b	; 59
    5bc0:	0f 92       	push	r0
    5bc2:	11 24       	eor	r1, r1
    5bc4:	18 be       	out	0x38, r1	; 56
    5bc6:	1b be       	out	0x3b, r1	; 59
    5bc8:	2f 93       	push	r18
    5bca:	8f 93       	push	r24
    5bcc:	9f 93       	push	r25
    5bce:	ef 93       	push	r30
    5bd0:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    5bd2:	80 91 1a 25 	lds	r24, 0x251A
  if(n) {
    5bd6:	88 23       	and	r24, r24
    5bd8:	a9 f0       	breq	.+42     	; 0x5c04 <__vector_26+0x52>
    txfifo.count = --n;
    5bda:	28 2f       	mov	r18, r24
    5bdc:	21 50       	subi	r18, 0x01	; 1
    5bde:	20 93 1a 25 	sts	0x251A, r18
    i = txfifo.idx_r;
    5be2:	80 91 19 25 	lds	r24, 0x2519
    USARTC0.DATA = txfifo.buff[i++];
    5be6:	e8 2f       	mov	r30, r24
    5be8:	f0 e0       	ldi	r31, 0x00	; 0
    5bea:	e8 5e       	subi	r30, 0xE8	; 232
    5bec:	fa 4d       	sbci	r31, 0xDA	; 218
    5bee:	93 81       	ldd	r25, Z+3	; 0x03
    5bf0:	90 93 a0 08 	sts	0x08A0, r25
    5bf4:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    5bf6:	80 34       	cpi	r24, 0x40	; 64
    5bf8:	08 f0       	brcs	.+2      	; 0x5bfc <__vector_26+0x4a>
    5bfa:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    5bfc:	80 93 19 25 	sts	0x2519, r24
  }
  if(n == 0)
    5c00:	22 23       	and	r18, r18
    5c02:	21 f4       	brne	.+8      	; 0x5c0c <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    5c04:	80 e1       	ldi	r24, 0x10	; 16
    5c06:	e0 ea       	ldi	r30, 0xA0	; 160
    5c08:	f8 e0       	ldi	r31, 0x08	; 8
    5c0a:	83 83       	std	Z+3, r24	; 0x03
}
    5c0c:	ff 91       	pop	r31
    5c0e:	ef 91       	pop	r30
    5c10:	9f 91       	pop	r25
    5c12:	8f 91       	pop	r24
    5c14:	2f 91       	pop	r18
    5c16:	0f 90       	pop	r0
    5c18:	0b be       	out	0x3b, r0	; 59
    5c1a:	0f 90       	pop	r0
    5c1c:	08 be       	out	0x38, r0	; 56
    5c1e:	0f 90       	pop	r0
    5c20:	0f be       	out	0x3f, r0	; 63
    5c22:	0f 90       	pop	r0
    5c24:	1f 90       	pop	r1
    5c26:	18 95       	reti

00005c28 <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    5c28:	80 91 63 25 	lds	r24, 0x2563
    5c2c:	90 91 64 25 	lds	r25, 0x2564
    5c30:	0e 94 8d 58 	call	0xb11a	; 0xb11a <free>

}
    5c34:	08 95       	ret

00005c36 <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    5c36:	8f 3f       	cpi	r24, 0xFF	; 255
    5c38:	59 f4       	brne	.+22     	; 0x5c50 <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    5c3a:	80 e4       	ldi	r24, 0x40	; 64
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <malloc>
    5c42:	80 93 63 25 	sts	0x2563, r24
    5c46:	90 93 64 25 	sts	0x2564, r25
 rxfifo.size = 64;
    5c4a:	80 e4       	ldi	r24, 0x40	; 64
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	0a c0       	rjmp	.+20     	; 0x5c64 <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    5c50:	8e e0       	ldi	r24, 0x0E	; 14
    5c52:	96 e0       	ldi	r25, 0x06	; 6
    5c54:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <malloc>
    5c58:	80 93 63 25 	sts	0x2563, r24
    5c5c:	90 93 64 25 	sts	0x2564, r25
 rxfifo.size = 1550;
    5c60:	8e e0       	ldi	r24, 0x0E	; 14
    5c62:	96 e0       	ldi	r25, 0x06	; 6
    5c64:	80 93 61 25 	sts	0x2561, r24
    5c68:	90 93 62 25 	sts	0x2562, r25
    5c6c:	08 95       	ret

00005c6e <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    5c6e:	10 92 c1 2b 	sts	0x2BC1, r1
    5c72:	10 92 c2 2b 	sts	0x2BC2, r1
    5c76:	10 92 c3 2b 	sts	0x2BC3, r1
    5c7a:	10 92 c4 2b 	sts	0x2BC4, r1
    5c7e:	10 92 c5 2b 	sts	0x2BC5, r1
    5c82:	10 92 c6 2b 	sts	0x2BC6, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    5c86:	e0 e0       	ldi	r30, 0x00	; 0
    5c88:	fa e0       	ldi	r31, 0x0A	; 10
    5c8a:	82 e0       	ldi	r24, 0x02	; 2
    5c8c:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    5c8e:	8f ef       	ldi	r24, 0xFF	; 255
    5c90:	91 e0       	ldi	r25, 0x01	; 1
    5c92:	86 a3       	std	Z+38, r24	; 0x26
    5c94:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    5c96:	83 e0       	ldi	r24, 0x03	; 3
    5c98:	86 83       	std	Z+6, r24	; 0x06
}
    5c9a:	08 95       	ret

00005c9c <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    5c9c:	1f 92       	push	r1
    5c9e:	0f 92       	push	r0
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	0f 92       	push	r0
    5ca4:	08 b6       	in	r0, 0x38	; 56
    5ca6:	0f 92       	push	r0
    5ca8:	09 b6       	in	r0, 0x39	; 57
    5caa:	0f 92       	push	r0
    5cac:	0a b6       	in	r0, 0x3a	; 58
    5cae:	0f 92       	push	r0
    5cb0:	0b b6       	in	r0, 0x3b	; 59
    5cb2:	0f 92       	push	r0
    5cb4:	11 24       	eor	r1, r1
    5cb6:	18 be       	out	0x38, r1	; 56
    5cb8:	19 be       	out	0x39, r1	; 57
    5cba:	1a be       	out	0x3a, r1	; 58
    5cbc:	1b be       	out	0x3b, r1	; 59
    5cbe:	ef 92       	push	r14
    5cc0:	ff 92       	push	r15
    5cc2:	0f 93       	push	r16
    5cc4:	1f 93       	push	r17
    5cc6:	2f 93       	push	r18
    5cc8:	3f 93       	push	r19
    5cca:	4f 93       	push	r20
    5ccc:	5f 93       	push	r21
    5cce:	6f 93       	push	r22
    5cd0:	7f 93       	push	r23
    5cd2:	8f 93       	push	r24
    5cd4:	9f 93       	push	r25
    5cd6:	af 93       	push	r26
    5cd8:	bf 93       	push	r27
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	ef 93       	push	r30
    5ce0:	ff 93       	push	r31
    5ce2:	97 ec       	ldi	r25, 0xC7	; 199
    5ce4:	e9 2e       	mov	r14, r25
    5ce6:	9b e2       	ldi	r25, 0x2B	; 43
    5ce8:	f9 2e       	mov	r15, r25
    5cea:	05 eb       	ldi	r16, 0xB5	; 181
    5cec:	1b e2       	ldi	r17, 0x2B	; 43
    5cee:	c0 e0       	ldi	r28, 0x00	; 0
    5cf0:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    5cf2:	fe 01       	movw	r30, r28
    5cf4:	ef 53       	subi	r30, 0x3F	; 63
    5cf6:	f4 4d       	sbci	r31, 0xD4	; 212
    5cf8:	80 81       	ld	r24, Z
    5cfa:	81 30       	cpi	r24, 0x01	; 1
    5cfc:	39 f5       	brne	.+78     	; 0x5d4c <__vector_47+0xb0>
     {
       count[lcv]--;			
    5cfe:	fe 01       	movw	r30, r28
    5d00:	ee 0f       	add	r30, r30
    5d02:	ff 1f       	adc	r31, r31
    5d04:	ee 0f       	add	r30, r30
    5d06:	ff 1f       	adc	r31, r31
    5d08:	e1 52       	subi	r30, 0x21	; 33
    5d0a:	f4 4d       	sbci	r31, 0xD4	; 212
    5d0c:	80 81       	ld	r24, Z
    5d0e:	91 81       	ldd	r25, Z+1	; 0x01
    5d10:	a2 81       	ldd	r26, Z+2	; 0x02
    5d12:	b3 81       	ldd	r27, Z+3	; 0x03
    5d14:	01 97       	sbiw	r24, 0x01	; 1
    5d16:	a1 09       	sbc	r26, r1
    5d18:	b1 09       	sbc	r27, r1
    5d1a:	80 83       	st	Z, r24
    5d1c:	91 83       	std	Z+1, r25	; 0x01
    5d1e:	a2 83       	std	Z+2, r26	; 0x02
    5d20:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    5d22:	80 81       	ld	r24, Z
    5d24:	91 81       	ldd	r25, Z+1	; 0x01
    5d26:	a2 81       	ldd	r26, Z+2	; 0x02
    5d28:	b3 81       	ldd	r27, Z+3	; 0x03
    5d2a:	00 97       	sbiw	r24, 0x00	; 0
    5d2c:	a1 05       	cpc	r26, r1
    5d2e:	b1 05       	cpc	r27, r1
    5d30:	69 f4       	brne	.+26     	; 0x5d4c <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    5d32:	d7 01       	movw	r26, r14
    5d34:	2d 91       	ld	r18, X+
    5d36:	3d 91       	ld	r19, X+
    5d38:	4d 91       	ld	r20, X+
    5d3a:	5c 91       	ld	r21, X
    5d3c:	20 83       	st	Z, r18
    5d3e:	31 83       	std	Z+1, r19	; 0x01
    5d40:	42 83       	std	Z+2, r20	; 0x02
    5d42:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    5d44:	d8 01       	movw	r26, r16
    5d46:	ed 91       	ld	r30, X+
    5d48:	fc 91       	ld	r31, X
    5d4a:	19 95       	eicall
    5d4c:	21 96       	adiw	r28, 0x01	; 1
    5d4e:	84 e0       	ldi	r24, 0x04	; 4
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	e8 0e       	add	r14, r24
    5d54:	f9 1e       	adc	r15, r25
    5d56:	0e 5f       	subi	r16, 0xFE	; 254
    5d58:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    5d5a:	c6 30       	cpi	r28, 0x06	; 6
    5d5c:	d1 05       	cpc	r29, r1
    5d5e:	49 f6       	brne	.-110    	; 0x5cf2 <__vector_47+0x56>
     }
   }



}
    5d60:	ff 91       	pop	r31
    5d62:	ef 91       	pop	r30
    5d64:	df 91       	pop	r29
    5d66:	cf 91       	pop	r28
    5d68:	bf 91       	pop	r27
    5d6a:	af 91       	pop	r26
    5d6c:	9f 91       	pop	r25
    5d6e:	8f 91       	pop	r24
    5d70:	7f 91       	pop	r23
    5d72:	6f 91       	pop	r22
    5d74:	5f 91       	pop	r21
    5d76:	4f 91       	pop	r20
    5d78:	3f 91       	pop	r19
    5d7a:	2f 91       	pop	r18
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	ff 90       	pop	r15
    5d82:	ef 90       	pop	r14
    5d84:	0f 90       	pop	r0
    5d86:	0b be       	out	0x3b, r0	; 59
    5d88:	0f 90       	pop	r0
    5d8a:	0a be       	out	0x3a, r0	; 58
    5d8c:	0f 90       	pop	r0
    5d8e:	09 be       	out	0x39, r0	; 57
    5d90:	0f 90       	pop	r0
    5d92:	08 be       	out	0x38, r0	; 56
    5d94:	0f 90       	pop	r0
    5d96:	0f be       	out	0x3f, r0	; 63
    5d98:	0f 90       	pop	r0
    5d9a:	1f 90       	pop	r1
    5d9c:	18 95       	reti

00005d9e <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    5d9e:	0f 93       	push	r16
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    5da6:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    5da8:	fd 01       	movw	r30, r26
    5daa:	ee 0f       	add	r30, r30
    5dac:	ff 1f       	adc	r31, r31
    5dae:	eb 54       	subi	r30, 0x4B	; 75
    5db0:	f4 4d       	sbci	r31, 0xD4	; 212
    5db2:	80 83       	st	Z, r24
    5db4:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    5db6:	fd 01       	movw	r30, r26
    5db8:	ee 0f       	add	r30, r30
    5dba:	ff 1f       	adc	r31, r31
    5dbc:	ee 0f       	add	r30, r30
    5dbe:	ff 1f       	adc	r31, r31
    5dc0:	cf 01       	movw	r24, r30
    5dc2:	89 53       	subi	r24, 0x39	; 57
    5dc4:	94 4d       	sbci	r25, 0xD4	; 212
    5dc6:	ec 01       	movw	r28, r24
    5dc8:	48 83       	st	Y, r20
    5dca:	59 83       	std	Y+1, r21	; 0x01
    5dcc:	6a 83       	std	Y+2, r22	; 0x02
    5dce:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    5dd0:	e1 52       	subi	r30, 0x21	; 33
    5dd2:	f4 4d       	sbci	r31, 0xD4	; 212
    5dd4:	40 83       	st	Z, r20
    5dd6:	51 83       	std	Z+1, r21	; 0x01
    5dd8:	62 83       	std	Z+2, r22	; 0x02
    5dda:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    5ddc:	af 53       	subi	r26, 0x3F	; 63
    5dde:	b4 4d       	sbci	r27, 0xD4	; 212
    5de0:	0c 93       	st	X, r16
}
    5de2:	df 91       	pop	r29
    5de4:	cf 91       	pop	r28
    5de6:	0f 91       	pop	r16
    5de8:	08 95       	ret

00005dea <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    5dea:	0f 93       	push	r16
    5dec:	cf 93       	push	r28
    5dee:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    5df0:	c2 2f       	mov	r28, r18
    5df2:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    5df4:	fe 01       	movw	r30, r28
    5df6:	ee 0f       	add	r30, r30
    5df8:	ff 1f       	adc	r31, r31
    5dfa:	eb 54       	subi	r30, 0x4B	; 75
    5dfc:	f4 4d       	sbci	r31, 0xD4	; 212
    5dfe:	80 83       	st	Z, r24
    5e00:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    5e02:	ce 01       	movw	r24, r28
    5e04:	88 0f       	add	r24, r24
    5e06:	99 1f       	adc	r25, r25
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	fc 01       	movw	r30, r24
    5e0e:	e9 53       	subi	r30, 0x39	; 57
    5e10:	f4 4d       	sbci	r31, 0xD4	; 212
    5e12:	40 83       	st	Z, r20
    5e14:	51 83       	std	Z+1, r21	; 0x01
    5e16:	62 83       	std	Z+2, r22	; 0x02
    5e18:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	e1 52       	subi	r30, 0x21	; 33
    5e1e:	f4 4d       	sbci	r31, 0xD4	; 212
    5e20:	80 81       	ld	r24, Z
    5e22:	91 81       	ldd	r25, Z+1	; 0x01
    5e24:	a2 81       	ldd	r26, Z+2	; 0x02
    5e26:	b3 81       	ldd	r27, Z+3	; 0x03
    5e28:	48 17       	cp	r20, r24
    5e2a:	59 07       	cpc	r21, r25
    5e2c:	6a 07       	cpc	r22, r26
    5e2e:	7b 07       	cpc	r23, r27
    5e30:	20 f4       	brcc	.+8      	; 0x5e3a <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    5e32:	40 83       	st	Z, r20
    5e34:	51 83       	std	Z+1, r21	; 0x01
    5e36:	62 83       	std	Z+2, r22	; 0x02
    5e38:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    5e3a:	cf 53       	subi	r28, 0x3F	; 63
    5e3c:	d4 4d       	sbci	r29, 0xD4	; 212
    5e3e:	08 83       	st	Y, r16
}
    5e40:	df 91       	pop	r29
    5e42:	cf 91       	pop	r28
    5e44:	0f 91       	pop	r16
    5e46:	08 95       	ret

00005e48 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    5e48:	dc 01       	movw	r26, r24
    5e4a:	fb 01       	movw	r30, r22
	twi->interface = module;
    5e4c:	6d 93       	st	X+, r22
    5e4e:	7c 93       	st	X, r23
    5e50:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    5e52:	48 63       	ori	r20, 0x38	; 56
    5e54:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    5e56:	ed 91       	ld	r30, X+
    5e58:	fc 91       	ld	r31, X
    5e5a:	11 97       	sbiw	r26, 0x01	; 1
    5e5c:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    5e5e:	ed 91       	ld	r30, X+
    5e60:	fc 91       	ld	r31, X
    5e62:	81 e0       	ldi	r24, 0x01	; 1
    5e64:	84 83       	std	Z+4, r24	; 0x04
}
    5e66:	08 95       	ret

00005e68 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    5e68:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    5e6a:	01 90       	ld	r0, Z+
    5e6c:	f0 81       	ld	r31, Z
    5e6e:	e0 2d       	mov	r30, r0
    5e70:	24 81       	ldd	r18, Z+4	; 0x04
    5e72:	30 e0       	ldi	r19, 0x00	; 0
    5e74:	23 70       	andi	r18, 0x03	; 3
    5e76:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    5e78:	c9 01       	movw	r24, r18
    5e7a:	08 95       	ret

00005e7c <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    5e7c:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    5e7e:	85 85       	ldd	r24, Z+13	; 0x0d
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	88 23       	and	r24, r24
    5e84:	09 f4       	brne	.+2      	; 0x5e88 <TWI_MasterReady+0xc>
    5e86:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    5e88:	89 2f       	mov	r24, r25
    5e8a:	08 95       	ret

00005e8c <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    5e8c:	0f 93       	push	r16
    5e8e:	cf 93       	push	r28
    5e90:	df 93       	push	r29
    5e92:	dc 01       	movw	r26, r24
    5e94:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    5e96:	17 96       	adiw	r26, 0x07	; 7
    5e98:	8c 91       	ld	r24, X
    5e9a:	17 97       	sbiw	r26, 0x07	; 7
    5e9c:	82 17       	cp	r24, r18
    5e9e:	08 f4       	brcc	.+2      	; 0x5ea2 <TWI_MasterWriteRead+0x16>
    5ea0:	48 c0       	rjmp	.+144    	; 0x5f32 <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    5ea2:	18 96       	adiw	r26, 0x08	; 8
    5ea4:	8c 91       	ld	r24, X
    5ea6:	18 97       	sbiw	r26, 0x08	; 8
    5ea8:	80 17       	cp	r24, r16
    5eaa:	08 f4       	brcc	.+2      	; 0x5eae <TWI_MasterWriteRead+0x22>
    5eac:	42 c0       	rjmp	.+132    	; 0x5f32 <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    5eae:	1d 96       	adiw	r26, 0x0d	; 13
    5eb0:	8c 91       	ld	r24, X
    5eb2:	1d 97       	sbiw	r26, 0x0d	; 13
    5eb4:	88 23       	and	r24, r24
    5eb6:	e9 f5       	brne	.+122    	; 0x5f32 <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	1d 96       	adiw	r26, 0x0d	; 13
    5ebc:	8c 93       	st	X, r24
    5ebe:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    5ec0:	1e 96       	adiw	r26, 0x0e	; 14
    5ec2:	1c 92       	st	X, r1
    5ec4:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    5ec6:	66 0f       	add	r22, r22
    5ec8:	12 96       	adiw	r26, 0x02	; 2
    5eca:	6c 93       	st	X, r22
    5ecc:	12 97       	sbiw	r26, 0x02	; 2
    5ece:	ea 01       	movw	r28, r20
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	09 c0       	rjmp	.+18     	; 0x5ee6 <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    5ed4:	13 96       	adiw	r26, 0x03	; 3
    5ed6:	ed 91       	ld	r30, X+
    5ed8:	fc 91       	ld	r31, X
    5eda:	14 97       	sbiw	r26, 0x04	; 4
    5edc:	e9 0f       	add	r30, r25
    5ede:	f1 1d       	adc	r31, r1
    5ee0:	89 91       	ld	r24, Y+
    5ee2:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    5ee4:	9f 5f       	subi	r25, 0xFF	; 255
    5ee6:	97 17       	cp	r25, r23
    5ee8:	a8 f3       	brcs	.-22     	; 0x5ed4 <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    5eea:	19 96       	adiw	r26, 0x09	; 9
    5eec:	7c 93       	st	X, r23
    5eee:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    5ef0:	1a 96       	adiw	r26, 0x0a	; 10
    5ef2:	0c 93       	st	X, r16
    5ef4:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    5ef6:	1b 96       	adiw	r26, 0x0b	; 11
    5ef8:	1c 92       	st	X, r1
    5efa:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    5efc:	1c 96       	adiw	r26, 0x0c	; 12
    5efe:	1c 92       	st	X, r1
    5f00:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    5f02:	19 96       	adiw	r26, 0x09	; 9
    5f04:	8c 91       	ld	r24, X
    5f06:	19 97       	sbiw	r26, 0x09	; 9
    5f08:	88 23       	and	r24, r24
    5f0a:	29 f0       	breq	.+10     	; 0x5f16 <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    5f0c:	12 96       	adiw	r26, 0x02	; 2
    5f0e:	8c 91       	ld	r24, X
    5f10:	12 97       	sbiw	r26, 0x02	; 2
    5f12:	8e 7f       	andi	r24, 0xFE	; 254
    5f14:	09 c0       	rjmp	.+18     	; 0x5f28 <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    5f16:	1a 96       	adiw	r26, 0x0a	; 10
    5f18:	8c 91       	ld	r24, X
    5f1a:	1a 97       	sbiw	r26, 0x0a	; 10
    5f1c:	88 23       	and	r24, r24
    5f1e:	39 f0       	breq	.+14     	; 0x5f2e <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    5f20:	12 96       	adiw	r26, 0x02	; 2
    5f22:	8c 91       	ld	r24, X
    5f24:	12 97       	sbiw	r26, 0x02	; 2
    5f26:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    5f28:	ed 91       	ld	r30, X+
    5f2a:	fc 91       	ld	r31, X
    5f2c:	86 83       	std	Z+6, r24	; 0x06
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	01 c0       	rjmp	.+2      	; 0x5f34 <TWI_MasterWriteRead+0xa8>
    5f32:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    5f34:	df 91       	pop	r29
    5f36:	cf 91       	pop	r28
    5f38:	0f 91       	pop	r16
    5f3a:	08 95       	ret

00005f3c <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    5f3c:	0f 93       	push	r16
    5f3e:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    5f40:	40 e0       	ldi	r20, 0x00	; 0
    5f42:	50 e0       	ldi	r21, 0x00	; 0
    5f44:	20 e0       	ldi	r18, 0x00	; 0
    5f46:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
	return twi_status;
}
    5f4a:	0f 91       	pop	r16
    5f4c:	08 95       	ret

00005f4e <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    5f4e:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    5f50:	00 e0       	ldi	r16, 0x00	; 0
    5f52:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TWI_MasterWriteRead>
	return twi_status;
}
    5f56:	0f 91       	pop	r16
    5f58:	08 95       	ret

00005f5a <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    5f5a:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    5f5c:	ed 91       	ld	r30, X+
    5f5e:	fc 91       	ld	r31, X
    5f60:	11 97       	sbiw	r26, 0x01	; 1
    5f62:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    5f64:	92 ff       	sbrs	r25, 2
    5f66:	02 c0       	rjmp	.+4      	; 0x5f6c <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    5f68:	84 e0       	ldi	r24, 0x04	; 4
    5f6a:	01 c0       	rjmp	.+2      	; 0x5f6e <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    5f6c:	83 e0       	ldi	r24, 0x03	; 3
    5f6e:	1e 96       	adiw	r26, 0x0e	; 14
    5f70:	8c 93       	st	X, r24
    5f72:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    5f74:	ed 91       	ld	r30, X+
    5f76:	fc 91       	ld	r31, X
    5f78:	11 97       	sbiw	r26, 0x01	; 1
    5f7a:	98 60       	ori	r25, 0x08	; 8
    5f7c:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    5f7e:	1d 96       	adiw	r26, 0x0d	; 13
    5f80:	1c 92       	st	X, r1
}
    5f82:	08 95       	ret

00005f84 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    5f84:	cf 93       	push	r28
    5f86:	df 93       	push	r29
    5f88:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    5f8a:	19 96       	adiw	r26, 0x09	; 9
    5f8c:	9c 91       	ld	r25, X
    5f8e:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    5f90:	1a 96       	adiw	r26, 0x0a	; 10
    5f92:	2c 91       	ld	r18, X
    5f94:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    5f96:	cd 91       	ld	r28, X+
    5f98:	dc 91       	ld	r29, X
    5f9a:	11 97       	sbiw	r26, 0x01	; 1
    5f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    5f9e:	84 ff       	sbrs	r24, 4
    5fa0:	04 c0       	rjmp	.+8      	; 0x5faa <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5fa2:	83 e0       	ldi	r24, 0x03	; 3
    5fa4:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    5fa6:	85 e0       	ldi	r24, 0x05	; 5
    5fa8:	24 c0       	rjmp	.+72     	; 0x5ff2 <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    5faa:	1b 96       	adiw	r26, 0x0b	; 11
    5fac:	8c 91       	ld	r24, X
    5fae:	1b 97       	sbiw	r26, 0x0b	; 11
    5fb0:	89 17       	cp	r24, r25
    5fb2:	90 f4       	brcc	.+36     	; 0x5fd8 <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    5fb4:	1b 96       	adiw	r26, 0x0b	; 11
    5fb6:	8c 91       	ld	r24, X
    5fb8:	1b 97       	sbiw	r26, 0x0b	; 11
    5fba:	13 96       	adiw	r26, 0x03	; 3
    5fbc:	ed 91       	ld	r30, X+
    5fbe:	fc 91       	ld	r31, X
    5fc0:	14 97       	sbiw	r26, 0x04	; 4
    5fc2:	e8 0f       	add	r30, r24
    5fc4:	f1 1d       	adc	r31, r1
    5fc6:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    5fc8:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    5fca:	1b 96       	adiw	r26, 0x0b	; 11
    5fcc:	8c 91       	ld	r24, X
    5fce:	1b 97       	sbiw	r26, 0x0b	; 11
    5fd0:	8f 5f       	subi	r24, 0xFF	; 255
    5fd2:	1b 96       	adiw	r26, 0x0b	; 11
    5fd4:	8c 93       	st	X, r24
    5fd6:	12 c0       	rjmp	.+36     	; 0x5ffc <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    5fd8:	1c 96       	adiw	r26, 0x0c	; 12
    5fda:	8c 91       	ld	r24, X
    5fdc:	1c 97       	sbiw	r26, 0x0c	; 12
    5fde:	82 17       	cp	r24, r18
    5fe0:	28 f4       	brcc	.+10     	; 0x5fec <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    5fe2:	12 96       	adiw	r26, 0x02	; 2
    5fe4:	8c 91       	ld	r24, X
    5fe6:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    5fe8:	8e 83       	std	Y+6, r24	; 0x06
    5fea:	08 c0       	rjmp	.+16     	; 0x5ffc <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5fec:	83 e0       	ldi	r24, 0x03	; 3
    5fee:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    5ff0:	81 e0       	ldi	r24, 0x01	; 1
    5ff2:	1e 96       	adiw	r26, 0x0e	; 14
    5ff4:	8c 93       	st	X, r24
    5ff6:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    5ff8:	1d 96       	adiw	r26, 0x0d	; 13
    5ffa:	1c 92       	st	X, r1
	}
}
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	08 95       	ret

00006002 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    6002:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    6004:	1c 96       	adiw	r26, 0x0c	; 12
    6006:	9c 91       	ld	r25, X
    6008:	1c 97       	sbiw	r26, 0x0c	; 12
    600a:	18 96       	adiw	r26, 0x08	; 8
    600c:	8c 91       	ld	r24, X
    600e:	18 97       	sbiw	r26, 0x08	; 8
    6010:	ed 91       	ld	r30, X+
    6012:	fc 91       	ld	r31, X
    6014:	11 97       	sbiw	r26, 0x01	; 1
    6016:	98 17       	cp	r25, r24
    6018:	98 f4       	brcc	.+38     	; 0x6040 <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    601a:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    601c:	1c 96       	adiw	r26, 0x0c	; 12
    601e:	8c 91       	ld	r24, X
    6020:	1c 97       	sbiw	r26, 0x0c	; 12
    6022:	15 96       	adiw	r26, 0x05	; 5
    6024:	ed 91       	ld	r30, X+
    6026:	fc 91       	ld	r31, X
    6028:	16 97       	sbiw	r26, 0x06	; 6
    602a:	e8 0f       	add	r30, r24
    602c:	f1 1d       	adc	r31, r1
    602e:	90 83       	st	Z, r25
    twi->bytesRead++;
    6030:	1c 96       	adiw	r26, 0x0c	; 12
    6032:	8c 91       	ld	r24, X
    6034:	1c 97       	sbiw	r26, 0x0c	; 12
    6036:	8f 5f       	subi	r24, 0xFF	; 255
    6038:	1c 96       	adiw	r26, 0x0c	; 12
    603a:	8c 93       	st	X, r24
    603c:	1c 97       	sbiw	r26, 0x0c	; 12
    603e:	09 c0       	rjmp	.+18     	; 0x6052 <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6040:	83 e0       	ldi	r24, 0x03	; 3
    6042:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    6044:	82 e0       	ldi	r24, 0x02	; 2
    6046:	1e 96       	adiw	r26, 0x0e	; 14
    6048:	8c 93       	st	X, r24
    604a:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    604c:	1d 96       	adiw	r26, 0x0d	; 13
    604e:	1c 92       	st	X, r1
    6050:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    6052:	1a 96       	adiw	r26, 0x0a	; 10
    6054:	9c 91       	ld	r25, X
    6056:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    6058:	1c 96       	adiw	r26, 0x0c	; 12
    605a:	8c 91       	ld	r24, X
    605c:	1c 97       	sbiw	r26, 0x0c	; 12
    605e:	ed 91       	ld	r30, X+
    6060:	fc 91       	ld	r31, X
    6062:	11 97       	sbiw	r26, 0x01	; 1
    6064:	89 17       	cp	r24, r25
    6066:	18 f4       	brcc	.+6      	; 0x606e <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6068:	82 e0       	ldi	r24, 0x02	; 2
    606a:	83 83       	std	Z+3, r24	; 0x03
    606c:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    606e:	87 e0       	ldi	r24, 0x07	; 7
    6070:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	1e 96       	adiw	r26, 0x0e	; 14
    6076:	8c 93       	st	X, r24
    6078:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    607a:	1d 96       	adiw	r26, 0x0d	; 13
    607c:	1c 92       	st	X, r1
    607e:	08 95       	ret

00006080 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    6080:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    6082:	ed 91       	ld	r30, X+
    6084:	fc 91       	ld	r31, X
    6086:	11 97       	sbiw	r26, 0x01	; 1
    6088:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    608a:	24 2f       	mov	r18, r20
    608c:	30 e0       	ldi	r19, 0x00	; 0
    608e:	c9 01       	movw	r24, r18
    6090:	8c 70       	andi	r24, 0x0C	; 12
    6092:	90 70       	andi	r25, 0x00	; 0
    6094:	89 2b       	or	r24, r25
    6096:	21 f0       	breq	.+8      	; 0x60a0 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    6098:	cd 01       	movw	r24, r26
    609a:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <TWI_MasterArbitrationLostBusErrorHandler>
    609e:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    60a0:	46 ff       	sbrs	r20, 6
    60a2:	04 c0       	rjmp	.+8      	; 0x60ac <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    60a4:	cd 01       	movw	r24, r26
    60a6:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TWI_MasterWriteHandler>
    60aa:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    60ac:	47 ff       	sbrs	r20, 7
    60ae:	04 c0       	rjmp	.+8      	; 0x60b8 <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    60b0:	cd 01       	movw	r24, r26
    60b2:	0e 94 01 30 	call	0x6002	; 0x6002 <TWI_MasterReadHandler>
    60b6:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    60b8:	86 e0       	ldi	r24, 0x06	; 6
    60ba:	1e 96       	adiw	r26, 0x0e	; 14
    60bc:	8c 93       	st	X, r24
    60be:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    60c0:	1d 96       	adiw	r26, 0x0d	; 13
    60c2:	1c 92       	st	X, r1
    60c4:	08 95       	ret

000060c6 <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    60c6:	0f 93       	push	r16
    60c8:	1f 93       	push	r17
    60ca:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    60cc:	fc 01       	movw	r30, r24
    60ce:	85 81       	ldd	r24, Z+5	; 0x05
    60d0:	96 81       	ldd	r25, Z+6	; 0x06
    60d2:	0e 94 8d 58 	call	0xb11a	; 0xb11a <free>
 free(twi->PwriteData);
    60d6:	f8 01       	movw	r30, r16
    60d8:	83 81       	ldd	r24, Z+3	; 0x03
    60da:	94 81       	ldd	r25, Z+4	; 0x04
    60dc:	0e 94 8d 58 	call	0xb11a	; 0xb11a <free>
}
    60e0:	1f 91       	pop	r17
    60e2:	0f 91       	pop	r16
    60e4:	08 95       	ret

000060e6 <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    60e6:	cf 93       	push	r28
    60e8:	df 93       	push	r29
    60ea:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    60ec:	6f 3f       	cpi	r22, 0xFF	; 255
    60ee:	79 f4       	brne	.+30     	; 0x610e <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    60f0:	88 e8       	ldi	r24, 0x88	; 136
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <malloc>
    60f8:	8d 83       	std	Y+5, r24	; 0x05
    60fa:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    60fc:	88 e8       	ldi	r24, 0x88	; 136
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <malloc>
    6104:	8b 83       	std	Y+3, r24	; 0x03
    6106:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    6108:	88 e8       	ldi	r24, 0x88	; 136
    610a:	8f 83       	std	Y+7, r24	; 0x07
    610c:	0f c0       	rjmp	.+30     	; 0x612c <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    610e:	8e e1       	ldi	r24, 0x1E	; 30
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <malloc>
    6116:	8d 83       	std	Y+5, r24	; 0x05
    6118:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    611a:	82 e3       	ldi	r24, 0x32	; 50
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <malloc>
    6122:	8b 83       	std	Y+3, r24	; 0x03
    6124:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    6126:	84 e6       	ldi	r24, 0x64	; 100
    6128:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    612a:	82 e3       	ldi	r24, 0x32	; 50
    612c:	88 87       	std	Y+8, r24	; 0x08
 }
}
    612e:	df 91       	pop	r29
    6130:	cf 91       	pop	r28
    6132:	08 95       	ret

00006134 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    6134:	0f 93       	push	r16
    6136:	1f 93       	push	r17
    6138:	cf 93       	push	r28
    613a:	df 93       	push	r29
    613c:	fc 01       	movw	r30, r24
    613e:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    6140:	eb 01       	movw	r28, r22
    6142:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    6144:	86 85       	ldd	r24, Z+14	; 0x0e
    6146:	97 85       	ldd	r25, Z+15	; 0x0f
    6148:	a0 89       	ldd	r26, Z+16	; 0x10
    614a:	b1 89       	ldd	r27, Z+17	; 0x11
    614c:	00 97       	sbiw	r24, 0x00	; 0
    614e:	a1 05       	cpc	r26, r1
    6150:	b1 05       	cpc	r27, r1
    6152:	09 f4       	brne	.+2      	; 0x6156 <get_fileinfo+0x22>
    6154:	63 c0       	rjmp	.+198    	; 0x621c <get_fileinfo+0xe8>
		dir = dj->dir;
    6156:	22 89       	ldd	r18, Z+18	; 0x12
    6158:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    615a:	d9 01       	movw	r26, r18
    615c:	1c 96       	adiw	r26, 0x0c	; 12
    615e:	9c 91       	ld	r25, X
    6160:	40 e0       	ldi	r20, 0x00	; 0
    6162:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    6164:	69 2f       	mov	r22, r25
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	68 70       	andi	r22, 0x08	; 8
    616a:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    616c:	f9 01       	movw	r30, r18
    616e:	e4 0f       	add	r30, r20
    6170:	f5 1f       	adc	r31, r21
    6172:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    6174:	e0 32       	cpi	r30, 0x20	; 32
    6176:	89 f0       	breq	.+34     	; 0x619a <get_fileinfo+0x66>
			if (c == 0x05) c = 0xE5;
    6178:	e5 30       	cpi	r30, 0x05	; 5
    617a:	09 f4       	brne	.+2      	; 0x617e <get_fileinfo+0x4a>
    617c:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    617e:	61 15       	cp	r22, r1
    6180:	71 05       	cpc	r23, r1
    6182:	29 f0       	breq	.+10     	; 0x618e <get_fileinfo+0x5a>
    6184:	8e 2f       	mov	r24, r30
    6186:	81 54       	subi	r24, 0x41	; 65
    6188:	8a 31       	cpi	r24, 0x1A	; 26
    618a:	08 f4       	brcc	.+2      	; 0x618e <get_fileinfo+0x5a>
    618c:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    618e:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    6190:	4f 5f       	subi	r20, 0xFF	; 255
    6192:	5f 4f       	sbci	r21, 0xFF	; 255
    6194:	48 30       	cpi	r20, 0x08	; 8
    6196:	51 05       	cpc	r21, r1
    6198:	49 f7       	brne	.-46     	; 0x616c <get_fileinfo+0x38>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    619a:	f9 01       	movw	r30, r18
    619c:	80 85       	ldd	r24, Z+8	; 0x08
    619e:	80 32       	cpi	r24, 0x20	; 32
    61a0:	11 f4       	brne	.+4      	; 0x61a6 <get_fileinfo+0x72>
    61a2:	fe 01       	movw	r30, r28
    61a4:	1d c0       	rjmp	.+58     	; 0x61e0 <get_fileinfo+0xac>
			*p++ = '.';
    61a6:	fe 01       	movw	r30, r28
    61a8:	8e e2       	ldi	r24, 0x2E	; 46
    61aa:	81 93       	st	Z+, r24
    61ac:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    61ae:	49 2f       	mov	r20, r25
    61b0:	50 e0       	ldi	r21, 0x00	; 0
    61b2:	40 71       	andi	r20, 0x10	; 16
    61b4:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    61b6:	be 01       	movw	r22, r28
    61b8:	6c 5f       	subi	r22, 0xFC	; 252
    61ba:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    61bc:	18 96       	adiw	r26, 0x08	; 8
    61be:	9c 91       	ld	r25, X
    61c0:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    61c2:	90 32       	cpi	r25, 0x20	; 32
    61c4:	69 f0       	breq	.+26     	; 0x61e0 <get_fileinfo+0xac>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    61c6:	41 15       	cp	r20, r1
    61c8:	51 05       	cpc	r21, r1
    61ca:	29 f0       	breq	.+10     	; 0x61d6 <get_fileinfo+0xa2>
    61cc:	89 2f       	mov	r24, r25
    61ce:	81 54       	subi	r24, 0x41	; 65
    61d0:	8a 31       	cpi	r24, 0x1A	; 26
    61d2:	08 f4       	brcc	.+2      	; 0x61d6 <get_fileinfo+0xa2>
    61d4:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    61d6:	91 93       	st	Z+, r25
    61d8:	11 96       	adiw	r26, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    61da:	e6 17       	cp	r30, r22
    61dc:	f7 07       	cpc	r31, r23
    61de:	71 f7       	brne	.-36     	; 0x61bc <get_fileinfo+0x88>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    61e0:	d9 01       	movw	r26, r18
    61e2:	1b 96       	adiw	r26, 0x0b	; 11
    61e4:	8c 91       	ld	r24, X
    61e6:	1b 97       	sbiw	r26, 0x0b	; 11
    61e8:	e8 01       	movw	r28, r16
    61ea:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    61ec:	5c 96       	adiw	r26, 0x1c	; 28
    61ee:	8d 91       	ld	r24, X+
    61f0:	9d 91       	ld	r25, X+
    61f2:	0d 90       	ld	r0, X+
    61f4:	bc 91       	ld	r27, X
    61f6:	a0 2d       	mov	r26, r0
    61f8:	88 83       	st	Y, r24
    61fa:	99 83       	std	Y+1, r25	; 0x01
    61fc:	aa 83       	std	Y+2, r26	; 0x02
    61fe:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    6200:	d9 01       	movw	r26, r18
    6202:	58 96       	adiw	r26, 0x18	; 24
    6204:	8d 91       	ld	r24, X+
    6206:	9c 91       	ld	r25, X
    6208:	59 97       	sbiw	r26, 0x19	; 25
    620a:	8c 83       	std	Y+4, r24	; 0x04
    620c:	9d 83       	std	Y+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    620e:	56 96       	adiw	r26, 0x16	; 22
    6210:	8d 91       	ld	r24, X+
    6212:	9c 91       	ld	r25, X
    6214:	57 97       	sbiw	r26, 0x17	; 23
    6216:	8e 83       	std	Y+6, r24	; 0x06
    6218:	9f 83       	std	Y+7, r25	; 0x07
    621a:	ef 01       	movw	r28, r30
	}
	*p = 0;
    621c:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	1f 91       	pop	r17
    6224:	0f 91       	pop	r16
    6226:	08 95       	ret

00006228 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    6228:	cf 93       	push	r28
    622a:	df 93       	push	r29
    622c:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    622e:	82 30       	cpi	r24, 0x02	; 2
    6230:	18 f0       	brcs	.+6      	; 0x6238 <f_mount+0x10>
    6232:	2b e0       	ldi	r18, 0x0B	; 11
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	18 c0       	rjmp	.+48     	; 0x6268 <f_mount+0x40>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    6238:	a8 2f       	mov	r26, r24
    623a:	b0 e0       	ldi	r27, 0x00	; 0
    623c:	fd 01       	movw	r30, r26
    623e:	ee 0f       	add	r30, r30
    6240:	ff 1f       	adc	r31, r31
    6242:	eb 59       	subi	r30, 0x9B	; 155
    6244:	fa 4d       	sbci	r31, 0xDA	; 218
    6246:	01 90       	ld	r0, Z+
    6248:	f0 81       	ld	r31, Z
    624a:	e0 2d       	mov	r30, r0

	if (rfs) {
    624c:	30 97       	sbiw	r30, 0x00	; 0
    624e:	09 f0       	breq	.+2      	; 0x6252 <f_mount+0x2a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    6250:	10 82       	st	Z, r1
	}

	if (fs) {
    6252:	20 97       	sbiw	r28, 0x00	; 0
    6254:	09 f0       	breq	.+2      	; 0x6258 <f_mount+0x30>
		fs->fs_type = 0;			/* Clear new fs object */
    6256:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    6258:	aa 0f       	add	r26, r26
    625a:	bb 1f       	adc	r27, r27
    625c:	ab 59       	subi	r26, 0x9B	; 155
    625e:	ba 4d       	sbci	r27, 0xDA	; 218
    6260:	cd 93       	st	X+, r28
    6262:	dc 93       	st	X, r29
    6264:	20 e0       	ldi	r18, 0x00	; 0
    6266:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6268:	c9 01       	movw	r24, r18
    626a:	df 91       	pop	r29
    626c:	cf 91       	pop	r28
    626e:	08 95       	ret

00006270 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    6270:	82 30       	cpi	r24, 0x02	; 2
    6272:	18 f0       	brcs	.+6      	; 0x627a <f_chdrive+0xa>
    6274:	2b e0       	ldi	r18, 0x0B	; 11
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	04 c0       	rjmp	.+8      	; 0x6282 <f_chdrive+0x12>

	Drive = drv;
    627a:	80 93 6b 25 	sts	0x256B, r24
    627e:	20 e0       	ldi	r18, 0x00	; 0
    6280:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6282:	c9 01       	movw	r24, r18
    6284:	08 95       	ret

00006286 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6286:	a5 e2       	ldi	r26, 0x25	; 37
    6288:	b0 e0       	ldi	r27, 0x00	; 0
    628a:	e9 e4       	ldi	r30, 0x49	; 73
    628c:	f1 e3       	ldi	r31, 0x31	; 49
    628e:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    6292:	38 2e       	mov	r3, r24
    6294:	26 2e       	mov	r2, r22
    6296:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    6298:	21 e0       	ldi	r18, 0x01	; 1
    629a:	28 17       	cp	r18, r24
    629c:	18 f4       	brcc	.+6      	; 0x62a4 <f_mkfs+0x1e>
    629e:	2b e0       	ldi	r18, 0x0B	; 11
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	58 c4       	rjmp	.+2224   	; 0x6b54 <f_mkfs+0x8ce>
	if (partition >= 2) return FR_MKFS_ABORTED;
    62a4:	31 e0       	ldi	r19, 0x01	; 1
    62a6:	36 17       	cp	r19, r22
    62a8:	08 f4       	brcc	.+2      	; 0x62ac <f_mkfs+0x26>
    62aa:	4f c4       	rjmp	.+2206   	; 0x6b4a <f_mkfs+0x8c4>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    62ac:	e8 2f       	mov	r30, r24
    62ae:	f0 e0       	ldi	r31, 0x00	; 0
    62b0:	ee 0f       	add	r30, r30
    62b2:	ff 1f       	adc	r31, r31
    62b4:	eb 59       	subi	r30, 0x9B	; 155
    62b6:	fa 4d       	sbci	r31, 0xDA	; 218
    62b8:	80 80       	ld	r8, Z
    62ba:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    62bc:	81 14       	cp	r8, r1
    62be:	91 04       	cpc	r9, r1
    62c0:	19 f4       	brne	.+6      	; 0x62c8 <f_mkfs+0x42>
    62c2:	2c e0       	ldi	r18, 0x0C	; 12
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	46 c4       	rjmp	.+2188   	; 0x6b54 <f_mkfs+0x8ce>
	fs->fs_type = 0;
    62c8:	d4 01       	movw	r26, r8
    62ca:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    62cc:	0e 94 7c 53 	call	0xa6f8	; 0xa6f8 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    62d0:	80 ff       	sbrs	r24, 0
    62d2:	03 c0       	rjmp	.+6      	; 0x62da <f_mkfs+0x54>
    62d4:	23 e0       	ldi	r18, 0x03	; 3
    62d6:	30 e0       	ldi	r19, 0x00	; 0
    62d8:	3d c4       	rjmp	.+2170   	; 0x6b54 <f_mkfs+0x8ce>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    62da:	82 ff       	sbrs	r24, 2
    62dc:	03 c0       	rjmp	.+6      	; 0x62e4 <f_mkfs+0x5e>
    62de:	2a e0       	ldi	r18, 0x0A	; 10
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	38 c4       	rjmp	.+2160   	; 0x6b54 <f_mkfs+0x8ce>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    62e4:	83 2d       	mov	r24, r3
    62e6:	61 e0       	ldi	r22, 0x01	; 1
    62e8:	ae 01       	movw	r20, r28
    62ea:	4f 5f       	subi	r20, 0xFF	; 255
    62ec:	5f 4f       	sbci	r21, 0xFF	; 255
    62ee:	0e 94 70 51 	call	0xa2e0	; 0xa2e0 <disk_ioctl>
    62f2:	89 2b       	or	r24, r25
    62f4:	09 f0       	breq	.+2      	; 0x62f8 <f_mkfs+0x72>
    62f6:	29 c4       	rjmp	.+2130   	; 0x6b4a <f_mkfs+0x8c4>
    62f8:	89 81       	ldd	r24, Y+1	; 0x01
    62fa:	9a 81       	ldd	r25, Y+2	; 0x02
    62fc:	ab 81       	ldd	r26, Y+3	; 0x03
    62fe:	bc 81       	ldd	r27, Y+4	; 0x04
    6300:	80 3d       	cpi	r24, 0xD0	; 208
    6302:	e7 e0       	ldi	r30, 0x07	; 7
    6304:	9e 07       	cpc	r25, r30
    6306:	e0 e0       	ldi	r30, 0x00	; 0
    6308:	ae 07       	cpc	r26, r30
    630a:	e0 e0       	ldi	r30, 0x00	; 0
    630c:	be 07       	cpc	r27, r30
    630e:	08 f4       	brcc	.+2      	; 0x6312 <f_mkfs+0x8c>
    6310:	1c c4       	rjmp	.+2104   	; 0x6b4a <f_mkfs+0x8c4>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    6312:	81 50       	subi	r24, 0x01	; 1
    6314:	90 40       	sbci	r25, 0x00	; 0
    6316:	a0 4d       	sbci	r26, 0xD0	; 208
    6318:	b7 40       	sbci	r27, 0x07	; 7
    631a:	40 f0       	brcs	.+16     	; 0x632c <f_mkfs+0xa6>
    631c:	80 e0       	ldi	r24, 0x00	; 0
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	a0 ed       	ldi	r26, 0xD0	; 208
    6322:	b7 e0       	ldi	r27, 0x07	; 7
    6324:	89 83       	std	Y+1, r24	; 0x01
    6326:	9a 83       	std	Y+2, r25	; 0x02
    6328:	ab 83       	std	Y+3, r26	; 0x03
    632a:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    632c:	22 20       	and	r2, r2
    632e:	29 f0       	breq	.+10     	; 0x633a <f_mkfs+0xb4>
    6330:	1b 8e       	std	Y+27, r1	; 0x1b
    6332:	1c 8e       	std	Y+28, r1	; 0x1c
    6334:	1d 8e       	std	Y+29, r1	; 0x1d
    6336:	1e 8e       	std	Y+30, r1	; 0x1e
    6338:	08 c0       	rjmp	.+16     	; 0x634a <f_mkfs+0xc4>
    633a:	2f e3       	ldi	r18, 0x3F	; 63
    633c:	30 e0       	ldi	r19, 0x00	; 0
    633e:	40 e0       	ldi	r20, 0x00	; 0
    6340:	50 e0       	ldi	r21, 0x00	; 0
    6342:	2b 8f       	std	Y+27, r18	; 0x1b
    6344:	3c 8f       	std	Y+28, r19	; 0x1c
    6346:	4d 8f       	std	Y+29, r20	; 0x1d
    6348:	5e 8f       	std	Y+30, r21	; 0x1e
	n_part -= b_part;
    634a:	a9 80       	ldd	r10, Y+1	; 0x01
    634c:	ba 80       	ldd	r11, Y+2	; 0x02
    634e:	cb 80       	ldd	r12, Y+3	; 0x03
    6350:	dc 80       	ldd	r13, Y+4	; 0x04
    6352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6356:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6358:	be 8d       	ldd	r27, Y+30	; 0x1e
    635a:	a8 1a       	sub	r10, r24
    635c:	b9 0a       	sbc	r11, r25
    635e:	ca 0a       	sbc	r12, r26
    6360:	db 0a       	sbc	r13, r27
    6362:	80 e0       	ldi	r24, 0x00	; 0
    6364:	92 e0       	ldi	r25, 0x02	; 2
    6366:	a0 e0       	ldi	r26, 0x00	; 0
    6368:	b0 e0       	ldi	r27, 0x00	; 0
    636a:	20 e0       	ldi	r18, 0x00	; 0
    636c:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    636e:	a8 01       	movw	r20, r16
    6370:	60 e0       	ldi	r22, 0x00	; 0
    6372:	70 e0       	ldi	r23, 0x00	; 0
    6374:	09 c0       	rjmp	.+18     	; 0x6388 <f_mkfs+0x102>
    6376:	88 0f       	add	r24, r24
    6378:	99 1f       	adc	r25, r25
    637a:	aa 1f       	adc	r26, r26
    637c:	bb 1f       	adc	r27, r27
    637e:	2f 5f       	subi	r18, 0xFF	; 255
    6380:	3f 4f       	sbci	r19, 0xFF	; 255
    6382:	27 30       	cpi	r18, 0x07	; 7
    6384:	31 05       	cpc	r19, r1
    6386:	31 f0       	breq	.+12     	; 0x6394 <f_mkfs+0x10e>
    6388:	84 17       	cp	r24, r20
    638a:	95 07       	cpc	r25, r21
    638c:	a6 07       	cpc	r26, r22
    638e:	b7 07       	cpc	r27, r23
    6390:	91 f7       	brne	.-28     	; 0x6376 <f_mkfs+0xf0>
    6392:	05 c0       	rjmp	.+10     	; 0x639e <f_mkfs+0x118>
	if (d != allocsize) allocsize = 0;
    6394:	84 17       	cp	r24, r20
    6396:	95 07       	cpc	r25, r21
    6398:	a6 07       	cpc	r26, r22
    639a:	b7 07       	cpc	r27, r23
    639c:	19 f4       	brne	.+6      	; 0x63a4 <f_mkfs+0x11e>
	if (!allocsize) {					/* Auto selection of cluster size */
    639e:	01 15       	cp	r16, r1
    63a0:	11 05       	cpc	r17, r1
    63a2:	11 f5       	brne	.+68     	; 0x63e8 <f_mkfs+0x162>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    63a4:	e9 e2       	ldi	r30, 0x29	; 41
    63a6:	f4 e2       	ldi	r31, 0x24	; 36
    63a8:	20 e0       	ldi	r18, 0x00	; 0
    63aa:	30 e0       	ldi	r19, 0x00	; 0
    63ac:	40 e0       	ldi	r20, 0x00	; 0
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	81 91       	ld	r24, Z+
    63b2:	91 91       	ld	r25, Z+
    63b4:	a1 91       	ld	r26, Z+
    63b6:	b1 91       	ld	r27, Z+
    63b8:	b9 01       	movw	r22, r18
    63ba:	14 2f       	mov	r17, r20
    63bc:	05 2f       	mov	r16, r21
    63be:	2f 5f       	subi	r18, 0xFF	; 255
    63c0:	3f 4f       	sbci	r19, 0xFF	; 255
    63c2:	4f 4f       	sbci	r20, 0xFF	; 255
    63c4:	5f 4f       	sbci	r21, 0xFF	; 255
    63c6:	a8 16       	cp	r10, r24
    63c8:	b9 06       	cpc	r11, r25
    63ca:	ca 06       	cpc	r12, r26
    63cc:	db 06       	cpc	r13, r27
    63ce:	80 f3       	brcs	.-32     	; 0x63b0 <f_mkfs+0x12a>
    63d0:	cb 01       	movw	r24, r22
    63d2:	6d 83       	std	Y+5, r22	; 0x05
    63d4:	9e 83       	std	Y+6, r25	; 0x06
    63d6:	1f 83       	std	Y+7, r17	; 0x07
    63d8:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    63da:	fb 01       	movw	r30, r22
    63dc:	ee 0f       	add	r30, r30
    63de:	ff 1f       	adc	r31, r31
    63e0:	ed 5e       	subi	r30, 0xED	; 237
    63e2:	fb 4d       	sbci	r31, 0xDB	; 219
    63e4:	00 81       	ld	r16, Z
    63e6:	11 81       	ldd	r17, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    63e8:	92 e0       	ldi	r25, 0x02	; 2
    63ea:	00 30       	cpi	r16, 0x00	; 0
    63ec:	19 07       	cpc	r17, r25
    63ee:	10 f4       	brcc	.+4      	; 0x63f4 <f_mkfs+0x16e>
    63f0:	00 e0       	ldi	r16, 0x00	; 0
    63f2:	12 e0       	ldi	r17, 0x02	; 2

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    63f4:	d8 01       	movw	r26, r16
    63f6:	ab 2f       	mov	r26, r27
    63f8:	bb 27       	eor	r27, r27
    63fa:	a6 95       	lsr	r26
    63fc:	ad 8b       	std	Y+21, r26	; 0x15
    63fe:	be 8b       	std	Y+22, r27	; 0x16

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    6400:	9d 01       	movw	r18, r26
    6402:	40 e0       	ldi	r20, 0x00	; 0
    6404:	50 e0       	ldi	r21, 0x00	; 0
    6406:	29 8b       	std	Y+17, r18	; 0x11
    6408:	3a 8b       	std	Y+18, r19	; 0x12
    640a:	4b 8b       	std	Y+19, r20	; 0x13
    640c:	5c 8b       	std	Y+20, r21	; 0x14
    640e:	c6 01       	movw	r24, r12
    6410:	b5 01       	movw	r22, r10
    6412:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    6416:	c9 01       	movw	r24, r18
    6418:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    641a:	85 3f       	cpi	r24, 0xF5	; 245
    641c:	5f e0       	ldi	r21, 0x0F	; 15
    641e:	95 07       	cpc	r25, r21
    6420:	50 e0       	ldi	r21, 0x00	; 0
    6422:	a5 07       	cpc	r26, r21
    6424:	50 e0       	ldi	r21, 0x00	; 0
    6426:	b5 07       	cpc	r27, r21
    6428:	08 f4       	brcc	.+2      	; 0x642c <f_mkfs+0x1a6>
    642a:	99 c3       	rjmp	.+1842   	; 0x6b5e <f_mkfs+0x8d8>
    642c:	22 2d       	mov	r18, r2
    642e:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    6430:	85 3f       	cpi	r24, 0xF5	; 245
    6432:	ef ef       	ldi	r30, 0xFF	; 255
    6434:	9e 07       	cpc	r25, r30
    6436:	e0 e0       	ldi	r30, 0x00	; 0
    6438:	ae 07       	cpc	r26, r30
    643a:	e0 e0       	ldi	r30, 0x00	; 0
    643c:	be 07       	cpc	r27, r30
    643e:	30 f5       	brcc	.+76     	; 0x648c <f_mkfs+0x206>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    6440:	7c 01       	movw	r14, r24
    6442:	8d 01       	movw	r16, r26
    6444:	ee 0c       	add	r14, r14
    6446:	ff 1c       	adc	r15, r15
    6448:	00 1f       	adc	r16, r16
    644a:	11 1f       	adc	r17, r17
    644c:	83 e0       	ldi	r24, 0x03	; 3
    644e:	92 e0       	ldi	r25, 0x02	; 2
    6450:	a0 e0       	ldi	r26, 0x00	; 0
    6452:	b0 e0       	ldi	r27, 0x00	; 0
    6454:	e8 0e       	add	r14, r24
    6456:	f9 1e       	adc	r15, r25
    6458:	0a 1f       	adc	r16, r26
    645a:	1b 1f       	adc	r17, r27
    645c:	f9 e0       	ldi	r31, 0x09	; 9
    645e:	16 95       	lsr	r17
    6460:	07 95       	ror	r16
    6462:	f7 94       	ror	r15
    6464:	e7 94       	ror	r14
    6466:	fa 95       	dec	r31
    6468:	d1 f7       	brne	.-12     	; 0x645e <f_mkfs+0x1d8>
		n_rsv = 1 + partition;
    646a:	2f 5f       	subi	r18, 0xFF	; 255
    646c:	3f 4f       	sbci	r19, 0xFF	; 255
    646e:	29 01       	movw	r4, r18
    6470:	66 24       	eor	r6, r6
    6472:	57 fc       	sbrc	r5, 7
    6474:	60 94       	com	r6
    6476:	76 2c       	mov	r7, r6
    6478:	20 e2       	ldi	r18, 0x20	; 32
    647a:	30 e0       	ldi	r19, 0x00	; 0
    647c:	40 e0       	ldi	r20, 0x00	; 0
    647e:	50 e0       	ldi	r21, 0x00	; 0
    6480:	2f 8b       	std	Y+23, r18	; 0x17
    6482:	38 8f       	std	Y+24, r19	; 0x18
    6484:	49 8f       	std	Y+25, r20	; 0x19
    6486:	5a 8f       	std	Y+26, r21	; 0x1a
    6488:	32 e0       	ldi	r19, 0x02	; 2
    648a:	9c c3       	rjmp	.+1848   	; 0x6bc4 <f_mkfs+0x93e>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    648c:	7c 01       	movw	r14, r24
    648e:	8d 01       	movw	r16, r26
    6490:	e2 e0       	ldi	r30, 0x02	; 2
    6492:	ee 0c       	add	r14, r14
    6494:	ff 1c       	adc	r15, r15
    6496:	00 1f       	adc	r16, r16
    6498:	11 1f       	adc	r17, r17
    649a:	ea 95       	dec	r30
    649c:	d1 f7       	brne	.-12     	; 0x6492 <f_mkfs+0x20c>
    649e:	87 e0       	ldi	r24, 0x07	; 7
    64a0:	92 e0       	ldi	r25, 0x02	; 2
    64a2:	a0 e0       	ldi	r26, 0x00	; 0
    64a4:	b0 e0       	ldi	r27, 0x00	; 0
    64a6:	e8 0e       	add	r14, r24
    64a8:	f9 1e       	adc	r15, r25
    64aa:	0a 1f       	adc	r16, r26
    64ac:	1b 1f       	adc	r17, r27
    64ae:	79 e0       	ldi	r23, 0x09	; 9
    64b0:	16 95       	lsr	r17
    64b2:	07 95       	ror	r16
    64b4:	f7 94       	ror	r15
    64b6:	e7 94       	ror	r14
    64b8:	7a 95       	dec	r23
    64ba:	d1 f7       	brne	.-12     	; 0x64b0 <f_mkfs+0x22a>
		n_rsv = 33 - partition;
    64bc:	81 e2       	ldi	r24, 0x21	; 33
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	82 1b       	sub	r24, r18
    64c2:	93 0b       	sbc	r25, r19
    64c4:	2c 01       	movw	r4, r24
    64c6:	66 24       	eor	r6, r6
    64c8:	57 fc       	sbrc	r5, 7
    64ca:	60 94       	com	r6
    64cc:	76 2c       	mov	r7, r6
    64ce:	1f 8a       	std	Y+23, r1	; 0x17
    64d0:	18 8e       	std	Y+24, r1	; 0x18
    64d2:	19 8e       	std	Y+25, r1	; 0x19
    64d4:	1a 8e       	std	Y+26, r1	; 0x1a
    64d6:	93 e0       	ldi	r25, 0x03	; 3
    64d8:	9f 8f       	std	Y+31, r25	; 0x1f
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    64da:	a9 82       	std	Y+1, r10	; 0x01
    64dc:	ba 82       	std	Y+2, r11	; 0x02
    64de:	cb 82       	std	Y+3, r12	; 0x03
    64e0:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    64e2:	83 2d       	mov	r24, r3
    64e4:	63 e0       	ldi	r22, 0x03	; 3
    64e6:	ae 01       	movw	r20, r28
    64e8:	4b 5f       	subi	r20, 0xFB	; 251
    64ea:	5f 4f       	sbci	r21, 0xFF	; 255
    64ec:	0e 94 70 51 	call	0xa2e0	; 0xa2e0 <disk_ioctl>
    64f0:	89 2b       	or	r24, r25
    64f2:	09 f0       	breq	.+2      	; 0x64f6 <f_mkfs+0x270>
    64f4:	2a c3       	rjmp	.+1620   	; 0x6b4a <f_mkfs+0x8c4>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    64f6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    64f8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    64fa:	4d 8d       	ldd	r20, Y+29	; 0x1d
    64fc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    64fe:	24 0d       	add	r18, r4
    6500:	35 1d       	adc	r19, r5
    6502:	46 1d       	adc	r20, r6
    6504:	57 1d       	adc	r21, r7
    6506:	2d 87       	std	Y+13, r18	; 0x0d
    6508:	3e 87       	std	Y+14, r19	; 0x0e
    650a:	4f 87       	std	Y+15, r20	; 0x0f
    650c:	58 8b       	std	Y+16, r21	; 0x10
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    650e:	2f 89       	ldd	r18, Y+23	; 0x17
    6510:	38 8d       	ldd	r19, Y+24	; 0x18
    6512:	49 8d       	ldd	r20, Y+25	; 0x19
    6514:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6516:	2e 0d       	add	r18, r14
    6518:	3f 1d       	adc	r19, r15
    651a:	40 1f       	adc	r20, r16
    651c:	51 1f       	adc	r21, r17
    651e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6520:	9e 85       	ldd	r25, Y+14	; 0x0e
    6522:	af 85       	ldd	r26, Y+15	; 0x0f
    6524:	b8 89       	ldd	r27, Y+16	; 0x10
    6526:	28 0f       	add	r18, r24
    6528:	39 1f       	adc	r19, r25
    652a:	4a 1f       	adc	r20, r26
    652c:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    652e:	8d 81       	ldd	r24, Y+5	; 0x05
    6530:	9e 81       	ldd	r25, Y+6	; 0x06
    6532:	af 81       	ldd	r26, Y+7	; 0x07
    6534:	b8 85       	ldd	r27, Y+8	; 0x08
    6536:	5c 01       	movw	r10, r24
    6538:	6d 01       	movw	r12, r26
    653a:	08 94       	sec
    653c:	a1 08       	sbc	r10, r1
    653e:	b1 08       	sbc	r11, r1
    6540:	c1 08       	sbc	r12, r1
    6542:	d1 08       	sbc	r13, r1
    6544:	a2 0e       	add	r10, r18
    6546:	b3 1e       	adc	r11, r19
    6548:	c4 1e       	adc	r12, r20
    654a:	d5 1e       	adc	r13, r21
    654c:	b0 95       	com	r27
    654e:	a0 95       	com	r26
    6550:	90 95       	com	r25
    6552:	81 95       	neg	r24
    6554:	9f 4f       	sbci	r25, 0xFF	; 255
    6556:	af 4f       	sbci	r26, 0xFF	; 255
    6558:	bf 4f       	sbci	r27, 0xFF	; 255
    655a:	a8 22       	and	r10, r24
    655c:	b9 22       	and	r11, r25
    655e:	ca 22       	and	r12, r26
    6560:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    6562:	d8 01       	movw	r26, r16
    6564:	c7 01       	movw	r24, r14
    6566:	82 1b       	sub	r24, r18
    6568:	93 0b       	sbc	r25, r19
    656a:	a4 0b       	sbc	r26, r20
    656c:	b5 0b       	sbc	r27, r21
    656e:	8a 0d       	add	r24, r10
    6570:	9b 1d       	adc	r25, r11
    6572:	ac 1d       	adc	r26, r12
    6574:	bd 1d       	adc	r27, r13
    6576:	89 87       	std	Y+9, r24	; 0x09
    6578:	9a 87       	std	Y+10, r25	; 0x0a
    657a:	ab 87       	std	Y+11, r26	; 0x0b
    657c:	bc 87       	std	Y+12, r27	; 0x0c
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    657e:	e9 80       	ldd	r14, Y+1	; 0x01
    6580:	fa 80       	ldd	r15, Y+2	; 0x02
    6582:	0b 81       	ldd	r16, Y+3	; 0x03
    6584:	1c 81       	ldd	r17, Y+4	; 0x04
    6586:	c8 01       	movw	r24, r16
    6588:	b7 01       	movw	r22, r14
    658a:	64 19       	sub	r22, r4
    658c:	75 09       	sbc	r23, r5
    658e:	86 09       	sbc	r24, r6
    6590:	97 09       	sbc	r25, r7
    6592:	29 85       	ldd	r18, Y+9	; 0x09
    6594:	3a 85       	ldd	r19, Y+10	; 0x0a
    6596:	4b 85       	ldd	r20, Y+11	; 0x0b
    6598:	5c 85       	ldd	r21, Y+12	; 0x0c
    659a:	62 1b       	sub	r22, r18
    659c:	73 0b       	sbc	r23, r19
    659e:	84 0b       	sbc	r24, r20
    65a0:	95 0b       	sbc	r25, r21
    65a2:	2f 89       	ldd	r18, Y+23	; 0x17
    65a4:	38 8d       	ldd	r19, Y+24	; 0x18
    65a6:	49 8d       	ldd	r20, Y+25	; 0x19
    65a8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    65aa:	62 1b       	sub	r22, r18
    65ac:	73 0b       	sbc	r23, r19
    65ae:	84 0b       	sbc	r24, r20
    65b0:	95 0b       	sbc	r25, r21
    65b2:	29 89       	ldd	r18, Y+17	; 0x11
    65b4:	3a 89       	ldd	r19, Y+18	; 0x12
    65b6:	4b 89       	ldd	r20, Y+19	; 0x13
    65b8:	5c 89       	ldd	r21, Y+20	; 0x14
    65ba:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    65be:	2a a3       	std	Y+34, r18	; 0x22
    65c0:	3b a3       	std	Y+35, r19	; 0x23
    65c2:	4c a3       	std	Y+36, r20	; 0x24
    65c4:	5d a3       	std	Y+37, r21	; 0x25
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    65c6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    65c8:	32 30       	cpi	r19, 0x02	; 2
    65ca:	51 f4       	brne	.+20     	; 0x65e0 <f_mkfs+0x35a>
    65cc:	8a a1       	ldd	r24, Y+34	; 0x22
    65ce:	9b a1       	ldd	r25, Y+35	; 0x23
    65d0:	ac a1       	ldd	r26, Y+36	; 0x24
    65d2:	bd a1       	ldd	r27, Y+37	; 0x25
    65d4:	85 5f       	subi	r24, 0xF5	; 245
    65d6:	9f 40       	sbci	r25, 0x0F	; 15
    65d8:	a0 40       	sbci	r26, 0x00	; 0
    65da:	b0 40       	sbci	r27, 0x00	; 0
    65dc:	70 f4       	brcc	.+28     	; 0x65fa <f_mkfs+0x374>
    65de:	b5 c2       	rjmp	.+1386   	; 0x6b4a <f_mkfs+0x8c4>
    65e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    65e2:	f3 30       	cpi	r31, 0x03	; 3
    65e4:	51 f4       	brne	.+20     	; 0x65fa <f_mkfs+0x374>
    65e6:	2a a1       	ldd	r18, Y+34	; 0x22
    65e8:	3b a1       	ldd	r19, Y+35	; 0x23
    65ea:	4c a1       	ldd	r20, Y+36	; 0x24
    65ec:	5d a1       	ldd	r21, Y+37	; 0x25
    65ee:	25 5f       	subi	r18, 0xF5	; 245
    65f0:	3f 4f       	sbci	r19, 0xFF	; 255
    65f2:	40 40       	sbci	r20, 0x00	; 0
    65f4:	50 40       	sbci	r21, 0x00	; 0
    65f6:	08 f4       	brcc	.+2      	; 0x65fa <f_mkfs+0x374>
    65f8:	a8 c2       	rjmp	.+1360   	; 0x6b4a <f_mkfs+0x8c4>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    65fa:	ad 82       	std	Y+5, r10	; 0x05
    65fc:	be 82       	std	Y+6, r11	; 0x06
    65fe:	cf 82       	std	Y+7, r12	; 0x07
    6600:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    6602:	22 20       	and	r2, r2
    6604:	11 f0       	breq	.+4      	; 0x660a <f_mkfs+0x384>
    6606:	10 ef       	ldi	r17, 0xF0	; 240
    6608:	85 c0       	rjmp	.+266    	; 0x6714 <f_mkfs+0x48e>
		DWORD n_disk = b_part + n_part;
    660a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    660c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    660e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6610:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6612:	2e 0d       	add	r18, r14
    6614:	3f 1d       	adc	r19, r15
    6616:	40 1f       	adc	r20, r16
    6618:	51 1f       	adc	r21, r17

		mem_set(fs->win, 0, SS(fs));
    661a:	62 e3       	ldi	r22, 0x32	; 50
    661c:	e6 2e       	mov	r14, r22
    661e:	f1 2c       	mov	r15, r1
    6620:	e8 0c       	add	r14, r8
    6622:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6624:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = (char)val;
    6626:	c4 01       	movw	r24, r8
    6628:	8e 5c       	subi	r24, 0xCE	; 206
    662a:	9d 4f       	sbci	r25, 0xFD	; 253
    662c:	01 c0       	rjmp	.+2      	; 0x6630 <f_mkfs+0x3aa>
    662e:	11 92       	st	Z+, r1
    6630:	e8 17       	cp	r30, r24
    6632:	f9 07       	cpc	r31, r25
    6634:	e1 f7       	brne	.-8      	; 0x662e <f_mkfs+0x3a8>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    6636:	84 01       	movw	r16, r8
    6638:	00 51       	subi	r16, 0x10	; 16
    663a:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    663c:	80 e8       	ldi	r24, 0x80	; 128
    663e:	91 e0       	ldi	r25, 0x01	; 1
    6640:	a1 e0       	ldi	r26, 0x01	; 1
    6642:	b0 e0       	ldi	r27, 0x00	; 0
    6644:	f8 01       	movw	r30, r16
    6646:	80 83       	st	Z, r24
    6648:	91 83       	std	Z+1, r25	; 0x01
    664a:	a2 83       	std	Z+2, r26	; 0x02
    664c:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    664e:	20 30       	cpi	r18, 0x00	; 0
    6650:	f4 e0       	ldi	r31, 0x04	; 4
    6652:	3f 07       	cpc	r19, r31
    6654:	fb ef       	ldi	r31, 0xFB	; 251
    6656:	4f 07       	cpc	r20, r31
    6658:	f0 e0       	ldi	r31, 0x00	; 0
    665a:	5f 07       	cpc	r21, r31
    665c:	b0 f4       	brcc	.+44     	; 0x668a <f_mkfs+0x404>
			n_disk = n_disk / 63 / 255;
    665e:	ca 01       	movw	r24, r20
    6660:	b9 01       	movw	r22, r18
    6662:	21 ec       	ldi	r18, 0xC1	; 193
    6664:	3e e3       	ldi	r19, 0x3E	; 62
    6666:	40 e0       	ldi	r20, 0x00	; 0
    6668:	50 e0       	ldi	r21, 0x00	; 0
    666a:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    666e:	c9 01       	movw	r24, r18
    6670:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    6672:	f8 01       	movw	r30, r16
    6674:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    6676:	22 e0       	ldi	r18, 0x02	; 2
    6678:	b6 95       	lsr	r27
    667a:	a7 95       	ror	r26
    667c:	97 95       	ror	r25
    667e:	87 95       	ror	r24
    6680:	2a 95       	dec	r18
    6682:	d1 f7       	brne	.-12     	; 0x6678 <f_mkfs+0x3f2>
    6684:	8f 63       	ori	r24, 0x3F	; 63
    6686:	86 83       	std	Z+6, r24	; 0x06
    6688:	07 c0       	rjmp	.+14     	; 0x6698 <f_mkfs+0x412>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    668a:	8f ef       	ldi	r24, 0xFF	; 255
    668c:	9f ef       	ldi	r25, 0xFF	; 255
    668e:	d8 01       	movw	r26, r16
    6690:	16 96       	adiw	r26, 0x06	; 6
    6692:	8d 93       	st	X+, r24
    6694:	9c 93       	st	X, r25
    6696:	17 97       	sbiw	r26, 0x07	; 7
		}
		tbl[5] = 254;
    6698:	8e ef       	ldi	r24, 0xFE	; 254
    669a:	f8 01       	movw	r30, r16
    669c:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    669e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    66a0:	f3 30       	cpi	r31, 0x03	; 3
    66a2:	81 f0       	breq	.+32     	; 0x66c4 <f_mkfs+0x43e>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    66a4:	89 81       	ldd	r24, Y+1	; 0x01
    66a6:	9a 81       	ldd	r25, Y+2	; 0x02
    66a8:	ab 81       	ldd	r26, Y+3	; 0x03
    66aa:	bc 81       	ldd	r27, Y+4	; 0x04
    66ac:	80 50       	subi	r24, 0x00	; 0
    66ae:	90 40       	sbci	r25, 0x00	; 0
    66b0:	a1 40       	sbci	r26, 0x01	; 1
    66b2:	b0 40       	sbci	r27, 0x00	; 0
    66b4:	10 f0       	brcs	.+4      	; 0x66ba <f_mkfs+0x434>
    66b6:	86 e0       	ldi	r24, 0x06	; 6
    66b8:	01 c0       	rjmp	.+2      	; 0x66bc <f_mkfs+0x436>
    66ba:	84 e0       	ldi	r24, 0x04	; 4
    66bc:	d8 01       	movw	r26, r16
    66be:	14 96       	adiw	r26, 0x04	; 4
    66c0:	8c 93       	st	X, r24
    66c2:	03 c0       	rjmp	.+6      	; 0x66ca <f_mkfs+0x444>
		else
			tbl[4] = 0x0c;
    66c4:	8c e0       	ldi	r24, 0x0C	; 12
    66c6:	f8 01       	movw	r30, r16
    66c8:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    66ca:	8f e3       	ldi	r24, 0x3F	; 63
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	a0 e0       	ldi	r26, 0x00	; 0
    66d0:	b0 e0       	ldi	r27, 0x00	; 0
    66d2:	f8 01       	movw	r30, r16
    66d4:	80 87       	std	Z+8, r24	; 0x08
    66d6:	91 87       	std	Z+9, r25	; 0x09
    66d8:	a2 87       	std	Z+10, r26	; 0x0a
    66da:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    66dc:	89 81       	ldd	r24, Y+1	; 0x01
    66de:	9a 81       	ldd	r25, Y+2	; 0x02
    66e0:	ab 81       	ldd	r26, Y+3	; 0x03
    66e2:	bc 81       	ldd	r27, Y+4	; 0x04
    66e4:	84 87       	std	Z+12, r24	; 0x0c
    66e6:	95 87       	std	Z+13, r25	; 0x0d
    66e8:	a6 87       	std	Z+14, r26	; 0x0e
    66ea:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    66ec:	00 5c       	subi	r16, 0xC0	; 192
    66ee:	1f 4f       	sbci	r17, 0xFF	; 255
    66f0:	85 e5       	ldi	r24, 0x55	; 85
    66f2:	9a ea       	ldi	r25, 0xAA	; 170
    66f4:	d8 01       	movw	r26, r16
    66f6:	8d 93       	st	X+, r24
    66f8:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    66fa:	83 2d       	mov	r24, r3
    66fc:	b7 01       	movw	r22, r14
    66fe:	20 e0       	ldi	r18, 0x00	; 0
    6700:	30 e0       	ldi	r19, 0x00	; 0
    6702:	40 e0       	ldi	r20, 0x00	; 0
    6704:	50 e0       	ldi	r21, 0x00	; 0
    6706:	01 e0       	ldi	r16, 0x01	; 1
    6708:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    670c:	89 2b       	or	r24, r25
    670e:	09 f0       	breq	.+2      	; 0x6712 <f_mkfs+0x48c>
    6710:	1f c2       	rjmp	.+1086   	; 0x6b50 <f_mkfs+0x8ca>
    6712:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    6714:	72 e3       	ldi	r23, 0x32	; 50
    6716:	e7 2e       	mov	r14, r23
    6718:	f1 2c       	mov	r15, r1
    671a:	e8 0c       	add	r14, r8
    671c:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    671e:	57 01       	movw	r10, r14
    6720:	f7 01       	movw	r30, r14
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6722:	62 e3       	ldi	r22, 0x32	; 50
    6724:	c6 2e       	mov	r12, r22
    6726:	62 e0       	ldi	r22, 0x02	; 2
    6728:	d6 2e       	mov	r13, r22
    672a:	c8 0c       	add	r12, r8
    672c:	d9 1c       	adc	r13, r9
    672e:	01 c0       	rjmp	.+2      	; 0x6732 <f_mkfs+0x4ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6730:	11 92       	st	Z+, r1
    6732:	ec 15       	cp	r30, r12
    6734:	fd 05       	cpc	r31, r13
    6736:	e1 f7       	brne	.-8      	; 0x6730 <f_mkfs+0x4aa>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    6738:	8b ee       	ldi	r24, 0xEB	; 235
    673a:	9e ef       	ldi	r25, 0xFE	; 254
    673c:	a0 e9       	ldi	r26, 0x90	; 144
    673e:	b0 e0       	ldi	r27, 0x00	; 0
    6740:	f4 01       	movw	r30, r8
    6742:	82 ab       	std	Z+50, r24	; 0x32
    6744:	93 ab       	std	Z+51, r25	; 0x33
    6746:	a4 ab       	std	Z+52, r26	; 0x34
    6748:	b5 ab       	std	Z+53, r27	; 0x35
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    674a:	80 e0       	ldi	r24, 0x00	; 0
    674c:	92 e0       	ldi	r25, 0x02	; 2
    674e:	d7 01       	movw	r26, r14
    6750:	1b 96       	adiw	r26, 0x0b	; 11
    6752:	8d 93       	st	X+, r24
    6754:	9c 93       	st	X, r25
    6756:	1c 97       	sbiw	r26, 0x0c	; 12
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    6758:	2d 88       	ldd	r2, Y+21	; 0x15
    675a:	27 ae       	std	Z+63, r2	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    675c:	f7 01       	movw	r30, r14
    675e:	46 86       	std	Z+14, r4	; 0x0e
    6760:	57 86       	std	Z+15, r5	; 0x0f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    6762:	22 e4       	ldi	r18, 0x42	; 66
    6764:	30 e0       	ldi	r19, 0x00	; 0
    6766:	82 0e       	add	r8, r18
    6768:	93 1e       	adc	r9, r19
    676a:	81 e0       	ldi	r24, 0x01	; 1
    676c:	d4 01       	movw	r26, r8
    676e:	8c 93       	st	X, r24
    6770:	ee eb       	ldi	r30, 0xBE	; 190
    6772:	ff ef       	ldi	r31, 0xFF	; 255
    6774:	8e 0e       	add	r8, r30
    6776:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    6778:	8f 89       	ldd	r24, Y+23	; 0x17
    677a:	98 8d       	ldd	r25, Y+24	; 0x18
    677c:	a9 8d       	ldd	r26, Y+25	; 0x19
    677e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6780:	54 e0       	ldi	r21, 0x04	; 4
    6782:	88 0f       	add	r24, r24
    6784:	99 1f       	adc	r25, r25
    6786:	aa 1f       	adc	r26, r26
    6788:	bb 1f       	adc	r27, r27
    678a:	5a 95       	dec	r21
    678c:	d1 f7       	brne	.-12     	; 0x6782 <f_mkfs+0x4fc>
    678e:	f7 01       	movw	r30, r14
    6790:	81 8b       	std	Z+17, r24	; 0x11
    6792:	92 8b       	std	Z+18, r25	; 0x12
	if (n_part < 0x10000) {						/* Number of total sectors */
    6794:	89 81       	ldd	r24, Y+1	; 0x01
    6796:	9a 81       	ldd	r25, Y+2	; 0x02
    6798:	ab 81       	ldd	r26, Y+3	; 0x03
    679a:	bc 81       	ldd	r27, Y+4	; 0x04
    679c:	80 30       	cpi	r24, 0x00	; 0
    679e:	f0 e0       	ldi	r31, 0x00	; 0
    67a0:	9f 07       	cpc	r25, r31
    67a2:	f1 e0       	ldi	r31, 0x01	; 1
    67a4:	af 07       	cpc	r26, r31
    67a6:	f0 e0       	ldi	r31, 0x00	; 0
    67a8:	bf 07       	cpc	r27, r31
    67aa:	20 f4       	brcc	.+8      	; 0x67b4 <f_mkfs+0x52e>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    67ac:	f7 01       	movw	r30, r14
    67ae:	83 8b       	std	Z+19, r24	; 0x13
    67b0:	94 8b       	std	Z+20, r25	; 0x14
    67b2:	05 c0       	rjmp	.+10     	; 0x67be <f_mkfs+0x538>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    67b4:	f7 01       	movw	r30, r14
    67b6:	80 a3       	std	Z+32, r24	; 0x20
    67b8:	91 a3       	std	Z+33, r25	; 0x21
    67ba:	a2 a3       	std	Z+34, r26	; 0x22
    67bc:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    67be:	27 e4       	ldi	r18, 0x47	; 71
    67c0:	30 e0       	ldi	r19, 0x00	; 0
    67c2:	82 0e       	add	r8, r18
    67c4:	93 1e       	adc	r9, r19
    67c6:	d4 01       	movw	r26, r8
    67c8:	1c 93       	st	X, r17
    67ca:	e9 eb       	ldi	r30, 0xB9	; 185
    67cc:	ff ef       	ldi	r31, 0xFF	; 255
    67ce:	8e 0e       	add	r8, r30
    67d0:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    67d2:	8f e3       	ldi	r24, 0x3F	; 63
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	d7 01       	movw	r26, r14
    67d8:	58 96       	adiw	r26, 0x18	; 24
    67da:	8d 93       	st	X+, r24
    67dc:	9c 93       	st	X, r25
    67de:	59 97       	sbiw	r26, 0x19	; 25
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    67e0:	8f ef       	ldi	r24, 0xFF	; 255
    67e2:	90 e0       	ldi	r25, 0x00	; 0
    67e4:	5a 96       	adiw	r26, 0x1a	; 26
    67e6:	8d 93       	st	X+, r24
    67e8:	9c 93       	st	X, r25
    67ea:	5b 97       	sbiw	r26, 0x1b	; 27
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    67ec:	2b 8d       	ldd	r18, Y+27	; 0x1b
    67ee:	3c 8d       	ldd	r19, Y+28	; 0x1c
    67f0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    67f2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    67f4:	5c 96       	adiw	r26, 0x1c	; 28
    67f6:	2d 93       	st	X+, r18
    67f8:	3d 93       	st	X+, r19
    67fa:	4d 93       	st	X+, r20
    67fc:	5c 93       	st	X, r21
    67fe:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    6800:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <get_fattime>
    6804:	6d 83       	std	Y+5, r22	; 0x05
    6806:	7e 83       	std	Y+6, r23	; 0x06
    6808:	8f 83       	std	Y+7, r24	; 0x07
    680a:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    680c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    680e:	b3 30       	cpi	r27, 0x03	; 3
    6810:	39 f1       	breq	.+78     	; 0x6860 <f_mkfs+0x5da>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    6812:	f7 01       	movw	r30, r14
    6814:	67 a3       	std	Z+39, r22	; 0x27
    6816:	70 a7       	std	Z+40, r23	; 0x28
    6818:	81 a7       	std	Z+41, r24	; 0x29
    681a:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    681c:	29 85       	ldd	r18, Y+9	; 0x09
    681e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6820:	26 8b       	std	Z+22, r18	; 0x16
    6822:	37 8b       	std	Z+23, r19	; 0x17
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    6824:	46 e5       	ldi	r20, 0x56	; 86
    6826:	50 e0       	ldi	r21, 0x00	; 0
    6828:	84 0e       	add	r8, r20
    682a:	95 1e       	adc	r9, r21
    682c:	80 e8       	ldi	r24, 0x80	; 128
    682e:	d4 01       	movw	r26, r8
    6830:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    6832:	e2 e0       	ldi	r30, 0x02	; 2
    6834:	f0 e0       	ldi	r31, 0x00	; 0
    6836:	8e 0e       	add	r8, r30
    6838:	9f 1e       	adc	r9, r31
    683a:	89 e2       	ldi	r24, 0x29	; 41
    683c:	d4 01       	movw	r26, r8
    683e:	8c 93       	st	X, r24
    6840:	e8 ea       	ldi	r30, 0xA8	; 168
    6842:	ff ef       	ldi	r31, 0xFF	; 255
    6844:	8e 0e       	add	r8, r30
    6846:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6848:	d7 01       	movw	r26, r14
    684a:	9b 96       	adiw	r26, 0x2b	; 43
    684c:	e0 ee       	ldi	r30, 0xE0	; 224
    684e:	f3 e2       	ldi	r31, 0x23	; 35
    6850:	02 c0       	rjmp	.+4      	; 0x6856 <f_mkfs+0x5d0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    6852:	81 91       	ld	r24, Z+
    6854:	8d 93       	st	X+, r24
    6856:	23 e2       	ldi	r18, 0x23	; 35
    6858:	e3 3f       	cpi	r30, 0xF3	; 243
    685a:	f2 07       	cpc	r31, r18
    685c:	d1 f7       	brne	.-12     	; 0x6852 <f_mkfs+0x5cc>
    685e:	48 c0       	rjmp	.+144    	; 0x68f0 <f_mkfs+0x66a>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    6860:	43 e4       	ldi	r20, 0x43	; 67
    6862:	50 e0       	ldi	r21, 0x00	; 0
    6864:	e4 0e       	add	r14, r20
    6866:	f5 1e       	adc	r15, r21
    6868:	d7 01       	movw	r26, r14
    686a:	6d 93       	st	X+, r22
    686c:	7d 93       	st	X+, r23
    686e:	8d 93       	st	X+, r24
    6870:	9c 93       	st	X, r25
    6872:	13 97       	sbiw	r26, 0x03	; 3
    6874:	ed eb       	ldi	r30, 0xBD	; 189
    6876:	ff ef       	ldi	r31, 0xFF	; 255
    6878:	ee 0e       	add	r14, r30
    687a:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    687c:	29 85       	ldd	r18, Y+9	; 0x09
    687e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6880:	4b 85       	ldd	r20, Y+11	; 0x0b
    6882:	5c 85       	ldd	r21, Y+12	; 0x0c
    6884:	d7 01       	movw	r26, r14
    6886:	94 96       	adiw	r26, 0x24	; 36
    6888:	2d 93       	st	X+, r18
    688a:	3d 93       	st	X+, r19
    688c:	4d 93       	st	X+, r20
    688e:	5c 93       	st	X, r21
    6890:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    6892:	82 e0       	ldi	r24, 0x02	; 2
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	a0 e0       	ldi	r26, 0x00	; 0
    6898:	b0 e0       	ldi	r27, 0x00	; 0
    689a:	f7 01       	movw	r30, r14
    689c:	84 a7       	std	Z+44, r24	; 0x2c
    689e:	95 a7       	std	Z+45, r25	; 0x2d
    68a0:	a6 a7       	std	Z+46, r26	; 0x2e
    68a2:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    68a4:	81 e0       	ldi	r24, 0x01	; 1
    68a6:	90 e0       	ldi	r25, 0x00	; 0
    68a8:	80 ab       	std	Z+48, r24	; 0x30
    68aa:	91 ab       	std	Z+49, r25	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    68ac:	86 e0       	ldi	r24, 0x06	; 6
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	82 ab       	std	Z+50, r24	; 0x32
    68b2:	93 ab       	std	Z+51, r25	; 0x33
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    68b4:	22 e7       	ldi	r18, 0x72	; 114
    68b6:	30 e0       	ldi	r19, 0x00	; 0
    68b8:	82 0e       	add	r8, r18
    68ba:	93 1e       	adc	r9, r19
    68bc:	80 e8       	ldi	r24, 0x80	; 128
    68be:	d4 01       	movw	r26, r8
    68c0:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    68c2:	e2 e0       	ldi	r30, 0x02	; 2
    68c4:	f0 e0       	ldi	r31, 0x00	; 0
    68c6:	8e 0e       	add	r8, r30
    68c8:	9f 1e       	adc	r9, r31
    68ca:	89 e2       	ldi	r24, 0x29	; 41
    68cc:	d4 01       	movw	r26, r8
    68ce:	8c 93       	st	X, r24
    68d0:	ec e8       	ldi	r30, 0x8C	; 140
    68d2:	ff ef       	ldi	r31, 0xFF	; 255
    68d4:	8e 0e       	add	r8, r30
    68d6:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    68d8:	d7 01       	movw	r26, r14
    68da:	a9 5b       	subi	r26, 0xB9	; 185
    68dc:	bf 4f       	sbci	r27, 0xFF	; 255
    68de:	e4 ef       	ldi	r30, 0xF4	; 244
    68e0:	f3 e2       	ldi	r31, 0x23	; 35
    68e2:	02 c0       	rjmp	.+4      	; 0x68e8 <f_mkfs+0x662>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    68e4:	81 91       	ld	r24, Z+
    68e6:	8d 93       	st	X+, r24
    68e8:	24 e2       	ldi	r18, 0x24	; 36
    68ea:	e7 30       	cpi	r30, 0x07	; 7
    68ec:	f2 07       	cpc	r31, r18
    68ee:	d1 f7       	brne	.-12     	; 0x68e4 <f_mkfs+0x65e>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    68f0:	a7 01       	movw	r20, r14
    68f2:	42 50       	subi	r20, 0x02	; 2
    68f4:	5e 4f       	sbci	r21, 0xFE	; 254
    68f6:	48 a3       	std	Y+32, r20	; 0x20
    68f8:	59 a3       	std	Y+33, r21	; 0x21
    68fa:	85 e5       	ldi	r24, 0x55	; 85
    68fc:	9a ea       	ldi	r25, 0xAA	; 170
    68fe:	da 01       	movw	r26, r20
    6900:	8d 93       	st	X+, r24
    6902:	9c 93       	st	X, r25
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    6904:	83 2d       	mov	r24, r3
    6906:	b7 01       	movw	r22, r14
    6908:	2b 8d       	ldd	r18, Y+27	; 0x1b
    690a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    690c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    690e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6910:	01 e0       	ldi	r16, 0x01	; 1
    6912:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    6916:	89 2b       	or	r24, r25
    6918:	09 f0       	breq	.+2      	; 0x691c <f_mkfs+0x696>
    691a:	1a c1       	rjmp	.+564    	; 0x6b50 <f_mkfs+0x8ca>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    691c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    691e:	b3 30       	cpi	r27, 0x03	; 3
    6920:	61 f4       	brne	.+24     	; 0x693a <f_mkfs+0x6b4>
		disk_write(drv, tbl, b_part+6, 1);
    6922:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6924:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6926:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6928:	5e 8d       	ldd	r21, Y+30	; 0x1e
    692a:	2a 5f       	subi	r18, 0xFA	; 250
    692c:	3f 4f       	sbci	r19, 0xFF	; 255
    692e:	4f 4f       	sbci	r20, 0xFF	; 255
    6930:	5f 4f       	sbci	r21, 0xFF	; 255
    6932:	83 2d       	mov	r24, r3
    6934:	b7 01       	movw	r22, r14
    6936:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    693a:	f7 01       	movw	r30, r14
    693c:	01 c0       	rjmp	.+2      	; 0x6940 <f_mkfs+0x6ba>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    693e:	11 92       	st	Z+, r1
    6940:	ec 15       	cp	r30, r12
    6942:	fd 05       	cpc	r31, r13
    6944:	e1 f7       	brne	.-8      	; 0x693e <f_mkfs+0x6b8>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    6946:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6948:	e3 30       	cpi	r30, 0x03	; 3
    694a:	e9 f0       	breq	.+58     	; 0x6986 <f_mkfs+0x700>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    694c:	e1 30       	cpi	r30, 0x01	; 1
    694e:	29 f0       	breq	.+10     	; 0x695a <f_mkfs+0x6d4>
    6950:	20 e0       	ldi	r18, 0x00	; 0
    6952:	3f ef       	ldi	r19, 0xFF	; 255
    6954:	4f ef       	ldi	r20, 0xFF	; 255
    6956:	5f ef       	ldi	r21, 0xFF	; 255
    6958:	04 c0       	rjmp	.+8      	; 0x6962 <f_mkfs+0x6dc>
    695a:	20 e0       	ldi	r18, 0x00	; 0
    695c:	3f ef       	ldi	r19, 0xFF	; 255
    695e:	4f ef       	ldi	r20, 0xFF	; 255
    6960:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    6962:	81 2f       	mov	r24, r17
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	a0 e0       	ldi	r26, 0x00	; 0
    6968:	b0 e0       	ldi	r27, 0x00	; 0
    696a:	82 2b       	or	r24, r18
    696c:	93 2b       	or	r25, r19
    696e:	a4 2b       	or	r26, r20
    6970:	b5 2b       	or	r27, r21
    6972:	8d 83       	std	Y+5, r24	; 0x05
    6974:	9e 83       	std	Y+6, r25	; 0x06
    6976:	af 83       	std	Y+7, r26	; 0x07
    6978:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    697a:	f4 01       	movw	r30, r8
    697c:	82 ab       	std	Z+50, r24	; 0x32
    697e:	93 ab       	std	Z+51, r25	; 0x33
    6980:	a4 ab       	std	Z+52, r26	; 0x34
    6982:	b5 ab       	std	Z+53, r27	; 0x35
    6984:	1a c0       	rjmp	.+52     	; 0x69ba <f_mkfs+0x734>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    6986:	88 ef       	ldi	r24, 0xF8	; 248
    6988:	9f ef       	ldi	r25, 0xFF	; 255
    698a:	af ef       	ldi	r26, 0xFF	; 255
    698c:	bf ef       	ldi	r27, 0xFF	; 255
    698e:	f4 01       	movw	r30, r8
    6990:	82 ab       	std	Z+50, r24	; 0x32
    6992:	93 ab       	std	Z+51, r25	; 0x33
    6994:	a4 ab       	std	Z+52, r26	; 0x34
    6996:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    6998:	8f ef       	ldi	r24, 0xFF	; 255
    699a:	9f ef       	ldi	r25, 0xFF	; 255
    699c:	af ef       	ldi	r26, 0xFF	; 255
    699e:	bf ef       	ldi	r27, 0xFF	; 255
    69a0:	f7 01       	movw	r30, r14
    69a2:	84 83       	std	Z+4, r24	; 0x04
    69a4:	95 83       	std	Z+5, r25	; 0x05
    69a6:	a6 83       	std	Z+6, r26	; 0x06
    69a8:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    69aa:	8f ef       	ldi	r24, 0xFF	; 255
    69ac:	9f ef       	ldi	r25, 0xFF	; 255
    69ae:	af ef       	ldi	r26, 0xFF	; 255
    69b0:	bf e0       	ldi	r27, 0x0F	; 15
    69b2:	80 87       	std	Z+8, r24	; 0x08
    69b4:	91 87       	std	Z+9, r25	; 0x09
    69b6:	a2 87       	std	Z+10, r26	; 0x0a
    69b8:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    69ba:	83 2d       	mov	r24, r3
    69bc:	b7 01       	movw	r22, r14
    69be:	2d 85       	ldd	r18, Y+13	; 0x0d
    69c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    69c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    69c4:	58 89       	ldd	r21, Y+16	; 0x10
    69c6:	01 e0       	ldi	r16, 0x01	; 1
    69c8:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    69cc:	89 2b       	or	r24, r25
    69ce:	21 f0       	breq	.+8      	; 0x69d8 <f_mkfs+0x752>
    69d0:	bf c0       	rjmp	.+382    	; 0x6b50 <f_mkfs+0x8ca>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    69d2:	d5 01       	movw	r26, r10
    69d4:	1d 92       	st	X+, r1
    69d6:	5d 01       	movw	r10, r26
    69d8:	ac 14       	cp	r10, r12
    69da:	bd 04       	cpc	r11, r13
    69dc:	d1 f7       	brne	.-12     	; 0x69d2 <f_mkfs+0x74c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    69de:	ad 84       	ldd	r10, Y+13	; 0x0d
    69e0:	be 84       	ldd	r11, Y+14	; 0x0e
    69e2:	cf 84       	ldd	r12, Y+15	; 0x0f
    69e4:	d8 88       	ldd	r13, Y+16	; 0x10
    69e6:	08 94       	sec
    69e8:	a1 1c       	adc	r10, r1
    69ea:	b1 1c       	adc	r11, r1
    69ec:	c1 1c       	adc	r12, r1
    69ee:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	a0 e0       	ldi	r26, 0x00	; 0
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	16 c0       	rjmp	.+44     	; 0x6a26 <f_mkfs+0x7a0>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    69fa:	83 2d       	mov	r24, r3
    69fc:	b7 01       	movw	r22, r14
    69fe:	a6 01       	movw	r20, r12
    6a00:	95 01       	movw	r18, r10
    6a02:	01 e0       	ldi	r16, 0x01	; 1
    6a04:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    6a08:	89 2b       	or	r24, r25
    6a0a:	09 f0       	breq	.+2      	; 0x6a0e <f_mkfs+0x788>
    6a0c:	a1 c0       	rjmp	.+322    	; 0x6b50 <f_mkfs+0x8ca>
    6a0e:	08 94       	sec
    6a10:	a1 1c       	adc	r10, r1
    6a12:	b1 1c       	adc	r11, r1
    6a14:	c1 1c       	adc	r12, r1
    6a16:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    6a18:	8d 81       	ldd	r24, Y+5	; 0x05
    6a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6a1c:	af 81       	ldd	r26, Y+7	; 0x07
    6a1e:	b8 85       	ldd	r27, Y+8	; 0x08
    6a20:	01 96       	adiw	r24, 0x01	; 1
    6a22:	a1 1d       	adc	r26, r1
    6a24:	b1 1d       	adc	r27, r1
    6a26:	8d 83       	std	Y+5, r24	; 0x05
    6a28:	9e 83       	std	Y+6, r25	; 0x06
    6a2a:	af 83       	std	Y+7, r26	; 0x07
    6a2c:	b8 87       	std	Y+8, r27	; 0x08
    6a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a30:	9e 81       	ldd	r25, Y+6	; 0x06
    6a32:	af 81       	ldd	r26, Y+7	; 0x07
    6a34:	b8 85       	ldd	r27, Y+8	; 0x08
    6a36:	29 85       	ldd	r18, Y+9	; 0x09
    6a38:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a3e:	82 17       	cp	r24, r18
    6a40:	93 07       	cpc	r25, r19
    6a42:	a4 07       	cpc	r26, r20
    6a44:	b5 07       	cpc	r27, r21
    6a46:	c8 f2       	brcs	.-78     	; 0x69fa <f_mkfs+0x774>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    6a48:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6a4a:	33 30       	cpi	r19, 0x03	; 3
    6a4c:	09 f0       	breq	.+2      	; 0x6a50 <f_mkfs+0x7ca>
    6a4e:	2f 88       	ldd	r2, Y+23	; 0x17
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6a50:	25 01       	movw	r4, r10
    6a52:	36 01       	movw	r6, r12
    6a54:	08 94       	sec
    6a56:	41 1c       	adc	r4, r1
    6a58:	51 1c       	adc	r5, r1
    6a5a:	61 1c       	adc	r6, r1
    6a5c:	71 1c       	adc	r7, r1
    6a5e:	83 2d       	mov	r24, r3
    6a60:	b7 01       	movw	r22, r14
    6a62:	a6 01       	movw	r20, r12
    6a64:	95 01       	movw	r18, r10
    6a66:	01 e0       	ldi	r16, 0x01	; 1
    6a68:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    6a6c:	89 2b       	or	r24, r25
    6a6e:	09 f0       	breq	.+2      	; 0x6a72 <f_mkfs+0x7ec>
    6a70:	6f c0       	rjmp	.+222    	; 0x6b50 <f_mkfs+0x8ca>
			return FR_DISK_ERR;
	} while (--m);
    6a72:	2a 94       	dec	r2
    6a74:	19 f0       	breq	.+6      	; 0x6a7c <f_mkfs+0x7f6>
    6a76:	63 01       	movw	r12, r6
    6a78:	52 01       	movw	r10, r4
    6a7a:	ea cf       	rjmp	.-44     	; 0x6a50 <f_mkfs+0x7ca>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    6a7c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6a7e:	43 30       	cpi	r20, 0x03	; 3
    6a80:	09 f0       	breq	.+2      	; 0x6a84 <f_mkfs+0x7fe>
    6a82:	57 c0       	rjmp	.+174    	; 0x6b32 <f_mkfs+0x8ac>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    6a84:	85 e5       	ldi	r24, 0x55	; 85
    6a86:	9a ea       	ldi	r25, 0xAA	; 170
    6a88:	a8 a1       	ldd	r26, Y+32	; 0x20
    6a8a:	b9 a1       	ldd	r27, Y+33	; 0x21
    6a8c:	8d 93       	st	X+, r24
    6a8e:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    6a90:	82 e5       	ldi	r24, 0x52	; 82
    6a92:	92 e5       	ldi	r25, 0x52	; 82
    6a94:	a1 e6       	ldi	r26, 0x61	; 97
    6a96:	b1 e4       	ldi	r27, 0x41	; 65
    6a98:	f4 01       	movw	r30, r8
    6a9a:	82 ab       	std	Z+50, r24	; 0x32
    6a9c:	93 ab       	std	Z+51, r25	; 0x33
    6a9e:	a4 ab       	std	Z+52, r26	; 0x34
    6aa0:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    6aa2:	24 ee       	ldi	r18, 0xE4	; 228
    6aa4:	31 e0       	ldi	r19, 0x01	; 1
    6aa6:	e2 0e       	add	r14, r18
    6aa8:	f3 1e       	adc	r15, r19
    6aaa:	82 e7       	ldi	r24, 0x72	; 114
    6aac:	92 e7       	ldi	r25, 0x72	; 114
    6aae:	a1 e4       	ldi	r26, 0x41	; 65
    6ab0:	b1 e6       	ldi	r27, 0x61	; 97
    6ab2:	f7 01       	movw	r30, r14
    6ab4:	81 93       	st	Z+, r24
    6ab6:	91 93       	st	Z+, r25
    6ab8:	a1 93       	st	Z+, r26
    6aba:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    6abc:	2a a1       	ldd	r18, Y+34	; 0x22
    6abe:	3b a1       	ldd	r19, Y+35	; 0x23
    6ac0:	4c a1       	ldd	r20, Y+36	; 0x24
    6ac2:	5d a1       	ldd	r21, Y+37	; 0x25
    6ac4:	21 50       	subi	r18, 0x01	; 1
    6ac6:	30 40       	sbci	r19, 0x00	; 0
    6ac8:	40 40       	sbci	r20, 0x00	; 0
    6aca:	50 40       	sbci	r21, 0x00	; 0
    6acc:	df 01       	movw	r26, r30
    6ace:	2d 93       	st	X+, r18
    6ad0:	3d 93       	st	X+, r19
    6ad2:	4d 93       	st	X+, r20
    6ad4:	5d 93       	st	X+, r21
    6ad6:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    6ad8:	8f ef       	ldi	r24, 0xFF	; 255
    6ada:	9f ef       	ldi	r25, 0xFF	; 255
    6adc:	af ef       	ldi	r26, 0xFF	; 255
    6ade:	bf ef       	ldi	r27, 0xFF	; 255
    6ae0:	f7 01       	movw	r30, r14
    6ae2:	80 83       	st	Z, r24
    6ae4:	91 83       	std	Z+1, r25	; 0x01
    6ae6:	a2 83       	std	Z+2, r26	; 0x02
    6ae8:	b3 83       	std	Z+3, r27	; 0x03
    6aea:	24 e1       	ldi	r18, 0x14	; 20
    6aec:	3e ef       	ldi	r19, 0xFE	; 254
    6aee:	e2 0e       	add	r14, r18
    6af0:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    6af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6af6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6af8:	be 8d       	ldd	r27, Y+30	; 0x1e
    6afa:	01 96       	adiw	r24, 0x01	; 1
    6afc:	a1 1d       	adc	r26, r1
    6afe:	b1 1d       	adc	r27, r1
    6b00:	8b 8f       	std	Y+27, r24	; 0x1b
    6b02:	9c 8f       	std	Y+28, r25	; 0x1c
    6b04:	ad 8f       	std	Y+29, r26	; 0x1d
    6b06:	be 8f       	std	Y+30, r27	; 0x1e
    6b08:	83 2d       	mov	r24, r3
    6b0a:	b7 01       	movw	r22, r14
    6b0c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6b0e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6b10:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6b12:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6b14:	01 e0       	ldi	r16, 0x01	; 1
    6b16:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    6b1a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6b1c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6b1e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6b20:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6b22:	2a 5f       	subi	r18, 0xFA	; 250
    6b24:	3f 4f       	sbci	r19, 0xFF	; 255
    6b26:	4f 4f       	sbci	r20, 0xFF	; 255
    6b28:	5f 4f       	sbci	r21, 0xFF	; 255
    6b2a:	83 2d       	mov	r24, r3
    6b2c:	b7 01       	movw	r22, r14
    6b2e:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    6b32:	83 2d       	mov	r24, r3
    6b34:	60 e0       	ldi	r22, 0x00	; 0
    6b36:	40 e0       	ldi	r20, 0x00	; 0
    6b38:	50 e0       	ldi	r21, 0x00	; 0
    6b3a:	0e 94 70 51 	call	0xa2e0	; 0xa2e0 <disk_ioctl>
    6b3e:	00 97       	sbiw	r24, 0x00	; 0
    6b40:	11 f0       	breq	.+4      	; 0x6b46 <f_mkfs+0x8c0>
    6b42:	81 e0       	ldi	r24, 0x01	; 1
    6b44:	90 e0       	ldi	r25, 0x00	; 0
    6b46:	9c 01       	movw	r18, r24
    6b48:	05 c0       	rjmp	.+10     	; 0x6b54 <f_mkfs+0x8ce>
    6b4a:	2e e0       	ldi	r18, 0x0E	; 14
    6b4c:	30 e0       	ldi	r19, 0x00	; 0
    6b4e:	02 c0       	rjmp	.+4      	; 0x6b54 <f_mkfs+0x8ce>
    6b50:	21 e0       	ldi	r18, 0x01	; 1
    6b52:	30 e0       	ldi	r19, 0x00	; 0
}
    6b54:	c9 01       	movw	r24, r18
    6b56:	a5 96       	adiw	r28, 0x25	; 37
    6b58:	e2 e1       	ldi	r30, 0x12	; 18
    6b5a:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    6b5e:	7c 01       	movw	r14, r24
    6b60:	8d 01       	movw	r16, r26
    6b62:	ee 0c       	add	r14, r14
    6b64:	ff 1c       	adc	r15, r15
    6b66:	00 1f       	adc	r16, r16
    6b68:	11 1f       	adc	r17, r17
    6b6a:	e8 0e       	add	r14, r24
    6b6c:	f9 1e       	adc	r15, r25
    6b6e:	0a 1f       	adc	r16, r26
    6b70:	1b 1f       	adc	r17, r27
    6b72:	08 94       	sec
    6b74:	e1 1c       	adc	r14, r1
    6b76:	f1 1c       	adc	r15, r1
    6b78:	01 1d       	adc	r16, r1
    6b7a:	11 1d       	adc	r17, r1
    6b7c:	16 95       	lsr	r17
    6b7e:	07 95       	ror	r16
    6b80:	f7 94       	ror	r15
    6b82:	e7 94       	ror	r14
    6b84:	82 e0       	ldi	r24, 0x02	; 2
    6b86:	92 e0       	ldi	r25, 0x02	; 2
    6b88:	a0 e0       	ldi	r26, 0x00	; 0
    6b8a:	b0 e0       	ldi	r27, 0x00	; 0
    6b8c:	e8 0e       	add	r14, r24
    6b8e:	f9 1e       	adc	r15, r25
    6b90:	0a 1f       	adc	r16, r26
    6b92:	1b 1f       	adc	r17, r27
    6b94:	29 e0       	ldi	r18, 0x09	; 9
    6b96:	16 95       	lsr	r17
    6b98:	07 95       	ror	r16
    6b9a:	f7 94       	ror	r15
    6b9c:	e7 94       	ror	r14
    6b9e:	2a 95       	dec	r18
    6ba0:	d1 f7       	brne	.-12     	; 0x6b96 <f_mkfs+0x910>
		n_rsv = 1 + partition;
    6ba2:	82 2d       	mov	r24, r2
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	01 96       	adiw	r24, 0x01	; 1
    6ba8:	2c 01       	movw	r4, r24
    6baa:	66 24       	eor	r6, r6
    6bac:	57 fc       	sbrc	r5, 7
    6bae:	60 94       	com	r6
    6bb0:	76 2c       	mov	r7, r6
    6bb2:	20 e2       	ldi	r18, 0x20	; 32
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	40 e0       	ldi	r20, 0x00	; 0
    6bb8:	50 e0       	ldi	r21, 0x00	; 0
    6bba:	2f 8b       	std	Y+23, r18	; 0x17
    6bbc:	38 8f       	std	Y+24, r19	; 0x18
    6bbe:	49 8f       	std	Y+25, r20	; 0x19
    6bc0:	5a 8f       	std	Y+26, r21	; 0x1a
    6bc2:	31 e0       	ldi	r19, 0x01	; 1
    6bc4:	3f 8f       	std	Y+31, r19	; 0x1f
    6bc6:	89 cc       	rjmp	.-1774   	; 0x64da <f_mkfs+0x254>

00006bc8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6bc8:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    6bca:	00 97       	sbiw	r24, 0x00	; 0
    6bcc:	99 f0       	breq	.+38     	; 0x6bf4 <validate+0x2c>
    6bce:	80 81       	ld	r24, Z
    6bd0:	88 23       	and	r24, r24
    6bd2:	81 f0       	breq	.+32     	; 0x6bf4 <validate+0x2c>
    6bd4:	85 81       	ldd	r24, Z+5	; 0x05
    6bd6:	96 81       	ldd	r25, Z+6	; 0x06
    6bd8:	86 17       	cp	r24, r22
    6bda:	97 07       	cpc	r25, r23
    6bdc:	59 f4       	brne	.+22     	; 0x6bf4 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    6bde:	81 81       	ldd	r24, Z+1	; 0x01
    6be0:	0e 94 86 50 	call	0xa10c	; 0xa10c <disk_status>
    6be4:	80 fd       	sbrc	r24, 0
    6be6:	03 c0       	rjmp	.+6      	; 0x6bee <validate+0x26>
    6be8:	20 e0       	ldi	r18, 0x00	; 0
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	05 c0       	rjmp	.+10     	; 0x6bf8 <validate+0x30>
    6bee:	23 e0       	ldi	r18, 0x03	; 3
    6bf0:	30 e0       	ldi	r19, 0x00	; 0
    6bf2:	02 c0       	rjmp	.+4      	; 0x6bf8 <validate+0x30>
    6bf4:	29 e0       	ldi	r18, 0x09	; 9
    6bf6:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    6bf8:	c9 01       	movw	r24, r18
    6bfa:	08 95       	ret

00006bfc <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    6bfc:	0f 93       	push	r16
    6bfe:	cf 93       	push	r28
    6c00:	df 93       	push	r29
    6c02:	ec 01       	movw	r28, r24
    6c04:	9a 01       	movw	r18, r20
    6c06:	ab 01       	movw	r20, r22
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6c08:	bc 01       	movw	r22, r24
    6c0a:	6e 5c       	subi	r22, 0xCE	; 206
    6c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c0e:	89 81       	ldd	r24, Y+1	; 0x01
    6c10:	01 e0       	ldi	r16, 0x01	; 1
    6c12:	0e 94 8d 50 	call	0xa11a	; 0xa11a <disk_read>
    6c16:	89 2b       	or	r24, r25
    6c18:	11 f0       	breq	.+4      	; 0x6c1e <check_fs+0x22>
    6c1a:	23 e0       	ldi	r18, 0x03	; 3
    6c1c:	37 c0       	rjmp	.+110    	; 0x6c8c <check_fs+0x90>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6c1e:	c0 5d       	subi	r28, 0xD0	; 208
    6c20:	dd 4f       	sbci	r29, 0xFD	; 253
    6c22:	88 81       	ld	r24, Y
    6c24:	99 81       	ldd	r25, Y+1	; 0x01
    6c26:	c0 53       	subi	r28, 0x30	; 48
    6c28:	d2 40       	sbci	r29, 0x02	; 2
    6c2a:	85 55       	subi	r24, 0x55	; 85
    6c2c:	9a 4a       	sbci	r25, 0xAA	; 170
    6c2e:	11 f0       	breq	.+4      	; 0x6c34 <check_fs+0x38>
    6c30:	22 e0       	ldi	r18, 0x02	; 2
    6c32:	2c c0       	rjmp	.+88     	; 0x6c8c <check_fs+0x90>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6c34:	de 01       	movw	r26, r28
    6c36:	a8 59       	subi	r26, 0x98	; 152
    6c38:	bf 4f       	sbci	r27, 0xFF	; 255
    6c3a:	e5 e5       	ldi	r30, 0x55	; 85
    6c3c:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6c3e:	84 e2       	ldi	r24, 0x24	; 36
    6c40:	e8 35       	cpi	r30, 0x58	; 88
    6c42:	f8 07       	cpc	r31, r24
    6c44:	11 f4       	brne	.+4      	; 0x6c4a <check_fs+0x4e>
    6c46:	20 e0       	ldi	r18, 0x00	; 0
    6c48:	21 c0       	rjmp	.+66     	; 0x6c8c <check_fs+0x90>
    6c4a:	9c 91       	ld	r25, X
    6c4c:	80 81       	ld	r24, Z
    6c4e:	98 17       	cp	r25, r24
    6c50:	19 f4       	brne	.+6      	; 0x6c58 <check_fs+0x5c>
    6c52:	11 96       	adiw	r26, 0x01	; 1
    6c54:	31 96       	adiw	r30, 0x01	; 1
    6c56:	f3 cf       	rjmp	.-26     	; 0x6c3e <check_fs+0x42>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6c58:	de 01       	movw	r26, r28
    6c5a:	ac 57       	subi	r26, 0x7C	; 124
    6c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    6c5e:	e5 e5       	ldi	r30, 0x55	; 85
    6c60:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6c62:	24 e2       	ldi	r18, 0x24	; 36
    6c64:	e8 35       	cpi	r30, 0x58	; 88
    6c66:	f2 07       	cpc	r31, r18
    6c68:	49 f0       	breq	.+18     	; 0x6c7c <check_fs+0x80>
    6c6a:	9c 91       	ld	r25, X
    6c6c:	80 81       	ld	r24, Z
    6c6e:	98 17       	cp	r25, r24
    6c70:	11 f0       	breq	.+4      	; 0x6c76 <check_fs+0x7a>
    6c72:	21 e0       	ldi	r18, 0x01	; 1
    6c74:	0b c0       	rjmp	.+22     	; 0x6c8c <check_fs+0x90>
    6c76:	11 96       	adiw	r26, 0x01	; 1
    6c78:	31 96       	adiw	r30, 0x01	; 1
    6c7a:	f3 cf       	rjmp	.-26     	; 0x6c62 <check_fs+0x66>
    6c7c:	20 e0       	ldi	r18, 0x00	; 0
    6c7e:	c6 5a       	subi	r28, 0xA6	; 166
    6c80:	df 4f       	sbci	r29, 0xFF	; 255
    6c82:	88 81       	ld	r24, Y
    6c84:	87 ff       	sbrs	r24, 7
    6c86:	21 e0       	ldi	r18, 0x01	; 1
    6c88:	81 e0       	ldi	r24, 0x01	; 1
    6c8a:	28 27       	eor	r18, r24
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
}
    6c8c:	82 2f       	mov	r24, r18
    6c8e:	df 91       	pop	r29
    6c90:	cf 91       	pop	r28
    6c92:	0f 91       	pop	r16
    6c94:	08 95       	ret

00006c96 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    6c96:	a0 e0       	ldi	r26, 0x00	; 0
    6c98:	b0 e0       	ldi	r27, 0x00	; 0
    6c9a:	e1 e5       	ldi	r30, 0x51	; 81
    6c9c:	f6 e3       	ldi	r31, 0x36	; 54
    6c9e:	0c 94 a7 57 	jmp	0xaf4e	; 0xaf4e <__prologue_saves__+0x8>
    6ca2:	fc 01       	movw	r30, r24
    6ca4:	9b 01       	movw	r18, r22
    6ca6:	f4 2e       	mov	r15, r20
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    6ca8:	a0 81       	ld	r26, Z
    6caa:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    6cac:	8c 91       	ld	r24, X
    6cae:	08 2f       	mov	r16, r24
    6cb0:	11 27       	eor	r17, r17
    6cb2:	07 fd       	sbrc	r16, 7
    6cb4:	10 95       	com	r17
    6cb6:	00 53       	subi	r16, 0x30	; 48
    6cb8:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    6cba:	0a 30       	cpi	r16, 0x0A	; 10
    6cbc:	11 05       	cpc	r17, r1
    6cbe:	48 f4       	brcc	.+18     	; 0x6cd2 <auto_mount+0x3c>
    6cc0:	11 96       	adiw	r26, 0x01	; 1
    6cc2:	8c 91       	ld	r24, X
    6cc4:	11 97       	sbiw	r26, 0x01	; 1
    6cc6:	8a 33       	cpi	r24, 0x3A	; 58
    6cc8:	21 f4       	brne	.+8      	; 0x6cd2 <auto_mount+0x3c>
		p += 2; *path = p;			/* Return pointer to the path name */
    6cca:	12 96       	adiw	r26, 0x02	; 2
    6ccc:	a0 83       	st	Z, r26
    6cce:	b1 83       	std	Z+1, r27	; 0x01
    6cd0:	04 c0       	rjmp	.+8      	; 0x6cda <auto_mount+0x44>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    6cd2:	80 91 6b 25 	lds	r24, 0x256B
    6cd6:	08 2f       	mov	r16, r24
    6cd8:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    6cda:	02 30       	cpi	r16, 0x02	; 2
    6cdc:	11 05       	cpc	r17, r1
    6cde:	18 f0       	brcs	.+6      	; 0x6ce6 <auto_mount+0x50>
    6ce0:	2b e0       	ldi	r18, 0x0B	; 11
    6ce2:	30 e0       	ldi	r19, 0x00	; 0
    6ce4:	84 c1       	rjmp	.+776    	; 0x6fee <auto_mount+0x358>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    6ce6:	f8 01       	movw	r30, r16
    6ce8:	ee 0f       	add	r30, r30
    6cea:	ff 1f       	adc	r31, r31
    6cec:	eb 59       	subi	r30, 0x9B	; 155
    6cee:	fa 4d       	sbci	r31, 0xDA	; 218
    6cf0:	c0 81       	ld	r28, Z
    6cf2:	d1 81       	ldd	r29, Z+1	; 0x01
    6cf4:	f9 01       	movw	r30, r18
    6cf6:	c0 83       	st	Z, r28
    6cf8:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
    6cfa:	20 97       	sbiw	r28, 0x00	; 0
    6cfc:	19 f4       	brne	.+6      	; 0x6d04 <auto_mount+0x6e>
    6cfe:	2c e0       	ldi	r18, 0x0C	; 12
    6d00:	30 e0       	ldi	r19, 0x00	; 0
    6d02:	75 c1       	rjmp	.+746    	; 0x6fee <auto_mount+0x358>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    6d04:	88 81       	ld	r24, Y
    6d06:	88 23       	and	r24, r24
    6d08:	59 f0       	breq	.+22     	; 0x6d20 <auto_mount+0x8a>
		stat = disk_status(fs->drive);
    6d0a:	89 81       	ldd	r24, Y+1	; 0x01
    6d0c:	0e 94 86 50 	call	0xa10c	; 0xa10c <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    6d10:	80 fd       	sbrc	r24, 0
    6d12:	06 c0       	rjmp	.+12     	; 0x6d20 <auto_mount+0x8a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6d14:	ff 20       	and	r15, r15
    6d16:	09 f4       	brne	.+2      	; 0x6d1a <auto_mount+0x84>
    6d18:	65 c1       	rjmp	.+714    	; 0x6fe4 <auto_mount+0x34e>
    6d1a:	82 fd       	sbrc	r24, 2
    6d1c:	60 c1       	rjmp	.+704    	; 0x6fde <auto_mount+0x348>
    6d1e:	62 c1       	rjmp	.+708    	; 0x6fe4 <auto_mount+0x34e>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    6d20:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    6d22:	09 83       	std	Y+1, r16	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    6d24:	80 2f       	mov	r24, r16
    6d26:	0e 94 7c 53 	call	0xa6f8	; 0xa6f8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    6d2a:	80 ff       	sbrs	r24, 0
    6d2c:	03 c0       	rjmp	.+6      	; 0x6d34 <auto_mount+0x9e>
    6d2e:	23 e0       	ldi	r18, 0x03	; 3
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	5d c1       	rjmp	.+698    	; 0x6fee <auto_mount+0x358>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6d34:	ff 20       	and	r15, r15
    6d36:	11 f0       	breq	.+4      	; 0x6d3c <auto_mount+0xa6>
    6d38:	82 fd       	sbrc	r24, 2
    6d3a:	51 c1       	rjmp	.+674    	; 0x6fde <auto_mount+0x348>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    6d3c:	ce 01       	movw	r24, r28
    6d3e:	40 e0       	ldi	r20, 0x00	; 0
    6d40:	50 e0       	ldi	r21, 0x00	; 0
    6d42:	60 e0       	ldi	r22, 0x00	; 0
    6d44:	70 e0       	ldi	r23, 0x00	; 0
    6d46:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    6d4a:	81 30       	cpi	r24, 0x01	; 1
    6d4c:	21 f0       	breq	.+8      	; 0x6d56 <auto_mount+0xc0>
    6d4e:	66 24       	eor	r6, r6
    6d50:	77 24       	eor	r7, r7
    6d52:	43 01       	movw	r8, r6
    6d54:	10 c0       	rjmp	.+32     	; 0x6d76 <auto_mount+0xe0>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    6d56:	fe 01       	movw	r30, r28
    6d58:	e0 51       	subi	r30, 0x10	; 16
    6d5a:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    6d5c:	84 81       	ldd	r24, Z+4	; 0x04
    6d5e:	88 23       	and	r24, r24
    6d60:	09 f4       	brne	.+2      	; 0x6d64 <auto_mount+0xce>
    6d62:	43 c1       	rjmp	.+646    	; 0x6fea <auto_mount+0x354>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    6d64:	60 84       	ldd	r6, Z+8	; 0x08
    6d66:	71 84       	ldd	r7, Z+9	; 0x09
    6d68:	82 84       	ldd	r8, Z+10	; 0x0a
    6d6a:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    6d6c:	ce 01       	movw	r24, r28
    6d6e:	b4 01       	movw	r22, r8
    6d70:	a3 01       	movw	r20, r6
    6d72:	0e 94 fe 35 	call	0x6bfc	; 0x6bfc <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    6d76:	83 30       	cpi	r24, 0x03	; 3
    6d78:	19 f4       	brne	.+6      	; 0x6d80 <auto_mount+0xea>
    6d7a:	21 e0       	ldi	r18, 0x01	; 1
    6d7c:	30 e0       	ldi	r19, 0x00	; 0
    6d7e:	37 c1       	rjmp	.+622    	; 0x6fee <auto_mount+0x358>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    6d80:	88 23       	and	r24, r24
    6d82:	09 f0       	breq	.+2      	; 0x6d86 <auto_mount+0xf0>
    6d84:	32 c1       	rjmp	.+612    	; 0x6fea <auto_mount+0x354>
    6d86:	8d ad       	ldd	r24, Y+61	; 0x3d
    6d88:	9e ad       	ldd	r25, Y+62	; 0x3e
    6d8a:	80 50       	subi	r24, 0x00	; 0
    6d8c:	92 40       	sbci	r25, 0x02	; 2
    6d8e:	09 f0       	breq	.+2      	; 0x6d92 <auto_mount+0xfc>
    6d90:	2c c1       	rjmp	.+600    	; 0x6fea <auto_mount+0x354>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6d92:	c8 5b       	subi	r28, 0xB8	; 184
    6d94:	df 4f       	sbci	r29, 0xFF	; 255
    6d96:	88 81       	ld	r24, Y
    6d98:	99 81       	ldd	r25, Y+1	; 0x01
    6d9a:	c8 54       	subi	r28, 0x48	; 72
    6d9c:	d0 40       	sbci	r29, 0x00	; 0
    6d9e:	bc 01       	movw	r22, r24
    6da0:	80 e0       	ldi	r24, 0x00	; 0
    6da2:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    6da4:	61 15       	cp	r22, r1
    6da6:	71 05       	cpc	r23, r1
    6da8:	81 05       	cpc	r24, r1
    6daa:	91 05       	cpc	r25, r1
    6dac:	41 f4       	brne	.+16     	; 0x6dbe <auto_mount+0x128>
    6dae:	ca 5a       	subi	r28, 0xAA	; 170
    6db0:	df 4f       	sbci	r29, 0xFF	; 255
    6db2:	68 81       	ld	r22, Y
    6db4:	79 81       	ldd	r23, Y+1	; 0x01
    6db6:	8a 81       	ldd	r24, Y+2	; 0x02
    6db8:	9b 81       	ldd	r25, Y+3	; 0x03
    6dba:	c6 55       	subi	r28, 0x56	; 86
    6dbc:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    6dbe:	6a 8f       	std	Y+26, r22	; 0x1a
    6dc0:	7b 8f       	std	Y+27, r23	; 0x1b
    6dc2:	8c 8f       	std	Y+28, r24	; 0x1c
    6dc4:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    6dc6:	ce 5b       	subi	r28, 0xBE	; 190
    6dc8:	df 4f       	sbci	r29, 0xFF	; 255
    6dca:	28 81       	ld	r18, Y
    6dcc:	c2 54       	subi	r28, 0x42	; 66
    6dce:	d0 40       	sbci	r29, 0x00	; 0
    6dd0:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    6dd2:	30 e0       	ldi	r19, 0x00	; 0
    6dd4:	40 e0       	ldi	r20, 0x00	; 0
    6dd6:	50 e0       	ldi	r21, 0x00	; 0
    6dd8:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    6ddc:	5b 01       	movw	r10, r22
    6dde:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    6de0:	fe 01       	movw	r30, r28
    6de2:	e0 5c       	subi	r30, 0xC0	; 192
    6de4:	ff 4f       	sbci	r31, 0xFF	; 255
    6de6:	80 81       	ld	r24, Z
    6de8:	91 81       	ldd	r25, Z+1	; 0x01
    6dea:	a0 e0       	ldi	r26, 0x00	; 0
    6dec:	b0 e0       	ldi	r27, 0x00	; 0
    6dee:	86 0d       	add	r24, r6
    6df0:	97 1d       	adc	r25, r7
    6df2:	a8 1d       	adc	r26, r8
    6df4:	b9 1d       	adc	r27, r9
    6df6:	8a a3       	std	Y+34, r24	; 0x22
    6df8:	9b a3       	std	Y+35, r25	; 0x23
    6dfa:	ac a3       	std	Y+36, r26	; 0x24
    6dfc:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    6dfe:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e00:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    6e02:	cd 5b       	subi	r28, 0xBD	; 189
    6e04:	df 4f       	sbci	r29, 0xFF	; 255
    6e06:	28 81       	ld	r18, Y
    6e08:	39 81       	ldd	r19, Y+1	; 0x01
    6e0a:	c3 54       	subi	r28, 0x43	; 67
    6e0c:	d0 40       	sbci	r29, 0x00	; 0
    6e0e:	2f 83       	std	Y+7, r18	; 0x07
    6e10:	38 87       	std	Y+8, r19	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    6e12:	cb 5b       	subi	r28, 0xBB	; 187
    6e14:	df 4f       	sbci	r29, 0xFF	; 255
    6e16:	88 81       	ld	r24, Y
    6e18:	99 81       	ldd	r25, Y+1	; 0x01
    6e1a:	c5 54       	subi	r28, 0x45	; 69
    6e1c:	d0 40       	sbci	r29, 0x00	; 0
    6e1e:	7c 01       	movw	r14, r24
    6e20:	00 e0       	ldi	r16, 0x00	; 0
    6e22:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6e24:	e1 14       	cp	r14, r1
    6e26:	f1 04       	cpc	r15, r1
    6e28:	01 05       	cpc	r16, r1
    6e2a:	11 05       	cpc	r17, r1
    6e2c:	41 f4       	brne	.+16     	; 0x6e3e <auto_mount+0x1a8>
    6e2e:	ce 5a       	subi	r28, 0xAE	; 174
    6e30:	df 4f       	sbci	r29, 0xFF	; 255
    6e32:	e8 80       	ld	r14, Y
    6e34:	f9 80       	ldd	r15, Y+1	; 0x01
    6e36:	0a 81       	ldd	r16, Y+2	; 0x02
    6e38:	1b 81       	ldd	r17, Y+3	; 0x03
    6e3a:	c2 55       	subi	r28, 0x52	; 82
    6e3c:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    6e3e:	80 81       	ld	r24, Z
    6e40:	91 81       	ldd	r25, Z+1	; 0x01
    6e42:	a0 e0       	ldi	r26, 0x00	; 0
    6e44:	b0 e0       	ldi	r27, 0x00	; 0
    6e46:	e8 1a       	sub	r14, r24
    6e48:	f9 0a       	sbc	r15, r25
    6e4a:	0a 0b       	sbc	r16, r26
    6e4c:	1b 0b       	sbc	r17, r27
    6e4e:	ea 18       	sub	r14, r10
    6e50:	fb 08       	sbc	r15, r11
    6e52:	0c 09       	sbc	r16, r12
    6e54:	1d 09       	sbc	r17, r13
    6e56:	84 e0       	ldi	r24, 0x04	; 4
    6e58:	36 95       	lsr	r19
    6e5a:	27 95       	ror	r18
    6e5c:	8a 95       	dec	r24
    6e5e:	e1 f7       	brne	.-8      	; 0x6e58 <auto_mount+0x1c2>
    6e60:	c9 01       	movw	r24, r18
    6e62:	a0 e0       	ldi	r26, 0x00	; 0
    6e64:	b0 e0       	ldi	r27, 0x00	; 0
    6e66:	e8 1a       	sub	r14, r24
    6e68:	f9 0a       	sbc	r15, r25
    6e6a:	0a 0b       	sbc	r16, r26
    6e6c:	1b 0b       	sbc	r17, r27
    6e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    6e70:	30 e0       	ldi	r19, 0x00	; 0
    6e72:	40 e0       	ldi	r20, 0x00	; 0
    6e74:	50 e0       	ldi	r21, 0x00	; 0
    6e76:	c8 01       	movw	r24, r16
    6e78:	b7 01       	movw	r22, r14
    6e7a:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    6e7e:	2e 5f       	subi	r18, 0xFE	; 254
    6e80:	3f 4f       	sbci	r19, 0xFF	; 255
    6e82:	4f 4f       	sbci	r20, 0xFF	; 255
    6e84:	5f 4f       	sbci	r21, 0xFF	; 255
    6e86:	2e 8f       	std	Y+30, r18	; 0x1e
    6e88:	3f 8f       	std	Y+31, r19	; 0x1f
    6e8a:	48 a3       	std	Y+32, r20	; 0x20
    6e8c:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    6e8e:	27 3f       	cpi	r18, 0xF7	; 247
    6e90:	8f e0       	ldi	r24, 0x0F	; 15
    6e92:	38 07       	cpc	r19, r24
    6e94:	80 e0       	ldi	r24, 0x00	; 0
    6e96:	48 07       	cpc	r20, r24
    6e98:	80 e0       	ldi	r24, 0x00	; 0
    6e9a:	58 07       	cpc	r21, r24
    6e9c:	10 f4       	brcc	.+4      	; 0x6ea2 <auto_mount+0x20c>
    6e9e:	11 e0       	ldi	r17, 0x01	; 1
    6ea0:	07 c0       	rjmp	.+14     	; 0x6eb0 <auto_mount+0x21a>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    6ea2:	27 5f       	subi	r18, 0xF7	; 247
    6ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ea6:	40 40       	sbci	r20, 0x00	; 0
    6ea8:	50 40       	sbci	r21, 0x00	; 0
    6eaa:	08 f0       	brcs	.+2      	; 0x6eae <auto_mount+0x218>
    6eac:	a6 c0       	rjmp	.+332    	; 0x6ffa <auto_mount+0x364>
    6eae:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    6eb0:	8a a1       	ldd	r24, Y+34	; 0x22
    6eb2:	9b a1       	ldd	r25, Y+35	; 0x23
    6eb4:	ac a1       	ldd	r26, Y+36	; 0x24
    6eb6:	bd a1       	ldd	r27, Y+37	; 0x25
    6eb8:	8a 0d       	add	r24, r10
    6eba:	9b 1d       	adc	r25, r11
    6ebc:	ac 1d       	adc	r26, r12
    6ebe:	bd 1d       	adc	r27, r13
    6ec0:	8e a3       	std	Y+38, r24	; 0x26
    6ec2:	9f a3       	std	Y+39, r25	; 0x27
    6ec4:	a8 a7       	std	Y+40, r26	; 0x28
    6ec6:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    6ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    6eca:	98 85       	ldd	r25, Y+8	; 0x08
    6ecc:	b4 e0       	ldi	r27, 0x04	; 4
    6ece:	96 95       	lsr	r25
    6ed0:	87 95       	ror	r24
    6ed2:	ba 95       	dec	r27
    6ed4:	e1 f7       	brne	.-8      	; 0x6ece <auto_mount+0x238>
    6ed6:	a0 e0       	ldi	r26, 0x00	; 0
    6ed8:	b0 e0       	ldi	r27, 0x00	; 0
    6eda:	2a a1       	ldd	r18, Y+34	; 0x22
    6edc:	3b a1       	ldd	r19, Y+35	; 0x23
    6ede:	4c a1       	ldd	r20, Y+36	; 0x24
    6ee0:	5d a1       	ldd	r21, Y+37	; 0x25
    6ee2:	82 0f       	add	r24, r18
    6ee4:	93 1f       	adc	r25, r19
    6ee6:	a4 1f       	adc	r26, r20
    6ee8:	b5 1f       	adc	r27, r21
    6eea:	8a 0d       	add	r24, r10
    6eec:	9b 1d       	adc	r25, r11
    6eee:	ac 1d       	adc	r26, r12
    6ef0:	bd 1d       	adc	r27, r13
    6ef2:	8a a7       	std	Y+42, r24	; 0x2a
    6ef4:	9b a7       	std	Y+43, r25	; 0x2b
    6ef6:	ac a7       	std	Y+44, r26	; 0x2c
    6ef8:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    6efa:	8f ef       	ldi	r24, 0xFF	; 255
    6efc:	9f ef       	ldi	r25, 0xFF	; 255
    6efe:	af ef       	ldi	r26, 0xFF	; 255
    6f00:	bf ef       	ldi	r27, 0xFF	; 255
    6f02:	8e 87       	std	Y+14, r24	; 0x0e
    6f04:	9f 87       	std	Y+15, r25	; 0x0f
    6f06:	a8 8b       	std	Y+16, r26	; 0x10
    6f08:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    6f0a:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    6f0c:	13 30       	cpi	r17, 0x03	; 3
    6f0e:	09 f0       	breq	.+2      	; 0x6f12 <auto_mount+0x27c>
    6f10:	51 c0       	rjmp	.+162    	; 0x6fb4 <auto_mount+0x31e>
	 	fs->fsi_flag = 0;
    6f12:	19 86       	std	Y+9, r1	; 0x09
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    6f14:	ce 59       	subi	r28, 0x9E	; 158
    6f16:	df 4f       	sbci	r29, 0xFF	; 255
    6f18:	28 81       	ld	r18, Y
    6f1a:	39 81       	ldd	r19, Y+1	; 0x01
    6f1c:	c2 56       	subi	r28, 0x62	; 98
    6f1e:	d0 40       	sbci	r29, 0x00	; 0
    6f20:	40 e0       	ldi	r20, 0x00	; 0
    6f22:	50 e0       	ldi	r21, 0x00	; 0
    6f24:	26 0d       	add	r18, r6
    6f26:	37 1d       	adc	r19, r7
    6f28:	48 1d       	adc	r20, r8
    6f2a:	59 1d       	adc	r21, r9
    6f2c:	2a 8b       	std	Y+18, r18	; 0x12
    6f2e:	3b 8b       	std	Y+19, r19	; 0x13
    6f30:	4c 8b       	std	Y+20, r20	; 0x14
    6f32:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6f34:	be 01       	movw	r22, r28
    6f36:	6e 5c       	subi	r22, 0xCE	; 206
    6f38:	7f 4f       	sbci	r23, 0xFF	; 255
    6f3a:	89 81       	ldd	r24, Y+1	; 0x01
    6f3c:	01 e0       	ldi	r16, 0x01	; 1
    6f3e:	0e 94 8d 50 	call	0xa11a	; 0xa11a <disk_read>
    6f42:	89 2b       	or	r24, r25
    6f44:	b9 f5       	brne	.+110    	; 0x6fb4 <auto_mount+0x31e>
    6f46:	c0 5d       	subi	r28, 0xD0	; 208
    6f48:	dd 4f       	sbci	r29, 0xFD	; 253
    6f4a:	88 81       	ld	r24, Y
    6f4c:	99 81       	ldd	r25, Y+1	; 0x01
    6f4e:	c0 53       	subi	r28, 0x30	; 48
    6f50:	d2 40       	sbci	r29, 0x02	; 2
    6f52:	85 55       	subi	r24, 0x55	; 85
    6f54:	9a 4a       	sbci	r25, 0xAA	; 170
    6f56:	71 f5       	brne	.+92     	; 0x6fb4 <auto_mount+0x31e>
    6f58:	8a a9       	ldd	r24, Y+50	; 0x32
    6f5a:	9b a9       	ldd	r25, Y+51	; 0x33
    6f5c:	ac a9       	ldd	r26, Y+52	; 0x34
    6f5e:	bd a9       	ldd	r27, Y+53	; 0x35
    6f60:	82 55       	subi	r24, 0x52	; 82
    6f62:	92 45       	sbci	r25, 0x52	; 82
    6f64:	a1 46       	sbci	r26, 0x61	; 97
    6f66:	b1 44       	sbci	r27, 0x41	; 65
    6f68:	29 f5       	brne	.+74     	; 0x6fb4 <auto_mount+0x31e>
    6f6a:	ca 5e       	subi	r28, 0xEA	; 234
    6f6c:	dd 4f       	sbci	r29, 0xFD	; 253
    6f6e:	88 81       	ld	r24, Y
    6f70:	99 81       	ldd	r25, Y+1	; 0x01
    6f72:	aa 81       	ldd	r26, Y+2	; 0x02
    6f74:	bb 81       	ldd	r27, Y+3	; 0x03
    6f76:	c6 51       	subi	r28, 0x16	; 22
    6f78:	d2 40       	sbci	r29, 0x02	; 2
    6f7a:	82 57       	subi	r24, 0x72	; 114
    6f7c:	92 47       	sbci	r25, 0x72	; 114
    6f7e:	a1 44       	sbci	r26, 0x41	; 65
    6f80:	b1 46       	sbci	r27, 0x61	; 97
    6f82:	c1 f4       	brne	.+48     	; 0x6fb4 <auto_mount+0x31e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6f84:	c2 5e       	subi	r28, 0xE2	; 226
    6f86:	dd 4f       	sbci	r29, 0xFD	; 253
    6f88:	88 81       	ld	r24, Y
    6f8a:	99 81       	ldd	r25, Y+1	; 0x01
    6f8c:	aa 81       	ldd	r26, Y+2	; 0x02
    6f8e:	bb 81       	ldd	r27, Y+3	; 0x03
    6f90:	ce 51       	subi	r28, 0x1E	; 30
    6f92:	d2 40       	sbci	r29, 0x02	; 2
    6f94:	8a 87       	std	Y+10, r24	; 0x0a
    6f96:	9b 87       	std	Y+11, r25	; 0x0b
    6f98:	ac 87       	std	Y+12, r26	; 0x0c
    6f9a:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    6f9c:	c6 5e       	subi	r28, 0xE6	; 230
    6f9e:	dd 4f       	sbci	r29, 0xFD	; 253
    6fa0:	88 81       	ld	r24, Y
    6fa2:	99 81       	ldd	r25, Y+1	; 0x01
    6fa4:	aa 81       	ldd	r26, Y+2	; 0x02
    6fa6:	bb 81       	ldd	r27, Y+3	; 0x03
    6fa8:	ca 51       	subi	r28, 0x1A	; 26
    6faa:	d2 40       	sbci	r29, 0x02	; 2
    6fac:	8e 87       	std	Y+14, r24	; 0x0e
    6fae:	9f 87       	std	Y+15, r25	; 0x0f
    6fb0:	a8 8b       	std	Y+16, r26	; 0x10
    6fb2:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    6fb4:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    6fb6:	1e a6       	std	Y+46, r1	; 0x2e
    6fb8:	1f a6       	std	Y+47, r1	; 0x2f
    6fba:	18 aa       	std	Y+48, r1	; 0x30
    6fbc:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    6fbe:	1e 8a       	std	Y+22, r1	; 0x16
    6fc0:	1f 8a       	std	Y+23, r1	; 0x17
    6fc2:	18 8e       	std	Y+24, r1	; 0x18
    6fc4:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    6fc6:	80 91 69 25 	lds	r24, 0x2569
    6fca:	90 91 6a 25 	lds	r25, 0x256A
    6fce:	01 96       	adiw	r24, 0x01	; 1
    6fd0:	80 93 69 25 	sts	0x2569, r24
    6fd4:	90 93 6a 25 	sts	0x256A, r25
    6fd8:	8d 83       	std	Y+5, r24	; 0x05
    6fda:	9e 83       	std	Y+6, r25	; 0x06
    6fdc:	03 c0       	rjmp	.+6      	; 0x6fe4 <auto_mount+0x34e>
	res = FR_OK;

	return res;
    6fde:	2a e0       	ldi	r18, 0x0A	; 10
    6fe0:	30 e0       	ldi	r19, 0x00	; 0
    6fe2:	05 c0       	rjmp	.+10     	; 0x6fee <auto_mount+0x358>
    6fe4:	20 e0       	ldi	r18, 0x00	; 0
    6fe6:	30 e0       	ldi	r19, 0x00	; 0
    6fe8:	02 c0       	rjmp	.+4      	; 0x6fee <auto_mount+0x358>
    6fea:	2d e0       	ldi	r18, 0x0D	; 13
    6fec:	30 e0       	ldi	r19, 0x00	; 0
}
    6fee:	c9 01       	movw	r24, r18
    6ff0:	cd b7       	in	r28, 0x3d	; 61
    6ff2:	de b7       	in	r29, 0x3e	; 62
    6ff4:	ee e0       	ldi	r30, 0x0E	; 14
    6ff6:	0c 94 c3 57 	jmp	0xaf86	; 0xaf86 <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    6ffa:	c2 5a       	subi	r28, 0xA2	; 162
    6ffc:	df 4f       	sbci	r29, 0xFF	; 255
    6ffe:	88 81       	ld	r24, Y
    7000:	99 81       	ldd	r25, Y+1	; 0x01
    7002:	aa 81       	ldd	r26, Y+2	; 0x02
    7004:	bb 81       	ldd	r27, Y+3	; 0x03
    7006:	ce 55       	subi	r28, 0x5E	; 94
    7008:	d0 40       	sbci	r29, 0x00	; 0
    700a:	8e a3       	std	Y+38, r24	; 0x26
    700c:	9f a3       	std	Y+39, r25	; 0x27
    700e:	a8 a7       	std	Y+40, r26	; 0x28
    7010:	b9 a7       	std	Y+41, r27	; 0x29
    7012:	13 e0       	ldi	r17, 0x03	; 3
    7014:	59 cf       	rjmp	.-334    	; 0x6ec8 <auto_mount+0x232>

00007016 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7016:	a0 e0       	ldi	r26, 0x00	; 0
    7018:	b0 e0       	ldi	r27, 0x00	; 0
    701a:	e1 e1       	ldi	r30, 0x11	; 17
    701c:	f8 e3       	ldi	r31, 0x38	; 56
    701e:	0c 94 a7 57 	jmp	0xaf4e	; 0xaf4e <__prologue_saves__+0x8>
    7022:	ec 01       	movw	r28, r24
    7024:	4a 01       	movw	r8, r20
    7026:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    7028:	ce a4       	ldd	r12, Y+46	; 0x2e
    702a:	df a4       	ldd	r13, Y+47	; 0x2f
    702c:	e8 a8       	ldd	r14, Y+48	; 0x30
    702e:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    7030:	c4 16       	cp	r12, r20
    7032:	d5 06       	cpc	r13, r21
    7034:	e6 06       	cpc	r14, r22
    7036:	f7 06       	cpc	r15, r23
    7038:	09 f4       	brne	.+2      	; 0x703c <move_window+0x26>
    703a:	4f c0       	rjmp	.+158    	; 0x70da <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    703c:	8c 81       	ldd	r24, Y+4	; 0x04
    703e:	88 23       	and	r24, r24
    7040:	a1 f1       	breq	.+104    	; 0x70aa <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    7042:	22 e3       	ldi	r18, 0x32	; 50
    7044:	62 2e       	mov	r6, r18
    7046:	71 2c       	mov	r7, r1
    7048:	6c 0e       	add	r6, r28
    704a:	7d 1e       	adc	r7, r29
    704c:	89 81       	ldd	r24, Y+1	; 0x01
    704e:	b3 01       	movw	r22, r6
    7050:	a7 01       	movw	r20, r14
    7052:	96 01       	movw	r18, r12
    7054:	01 e0       	ldi	r16, 0x01	; 1
    7056:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    705a:	89 2b       	or	r24, r25
    705c:	d9 f5       	brne	.+118    	; 0x70d4 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    705e:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    7060:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7062:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7064:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7066:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7068:	2a a1       	ldd	r18, Y+34	; 0x22
    706a:	3b a1       	ldd	r19, Y+35	; 0x23
    706c:	4c a1       	ldd	r20, Y+36	; 0x24
    706e:	5d a1       	ldd	r21, Y+37	; 0x25
    7070:	82 0f       	add	r24, r18
    7072:	93 1f       	adc	r25, r19
    7074:	a4 1f       	adc	r26, r20
    7076:	b5 1f       	adc	r27, r21
    7078:	c8 16       	cp	r12, r24
    707a:	d9 06       	cpc	r13, r25
    707c:	ea 06       	cpc	r14, r26
    707e:	fb 06       	cpc	r15, r27
    7080:	a0 f4       	brcc	.+40     	; 0x70aa <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    7082:	1b 81       	ldd	r17, Y+3	; 0x03
    7084:	10 c0       	rjmp	.+32     	; 0x70a6 <move_window+0x90>
					wsect += fs->sects_fat;
    7086:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7088:	9b 8d       	ldd	r25, Y+27	; 0x1b
    708a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    708c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    708e:	c8 0e       	add	r12, r24
    7090:	d9 1e       	adc	r13, r25
    7092:	ea 1e       	adc	r14, r26
    7094:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    7096:	89 81       	ldd	r24, Y+1	; 0x01
    7098:	b3 01       	movw	r22, r6
    709a:	a7 01       	movw	r20, r14
    709c:	96 01       	movw	r18, r12
    709e:	01 e0       	ldi	r16, 0x01	; 1
    70a0:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    70a4:	11 50       	subi	r17, 0x01	; 1
    70a6:	12 30       	cpi	r17, 0x02	; 2
    70a8:	70 f7       	brcc	.-36     	; 0x7086 <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    70aa:	81 14       	cp	r8, r1
    70ac:	91 04       	cpc	r9, r1
    70ae:	a1 04       	cpc	r10, r1
    70b0:	b1 04       	cpc	r11, r1
    70b2:	99 f0       	breq	.+38     	; 0x70da <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    70b4:	be 01       	movw	r22, r28
    70b6:	6e 5c       	subi	r22, 0xCE	; 206
    70b8:	7f 4f       	sbci	r23, 0xFF	; 255
    70ba:	89 81       	ldd	r24, Y+1	; 0x01
    70bc:	a5 01       	movw	r20, r10
    70be:	94 01       	movw	r18, r8
    70c0:	01 e0       	ldi	r16, 0x01	; 1
    70c2:	0e 94 8d 50 	call	0xa11a	; 0xa11a <disk_read>
    70c6:	89 2b       	or	r24, r25
    70c8:	29 f4       	brne	.+10     	; 0x70d4 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    70ca:	8e a6       	std	Y+46, r8	; 0x2e
    70cc:	9f a6       	std	Y+47, r9	; 0x2f
    70ce:	a8 aa       	std	Y+48, r10	; 0x30
    70d0:	b9 aa       	std	Y+49, r11	; 0x31
    70d2:	03 c0       	rjmp	.+6      	; 0x70da <move_window+0xc4>
    70d4:	21 e0       	ldi	r18, 0x01	; 1
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	02 c0       	rjmp	.+4      	; 0x70de <move_window+0xc8>
    70da:	20 e0       	ldi	r18, 0x00	; 0
    70dc:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    70de:	c9 01       	movw	r24, r18
    70e0:	cd b7       	in	r28, 0x3d	; 61
    70e2:	de b7       	in	r29, 0x3e	; 62
    70e4:	ee e0       	ldi	r30, 0x0E	; 14
    70e6:	0c 94 c3 57 	jmp	0xaf86	; 0xaf86 <__epilogue_restores__+0x8>

000070ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    70ea:	a0 e0       	ldi	r26, 0x00	; 0
    70ec:	b0 e0       	ldi	r27, 0x00	; 0
    70ee:	eb e7       	ldi	r30, 0x7B	; 123
    70f0:	f8 e3       	ldi	r31, 0x38	; 56
    70f2:	0c 94 a8 57 	jmp	0xaf50	; 0xaf50 <__prologue_saves__+0xa>
    70f6:	4c 01       	movw	r8, r24
    70f8:	7a 01       	movw	r14, r20
    70fa:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    70fc:	42 30       	cpi	r20, 0x02	; 2
    70fe:	51 05       	cpc	r21, r1
    7100:	61 05       	cpc	r22, r1
    7102:	71 05       	cpc	r23, r1
    7104:	08 f4       	brcc	.+2      	; 0x7108 <get_fat+0x1e>
    7106:	97 c0       	rjmp	.+302    	; 0x7236 <get_fat+0x14c>
    7108:	f4 01       	movw	r30, r8
    710a:	86 8d       	ldd	r24, Z+30	; 0x1e
    710c:	97 8d       	ldd	r25, Z+31	; 0x1f
    710e:	a0 a1       	ldd	r26, Z+32	; 0x20
    7110:	b1 a1       	ldd	r27, Z+33	; 0x21
    7112:	48 17       	cp	r20, r24
    7114:	59 07       	cpc	r21, r25
    7116:	6a 07       	cpc	r22, r26
    7118:	7b 07       	cpc	r23, r27
    711a:	08 f0       	brcs	.+2      	; 0x711e <get_fat+0x34>
    711c:	8c c0       	rjmp	.+280    	; 0x7236 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
    711e:	a2 a0       	ldd	r10, Z+34	; 0x22
    7120:	b3 a0       	ldd	r11, Z+35	; 0x23
    7122:	c4 a0       	ldd	r12, Z+36	; 0x24
    7124:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
    7126:	80 81       	ld	r24, Z
    7128:	82 30       	cpi	r24, 0x02	; 2
    712a:	09 f4       	brne	.+2      	; 0x712e <get_fat+0x44>
    712c:	4d c0       	rjmp	.+154    	; 0x71c8 <get_fat+0xde>
    712e:	83 30       	cpi	r24, 0x03	; 3
    7130:	09 f4       	brne	.+2      	; 0x7134 <get_fat+0x4a>
    7132:	63 c0       	rjmp	.+198    	; 0x71fa <get_fat+0x110>
    7134:	81 30       	cpi	r24, 0x01	; 1
    7136:	09 f0       	breq	.+2      	; 0x713a <get_fat+0x50>
    7138:	83 c0       	rjmp	.+262    	; 0x7240 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    713a:	ea 01       	movw	r28, r20
    713c:	d6 95       	lsr	r29
    713e:	c7 95       	ror	r28
    7140:	c4 0f       	add	r28, r20
    7142:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    7144:	ae 01       	movw	r20, r28
    7146:	45 2f       	mov	r20, r21
    7148:	55 27       	eor	r21, r21
    714a:	46 95       	lsr	r20
    714c:	60 e0       	ldi	r22, 0x00	; 0
    714e:	70 e0       	ldi	r23, 0x00	; 0
    7150:	4a 0d       	add	r20, r10
    7152:	5b 1d       	adc	r21, r11
    7154:	6c 1d       	adc	r22, r12
    7156:	7d 1d       	adc	r23, r13
    7158:	c4 01       	movw	r24, r8
    715a:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    715e:	89 2b       	or	r24, r25
    7160:	09 f0       	breq	.+2      	; 0x7164 <get_fat+0x7a>
    7162:	6e c0       	rjmp	.+220    	; 0x7240 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    7164:	fe 01       	movw	r30, r28
    7166:	f1 70       	andi	r31, 0x01	; 1
    7168:	e8 0d       	add	r30, r8
    716a:	f9 1d       	adc	r31, r9
    716c:	72 a8       	ldd	r7, Z+50	; 0x32
    716e:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    7170:	ae 01       	movw	r20, r28
    7172:	45 2f       	mov	r20, r21
    7174:	55 27       	eor	r21, r21
    7176:	46 95       	lsr	r20
    7178:	60 e0       	ldi	r22, 0x00	; 0
    717a:	70 e0       	ldi	r23, 0x00	; 0
    717c:	4a 0d       	add	r20, r10
    717e:	5b 1d       	adc	r21, r11
    7180:	6c 1d       	adc	r22, r12
    7182:	7d 1d       	adc	r23, r13
    7184:	c4 01       	movw	r24, r8
    7186:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    718a:	89 2b       	or	r24, r25
    718c:	09 f0       	breq	.+2      	; 0x7190 <get_fat+0xa6>
    718e:	58 c0       	rjmp	.+176    	; 0x7240 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    7190:	67 2d       	mov	r22, r7
    7192:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    7194:	d1 70       	andi	r29, 0x01	; 1
    7196:	c8 0d       	add	r28, r8
    7198:	d9 1d       	adc	r29, r9
    719a:	9a a9       	ldd	r25, Y+50	; 0x32
    719c:	80 e0       	ldi	r24, 0x00	; 0
    719e:	68 2b       	or	r22, r24
    71a0:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    71a2:	c7 01       	movw	r24, r14
    71a4:	81 70       	andi	r24, 0x01	; 1
    71a6:	90 70       	andi	r25, 0x00	; 0
    71a8:	89 2b       	or	r24, r25
    71aa:	39 f0       	breq	.+14     	; 0x71ba <get_fat+0xd0>
    71ac:	84 e0       	ldi	r24, 0x04	; 4
    71ae:	76 95       	lsr	r23
    71b0:	67 95       	ror	r22
    71b2:	8a 95       	dec	r24
    71b4:	e1 f7       	brne	.-8      	; 0x71ae <get_fat+0xc4>
    71b6:	9b 01       	movw	r18, r22
    71b8:	1d c0       	rjmp	.+58     	; 0x71f4 <get_fat+0x10a>
    71ba:	9b 01       	movw	r18, r22
    71bc:	40 e0       	ldi	r20, 0x00	; 0
    71be:	50 e0       	ldi	r21, 0x00	; 0
    71c0:	3f 70       	andi	r19, 0x0F	; 15
    71c2:	40 70       	andi	r20, 0x00	; 0
    71c4:	50 70       	andi	r21, 0x00	; 0
    71c6:	40 c0       	rjmp	.+128    	; 0x7248 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    71c8:	45 2f       	mov	r20, r21
    71ca:	56 2f       	mov	r21, r22
    71cc:	67 2f       	mov	r22, r23
    71ce:	77 27       	eor	r23, r23
    71d0:	4a 0d       	add	r20, r10
    71d2:	5b 1d       	adc	r21, r11
    71d4:	6c 1d       	adc	r22, r12
    71d6:	7d 1d       	adc	r23, r13
    71d8:	c4 01       	movw	r24, r8
    71da:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    71de:	89 2b       	or	r24, r25
    71e0:	79 f5       	brne	.+94     	; 0x7240 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    71e2:	f7 01       	movw	r30, r14
    71e4:	ee 0f       	add	r30, r30
    71e6:	ff 1f       	adc	r31, r31
    71e8:	f1 70       	andi	r31, 0x01	; 1
    71ea:	e8 0d       	add	r30, r8
    71ec:	f9 1d       	adc	r31, r9
    71ee:	82 a9       	ldd	r24, Z+50	; 0x32
    71f0:	93 a9       	ldd	r25, Z+51	; 0x33
    71f2:	9c 01       	movw	r18, r24
    71f4:	40 e0       	ldi	r20, 0x00	; 0
    71f6:	50 e0       	ldi	r21, 0x00	; 0
    71f8:	27 c0       	rjmp	.+78     	; 0x7248 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    71fa:	e7 e0       	ldi	r30, 0x07	; 7
    71fc:	76 95       	lsr	r23
    71fe:	67 95       	ror	r22
    7200:	57 95       	ror	r21
    7202:	47 95       	ror	r20
    7204:	ea 95       	dec	r30
    7206:	d1 f7       	brne	.-12     	; 0x71fc <get_fat+0x112>
    7208:	4a 0d       	add	r20, r10
    720a:	5b 1d       	adc	r21, r11
    720c:	6c 1d       	adc	r22, r12
    720e:	7d 1d       	adc	r23, r13
    7210:	c4 01       	movw	r24, r8
    7212:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    7216:	89 2b       	or	r24, r25
    7218:	99 f4       	brne	.+38     	; 0x7240 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    721a:	f7 01       	movw	r30, r14
    721c:	ee 0f       	add	r30, r30
    721e:	ff 1f       	adc	r31, r31
    7220:	ee 0f       	add	r30, r30
    7222:	ff 1f       	adc	r31, r31
    7224:	f1 70       	andi	r31, 0x01	; 1
    7226:	e8 0d       	add	r30, r8
    7228:	f9 1d       	adc	r31, r9
    722a:	22 a9       	ldd	r18, Z+50	; 0x32
    722c:	33 a9       	ldd	r19, Z+51	; 0x33
    722e:	44 a9       	ldd	r20, Z+52	; 0x34
    7230:	55 a9       	ldd	r21, Z+53	; 0x35
    7232:	5f 70       	andi	r21, 0x0F	; 15
    7234:	09 c0       	rjmp	.+18     	; 0x7248 <get_fat+0x15e>
    7236:	21 e0       	ldi	r18, 0x01	; 1
    7238:	30 e0       	ldi	r19, 0x00	; 0
    723a:	40 e0       	ldi	r20, 0x00	; 0
    723c:	50 e0       	ldi	r21, 0x00	; 0
    723e:	04 c0       	rjmp	.+8      	; 0x7248 <get_fat+0x15e>
    7240:	2f ef       	ldi	r18, 0xFF	; 255
    7242:	3f ef       	ldi	r19, 0xFF	; 255
    7244:	4f ef       	ldi	r20, 0xFF	; 255
    7246:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    7248:	b9 01       	movw	r22, r18
    724a:	ca 01       	movw	r24, r20
    724c:	cd b7       	in	r28, 0x3d	; 61
    724e:	de b7       	in	r29, 0x3e	; 62
    7250:	ed e0       	ldi	r30, 0x0D	; 13
    7252:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <__epilogue_restores__+0xa>

00007256 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7256:	a0 e0       	ldi	r26, 0x00	; 0
    7258:	b0 e0       	ldi	r27, 0x00	; 0
    725a:	e1 e3       	ldi	r30, 0x31	; 49
    725c:	f9 e3       	ldi	r31, 0x39	; 57
    725e:	0c 94 ab 57 	jmp	0xaf56	; 0xaf56 <__prologue_saves__+0x10>
    7262:	5c 01       	movw	r10, r24
    7264:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7266:	dc 01       	movw	r26, r24
    7268:	14 96       	adiw	r26, 0x04	; 4
    726a:	6d 93       	st	X+, r22
    726c:	7c 93       	st	X, r23
    726e:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    7270:	16 96       	adiw	r26, 0x06	; 6
    7272:	4d 91       	ld	r20, X+
    7274:	5d 91       	ld	r21, X+
    7276:	6d 91       	ld	r22, X+
    7278:	7c 91       	ld	r23, X
    727a:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    727c:	41 30       	cpi	r20, 0x01	; 1
    727e:	51 05       	cpc	r21, r1
    7280:	61 05       	cpc	r22, r1
    7282:	71 05       	cpc	r23, r1
    7284:	09 f4       	brne	.+2      	; 0x7288 <dir_seek+0x32>
    7286:	d5 c0       	rjmp	.+426    	; 0x7432 <dir_seek+0x1dc>
    7288:	ed 91       	ld	r30, X+
    728a:	fc 91       	ld	r31, X
    728c:	86 8d       	ldd	r24, Z+30	; 0x1e
    728e:	97 8d       	ldd	r25, Z+31	; 0x1f
    7290:	a0 a1       	ldd	r26, Z+32	; 0x20
    7292:	b1 a1       	ldd	r27, Z+33	; 0x21
    7294:	48 17       	cp	r20, r24
    7296:	59 07       	cpc	r21, r25
    7298:	6a 07       	cpc	r22, r26
    729a:	7b 07       	cpc	r23, r27
    729c:	08 f0       	brcs	.+2      	; 0x72a0 <dir_seek+0x4a>
    729e:	c9 c0       	rjmp	.+402    	; 0x7432 <dir_seek+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    72a0:	41 15       	cp	r20, r1
    72a2:	51 05       	cpc	r21, r1
    72a4:	61 05       	cpc	r22, r1
    72a6:	71 05       	cpc	r23, r1
    72a8:	81 f5       	brne	.+96     	; 0x730a <dir_seek+0xb4>
    72aa:	80 81       	ld	r24, Z
    72ac:	83 30       	cpi	r24, 0x03	; 3
    72ae:	49 f4       	brne	.+18     	; 0x72c2 <dir_seek+0x6c>
		clst = dj->fs->dirbase;
    72b0:	46 a1       	ldd	r20, Z+38	; 0x26
    72b2:	57 a1       	ldd	r21, Z+39	; 0x27
    72b4:	60 a5       	ldd	r22, Z+40	; 0x28
    72b6:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    72b8:	41 15       	cp	r20, r1
    72ba:	51 05       	cpc	r21, r1
    72bc:	61 05       	cpc	r22, r1
    72be:	71 05       	cpc	r23, r1
    72c0:	21 f5       	brne	.+72     	; 0x730a <dir_seek+0xb4>
		dj->clust = clst;
    72c2:	f5 01       	movw	r30, r10
    72c4:	12 86       	std	Z+10, r1	; 0x0a
    72c6:	13 86       	std	Z+11, r1	; 0x0b
    72c8:	14 86       	std	Z+12, r1	; 0x0c
    72ca:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    72cc:	01 90       	ld	r0, Z+
    72ce:	f0 81       	ld	r31, Z
    72d0:	e0 2d       	mov	r30, r0
    72d2:	87 81       	ldd	r24, Z+7	; 0x07
    72d4:	90 85       	ldd	r25, Z+8	; 0x08
    72d6:	c8 16       	cp	r12, r24
    72d8:	d9 06       	cpc	r13, r25
    72da:	08 f0       	brcs	.+2      	; 0x72de <dir_seek+0x88>
    72dc:	aa c0       	rjmp	.+340    	; 0x7432 <dir_seek+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    72de:	c6 01       	movw	r24, r12
    72e0:	a4 e0       	ldi	r26, 0x04	; 4
    72e2:	96 95       	lsr	r25
    72e4:	87 95       	ror	r24
    72e6:	aa 95       	dec	r26
    72e8:	e1 f7       	brne	.-8      	; 0x72e2 <dir_seek+0x8c>
    72ea:	a0 e0       	ldi	r26, 0x00	; 0
    72ec:	b0 e0       	ldi	r27, 0x00	; 0
    72ee:	26 a1       	ldd	r18, Z+38	; 0x26
    72f0:	37 a1       	ldd	r19, Z+39	; 0x27
    72f2:	40 a5       	ldd	r20, Z+40	; 0x28
    72f4:	51 a5       	ldd	r21, Z+41	; 0x29
    72f6:	82 0f       	add	r24, r18
    72f8:	93 1f       	adc	r25, r19
    72fa:	a4 1f       	adc	r26, r20
    72fc:	b5 1f       	adc	r27, r21
    72fe:	f5 01       	movw	r30, r10
    7300:	86 87       	std	Z+14, r24	; 0x0e
    7302:	97 87       	std	Z+15, r25	; 0x0f
    7304:	a0 8b       	std	Z+16, r26	; 0x10
    7306:	b1 8b       	std	Z+17, r27	; 0x11
    7308:	7b c0       	rjmp	.+246    	; 0x7400 <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    730a:	82 81       	ldd	r24, Z+2	; 0x02
    730c:	08 2f       	mov	r16, r24
    730e:	10 e0       	ldi	r17, 0x00	; 0
    7310:	f4 e0       	ldi	r31, 0x04	; 4
    7312:	00 0f       	add	r16, r16
    7314:	11 1f       	adc	r17, r17
    7316:	fa 95       	dec	r31
    7318:	e1 f7       	brne	.-8      	; 0x7312 <dir_seek+0xbc>
    731a:	25 c0       	rjmp	.+74     	; 0x7366 <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    731c:	ce 01       	movw	r24, r28
    731e:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    7322:	ab 01       	movw	r20, r22
    7324:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7326:	4f 3f       	cpi	r20, 0xFF	; 255
    7328:	ff ef       	ldi	r31, 0xFF	; 255
    732a:	5f 07       	cpc	r21, r31
    732c:	ff ef       	ldi	r31, 0xFF	; 255
    732e:	6f 07       	cpc	r22, r31
    7330:	ff ef       	ldi	r31, 0xFF	; 255
    7332:	7f 07       	cpc	r23, r31
    7334:	19 f4       	brne	.+6      	; 0x733c <dir_seek+0xe6>
    7336:	21 e0       	ldi	r18, 0x01	; 1
    7338:	30 e0       	ldi	r19, 0x00	; 0
    733a:	7d c0       	rjmp	.+250    	; 0x7436 <dir_seek+0x1e0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    733c:	42 30       	cpi	r20, 0x02	; 2
    733e:	51 05       	cpc	r21, r1
    7340:	61 05       	cpc	r22, r1
    7342:	71 05       	cpc	r23, r1
    7344:	08 f4       	brcc	.+2      	; 0x7348 <dir_seek+0xf2>
    7346:	75 c0       	rjmp	.+234    	; 0x7432 <dir_seek+0x1dc>
    7348:	d5 01       	movw	r26, r10
    734a:	ed 91       	ld	r30, X+
    734c:	fc 91       	ld	r31, X
    734e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7350:	97 8d       	ldd	r25, Z+31	; 0x1f
    7352:	a0 a1       	ldd	r26, Z+32	; 0x20
    7354:	b1 a1       	ldd	r27, Z+33	; 0x21
    7356:	48 17       	cp	r20, r24
    7358:	59 07       	cpc	r21, r25
    735a:	6a 07       	cpc	r22, r26
    735c:	7b 07       	cpc	r23, r27
    735e:	08 f0       	brcs	.+2      	; 0x7362 <dir_seek+0x10c>
    7360:	68 c0       	rjmp	.+208    	; 0x7432 <dir_seek+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    7362:	c0 1a       	sub	r12, r16
    7364:	d1 0a       	sbc	r13, r17
    7366:	f5 01       	movw	r30, r10
    7368:	c0 81       	ld	r28, Z
    736a:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    736c:	c0 16       	cp	r12, r16
    736e:	d1 06       	cpc	r13, r17
    7370:	a8 f6       	brcc	.-86     	; 0x731c <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    7372:	d5 01       	movw	r26, r10
    7374:	1a 96       	adiw	r26, 0x0a	; 10
    7376:	4d 93       	st	X+, r20
    7378:	5d 93       	st	X+, r21
    737a:	6d 93       	st	X+, r22
    737c:	7c 93       	st	X, r23
    737e:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7380:	ee ef       	ldi	r30, 0xFE	; 254
    7382:	ee 2e       	mov	r14, r30
    7384:	ef ef       	ldi	r30, 0xFF	; 255
    7386:	fe 2e       	mov	r15, r30
    7388:	ef ef       	ldi	r30, 0xFF	; 255
    738a:	0e 2f       	mov	r16, r30
    738c:	ef ef       	ldi	r30, 0xFF	; 255
    738e:	1e 2f       	mov	r17, r30
    7390:	e4 0e       	add	r14, r20
    7392:	f5 1e       	adc	r15, r21
    7394:	06 1f       	adc	r16, r22
    7396:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7398:	8e 8d       	ldd	r24, Y+30	; 0x1e
    739a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    739c:	a8 a1       	ldd	r26, Y+32	; 0x20
    739e:	b9 a1       	ldd	r27, Y+33	; 0x21
    73a0:	02 97       	sbiw	r24, 0x02	; 2
    73a2:	a1 09       	sbc	r26, r1
    73a4:	b1 09       	sbc	r27, r1
    73a6:	e8 16       	cp	r14, r24
    73a8:	f9 06       	cpc	r15, r25
    73aa:	0a 07       	cpc	r16, r26
    73ac:	1b 07       	cpc	r17, r27
    73ae:	28 f0       	brcs	.+10     	; 0x73ba <dir_seek+0x164>
    73b0:	20 e0       	ldi	r18, 0x00	; 0
    73b2:	30 e0       	ldi	r19, 0x00	; 0
    73b4:	40 e0       	ldi	r20, 0x00	; 0
    73b6:	50 e0       	ldi	r21, 0x00	; 0
    73b8:	12 c0       	rjmp	.+36     	; 0x73de <dir_seek+0x188>
	return clst * fs->csize + fs->database;
    73ba:	2a 81       	ldd	r18, Y+2	; 0x02
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	40 e0       	ldi	r20, 0x00	; 0
    73c0:	50 e0       	ldi	r21, 0x00	; 0
    73c2:	c8 01       	movw	r24, r16
    73c4:	b7 01       	movw	r22, r14
    73c6:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    73ca:	9b 01       	movw	r18, r22
    73cc:	ac 01       	movw	r20, r24
    73ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    73d0:	9b a5       	ldd	r25, Y+43	; 0x2b
    73d2:	ac a5       	ldd	r26, Y+44	; 0x2c
    73d4:	bd a5       	ldd	r27, Y+45	; 0x2d
    73d6:	28 0f       	add	r18, r24
    73d8:	39 1f       	adc	r19, r25
    73da:	4a 1f       	adc	r20, r26
    73dc:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    73de:	c6 01       	movw	r24, r12
    73e0:	64 e0       	ldi	r22, 0x04	; 4
    73e2:	96 95       	lsr	r25
    73e4:	87 95       	ror	r24
    73e6:	6a 95       	dec	r22
    73e8:	e1 f7       	brne	.-8      	; 0x73e2 <dir_seek+0x18c>
    73ea:	a0 e0       	ldi	r26, 0x00	; 0
    73ec:	b0 e0       	ldi	r27, 0x00	; 0
    73ee:	28 0f       	add	r18, r24
    73f0:	39 1f       	adc	r19, r25
    73f2:	4a 1f       	adc	r20, r26
    73f4:	5b 1f       	adc	r21, r27
    73f6:	f5 01       	movw	r30, r10
    73f8:	26 87       	std	Z+14, r18	; 0x0e
    73fa:	37 87       	std	Z+15, r19	; 0x0f
    73fc:	40 8b       	std	Z+16, r20	; 0x10
    73fe:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    7400:	ff e0       	ldi	r31, 0x0F	; 15
    7402:	cf 22       	and	r12, r31
    7404:	dd 24       	eor	r13, r13
    7406:	45 e0       	ldi	r20, 0x05	; 5
    7408:	cc 0c       	add	r12, r12
    740a:	dd 1c       	adc	r13, r13
    740c:	4a 95       	dec	r20
    740e:	e1 f7       	brne	.-8      	; 0x7408 <dir_seek+0x1b2>
    7410:	82 e3       	ldi	r24, 0x32	; 50
    7412:	90 e0       	ldi	r25, 0x00	; 0
    7414:	c8 0e       	add	r12, r24
    7416:	d9 1e       	adc	r13, r25
    7418:	d5 01       	movw	r26, r10
    741a:	8d 91       	ld	r24, X+
    741c:	9c 91       	ld	r25, X
    741e:	11 97       	sbiw	r26, 0x01	; 1
    7420:	8c 0d       	add	r24, r12
    7422:	9d 1d       	adc	r25, r13
    7424:	52 96       	adiw	r26, 0x12	; 18
    7426:	8d 93       	st	X+, r24
    7428:	9c 93       	st	X, r25
    742a:	53 97       	sbiw	r26, 0x13	; 19
    742c:	20 e0       	ldi	r18, 0x00	; 0
    742e:	30 e0       	ldi	r19, 0x00	; 0
    7430:	02 c0       	rjmp	.+4      	; 0x7436 <dir_seek+0x1e0>

	return FR_OK;	/* Seek succeeded */
    7432:	22 e0       	ldi	r18, 0x02	; 2
    7434:	30 e0       	ldi	r19, 0x00	; 0
}
    7436:	c9 01       	movw	r24, r18
    7438:	cd b7       	in	r28, 0x3d	; 61
    743a:	de b7       	in	r29, 0x3e	; 62
    743c:	ea e0       	ldi	r30, 0x0A	; 10
    743e:	0c 94 c7 57 	jmp	0xaf8e	; 0xaf8e <__epilogue_restores__+0x10>

00007442 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7442:	a0 e0       	ldi	r26, 0x00	; 0
    7444:	b0 e0       	ldi	r27, 0x00	; 0
    7446:	e7 e2       	ldi	r30, 0x27	; 39
    7448:	fa e3       	ldi	r31, 0x3A	; 58
    744a:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    744e:	5c 01       	movw	r10, r24
    7450:	6a 01       	movw	r12, r20
    7452:	7b 01       	movw	r14, r22
    7454:	38 01       	movw	r6, r16
    7456:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    7458:	42 30       	cpi	r20, 0x02	; 2
    745a:	51 05       	cpc	r21, r1
    745c:	61 05       	cpc	r22, r1
    745e:	71 05       	cpc	r23, r1
    7460:	08 f4       	brcc	.+2      	; 0x7464 <put_fat+0x22>
    7462:	b1 c0       	rjmp	.+354    	; 0x75c6 <put_fat+0x184>
    7464:	f5 01       	movw	r30, r10
    7466:	86 8d       	ldd	r24, Z+30	; 0x1e
    7468:	97 8d       	ldd	r25, Z+31	; 0x1f
    746a:	a0 a1       	ldd	r26, Z+32	; 0x20
    746c:	b1 a1       	ldd	r27, Z+33	; 0x21
    746e:	48 17       	cp	r20, r24
    7470:	59 07       	cpc	r21, r25
    7472:	6a 07       	cpc	r22, r26
    7474:	7b 07       	cpc	r23, r27
    7476:	08 f0       	brcs	.+2      	; 0x747a <put_fat+0x38>
    7478:	a6 c0       	rjmp	.+332    	; 0x75c6 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    747a:	22 a0       	ldd	r2, Z+34	; 0x22
    747c:	33 a0       	ldd	r3, Z+35	; 0x23
    747e:	44 a0       	ldd	r4, Z+36	; 0x24
    7480:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
    7482:	80 81       	ld	r24, Z
    7484:	82 30       	cpi	r24, 0x02	; 2
    7486:	09 f4       	brne	.+2      	; 0x748a <put_fat+0x48>
    7488:	66 c0       	rjmp	.+204    	; 0x7556 <put_fat+0x114>
    748a:	83 30       	cpi	r24, 0x03	; 3
    748c:	09 f4       	brne	.+2      	; 0x7490 <put_fat+0x4e>
    748e:	7a c0       	rjmp	.+244    	; 0x7584 <put_fat+0x142>
    7490:	81 30       	cpi	r24, 0x01	; 1
    7492:	19 f0       	breq	.+6      	; 0x749a <put_fat+0x58>
    7494:	42 e0       	ldi	r20, 0x02	; 2
    7496:	50 e0       	ldi	r21, 0x00	; 0
    7498:	92 c0       	rjmp	.+292    	; 0x75be <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    749a:	ea 01       	movw	r28, r20
    749c:	d6 95       	lsr	r29
    749e:	c7 95       	ror	r28
    74a0:	c4 0f       	add	r28, r20
    74a2:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    74a4:	ae 01       	movw	r20, r28
    74a6:	45 2f       	mov	r20, r21
    74a8:	55 27       	eor	r21, r21
    74aa:	46 95       	lsr	r20
    74ac:	60 e0       	ldi	r22, 0x00	; 0
    74ae:	70 e0       	ldi	r23, 0x00	; 0
    74b0:	42 0d       	add	r20, r2
    74b2:	53 1d       	adc	r21, r3
    74b4:	64 1d       	adc	r22, r4
    74b6:	75 1d       	adc	r23, r5
    74b8:	c5 01       	movw	r24, r10
    74ba:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    74be:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    74c0:	00 97       	sbiw	r24, 0x00	; 0
    74c2:	09 f0       	breq	.+2      	; 0x74c6 <put_fat+0x84>
    74c4:	7c c0       	rjmp	.+248    	; 0x75be <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    74c6:	de 01       	movw	r26, r28
    74c8:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    74ca:	86 01       	movw	r16, r12
    74cc:	01 70       	andi	r16, 0x01	; 1
    74ce:	10 70       	andi	r17, 0x00	; 0
    74d0:	01 15       	cp	r16, r1
    74d2:	11 05       	cpc	r17, r1
    74d4:	51 f0       	breq	.+20     	; 0x74ea <put_fat+0xa8>
    74d6:	f5 01       	movw	r30, r10
    74d8:	ea 0f       	add	r30, r26
    74da:	fb 1f       	adc	r31, r27
    74dc:	82 a9       	ldd	r24, Z+50	; 0x32
    74de:	8f 70       	andi	r24, 0x0F	; 15
    74e0:	96 2d       	mov	r25, r6
    74e2:	92 95       	swap	r25
    74e4:	90 7f       	andi	r25, 0xF0	; 240
    74e6:	98 2b       	or	r25, r24
    74e8:	01 c0       	rjmp	.+2      	; 0x74ec <put_fat+0xaa>
    74ea:	96 2d       	mov	r25, r6
    74ec:	aa 0d       	add	r26, r10
    74ee:	bb 1d       	adc	r27, r11
    74f0:	d2 96       	adiw	r26, 0x32	; 50
    74f2:	9c 93       	st	X, r25
			bc++;
    74f4:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    74f6:	81 e0       	ldi	r24, 0x01	; 1
    74f8:	f5 01       	movw	r30, r10
    74fa:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    74fc:	ae 01       	movw	r20, r28
    74fe:	45 2f       	mov	r20, r21
    7500:	55 27       	eor	r21, r21
    7502:	46 95       	lsr	r20
    7504:	60 e0       	ldi	r22, 0x00	; 0
    7506:	70 e0       	ldi	r23, 0x00	; 0
    7508:	42 0d       	add	r20, r2
    750a:	53 1d       	adc	r21, r3
    750c:	64 1d       	adc	r22, r4
    750e:	75 1d       	adc	r23, r5
    7510:	c5 01       	movw	r24, r10
    7512:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    7516:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7518:	00 97       	sbiw	r24, 0x00	; 0
    751a:	09 f0       	breq	.+2      	; 0x751e <put_fat+0xdc>
    751c:	50 c0       	rjmp	.+160    	; 0x75be <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    751e:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7520:	01 15       	cp	r16, r1
    7522:	11 05       	cpc	r17, r1
    7524:	49 f0       	breq	.+18     	; 0x7538 <put_fat+0xf6>
    7526:	64 e0       	ldi	r22, 0x04	; 4
    7528:	96 94       	lsr	r9
    752a:	87 94       	ror	r8
    752c:	77 94       	ror	r7
    752e:	67 94       	ror	r6
    7530:	6a 95       	dec	r22
    7532:	d1 f7       	brne	.-12     	; 0x7528 <put_fat+0xe6>
    7534:	66 2d       	mov	r22, r6
    7536:	0b c0       	rjmp	.+22     	; 0x754e <put_fat+0x10c>
    7538:	f5 01       	movw	r30, r10
    753a:	ec 0f       	add	r30, r28
    753c:	fd 1f       	adc	r31, r29
    753e:	62 a9       	ldd	r22, Z+50	; 0x32
    7540:	60 7f       	andi	r22, 0xF0	; 240
    7542:	bb 27       	eor	r27, r27
    7544:	a9 2d       	mov	r26, r9
    7546:	98 2d       	mov	r25, r8
    7548:	87 2d       	mov	r24, r7
    754a:	8f 70       	andi	r24, 0x0F	; 15
    754c:	68 2b       	or	r22, r24
    754e:	ca 0d       	add	r28, r10
    7550:	db 1d       	adc	r29, r11
    7552:	6a ab       	std	Y+50, r22	; 0x32
    7554:	34 c0       	rjmp	.+104    	; 0x75be <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    7556:	45 2f       	mov	r20, r21
    7558:	56 2f       	mov	r21, r22
    755a:	67 2f       	mov	r22, r23
    755c:	77 27       	eor	r23, r23
    755e:	42 0d       	add	r20, r2
    7560:	53 1d       	adc	r21, r3
    7562:	64 1d       	adc	r22, r4
    7564:	75 1d       	adc	r23, r5
    7566:	c5 01       	movw	r24, r10
    7568:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    756c:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    756e:	00 97       	sbiw	r24, 0x00	; 0
    7570:	31 f5       	brne	.+76     	; 0x75be <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    7572:	f6 01       	movw	r30, r12
    7574:	ee 0f       	add	r30, r30
    7576:	ff 1f       	adc	r31, r31
    7578:	f1 70       	andi	r31, 0x01	; 1
    757a:	ea 0d       	add	r30, r10
    757c:	fb 1d       	adc	r31, r11
    757e:	62 aa       	std	Z+50, r6	; 0x32
    7580:	73 aa       	std	Z+51, r7	; 0x33
    7582:	1d c0       	rjmp	.+58     	; 0x75be <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    7584:	87 e0       	ldi	r24, 0x07	; 7
    7586:	76 95       	lsr	r23
    7588:	67 95       	ror	r22
    758a:	57 95       	ror	r21
    758c:	47 95       	ror	r20
    758e:	8a 95       	dec	r24
    7590:	d1 f7       	brne	.-12     	; 0x7586 <put_fat+0x144>
    7592:	42 0d       	add	r20, r2
    7594:	53 1d       	adc	r21, r3
    7596:	64 1d       	adc	r22, r4
    7598:	75 1d       	adc	r23, r5
    759a:	c5 01       	movw	r24, r10
    759c:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    75a0:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    75a2:	00 97       	sbiw	r24, 0x00	; 0
    75a4:	61 f4       	brne	.+24     	; 0x75be <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    75a6:	f6 01       	movw	r30, r12
    75a8:	ee 0f       	add	r30, r30
    75aa:	ff 1f       	adc	r31, r31
    75ac:	ee 0f       	add	r30, r30
    75ae:	ff 1f       	adc	r31, r31
    75b0:	f1 70       	andi	r31, 0x01	; 1
    75b2:	ea 0d       	add	r30, r10
    75b4:	fb 1d       	adc	r31, r11
    75b6:	62 aa       	std	Z+50, r6	; 0x32
    75b8:	73 aa       	std	Z+51, r7	; 0x33
    75ba:	84 aa       	std	Z+52, r8	; 0x34
    75bc:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    75be:	81 e0       	ldi	r24, 0x01	; 1
    75c0:	f5 01       	movw	r30, r10
    75c2:	84 83       	std	Z+4, r24	; 0x04
    75c4:	02 c0       	rjmp	.+4      	; 0x75ca <put_fat+0x188>
    75c6:	42 e0       	ldi	r20, 0x02	; 2
    75c8:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    75ca:	ca 01       	movw	r24, r20
    75cc:	cd b7       	in	r28, 0x3d	; 61
    75ce:	de b7       	in	r29, 0x3e	; 62
    75d0:	e2 e1       	ldi	r30, 0x12	; 18
    75d2:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

000075d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    75d6:	a4 e0       	ldi	r26, 0x04	; 4
    75d8:	b0 e0       	ldi	r27, 0x00	; 0
    75da:	e1 ef       	ldi	r30, 0xF1	; 241
    75dc:	fa e3       	ldi	r31, 0x3A	; 58
    75de:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    75e2:	1c 01       	movw	r2, r24
    75e4:	2a 01       	movw	r4, r20
    75e6:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    75e8:	dc 01       	movw	r26, r24
    75ea:	5e 96       	adiw	r26, 0x1e	; 30
    75ec:	8d 91       	ld	r24, X+
    75ee:	9d 91       	ld	r25, X+
    75f0:	0d 90       	ld	r0, X+
    75f2:	bc 91       	ld	r27, X
    75f4:	a0 2d       	mov	r26, r0
    75f6:	89 83       	std	Y+1, r24	; 0x01
    75f8:	9a 83       	std	Y+2, r25	; 0x02
    75fa:	ab 83       	std	Y+3, r26	; 0x03
    75fc:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    75fe:	41 15       	cp	r20, r1
    7600:	51 05       	cpc	r21, r1
    7602:	61 05       	cpc	r22, r1
    7604:	71 05       	cpc	r23, r1
    7606:	81 f4       	brne	.+32     	; 0x7628 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    7608:	f1 01       	movw	r30, r2
    760a:	82 84       	ldd	r8, Z+10	; 0x0a
    760c:	93 84       	ldd	r9, Z+11	; 0x0b
    760e:	a4 84       	ldd	r10, Z+12	; 0x0c
    7610:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    7612:	81 14       	cp	r8, r1
    7614:	91 04       	cpc	r9, r1
    7616:	a1 04       	cpc	r10, r1
    7618:	b1 04       	cpc	r11, r1
    761a:	11 f1       	breq	.+68     	; 0x7660 <create_chain+0x8a>
    761c:	88 16       	cp	r8, r24
    761e:	99 06       	cpc	r9, r25
    7620:	aa 06       	cpc	r10, r26
    7622:	bb 06       	cpc	r11, r27
    7624:	e8 f4       	brcc	.+58     	; 0x7660 <create_chain+0x8a>
    7626:	21 c0       	rjmp	.+66     	; 0x766a <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7628:	c1 01       	movw	r24, r2
    762a:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    762e:	9b 01       	movw	r18, r22
    7630:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7632:	62 30       	cpi	r22, 0x02	; 2
    7634:	71 05       	cpc	r23, r1
    7636:	81 05       	cpc	r24, r1
    7638:	91 05       	cpc	r25, r1
    763a:	28 f4       	brcc	.+10     	; 0x7646 <create_chain+0x70>
    763c:	21 e0       	ldi	r18, 0x01	; 1
    763e:	30 e0       	ldi	r19, 0x00	; 0
    7640:	40 e0       	ldi	r20, 0x00	; 0
    7642:	50 e0       	ldi	r21, 0x00	; 0
    7644:	93 c0       	rjmp	.+294    	; 0x776c <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    7646:	89 81       	ldd	r24, Y+1	; 0x01
    7648:	9a 81       	ldd	r25, Y+2	; 0x02
    764a:	ab 81       	ldd	r26, Y+3	; 0x03
    764c:	bc 81       	ldd	r27, Y+4	; 0x04
    764e:	28 17       	cp	r18, r24
    7650:	39 07       	cpc	r19, r25
    7652:	4a 07       	cpc	r20, r26
    7654:	5b 07       	cpc	r21, r27
    7656:	08 f4       	brcc	.+2      	; 0x765a <create_chain+0x84>
    7658:	89 c0       	rjmp	.+274    	; 0x776c <create_chain+0x196>
    765a:	53 01       	movw	r10, r6
    765c:	42 01       	movw	r8, r4
    765e:	05 c0       	rjmp	.+10     	; 0x766a <create_chain+0x94>
    7660:	b1 e0       	ldi	r27, 0x01	; 1
    7662:	8b 2e       	mov	r8, r27
    7664:	91 2c       	mov	r9, r1
    7666:	a1 2c       	mov	r10, r1
    7668:	b1 2c       	mov	r11, r1
    766a:	75 01       	movw	r14, r10
    766c:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    766e:	08 94       	sec
    7670:	c1 1c       	adc	r12, r1
    7672:	d1 1c       	adc	r13, r1
    7674:	e1 1c       	adc	r14, r1
    7676:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    7678:	89 81       	ldd	r24, Y+1	; 0x01
    767a:	9a 81       	ldd	r25, Y+2	; 0x02
    767c:	ab 81       	ldd	r26, Y+3	; 0x03
    767e:	bc 81       	ldd	r27, Y+4	; 0x04
    7680:	c8 16       	cp	r12, r24
    7682:	d9 06       	cpc	r13, r25
    7684:	ea 06       	cpc	r14, r26
    7686:	fb 06       	cpc	r15, r27
    7688:	60 f0       	brcs	.+24     	; 0x76a2 <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    768a:	92 e0       	ldi	r25, 0x02	; 2
    768c:	89 16       	cp	r8, r25
    768e:	91 04       	cpc	r9, r1
    7690:	a1 04       	cpc	r10, r1
    7692:	b1 04       	cpc	r11, r1
    7694:	08 f4       	brcc	.+2      	; 0x7698 <create_chain+0xc2>
    7696:	61 c0       	rjmp	.+194    	; 0x775a <create_chain+0x184>
    7698:	a2 e0       	ldi	r26, 0x02	; 2
    769a:	ca 2e       	mov	r12, r26
    769c:	d1 2c       	mov	r13, r1
    769e:	e1 2c       	mov	r14, r1
    76a0:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    76a2:	c1 01       	movw	r24, r2
    76a4:	b7 01       	movw	r22, r14
    76a6:	a6 01       	movw	r20, r12
    76a8:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    76ac:	9b 01       	movw	r18, r22
    76ae:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    76b0:	61 15       	cp	r22, r1
    76b2:	71 05       	cpc	r23, r1
    76b4:	81 05       	cpc	r24, r1
    76b6:	91 05       	cpc	r25, r1
    76b8:	a9 f0       	breq	.+42     	; 0x76e4 <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    76ba:	6f 3f       	cpi	r22, 0xFF	; 255
    76bc:	af ef       	ldi	r26, 0xFF	; 255
    76be:	7a 07       	cpc	r23, r26
    76c0:	af ef       	ldi	r26, 0xFF	; 255
    76c2:	8a 07       	cpc	r24, r26
    76c4:	af ef       	ldi	r26, 0xFF	; 255
    76c6:	9a 07       	cpc	r25, r26
    76c8:	09 f4       	brne	.+2      	; 0x76cc <create_chain+0xf6>
    76ca:	50 c0       	rjmp	.+160    	; 0x776c <create_chain+0x196>
    76cc:	61 30       	cpi	r22, 0x01	; 1
    76ce:	71 05       	cpc	r23, r1
    76d0:	81 05       	cpc	r24, r1
    76d2:	91 05       	cpc	r25, r1
    76d4:	09 f4       	brne	.+2      	; 0x76d8 <create_chain+0x102>
    76d6:	4a c0       	rjmp	.+148    	; 0x776c <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    76d8:	c8 14       	cp	r12, r8
    76da:	d9 04       	cpc	r13, r9
    76dc:	ea 04       	cpc	r14, r10
    76de:	fb 04       	cpc	r15, r11
    76e0:	31 f6       	brne	.-116    	; 0x766e <create_chain+0x98>
    76e2:	3b c0       	rjmp	.+118    	; 0x775a <create_chain+0x184>
    76e4:	bc 2c       	mov	r11, r12
    76e6:	ad 2c       	mov	r10, r13
    76e8:	9e 2c       	mov	r9, r14
    76ea:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    76ec:	c1 01       	movw	r24, r2
    76ee:	a6 01       	movw	r20, r12
    76f0:	b7 01       	movw	r22, r14
    76f2:	0f ef       	ldi	r16, 0xFF	; 255
    76f4:	1f ef       	ldi	r17, 0xFF	; 255
    76f6:	2f ef       	ldi	r18, 0xFF	; 255
    76f8:	3f e0       	ldi	r19, 0x0F	; 15
    76fa:	0e 94 21 3a 	call	0x7442	; 0x7442 <put_fat>
    76fe:	89 2b       	or	r24, r25
    7700:	89 f5       	brne	.+98     	; 0x7764 <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    7702:	41 14       	cp	r4, r1
    7704:	51 04       	cpc	r5, r1
    7706:	61 04       	cpc	r6, r1
    7708:	71 04       	cpc	r7, r1
    770a:	49 f0       	breq	.+18     	; 0x771e <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    770c:	c1 01       	movw	r24, r2
    770e:	b3 01       	movw	r22, r6
    7710:	a2 01       	movw	r20, r4
    7712:	86 01       	movw	r16, r12
    7714:	97 01       	movw	r18, r14
    7716:	0e 94 21 3a 	call	0x7442	; 0x7442 <put_fat>
    771a:	89 2b       	or	r24, r25
    771c:	19 f5       	brne	.+70     	; 0x7764 <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    771e:	f1 01       	movw	r30, r2
    7720:	b2 86       	std	Z+10, r11	; 0x0a
    7722:	a3 86       	std	Z+11, r10	; 0x0b
    7724:	94 86       	std	Z+12, r9	; 0x0c
    7726:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    7728:	86 85       	ldd	r24, Z+14	; 0x0e
    772a:	97 85       	ldd	r25, Z+15	; 0x0f
    772c:	a0 89       	ldd	r26, Z+16	; 0x10
    772e:	b1 89       	ldd	r27, Z+17	; 0x11
    7730:	8f 3f       	cpi	r24, 0xFF	; 255
    7732:	ff ef       	ldi	r31, 0xFF	; 255
    7734:	9f 07       	cpc	r25, r31
    7736:	ff ef       	ldi	r31, 0xFF	; 255
    7738:	af 07       	cpc	r26, r31
    773a:	ff ef       	ldi	r31, 0xFF	; 255
    773c:	bf 07       	cpc	r27, r31
    773e:	51 f0       	breq	.+20     	; 0x7754 <create_chain+0x17e>
		fs->free_clust--;
    7740:	01 97       	sbiw	r24, 0x01	; 1
    7742:	a1 09       	sbc	r26, r1
    7744:	b1 09       	sbc	r27, r1
    7746:	f1 01       	movw	r30, r2
    7748:	86 87       	std	Z+14, r24	; 0x0e
    774a:	97 87       	std	Z+15, r25	; 0x0f
    774c:	a0 8b       	std	Z+16, r26	; 0x10
    774e:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    7750:	81 e0       	ldi	r24, 0x01	; 1
    7752:	81 87       	std	Z+9, r24	; 0x09
    7754:	a7 01       	movw	r20, r14
    7756:	96 01       	movw	r18, r12
    7758:	09 c0       	rjmp	.+18     	; 0x776c <create_chain+0x196>
    775a:	20 e0       	ldi	r18, 0x00	; 0
    775c:	30 e0       	ldi	r19, 0x00	; 0
    775e:	40 e0       	ldi	r20, 0x00	; 0
    7760:	50 e0       	ldi	r21, 0x00	; 0
    7762:	04 c0       	rjmp	.+8      	; 0x776c <create_chain+0x196>
    7764:	2f ef       	ldi	r18, 0xFF	; 255
    7766:	3f ef       	ldi	r19, 0xFF	; 255
    7768:	4f ef       	ldi	r20, 0xFF	; 255
    776a:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    776c:	b9 01       	movw	r22, r18
    776e:	ca 01       	movw	r24, r20
    7770:	24 96       	adiw	r28, 0x04	; 4
    7772:	e2 e1       	ldi	r30, 0x12	; 18
    7774:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

00007778 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    7778:	a6 e0       	ldi	r26, 0x06	; 6
    777a:	b0 e0       	ldi	r27, 0x00	; 0
    777c:	e2 ec       	ldi	r30, 0xC2	; 194
    777e:	fb e3       	ldi	r31, 0x3B	; 59
    7780:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    7784:	8d 83       	std	Y+5, r24	; 0x05
    7786:	9e 83       	std	Y+6, r25	; 0x06
    7788:	3a 01       	movw	r6, r20
    778a:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    778c:	dc 01       	movw	r26, r24
    778e:	12 96       	adiw	r26, 0x02	; 2
    7790:	6d 91       	ld	r22, X+
    7792:	7c 91       	ld	r23, X
    7794:	13 97       	sbiw	r26, 0x03	; 3
    7796:	8d 91       	ld	r24, X+
    7798:	9c 91       	ld	r25, X
    779a:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <validate>
    779e:	8b 83       	std	Y+3, r24	; 0x03
    77a0:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    77a2:	89 2b       	or	r24, r25
    77a4:	09 f0       	breq	.+2      	; 0x77a8 <f_lseek+0x30>
    77a6:	c7 c1       	rjmp	.+910    	; 0x7b36 <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    77a8:	ed 81       	ldd	r30, Y+5	; 0x05
    77aa:	fe 81       	ldd	r31, Y+6	; 0x06
    77ac:	84 81       	ldd	r24, Z+4	; 0x04
    77ae:	87 fd       	sbrc	r24, 7
    77b0:	92 c0       	rjmp	.+292    	; 0x78d6 <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    77b2:	ad 81       	ldd	r26, Y+5	; 0x05
    77b4:	be 81       	ldd	r27, Y+6	; 0x06
    77b6:	1a 96       	adiw	r26, 0x0a	; 10
    77b8:	ad 90       	ld	r10, X+
    77ba:	bd 90       	ld	r11, X+
    77bc:	cd 90       	ld	r12, X+
    77be:	dc 90       	ld	r13, X
    77c0:	1d 97       	sbiw	r26, 0x0d	; 13
    77c2:	a6 14       	cp	r10, r6
    77c4:	b7 04       	cpc	r11, r7
    77c6:	c8 04       	cpc	r12, r8
    77c8:	d9 04       	cpc	r13, r9
    77ca:	10 f4       	brcc	.+4      	; 0x77d0 <f_lseek+0x58>
    77cc:	81 ff       	sbrs	r24, 1
    77ce:	02 c0       	rjmp	.+4      	; 0x77d4 <f_lseek+0x5c>
    77d0:	64 01       	movw	r12, r8
    77d2:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    77d4:	ed 81       	ldd	r30, Y+5	; 0x05
    77d6:	fe 81       	ldd	r31, Y+6	; 0x06
    77d8:	26 81       	ldd	r18, Z+6	; 0x06
    77da:	37 81       	ldd	r19, Z+7	; 0x07
    77dc:	40 85       	ldd	r20, Z+8	; 0x08
    77de:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    77e0:	16 82       	std	Z+6, r1	; 0x06
    77e2:	17 82       	std	Z+7, r1	; 0x07
    77e4:	10 86       	std	Z+8, r1	; 0x08
    77e6:	11 86       	std	Z+9, r1	; 0x09
    77e8:	8f ef       	ldi	r24, 0xFF	; 255
    77ea:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    77ec:	a1 14       	cp	r10, r1
    77ee:	b1 04       	cpc	r11, r1
    77f0:	c1 04       	cpc	r12, r1
    77f2:	d1 04       	cpc	r13, r1
    77f4:	09 f4       	brne	.+2      	; 0x77f8 <f_lseek+0x80>
    77f6:	6b c1       	rjmp	.+726    	; 0x7ace <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    77f8:	01 90       	ld	r0, Z+
    77fa:	f0 81       	ld	r31, Z
    77fc:	e0 2d       	mov	r30, r0
    77fe:	e9 83       	std	Y+1, r30	; 0x01
    7800:	fa 83       	std	Y+2, r31	; 0x02
    7802:	82 81       	ldd	r24, Z+2	; 0x02
    7804:	68 2e       	mov	r6, r24
    7806:	77 24       	eor	r7, r7
    7808:	88 24       	eor	r8, r8
    780a:	99 24       	eor	r9, r9
    780c:	69 e0       	ldi	r22, 0x09	; 9
    780e:	66 0c       	add	r6, r6
    7810:	77 1c       	adc	r7, r7
    7812:	88 1c       	adc	r8, r8
    7814:	99 1c       	adc	r9, r9
    7816:	6a 95       	dec	r22
    7818:	d1 f7       	brne	.-12     	; 0x780e <f_lseek+0x96>
		if (ifptr > 0 &&
    781a:	21 15       	cp	r18, r1
    781c:	31 05       	cpc	r19, r1
    781e:	41 05       	cpc	r20, r1
    7820:	51 05       	cpc	r21, r1
    7822:	c1 f1       	breq	.+112    	; 0x7894 <f_lseek+0x11c>
    7824:	19 01       	movw	r2, r18
    7826:	2a 01       	movw	r4, r20
    7828:	08 94       	sec
    782a:	21 08       	sbc	r2, r1
    782c:	31 08       	sbc	r3, r1
    782e:	41 08       	sbc	r4, r1
    7830:	51 08       	sbc	r5, r1
    7832:	c6 01       	movw	r24, r12
    7834:	b5 01       	movw	r22, r10
    7836:	61 50       	subi	r22, 0x01	; 1
    7838:	70 40       	sbci	r23, 0x00	; 0
    783a:	80 40       	sbci	r24, 0x00	; 0
    783c:	90 40       	sbci	r25, 0x00	; 0
    783e:	a4 01       	movw	r20, r8
    7840:	93 01       	movw	r18, r6
    7842:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    7846:	79 01       	movw	r14, r18
    7848:	8a 01       	movw	r16, r20
    784a:	c2 01       	movw	r24, r4
    784c:	b1 01       	movw	r22, r2
    784e:	a4 01       	movw	r20, r8
    7850:	93 01       	movw	r18, r6
    7852:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    7856:	e2 16       	cp	r14, r18
    7858:	f3 06       	cpc	r15, r19
    785a:	04 07       	cpc	r16, r20
    785c:	15 07       	cpc	r17, r21
    785e:	d0 f0       	brcs	.+52     	; 0x7894 <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    7860:	88 27       	eor	r24, r24
    7862:	99 27       	eor	r25, r25
    7864:	dc 01       	movw	r26, r24
    7866:	86 19       	sub	r24, r6
    7868:	97 09       	sbc	r25, r7
    786a:	a8 09       	sbc	r26, r8
    786c:	b9 09       	sbc	r27, r9
    786e:	82 21       	and	r24, r2
    7870:	93 21       	and	r25, r3
    7872:	a4 21       	and	r26, r4
    7874:	b5 21       	and	r27, r5
    7876:	ed 81       	ldd	r30, Y+5	; 0x05
    7878:	fe 81       	ldd	r31, Y+6	; 0x06
    787a:	86 83       	std	Z+6, r24	; 0x06
    787c:	97 83       	std	Z+7, r25	; 0x07
    787e:	a0 87       	std	Z+8, r26	; 0x08
    7880:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    7882:	a8 1a       	sub	r10, r24
    7884:	b9 0a       	sbc	r11, r25
    7886:	ca 0a       	sbc	r12, r26
    7888:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    788a:	42 89       	ldd	r20, Z+18	; 0x12
    788c:	53 89       	ldd	r21, Z+19	; 0x13
    788e:	64 89       	ldd	r22, Z+20	; 0x14
    7890:	75 89       	ldd	r23, Z+21	; 0x15
    7892:	47 c0       	rjmp	.+142    	; 0x7922 <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    7894:	ad 81       	ldd	r26, Y+5	; 0x05
    7896:	be 81       	ldd	r27, Y+6	; 0x06
    7898:	1e 96       	adiw	r26, 0x0e	; 14
    789a:	4d 91       	ld	r20, X+
    789c:	5d 91       	ld	r21, X+
    789e:	6d 91       	ld	r22, X+
    78a0:	7c 91       	ld	r23, X
    78a2:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    78a4:	41 15       	cp	r20, r1
    78a6:	51 05       	cpc	r21, r1
    78a8:	61 05       	cpc	r22, r1
    78aa:	71 05       	cpc	r23, r1
    78ac:	a1 f5       	brne	.+104    	; 0x7916 <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    78ae:	89 81       	ldd	r24, Y+1	; 0x01
    78b0:	9a 81       	ldd	r25, Y+2	; 0x02
    78b2:	40 e0       	ldi	r20, 0x00	; 0
    78b4:	50 e0       	ldi	r21, 0x00	; 0
    78b6:	60 e0       	ldi	r22, 0x00	; 0
    78b8:	70 e0       	ldi	r23, 0x00	; 0
    78ba:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <create_chain>
    78be:	ab 01       	movw	r20, r22
    78c0:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    78c2:	41 30       	cpi	r20, 0x01	; 1
    78c4:	51 05       	cpc	r21, r1
    78c6:	61 05       	cpc	r22, r1
    78c8:	71 05       	cpc	r23, r1
    78ca:	51 f4       	brne	.+20     	; 0x78e0 <f_lseek+0x168>
    78cc:	ed 81       	ldd	r30, Y+5	; 0x05
    78ce:	fe 81       	ldd	r31, Y+6	; 0x06
    78d0:	84 81       	ldd	r24, Z+4	; 0x04
    78d2:	80 68       	ori	r24, 0x80	; 128
    78d4:	84 83       	std	Z+4, r24	; 0x04
    78d6:	82 e0       	ldi	r24, 0x02	; 2
    78d8:	90 e0       	ldi	r25, 0x00	; 0
    78da:	8b 83       	std	Y+3, r24	; 0x03
    78dc:	9c 83       	std	Y+4, r25	; 0x04
    78de:	2b c1       	rjmp	.+598    	; 0x7b36 <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    78e0:	4f 3f       	cpi	r20, 0xFF	; 255
    78e2:	9f ef       	ldi	r25, 0xFF	; 255
    78e4:	59 07       	cpc	r21, r25
    78e6:	9f ef       	ldi	r25, 0xFF	; 255
    78e8:	69 07       	cpc	r22, r25
    78ea:	9f ef       	ldi	r25, 0xFF	; 255
    78ec:	79 07       	cpc	r23, r25
    78ee:	59 f4       	brne	.+22     	; 0x7906 <f_lseek+0x18e>
    78f0:	ad 81       	ldd	r26, Y+5	; 0x05
    78f2:	be 81       	ldd	r27, Y+6	; 0x06
    78f4:	14 96       	adiw	r26, 0x04	; 4
    78f6:	8c 91       	ld	r24, X
    78f8:	14 97       	sbiw	r26, 0x04	; 4
    78fa:	80 68       	ori	r24, 0x80	; 128
    78fc:	14 96       	adiw	r26, 0x04	; 4
    78fe:	8c 93       	st	X, r24
    7900:	e1 e0       	ldi	r30, 0x01	; 1
    7902:	f0 e0       	ldi	r31, 0x00	; 0
    7904:	d7 c0       	rjmp	.+430    	; 0x7ab4 <f_lseek+0x33c>
				fp->org_clust = clst;
    7906:	ad 81       	ldd	r26, Y+5	; 0x05
    7908:	be 81       	ldd	r27, Y+6	; 0x06
    790a:	1e 96       	adiw	r26, 0x0e	; 14
    790c:	4d 93       	st	X+, r20
    790e:	5d 93       	st	X+, r21
    7910:	6d 93       	st	X+, r22
    7912:	7c 93       	st	X, r23
    7914:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    7916:	ed 81       	ldd	r30, Y+5	; 0x05
    7918:	fe 81       	ldd	r31, Y+6	; 0x06
    791a:	42 8b       	std	Z+18, r20	; 0x12
    791c:	53 8b       	std	Z+19, r21	; 0x13
    791e:	64 8b       	std	Z+20, r22	; 0x14
    7920:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    7922:	41 15       	cp	r20, r1
    7924:	51 05       	cpc	r21, r1
    7926:	61 05       	cpc	r22, r1
    7928:	71 05       	cpc	r23, r1
    792a:	09 f0       	breq	.+2      	; 0x792e <f_lseek+0x1b6>
    792c:	59 c0       	rjmp	.+178    	; 0x79e0 <f_lseek+0x268>
    792e:	cf c0       	rjmp	.+414    	; 0x7ace <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    7930:	ad 81       	ldd	r26, Y+5	; 0x05
    7932:	be 81       	ldd	r27, Y+6	; 0x06
    7934:	14 96       	adiw	r26, 0x04	; 4
    7936:	8c 91       	ld	r24, X
    7938:	14 97       	sbiw	r26, 0x04	; 4
    793a:	2d 91       	ld	r18, X+
    793c:	3c 91       	ld	r19, X
    793e:	81 ff       	sbrs	r24, 1
    7940:	0d c0       	rjmp	.+26     	; 0x795c <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    7942:	c9 01       	movw	r24, r18
    7944:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <create_chain>
    7948:	ab 01       	movw	r20, r22
    794a:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    794c:	41 15       	cp	r20, r1
    794e:	51 05       	cpc	r21, r1
    7950:	61 05       	cpc	r22, r1
    7952:	71 05       	cpc	r23, r1
    7954:	41 f4       	brne	.+16     	; 0x7966 <f_lseek+0x1ee>
    7956:	64 01       	movw	r12, r8
    7958:	53 01       	movw	r10, r6
    795a:	48 c0       	rjmp	.+144    	; 0x79ec <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    795c:	c9 01       	movw	r24, r18
    795e:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    7962:	ab 01       	movw	r20, r22
    7964:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7966:	4f 3f       	cpi	r20, 0xFF	; 255
    7968:	bf ef       	ldi	r27, 0xFF	; 255
    796a:	5b 07       	cpc	r21, r27
    796c:	bf ef       	ldi	r27, 0xFF	; 255
    796e:	6b 07       	cpc	r22, r27
    7970:	bf ef       	ldi	r27, 0xFF	; 255
    7972:	7b 07       	cpc	r23, r27
    7974:	41 f4       	brne	.+16     	; 0x7986 <f_lseek+0x20e>
    7976:	ed 81       	ldd	r30, Y+5	; 0x05
    7978:	fe 81       	ldd	r31, Y+6	; 0x06
    797a:	84 81       	ldd	r24, Z+4	; 0x04
    797c:	80 68       	ori	r24, 0x80	; 128
    797e:	84 83       	std	Z+4, r24	; 0x04
    7980:	81 e0       	ldi	r24, 0x01	; 1
    7982:	90 e0       	ldi	r25, 0x00	; 0
    7984:	aa cf       	rjmp	.-172    	; 0x78da <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    7986:	42 30       	cpi	r20, 0x02	; 2
    7988:	51 05       	cpc	r21, r1
    798a:	61 05       	cpc	r22, r1
    798c:	71 05       	cpc	r23, r1
    798e:	08 f4       	brcc	.+2      	; 0x7992 <f_lseek+0x21a>
    7990:	9d cf       	rjmp	.-198    	; 0x78cc <f_lseek+0x154>
    7992:	ad 81       	ldd	r26, Y+5	; 0x05
    7994:	be 81       	ldd	r27, Y+6	; 0x06
    7996:	ed 91       	ld	r30, X+
    7998:	fc 91       	ld	r31, X
    799a:	86 8d       	ldd	r24, Z+30	; 0x1e
    799c:	97 8d       	ldd	r25, Z+31	; 0x1f
    799e:	a0 a1       	ldd	r26, Z+32	; 0x20
    79a0:	b1 a1       	ldd	r27, Z+33	; 0x21
    79a2:	48 17       	cp	r20, r24
    79a4:	59 07       	cpc	r21, r25
    79a6:	6a 07       	cpc	r22, r26
    79a8:	7b 07       	cpc	r23, r27
    79aa:	08 f0       	brcs	.+2      	; 0x79ae <f_lseek+0x236>
    79ac:	8f cf       	rjmp	.-226    	; 0x78cc <f_lseek+0x154>
				fp->curr_clust = clst;
    79ae:	ad 81       	ldd	r26, Y+5	; 0x05
    79b0:	be 81       	ldd	r27, Y+6	; 0x06
    79b2:	52 96       	adiw	r26, 0x12	; 18
    79b4:	4d 93       	st	X+, r20
    79b6:	5d 93       	st	X+, r21
    79b8:	6d 93       	st	X+, r22
    79ba:	7c 93       	st	X, r23
    79bc:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    79be:	fd 01       	movw	r30, r26
    79c0:	86 81       	ldd	r24, Z+6	; 0x06
    79c2:	97 81       	ldd	r25, Z+7	; 0x07
    79c4:	a0 85       	ldd	r26, Z+8	; 0x08
    79c6:	b1 85       	ldd	r27, Z+9	; 0x09
    79c8:	86 0d       	add	r24, r6
    79ca:	97 1d       	adc	r25, r7
    79cc:	a8 1d       	adc	r26, r8
    79ce:	b9 1d       	adc	r27, r9
    79d0:	86 83       	std	Z+6, r24	; 0x06
    79d2:	97 83       	std	Z+7, r25	; 0x07
    79d4:	a0 87       	std	Z+8, r26	; 0x08
    79d6:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    79d8:	a6 18       	sub	r10, r6
    79da:	b7 08       	sbc	r11, r7
    79dc:	c8 08       	sbc	r12, r8
    79de:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    79e0:	6a 14       	cp	r6, r10
    79e2:	7b 04       	cpc	r7, r11
    79e4:	8c 04       	cpc	r8, r12
    79e6:	9d 04       	cpc	r9, r13
    79e8:	08 f4       	brcc	.+2      	; 0x79ec <f_lseek+0x274>
    79ea:	a2 cf       	rjmp	.-188    	; 0x7930 <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    79ec:	ed 81       	ldd	r30, Y+5	; 0x05
    79ee:	fe 81       	ldd	r31, Y+6	; 0x06
    79f0:	86 81       	ldd	r24, Z+6	; 0x06
    79f2:	97 81       	ldd	r25, Z+7	; 0x07
    79f4:	a0 85       	ldd	r26, Z+8	; 0x08
    79f6:	b1 85       	ldd	r27, Z+9	; 0x09
    79f8:	8a 0d       	add	r24, r10
    79fa:	9b 1d       	adc	r25, r11
    79fc:	ac 1d       	adc	r26, r12
    79fe:	bd 1d       	adc	r27, r13
    7a00:	86 83       	std	Z+6, r24	; 0x06
    7a02:	97 83       	std	Z+7, r25	; 0x07
    7a04:	a0 87       	std	Z+8, r26	; 0x08
    7a06:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    7a08:	d6 01       	movw	r26, r12
    7a0a:	c5 01       	movw	r24, r10
    7a0c:	29 e0       	ldi	r18, 0x09	; 9
    7a0e:	b6 95       	lsr	r27
    7a10:	a7 95       	ror	r26
    7a12:	97 95       	ror	r25
    7a14:	87 95       	ror	r24
    7a16:	2a 95       	dec	r18
    7a18:	d1 f7       	brne	.-12     	; 0x7a0e <f_lseek+0x296>
    7a1a:	e8 2e       	mov	r14, r24
    7a1c:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    7a1e:	8f ef       	ldi	r24, 0xFF	; 255
    7a20:	91 e0       	ldi	r25, 0x01	; 1
    7a22:	a0 e0       	ldi	r26, 0x00	; 0
    7a24:	b0 e0       	ldi	r27, 0x00	; 0
    7a26:	a8 22       	and	r10, r24
    7a28:	b9 22       	and	r11, r25
    7a2a:	ca 22       	and	r12, r26
    7a2c:	db 22       	and	r13, r27
    7a2e:	a1 14       	cp	r10, r1
    7a30:	b1 04       	cpc	r11, r1
    7a32:	c1 04       	cpc	r12, r1
    7a34:	d1 04       	cpc	r13, r1
    7a36:	09 f4       	brne	.+2      	; 0x7a3a <f_lseek+0x2c2>
    7a38:	4a c0       	rjmp	.+148    	; 0x7ace <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    7a3a:	80 80       	ld	r8, Z
    7a3c:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7a3e:	8e ef       	ldi	r24, 0xFE	; 254
    7a40:	a8 2e       	mov	r10, r24
    7a42:	8f ef       	ldi	r24, 0xFF	; 255
    7a44:	b8 2e       	mov	r11, r24
    7a46:	8f ef       	ldi	r24, 0xFF	; 255
    7a48:	c8 2e       	mov	r12, r24
    7a4a:	8f ef       	ldi	r24, 0xFF	; 255
    7a4c:	d8 2e       	mov	r13, r24
    7a4e:	a4 0e       	add	r10, r20
    7a50:	b5 1e       	adc	r11, r21
    7a52:	c6 1e       	adc	r12, r22
    7a54:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7a56:	f4 01       	movw	r30, r8
    7a58:	86 8d       	ldd	r24, Z+30	; 0x1e
    7a5a:	97 8d       	ldd	r25, Z+31	; 0x1f
    7a5c:	a0 a1       	ldd	r26, Z+32	; 0x20
    7a5e:	b1 a1       	ldd	r27, Z+33	; 0x21
    7a60:	02 97       	sbiw	r24, 0x02	; 2
    7a62:	a1 09       	sbc	r26, r1
    7a64:	b1 09       	sbc	r27, r1
    7a66:	a8 16       	cp	r10, r24
    7a68:	b9 06       	cpc	r11, r25
    7a6a:	ca 06       	cpc	r12, r26
    7a6c:	db 06       	cpc	r13, r27
    7a6e:	c0 f4       	brcc	.+48     	; 0x7aa0 <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    7a70:	22 81       	ldd	r18, Z+2	; 0x02
    7a72:	30 e0       	ldi	r19, 0x00	; 0
    7a74:	40 e0       	ldi	r20, 0x00	; 0
    7a76:	50 e0       	ldi	r21, 0x00	; 0
    7a78:	c6 01       	movw	r24, r12
    7a7a:	b5 01       	movw	r22, r10
    7a7c:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    7a80:	9b 01       	movw	r18, r22
    7a82:	ac 01       	movw	r20, r24
    7a84:	f4 01       	movw	r30, r8
    7a86:	82 a5       	ldd	r24, Z+42	; 0x2a
    7a88:	93 a5       	ldd	r25, Z+43	; 0x2b
    7a8a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7a8c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7a8e:	28 0f       	add	r18, r24
    7a90:	39 1f       	adc	r19, r25
    7a92:	4a 1f       	adc	r20, r26
    7a94:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    7a96:	21 15       	cp	r18, r1
    7a98:	31 05       	cpc	r19, r1
    7a9a:	41 05       	cpc	r20, r1
    7a9c:	51 05       	cpc	r21, r1
    7a9e:	69 f4       	brne	.+26     	; 0x7aba <f_lseek+0x342>
    7aa0:	ad 81       	ldd	r26, Y+5	; 0x05
    7aa2:	be 81       	ldd	r27, Y+6	; 0x06
    7aa4:	14 96       	adiw	r26, 0x04	; 4
    7aa6:	8c 91       	ld	r24, X
    7aa8:	14 97       	sbiw	r26, 0x04	; 4
    7aaa:	80 68       	ori	r24, 0x80	; 128
    7aac:	14 96       	adiw	r26, 0x04	; 4
    7aae:	8c 93       	st	X, r24
    7ab0:	e2 e0       	ldi	r30, 0x02	; 2
    7ab2:	f0 e0       	ldi	r31, 0x00	; 0
    7ab4:	eb 83       	std	Y+3, r30	; 0x03
    7ab6:	fc 83       	std	Y+4, r31	; 0x04
    7ab8:	3e c0       	rjmp	.+124    	; 0x7b36 <f_lseek+0x3be>
				nsect += fp->csect;
    7aba:	2e 0d       	add	r18, r14
    7abc:	31 1d       	adc	r19, r1
    7abe:	41 1d       	adc	r20, r1
    7ac0:	51 1d       	adc	r21, r1
				fp->csect++;
    7ac2:	e3 94       	inc	r14
    7ac4:	ad 81       	ldd	r26, Y+5	; 0x05
    7ac6:	be 81       	ldd	r27, Y+6	; 0x06
    7ac8:	15 96       	adiw	r26, 0x05	; 5
    7aca:	ec 92       	st	X, r14
    7acc:	04 c0       	rjmp	.+8      	; 0x7ad6 <f_lseek+0x35e>
    7ace:	20 e0       	ldi	r18, 0x00	; 0
    7ad0:	30 e0       	ldi	r19, 0x00	; 0
    7ad2:	40 e0       	ldi	r20, 0x00	; 0
    7ad4:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    7ad6:	ed 81       	ldd	r30, Y+5	; 0x05
    7ad8:	fe 81       	ldd	r31, Y+6	; 0x06
    7ada:	86 81       	ldd	r24, Z+6	; 0x06
    7adc:	97 81       	ldd	r25, Z+7	; 0x07
    7ade:	a0 85       	ldd	r26, Z+8	; 0x08
    7ae0:	b1 85       	ldd	r27, Z+9	; 0x09
    7ae2:	91 70       	andi	r25, 0x01	; 1
    7ae4:	a0 70       	andi	r26, 0x00	; 0
    7ae6:	b0 70       	andi	r27, 0x00	; 0
    7ae8:	00 97       	sbiw	r24, 0x00	; 0
    7aea:	a1 05       	cpc	r26, r1
    7aec:	b1 05       	cpc	r27, r1
    7aee:	69 f0       	breq	.+26     	; 0x7b0a <f_lseek+0x392>
    7af0:	86 89       	ldd	r24, Z+22	; 0x16
    7af2:	97 89       	ldd	r25, Z+23	; 0x17
    7af4:	a0 8d       	ldd	r26, Z+24	; 0x18
    7af6:	b1 8d       	ldd	r27, Z+25	; 0x19
    7af8:	28 17       	cp	r18, r24
    7afa:	39 07       	cpc	r19, r25
    7afc:	4a 07       	cpc	r20, r26
    7afe:	5b 07       	cpc	r21, r27
    7b00:	21 f0       	breq	.+8      	; 0x7b0a <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    7b02:	26 8b       	std	Z+22, r18	; 0x16
    7b04:	37 8b       	std	Z+23, r19	; 0x17
    7b06:	40 8f       	std	Z+24, r20	; 0x18
    7b08:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    7b0a:	ed 81       	ldd	r30, Y+5	; 0x05
    7b0c:	fe 81       	ldd	r31, Y+6	; 0x06
    7b0e:	26 81       	ldd	r18, Z+6	; 0x06
    7b10:	37 81       	ldd	r19, Z+7	; 0x07
    7b12:	40 85       	ldd	r20, Z+8	; 0x08
    7b14:	51 85       	ldd	r21, Z+9	; 0x09
    7b16:	82 85       	ldd	r24, Z+10	; 0x0a
    7b18:	93 85       	ldd	r25, Z+11	; 0x0b
    7b1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    7b1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    7b1e:	82 17       	cp	r24, r18
    7b20:	93 07       	cpc	r25, r19
    7b22:	a4 07       	cpc	r26, r20
    7b24:	b5 07       	cpc	r27, r21
    7b26:	38 f4       	brcc	.+14     	; 0x7b36 <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    7b28:	22 87       	std	Z+10, r18	; 0x0a
    7b2a:	33 87       	std	Z+11, r19	; 0x0b
    7b2c:	44 87       	std	Z+12, r20	; 0x0c
    7b2e:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7b30:	84 81       	ldd	r24, Z+4	; 0x04
    7b32:	80 62       	ori	r24, 0x20	; 32
    7b34:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    7b36:	8b 81       	ldd	r24, Y+3	; 0x03
    7b38:	9c 81       	ldd	r25, Y+4	; 0x04
    7b3a:	26 96       	adiw	r28, 0x06	; 6
    7b3c:	e2 e1       	ldi	r30, 0x12	; 18
    7b3e:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

00007b42 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7b42:	a0 e0       	ldi	r26, 0x00	; 0
    7b44:	b0 e0       	ldi	r27, 0x00	; 0
    7b46:	e7 ea       	ldi	r30, 0xA7	; 167
    7b48:	fd e3       	ldi	r31, 0x3D	; 61
    7b4a:	0c 94 aa 57 	jmp	0xaf54	; 0xaf54 <__prologue_saves__+0xe>
    7b4e:	ec 01       	movw	r28, r24
    7b50:	7a 01       	movw	r14, r20
    7b52:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    7b54:	42 30       	cpi	r20, 0x02	; 2
    7b56:	51 05       	cpc	r21, r1
    7b58:	61 05       	cpc	r22, r1
    7b5a:	71 05       	cpc	r23, r1
    7b5c:	08 f4       	brcc	.+2      	; 0x7b60 <remove_chain+0x1e>
    7b5e:	5a c0       	rjmp	.+180    	; 0x7c14 <remove_chain+0xd2>
    7b60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7b62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7b64:	a8 a1       	ldd	r26, Y+32	; 0x20
    7b66:	b9 a1       	ldd	r27, Y+33	; 0x21
    7b68:	48 17       	cp	r20, r24
    7b6a:	59 07       	cpc	r21, r25
    7b6c:	6a 07       	cpc	r22, r26
    7b6e:	7b 07       	cpc	r23, r27
    7b70:	08 f4       	brcc	.+2      	; 0x7b74 <remove_chain+0x32>
    7b72:	43 c0       	rjmp	.+134    	; 0x7bfa <remove_chain+0xb8>
    7b74:	4f c0       	rjmp	.+158    	; 0x7c14 <remove_chain+0xd2>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7b76:	ce 01       	movw	r24, r28
    7b78:	b8 01       	movw	r22, r16
    7b7a:	a7 01       	movw	r20, r14
    7b7c:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    7b80:	5b 01       	movw	r10, r22
    7b82:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    7b84:	61 15       	cp	r22, r1
    7b86:	71 05       	cpc	r23, r1
    7b88:	81 05       	cpc	r24, r1
    7b8a:	91 05       	cpc	r25, r1
    7b8c:	09 f4       	brne	.+2      	; 0x7b90 <remove_chain+0x4e>
    7b8e:	45 c0       	rjmp	.+138    	; 0x7c1a <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7b90:	81 e0       	ldi	r24, 0x01	; 1
    7b92:	a8 16       	cp	r10, r24
    7b94:	b1 04       	cpc	r11, r1
    7b96:	c1 04       	cpc	r12, r1
    7b98:	d1 04       	cpc	r13, r1
    7b9a:	e1 f1       	breq	.+120    	; 0x7c14 <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7b9c:	2f ef       	ldi	r18, 0xFF	; 255
    7b9e:	a2 16       	cp	r10, r18
    7ba0:	2f ef       	ldi	r18, 0xFF	; 255
    7ba2:	b2 06       	cpc	r11, r18
    7ba4:	2f ef       	ldi	r18, 0xFF	; 255
    7ba6:	c2 06       	cpc	r12, r18
    7ba8:	2f ef       	ldi	r18, 0xFF	; 255
    7baa:	d2 06       	cpc	r13, r18
    7bac:	19 f4       	brne	.+6      	; 0x7bb4 <remove_chain+0x72>
    7bae:	21 e0       	ldi	r18, 0x01	; 1
    7bb0:	30 e0       	ldi	r19, 0x00	; 0
    7bb2:	35 c0       	rjmp	.+106    	; 0x7c1e <remove_chain+0xdc>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7bb4:	ce 01       	movw	r24, r28
    7bb6:	b8 01       	movw	r22, r16
    7bb8:	a7 01       	movw	r20, r14
    7bba:	00 e0       	ldi	r16, 0x00	; 0
    7bbc:	10 e0       	ldi	r17, 0x00	; 0
    7bbe:	20 e0       	ldi	r18, 0x00	; 0
    7bc0:	30 e0       	ldi	r19, 0x00	; 0
    7bc2:	0e 94 21 3a 	call	0x7442	; 0x7442 <put_fat>
    7bc6:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    7bc8:	00 97       	sbiw	r24, 0x00	; 0
    7bca:	49 f5       	brne	.+82     	; 0x7c1e <remove_chain+0xdc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7bcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    7bce:	9f 85       	ldd	r25, Y+15	; 0x0f
    7bd0:	a8 89       	ldd	r26, Y+16	; 0x10
    7bd2:	b9 89       	ldd	r27, Y+17	; 0x11
    7bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    7bd6:	2f ef       	ldi	r18, 0xFF	; 255
    7bd8:	92 07       	cpc	r25, r18
    7bda:	2f ef       	ldi	r18, 0xFF	; 255
    7bdc:	a2 07       	cpc	r26, r18
    7bde:	2f ef       	ldi	r18, 0xFF	; 255
    7be0:	b2 07       	cpc	r27, r18
    7be2:	41 f0       	breq	.+16     	; 0x7bf4 <remove_chain+0xb2>
				fs->free_clust++;
    7be4:	01 96       	adiw	r24, 0x01	; 1
    7be6:	a1 1d       	adc	r26, r1
    7be8:	b1 1d       	adc	r27, r1
    7bea:	8e 87       	std	Y+14, r24	; 0x0e
    7bec:	9f 87       	std	Y+15, r25	; 0x0f
    7bee:	a8 8b       	std	Y+16, r26	; 0x10
    7bf0:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    7bf2:	99 86       	std	Y+9, r9	; 0x09
    7bf4:	86 01       	movw	r16, r12
    7bf6:	75 01       	movw	r14, r10
    7bf8:	02 c0       	rjmp	.+4      	; 0x7bfe <remove_chain+0xbc>
    7bfa:	99 24       	eor	r9, r9
    7bfc:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    7bfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7c00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7c02:	a8 a1       	ldd	r26, Y+32	; 0x20
    7c04:	b9 a1       	ldd	r27, Y+33	; 0x21
    7c06:	e8 16       	cp	r14, r24
    7c08:	f9 06       	cpc	r15, r25
    7c0a:	0a 07       	cpc	r16, r26
    7c0c:	1b 07       	cpc	r17, r27
    7c0e:	08 f4       	brcc	.+2      	; 0x7c12 <remove_chain+0xd0>
    7c10:	b2 cf       	rjmp	.-156    	; 0x7b76 <remove_chain+0x34>
    7c12:	03 c0       	rjmp	.+6      	; 0x7c1a <remove_chain+0xd8>
    7c14:	22 e0       	ldi	r18, 0x02	; 2
    7c16:	30 e0       	ldi	r19, 0x00	; 0
    7c18:	02 c0       	rjmp	.+4      	; 0x7c1e <remove_chain+0xdc>
    7c1a:	20 e0       	ldi	r18, 0x00	; 0
    7c1c:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    7c1e:	c9 01       	movw	r24, r18
    7c20:	cd b7       	in	r28, 0x3d	; 61
    7c22:	de b7       	in	r29, 0x3e	; 62
    7c24:	eb e0       	ldi	r30, 0x0B	; 11
    7c26:	0c 94 c6 57 	jmp	0xaf8c	; 0xaf8c <__epilogue_restores__+0xe>

00007c2a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    7c2a:	a0 e0       	ldi	r26, 0x00	; 0
    7c2c:	b0 e0       	ldi	r27, 0x00	; 0
    7c2e:	eb e1       	ldi	r30, 0x1B	; 27
    7c30:	fe e3       	ldi	r31, 0x3E	; 62
    7c32:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    7c36:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7c38:	6a 81       	ldd	r22, Y+2	; 0x02
    7c3a:	7b 81       	ldd	r23, Y+3	; 0x03
    7c3c:	88 81       	ld	r24, Y
    7c3e:	99 81       	ldd	r25, Y+1	; 0x01
    7c40:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <validate>
    7c44:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7c46:	00 97       	sbiw	r24, 0x00	; 0
    7c48:	09 f0       	breq	.+2      	; 0x7c4c <f_truncate+0x22>
    7c4a:	72 c0       	rjmp	.+228    	; 0x7d30 <f_truncate+0x106>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7c4c:	6c 81       	ldd	r22, Y+4	; 0x04
    7c4e:	67 ff       	sbrs	r22, 7
    7c50:	03 c0       	rjmp	.+6      	; 0x7c58 <f_truncate+0x2e>
    7c52:	02 e0       	ldi	r16, 0x02	; 2
    7c54:	10 e0       	ldi	r17, 0x00	; 0
    7c56:	6c c0       	rjmp	.+216    	; 0x7d30 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    7c58:	61 fd       	sbrc	r22, 1
    7c5a:	03 c0       	rjmp	.+6      	; 0x7c62 <f_truncate+0x38>
    7c5c:	07 e0       	ldi	r16, 0x07	; 7
    7c5e:	10 e0       	ldi	r17, 0x00	; 0
    7c60:	67 c0       	rjmp	.+206    	; 0x7d30 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    7c62:	2e 81       	ldd	r18, Y+6	; 0x06
    7c64:	3f 81       	ldd	r19, Y+7	; 0x07
    7c66:	48 85       	ldd	r20, Y+8	; 0x08
    7c68:	59 85       	ldd	r21, Y+9	; 0x09
    7c6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7c6e:	ac 85       	ldd	r26, Y+12	; 0x0c
    7c70:	bd 85       	ldd	r27, Y+13	; 0x0d
    7c72:	28 17       	cp	r18, r24
    7c74:	39 07       	cpc	r19, r25
    7c76:	4a 07       	cpc	r20, r26
    7c78:	5b 07       	cpc	r21, r27
    7c7a:	08 f0       	brcs	.+2      	; 0x7c7e <f_truncate+0x54>
    7c7c:	59 c0       	rjmp	.+178    	; 0x7d30 <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    7c7e:	2a 87       	std	Y+10, r18	; 0x0a
    7c80:	3b 87       	std	Y+11, r19	; 0x0b
    7c82:	4c 87       	std	Y+12, r20	; 0x0c
    7c84:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7c86:	60 62       	ori	r22, 0x20	; 32
    7c88:	6c 83       	std	Y+4, r22	; 0x04
    7c8a:	88 81       	ld	r24, Y
    7c8c:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    7c8e:	21 15       	cp	r18, r1
    7c90:	31 05       	cpc	r19, r1
    7c92:	41 05       	cpc	r20, r1
    7c94:	51 05       	cpc	r21, r1
    7c96:	61 f4       	brne	.+24     	; 0x7cb0 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    7c98:	4e 85       	ldd	r20, Y+14	; 0x0e
    7c9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    7c9c:	68 89       	ldd	r22, Y+16	; 0x10
    7c9e:	79 89       	ldd	r23, Y+17	; 0x11
    7ca0:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <remove_chain>
    7ca4:	8c 01       	movw	r16, r24
			fp->org_clust = 0;
    7ca6:	1e 86       	std	Y+14, r1	; 0x0e
    7ca8:	1f 86       	std	Y+15, r1	; 0x0f
    7caa:	18 8a       	std	Y+16, r1	; 0x10
    7cac:	19 8a       	std	Y+17, r1	; 0x11
    7cae:	3a c0       	rjmp	.+116    	; 0x7d24 <f_truncate+0xfa>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    7cb0:	4a 89       	ldd	r20, Y+18	; 0x12
    7cb2:	5b 89       	ldd	r21, Y+19	; 0x13
    7cb4:	6c 89       	ldd	r22, Y+20	; 0x14
    7cb6:	7d 89       	ldd	r23, Y+21	; 0x15
    7cb8:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    7cbc:	6b 01       	movw	r12, r22
    7cbe:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    7cc0:	8f ef       	ldi	r24, 0xFF	; 255
    7cc2:	c8 16       	cp	r12, r24
    7cc4:	8f ef       	ldi	r24, 0xFF	; 255
    7cc6:	d8 06       	cpc	r13, r24
    7cc8:	8f ef       	ldi	r24, 0xFF	; 255
    7cca:	e8 06       	cpc	r14, r24
    7ccc:	8f ef       	ldi	r24, 0xFF	; 255
    7cce:	f8 06       	cpc	r15, r24
    7cd0:	a9 f1       	breq	.+106    	; 0x7d3c <f_truncate+0x112>
			if (ncl == 1) res = FR_INT_ERR;
    7cd2:	81 e0       	ldi	r24, 0x01	; 1
    7cd4:	c8 16       	cp	r12, r24
    7cd6:	d1 04       	cpc	r13, r1
    7cd8:	e1 04       	cpc	r14, r1
    7cda:	f1 04       	cpc	r15, r1
    7cdc:	19 f4       	brne	.+6      	; 0x7ce4 <f_truncate+0xba>
    7cde:	02 e0       	ldi	r16, 0x02	; 2
    7ce0:	10 e0       	ldi	r17, 0x00	; 0
    7ce2:	23 c0       	rjmp	.+70     	; 0x7d2a <f_truncate+0x100>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    7ce4:	e8 81       	ld	r30, Y
    7ce6:	f9 81       	ldd	r31, Y+1	; 0x01
    7ce8:	86 8d       	ldd	r24, Z+30	; 0x1e
    7cea:	97 8d       	ldd	r25, Z+31	; 0x1f
    7cec:	a0 a1       	ldd	r26, Z+32	; 0x20
    7cee:	b1 a1       	ldd	r27, Z+33	; 0x21
    7cf0:	c8 16       	cp	r12, r24
    7cf2:	d9 06       	cpc	r13, r25
    7cf4:	ea 06       	cpc	r14, r26
    7cf6:	fb 06       	cpc	r15, r27
    7cf8:	d8 f4       	brcc	.+54     	; 0x7d30 <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    7cfa:	4a 89       	ldd	r20, Y+18	; 0x12
    7cfc:	5b 89       	ldd	r21, Y+19	; 0x13
    7cfe:	6c 89       	ldd	r22, Y+20	; 0x14
    7d00:	7d 89       	ldd	r23, Y+21	; 0x15
    7d02:	cf 01       	movw	r24, r30
    7d04:	0f ef       	ldi	r16, 0xFF	; 255
    7d06:	1f ef       	ldi	r17, 0xFF	; 255
    7d08:	2f ef       	ldi	r18, 0xFF	; 255
    7d0a:	3f e0       	ldi	r19, 0x0F	; 15
    7d0c:	0e 94 21 3a 	call	0x7442	; 0x7442 <put_fat>
    7d10:	8c 01       	movw	r16, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    7d12:	00 97       	sbiw	r24, 0x00	; 0
    7d14:	51 f4       	brne	.+20     	; 0x7d2a <f_truncate+0x100>
    7d16:	88 81       	ld	r24, Y
    7d18:	99 81       	ldd	r25, Y+1	; 0x01
    7d1a:	b7 01       	movw	r22, r14
    7d1c:	a6 01       	movw	r20, r12
    7d1e:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <remove_chain>
    7d22:	8c 01       	movw	r16, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    7d24:	01 15       	cp	r16, r1
    7d26:	11 05       	cpc	r17, r1
    7d28:	19 f0       	breq	.+6      	; 0x7d30 <f_truncate+0x106>
    7d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    7d2c:	80 68       	ori	r24, 0x80	; 128
    7d2e:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    7d30:	c8 01       	movw	r24, r16
    7d32:	cd b7       	in	r28, 0x3d	; 61
    7d34:	de b7       	in	r29, 0x3e	; 62
    7d36:	e8 e0       	ldi	r30, 0x08	; 8
    7d38:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0x14>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    7d3c:	01 e0       	ldi	r16, 0x01	; 1
    7d3e:	10 e0       	ldi	r17, 0x00	; 0
    7d40:	f4 cf       	rjmp	.-24     	; 0x7d2a <f_truncate+0x100>

00007d42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    7d42:	a0 e0       	ldi	r26, 0x00	; 0
    7d44:	b0 e0       	ldi	r27, 0x00	; 0
    7d46:	e7 ea       	ldi	r30, 0xA7	; 167
    7d48:	fe e3       	ldi	r31, 0x3E	; 62
    7d4a:	0c 94 a5 57 	jmp	0xaf4a	; 0xaf4a <__prologue_saves__+0x4>
    7d4e:	ec 01       	movw	r28, r24
    7d50:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    7d52:	6c 80       	ldd	r6, Y+4	; 0x04
    7d54:	7d 80       	ldd	r7, Y+5	; 0x05
    7d56:	08 94       	sec
    7d58:	61 1c       	adc	r6, r1
    7d5a:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7d5c:	61 14       	cp	r6, r1
    7d5e:	71 04       	cpc	r7, r1
    7d60:	09 f4       	brne	.+2      	; 0x7d64 <dir_next+0x22>
    7d62:	4d c1       	rjmp	.+666    	; 0x7ffe <dir_next+0x2bc>
    7d64:	8e 85       	ldd	r24, Y+14	; 0x0e
    7d66:	9f 85       	ldd	r25, Y+15	; 0x0f
    7d68:	a8 89       	ldd	r26, Y+16	; 0x10
    7d6a:	b9 89       	ldd	r27, Y+17	; 0x11
    7d6c:	00 97       	sbiw	r24, 0x00	; 0
    7d6e:	a1 05       	cpc	r26, r1
    7d70:	b1 05       	cpc	r27, r1
    7d72:	09 f4       	brne	.+2      	; 0x7d76 <dir_next+0x34>
    7d74:	44 c1       	rjmp	.+648    	; 0x7ffe <dir_next+0x2bc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    7d76:	2f e0       	ldi	r18, 0x0F	; 15
    7d78:	42 2e       	mov	r4, r18
    7d7a:	51 2c       	mov	r5, r1
    7d7c:	46 20       	and	r4, r6
    7d7e:	57 20       	and	r5, r7
    7d80:	41 14       	cp	r4, r1
    7d82:	51 04       	cpc	r5, r1
    7d84:	09 f0       	breq	.+2      	; 0x7d88 <dir_next+0x46>
    7d86:	27 c1       	rjmp	.+590    	; 0x7fd6 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    7d88:	01 96       	adiw	r24, 0x01	; 1
    7d8a:	a1 1d       	adc	r26, r1
    7d8c:	b1 1d       	adc	r27, r1
    7d8e:	8e 87       	std	Y+14, r24	; 0x0e
    7d90:	9f 87       	std	Y+15, r25	; 0x0f
    7d92:	a8 8b       	std	Y+16, r26	; 0x10
    7d94:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    7d96:	4a 85       	ldd	r20, Y+10	; 0x0a
    7d98:	5b 85       	ldd	r21, Y+11	; 0x0b
    7d9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    7d9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    7d9e:	e8 81       	ld	r30, Y
    7da0:	f9 81       	ldd	r31, Y+1	; 0x01
    7da2:	41 15       	cp	r20, r1
    7da4:	51 05       	cpc	r21, r1
    7da6:	61 05       	cpc	r22, r1
    7da8:	71 05       	cpc	r23, r1
    7daa:	39 f4       	brne	.+14     	; 0x7dba <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7dac:	87 81       	ldd	r24, Z+7	; 0x07
    7dae:	90 85       	ldd	r25, Z+8	; 0x08
    7db0:	68 16       	cp	r6, r24
    7db2:	79 06       	cpc	r7, r25
    7db4:	08 f4       	brcc	.+2      	; 0x7db8 <dir_next+0x76>
    7db6:	0f c1       	rjmp	.+542    	; 0x7fd6 <dir_next+0x294>
    7db8:	22 c1       	rjmp	.+580    	; 0x7ffe <dir_next+0x2bc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7dba:	82 81       	ldd	r24, Z+2	; 0x02
    7dbc:	90 e0       	ldi	r25, 0x00	; 0
    7dbe:	01 97       	sbiw	r24, 0x01	; 1
    7dc0:	93 01       	movw	r18, r6
    7dc2:	a4 e0       	ldi	r26, 0x04	; 4
    7dc4:	36 95       	lsr	r19
    7dc6:	27 95       	ror	r18
    7dc8:	aa 95       	dec	r26
    7dca:	e1 f7       	brne	.-8      	; 0x7dc4 <dir_next+0x82>
    7dcc:	82 23       	and	r24, r18
    7dce:	93 23       	and	r25, r19
    7dd0:	89 2b       	or	r24, r25
    7dd2:	09 f0       	breq	.+2      	; 0x7dd6 <dir_next+0x94>
    7dd4:	00 c1       	rjmp	.+512    	; 0x7fd6 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7dd6:	cf 01       	movw	r24, r30
    7dd8:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
    7ddc:	7b 01       	movw	r14, r22
    7dde:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    7de0:	82 e0       	ldi	r24, 0x02	; 2
    7de2:	e8 16       	cp	r14, r24
    7de4:	f1 04       	cpc	r15, r1
    7de6:	01 05       	cpc	r16, r1
    7de8:	11 05       	cpc	r17, r1
    7dea:	08 f4       	brcc	.+2      	; 0x7dee <dir_next+0xac>
    7dec:	0b c1       	rjmp	.+534    	; 0x8004 <dir_next+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7dee:	9f ef       	ldi	r25, 0xFF	; 255
    7df0:	e9 16       	cp	r14, r25
    7df2:	9f ef       	ldi	r25, 0xFF	; 255
    7df4:	f9 06       	cpc	r15, r25
    7df6:	9f ef       	ldi	r25, 0xFF	; 255
    7df8:	09 07       	cpc	r16, r25
    7dfa:	9f ef       	ldi	r25, 0xFF	; 255
    7dfc:	19 07       	cpc	r17, r25
    7dfe:	09 f4       	brne	.+2      	; 0x7e02 <dir_next+0xc0>
    7e00:	04 c1       	rjmp	.+520    	; 0x800a <dir_next+0x2c8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    7e02:	e8 81       	ld	r30, Y
    7e04:	f9 81       	ldd	r31, Y+1	; 0x01
    7e06:	86 8d       	ldd	r24, Z+30	; 0x1e
    7e08:	97 8d       	ldd	r25, Z+31	; 0x1f
    7e0a:	a0 a1       	ldd	r26, Z+32	; 0x20
    7e0c:	b1 a1       	ldd	r27, Z+33	; 0x21
    7e0e:	e8 16       	cp	r14, r24
    7e10:	f9 06       	cpc	r15, r25
    7e12:	0a 07       	cpc	r16, r26
    7e14:	1b 07       	cpc	r17, r27
    7e16:	08 f4       	brcc	.+2      	; 0x7e1a <dir_next+0xd8>
    7e18:	a5 c0       	rjmp	.+330    	; 0x7f64 <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    7e1a:	c1 14       	cp	r12, r1
    7e1c:	d1 04       	cpc	r13, r1
    7e1e:	09 f4       	brne	.+2      	; 0x7e22 <dir_next+0xe0>
    7e20:	ee c0       	rjmp	.+476    	; 0x7ffe <dir_next+0x2bc>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    7e22:	4a 85       	ldd	r20, Y+10	; 0x0a
    7e24:	5b 85       	ldd	r21, Y+11	; 0x0b
    7e26:	6c 85       	ldd	r22, Y+12	; 0x0c
    7e28:	7d 85       	ldd	r23, Y+13	; 0x0d
    7e2a:	cf 01       	movw	r24, r30
    7e2c:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <create_chain>
    7e30:	7b 01       	movw	r14, r22
    7e32:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7e34:	61 15       	cp	r22, r1
    7e36:	71 05       	cpc	r23, r1
    7e38:	81 05       	cpc	r24, r1
    7e3a:	91 05       	cpc	r25, r1
    7e3c:	19 f4       	brne	.+6      	; 0x7e44 <dir_next+0x102>
    7e3e:	27 e0       	ldi	r18, 0x07	; 7
    7e40:	30 e0       	ldi	r19, 0x00	; 0
    7e42:	e5 c0       	rjmp	.+458    	; 0x800e <dir_next+0x2cc>
					if (clst == 1) return FR_INT_ERR;
    7e44:	61 30       	cpi	r22, 0x01	; 1
    7e46:	71 05       	cpc	r23, r1
    7e48:	81 05       	cpc	r24, r1
    7e4a:	91 05       	cpc	r25, r1
    7e4c:	09 f4       	brne	.+2      	; 0x7e50 <dir_next+0x10e>
    7e4e:	da c0       	rjmp	.+436    	; 0x8004 <dir_next+0x2c2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7e50:	6f 3f       	cpi	r22, 0xFF	; 255
    7e52:	bf ef       	ldi	r27, 0xFF	; 255
    7e54:	7b 07       	cpc	r23, r27
    7e56:	bf ef       	ldi	r27, 0xFF	; 255
    7e58:	8b 07       	cpc	r24, r27
    7e5a:	bf ef       	ldi	r27, 0xFF	; 255
    7e5c:	9b 07       	cpc	r25, r27
    7e5e:	09 f4       	brne	.+2      	; 0x7e62 <dir_next+0x120>
    7e60:	d4 c0       	rjmp	.+424    	; 0x800a <dir_next+0x2c8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7e62:	88 81       	ld	r24, Y
    7e64:	99 81       	ldd	r25, Y+1	; 0x01
    7e66:	40 e0       	ldi	r20, 0x00	; 0
    7e68:	50 e0       	ldi	r21, 0x00	; 0
    7e6a:	60 e0       	ldi	r22, 0x00	; 0
    7e6c:	70 e0       	ldi	r23, 0x00	; 0
    7e6e:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    7e72:	89 2b       	or	r24, r25
    7e74:	09 f0       	breq	.+2      	; 0x7e78 <dir_next+0x136>
    7e76:	c9 c0       	rjmp	.+402    	; 0x800a <dir_next+0x2c8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    7e78:	88 81       	ld	r24, Y
    7e7a:	99 81       	ldd	r25, Y+1	; 0x01
    7e7c:	fc 01       	movw	r30, r24
    7e7e:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    7e80:	8e 5c       	subi	r24, 0xCE	; 206
    7e82:	9d 4f       	sbci	r25, 0xFD	; 253
    7e84:	01 c0       	rjmp	.+2      	; 0x7e88 <dir_next+0x146>
    7e86:	11 92       	st	Z+, r1
    7e88:	e8 17       	cp	r30, r24
    7e8a:	f9 07       	cpc	r31, r25
    7e8c:	e1 f7       	brne	.-8      	; 0x7e86 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7e8e:	88 80       	ld	r8, Y
    7e90:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7e92:	ee ef       	ldi	r30, 0xFE	; 254
    7e94:	ae 2e       	mov	r10, r30
    7e96:	ef ef       	ldi	r30, 0xFF	; 255
    7e98:	be 2e       	mov	r11, r30
    7e9a:	ef ef       	ldi	r30, 0xFF	; 255
    7e9c:	ce 2e       	mov	r12, r30
    7e9e:	ef ef       	ldi	r30, 0xFF	; 255
    7ea0:	de 2e       	mov	r13, r30
    7ea2:	ae 0c       	add	r10, r14
    7ea4:	bf 1c       	adc	r11, r15
    7ea6:	c0 1e       	adc	r12, r16
    7ea8:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7eaa:	f4 01       	movw	r30, r8
    7eac:	86 8d       	ldd	r24, Z+30	; 0x1e
    7eae:	97 8d       	ldd	r25, Z+31	; 0x1f
    7eb0:	a0 a1       	ldd	r26, Z+32	; 0x20
    7eb2:	b1 a1       	ldd	r27, Z+33	; 0x21
    7eb4:	02 97       	sbiw	r24, 0x02	; 2
    7eb6:	a1 09       	sbc	r26, r1
    7eb8:	b1 09       	sbc	r27, r1
    7eba:	a8 16       	cp	r10, r24
    7ebc:	b9 06       	cpc	r11, r25
    7ebe:	ca 06       	cpc	r12, r26
    7ec0:	db 06       	cpc	r13, r27
    7ec2:	28 f0       	brcs	.+10     	; 0x7ece <dir_next+0x18c>
    7ec4:	20 e0       	ldi	r18, 0x00	; 0
    7ec6:	30 e0       	ldi	r19, 0x00	; 0
    7ec8:	40 e0       	ldi	r20, 0x00	; 0
    7eca:	50 e0       	ldi	r21, 0x00	; 0
    7ecc:	15 c0       	rjmp	.+42     	; 0x7ef8 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    7ece:	d4 01       	movw	r26, r8
    7ed0:	12 96       	adiw	r26, 0x02	; 2
    7ed2:	2c 91       	ld	r18, X
    7ed4:	30 e0       	ldi	r19, 0x00	; 0
    7ed6:	40 e0       	ldi	r20, 0x00	; 0
    7ed8:	50 e0       	ldi	r21, 0x00	; 0
    7eda:	c6 01       	movw	r24, r12
    7edc:	b5 01       	movw	r22, r10
    7ede:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    7ee2:	9b 01       	movw	r18, r22
    7ee4:	ac 01       	movw	r20, r24
    7ee6:	f4 01       	movw	r30, r8
    7ee8:	82 a5       	ldd	r24, Z+42	; 0x2a
    7eea:	93 a5       	ldd	r25, Z+43	; 0x2b
    7eec:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7eee:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7ef0:	28 0f       	add	r18, r24
    7ef2:	39 1f       	adc	r19, r25
    7ef4:	4a 1f       	adc	r20, r26
    7ef6:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7ef8:	d4 01       	movw	r26, r8
    7efa:	9e 96       	adiw	r26, 0x2e	; 46
    7efc:	2d 93       	st	X+, r18
    7efe:	3d 93       	st	X+, r19
    7f00:	4d 93       	st	X+, r20
    7f02:	5c 93       	st	X, r21
    7f04:	d1 97       	sbiw	r26, 0x31	; 49
    7f06:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    7f08:	cc 24       	eor	r12, r12
    7f0a:	c3 94       	inc	r12
    7f0c:	1a c0       	rjmp	.+52     	; 0x7f42 <dir_next+0x200>
    7f0e:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7f10:	88 81       	ld	r24, Y
    7f12:	99 81       	ldd	r25, Y+1	; 0x01
    7f14:	40 e0       	ldi	r20, 0x00	; 0
    7f16:	50 e0       	ldi	r21, 0x00	; 0
    7f18:	60 e0       	ldi	r22, 0x00	; 0
    7f1a:	70 e0       	ldi	r23, 0x00	; 0
    7f1c:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    7f20:	89 2b       	or	r24, r25
    7f22:	09 f0       	breq	.+2      	; 0x7f26 <dir_next+0x1e4>
    7f24:	72 c0       	rjmp	.+228    	; 0x800a <dir_next+0x2c8>
						dj->fs->winsect++;
    7f26:	e8 81       	ld	r30, Y
    7f28:	f9 81       	ldd	r31, Y+1	; 0x01
    7f2a:	86 a5       	ldd	r24, Z+46	; 0x2e
    7f2c:	97 a5       	ldd	r25, Z+47	; 0x2f
    7f2e:	a0 a9       	ldd	r26, Z+48	; 0x30
    7f30:	b1 a9       	ldd	r27, Z+49	; 0x31
    7f32:	01 96       	adiw	r24, 0x01	; 1
    7f34:	a1 1d       	adc	r26, r1
    7f36:	b1 1d       	adc	r27, r1
    7f38:	86 a7       	std	Z+46, r24	; 0x2e
    7f3a:	97 a7       	std	Z+47, r25	; 0x2f
    7f3c:	a0 ab       	std	Z+48, r26	; 0x30
    7f3e:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7f40:	d3 94       	inc	r13
    7f42:	e8 81       	ld	r30, Y
    7f44:	f9 81       	ldd	r31, Y+1	; 0x01
    7f46:	82 81       	ldd	r24, Z+2	; 0x02
    7f48:	d8 16       	cp	r13, r24
    7f4a:	08 f3       	brcs	.-62     	; 0x7f0e <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7f4c:	86 a5       	ldd	r24, Z+46	; 0x2e
    7f4e:	97 a5       	ldd	r25, Z+47	; 0x2f
    7f50:	a0 a9       	ldd	r26, Z+48	; 0x30
    7f52:	b1 a9       	ldd	r27, Z+49	; 0x31
    7f54:	8d 19       	sub	r24, r13
    7f56:	91 09       	sbc	r25, r1
    7f58:	a1 09       	sbc	r26, r1
    7f5a:	b1 09       	sbc	r27, r1
    7f5c:	86 a7       	std	Z+46, r24	; 0x2e
    7f5e:	97 a7       	std	Z+47, r25	; 0x2f
    7f60:	a0 ab       	std	Z+48, r26	; 0x30
    7f62:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7f64:	ea 86       	std	Y+10, r14	; 0x0a
    7f66:	fb 86       	std	Y+11, r15	; 0x0b
    7f68:	0c 87       	std	Y+12, r16	; 0x0c
    7f6a:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    7f6c:	c8 80       	ld	r12, Y
    7f6e:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7f70:	8e ef       	ldi	r24, 0xFE	; 254
    7f72:	9f ef       	ldi	r25, 0xFF	; 255
    7f74:	af ef       	ldi	r26, 0xFF	; 255
    7f76:	bf ef       	ldi	r27, 0xFF	; 255
    7f78:	e8 0e       	add	r14, r24
    7f7a:	f9 1e       	adc	r15, r25
    7f7c:	0a 1f       	adc	r16, r26
    7f7e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7f80:	f6 01       	movw	r30, r12
    7f82:	86 8d       	ldd	r24, Z+30	; 0x1e
    7f84:	97 8d       	ldd	r25, Z+31	; 0x1f
    7f86:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f88:	b1 a1       	ldd	r27, Z+33	; 0x21
    7f8a:	02 97       	sbiw	r24, 0x02	; 2
    7f8c:	a1 09       	sbc	r26, r1
    7f8e:	b1 09       	sbc	r27, r1
    7f90:	e8 16       	cp	r14, r24
    7f92:	f9 06       	cpc	r15, r25
    7f94:	0a 07       	cpc	r16, r26
    7f96:	1b 07       	cpc	r17, r27
    7f98:	28 f0       	brcs	.+10     	; 0x7fa4 <dir_next+0x262>
    7f9a:	20 e0       	ldi	r18, 0x00	; 0
    7f9c:	30 e0       	ldi	r19, 0x00	; 0
    7f9e:	40 e0       	ldi	r20, 0x00	; 0
    7fa0:	50 e0       	ldi	r21, 0x00	; 0
    7fa2:	15 c0       	rjmp	.+42     	; 0x7fce <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    7fa4:	d6 01       	movw	r26, r12
    7fa6:	12 96       	adiw	r26, 0x02	; 2
    7fa8:	2c 91       	ld	r18, X
    7faa:	30 e0       	ldi	r19, 0x00	; 0
    7fac:	40 e0       	ldi	r20, 0x00	; 0
    7fae:	50 e0       	ldi	r21, 0x00	; 0
    7fb0:	c8 01       	movw	r24, r16
    7fb2:	b7 01       	movw	r22, r14
    7fb4:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    7fb8:	9b 01       	movw	r18, r22
    7fba:	ac 01       	movw	r20, r24
    7fbc:	f6 01       	movw	r30, r12
    7fbe:	82 a5       	ldd	r24, Z+42	; 0x2a
    7fc0:	93 a5       	ldd	r25, Z+43	; 0x2b
    7fc2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7fc4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7fc6:	28 0f       	add	r18, r24
    7fc8:	39 1f       	adc	r19, r25
    7fca:	4a 1f       	adc	r20, r26
    7fcc:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    7fce:	2e 87       	std	Y+14, r18	; 0x0e
    7fd0:	3f 87       	std	Y+15, r19	; 0x0f
    7fd2:	48 8b       	std	Y+16, r20	; 0x10
    7fd4:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    7fd6:	6c 82       	std	Y+4, r6	; 0x04
    7fd8:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    7fda:	75 e0       	ldi	r23, 0x05	; 5
    7fdc:	44 0c       	add	r4, r4
    7fde:	55 1c       	adc	r5, r5
    7fe0:	7a 95       	dec	r23
    7fe2:	e1 f7       	brne	.-8      	; 0x7fdc <dir_next+0x29a>
    7fe4:	82 e3       	ldi	r24, 0x32	; 50
    7fe6:	90 e0       	ldi	r25, 0x00	; 0
    7fe8:	48 0e       	add	r4, r24
    7fea:	59 1e       	adc	r5, r25
    7fec:	88 81       	ld	r24, Y
    7fee:	99 81       	ldd	r25, Y+1	; 0x01
    7ff0:	84 0d       	add	r24, r4
    7ff2:	95 1d       	adc	r25, r5
    7ff4:	8a 8b       	std	Y+18, r24	; 0x12
    7ff6:	9b 8b       	std	Y+19, r25	; 0x13
    7ff8:	20 e0       	ldi	r18, 0x00	; 0
    7ffa:	30 e0       	ldi	r19, 0x00	; 0
    7ffc:	08 c0       	rjmp	.+16     	; 0x800e <dir_next+0x2cc>

	return FR_OK;
    7ffe:	24 e0       	ldi	r18, 0x04	; 4
    8000:	30 e0       	ldi	r19, 0x00	; 0
    8002:	05 c0       	rjmp	.+10     	; 0x800e <dir_next+0x2cc>
    8004:	22 e0       	ldi	r18, 0x02	; 2
    8006:	30 e0       	ldi	r19, 0x00	; 0
    8008:	02 c0       	rjmp	.+4      	; 0x800e <dir_next+0x2cc>
    800a:	21 e0       	ldi	r18, 0x01	; 1
    800c:	30 e0       	ldi	r19, 0x00	; 0
}
    800e:	c9 01       	movw	r24, r18
    8010:	cd b7       	in	r28, 0x3d	; 61
    8012:	de b7       	in	r29, 0x3e	; 62
    8014:	e0 e1       	ldi	r30, 0x10	; 16
    8016:	0c 94 c1 57 	jmp	0xaf82	; 0xaf82 <__epilogue_restores__+0x4>

0000801a <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    801a:	a0 e0       	ldi	r26, 0x00	; 0
    801c:	b0 e0       	ldi	r27, 0x00	; 0
    801e:	e3 e1       	ldi	r30, 0x13	; 19
    8020:	f0 e4       	ldi	r31, 0x40	; 64
    8022:	0c 94 ab 57 	jmp	0xaf56	; 0xaf56 <__prologue_saves__+0x10>
    8026:	ec 01       	movw	r28, r24
    8028:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    802a:	fb 01       	movw	r30, r22
    802c:	80 81       	ld	r24, Z
    802e:	8f 32       	cpi	r24, 0x2F	; 47
    8030:	11 f0       	breq	.+4      	; 0x8036 <follow_path+0x1c>
    8032:	8c 35       	cpi	r24, 0x5C	; 92
    8034:	41 f4       	brne	.+16     	; 0x8046 <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    8036:	08 94       	sec
    8038:	e1 1c       	adc	r14, r1
    803a:	f1 1c       	adc	r15, r1
    803c:	1e 82       	std	Y+6, r1	; 0x06
    803e:	1f 82       	std	Y+7, r1	; 0x07
    8040:	18 86       	std	Y+8, r1	; 0x08
    8042:	19 86       	std	Y+9, r1	; 0x09
    8044:	0a c0       	rjmp	.+20     	; 0x805a <follow_path+0x40>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    8046:	e8 81       	ld	r30, Y
    8048:	f9 81       	ldd	r31, Y+1	; 0x01
    804a:	86 89       	ldd	r24, Z+22	; 0x16
    804c:	97 89       	ldd	r25, Z+23	; 0x17
    804e:	a0 8d       	ldd	r26, Z+24	; 0x18
    8050:	b1 8d       	ldd	r27, Z+25	; 0x19
    8052:	8e 83       	std	Y+6, r24	; 0x06
    8054:	9f 83       	std	Y+7, r25	; 0x07
    8056:	a8 87       	std	Y+8, r26	; 0x08
    8058:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    805a:	f7 01       	movw	r30, r14
    805c:	80 81       	ld	r24, Z
    805e:	80 32       	cpi	r24, 0x20	; 32
    8060:	48 f4       	brcc	.+18     	; 0x8074 <follow_path+0x5a>
		res = dir_seek(dj, 0);
    8062:	ce 01       	movw	r24, r28
    8064:	60 e0       	ldi	r22, 0x00	; 0
    8066:	70 e0       	ldi	r23, 0x00	; 0
    8068:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    806c:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    806e:	1a 8a       	std	Y+18, r1	; 0x12
    8070:	1b 8a       	std	Y+19, r1	; 0x13
    8072:	02 c1       	rjmp	.+516    	; 0x8278 <follow_path+0x25e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    8074:	50 e2       	ldi	r21, 0x20	; 32
    8076:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8078:	45 e0       	ldi	r20, 0x05	; 5
    807a:	a4 2e       	mov	r10, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    807c:	0c 89       	ldd	r16, Y+20	; 0x14
    807e:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8080:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    8082:	c8 01       	movw	r24, r16
    8084:	0b 96       	adiw	r24, 0x0b	; 11
    8086:	01 c0       	rjmp	.+2      	; 0x808a <follow_path+0x70>
    8088:	b1 92       	st	Z+, r11
    808a:	e8 17       	cp	r30, r24
    808c:	f9 07       	cpc	r31, r25
    808e:	e1 f7       	brne	.-8      	; 0x8088 <follow_path+0x6e>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    8090:	f7 01       	movw	r30, r14
    8092:	80 81       	ld	r24, Z
    8094:	8e 32       	cpi	r24, 0x2E	; 46
    8096:	41 f0       	breq	.+16     	; 0x80a8 <follow_path+0x8e>
    8098:	60 e0       	ldi	r22, 0x00	; 0
    809a:	70 e0       	ldi	r23, 0x00	; 0
    809c:	cc 24       	eor	r12, r12
    809e:	dd 24       	eor	r13, r13
    80a0:	a8 e0       	ldi	r26, 0x08	; 8
    80a2:	b0 e0       	ldi	r27, 0x00	; 0
    80a4:	30 e0       	ldi	r19, 0x00	; 0
    80a6:	21 c0       	rjmp	.+66     	; 0x80ea <follow_path+0xd0>
    80a8:	d8 01       	movw	r26, r16
    80aa:	80 e0       	ldi	r24, 0x00	; 0
    80ac:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    80ae:	f7 01       	movw	r30, r14
    80b0:	e8 0f       	add	r30, r24
    80b2:	f9 1f       	adc	r31, r25
    80b4:	e0 81       	ld	r30, Z
    80b6:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    80b8:	ee 32       	cpi	r30, 0x2E	; 46
    80ba:	31 f4       	brne	.+12     	; 0x80c8 <follow_path+0xae>
    80bc:	83 30       	cpi	r24, 0x03	; 3
    80be:	91 05       	cpc	r25, r1
    80c0:	09 f4       	brne	.+2      	; 0x80c4 <follow_path+0xaa>
    80c2:	d3 c0       	rjmp	.+422    	; 0x826a <follow_path+0x250>
			sfn[i++] = c;
    80c4:	ed 93       	st	X+, r30
    80c6:	f3 cf       	rjmp	.-26     	; 0x80ae <follow_path+0x94>
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
    80c8:	ef 32       	cpi	r30, 0x2F	; 47
    80ca:	29 f0       	breq	.+10     	; 0x80d6 <follow_path+0xbc>
    80cc:	ec 35       	cpi	r30, 0x5C	; 92
    80ce:	39 f0       	breq	.+14     	; 0x80de <follow_path+0xc4>
    80d0:	e0 32       	cpi	r30, 0x20	; 32
    80d2:	08 f0       	brcs	.+2      	; 0x80d6 <follow_path+0xbc>
    80d4:	ca c0       	rjmp	.+404    	; 0x826a <follow_path+0x250>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    80d6:	e0 32       	cpi	r30, 0x20	; 32
    80d8:	10 f4       	brcc	.+4      	; 0x80de <follow_path+0xc4>
    80da:	24 e2       	ldi	r18, 0x24	; 36
    80dc:	01 c0       	rjmp	.+2      	; 0x80e0 <follow_path+0xc6>
    80de:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    80e0:	e8 0e       	add	r14, r24
    80e2:	f9 1e       	adc	r15, r25
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    80e4:	f8 01       	movw	r30, r16
    80e6:	23 87       	std	Z+11, r18	; 0x0b
    80e8:	cd c0       	rjmp	.+410    	; 0x8284 <follow_path+0x26a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    80ea:	f7 01       	movw	r30, r14
    80ec:	ec 0d       	add	r30, r12
    80ee:	fd 1d       	adc	r31, r13
    80f0:	20 81       	ld	r18, Z
    80f2:	08 94       	sec
    80f4:	c1 1c       	adc	r12, r1
    80f6:	d1 1c       	adc	r13, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    80f8:	20 32       	cpi	r18, 0x20	; 32
    80fa:	08 f4       	brcc	.+2      	; 0x80fe <follow_path+0xe4>
    80fc:	42 c0       	rjmp	.+132    	; 0x8182 <follow_path+0x168>
    80fe:	2f 32       	cpi	r18, 0x2F	; 47
    8100:	09 f4       	brne	.+2      	; 0x8104 <follow_path+0xea>
    8102:	ca c0       	rjmp	.+404    	; 0x8298 <follow_path+0x27e>
    8104:	2c 35       	cpi	r18, 0x5C	; 92
    8106:	09 f4       	brne	.+2      	; 0x810a <follow_path+0xf0>
    8108:	c7 c0       	rjmp	.+398    	; 0x8298 <follow_path+0x27e>
		if (c == '.' || i >= ni) {
    810a:	2e 32       	cpi	r18, 0x2E	; 46
    810c:	19 f0       	breq	.+6      	; 0x8114 <follow_path+0xfa>
    810e:	6a 17       	cp	r22, r26
    8110:	7b 07       	cpc	r23, r27
    8112:	6c f0       	brlt	.+26     	; 0x812e <follow_path+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    8114:	18 97       	sbiw	r26, 0x08	; 8
    8116:	09 f0       	breq	.+2      	; 0x811a <follow_path+0x100>
    8118:	a8 c0       	rjmp	.+336    	; 0x826a <follow_path+0x250>
    811a:	2e 32       	cpi	r18, 0x2E	; 46
    811c:	09 f0       	breq	.+2      	; 0x8120 <follow_path+0x106>
    811e:	a5 c0       	rjmp	.+330    	; 0x826a <follow_path+0x250>
			i = 8; ni = 11;
			b <<= 2; continue;
    8120:	33 0f       	add	r19, r19
    8122:	33 0f       	add	r19, r19
    8124:	68 e0       	ldi	r22, 0x08	; 8
    8126:	70 e0       	ldi	r23, 0x00	; 0
    8128:	ab e0       	ldi	r26, 0x0B	; 11
    812a:	b0 e0       	ldi	r27, 0x00	; 0
    812c:	de cf       	rjmp	.-68     	; 0x80ea <follow_path+0xd0>
		}
		if (c >= 0x80) {				/* Extended char */
    812e:	27 ff       	sbrs	r18, 7
    8130:	05 c0       	rjmp	.+10     	; 0x813c <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
    8132:	e2 2f       	mov	r30, r18
    8134:	f0 e0       	ldi	r31, 0x00	; 0
    8136:	e7 52       	subi	r30, 0x27	; 39
    8138:	fc 4d       	sbci	r31, 0xDC	; 220
    813a:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
    813c:	42 2f       	mov	r20, r18
    813e:	50 e0       	ldi	r21, 0x00	; 0
    8140:	e8 e0       	ldi	r30, 0x08	; 8
    8142:	f4 e2       	ldi	r31, 0x24	; 36
    8144:	01 c0       	rjmp	.+2      	; 0x8148 <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    8146:	31 96       	adiw	r30, 0x01	; 1
    8148:	80 81       	ld	r24, Z
    814a:	88 23       	and	r24, r24
    814c:	39 f0       	breq	.+14     	; 0x815c <follow_path+0x142>
    814e:	99 27       	eor	r25, r25
    8150:	87 fd       	sbrc	r24, 7
    8152:	90 95       	com	r25
    8154:	84 17       	cp	r24, r20
    8156:	95 07       	cpc	r25, r21
    8158:	b1 f7       	brne	.-20     	; 0x8146 <follow_path+0x12c>
    815a:	87 c0       	rjmp	.+270    	; 0x826a <follow_path+0x250>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    815c:	82 2f       	mov	r24, r18
    815e:	81 54       	subi	r24, 0x41	; 65
    8160:	8a 31       	cpi	r24, 0x1A	; 26
    8162:	10 f4       	brcc	.+4      	; 0x8168 <follow_path+0x14e>
				b |= 2;
    8164:	32 60       	ori	r19, 0x02	; 2
    8166:	06 c0       	rjmp	.+12     	; 0x8174 <follow_path+0x15a>
			} else {
				if (IsLower(c)) {
    8168:	82 2f       	mov	r24, r18
    816a:	81 56       	subi	r24, 0x61	; 97
    816c:	8a 31       	cpi	r24, 0x1A	; 26
    816e:	10 f4       	brcc	.+4      	; 0x8174 <follow_path+0x15a>
					b |= 1; c -= 0x20;
    8170:	31 60       	ori	r19, 0x01	; 1
    8172:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    8174:	f8 01       	movw	r30, r16
    8176:	e6 0f       	add	r30, r22
    8178:	f7 1f       	adc	r31, r23
    817a:	20 83       	st	Z, r18
    817c:	6f 5f       	subi	r22, 0xFF	; 255
    817e:	7f 4f       	sbci	r23, 0xFF	; 255
    8180:	b4 cf       	rjmp	.-152    	; 0x80ea <follow_path+0xd0>
    8182:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    8184:	67 2b       	or	r22, r23
    8186:	09 f4       	brne	.+2      	; 0x818a <follow_path+0x170>
    8188:	70 c0       	rjmp	.+224    	; 0x826a <follow_path+0x250>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    818a:	f8 01       	movw	r30, r16
    818c:	80 81       	ld	r24, Z
    818e:	85 3e       	cpi	r24, 0xE5	; 229
    8190:	09 f4       	brne	.+2      	; 0x8194 <follow_path+0x17a>
    8192:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    8194:	18 97       	sbiw	r26, 0x08	; 8
    8196:	11 f4       	brne	.+4      	; 0x819c <follow_path+0x182>
    8198:	33 0f       	add	r19, r19
    819a:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    819c:	23 2f       	mov	r18, r19
    819e:	30 e0       	ldi	r19, 0x00	; 0
    81a0:	c9 01       	movw	r24, r18
    81a2:	83 70       	andi	r24, 0x03	; 3
    81a4:	90 70       	andi	r25, 0x00	; 0
    81a6:	01 97       	sbiw	r24, 0x01	; 1
    81a8:	09 f4       	brne	.+2      	; 0x81ac <follow_path+0x192>
    81aa:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    81ac:	2c 70       	andi	r18, 0x0C	; 12
    81ae:	30 70       	andi	r19, 0x00	; 0
    81b0:	24 30       	cpi	r18, 0x04	; 4
    81b2:	31 05       	cpc	r19, r1
    81b4:	09 f4       	brne	.+2      	; 0x81b8 <follow_path+0x19e>
    81b6:	48 60       	ori	r20, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    81b8:	ec 0c       	add	r14, r12
    81ba:	fd 1c       	adc	r15, r13

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[11] = c;		/* Store NT flag, File name is created */
    81bc:	f8 01       	movw	r30, r16
    81be:	43 87       	std	Z+11, r20	; 0x0b
    81c0:	61 c0       	rjmp	.+194    	; 0x8284 <follow_path+0x26a>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    81c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    81c4:	5f 85       	ldd	r21, Y+15	; 0x0f
    81c6:	68 89       	ldd	r22, Y+16	; 0x10
    81c8:	79 89       	ldd	r23, Y+17	; 0x11
    81ca:	88 81       	ld	r24, Y
    81cc:	99 81       	ldd	r25, Y+1	; 0x01
    81ce:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    81d2:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    81d4:	00 97       	sbiw	r24, 0x00	; 0
    81d6:	01 f5       	brne	.+64     	; 0x8218 <follow_path+0x1fe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    81d8:	ea 89       	ldd	r30, Y+18	; 0x12
    81da:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    81dc:	80 81       	ld	r24, Z
    81de:	88 23       	and	r24, r24
    81e0:	19 f4       	brne	.+6      	; 0x81e8 <follow_path+0x1ce>
    81e2:	44 e0       	ldi	r20, 0x04	; 4
    81e4:	50 e0       	ldi	r21, 0x00	; 0
    81e6:	18 c0       	rjmp	.+48     	; 0x8218 <follow_path+0x1fe>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    81e8:	83 85       	ldd	r24, Z+11	; 0x0b
    81ea:	83 fd       	sbrc	r24, 3
    81ec:	0f c0       	rjmp	.+30     	; 0x820c <follow_path+0x1f2>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    81ee:	ac 89       	ldd	r26, Y+20	; 0x14
    81f0:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    81f2:	9f 01       	movw	r18, r30
    81f4:	25 5f       	subi	r18, 0xF5	; 245
    81f6:	3f 4f       	sbci	r19, 0xFF	; 255
    81f8:	e2 17       	cp	r30, r18
    81fa:	f3 07       	cpc	r31, r19
    81fc:	69 f0       	breq	.+26     	; 0x8218 <follow_path+0x1fe>
    81fe:	90 81       	ld	r25, Z
    8200:	8c 91       	ld	r24, X
    8202:	98 17       	cp	r25, r24
    8204:	19 f4       	brne	.+6      	; 0x820c <follow_path+0x1f2>
    8206:	31 96       	adiw	r30, 0x01	; 1
    8208:	11 96       	adiw	r26, 0x01	; 1
    820a:	f6 cf       	rjmp	.-20     	; 0x81f8 <follow_path+0x1de>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    820c:	ce 01       	movw	r24, r28
    820e:	60 e0       	ldi	r22, 0x00	; 0
    8210:	70 e0       	ldi	r23, 0x00	; 0
    8212:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <dir_next>
    8216:	3b c0       	rjmp	.+118    	; 0x828e <follow_path+0x274>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
    8218:	ec 89       	ldd	r30, Y+20	; 0x14
    821a:	fd 89       	ldd	r31, Y+21	; 0x15
    821c:	83 85       	ldd	r24, Z+11	; 0x0b
    821e:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    8220:	41 15       	cp	r20, r1
    8222:	51 05       	cpc	r21, r1
    8224:	39 f0       	breq	.+14     	; 0x8234 <follow_path+0x21a>
    8226:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    8228:	44 30       	cpi	r20, 0x04	; 4
    822a:	51 05       	cpc	r21, r1
    822c:	09 f5       	brne	.+66     	; 0x8270 <follow_path+0x256>
    822e:	88 23       	and	r24, r24
    8230:	09 f1       	breq	.+66     	; 0x8274 <follow_path+0x25a>
    8232:	22 c0       	rjmp	.+68     	; 0x8278 <follow_path+0x25e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    8234:	88 23       	and	r24, r24
    8236:	e1 f4       	brne	.+56     	; 0x8270 <follow_path+0x256>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    8238:	ea 89       	ldd	r30, Y+18	; 0x12
    823a:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    823c:	83 85       	ldd	r24, Z+11	; 0x0b
    823e:	84 ff       	sbrs	r24, 4
    8240:	19 c0       	rjmp	.+50     	; 0x8274 <follow_path+0x25a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8242:	84 89       	ldd	r24, Z+20	; 0x14
    8244:	95 89       	ldd	r25, Z+21	; 0x15
    8246:	a0 e0       	ldi	r26, 0x00	; 0
    8248:	b0 e0       	ldi	r27, 0x00	; 0
    824a:	dc 01       	movw	r26, r24
    824c:	99 27       	eor	r25, r25
    824e:	88 27       	eor	r24, r24
    8250:	22 8d       	ldd	r18, Z+26	; 0x1a
    8252:	33 8d       	ldd	r19, Z+27	; 0x1b
    8254:	40 e0       	ldi	r20, 0x00	; 0
    8256:	50 e0       	ldi	r21, 0x00	; 0
    8258:	82 2b       	or	r24, r18
    825a:	93 2b       	or	r25, r19
    825c:	a4 2b       	or	r26, r20
    825e:	b5 2b       	or	r27, r21
    8260:	8e 83       	std	Y+6, r24	; 0x06
    8262:	9f 83       	std	Y+7, r25	; 0x07
    8264:	a8 87       	std	Y+8, r26	; 0x08
    8266:	b9 87       	std	Y+9, r27	; 0x09
    8268:	09 cf       	rjmp	.-494    	; 0x807c <follow_path+0x62>
		}
    826a:	26 e0       	ldi	r18, 0x06	; 6
    826c:	30 e0       	ldi	r19, 0x00	; 0
    826e:	04 c0       	rjmp	.+8      	; 0x8278 <follow_path+0x25e>
    8270:	9a 01       	movw	r18, r20
    8272:	02 c0       	rjmp	.+4      	; 0x8278 <follow_path+0x25e>
    8274:	25 e0       	ldi	r18, 0x05	; 5
    8276:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    8278:	c9 01       	movw	r24, r18
    827a:	cd b7       	in	r28, 0x3d	; 61
    827c:	de b7       	in	r29, 0x3e	; 62
    827e:	ea e0       	ldi	r30, 0x0A	; 10
    8280:	0c 94 c7 57 	jmp	0xaf8e	; 0xaf8e <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    8284:	ce 01       	movw	r24, r28
    8286:	60 e0       	ldi	r22, 0x00	; 0
    8288:	70 e0       	ldi	r23, 0x00	; 0
    828a:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    828e:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    8290:	00 97       	sbiw	r24, 0x00	; 0
    8292:	09 f4       	brne	.+2      	; 0x8296 <follow_path+0x27c>
    8294:	96 cf       	rjmp	.-212    	; 0x81c2 <follow_path+0x1a8>
    8296:	c0 cf       	rjmp	.-128    	; 0x8218 <follow_path+0x1fe>
    8298:	40 e0       	ldi	r20, 0x00	; 0
    829a:	74 cf       	rjmp	.-280    	; 0x8184 <follow_path+0x16a>

0000829c <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    829c:	a4 e2       	ldi	r26, 0x24	; 36
    829e:	b0 e0       	ldi	r27, 0x00	; 0
    82a0:	e4 e5       	ldi	r30, 0x54	; 84
    82a2:	f1 e4       	ldi	r31, 0x41	; 65
    82a4:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    82a8:	8b a3       	std	Y+35, r24	; 0x23
    82aa:	9c a3       	std	Y+36, r25	; 0x24
    82ac:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
    82ae:	6d e0       	ldi	r22, 0x0D	; 13
    82b0:	e6 2e       	mov	r14, r22
    82b2:	f1 2c       	mov	r15, r1
    82b4:	ec 0e       	add	r14, r28
    82b6:	fd 1e       	adc	r15, r29
    82b8:	ce 01       	movw	r24, r28
    82ba:	83 96       	adiw	r24, 0x23	; 35
    82bc:	b7 01       	movw	r22, r14
    82be:	40 e0       	ldi	r20, 0x00	; 0
    82c0:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    82c4:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    82c6:	00 97       	sbiw	r24, 0x00	; 0
    82c8:	b9 f4       	brne	.+46     	; 0x82f8 <f_stat+0x5c>
		INITBUF(dj, sfn, lfn);
    82ca:	ce 01       	movw	r24, r28
    82cc:	01 96       	adiw	r24, 0x01	; 1
    82ce:	89 a3       	std	Y+33, r24	; 0x21
    82d0:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    82d2:	6b a1       	ldd	r22, Y+35	; 0x23
    82d4:	7c a1       	ldd	r23, Y+36	; 0x24
    82d6:	c7 01       	movw	r24, r14
    82d8:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    82dc:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follwo completed */
    82de:	00 97       	sbiw	r24, 0x00	; 0
    82e0:	59 f4       	brne	.+22     	; 0x82f8 <f_stat+0x5c>
			if (dj.dir)	/* Found an object */
    82e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    82e4:	98 a1       	ldd	r25, Y+32	; 0x20
    82e6:	89 2b       	or	r24, r25
    82e8:	19 f4       	brne	.+6      	; 0x82f0 <f_stat+0x54>
    82ea:	06 e0       	ldi	r16, 0x06	; 6
    82ec:	10 e0       	ldi	r17, 0x00	; 0
    82ee:	04 c0       	rjmp	.+8      	; 0x82f8 <f_stat+0x5c>
				get_fileinfo(&dj, fno);
    82f0:	c7 01       	movw	r24, r14
    82f2:	b6 01       	movw	r22, r12
    82f4:	0e 94 9a 30 	call	0x6134	; 0x6134 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    82f8:	c8 01       	movw	r24, r16
    82fa:	a4 96       	adiw	r28, 0x24	; 36
    82fc:	e8 e0       	ldi	r30, 0x08	; 8
    82fe:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0x14>

00008302 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    8302:	ae e0       	ldi	r26, 0x0E	; 14
    8304:	b0 e0       	ldi	r27, 0x00	; 0
    8306:	e7 e8       	ldi	r30, 0x87	; 135
    8308:	f1 e4       	ldi	r31, 0x41	; 65
    830a:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x1c>
    830e:	8c 01       	movw	r16, r24
    8310:	6d 87       	std	Y+13, r22	; 0x0d
    8312:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    8314:	ce 01       	movw	r24, r28
    8316:	0d 96       	adiw	r24, 0x0d	; 13
    8318:	b8 01       	movw	r22, r16
    831a:	40 e0       	ldi	r20, 0x00	; 0
    831c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    8320:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8322:	00 97       	sbiw	r24, 0x00	; 0
    8324:	09 f0       	breq	.+2      	; 0x8328 <f_opendir+0x26>
    8326:	42 c0       	rjmp	.+132    	; 0x83ac <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    8328:	ce 01       	movw	r24, r28
    832a:	01 96       	adiw	r24, 0x01	; 1
    832c:	d8 01       	movw	r26, r16
    832e:	54 96       	adiw	r26, 0x14	; 20
    8330:	8d 93       	st	X+, r24
    8332:	9c 93       	st	X, r25
    8334:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    8336:	6d 85       	ldd	r22, Y+13	; 0x0d
    8338:	7e 85       	ldd	r23, Y+14	; 0x0e
    833a:	c8 01       	movw	r24, r16
    833c:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    8340:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    8342:	00 97       	sbiw	r24, 0x00	; 0
    8344:	71 f5       	brne	.+92     	; 0x83a2 <f_opendir+0xa0>
			dir = dj->dir;
    8346:	d8 01       	movw	r26, r16
    8348:	52 96       	adiw	r26, 0x12	; 18
    834a:	ed 91       	ld	r30, X+
    834c:	fc 91       	ld	r31, X
    834e:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    8350:	30 97       	sbiw	r30, 0x00	; 0
    8352:	b9 f0       	breq	.+46     	; 0x8382 <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    8354:	83 85       	ldd	r24, Z+11	; 0x0b
    8356:	84 ff       	sbrs	r24, 4
    8358:	27 c0       	rjmp	.+78     	; 0x83a8 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    835a:	84 89       	ldd	r24, Z+20	; 0x14
    835c:	95 89       	ldd	r25, Z+21	; 0x15
    835e:	a0 e0       	ldi	r26, 0x00	; 0
    8360:	b0 e0       	ldi	r27, 0x00	; 0
    8362:	dc 01       	movw	r26, r24
    8364:	99 27       	eor	r25, r25
    8366:	88 27       	eor	r24, r24
    8368:	22 8d       	ldd	r18, Z+26	; 0x1a
    836a:	33 8d       	ldd	r19, Z+27	; 0x1b
    836c:	40 e0       	ldi	r20, 0x00	; 0
    836e:	50 e0       	ldi	r21, 0x00	; 0
    8370:	82 2b       	or	r24, r18
    8372:	93 2b       	or	r25, r19
    8374:	a4 2b       	or	r26, r20
    8376:	b5 2b       	or	r27, r21
    8378:	f8 01       	movw	r30, r16
    837a:	86 83       	std	Z+6, r24	; 0x06
    837c:	97 83       	std	Z+7, r25	; 0x07
    837e:	a0 87       	std	Z+8, r26	; 0x08
    8380:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    8382:	d8 01       	movw	r26, r16
    8384:	ed 91       	ld	r30, X+
    8386:	fc 91       	ld	r31, X
    8388:	11 97       	sbiw	r26, 0x01	; 1
    838a:	85 81       	ldd	r24, Z+5	; 0x05
    838c:	96 81       	ldd	r25, Z+6	; 0x06
    838e:	12 96       	adiw	r26, 0x02	; 2
    8390:	8d 93       	st	X+, r24
    8392:	9c 93       	st	X, r25
    8394:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    8396:	c8 01       	movw	r24, r16
    8398:	60 e0       	ldi	r22, 0x00	; 0
    839a:	70 e0       	ldi	r23, 0x00	; 0
    839c:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    83a0:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    83a2:	24 30       	cpi	r18, 0x04	; 4
    83a4:	31 05       	cpc	r19, r1
    83a6:	11 f4       	brne	.+4      	; 0x83ac <f_opendir+0xaa>
    83a8:	25 e0       	ldi	r18, 0x05	; 5
    83aa:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    83ac:	c9 01       	movw	r24, r18
    83ae:	2e 96       	adiw	r28, 0x0e	; 14
    83b0:	e4 e0       	ldi	r30, 0x04	; 4
    83b2:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x1c>

000083b6 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    83b6:	a4 e2       	ldi	r26, 0x24	; 36
    83b8:	b0 e0       	ldi	r27, 0x00	; 0
    83ba:	e1 ee       	ldi	r30, 0xE1	; 225
    83bc:	f1 e4       	ldi	r31, 0x41	; 65
    83be:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x1c>
    83c2:	8b a3       	std	Y+35, r24	; 0x23
    83c4:	9c a3       	std	Y+36, r25	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
    83c6:	8e 01       	movw	r16, r28
    83c8:	03 5f       	subi	r16, 0xF3	; 243
    83ca:	1f 4f       	sbci	r17, 0xFF	; 255
    83cc:	ce 01       	movw	r24, r28
    83ce:	83 96       	adiw	r24, 0x23	; 35
    83d0:	b8 01       	movw	r22, r16
    83d2:	40 e0       	ldi	r20, 0x00	; 0
    83d4:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    83d8:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    83da:	00 97       	sbiw	r24, 0x00	; 0
    83dc:	e9 f5       	brne	.+122    	; 0x8458 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    83de:	ce 01       	movw	r24, r28
    83e0:	01 96       	adiw	r24, 0x01	; 1
    83e2:	89 a3       	std	Y+33, r24	; 0x21
    83e4:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    83e6:	6b a1       	ldd	r22, Y+35	; 0x23
    83e8:	7c a1       	ldd	r23, Y+36	; 0x24
    83ea:	c8 01       	movw	r24, r16
    83ec:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    83f0:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    83f2:	00 97       	sbiw	r24, 0x00	; 0
    83f4:	61 f5       	brne	.+88     	; 0x844e <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    83f6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    83f8:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    83fa:	21 15       	cp	r18, r1
    83fc:	31 05       	cpc	r19, r1
    83fe:	39 f4       	brne	.+14     	; 0x840e <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    8400:	ed 85       	ldd	r30, Y+13	; 0x0d
    8402:	fe 85       	ldd	r31, Y+14	; 0x0e
    8404:	16 8a       	std	Z+22, r1	; 0x16
    8406:	17 8a       	std	Z+23, r1	; 0x17
    8408:	10 8e       	std	Z+24, r1	; 0x18
    840a:	11 8e       	std	Z+25, r1	; 0x19
    840c:	25 c0       	rjmp	.+74     	; 0x8458 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    840e:	d9 01       	movw	r26, r18
    8410:	1b 96       	adiw	r26, 0x0b	; 11
    8412:	8c 91       	ld	r24, X
    8414:	1b 97       	sbiw	r26, 0x0b	; 11
    8416:	84 ff       	sbrs	r24, 4
    8418:	1d c0       	rjmp	.+58     	; 0x8454 <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    841a:	0d 85       	ldd	r16, Y+13	; 0x0d
    841c:	1e 85       	ldd	r17, Y+14	; 0x0e
    841e:	54 96       	adiw	r26, 0x14	; 20
    8420:	8d 91       	ld	r24, X+
    8422:	9c 91       	ld	r25, X
    8424:	55 97       	sbiw	r26, 0x15	; 21
    8426:	a0 e0       	ldi	r26, 0x00	; 0
    8428:	b0 e0       	ldi	r27, 0x00	; 0
    842a:	dc 01       	movw	r26, r24
    842c:	99 27       	eor	r25, r25
    842e:	88 27       	eor	r24, r24
    8430:	f9 01       	movw	r30, r18
    8432:	22 8d       	ldd	r18, Z+26	; 0x1a
    8434:	33 8d       	ldd	r19, Z+27	; 0x1b
    8436:	40 e0       	ldi	r20, 0x00	; 0
    8438:	50 e0       	ldi	r21, 0x00	; 0
    843a:	82 2b       	or	r24, r18
    843c:	93 2b       	or	r25, r19
    843e:	a4 2b       	or	r26, r20
    8440:	b5 2b       	or	r27, r21
    8442:	f8 01       	movw	r30, r16
    8444:	86 8b       	std	Z+22, r24	; 0x16
    8446:	97 8b       	std	Z+23, r25	; 0x17
    8448:	a0 8f       	std	Z+24, r26	; 0x18
    844a:	b1 8f       	std	Z+25, r27	; 0x19
    844c:	05 c0       	rjmp	.+10     	; 0x8458 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    844e:	84 30       	cpi	r24, 0x04	; 4
    8450:	91 05       	cpc	r25, r1
    8452:	11 f4       	brne	.+4      	; 0x8458 <f_chdir+0xa2>
    8454:	65 e0       	ldi	r22, 0x05	; 5
    8456:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8458:	cb 01       	movw	r24, r22
    845a:	a4 96       	adiw	r28, 0x24	; 36
    845c:	e4 e0       	ldi	r30, 0x04	; 4
    845e:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x1c>

00008462 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8462:	0f 93       	push	r16
    8464:	1f 93       	push	r17
    8466:	cf 93       	push	r28
    8468:	df 93       	push	r29
    846a:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    846c:	60 e0       	ldi	r22, 0x00	; 0
    846e:	70 e0       	ldi	r23, 0x00	; 0
    8470:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    8474:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8476:	00 97       	sbiw	r24, 0x00	; 0
    8478:	e1 f5       	brne	.+120    	; 0x84f2 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    847a:	4e 85       	ldd	r20, Y+14	; 0x0e
    847c:	5f 85       	ldd	r21, Y+15	; 0x0f
    847e:	68 89       	ldd	r22, Y+16	; 0x10
    8480:	79 89       	ldd	r23, Y+17	; 0x11
    8482:	88 81       	ld	r24, Y
    8484:	99 81       	ldd	r25, Y+1	; 0x01
    8486:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    848a:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    848c:	00 97       	sbiw	r24, 0x00	; 0
    848e:	89 f5       	brne	.+98     	; 0x84f2 <dir_register+0x90>
			c = *dj->dir;
    8490:	ea 89       	ldd	r30, Y+18	; 0x12
    8492:	fb 89       	ldd	r31, Y+19	; 0x13
    8494:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    8496:	e5 3e       	cpi	r30, 0xE5	; 229
    8498:	91 f1       	breq	.+100    	; 0x84fe <dir_register+0x9c>
    849a:	ee 23       	and	r30, r30
    849c:	81 f1       	breq	.+96     	; 0x84fe <dir_register+0x9c>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    849e:	ce 01       	movw	r24, r28
    84a0:	61 e0       	ldi	r22, 0x01	; 1
    84a2:	70 e0       	ldi	r23, 0x00	; 0
    84a4:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <dir_next>
    84a8:	e5 cf       	rjmp	.-54     	; 0x8474 <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    84aa:	aa 89       	ldd	r26, Y+18	; 0x12
    84ac:	bb 89       	ldd	r27, Y+19	; 0x13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    84ae:	bd 01       	movw	r22, r26
    84b0:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    84b2:	cd 01       	movw	r24, r26
    84b4:	80 96       	adiw	r24, 0x20	; 32
    84b6:	01 c0       	rjmp	.+2      	; 0x84ba <dir_register+0x58>
    84b8:	11 92       	st	Z+, r1
    84ba:	e8 17       	cp	r30, r24
    84bc:	f9 07       	cpc	r31, r25
    84be:	e1 f7       	brne	.-8      	; 0x84b8 <dir_register+0x56>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    84c0:	0c 89       	ldd	r16, Y+20	; 0x14
    84c2:	1d 89       	ldd	r17, Y+21	; 0x15
	while (cnt--) *d++ = *s++;
    84c4:	a8 01       	movw	r20, r16
    84c6:	45 5f       	subi	r20, 0xF5	; 245
    84c8:	5f 4f       	sbci	r21, 0xFF	; 255
    84ca:	06 c0       	rjmp	.+12     	; 0x84d8 <dir_register+0x76>
    84cc:	f8 01       	movw	r30, r16
    84ce:	81 91       	ld	r24, Z+
    84d0:	8f 01       	movw	r16, r30
    84d2:	fb 01       	movw	r30, r22
    84d4:	81 93       	st	Z+, r24
    84d6:	bf 01       	movw	r22, r30
    84d8:	04 17       	cp	r16, r20
    84da:	15 07       	cpc	r17, r21
    84dc:	b9 f7       	brne	.-18     	; 0x84cc <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
    84de:	ec 89       	ldd	r30, Y+20	; 0x14
    84e0:	fd 89       	ldd	r31, Y+21	; 0x15
    84e2:	83 85       	ldd	r24, Z+11	; 0x0b
    84e4:	88 71       	andi	r24, 0x18	; 24
    84e6:	1c 96       	adiw	r26, 0x0c	; 12
    84e8:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    84ea:	e8 81       	ld	r30, Y
    84ec:	f9 81       	ldd	r31, Y+1	; 0x01
    84ee:	81 e0       	ldi	r24, 0x01	; 1
    84f0:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    84f2:	c9 01       	movw	r24, r18
    84f4:	df 91       	pop	r29
    84f6:	cf 91       	pop	r28
    84f8:	1f 91       	pop	r17
    84fa:	0f 91       	pop	r16
    84fc:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    84fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    8500:	5f 85       	ldd	r21, Y+15	; 0x0f
    8502:	68 89       	ldd	r22, Y+16	; 0x10
    8504:	79 89       	ldd	r23, Y+17	; 0x11
    8506:	88 81       	ld	r24, Y
    8508:	99 81       	ldd	r25, Y+1	; 0x01
    850a:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    850e:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8510:	00 97       	sbiw	r24, 0x00	; 0
    8512:	59 f2       	breq	.-106    	; 0x84aa <dir_register+0x48>
    8514:	ee cf       	rjmp	.-36     	; 0x84f2 <dir_register+0x90>

00008516 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8516:	cf 93       	push	r28
    8518:	df 93       	push	r29
    851a:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    851c:	6c 81       	ldd	r22, Y+4	; 0x04
    851e:	7d 81       	ldd	r23, Y+5	; 0x05
    8520:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    8524:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8526:	00 97       	sbiw	r24, 0x00	; 0
    8528:	99 f4       	brne	.+38     	; 0x8550 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    852a:	4e 85       	ldd	r20, Y+14	; 0x0e
    852c:	5f 85       	ldd	r21, Y+15	; 0x0f
    852e:	68 89       	ldd	r22, Y+16	; 0x10
    8530:	79 89       	ldd	r23, Y+17	; 0x11
    8532:	88 81       	ld	r24, Y
    8534:	99 81       	ldd	r25, Y+1	; 0x01
    8536:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    853a:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    853c:	00 97       	sbiw	r24, 0x00	; 0
    853e:	41 f4       	brne	.+16     	; 0x8550 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    8540:	ea 89       	ldd	r30, Y+18	; 0x12
    8542:	fb 89       	ldd	r31, Y+19	; 0x13
    8544:	85 ee       	ldi	r24, 0xE5	; 229
    8546:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    8548:	e8 81       	ld	r30, Y
    854a:	f9 81       	ldd	r31, Y+1	; 0x01
    854c:	81 e0       	ldi	r24, 0x01	; 1
    854e:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    8550:	c9 01       	movw	r24, r18
    8552:	df 91       	pop	r29
    8554:	cf 91       	pop	r28
    8556:	08 95       	ret

00008558 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    8558:	0f 93       	push	r16
    855a:	cf 93       	push	r28
    855c:	df 93       	push	r29
    855e:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    8560:	40 e0       	ldi	r20, 0x00	; 0
    8562:	50 e0       	ldi	r21, 0x00	; 0
    8564:	60 e0       	ldi	r22, 0x00	; 0
    8566:	70 e0       	ldi	r23, 0x00	; 0
    8568:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    856c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    856e:	00 97       	sbiw	r24, 0x00	; 0
    8570:	09 f0       	breq	.+2      	; 0x8574 <sync+0x1c>
    8572:	60 c0       	rjmp	.+192    	; 0x8634 <sync+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    8574:	88 81       	ld	r24, Y
    8576:	83 30       	cpi	r24, 0x03	; 3
    8578:	09 f0       	breq	.+2      	; 0x857c <sync+0x24>
    857a:	51 c0       	rjmp	.+162    	; 0x861e <sync+0xc6>
    857c:	89 85       	ldd	r24, Y+9	; 0x09
    857e:	88 23       	and	r24, r24
    8580:	09 f4       	brne	.+2      	; 0x8584 <sync+0x2c>
    8582:	4d c0       	rjmp	.+154    	; 0x861e <sync+0xc6>
			fs->winsect = 0;
    8584:	1e a6       	std	Y+46, r1	; 0x2e
    8586:	1f a6       	std	Y+47, r1	; 0x2f
    8588:	18 aa       	std	Y+48, r1	; 0x30
    858a:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    858c:	be 01       	movw	r22, r28
    858e:	6e 5c       	subi	r22, 0xCE	; 206
    8590:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8592:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    8594:	ce 01       	movw	r24, r28
    8596:	8e 5c       	subi	r24, 0xCE	; 206
    8598:	9d 4f       	sbci	r25, 0xFD	; 253
    859a:	01 c0       	rjmp	.+2      	; 0x859e <sync+0x46>
    859c:	11 92       	st	Z+, r1
    859e:	e8 17       	cp	r30, r24
    85a0:	f9 07       	cpc	r31, r25
    85a2:	e1 f7       	brne	.-8      	; 0x859c <sync+0x44>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    85a4:	c0 5d       	subi	r28, 0xD0	; 208
    85a6:	dd 4f       	sbci	r29, 0xFD	; 253
    85a8:	85 e5       	ldi	r24, 0x55	; 85
    85aa:	9a ea       	ldi	r25, 0xAA	; 170
    85ac:	88 83       	st	Y, r24
    85ae:	99 83       	std	Y+1, r25	; 0x01
    85b0:	c0 53       	subi	r28, 0x30	; 48
    85b2:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    85b4:	82 e5       	ldi	r24, 0x52	; 82
    85b6:	92 e5       	ldi	r25, 0x52	; 82
    85b8:	a1 e6       	ldi	r26, 0x61	; 97
    85ba:	b1 e4       	ldi	r27, 0x41	; 65
    85bc:	8a ab       	std	Y+50, r24	; 0x32
    85be:	9b ab       	std	Y+51, r25	; 0x33
    85c0:	ac ab       	std	Y+52, r26	; 0x34
    85c2:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    85c4:	ca 5e       	subi	r28, 0xEA	; 234
    85c6:	dd 4f       	sbci	r29, 0xFD	; 253
    85c8:	82 e7       	ldi	r24, 0x72	; 114
    85ca:	92 e7       	ldi	r25, 0x72	; 114
    85cc:	a1 e4       	ldi	r26, 0x41	; 65
    85ce:	b1 e6       	ldi	r27, 0x61	; 97
    85d0:	88 83       	st	Y, r24
    85d2:	99 83       	std	Y+1, r25	; 0x01
    85d4:	aa 83       	std	Y+2, r26	; 0x02
    85d6:	bb 83       	std	Y+3, r27	; 0x03
    85d8:	c6 51       	subi	r28, 0x16	; 22
    85da:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    85dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    85de:	9f 85       	ldd	r25, Y+15	; 0x0f
    85e0:	a8 89       	ldd	r26, Y+16	; 0x10
    85e2:	b9 89       	ldd	r27, Y+17	; 0x11
    85e4:	c6 5e       	subi	r28, 0xE6	; 230
    85e6:	dd 4f       	sbci	r29, 0xFD	; 253
    85e8:	88 83       	st	Y, r24
    85ea:	99 83       	std	Y+1, r25	; 0x01
    85ec:	aa 83       	std	Y+2, r26	; 0x02
    85ee:	bb 83       	std	Y+3, r27	; 0x03
    85f0:	ca 51       	subi	r28, 0x1A	; 26
    85f2:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    85f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    85f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    85f8:	ac 85       	ldd	r26, Y+12	; 0x0c
    85fa:	bd 85       	ldd	r27, Y+13	; 0x0d
    85fc:	c2 5e       	subi	r28, 0xE2	; 226
    85fe:	dd 4f       	sbci	r29, 0xFD	; 253
    8600:	88 83       	st	Y, r24
    8602:	99 83       	std	Y+1, r25	; 0x01
    8604:	aa 83       	std	Y+2, r26	; 0x02
    8606:	bb 83       	std	Y+3, r27	; 0x03
    8608:	ce 51       	subi	r28, 0x1E	; 30
    860a:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    860c:	2a 89       	ldd	r18, Y+18	; 0x12
    860e:	3b 89       	ldd	r19, Y+19	; 0x13
    8610:	4c 89       	ldd	r20, Y+20	; 0x14
    8612:	5d 89       	ldd	r21, Y+21	; 0x15
    8614:	89 81       	ldd	r24, Y+1	; 0x01
    8616:	01 e0       	ldi	r16, 0x01	; 1
    8618:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
			fs->fsi_flag = 0;
    861c:	19 86       	std	Y+9, r1	; 0x09
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    861e:	89 81       	ldd	r24, Y+1	; 0x01
    8620:	60 e0       	ldi	r22, 0x00	; 0
    8622:	40 e0       	ldi	r20, 0x00	; 0
    8624:	50 e0       	ldi	r21, 0x00	; 0
    8626:	0e 94 70 51 	call	0xa2e0	; 0xa2e0 <disk_ioctl>
    862a:	00 97       	sbiw	r24, 0x00	; 0
    862c:	11 f0       	breq	.+4      	; 0x8632 <sync+0xda>
    862e:	81 e0       	ldi	r24, 0x01	; 1
    8630:	90 e0       	ldi	r25, 0x00	; 0
    8632:	9c 01       	movw	r18, r24
			res = FR_DISK_ERR;
	}

	return res;
}
    8634:	c9 01       	movw	r24, r18
    8636:	df 91       	pop	r29
    8638:	cf 91       	pop	r28
    863a:	0f 91       	pop	r16
    863c:	08 95       	ret

0000863e <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    863e:	a4 e2       	ldi	r26, 0x24	; 36
    8640:	b0 e0       	ldi	r27, 0x00	; 0
    8642:	e5 e2       	ldi	r30, 0x25	; 37
    8644:	f3 e4       	ldi	r31, 0x43	; 67
    8646:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
    864a:	8b a3       	std	Y+35, r24	; 0x23
    864c:	9c a3       	std	Y+36, r25	; 0x24
    864e:	7b 01       	movw	r14, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8650:	8e 01       	movw	r16, r28
    8652:	03 5f       	subi	r16, 0xF3	; 243
    8654:	1f 4f       	sbci	r17, 0xFF	; 255
    8656:	ce 01       	movw	r24, r28
    8658:	83 96       	adiw	r24, 0x23	; 35
    865a:	b8 01       	movw	r22, r16
    865c:	41 e0       	ldi	r20, 0x01	; 1
    865e:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    8662:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8664:	00 97       	sbiw	r24, 0x00	; 0
    8666:	69 f5       	brne	.+90     	; 0x86c2 <f_utime+0x84>
		INITBUF(dj, sfn, lfn);
    8668:	ce 01       	movw	r24, r28
    866a:	01 96       	adiw	r24, 0x01	; 1
    866c:	89 a3       	std	Y+33, r24	; 0x21
    866e:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    8670:	6b a1       	ldd	r22, Y+35	; 0x23
    8672:	7c a1       	ldd	r23, Y+36	; 0x24
    8674:	c8 01       	movw	r24, r16
    8676:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    867a:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    867c:	00 97       	sbiw	r24, 0x00	; 0
    867e:	09 f5       	brne	.+66     	; 0x86c2 <f_utime+0x84>
    8680:	e9 a1       	ldd	r30, Y+33	; 0x21
    8682:	fa a1       	ldd	r31, Y+34	; 0x22
    8684:	83 85       	ldd	r24, Z+11	; 0x0b
    8686:	85 fd       	sbrc	r24, 5
    8688:	1a c0       	rjmp	.+52     	; 0x86be <f_utime+0x80>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    868a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    868c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    868e:	30 97       	sbiw	r30, 0x00	; 0
    8690:	b1 f0       	breq	.+44     	; 0x86be <f_utime+0x80>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    8692:	d7 01       	movw	r26, r14
    8694:	16 96       	adiw	r26, 0x06	; 6
    8696:	8d 91       	ld	r24, X+
    8698:	9c 91       	ld	r25, X
    869a:	17 97       	sbiw	r26, 0x07	; 7
    869c:	86 8b       	std	Z+22, r24	; 0x16
    869e:	97 8b       	std	Z+23, r25	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    86a0:	14 96       	adiw	r26, 0x04	; 4
    86a2:	8d 91       	ld	r24, X+
    86a4:	9c 91       	ld	r25, X
    86a6:	15 97       	sbiw	r26, 0x05	; 5
    86a8:	80 8f       	std	Z+24, r24	; 0x18
    86aa:	91 8f       	std	Z+25, r25	; 0x19
				dj.fs->wflag = 1;
    86ac:	ed 85       	ldd	r30, Y+13	; 0x0d
    86ae:	fe 85       	ldd	r31, Y+14	; 0x0e
    86b0:	81 e0       	ldi	r24, 0x01	; 1
    86b2:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    86b4:	cf 01       	movw	r24, r30
    86b6:	0e 94 ac 42 	call	0x8558	; 0x8558 <sync>
    86ba:	9c 01       	movw	r18, r24
    86bc:	02 c0       	rjmp	.+4      	; 0x86c2 <f_utime+0x84>
    86be:	26 e0       	ldi	r18, 0x06	; 6
    86c0:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    86c2:	c9 01       	movw	r24, r18
    86c4:	a4 96       	adiw	r28, 0x24	; 36
    86c6:	e6 e0       	ldi	r30, 0x06	; 6
    86c8:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

000086cc <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    86cc:	a4 e2       	ldi	r26, 0x24	; 36
    86ce:	b0 e0       	ldi	r27, 0x00	; 0
    86d0:	ec e6       	ldi	r30, 0x6C	; 108
    86d2:	f3 e4       	ldi	r31, 0x43	; 67
    86d4:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
    86d8:	8b a3       	std	Y+35, r24	; 0x23
    86da:	9c a3       	std	Y+36, r25	; 0x24
    86dc:	e6 2e       	mov	r14, r22
    86de:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    86e0:	8e 01       	movw	r16, r28
    86e2:	03 5f       	subi	r16, 0xF3	; 243
    86e4:	1f 4f       	sbci	r17, 0xFF	; 255
    86e6:	ce 01       	movw	r24, r28
    86e8:	83 96       	adiw	r24, 0x23	; 35
    86ea:	b8 01       	movw	r22, r16
    86ec:	41 e0       	ldi	r20, 0x01	; 1
    86ee:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    86f2:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    86f4:	00 97       	sbiw	r24, 0x00	; 0
    86f6:	49 f5       	brne	.+82     	; 0x874a <f_chmod+0x7e>
		INITBUF(dj, sfn, lfn);
    86f8:	ce 01       	movw	r24, r28
    86fa:	01 96       	adiw	r24, 0x01	; 1
    86fc:	89 a3       	std	Y+33, r24	; 0x21
    86fe:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8700:	6b a1       	ldd	r22, Y+35	; 0x23
    8702:	7c a1       	ldd	r23, Y+36	; 0x24
    8704:	c8 01       	movw	r24, r16
    8706:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    870a:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    870c:	00 97       	sbiw	r24, 0x00	; 0
    870e:	e9 f4       	brne	.+58     	; 0x874a <f_chmod+0x7e>
    8710:	e9 a1       	ldd	r30, Y+33	; 0x21
    8712:	fa a1       	ldd	r31, Y+34	; 0x22
    8714:	83 85       	ldd	r24, Z+11	; 0x0b
    8716:	85 fd       	sbrc	r24, 5
    8718:	16 c0       	rjmp	.+44     	; 0x8746 <f_chmod+0x7a>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    871a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    871c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    871e:	30 97       	sbiw	r30, 0x00	; 0
    8720:	91 f0       	breq	.+36     	; 0x8746 <f_chmod+0x7a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    8722:	9f 2d       	mov	r25, r15
    8724:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8726:	89 2f       	mov	r24, r25
    8728:	80 95       	com	r24
    872a:	23 85       	ldd	r18, Z+11	; 0x0b
    872c:	82 23       	and	r24, r18
    872e:	9e 21       	and	r25, r14
    8730:	89 2b       	or	r24, r25
    8732:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    8734:	ed 85       	ldd	r30, Y+13	; 0x0d
    8736:	fe 85       	ldd	r31, Y+14	; 0x0e
    8738:	81 e0       	ldi	r24, 0x01	; 1
    873a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    873c:	cf 01       	movw	r24, r30
    873e:	0e 94 ac 42 	call	0x8558	; 0x8558 <sync>
    8742:	9c 01       	movw	r18, r24
    8744:	02 c0       	rjmp	.+4      	; 0x874a <f_chmod+0x7e>
    8746:	26 e0       	ldi	r18, 0x06	; 6
    8748:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    874a:	c9 01       	movw	r24, r18
    874c:	a4 96       	adiw	r28, 0x24	; 36
    874e:	e6 e0       	ldi	r30, 0x06	; 6
    8750:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

00008754 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    8754:	af e4       	ldi	r26, 0x4F	; 79
    8756:	b0 e0       	ldi	r27, 0x00	; 0
    8758:	e0 eb       	ldi	r30, 0xB0	; 176
    875a:	f3 e4       	ldi	r31, 0x43	; 67
    875c:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    8760:	8e 01       	movw	r16, r28
    8762:	02 5b       	subi	r16, 0xB2	; 178
    8764:	1f 4f       	sbci	r17, 0xFF	; 255
    8766:	d8 01       	movw	r26, r16
    8768:	8d 93       	st	X+, r24
    876a:	9c 93       	st	X, r25
    876c:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    876e:	ce 01       	movw	r24, r28
    8770:	01 96       	adiw	r24, 0x01	; 1
    8772:	8e ab       	std	Y+54, r24	; 0x36
    8774:	9f ab       	std	Y+55, r25	; 0x37
	res = auto_mount(&path_old, &dj_old.fs, 1);
    8776:	32 e2       	ldi	r19, 0x22	; 34
    8778:	e3 2e       	mov	r14, r19
    877a:	f1 2c       	mov	r15, r1
    877c:	ec 0e       	add	r14, r28
    877e:	fd 1e       	adc	r15, r29
    8780:	c8 01       	movw	r24, r16
    8782:	b7 01       	movw	r22, r14
    8784:	41 e0       	ldi	r20, 0x01	; 1
    8786:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    878a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    878c:	00 97       	sbiw	r24, 0x00	; 0
    878e:	09 f0       	breq	.+2      	; 0x8792 <f_rename+0x3e>
    8790:	f0 c0       	rjmp	.+480    	; 0x8972 <f_rename+0x21e>
		dj_new.fs = dj_old.fs;
    8792:	8a a1       	ldd	r24, Y+34	; 0x22
    8794:	9b a1       	ldd	r25, Y+35	; 0x23
    8796:	88 af       	std	Y+56, r24	; 0x38
    8798:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    879a:	f8 01       	movw	r30, r16
    879c:	60 81       	ld	r22, Z
    879e:	71 81       	ldd	r23, Z+1	; 0x01
    87a0:	c7 01       	movw	r24, r14
    87a2:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    87a6:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
    87a8:	00 97       	sbiw	r24, 0x00	; 0
    87aa:	09 f0       	breq	.+2      	; 0x87ae <f_rename+0x5a>
    87ac:	e2 c0       	rjmp	.+452    	; 0x8972 <f_rename+0x21e>
    87ae:	ee a9       	ldd	r30, Y+54	; 0x36
    87b0:	ff a9       	ldd	r31, Y+55	; 0x37
    87b2:	83 85       	ldd	r24, Z+11	; 0x0b
    87b4:	85 ff       	sbrs	r24, 5
    87b6:	03 c0       	rjmp	.+6      	; 0x87be <f_rename+0x6a>
    87b8:	26 e0       	ldi	r18, 0x06	; 6
    87ba:	30 e0       	ldi	r19, 0x00	; 0
    87bc:	da c0       	rjmp	.+436    	; 0x8972 <f_rename+0x21e>
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    87be:	8c a9       	ldd	r24, Y+52	; 0x34
    87c0:	9d a9       	ldd	r25, Y+53	; 0x35
    87c2:	00 97       	sbiw	r24, 0x00	; 0
    87c4:	19 f4       	brne	.+6      	; 0x87cc <f_rename+0x78>
    87c6:	24 e0       	ldi	r18, 0x04	; 4
    87c8:	30 e0       	ldi	r19, 0x00	; 0
    87ca:	d3 c0       	rjmp	.+422    	; 0x8972 <f_rename+0x21e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    87cc:	de 01       	movw	r26, r28
    87ce:	1d 96       	adiw	r26, 0x0d	; 13
    87d0:	fc 01       	movw	r30, r24
    87d2:	02 c0       	rjmp	.+4      	; 0x87d8 <f_rename+0x84>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    87d4:	82 85       	ldd	r24, Z+10	; 0x0a
    87d6:	8d 93       	st	X+, r24
    87d8:	31 96       	adiw	r30, 0x01	; 1
    87da:	ae 15       	cp	r26, r14
    87dc:	bf 05       	cpc	r27, r15
    87de:	d1 f7       	brne	.-12     	; 0x87d4 <f_rename+0x80>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    87e0:	de 01       	movw	r26, r28
    87e2:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    87e4:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    87e6:	9d 01       	movw	r18, r26
    87e8:	02 c0       	rjmp	.+4      	; 0x87ee <f_rename+0x9a>
    87ea:	81 91       	ld	r24, Z+
    87ec:	8d 93       	st	X+, r24
    87ee:	e2 17       	cp	r30, r18
    87f0:	f3 07       	cpc	r31, r19
    87f2:	d9 f7       	brne	.-10     	; 0x87ea <f_rename+0x96>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    87f4:	8e 01       	movw	r16, r28
    87f6:	08 5c       	subi	r16, 0xC8	; 200
    87f8:	1f 4f       	sbci	r17, 0xFF	; 255
    87fa:	c8 01       	movw	r24, r16
    87fc:	b6 01       	movw	r22, r12
    87fe:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    8802:	9c 01       	movw	r18, r24
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    8804:	00 97       	sbiw	r24, 0x00	; 0
    8806:	19 f4       	brne	.+6      	; 0x880e <f_rename+0xba>
    8808:	28 e0       	ldi	r18, 0x08	; 8
    880a:	30 e0       	ldi	r19, 0x00	; 0
    880c:	b2 c0       	rjmp	.+356    	; 0x8972 <f_rename+0x21e>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    880e:	84 30       	cpi	r24, 0x04	; 4
    8810:	91 05       	cpc	r25, r1
    8812:	09 f0       	breq	.+2      	; 0x8816 <f_rename+0xc2>
    8814:	ae c0       	rjmp	.+348    	; 0x8972 <f_rename+0x21e>
		res = dir_register(&dj_new);			/* Register the new object */
    8816:	c8 01       	movw	r24, r16
    8818:	0e 94 31 42 	call	0x8462	; 0x8462 <dir_register>
    881c:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    881e:	00 97       	sbiw	r24, 0x00	; 0
    8820:	09 f0       	breq	.+2      	; 0x8824 <f_rename+0xd0>
    8822:	a7 c0       	rjmp	.+334    	; 0x8972 <f_rename+0x21e>
			dir = dj_new.dir;					/* Copy object information into new entry */
    8824:	fe 01       	movw	r30, r28
    8826:	e6 5b       	subi	r30, 0xB6	; 182
    8828:	ff 4f       	sbci	r31, 0xFF	; 255
    882a:	20 81       	ld	r18, Z
    882c:	31 81       	ldd	r19, Z+1	; 0x01

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    882e:	de 01       	movw	r26, r28
    8830:	1f 96       	adiw	r26, 0x0f	; 15
    8832:	f9 01       	movw	r30, r18
    8834:	02 c0       	rjmp	.+4      	; 0x883a <f_rename+0xe6>
	while (cnt--) *d++ = *s++;
    8836:	8d 91       	ld	r24, X+
    8838:	84 87       	std	Z+12, r24	; 0x0c
    883a:	31 96       	adiw	r30, 0x01	; 1
    883c:	ae 15       	cp	r26, r14
    883e:	bf 05       	cpc	r27, r15
    8840:	d1 f7       	brne	.-12     	; 0x8836 <f_rename+0xe2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    8842:	8d 85       	ldd	r24, Y+13	; 0x0d
    8844:	80 62       	ori	r24, 0x20	; 32
    8846:	d9 01       	movw	r26, r18
    8848:	1b 96       	adiw	r26, 0x0b	; 11
    884a:	8c 93       	st	X, r24
    884c:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    884e:	ea a1       	ldd	r30, Y+34	; 0x22
    8850:	fb a1       	ldd	r31, Y+35	; 0x23
    8852:	81 e0       	ldi	r24, 0x01	; 1
    8854:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    8856:	1b 96       	adiw	r26, 0x0b	; 11
    8858:	8c 91       	ld	r24, X
    885a:	1b 97       	sbiw	r26, 0x0b	; 11
    885c:	84 ff       	sbrs	r24, 4
    885e:	7a c0       	rjmp	.+244    	; 0x8954 <f_rename+0x200>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    8860:	c8 ac       	ldd	r12, Y+56	; 0x38
    8862:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8864:	5a 96       	adiw	r26, 0x1a	; 26
    8866:	8d 91       	ld	r24, X+
    8868:	9c 91       	ld	r25, X
    886a:	5b 97       	sbiw	r26, 0x1b	; 27
    886c:	54 96       	adiw	r26, 0x14	; 20
    886e:	2d 91       	ld	r18, X+
    8870:	3c 91       	ld	r19, X
    8872:	55 97       	sbiw	r26, 0x15	; 21
    8874:	82 2b       	or	r24, r18
    8876:	93 2b       	or	r25, r19
    8878:	7c 01       	movw	r14, r24
    887a:	00 e0       	ldi	r16, 0x00	; 0
    887c:	10 e0       	ldi	r17, 0x00	; 0
    887e:	8e ef       	ldi	r24, 0xFE	; 254
    8880:	9f ef       	ldi	r25, 0xFF	; 255
    8882:	af ef       	ldi	r26, 0xFF	; 255
    8884:	bf ef       	ldi	r27, 0xFF	; 255
    8886:	e8 0e       	add	r14, r24
    8888:	f9 1e       	adc	r15, r25
    888a:	0a 1f       	adc	r16, r26
    888c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    888e:	f6 01       	movw	r30, r12
    8890:	86 8d       	ldd	r24, Z+30	; 0x1e
    8892:	97 8d       	ldd	r25, Z+31	; 0x1f
    8894:	a0 a1       	ldd	r26, Z+32	; 0x20
    8896:	b1 a1       	ldd	r27, Z+33	; 0x21
    8898:	02 97       	sbiw	r24, 0x02	; 2
    889a:	a1 09       	sbc	r26, r1
    889c:	b1 09       	sbc	r27, r1
    889e:	e8 16       	cp	r14, r24
    88a0:	f9 06       	cpc	r15, r25
    88a2:	0a 07       	cpc	r16, r26
    88a4:	1b 07       	cpc	r17, r27
    88a6:	08 f0       	brcs	.+2      	; 0x88aa <f_rename+0x156>
    88a8:	62 c0       	rjmp	.+196    	; 0x896e <f_rename+0x21a>
	return clst * fs->csize + fs->database;
    88aa:	22 81       	ldd	r18, Z+2	; 0x02
    88ac:	30 e0       	ldi	r19, 0x00	; 0
    88ae:	40 e0       	ldi	r20, 0x00	; 0
    88b0:	50 e0       	ldi	r21, 0x00	; 0
    88b2:	c8 01       	movw	r24, r16
    88b4:	b7 01       	movw	r22, r14
    88b6:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    88ba:	ab 01       	movw	r20, r22
    88bc:	bc 01       	movw	r22, r24
    88be:	f6 01       	movw	r30, r12
    88c0:	82 a5       	ldd	r24, Z+42	; 0x2a
    88c2:	93 a5       	ldd	r25, Z+43	; 0x2b
    88c4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    88c6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    88c8:	48 0f       	add	r20, r24
    88ca:	59 1f       	adc	r21, r25
    88cc:	6a 1f       	adc	r22, r26
    88ce:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    88d0:	41 15       	cp	r20, r1
    88d2:	51 05       	cpc	r21, r1
    88d4:	61 05       	cpc	r22, r1
    88d6:	71 05       	cpc	r23, r1
    88d8:	09 f4       	brne	.+2      	; 0x88dc <f_rename+0x188>
    88da:	49 c0       	rjmp	.+146    	; 0x896e <f_rename+0x21a>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    88dc:	c6 01       	movw	r24, r12
    88de:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    88e2:	9c 01       	movw	r18, r24
					dir = dj_new.fs->win+32;
    88e4:	08 ad       	ldd	r16, Y+56	; 0x38
    88e6:	19 ad       	ldd	r17, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    88e8:	00 97       	sbiw	r24, 0x00	; 0
    88ea:	09 f0       	breq	.+2      	; 0x88ee <f_rename+0x19a>
    88ec:	42 c0       	rjmp	.+132    	; 0x8972 <f_rename+0x21e>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    88ee:	b8 01       	movw	r22, r16
    88f0:	6e 5a       	subi	r22, 0xAE	; 174
    88f2:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    88f4:	db 01       	movw	r26, r22
    88f6:	11 96       	adiw	r26, 0x01	; 1
    88f8:	8c 91       	ld	r24, X
    88fa:	8e 32       	cpi	r24, 0x2E	; 46
    88fc:	59 f5       	brne	.+86     	; 0x8954 <f_rename+0x200>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    88fe:	f8 01       	movw	r30, r16
    8900:	80 81       	ld	r24, Z
    8902:	83 30       	cpi	r24, 0x03	; 3
    8904:	a9 f4       	brne	.+42     	; 0x8930 <f_rename+0x1dc>
    8906:	fe 01       	movw	r30, r28
    8908:	fe 96       	adiw	r30, 0x3e	; 62
    890a:	20 81       	ld	r18, Z
    890c:	31 81       	ldd	r19, Z+1	; 0x01
    890e:	42 81       	ldd	r20, Z+2	; 0x02
    8910:	53 81       	ldd	r21, Z+3	; 0x03
    8912:	f8 01       	movw	r30, r16
    8914:	86 a1       	ldd	r24, Z+38	; 0x26
    8916:	97 a1       	ldd	r25, Z+39	; 0x27
    8918:	a0 a5       	ldd	r26, Z+40	; 0x28
    891a:	b1 a5       	ldd	r27, Z+41	; 0x29
    891c:	28 17       	cp	r18, r24
    891e:	39 07       	cpc	r19, r25
    8920:	4a 07       	cpc	r20, r26
    8922:	5b 07       	cpc	r21, r27
    8924:	29 f4       	brne	.+10     	; 0x8930 <f_rename+0x1dc>
    8926:	80 e0       	ldi	r24, 0x00	; 0
    8928:	90 e0       	ldi	r25, 0x00	; 0
    892a:	a0 e0       	ldi	r26, 0x00	; 0
    892c:	b0 e0       	ldi	r27, 0x00	; 0
    892e:	06 c0       	rjmp	.+12     	; 0x893c <f_rename+0x1e8>
    8930:	fe 01       	movw	r30, r28
    8932:	fe 96       	adiw	r30, 0x3e	; 62
    8934:	80 81       	ld	r24, Z
    8936:	91 81       	ldd	r25, Z+1	; 0x01
    8938:	a2 81       	ldd	r26, Z+2	; 0x02
    893a:	b3 81       	ldd	r27, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    893c:	fb 01       	movw	r30, r22
    893e:	82 8f       	std	Z+26, r24	; 0x1a
    8940:	93 8f       	std	Z+27, r25	; 0x1b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    8942:	cd 01       	movw	r24, r26
    8944:	aa 27       	eor	r26, r26
    8946:	bb 27       	eor	r27, r27
    8948:	84 8b       	std	Z+20, r24	; 0x14
    894a:	95 8b       	std	Z+21, r25	; 0x15
						dj_new.fs->wflag = 1;
    894c:	81 e0       	ldi	r24, 0x01	; 1
    894e:	d8 01       	movw	r26, r16
    8950:	14 96       	adiw	r26, 0x04	; 4
    8952:	8c 93       	st	X, r24
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    8954:	ce 01       	movw	r24, r28
    8956:	82 96       	adiw	r24, 0x22	; 34
    8958:	0e 94 8b 42 	call	0x8516	; 0x8516 <dir_remove>
    895c:	9c 01       	movw	r18, r24
				if (res == FR_OK)
    895e:	00 97       	sbiw	r24, 0x00	; 0
    8960:	41 f4       	brne	.+16     	; 0x8972 <f_rename+0x21e>
					res = sync(dj_old.fs);
    8962:	8a a1       	ldd	r24, Y+34	; 0x22
    8964:	9b a1       	ldd	r25, Y+35	; 0x23
    8966:	0e 94 ac 42 	call	0x8558	; 0x8558 <sync>
    896a:	9c 01       	movw	r18, r24
    896c:	02 c0       	rjmp	.+4      	; 0x8972 <f_rename+0x21e>
    896e:	22 e0       	ldi	r18, 0x02	; 2
    8970:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    8972:	c9 01       	movw	r24, r18
    8974:	c1 5b       	subi	r28, 0xB1	; 177
    8976:	df 4f       	sbci	r29, 0xFF	; 255
    8978:	e8 e0       	ldi	r30, 0x08	; 8
    897a:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0x14>

0000897e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    897e:	ae e2       	ldi	r26, 0x2E	; 46
    8980:	b0 e0       	ldi	r27, 0x00	; 0
    8982:	e5 ec       	ldi	r30, 0xC5	; 197
    8984:	f4 e4       	ldi	r31, 0x44	; 68
    8986:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    898a:	8b a3       	std	Y+35, r24	; 0x23
    898c:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
    898e:	ad e0       	ldi	r26, 0x0D	; 13
    8990:	ea 2e       	mov	r14, r26
    8992:	f1 2c       	mov	r15, r1
    8994:	ec 0e       	add	r14, r28
    8996:	fd 1e       	adc	r15, r29
    8998:	ce 01       	movw	r24, r28
    899a:	83 96       	adiw	r24, 0x23	; 35
    899c:	b7 01       	movw	r22, r14
    899e:	41 e0       	ldi	r20, 0x01	; 1
    89a0:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    89a4:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    89a6:	00 97       	sbiw	r24, 0x00	; 0
    89a8:	09 f0       	breq	.+2      	; 0x89ac <f_mkdir+0x2e>
    89aa:	3a c1       	rjmp	.+628    	; 0x8c20 <f_mkdir+0x2a2>

	INITBUF(dj, sfn, lfn);
    89ac:	ce 01       	movw	r24, r28
    89ae:	01 96       	adiw	r24, 0x01	; 1
    89b0:	89 a3       	std	Y+33, r24	; 0x21
    89b2:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    89b4:	6b a1       	ldd	r22, Y+35	; 0x23
    89b6:	7c a1       	ldd	r23, Y+36	; 0x24
    89b8:	c7 01       	movw	r24, r14
    89ba:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    89be:	8c 01       	movw	r16, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    89c0:	00 97       	sbiw	r24, 0x00	; 0
    89c2:	61 f0       	breq	.+24     	; 0x89dc <f_mkdir+0x5e>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
    89c4:	84 30       	cpi	r24, 0x04	; 4
    89c6:	91 05       	cpc	r25, r1
    89c8:	09 f0       	breq	.+2      	; 0x89cc <f_mkdir+0x4e>
    89ca:	2a c1       	rjmp	.+596    	; 0x8c20 <f_mkdir+0x2a2>
    89cc:	e9 a1       	ldd	r30, Y+33	; 0x21
    89ce:	fa a1       	ldd	r31, Y+34	; 0x22
    89d0:	83 85       	ldd	r24, Z+11	; 0x0b
    89d2:	85 ff       	sbrs	r24, 5
    89d4:	06 c0       	rjmp	.+12     	; 0x89e2 <f_mkdir+0x64>
    89d6:	06 e0       	ldi	r16, 0x06	; 6
    89d8:	10 e0       	ldi	r17, 0x00	; 0
    89da:	22 c1       	rjmp	.+580    	; 0x8c20 <f_mkdir+0x2a2>
    89dc:	08 e0       	ldi	r16, 0x08	; 8
    89de:	10 e0       	ldi	r17, 0x00	; 0
    89e0:	1f c1       	rjmp	.+574    	; 0x8c20 <f_mkdir+0x2a2>
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    89e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    89e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    89e6:	40 e0       	ldi	r20, 0x00	; 0
    89e8:	50 e0       	ldi	r21, 0x00	; 0
    89ea:	60 e0       	ldi	r22, 0x00	; 0
    89ec:	70 e0       	ldi	r23, 0x00	; 0
    89ee:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <create_chain>
    89f2:	3b 01       	movw	r6, r22
    89f4:	4c 01       	movw	r8, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    89f6:	61 15       	cp	r22, r1
    89f8:	71 05       	cpc	r23, r1
    89fa:	81 05       	cpc	r24, r1
    89fc:	91 05       	cpc	r25, r1
    89fe:	19 f4       	brne	.+6      	; 0x8a06 <f_mkdir+0x88>
    8a00:	07 e0       	ldi	r16, 0x07	; 7
    8a02:	10 e0       	ldi	r17, 0x00	; 0
    8a04:	0d c1       	rjmp	.+538    	; 0x8c20 <f_mkdir+0x2a2>
	if (dclst == 1) res = FR_INT_ERR;
    8a06:	61 30       	cpi	r22, 0x01	; 1
    8a08:	71 05       	cpc	r23, r1
    8a0a:	81 05       	cpc	r24, r1
    8a0c:	91 05       	cpc	r25, r1
    8a0e:	19 f4       	brne	.+6      	; 0x8a16 <f_mkdir+0x98>
    8a10:	02 e0       	ldi	r16, 0x02	; 2
    8a12:	10 e0       	ldi	r17, 0x00	; 0
    8a14:	05 c1       	rjmp	.+522    	; 0x8c20 <f_mkdir+0x2a2>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    8a16:	6f 3f       	cpi	r22, 0xFF	; 255
    8a18:	3f ef       	ldi	r19, 0xFF	; 255
    8a1a:	73 07       	cpc	r23, r19
    8a1c:	3f ef       	ldi	r19, 0xFF	; 255
    8a1e:	83 07       	cpc	r24, r19
    8a20:	3f ef       	ldi	r19, 0xFF	; 255
    8a22:	93 07       	cpc	r25, r19
    8a24:	09 f4       	brne	.+2      	; 0x8a28 <f_mkdir+0xaa>
    8a26:	01 c1       	rjmp	.+514    	; 0x8c2a <f_mkdir+0x2ac>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    8a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a2c:	40 e0       	ldi	r20, 0x00	; 0
    8a2e:	50 e0       	ldi	r21, 0x00	; 0
    8a30:	60 e0       	ldi	r22, 0x00	; 0
    8a32:	70 e0       	ldi	r23, 0x00	; 0
    8a34:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    8a38:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8a3a:	00 97       	sbiw	r24, 0x00	; 0
    8a3c:	09 f0       	breq	.+2      	; 0x8a40 <f_mkdir+0xc2>
    8a3e:	f0 c0       	rjmp	.+480    	; 0x8c20 <f_mkdir+0x2a2>
	dsect = clust2sect(dj.fs, dclst);
    8a40:	cd 84       	ldd	r12, Y+13	; 0x0d
    8a42:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8a44:	fe ef       	ldi	r31, 0xFE	; 254
    8a46:	ef 2e       	mov	r14, r31
    8a48:	ff ef       	ldi	r31, 0xFF	; 255
    8a4a:	ff 2e       	mov	r15, r31
    8a4c:	ff ef       	ldi	r31, 0xFF	; 255
    8a4e:	0f 2f       	mov	r16, r31
    8a50:	ff ef       	ldi	r31, 0xFF	; 255
    8a52:	1f 2f       	mov	r17, r31
    8a54:	e6 0c       	add	r14, r6
    8a56:	f7 1c       	adc	r15, r7
    8a58:	08 1d       	adc	r16, r8
    8a5a:	19 1d       	adc	r17, r9
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8a5c:	f6 01       	movw	r30, r12
    8a5e:	86 8d       	ldd	r24, Z+30	; 0x1e
    8a60:	97 8d       	ldd	r25, Z+31	; 0x1f
    8a62:	a0 a1       	ldd	r26, Z+32	; 0x20
    8a64:	b1 a1       	ldd	r27, Z+33	; 0x21
    8a66:	02 97       	sbiw	r24, 0x02	; 2
    8a68:	a1 09       	sbc	r26, r1
    8a6a:	b1 09       	sbc	r27, r1
    8a6c:	e8 16       	cp	r14, r24
    8a6e:	f9 06       	cpc	r15, r25
    8a70:	0a 07       	cpc	r16, r26
    8a72:	1b 07       	cpc	r17, r27
    8a74:	20 f0       	brcs	.+8      	; 0x8a7e <f_mkdir+0x100>
    8a76:	22 24       	eor	r2, r2
    8a78:	33 24       	eor	r3, r3
    8a7a:	21 01       	movw	r4, r2
    8a7c:	15 c0       	rjmp	.+42     	; 0x8aa8 <f_mkdir+0x12a>
	return clst * fs->csize + fs->database;
    8a7e:	d6 01       	movw	r26, r12
    8a80:	12 96       	adiw	r26, 0x02	; 2
    8a82:	2c 91       	ld	r18, X
    8a84:	30 e0       	ldi	r19, 0x00	; 0
    8a86:	40 e0       	ldi	r20, 0x00	; 0
    8a88:	50 e0       	ldi	r21, 0x00	; 0
    8a8a:	c8 01       	movw	r24, r16
    8a8c:	b7 01       	movw	r22, r14
    8a8e:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    8a92:	1b 01       	movw	r2, r22
    8a94:	2c 01       	movw	r4, r24
    8a96:	f6 01       	movw	r30, r12
    8a98:	82 a5       	ldd	r24, Z+42	; 0x2a
    8a9a:	93 a5       	ldd	r25, Z+43	; 0x2b
    8a9c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8a9e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8aa0:	28 0e       	add	r2, r24
    8aa2:	39 1e       	adc	r3, r25
    8aa4:	4a 1e       	adc	r4, r26
    8aa6:	5b 1e       	adc	r5, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    8aa8:	e2 e3       	ldi	r30, 0x32	; 50
    8aaa:	ae 2e       	mov	r10, r30
    8aac:	b1 2c       	mov	r11, r1
    8aae:	ac 0c       	add	r10, r12
    8ab0:	bd 1c       	adc	r11, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8ab2:	ad a2       	std	Y+37, r10	; 0x25
    8ab4:	be a2       	std	Y+38, r11	; 0x26
	while (cnt--) *d++ = (char)val;
    8ab6:	c6 01       	movw	r24, r12
    8ab8:	8e 5c       	subi	r24, 0xCE	; 206
    8aba:	9d 4f       	sbci	r25, 0xFD	; 253
    8abc:	05 c0       	rjmp	.+10     	; 0x8ac8 <f_mkdir+0x14a>
    8abe:	ad a1       	ldd	r26, Y+37	; 0x25
    8ac0:	be a1       	ldd	r27, Y+38	; 0x26
    8ac2:	1d 92       	st	X+, r1
    8ac4:	ad a3       	std	Y+37, r26	; 0x25
    8ac6:	be a3       	std	Y+38, r27	; 0x26
    8ac8:	ed a1       	ldd	r30, Y+37	; 0x25
    8aca:	fe a1       	ldd	r31, Y+38	; 0x26
    8acc:	e8 17       	cp	r30, r24
    8ace:	f9 07       	cpc	r31, r25
    8ad0:	b1 f7       	brne	.-20     	; 0x8abe <f_mkdir+0x140>
    8ad2:	f5 01       	movw	r30, r10
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    8ad4:	c5 01       	movw	r24, r10
    8ad6:	0b 96       	adiw	r24, 0x0b	; 11
    8ad8:	20 e2       	ldi	r18, 0x20	; 32
    8ada:	01 c0       	rjmp	.+2      	; 0x8ade <f_mkdir+0x160>
    8adc:	21 93       	st	Z+, r18
    8ade:	e8 17       	cp	r30, r24
    8ae0:	f9 07       	cpc	r31, r25
    8ae2:	e1 f7       	brne	.-8      	; 0x8adc <f_mkdir+0x15e>
    8ae4:	8e e2       	ldi	r24, 0x2E	; 46
    8ae6:	d6 01       	movw	r26, r12
    8ae8:	d2 96       	adiw	r26, 0x32	; 50
    8aea:	8c 93       	st	X, r24
    8aec:	d2 97       	sbiw	r26, 0x32	; 50
	dir[DIR_Attr] = AM_DIR;
    8aee:	80 e1       	ldi	r24, 0x10	; 16
    8af0:	dd 96       	adiw	r26, 0x3d	; 61
    8af2:	8c 93       	st	X, r24
	tim = get_fattime();
    8af4:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <get_fattime>
    8af8:	6f a3       	std	Y+39, r22	; 0x27
    8afa:	78 a7       	std	Y+40, r23	; 0x28
    8afc:	89 a7       	std	Y+41, r24	; 0x29
    8afe:	9a a7       	std	Y+42, r25	; 0x2a
	ST_DWORD(dir+DIR_WrtTime, tim);
    8b00:	f5 01       	movw	r30, r10
    8b02:	66 8b       	std	Z+22, r22	; 0x16
    8b04:	77 8b       	std	Z+23, r23	; 0x17
    8b06:	80 8f       	std	Z+24, r24	; 0x18
    8b08:	91 8f       	std	Z+25, r25	; 0x19
	ST_WORD(dir+DIR_FstClusLO, dclst);
    8b0a:	6d a6       	std	Y+45, r6	; 0x2d
    8b0c:	7e a6       	std	Y+46, r7	; 0x2e
    8b0e:	62 8e       	std	Z+26, r6	; 0x1a
    8b10:	73 8e       	std	Z+27, r7	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8b12:	c4 01       	movw	r24, r8
    8b14:	aa 27       	eor	r26, r26
    8b16:	bb 27       	eor	r27, r27
    8b18:	8b a7       	std	Y+43, r24	; 0x2b
    8b1a:	9c a7       	std	Y+44, r25	; 0x2c
    8b1c:	84 8b       	std	Z+20, r24	; 0x14
    8b1e:	95 8b       	std	Z+21, r25	; 0x15
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8b20:	95 01       	movw	r18, r10
    8b22:	20 5e       	subi	r18, 0xE0	; 224
    8b24:	3f 4f       	sbci	r19, 0xFF	; 255
    8b26:	03 c0       	rjmp	.+6      	; 0x8b2e <f_mkdir+0x1b0>
    8b28:	80 81       	ld	r24, Z
    8b2a:	80 a3       	std	Z+32, r24	; 0x20
    8b2c:	31 96       	adiw	r30, 0x01	; 1
    8b2e:	e2 17       	cp	r30, r18
    8b30:	f3 07       	cpc	r31, r19
    8b32:	d1 f7       	brne	.-12     	; 0x8b28 <f_mkdir+0x1aa>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    8b34:	23 e5       	ldi	r18, 0x53	; 83
    8b36:	30 e0       	ldi	r19, 0x00	; 0
    8b38:	c2 0e       	add	r12, r18
    8b3a:	d3 1e       	adc	r13, r19
    8b3c:	8e e2       	ldi	r24, 0x2E	; 46
    8b3e:	d6 01       	movw	r26, r12
    8b40:	8c 93       	st	X, r24
	pclst = dj.sclust;
    8b42:	2b 89       	ldd	r18, Y+19	; 0x13
    8b44:	3c 89       	ldd	r19, Y+20	; 0x14
    8b46:	4d 89       	ldd	r20, Y+21	; 0x15
    8b48:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    8b4a:	ed 85       	ldd	r30, Y+13	; 0x0d
    8b4c:	fe 85       	ldd	r31, Y+14	; 0x0e
    8b4e:	80 81       	ld	r24, Z
    8b50:	83 30       	cpi	r24, 0x03	; 3
    8b52:	69 f4       	brne	.+26     	; 0x8b6e <f_mkdir+0x1f0>
    8b54:	86 a1       	ldd	r24, Z+38	; 0x26
    8b56:	97 a1       	ldd	r25, Z+39	; 0x27
    8b58:	a0 a5       	ldd	r26, Z+40	; 0x28
    8b5a:	b1 a5       	ldd	r27, Z+41	; 0x29
    8b5c:	28 17       	cp	r18, r24
    8b5e:	39 07       	cpc	r19, r25
    8b60:	4a 07       	cpc	r20, r26
    8b62:	5b 07       	cpc	r21, r27
    8b64:	21 f4       	brne	.+8      	; 0x8b6e <f_mkdir+0x1f0>
    8b66:	20 e0       	ldi	r18, 0x00	; 0
    8b68:	30 e0       	ldi	r19, 0x00	; 0
    8b6a:	40 e0       	ldi	r20, 0x00	; 0
    8b6c:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    8b6e:	f5 01       	movw	r30, r10
    8b70:	22 af       	std	Z+58, r18	; 0x3a
    8b72:	33 af       	std	Z+59, r19	; 0x3b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    8b74:	ca 01       	movw	r24, r20
    8b76:	aa 27       	eor	r26, r26
    8b78:	bb 27       	eor	r27, r27
    8b7a:	84 ab       	std	Z+52, r24	; 0x34
    8b7c:	95 ab       	std	Z+53, r25	; 0x35
    8b7e:	72 01       	movw	r14, r4
    8b80:	61 01       	movw	r12, r2
    8b82:	1d c0       	rjmp	.+58     	; 0x8bbe <f_mkdir+0x240>
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8b84:	c6 a6       	std	Z+46, r12	; 0x2e
    8b86:	d7 a6       	std	Z+47, r13	; 0x2f
    8b88:	e0 aa       	std	Z+48, r14	; 0x30
    8b8a:	f1 aa       	std	Z+49, r15	; 0x31
		dj.fs->wflag = 1;
    8b8c:	21 e0       	ldi	r18, 0x01	; 1
    8b8e:	24 83       	std	Z+4, r18	; 0x04
		res = move_window(dj.fs, 0);
    8b90:	cf 01       	movw	r24, r30
    8b92:	40 e0       	ldi	r20, 0x00	; 0
    8b94:	50 e0       	ldi	r21, 0x00	; 0
    8b96:	60 e0       	ldi	r22, 0x00	; 0
    8b98:	70 e0       	ldi	r23, 0x00	; 0
    8b9a:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    8b9e:	8c 01       	movw	r16, r24
		if (res) LEAVE_FF(dj.fs, res);
    8ba0:	00 97       	sbiw	r24, 0x00	; 0
    8ba2:	f1 f5       	brne	.+124    	; 0x8c20 <f_mkdir+0x2a2>
    8ba4:	f5 01       	movw	r30, r10
    8ba6:	01 c0       	rjmp	.+2      	; 0x8baa <f_mkdir+0x22c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    8ba8:	11 92       	st	Z+, r1
    8baa:	8d a1       	ldd	r24, Y+37	; 0x25
    8bac:	9e a1       	ldd	r25, Y+38	; 0x26
    8bae:	e8 17       	cp	r30, r24
    8bb0:	f9 07       	cpc	r31, r25
    8bb2:	d1 f7       	brne	.-12     	; 0x8ba8 <f_mkdir+0x22a>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8bb4:	08 94       	sec
    8bb6:	c1 1c       	adc	r12, r1
    8bb8:	d1 1c       	adc	r13, r1
    8bba:	e1 1c       	adc	r14, r1
    8bbc:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    8bbe:	ed 85       	ldd	r30, Y+13	; 0x0d
    8bc0:	fe 85       	ldd	r31, Y+14	; 0x0e
    8bc2:	9c 2d       	mov	r25, r12
    8bc4:	92 19       	sub	r25, r2
    8bc6:	82 81       	ldd	r24, Z+2	; 0x02
    8bc8:	98 17       	cp	r25, r24
    8bca:	e0 f2       	brcs	.-72     	; 0x8b84 <f_mkdir+0x206>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    8bcc:	ce 01       	movw	r24, r28
    8bce:	0d 96       	adiw	r24, 0x0d	; 13
    8bd0:	0e 94 31 42 	call	0x8462	; 0x8462 <dir_register>
    8bd4:	8c 01       	movw	r16, r24
	if (res != FR_OK) {
    8bd6:	00 97       	sbiw	r24, 0x00	; 0
    8bd8:	39 f0       	breq	.+14     	; 0x8be8 <f_mkdir+0x26a>
		remove_chain(dj.fs, dclst);
    8bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    8bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    8bde:	b4 01       	movw	r22, r8
    8be0:	a3 01       	movw	r20, r6
    8be2:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <remove_chain>
    8be6:	1c c0       	rjmp	.+56     	; 0x8c20 <f_mkdir+0x2a2>
	} else {
		dir = dj.dir;
    8be8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8bea:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    8bec:	80 e1       	ldi	r24, 0x10	; 16
    8bee:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    8bf0:	8f a1       	ldd	r24, Y+39	; 0x27
    8bf2:	98 a5       	ldd	r25, Y+40	; 0x28
    8bf4:	a9 a5       	ldd	r26, Y+41	; 0x29
    8bf6:	ba a5       	ldd	r27, Y+42	; 0x2a
    8bf8:	86 8b       	std	Z+22, r24	; 0x16
    8bfa:	97 8b       	std	Z+23, r25	; 0x17
    8bfc:	a0 8f       	std	Z+24, r26	; 0x18
    8bfe:	b1 8f       	std	Z+25, r27	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    8c00:	ad a5       	ldd	r26, Y+45	; 0x2d
    8c02:	be a5       	ldd	r27, Y+46	; 0x2e
    8c04:	a2 8f       	std	Z+26, r26	; 0x1a
    8c06:	b3 8f       	std	Z+27, r27	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8c08:	2b a5       	ldd	r18, Y+43	; 0x2b
    8c0a:	3c a5       	ldd	r19, Y+44	; 0x2c
    8c0c:	24 8b       	std	Z+20, r18	; 0x14
    8c0e:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    8c10:	ed 85       	ldd	r30, Y+13	; 0x0d
    8c12:	fe 85       	ldd	r31, Y+14	; 0x0e
    8c14:	81 e0       	ldi	r24, 0x01	; 1
    8c16:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    8c18:	cf 01       	movw	r24, r30
    8c1a:	0e 94 ac 42 	call	0x8558	; 0x8558 <sync>
    8c1e:	8c 01       	movw	r16, r24
	}

	LEAVE_FF(dj.fs, res);
}
    8c20:	c8 01       	movw	r24, r16
    8c22:	ae 96       	adiw	r28, 0x2e	; 46
    8c24:	e2 e1       	ldi	r30, 0x12	; 18
    8c26:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    8c2a:	01 e0       	ldi	r16, 0x01	; 1
    8c2c:	10 e0       	ldi	r17, 0x00	; 0
    8c2e:	f8 cf       	rjmp	.-16     	; 0x8c20 <f_mkdir+0x2a2>

00008c30 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    8c30:	cf 93       	push	r28
    8c32:	df 93       	push	r29
    8c34:	ec 01       	movw	r28, r24
    8c36:	24 e0       	ldi	r18, 0x04	; 4
    8c38:	30 e0       	ldi	r19, 0x00	; 0
    8c3a:	19 c0       	rjmp	.+50     	; 0x8c6e <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    8c3c:	88 81       	ld	r24, Y
    8c3e:	99 81       	ldd	r25, Y+1	; 0x01
    8c40:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    8c44:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8c46:	00 97       	sbiw	r24, 0x00	; 0
    8c48:	f1 f4       	brne	.+60     	; 0x8c86 <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8c4a:	ea 89       	ldd	r30, Y+18	; 0x12
    8c4c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    8c4e:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8c50:	88 23       	and	r24, r24
    8c52:	09 f1       	breq	.+66     	; 0x8c96 <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    8c54:	85 3e       	cpi	r24, 0xE5	; 229
    8c56:	19 f0       	breq	.+6      	; 0x8c5e <dir_read+0x2e>
    8c58:	83 85       	ldd	r24, Z+11	; 0x0b
    8c5a:	83 ff       	sbrs	r24, 3
    8c5c:	18 c0       	rjmp	.+48     	; 0x8c8e <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    8c5e:	ce 01       	movw	r24, r28
    8c60:	60 e0       	ldi	r22, 0x00	; 0
    8c62:	70 e0       	ldi	r23, 0x00	; 0
    8c64:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <dir_next>
    8c68:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8c6a:	00 97       	sbiw	r24, 0x00	; 0
    8c6c:	61 f4       	brne	.+24     	; 0x8c86 <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    8c6e:	4e 85       	ldd	r20, Y+14	; 0x0e
    8c70:	5f 85       	ldd	r21, Y+15	; 0x0f
    8c72:	68 89       	ldd	r22, Y+16	; 0x10
    8c74:	79 89       	ldd	r23, Y+17	; 0x11
    8c76:	41 15       	cp	r20, r1
    8c78:	51 05       	cpc	r21, r1
    8c7a:	61 05       	cpc	r22, r1
    8c7c:	71 05       	cpc	r23, r1
    8c7e:	f1 f6       	brne	.-68     	; 0x8c3c <dir_read+0xc>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8c80:	21 15       	cp	r18, r1
    8c82:	31 05       	cpc	r19, r1
    8c84:	21 f0       	breq	.+8      	; 0x8c8e <dir_read+0x5e>
    8c86:	1e 86       	std	Y+14, r1	; 0x0e
    8c88:	1f 86       	std	Y+15, r1	; 0x0f
    8c8a:	18 8a       	std	Y+16, r1	; 0x10
    8c8c:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    8c8e:	c9 01       	movw	r24, r18
    8c90:	df 91       	pop	r29
    8c92:	cf 91       	pop	r28
    8c94:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8c96:	24 e0       	ldi	r18, 0x04	; 4
    8c98:	30 e0       	ldi	r19, 0x00	; 0
    8c9a:	f5 cf       	rjmp	.-22     	; 0x8c86 <dir_read+0x56>

00008c9c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    8c9c:	aa e3       	ldi	r26, 0x3A	; 58
    8c9e:	b0 e0       	ldi	r27, 0x00	; 0
    8ca0:	e4 e5       	ldi	r30, 0x54	; 84
    8ca2:	f6 e4       	ldi	r31, 0x46	; 70
    8ca4:	0c 94 ad 57 	jmp	0xaf5a	; 0xaf5a <__prologue_saves__+0x14>
    8ca8:	89 af       	std	Y+57, r24	; 0x39
    8caa:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
    8cac:	8d e0       	ldi	r24, 0x0D	; 13
    8cae:	c8 2e       	mov	r12, r24
    8cb0:	d1 2c       	mov	r13, r1
    8cb2:	cc 0e       	add	r12, r28
    8cb4:	dd 1e       	adc	r13, r29
    8cb6:	ce 01       	movw	r24, r28
    8cb8:	c9 96       	adiw	r24, 0x39	; 57
    8cba:	b6 01       	movw	r22, r12
    8cbc:	41 e0       	ldi	r20, 0x01	; 1
    8cbe:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
    8cc2:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8cc4:	00 97       	sbiw	r24, 0x00	; 0
    8cc6:	09 f0       	breq	.+2      	; 0x8cca <f_unlink+0x2e>
    8cc8:	79 c0       	rjmp	.+242    	; 0x8dbc <f_unlink+0x120>

	INITBUF(dj, sfn, lfn);
    8cca:	ce 01       	movw	r24, r28
    8ccc:	01 96       	adiw	r24, 0x01	; 1
    8cce:	89 a3       	std	Y+33, r24	; 0x21
    8cd0:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    8cd2:	69 ad       	ldd	r22, Y+57	; 0x39
    8cd4:	7a ad       	ldd	r23, Y+58	; 0x3a
    8cd6:	c6 01       	movw	r24, r12
    8cd8:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    8cdc:	9c 01       	movw	r18, r24
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8cde:	00 97       	sbiw	r24, 0x00	; 0
    8ce0:	09 f0       	breq	.+2      	; 0x8ce4 <f_unlink+0x48>
    8ce2:	6c c0       	rjmp	.+216    	; 0x8dbc <f_unlink+0x120>
    8ce4:	e9 a1       	ldd	r30, Y+33	; 0x21
    8ce6:	fa a1       	ldd	r31, Y+34	; 0x22
    8ce8:	83 85       	ldd	r24, Z+11	; 0x0b
    8cea:	85 fd       	sbrc	r24, 5
    8cec:	62 c0       	rjmp	.+196    	; 0x8db2 <f_unlink+0x116>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
    8cee:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8cf0:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    8cf2:	30 97       	sbiw	r30, 0x00	; 0
    8cf4:	09 f4       	brne	.+2      	; 0x8cf8 <f_unlink+0x5c>
    8cf6:	5d c0       	rjmp	.+186    	; 0x8db2 <f_unlink+0x116>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    8cf8:	83 85       	ldd	r24, Z+11	; 0x0b
    8cfa:	28 2f       	mov	r18, r24
    8cfc:	80 fd       	sbrc	r24, 0
    8cfe:	5c c0       	rjmp	.+184    	; 0x8db8 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8d00:	84 89       	ldd	r24, Z+20	; 0x14
    8d02:	95 89       	ldd	r25, Z+21	; 0x15
    8d04:	a0 e0       	ldi	r26, 0x00	; 0
    8d06:	b0 e0       	ldi	r27, 0x00	; 0
    8d08:	8c 01       	movw	r16, r24
    8d0a:	ff 24       	eor	r15, r15
    8d0c:	ee 24       	eor	r14, r14
    8d0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    8d10:	93 8d       	ldd	r25, Z+27	; 0x1b
    8d12:	a0 e0       	ldi	r26, 0x00	; 0
    8d14:	b0 e0       	ldi	r27, 0x00	; 0
    8d16:	e8 2a       	or	r14, r24
    8d18:	f9 2a       	or	r15, r25
    8d1a:	0a 2b       	or	r16, r26
    8d1c:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    8d1e:	24 ff       	sbrs	r18, 4
    8d20:	2d c0       	rjmp	.+90     	; 0x8d7c <f_unlink+0xe0>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    8d22:	82 e0       	ldi	r24, 0x02	; 2
    8d24:	e8 16       	cp	r14, r24
    8d26:	f1 04       	cpc	r15, r1
    8d28:	01 05       	cpc	r16, r1
    8d2a:	11 05       	cpc	r17, r1
    8d2c:	18 f4       	brcc	.+6      	; 0x8d34 <f_unlink+0x98>
    8d2e:	22 e0       	ldi	r18, 0x02	; 2
    8d30:	30 e0       	ldi	r19, 0x00	; 0
    8d32:	44 c0       	rjmp	.+136    	; 0x8dbc <f_unlink+0x120>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8d34:	de 01       	movw	r26, r28
    8d36:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    8d38:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    8d3a:	9d 01       	movw	r18, r26
    8d3c:	02 c0       	rjmp	.+4      	; 0x8d42 <f_unlink+0xa6>
    8d3e:	81 91       	ld	r24, Z+
    8d40:	8d 93       	st	X+, r24
    8d42:	e2 17       	cp	r30, r18
    8d44:	f3 07       	cpc	r31, r19
    8d46:	d9 f7       	brne	.-10     	; 0x8d3e <f_unlink+0xa2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    8d48:	e9 a6       	std	Y+41, r14	; 0x29
    8d4a:	fa a6       	std	Y+42, r15	; 0x2a
    8d4c:	0b a7       	std	Y+43, r16	; 0x2b
    8d4e:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    8d50:	b3 e2       	ldi	r27, 0x23	; 35
    8d52:	cb 2e       	mov	r12, r27
    8d54:	d1 2c       	mov	r13, r1
    8d56:	cc 0e       	add	r12, r28
    8d58:	dd 1e       	adc	r13, r29
    8d5a:	c6 01       	movw	r24, r12
    8d5c:	62 e0       	ldi	r22, 0x02	; 2
    8d5e:	70 e0       	ldi	r23, 0x00	; 0
    8d60:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    8d64:	9c 01       	movw	r18, r24
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8d66:	00 97       	sbiw	r24, 0x00	; 0
    8d68:	49 f5       	brne	.+82     	; 0x8dbc <f_unlink+0x120>
		res = dir_read(&sdj);
    8d6a:	c6 01       	movw	r24, r12
    8d6c:	0e 94 18 46 	call	0x8c30	; 0x8c30 <dir_read>
    8d70:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    8d72:	00 97       	sbiw	r24, 0x00	; 0
    8d74:	09 f1       	breq	.+66     	; 0x8db8 <f_unlink+0x11c>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    8d76:	84 30       	cpi	r24, 0x04	; 4
    8d78:	91 05       	cpc	r25, r1
    8d7a:	01 f5       	brne	.+64     	; 0x8dbc <f_unlink+0x120>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    8d7c:	ce 01       	movw	r24, r28
    8d7e:	0d 96       	adiw	r24, 0x0d	; 13
    8d80:	0e 94 8b 42 	call	0x8516	; 0x8516 <dir_remove>
    8d84:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8d86:	00 97       	sbiw	r24, 0x00	; 0
    8d88:	c9 f4       	brne	.+50     	; 0x8dbc <f_unlink+0x120>
		if (dclst)
    8d8a:	e1 14       	cp	r14, r1
    8d8c:	f1 04       	cpc	r15, r1
    8d8e:	01 05       	cpc	r16, r1
    8d90:	11 05       	cpc	r17, r1
    8d92:	49 f0       	breq	.+18     	; 0x8da6 <f_unlink+0x10a>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    8d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d98:	b8 01       	movw	r22, r16
    8d9a:	a7 01       	movw	r20, r14
    8d9c:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <remove_chain>
    8da0:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = sync(dj.fs);
    8da2:	00 97       	sbiw	r24, 0x00	; 0
    8da4:	59 f4       	brne	.+22     	; 0x8dbc <f_unlink+0x120>
    8da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    8da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    8daa:	0e 94 ac 42 	call	0x8558	; 0x8558 <sync>
    8dae:	9c 01       	movw	r18, r24
    8db0:	05 c0       	rjmp	.+10     	; 0x8dbc <f_unlink+0x120>
    8db2:	26 e0       	ldi	r18, 0x06	; 6
    8db4:	30 e0       	ldi	r19, 0x00	; 0
    8db6:	02 c0       	rjmp	.+4      	; 0x8dbc <f_unlink+0x120>
    8db8:	27 e0       	ldi	r18, 0x07	; 7
    8dba:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8dbc:	c9 01       	movw	r24, r18
    8dbe:	ea 96       	adiw	r28, 0x3a	; 58
    8dc0:	e8 e0       	ldi	r30, 0x08	; 8
    8dc2:	0c 94 c9 57 	jmp	0xaf92	; 0xaf92 <__epilogue_restores__+0x14>

00008dc6 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8dc6:	ac e0       	ldi	r26, 0x0C	; 12
    8dc8:	b0 e0       	ldi	r27, 0x00	; 0
    8dca:	e9 ee       	ldi	r30, 0xE9	; 233
    8dcc:	f6 e4       	ldi	r31, 0x46	; 70
    8dce:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
    8dd2:	8c 01       	movw	r16, r24
    8dd4:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    8dd6:	fc 01       	movw	r30, r24
    8dd8:	62 81       	ldd	r22, Z+2	; 0x02
    8dda:	73 81       	ldd	r23, Z+3	; 0x03
    8ddc:	80 81       	ld	r24, Z
    8dde:	91 81       	ldd	r25, Z+1	; 0x01
    8de0:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <validate>
	if (res == FR_OK) {
    8de4:	00 97       	sbiw	r24, 0x00	; 0
    8de6:	69 f4       	brne	.+26     	; 0x8e02 <f_readdir+0x3c>
		INITBUF((*dj), sfn, lfn);
    8de8:	ce 01       	movw	r24, r28
    8dea:	01 96       	adiw	r24, 0x01	; 1
    8dec:	f8 01       	movw	r30, r16
    8dee:	84 8b       	std	Z+20, r24	; 0x14
    8df0:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    8df2:	e1 14       	cp	r14, r1
    8df4:	f1 04       	cpc	r15, r1
    8df6:	39 f4       	brne	.+14     	; 0x8e06 <f_readdir+0x40>
			res = dir_seek(dj, 0);
    8df8:	c8 01       	movw	r24, r16
    8dfa:	60 e0       	ldi	r22, 0x00	; 0
    8dfc:	70 e0       	ldi	r23, 0x00	; 0
    8dfe:	0e 94 2b 39 	call	0x7256	; 0x7256 <dir_seek>
    8e02:	9c 01       	movw	r18, r24
    8e04:	23 c0       	rjmp	.+70     	; 0x8e4c <f_readdir+0x86>
		} else {
			res = dir_read(dj);
    8e06:	c8 01       	movw	r24, r16
    8e08:	0e 94 18 46 	call	0x8c30	; 0x8c30 <dir_read>
    8e0c:	9c 01       	movw	r18, r24
			if (res == FR_NO_FILE) {
    8e0e:	84 30       	cpi	r24, 0x04	; 4
    8e10:	91 05       	cpc	r25, r1
    8e12:	31 f4       	brne	.+12     	; 0x8e20 <f_readdir+0x5a>
				dj->sect = 0;
    8e14:	f8 01       	movw	r30, r16
    8e16:	16 86       	std	Z+14, r1	; 0x0e
    8e18:	17 86       	std	Z+15, r1	; 0x0f
    8e1a:	10 8a       	std	Z+16, r1	; 0x10
    8e1c:	11 8a       	std	Z+17, r1	; 0x11
    8e1e:	02 c0       	rjmp	.+4      	; 0x8e24 <f_readdir+0x5e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    8e20:	00 97       	sbiw	r24, 0x00	; 0
    8e22:	a1 f4       	brne	.+40     	; 0x8e4c <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    8e24:	c8 01       	movw	r24, r16
    8e26:	b7 01       	movw	r22, r14
    8e28:	0e 94 9a 30 	call	0x6134	; 0x6134 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    8e2c:	c8 01       	movw	r24, r16
    8e2e:	60 e0       	ldi	r22, 0x00	; 0
    8e30:	70 e0       	ldi	r23, 0x00	; 0
    8e32:	0e 94 a1 3e 	call	0x7d42	; 0x7d42 <dir_next>
    8e36:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    8e38:	84 30       	cpi	r24, 0x04	; 4
    8e3a:	91 05       	cpc	r25, r1
    8e3c:	39 f4       	brne	.+14     	; 0x8e4c <f_readdir+0x86>
					dj->sect = 0;
    8e3e:	f8 01       	movw	r30, r16
    8e40:	16 86       	std	Z+14, r1	; 0x0e
    8e42:	17 86       	std	Z+15, r1	; 0x0f
    8e44:	10 8a       	std	Z+16, r1	; 0x10
    8e46:	11 8a       	std	Z+17, r1	; 0x11
    8e48:	20 e0       	ldi	r18, 0x00	; 0
    8e4a:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    8e4c:	c9 01       	movw	r24, r18
    8e4e:	2c 96       	adiw	r28, 0x0c	; 12
    8e50:	e6 e0       	ldi	r30, 0x06	; 6
    8e52:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

00008e56 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    8e56:	a4 e0       	ldi	r26, 0x04	; 4
    8e58:	b0 e0       	ldi	r27, 0x00	; 0
    8e5a:	e1 e3       	ldi	r30, 0x31	; 49
    8e5c:	f7 e4       	ldi	r31, 0x47	; 71
    8e5e:	0c 94 a4 57 	jmp	0xaf48	; 0xaf48 <__prologue_saves__+0x2>
    8e62:	89 83       	std	Y+1, r24	; 0x01
    8e64:	9a 83       	std	Y+2, r25	; 0x02
    8e66:	6b 83       	std	Y+3, r22	; 0x03
    8e68:	7c 83       	std	Y+4, r23	; 0x04
    8e6a:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
    8e6c:	ce 01       	movw	r24, r28
    8e6e:	01 96       	adiw	r24, 0x01	; 1
    8e70:	ba 01       	movw	r22, r20
    8e72:	40 e0       	ldi	r20, 0x00	; 0
    8e74:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    8e78:	00 97       	sbiw	r24, 0x00	; 0
    8e7a:	11 f0       	breq	.+4      	; 0x8e80 <f_getfree+0x2a>
    8e7c:	9c 01       	movw	r18, r24
    8e7e:	c1 c0       	rjmp	.+386    	; 0x9002 <f_getfree+0x1ac>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    8e80:	d2 01       	movw	r26, r4
    8e82:	ed 91       	ld	r30, X+
    8e84:	fc 91       	ld	r31, X
    8e86:	26 85       	ldd	r18, Z+14	; 0x0e
    8e88:	37 85       	ldd	r19, Z+15	; 0x0f
    8e8a:	40 89       	ldd	r20, Z+16	; 0x10
    8e8c:	51 89       	ldd	r21, Z+17	; 0x11
    8e8e:	e6 8c       	ldd	r14, Z+30	; 0x1e
    8e90:	f7 8c       	ldd	r15, Z+31	; 0x1f
    8e92:	00 a1       	ldd	r16, Z+32	; 0x20
    8e94:	11 a1       	ldd	r17, Z+33	; 0x21
    8e96:	d8 01       	movw	r26, r16
    8e98:	c7 01       	movw	r24, r14
    8e9a:	02 97       	sbiw	r24, 0x02	; 2
    8e9c:	a1 09       	sbc	r26, r1
    8e9e:	b1 09       	sbc	r27, r1
    8ea0:	82 17       	cp	r24, r18
    8ea2:	93 07       	cpc	r25, r19
    8ea4:	a4 07       	cpc	r26, r20
    8ea6:	b5 07       	cpc	r27, r21
    8ea8:	38 f0       	brcs	.+14     	; 0x8eb8 <f_getfree+0x62>
		*nclst = (*fatfs)->free_clust;
    8eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    8eac:	fc 81       	ldd	r31, Y+4	; 0x04
    8eae:	20 83       	st	Z, r18
    8eb0:	31 83       	std	Z+1, r19	; 0x01
    8eb2:	42 83       	std	Z+2, r20	; 0x02
    8eb4:	53 83       	std	Z+3, r21	; 0x03
    8eb6:	a3 c0       	rjmp	.+326    	; 0x8ffe <f_getfree+0x1a8>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    8eb8:	30 80       	ld	r3, Z
	n = 0;
	if (fat == FS_FAT12) {
    8eba:	21 e0       	ldi	r18, 0x01	; 1
    8ebc:	32 16       	cp	r3, r18
    8ebe:	f1 f5       	brne	.+124    	; 0x8f3c <f_getfree+0xe6>
    8ec0:	aa 24       	eor	r10, r10
    8ec2:	bb 24       	eor	r11, r11
    8ec4:	65 01       	movw	r12, r10
    8ec6:	92 e0       	ldi	r25, 0x02	; 2
    8ec8:	e9 2e       	mov	r14, r25
    8eca:	f1 2c       	mov	r15, r1
    8ecc:	01 2d       	mov	r16, r1
    8ece:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    8ed0:	d2 01       	movw	r26, r4
    8ed2:	8d 91       	ld	r24, X+
    8ed4:	9c 91       	ld	r25, X
    8ed6:	b8 01       	movw	r22, r16
    8ed8:	a7 01       	movw	r20, r14
    8eda:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    8ede:	6f 3f       	cpi	r22, 0xFF	; 255
    8ee0:	bf ef       	ldi	r27, 0xFF	; 255
    8ee2:	7b 07       	cpc	r23, r27
    8ee4:	bf ef       	ldi	r27, 0xFF	; 255
    8ee6:	8b 07       	cpc	r24, r27
    8ee8:	bf ef       	ldi	r27, 0xFF	; 255
    8eea:	9b 07       	cpc	r25, r27
    8eec:	19 f4       	brne	.+6      	; 0x8ef4 <f_getfree+0x9e>
    8eee:	21 e0       	ldi	r18, 0x01	; 1
    8ef0:	30 e0       	ldi	r19, 0x00	; 0
    8ef2:	87 c0       	rjmp	.+270    	; 0x9002 <f_getfree+0x1ac>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    8ef4:	61 30       	cpi	r22, 0x01	; 1
    8ef6:	71 05       	cpc	r23, r1
    8ef8:	81 05       	cpc	r24, r1
    8efa:	91 05       	cpc	r25, r1
    8efc:	19 f4       	brne	.+6      	; 0x8f04 <f_getfree+0xae>
    8efe:	22 e0       	ldi	r18, 0x02	; 2
    8f00:	30 e0       	ldi	r19, 0x00	; 0
    8f02:	7f c0       	rjmp	.+254    	; 0x9002 <f_getfree+0x1ac>
			if (stat == 0) n++;
    8f04:	61 15       	cp	r22, r1
    8f06:	71 05       	cpc	r23, r1
    8f08:	81 05       	cpc	r24, r1
    8f0a:	91 05       	cpc	r25, r1
    8f0c:	29 f4       	brne	.+10     	; 0x8f18 <f_getfree+0xc2>
    8f0e:	08 94       	sec
    8f10:	a1 1c       	adc	r10, r1
    8f12:	b1 1c       	adc	r11, r1
    8f14:	c1 1c       	adc	r12, r1
    8f16:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    8f18:	08 94       	sec
    8f1a:	e1 1c       	adc	r14, r1
    8f1c:	f1 1c       	adc	r15, r1
    8f1e:	01 1d       	adc	r16, r1
    8f20:	11 1d       	adc	r17, r1
    8f22:	d2 01       	movw	r26, r4
    8f24:	ed 91       	ld	r30, X+
    8f26:	fc 91       	ld	r31, X
    8f28:	86 8d       	ldd	r24, Z+30	; 0x1e
    8f2a:	97 8d       	ldd	r25, Z+31	; 0x1f
    8f2c:	a0 a1       	ldd	r26, Z+32	; 0x20
    8f2e:	b1 a1       	ldd	r27, Z+33	; 0x21
    8f30:	e8 16       	cp	r14, r24
    8f32:	f9 06       	cpc	r15, r25
    8f34:	0a 07       	cpc	r16, r26
    8f36:	1b 07       	cpc	r17, r27
    8f38:	58 f2       	brcs	.-106    	; 0x8ed0 <f_getfree+0x7a>
    8f3a:	4f c0       	rjmp	.+158    	; 0x8fda <f_getfree+0x184>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    8f3c:	62 a0       	ldd	r6, Z+34	; 0x22
    8f3e:	73 a0       	ldd	r7, Z+35	; 0x23
    8f40:	84 a0       	ldd	r8, Z+36	; 0x24
    8f42:	95 a0       	ldd	r9, Z+37	; 0x25
    8f44:	aa 24       	eor	r10, r10
    8f46:	bb 24       	eor	r11, r11
    8f48:	65 01       	movw	r12, r10
    8f4a:	20 e0       	ldi	r18, 0x00	; 0
    8f4c:	30 e0       	ldi	r19, 0x00	; 0
    8f4e:	e0 e0       	ldi	r30, 0x00	; 0
    8f50:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    8f52:	21 15       	cp	r18, r1
    8f54:	31 05       	cpc	r19, r1
    8f56:	b1 f4       	brne	.+44     	; 0x8f84 <f_getfree+0x12e>
				res = move_window(*fatfs, sect++);
    8f58:	f2 01       	movw	r30, r4
    8f5a:	80 81       	ld	r24, Z
    8f5c:	91 81       	ldd	r25, Z+1	; 0x01
    8f5e:	b4 01       	movw	r22, r8
    8f60:	a3 01       	movw	r20, r6
    8f62:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    8f66:	9c 01       	movw	r18, r24
				if (res != FR_OK)
    8f68:	00 97       	sbiw	r24, 0x00	; 0
    8f6a:	09 f0       	breq	.+2      	; 0x8f6e <f_getfree+0x118>
    8f6c:	4a c0       	rjmp	.+148    	; 0x9002 <f_getfree+0x1ac>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    8f6e:	08 94       	sec
    8f70:	61 1c       	adc	r6, r1
    8f72:	71 1c       	adc	r7, r1
    8f74:	81 1c       	adc	r8, r1
    8f76:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    8f78:	d2 01       	movw	r26, r4
    8f7a:	ed 91       	ld	r30, X+
    8f7c:	fc 91       	ld	r31, X
    8f7e:	f2 96       	adiw	r30, 0x32	; 50
    8f80:	20 e0       	ldi	r18, 0x00	; 0
    8f82:	32 e0       	ldi	r19, 0x02	; 2
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    8f84:	b2 e0       	ldi	r27, 0x02	; 2
    8f86:	3b 16       	cp	r3, r27
    8f88:	69 f4       	brne	.+26     	; 0x8fa4 <f_getfree+0x14e>
				if (LD_WORD(p) == 0) n++;
    8f8a:	80 81       	ld	r24, Z
    8f8c:	91 81       	ldd	r25, Z+1	; 0x01
    8f8e:	89 2b       	or	r24, r25
    8f90:	29 f4       	brne	.+10     	; 0x8f9c <f_getfree+0x146>
    8f92:	08 94       	sec
    8f94:	a1 1c       	adc	r10, r1
    8f96:	b1 1c       	adc	r11, r1
    8f98:	c1 1c       	adc	r12, r1
    8f9a:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    8f9c:	32 96       	adiw	r30, 0x02	; 2
    8f9e:	22 50       	subi	r18, 0x02	; 2
    8fa0:	30 40       	sbci	r19, 0x00	; 0
    8fa2:	10 c0       	rjmp	.+32     	; 0x8fc4 <f_getfree+0x16e>
			} else {
				if (LD_DWORD(p) == 0) n++;
    8fa4:	80 81       	ld	r24, Z
    8fa6:	91 81       	ldd	r25, Z+1	; 0x01
    8fa8:	a2 81       	ldd	r26, Z+2	; 0x02
    8faa:	b3 81       	ldd	r27, Z+3	; 0x03
    8fac:	00 97       	sbiw	r24, 0x00	; 0
    8fae:	a1 05       	cpc	r26, r1
    8fb0:	b1 05       	cpc	r27, r1
    8fb2:	29 f4       	brne	.+10     	; 0x8fbe <f_getfree+0x168>
    8fb4:	08 94       	sec
    8fb6:	a1 1c       	adc	r10, r1
    8fb8:	b1 1c       	adc	r11, r1
    8fba:	c1 1c       	adc	r12, r1
    8fbc:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    8fbe:	34 96       	adiw	r30, 0x04	; 4
    8fc0:	24 50       	subi	r18, 0x04	; 4
    8fc2:	30 40       	sbci	r19, 0x00	; 0
			}
		} while (--clst);
    8fc4:	08 94       	sec
    8fc6:	e1 08       	sbc	r14, r1
    8fc8:	f1 08       	sbc	r15, r1
    8fca:	01 09       	sbc	r16, r1
    8fcc:	11 09       	sbc	r17, r1
    8fce:	e1 14       	cp	r14, r1
    8fd0:	f1 04       	cpc	r15, r1
    8fd2:	01 05       	cpc	r16, r1
    8fd4:	11 05       	cpc	r17, r1
    8fd6:	09 f0       	breq	.+2      	; 0x8fda <f_getfree+0x184>
    8fd8:	bc cf       	rjmp	.-136    	; 0x8f52 <f_getfree+0xfc>
	}
	(*fatfs)->free_clust = n;
    8fda:	d2 01       	movw	r26, r4
    8fdc:	ed 91       	ld	r30, X+
    8fde:	fc 91       	ld	r31, X
    8fe0:	a6 86       	std	Z+14, r10	; 0x0e
    8fe2:	b7 86       	std	Z+15, r11	; 0x0f
    8fe4:	c0 8a       	std	Z+16, r12	; 0x10
    8fe6:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    8fe8:	b3 e0       	ldi	r27, 0x03	; 3
    8fea:	3b 16       	cp	r3, r27
    8fec:	11 f4       	brne	.+4      	; 0x8ff2 <f_getfree+0x19c>
    8fee:	81 e0       	ldi	r24, 0x01	; 1
    8ff0:	81 87       	std	Z+9, r24	; 0x09
	*nclst = n;
    8ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    8ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    8ff6:	a0 82       	st	Z, r10
    8ff8:	b1 82       	std	Z+1, r11	; 0x01
    8ffa:	c2 82       	std	Z+2, r12	; 0x02
    8ffc:	d3 82       	std	Z+3, r13	; 0x03
    8ffe:	20 e0       	ldi	r18, 0x00	; 0
    9000:	30 e0       	ldi	r19, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    9002:	c9 01       	movw	r24, r18
    9004:	24 96       	adiw	r28, 0x04	; 4
    9006:	e1 e1       	ldi	r30, 0x11	; 17
    9008:	0c 94 c0 57 	jmp	0xaf80	; 0xaf80 <__epilogue_restores__+0x2>

0000900c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    900c:	0f 93       	push	r16
    900e:	1f 93       	push	r17
    9010:	cf 93       	push	r28
    9012:	df 93       	push	r29
    9014:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    9016:	6a 81       	ldd	r22, Y+2	; 0x02
    9018:	7b 81       	ldd	r23, Y+3	; 0x03
    901a:	88 81       	ld	r24, Y
    901c:	99 81       	ldd	r25, Y+1	; 0x01
    901e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <validate>
    9022:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    9024:	00 97       	sbiw	r24, 0x00	; 0
    9026:	e1 f5       	brne	.+120    	; 0x90a0 <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    9028:	8c 81       	ldd	r24, Y+4	; 0x04
    902a:	85 ff       	sbrs	r24, 5
    902c:	39 c0       	rjmp	.+114    	; 0x90a0 <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    902e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9030:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9032:	6c 8d       	ldd	r22, Y+28	; 0x1c
    9034:	7d 8d       	ldd	r23, Y+29	; 0x1d
    9036:	88 81       	ld	r24, Y
    9038:	99 81       	ldd	r25, Y+1	; 0x01
    903a:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    903e:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    9040:	00 97       	sbiw	r24, 0x00	; 0
    9042:	71 f5       	brne	.+92     	; 0x90a0 <f_sync+0x94>
				dir = fp->dir_ptr;
    9044:	0e 8d       	ldd	r16, Y+30	; 0x1e
    9046:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    9048:	f8 01       	movw	r30, r16
    904a:	83 85       	ldd	r24, Z+11	; 0x0b
    904c:	80 62       	ori	r24, 0x20	; 32
    904e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    9050:	8a 85       	ldd	r24, Y+10	; 0x0a
    9052:	9b 85       	ldd	r25, Y+11	; 0x0b
    9054:	ac 85       	ldd	r26, Y+12	; 0x0c
    9056:	bd 85       	ldd	r27, Y+13	; 0x0d
    9058:	84 8f       	std	Z+28, r24	; 0x1c
    905a:	95 8f       	std	Z+29, r25	; 0x1d
    905c:	a6 8f       	std	Z+30, r26	; 0x1e
    905e:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    9060:	8e 85       	ldd	r24, Y+14	; 0x0e
    9062:	9f 85       	ldd	r25, Y+15	; 0x0f
    9064:	82 8f       	std	Z+26, r24	; 0x1a
    9066:	93 8f       	std	Z+27, r25	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    9068:	8e 85       	ldd	r24, Y+14	; 0x0e
    906a:	9f 85       	ldd	r25, Y+15	; 0x0f
    906c:	a8 89       	ldd	r26, Y+16	; 0x10
    906e:	b9 89       	ldd	r27, Y+17	; 0x11
    9070:	cd 01       	movw	r24, r26
    9072:	aa 27       	eor	r26, r26
    9074:	bb 27       	eor	r27, r27
    9076:	84 8b       	std	Z+20, r24	; 0x14
    9078:	95 8b       	std	Z+21, r25	; 0x15
				tim = get_fattime();			/* Updated time */
    907a:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    907e:	f8 01       	movw	r30, r16
    9080:	66 8b       	std	Z+22, r22	; 0x16
    9082:	77 8b       	std	Z+23, r23	; 0x17
    9084:	80 8f       	std	Z+24, r24	; 0x18
    9086:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    9088:	8c 81       	ldd	r24, Y+4	; 0x04
    908a:	8f 7d       	andi	r24, 0xDF	; 223
    908c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    908e:	e8 81       	ld	r30, Y
    9090:	f9 81       	ldd	r31, Y+1	; 0x01
    9092:	81 e0       	ldi	r24, 0x01	; 1
    9094:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    9096:	88 81       	ld	r24, Y
    9098:	99 81       	ldd	r25, Y+1	; 0x01
    909a:	0e 94 ac 42 	call	0x8558	; 0x8558 <sync>
    909e:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    90a0:	c9 01       	movw	r24, r18
    90a2:	df 91       	pop	r29
    90a4:	cf 91       	pop	r28
    90a6:	1f 91       	pop	r17
    90a8:	0f 91       	pop	r16
    90aa:	08 95       	ret

000090ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    90ac:	cf 93       	push	r28
    90ae:	df 93       	push	r29
    90b0:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    90b2:	0e 94 06 48 	call	0x900c	; 0x900c <f_sync>
    90b6:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    90b8:	00 97       	sbiw	r24, 0x00	; 0
    90ba:	11 f4       	brne	.+4      	; 0x90c0 <f_close+0x14>
    90bc:	18 82       	st	Y, r1
    90be:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    90c0:	c9 01       	movw	r24, r18
    90c2:	df 91       	pop	r29
    90c4:	cf 91       	pop	r28
    90c6:	08 95       	ret

000090c8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    90c8:	a4 e0       	ldi	r26, 0x04	; 4
    90ca:	b0 e0       	ldi	r27, 0x00	; 0
    90cc:	ea e6       	ldi	r30, 0x6A	; 106
    90ce:	f8 e4       	ldi	r31, 0x48	; 72
    90d0:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    90d4:	8b 83       	std	Y+3, r24	; 0x03
    90d6:	9c 83       	std	Y+4, r25	; 0x04
    90d8:	16 2f       	mov	r17, r22
    90da:	07 2f       	mov	r16, r23
    90dc:	3a 01       	movw	r6, r20
    90de:	29 83       	std	Y+1, r18	; 0x01
    90e0:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
    90e2:	d9 01       	movw	r26, r18
    90e4:	1d 92       	st	X+, r1
    90e6:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    90e8:	fc 01       	movw	r30, r24
    90ea:	62 81       	ldd	r22, Z+2	; 0x02
    90ec:	73 81       	ldd	r23, Z+3	; 0x03
    90ee:	80 81       	ld	r24, Z
    90f0:	91 81       	ldd	r25, Z+1	; 0x01
    90f2:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <validate>
    90f6:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    90f8:	00 97       	sbiw	r24, 0x00	; 0
    90fa:	09 f0       	breq	.+2      	; 0x90fe <f_write+0x36>
    90fc:	09 c2       	rjmp	.+1042   	; 0x9510 <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    90fe:	ab 81       	ldd	r26, Y+3	; 0x03
    9100:	bc 81       	ldd	r27, Y+4	; 0x04
    9102:	14 96       	adiw	r26, 0x04	; 4
    9104:	8c 91       	ld	r24, X
    9106:	87 fd       	sbrc	r24, 7
    9108:	78 c0       	rjmp	.+240    	; 0x91fa <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    910a:	81 fd       	sbrc	r24, 1
    910c:	04 c0       	rjmp	.+8      	; 0x9116 <f_write+0x4e>
    910e:	f7 e0       	ldi	r31, 0x07	; 7
    9110:	8f 2e       	mov	r8, r31
    9112:	91 2c       	mov	r9, r1
    9114:	fd c1       	rjmp	.+1018   	; 0x9510 <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    9116:	eb 81       	ldd	r30, Y+3	; 0x03
    9118:	fc 81       	ldd	r31, Y+4	; 0x04
    911a:	22 85       	ldd	r18, Z+10	; 0x0a
    911c:	33 85       	ldd	r19, Z+11	; 0x0b
    911e:	44 85       	ldd	r20, Z+12	; 0x0c
    9120:	55 85       	ldd	r21, Z+13	; 0x0d
    9122:	c3 01       	movw	r24, r6
    9124:	a0 e0       	ldi	r26, 0x00	; 0
    9126:	b0 e0       	ldi	r27, 0x00	; 0
    9128:	82 0f       	add	r24, r18
    912a:	93 1f       	adc	r25, r19
    912c:	a4 1f       	adc	r26, r20
    912e:	b5 1f       	adc	r27, r21
    9130:	82 17       	cp	r24, r18
    9132:	93 07       	cpc	r25, r19
    9134:	a4 07       	cpc	r26, r20
    9136:	b5 07       	cpc	r27, r21
    9138:	10 f4       	brcc	.+4      	; 0x913e <f_write+0x76>
    913a:	66 24       	eor	r6, r6
    913c:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    913e:	81 2f       	mov	r24, r17
    9140:	90 2f       	mov	r25, r16
    9142:	9c 01       	movw	r18, r24
    9144:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9146:	22 24       	eor	r2, r2
    9148:	23 94       	inc	r2
    914a:	bd c1       	rjmp	.+890    	; 0x94c6 <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    914c:	ab 81       	ldd	r26, Y+3	; 0x03
    914e:	bc 81       	ldd	r27, Y+4	; 0x04
    9150:	16 96       	adiw	r26, 0x06	; 6
    9152:	2d 91       	ld	r18, X+
    9154:	3d 91       	ld	r19, X+
    9156:	4d 91       	ld	r20, X+
    9158:	5c 91       	ld	r21, X
    915a:	19 97       	sbiw	r26, 0x09	; 9
    915c:	da 01       	movw	r26, r20
    915e:	c9 01       	movw	r24, r18
    9160:	91 70       	andi	r25, 0x01	; 1
    9162:	a0 70       	andi	r26, 0x00	; 0
    9164:	b0 70       	andi	r27, 0x00	; 0
    9166:	00 97       	sbiw	r24, 0x00	; 0
    9168:	a1 05       	cpc	r26, r1
    916a:	b1 05       	cpc	r27, r1
    916c:	09 f0       	breq	.+2      	; 0x9170 <f_write+0xa8>
    916e:	4a c1       	rjmp	.+660    	; 0x9404 <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9170:	ab 81       	ldd	r26, Y+3	; 0x03
    9172:	bc 81       	ldd	r27, Y+4	; 0x04
    9174:	ed 91       	ld	r30, X+
    9176:	fc 91       	ld	r31, X
    9178:	11 97       	sbiw	r26, 0x01	; 1
    917a:	15 96       	adiw	r26, 0x05	; 5
    917c:	9c 91       	ld	r25, X
    917e:	15 97       	sbiw	r26, 0x05	; 5
    9180:	82 81       	ldd	r24, Z+2	; 0x02
    9182:	98 17       	cp	r25, r24
    9184:	08 f4       	brcc	.+2      	; 0x9188 <f_write+0xc0>
    9186:	55 c0       	rjmp	.+170    	; 0x9232 <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    9188:	21 15       	cp	r18, r1
    918a:	31 05       	cpc	r19, r1
    918c:	41 05       	cpc	r20, r1
    918e:	51 05       	cpc	r21, r1
    9190:	c9 f4       	brne	.+50     	; 0x91c4 <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    9192:	1e 96       	adiw	r26, 0x0e	; 14
    9194:	6d 91       	ld	r22, X+
    9196:	7d 91       	ld	r23, X+
    9198:	8d 91       	ld	r24, X+
    919a:	9c 91       	ld	r25, X
    919c:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    919e:	61 15       	cp	r22, r1
    91a0:	71 05       	cpc	r23, r1
    91a2:	81 05       	cpc	r24, r1
    91a4:	91 05       	cpc	r25, r1
    91a6:	f9 f4       	brne	.+62     	; 0x91e6 <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    91a8:	cf 01       	movw	r24, r30
    91aa:	40 e0       	ldi	r20, 0x00	; 0
    91ac:	50 e0       	ldi	r21, 0x00	; 0
    91ae:	60 e0       	ldi	r22, 0x00	; 0
    91b0:	70 e0       	ldi	r23, 0x00	; 0
    91b2:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <create_chain>
    91b6:	eb 81       	ldd	r30, Y+3	; 0x03
    91b8:	fc 81       	ldd	r31, Y+4	; 0x04
    91ba:	66 87       	std	Z+14, r22	; 0x0e
    91bc:	77 87       	std	Z+15, r23	; 0x0f
    91be:	80 8b       	std	Z+16, r24	; 0x10
    91c0:	91 8b       	std	Z+17, r25	; 0x11
    91c2:	0b c0       	rjmp	.+22     	; 0x91da <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    91c4:	ab 81       	ldd	r26, Y+3	; 0x03
    91c6:	bc 81       	ldd	r27, Y+4	; 0x04
    91c8:	52 96       	adiw	r26, 0x12	; 18
    91ca:	4d 91       	ld	r20, X+
    91cc:	5d 91       	ld	r21, X+
    91ce:	6d 91       	ld	r22, X+
    91d0:	7c 91       	ld	r23, X
    91d2:	55 97       	sbiw	r26, 0x15	; 21
    91d4:	cf 01       	movw	r24, r30
    91d6:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    91da:	61 15       	cp	r22, r1
    91dc:	71 05       	cpc	r23, r1
    91de:	81 05       	cpc	r24, r1
    91e0:	91 05       	cpc	r25, r1
    91e2:	09 f4       	brne	.+2      	; 0x91e6 <f_write+0x11e>
    91e4:	74 c1       	rjmp	.+744    	; 0x94ce <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    91e6:	61 30       	cpi	r22, 0x01	; 1
    91e8:	71 05       	cpc	r23, r1
    91ea:	81 05       	cpc	r24, r1
    91ec:	91 05       	cpc	r25, r1
    91ee:	49 f4       	brne	.+18     	; 0x9202 <f_write+0x13a>
    91f0:	eb 81       	ldd	r30, Y+3	; 0x03
    91f2:	fc 81       	ldd	r31, Y+4	; 0x04
    91f4:	84 81       	ldd	r24, Z+4	; 0x04
    91f6:	80 68       	ori	r24, 0x80	; 128
    91f8:	84 83       	std	Z+4, r24	; 0x04
    91fa:	e2 e0       	ldi	r30, 0x02	; 2
    91fc:	8e 2e       	mov	r8, r30
    91fe:	91 2c       	mov	r9, r1
    9200:	87 c1       	rjmp	.+782    	; 0x9510 <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9202:	6f 3f       	cpi	r22, 0xFF	; 255
    9204:	ff ef       	ldi	r31, 0xFF	; 255
    9206:	7f 07       	cpc	r23, r31
    9208:	ff ef       	ldi	r31, 0xFF	; 255
    920a:	8f 07       	cpc	r24, r31
    920c:	ff ef       	ldi	r31, 0xFF	; 255
    920e:	9f 07       	cpc	r25, r31
    9210:	49 f4       	brne	.+18     	; 0x9224 <f_write+0x15c>
    9212:	ab 81       	ldd	r26, Y+3	; 0x03
    9214:	bc 81       	ldd	r27, Y+4	; 0x04
    9216:	14 96       	adiw	r26, 0x04	; 4
    9218:	8c 91       	ld	r24, X
    921a:	14 97       	sbiw	r26, 0x04	; 4
    921c:	80 68       	ori	r24, 0x80	; 128
    921e:	14 96       	adiw	r26, 0x04	; 4
    9220:	8c 93       	st	X, r24
    9222:	09 c1       	rjmp	.+530    	; 0x9436 <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    9224:	eb 81       	ldd	r30, Y+3	; 0x03
    9226:	fc 81       	ldd	r31, Y+4	; 0x04
    9228:	62 8b       	std	Z+18, r22	; 0x12
    922a:	73 8b       	std	Z+19, r23	; 0x13
    922c:	84 8b       	std	Z+20, r24	; 0x14
    922e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    9230:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    9232:	ab 81       	ldd	r26, Y+3	; 0x03
    9234:	bc 81       	ldd	r27, Y+4	; 0x04
    9236:	ed 91       	ld	r30, X+
    9238:	fc 91       	ld	r31, X
    923a:	11 97       	sbiw	r26, 0x01	; 1
    923c:	26 a5       	ldd	r18, Z+46	; 0x2e
    923e:	37 a5       	ldd	r19, Z+47	; 0x2f
    9240:	40 a9       	ldd	r20, Z+48	; 0x30
    9242:	51 a9       	ldd	r21, Z+49	; 0x31
    9244:	56 96       	adiw	r26, 0x16	; 22
    9246:	ed 90       	ld	r14, X+
    9248:	fd 90       	ld	r15, X+
    924a:	0d 91       	ld	r16, X+
    924c:	1c 91       	ld	r17, X
    924e:	59 97       	sbiw	r26, 0x19	; 25
    9250:	2e 15       	cp	r18, r14
    9252:	3f 05       	cpc	r19, r15
    9254:	40 07       	cpc	r20, r16
    9256:	51 07       	cpc	r21, r17
    9258:	51 f4       	brne	.+20     	; 0x926e <f_write+0x1a6>
    925a:	cf 01       	movw	r24, r30
    925c:	40 e0       	ldi	r20, 0x00	; 0
    925e:	50 e0       	ldi	r21, 0x00	; 0
    9260:	60 e0       	ldi	r22, 0x00	; 0
    9262:	70 e0       	ldi	r23, 0x00	; 0
    9264:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    9268:	89 2b       	or	r24, r25
    926a:	09 f0       	breq	.+2      	; 0x926e <f_write+0x1a6>
    926c:	df c0       	rjmp	.+446    	; 0x942c <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    926e:	ab 81       	ldd	r26, Y+3	; 0x03
    9270:	bc 81       	ldd	r27, Y+4	; 0x04
    9272:	0d 91       	ld	r16, X+
    9274:	1c 91       	ld	r17, X
    9276:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9278:	52 96       	adiw	r26, 0x12	; 18
    927a:	2d 91       	ld	r18, X+
    927c:	3d 91       	ld	r19, X+
    927e:	4d 91       	ld	r20, X+
    9280:	5c 91       	ld	r21, X
    9282:	55 97       	sbiw	r26, 0x15	; 21
    9284:	22 50       	subi	r18, 0x02	; 2
    9286:	30 40       	sbci	r19, 0x00	; 0
    9288:	40 40       	sbci	r20, 0x00	; 0
    928a:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    928c:	f8 01       	movw	r30, r16
    928e:	86 8d       	ldd	r24, Z+30	; 0x1e
    9290:	97 8d       	ldd	r25, Z+31	; 0x1f
    9292:	a0 a1       	ldd	r26, Z+32	; 0x20
    9294:	b1 a1       	ldd	r27, Z+33	; 0x21
    9296:	02 97       	sbiw	r24, 0x02	; 2
    9298:	a1 09       	sbc	r26, r1
    929a:	b1 09       	sbc	r27, r1
    929c:	28 17       	cp	r18, r24
    929e:	39 07       	cpc	r19, r25
    92a0:	4a 07       	cpc	r20, r26
    92a2:	5b 07       	cpc	r21, r27
    92a4:	b8 f4       	brcc	.+46     	; 0x92d4 <f_write+0x20c>
	return clst * fs->csize + fs->database;
    92a6:	32 80       	ldd	r3, Z+2	; 0x02
    92a8:	63 2d       	mov	r22, r3
    92aa:	70 e0       	ldi	r23, 0x00	; 0
    92ac:	80 e0       	ldi	r24, 0x00	; 0
    92ae:	90 e0       	ldi	r25, 0x00	; 0
    92b0:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    92b4:	9b 01       	movw	r18, r22
    92b6:	ac 01       	movw	r20, r24
    92b8:	f8 01       	movw	r30, r16
    92ba:	82 a5       	ldd	r24, Z+42	; 0x2a
    92bc:	93 a5       	ldd	r25, Z+43	; 0x2b
    92be:	a4 a5       	ldd	r26, Z+44	; 0x2c
    92c0:	b5 a5       	ldd	r27, Z+45	; 0x2d
    92c2:	28 0f       	add	r18, r24
    92c4:	39 1f       	adc	r19, r25
    92c6:	4a 1f       	adc	r20, r26
    92c8:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    92ca:	21 15       	cp	r18, r1
    92cc:	31 05       	cpc	r19, r1
    92ce:	41 05       	cpc	r20, r1
    92d0:	51 05       	cpc	r21, r1
    92d2:	49 f4       	brne	.+18     	; 0x92e6 <f_write+0x21e>
    92d4:	ab 81       	ldd	r26, Y+3	; 0x03
    92d6:	bc 81       	ldd	r27, Y+4	; 0x04
    92d8:	14 96       	adiw	r26, 0x04	; 4
    92da:	8c 91       	ld	r24, X
    92dc:	14 97       	sbiw	r26, 0x04	; 4
    92de:	80 68       	ori	r24, 0x80	; 128
    92e0:	14 96       	adiw	r26, 0x04	; 4
    92e2:	8c 93       	st	X, r24
    92e4:	8a cf       	rjmp	.-236    	; 0x91fa <f_write+0x132>
			sect += fp->csect;
    92e6:	eb 81       	ldd	r30, Y+3	; 0x03
    92e8:	fc 81       	ldd	r31, Y+4	; 0x04
    92ea:	85 81       	ldd	r24, Z+5	; 0x05
    92ec:	59 01       	movw	r10, r18
    92ee:	6a 01       	movw	r12, r20
    92f0:	a8 0e       	add	r10, r24
    92f2:	b1 1c       	adc	r11, r1
    92f4:	c1 1c       	adc	r12, r1
    92f6:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    92f8:	73 01       	movw	r14, r6
    92fa:	ef 2c       	mov	r14, r15
    92fc:	ff 24       	eor	r15, r15
    92fe:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    9300:	e1 14       	cp	r14, r1
    9302:	f1 04       	cpc	r15, r1
    9304:	09 f4       	brne	.+2      	; 0x9308 <f_write+0x240>
    9306:	51 c0       	rjmp	.+162    	; 0x93aa <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9308:	28 2f       	mov	r18, r24
    930a:	30 e0       	ldi	r19, 0x00	; 0
    930c:	c7 01       	movw	r24, r14
    930e:	82 0f       	add	r24, r18
    9310:	93 1f       	adc	r25, r19
    9312:	63 2d       	mov	r22, r3
    9314:	70 e0       	ldi	r23, 0x00	; 0
    9316:	68 17       	cp	r22, r24
    9318:	79 07       	cpc	r23, r25
    931a:	18 f4       	brcc	.+6      	; 0x9322 <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    931c:	7b 01       	movw	r14, r22
    931e:	e2 1a       	sub	r14, r18
    9320:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    9322:	d8 01       	movw	r26, r16
    9324:	11 96       	adiw	r26, 0x01	; 1
    9326:	8c 91       	ld	r24, X
    9328:	b2 01       	movw	r22, r4
    932a:	a6 01       	movw	r20, r12
    932c:	95 01       	movw	r18, r10
    932e:	0e 2d       	mov	r16, r14
    9330:	0e 94 f2 50 	call	0xa1e4	; 0xa1e4 <disk_write>
    9334:	89 2b       	or	r24, r25
    9336:	09 f0       	breq	.+2      	; 0x933a <f_write+0x272>
    9338:	79 c0       	rjmp	.+242    	; 0x942c <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    933a:	ab 81       	ldd	r26, Y+3	; 0x03
    933c:	bc 81       	ldd	r27, Y+4	; 0x04
    933e:	ed 91       	ld	r30, X+
    9340:	fc 91       	ld	r31, X
    9342:	26 a5       	ldd	r18, Z+46	; 0x2e
    9344:	37 a5       	ldd	r19, Z+47	; 0x2f
    9346:	40 a9       	ldd	r20, Z+48	; 0x30
    9348:	51 a9       	ldd	r21, Z+49	; 0x31
    934a:	2a 19       	sub	r18, r10
    934c:	3b 09       	sbc	r19, r11
    934e:	4c 09       	sbc	r20, r12
    9350:	5d 09       	sbc	r21, r13
    9352:	c7 01       	movw	r24, r14
    9354:	a0 e0       	ldi	r26, 0x00	; 0
    9356:	b0 e0       	ldi	r27, 0x00	; 0
    9358:	28 17       	cp	r18, r24
    935a:	39 07       	cpc	r19, r25
    935c:	4a 07       	cpc	r20, r26
    935e:	5b 07       	cpc	r21, r27
    9360:	d0 f4       	brcc	.+52     	; 0x9396 <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9362:	df 01       	movw	r26, r30
    9364:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    9366:	69 e0       	ldi	r22, 0x09	; 9
    9368:	22 0f       	add	r18, r18
    936a:	33 1f       	adc	r19, r19
    936c:	44 1f       	adc	r20, r20
    936e:	55 1f       	adc	r21, r21
    9370:	6a 95       	dec	r22
    9372:	d1 f7       	brne	.-12     	; 0x9368 <f_write+0x2a0>
    9374:	f2 01       	movw	r30, r4
    9376:	e2 0f       	add	r30, r18
    9378:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    937a:	9f 01       	movw	r18, r30
    937c:	20 50       	subi	r18, 0x00	; 0
    937e:	3e 4f       	sbci	r19, 0xFE	; 254
    9380:	02 c0       	rjmp	.+4      	; 0x9386 <f_write+0x2be>
    9382:	81 91       	ld	r24, Z+
    9384:	8d 93       	st	X+, r24
    9386:	e2 17       	cp	r30, r18
    9388:	f3 07       	cpc	r31, r19
    938a:	d9 f7       	brne	.-10     	; 0x9382 <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    938c:	ab 81       	ldd	r26, Y+3	; 0x03
    938e:	bc 81       	ldd	r27, Y+4	; 0x04
    9390:	ed 91       	ld	r30, X+
    9392:	fc 91       	ld	r31, X
    9394:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9396:	eb 81       	ldd	r30, Y+3	; 0x03
    9398:	fc 81       	ldd	r31, Y+4	; 0x04
    939a:	85 81       	ldd	r24, Z+5	; 0x05
    939c:	8e 0d       	add	r24, r14
    939e:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    93a0:	b7 01       	movw	r22, r14
    93a2:	76 2f       	mov	r23, r22
    93a4:	66 27       	eor	r22, r22
    93a6:	77 0f       	add	r23, r23
    93a8:	71 c0       	rjmp	.+226    	; 0x948c <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    93aa:	ab 81       	ldd	r26, Y+3	; 0x03
    93ac:	bc 81       	ldd	r27, Y+4	; 0x04
    93ae:	16 96       	adiw	r26, 0x06	; 6
    93b0:	2d 91       	ld	r18, X+
    93b2:	3d 91       	ld	r19, X+
    93b4:	4d 91       	ld	r20, X+
    93b6:	5c 91       	ld	r21, X
    93b8:	19 97       	sbiw	r26, 0x09	; 9
    93ba:	1a 96       	adiw	r26, 0x0a	; 10
    93bc:	8d 91       	ld	r24, X+
    93be:	9d 91       	ld	r25, X+
    93c0:	0d 90       	ld	r0, X+
    93c2:	bc 91       	ld	r27, X
    93c4:	a0 2d       	mov	r26, r0
    93c6:	28 17       	cp	r18, r24
    93c8:	39 07       	cpc	r19, r25
    93ca:	4a 07       	cpc	r20, r26
    93cc:	5b 07       	cpc	r21, r27
    93ce:	88 f0       	brcs	.+34     	; 0x93f2 <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    93d0:	c8 01       	movw	r24, r16
    93d2:	40 e0       	ldi	r20, 0x00	; 0
    93d4:	50 e0       	ldi	r21, 0x00	; 0
    93d6:	60 e0       	ldi	r22, 0x00	; 0
    93d8:	70 e0       	ldi	r23, 0x00	; 0
    93da:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    93de:	89 2b       	or	r24, r25
    93e0:	29 f5       	brne	.+74     	; 0x942c <f_write+0x364>
				fp->fs->winsect = sect;
    93e2:	ab 81       	ldd	r26, Y+3	; 0x03
    93e4:	bc 81       	ldd	r27, Y+4	; 0x04
    93e6:	ed 91       	ld	r30, X+
    93e8:	fc 91       	ld	r31, X
    93ea:	a6 a6       	std	Z+46, r10	; 0x2e
    93ec:	b7 a6       	std	Z+47, r11	; 0x2f
    93ee:	c0 aa       	std	Z+48, r12	; 0x30
    93f0:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    93f2:	eb 81       	ldd	r30, Y+3	; 0x03
    93f4:	fc 81       	ldd	r31, Y+4	; 0x04
    93f6:	a6 8a       	std	Z+22, r10	; 0x16
    93f8:	b7 8a       	std	Z+23, r11	; 0x17
    93fa:	c0 8e       	std	Z+24, r12	; 0x18
    93fc:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    93fe:	85 81       	ldd	r24, Z+5	; 0x05
    9400:	8f 5f       	subi	r24, 0xFF	; 255
    9402:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9404:	ab 81       	ldd	r26, Y+3	; 0x03
    9406:	bc 81       	ldd	r27, Y+4	; 0x04
    9408:	16 96       	adiw	r26, 0x06	; 6
    940a:	cd 90       	ld	r12, X+
    940c:	dd 90       	ld	r13, X+
    940e:	ed 90       	ld	r14, X+
    9410:	fc 90       	ld	r15, X
    9412:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9414:	56 96       	adiw	r26, 0x16	; 22
    9416:	4d 91       	ld	r20, X+
    9418:	5d 91       	ld	r21, X+
    941a:	6d 91       	ld	r22, X+
    941c:	7c 91       	ld	r23, X
    941e:	59 97       	sbiw	r26, 0x19	; 25
    9420:	8d 91       	ld	r24, X+
    9422:	9c 91       	ld	r25, X
    9424:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    9428:	89 2b       	or	r24, r25
    942a:	49 f0       	breq	.+18     	; 0x943e <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    942c:	eb 81       	ldd	r30, Y+3	; 0x03
    942e:	fc 81       	ldd	r31, Y+4	; 0x04
    9430:	84 81       	ldd	r24, Z+4	; 0x04
    9432:	80 68       	ori	r24, 0x80	; 128
    9434:	84 83       	std	Z+4, r24	; 0x04
    9436:	31 e0       	ldi	r19, 0x01	; 1
    9438:	83 2e       	mov	r8, r19
    943a:	91 2c       	mov	r9, r1
    943c:	69 c0       	rjmp	.+210    	; 0x9510 <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    943e:	c6 01       	movw	r24, r12
    9440:	91 70       	andi	r25, 0x01	; 1
    9442:	20 e0       	ldi	r18, 0x00	; 0
    9444:	32 e0       	ldi	r19, 0x02	; 2
    9446:	28 1b       	sub	r18, r24
    9448:	39 0b       	sbc	r19, r25
    944a:	b3 01       	movw	r22, r6
    944c:	26 15       	cp	r18, r6
    944e:	37 05       	cpc	r19, r7
    9450:	08 f4       	brcc	.+2      	; 0x9454 <f_write+0x38c>
    9452:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9454:	ab 81       	ldd	r26, Y+3	; 0x03
    9456:	bc 81       	ldd	r27, Y+4	; 0x04
    9458:	16 96       	adiw	r26, 0x06	; 6
    945a:	8d 91       	ld	r24, X+
    945c:	9c 91       	ld	r25, X
    945e:	17 97       	sbiw	r26, 0x07	; 7
    9460:	91 70       	andi	r25, 0x01	; 1
    9462:	c2 96       	adiw	r24, 0x32	; 50
    9464:	0d 90       	ld	r0, X+
    9466:	bc 91       	ld	r27, X
    9468:	a0 2d       	mov	r26, r0
    946a:	a8 0f       	add	r26, r24
    946c:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    946e:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    9470:	92 01       	movw	r18, r4
    9472:	26 0f       	add	r18, r22
    9474:	37 1f       	adc	r19, r23
    9476:	02 c0       	rjmp	.+4      	; 0x947c <f_write+0x3b4>
    9478:	81 91       	ld	r24, Z+
    947a:	8d 93       	st	X+, r24
    947c:	e2 17       	cp	r30, r18
    947e:	f3 07       	cpc	r31, r19
    9480:	d9 f7       	brne	.-10     	; 0x9478 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9482:	ab 81       	ldd	r26, Y+3	; 0x03
    9484:	bc 81       	ldd	r27, Y+4	; 0x04
    9486:	ed 91       	ld	r30, X+
    9488:	fc 91       	ld	r31, X
    948a:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    948c:	46 0e       	add	r4, r22
    948e:	57 1e       	adc	r5, r23
    9490:	cb 01       	movw	r24, r22
    9492:	a0 e0       	ldi	r26, 0x00	; 0
    9494:	b0 e0       	ldi	r27, 0x00	; 0
    9496:	eb 81       	ldd	r30, Y+3	; 0x03
    9498:	fc 81       	ldd	r31, Y+4	; 0x04
    949a:	26 81       	ldd	r18, Z+6	; 0x06
    949c:	37 81       	ldd	r19, Z+7	; 0x07
    949e:	40 85       	ldd	r20, Z+8	; 0x08
    94a0:	51 85       	ldd	r21, Z+9	; 0x09
    94a2:	28 0f       	add	r18, r24
    94a4:	39 1f       	adc	r19, r25
    94a6:	4a 1f       	adc	r20, r26
    94a8:	5b 1f       	adc	r21, r27
    94aa:	26 83       	std	Z+6, r18	; 0x06
    94ac:	37 83       	std	Z+7, r19	; 0x07
    94ae:	40 87       	std	Z+8, r20	; 0x08
    94b0:	51 87       	std	Z+9, r21	; 0x09
    94b2:	e9 81       	ldd	r30, Y+1	; 0x01
    94b4:	fa 81       	ldd	r31, Y+2	; 0x02
    94b6:	80 81       	ld	r24, Z
    94b8:	91 81       	ldd	r25, Z+1	; 0x01
    94ba:	86 0f       	add	r24, r22
    94bc:	97 1f       	adc	r25, r23
    94be:	80 83       	st	Z, r24
    94c0:	91 83       	std	Z+1, r25	; 0x01
    94c2:	66 1a       	sub	r6, r22
    94c4:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    94c6:	61 14       	cp	r6, r1
    94c8:	71 04       	cpc	r7, r1
    94ca:	09 f0       	breq	.+2      	; 0x94ce <f_write+0x406>
    94cc:	3f ce       	rjmp	.-898    	; 0x914c <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    94ce:	ab 81       	ldd	r26, Y+3	; 0x03
    94d0:	bc 81       	ldd	r27, Y+4	; 0x04
    94d2:	16 96       	adiw	r26, 0x06	; 6
    94d4:	2d 91       	ld	r18, X+
    94d6:	3d 91       	ld	r19, X+
    94d8:	4d 91       	ld	r20, X+
    94da:	5c 91       	ld	r21, X
    94dc:	19 97       	sbiw	r26, 0x09	; 9
    94de:	1a 96       	adiw	r26, 0x0a	; 10
    94e0:	8d 91       	ld	r24, X+
    94e2:	9d 91       	ld	r25, X+
    94e4:	0d 90       	ld	r0, X+
    94e6:	bc 91       	ld	r27, X
    94e8:	a0 2d       	mov	r26, r0
    94ea:	82 17       	cp	r24, r18
    94ec:	93 07       	cpc	r25, r19
    94ee:	a4 07       	cpc	r26, r20
    94f0:	b5 07       	cpc	r27, r21
    94f2:	30 f4       	brcc	.+12     	; 0x9500 <f_write+0x438>
    94f4:	eb 81       	ldd	r30, Y+3	; 0x03
    94f6:	fc 81       	ldd	r31, Y+4	; 0x04
    94f8:	22 87       	std	Z+10, r18	; 0x0a
    94fa:	33 87       	std	Z+11, r19	; 0x0b
    94fc:	44 87       	std	Z+12, r20	; 0x0c
    94fe:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    9500:	ab 81       	ldd	r26, Y+3	; 0x03
    9502:	bc 81       	ldd	r27, Y+4	; 0x04
    9504:	14 96       	adiw	r26, 0x04	; 4
    9506:	8c 91       	ld	r24, X
    9508:	14 97       	sbiw	r26, 0x04	; 4
    950a:	80 62       	ori	r24, 0x20	; 32
    950c:	14 96       	adiw	r26, 0x04	; 4
    950e:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    9510:	c4 01       	movw	r24, r8
    9512:	24 96       	adiw	r28, 0x04	; 4
    9514:	e2 e1       	ldi	r30, 0x12	; 18
    9516:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

0000951a <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    951a:	a3 e0       	ldi	r26, 0x03	; 3
    951c:	b0 e0       	ldi	r27, 0x00	; 0
    951e:	e3 e9       	ldi	r30, 0x93	; 147
    9520:	fa e4       	ldi	r31, 0x4A	; 74
    9522:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
    9526:	7c 01       	movw	r14, r24
    9528:	8b 01       	movw	r16, r22
	UINT bw;
	char c;


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
    952a:	8a e0       	ldi	r24, 0x0A	; 10
    952c:	e8 16       	cp	r14, r24
    952e:	f1 04       	cpc	r15, r1
    9530:	21 f4       	brne	.+8      	; 0x953a <f_putc+0x20>
    9532:	8d e0       	ldi	r24, 0x0D	; 13
    9534:	90 e0       	ldi	r25, 0x00	; 0
    9536:	0e 94 8d 4a 	call	0x951a	; 0x951a <f_putc>
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    953a:	01 15       	cp	r16, r1
    953c:	11 05       	cpc	r17, r1
    953e:	99 f0       	breq	.+38     	; 0x9566 <f_putc+0x4c>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    9540:	e9 82       	std	Y+1, r14	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    9542:	c8 01       	movw	r24, r16
    9544:	be 01       	movw	r22, r28
    9546:	6f 5f       	subi	r22, 0xFF	; 255
    9548:	7f 4f       	sbci	r23, 0xFF	; 255
    954a:	41 e0       	ldi	r20, 0x01	; 1
    954c:	50 e0       	ldi	r21, 0x00	; 0
    954e:	9e 01       	movw	r18, r28
    9550:	2e 5f       	subi	r18, 0xFE	; 254
    9552:	3f 4f       	sbci	r19, 0xFF	; 255
    9554:	0e 94 64 48 	call	0x90c8	; 0x90c8 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    9558:	8a 81       	ldd	r24, Y+2	; 0x02
    955a:	9b 81       	ldd	r25, Y+3	; 0x03
    955c:	89 2b       	or	r24, r25
    955e:	19 f4       	brne	.+6      	; 0x9566 <f_putc+0x4c>
    9560:	ee 24       	eor	r14, r14
    9562:	ea 94       	dec	r14
    9564:	fe 2c       	mov	r15, r14
}
    9566:	c7 01       	movw	r24, r14
    9568:	23 96       	adiw	r28, 0x03	; 3
    956a:	e6 e0       	ldi	r30, 0x06	; 6
    956c:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

00009570 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    9570:	ef 92       	push	r14
    9572:	ff 92       	push	r15
    9574:	0f 93       	push	r16
    9576:	1f 93       	push	r17
    9578:	cf 93       	push	r28
    957a:	df 93       	push	r29
    957c:	8c 01       	movw	r16, r24
    957e:	7b 01       	movw	r14, r22
    9580:	c0 e0       	ldi	r28, 0x00	; 0
    9582:	d0 e0       	ldi	r29, 0x00	; 0
    9584:	0f c0       	rjmp	.+30     	; 0x95a4 <f_puts+0x34>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    9586:	99 27       	eor	r25, r25
    9588:	87 fd       	sbrc	r24, 7
    958a:	90 95       	com	r25
    958c:	b7 01       	movw	r22, r14
    958e:	0e 94 8d 4a 	call	0x951a	; 0x951a <f_putc>
    9592:	8f 5f       	subi	r24, 0xFF	; 255
    9594:	9f 4f       	sbci	r25, 0xFF	; 255
    9596:	19 f4       	brne	.+6      	; 0x959e <f_puts+0x2e>
    9598:	cf ef       	ldi	r28, 0xFF	; 255
    959a:	df ef       	ldi	r29, 0xFF	; 255
    959c:	07 c0       	rjmp	.+14     	; 0x95ac <f_puts+0x3c>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    959e:	0f 5f       	subi	r16, 0xFF	; 255
    95a0:	1f 4f       	sbci	r17, 0xFF	; 255
    95a2:	21 96       	adiw	r28, 0x01	; 1
    95a4:	f8 01       	movw	r30, r16
    95a6:	80 81       	ld	r24, Z
    95a8:	88 23       	and	r24, r24
    95aa:	69 f7       	brne	.-38     	; 0x9586 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    95ac:	ce 01       	movw	r24, r28
    95ae:	cd b7       	in	r28, 0x3d	; 61
    95b0:	de b7       	in	r29, 0x3e	; 62
    95b2:	e6 e0       	ldi	r30, 0x06	; 6
    95b4:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

000095b8 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    95b8:	a3 e1       	ldi	r26, 0x13	; 19
    95ba:	b0 e0       	ldi	r27, 0x00	; 0
    95bc:	e2 ee       	ldi	r30, 0xE2	; 226
    95be:	fa e4       	ldi	r31, 0x4A	; 74
    95c0:	0c 94 a3 57 	jmp	0xaf46	; 0xaf46 <__prologue_saves__>
    95c4:	6b a4       	ldd	r6, Y+43	; 0x2b
    95c6:	7c a4       	ldd	r7, Y+44	; 0x2c
    95c8:	8e 01       	movw	r16, r28
    95ca:	03 5d       	subi	r16, 0xD3	; 211
    95cc:	1f 4f       	sbci	r17, 0xFF	; 255
    95ce:	19 8a       	std	Y+17, r1	; 0x11
    95d0:	1a 8a       	std	Y+18, r1	; 0x12
    95d2:	20 e0       	ldi	r18, 0x00	; 0
    95d4:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    95d6:	d3 01       	movw	r26, r6
    95d8:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    95da:	88 23       	and	r24, r24
    95dc:	09 f4       	brne	.+2      	; 0x95e0 <f_printf+0x28>
    95de:	17 c1       	rjmp	.+558    	; 0x980e <f_printf+0x256>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    95e0:	08 94       	sec
    95e2:	61 1c       	adc	r6, r1
    95e4:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    95e6:	85 32       	cpi	r24, 0x25	; 37
    95e8:	71 f0       	breq	.+28     	; 0x9606 <f_printf+0x4e>
			cc = f_putc(c, fil);
    95ea:	90 e0       	ldi	r25, 0x00	; 0
    95ec:	69 a5       	ldd	r22, Y+41	; 0x29
    95ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    95f0:	0e 94 8d 4a 	call	0x951a	; 0x951a <f_putc>
    95f4:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    95f6:	bf ef       	ldi	r27, 0xFF	; 255
    95f8:	8f 3f       	cpi	r24, 0xFF	; 255
    95fa:	9b 07       	cpc	r25, r27
    95fc:	11 f4       	brne	.+4      	; 0x9602 <f_printf+0x4a>
    95fe:	48 01       	movw	r8, r16
    9600:	fa c0       	rjmp	.+500    	; 0x97f6 <f_printf+0x23e>
    9602:	48 01       	movw	r8, r16
    9604:	4c c0       	rjmp	.+152    	; 0x969e <f_printf+0xe6>
			continue;
		}
		w = f = 0;
		c = *str++;
    9606:	d3 01       	movw	r26, r6
    9608:	ed 91       	ld	r30, X+
    960a:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    960c:	e0 33       	cpi	r30, 0x30	; 48
    960e:	11 f0       	breq	.+4      	; 0x9614 <f_printf+0x5c>
    9610:	1b 8a       	std	Y+19, r1	; 0x13
    9612:	04 c0       	rjmp	.+8      	; 0x961c <f_printf+0x64>
			f = 1; c = *str++;
    9614:	ed 91       	ld	r30, X+
    9616:	3d 01       	movw	r6, r26
    9618:	b1 e0       	ldi	r27, 0x01	; 1
    961a:	bb 8b       	std	Y+19, r27	; 0x13
    961c:	aa 24       	eor	r10, r10
    961e:	bb 24       	eor	r11, r11
    9620:	13 c0       	rjmp	.+38     	; 0x9648 <f_printf+0x90>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9622:	c5 01       	movw	r24, r10
    9624:	53 e0       	ldi	r21, 0x03	; 3
    9626:	88 0f       	add	r24, r24
    9628:	99 1f       	adc	r25, r25
    962a:	5a 95       	dec	r21
    962c:	e1 f7       	brne	.-8      	; 0x9626 <f_printf+0x6e>
    962e:	aa 0c       	add	r10, r10
    9630:	bb 1c       	adc	r11, r11
    9632:	a8 0e       	add	r10, r24
    9634:	b9 1e       	adc	r11, r25
    9636:	ae 0e       	add	r10, r30
    9638:	b1 1c       	adc	r11, r1
    963a:	e0 ed       	ldi	r30, 0xD0	; 208
    963c:	ff ef       	ldi	r31, 0xFF	; 255
    963e:	ae 0e       	add	r10, r30
    9640:	bf 1e       	adc	r11, r31
			c = *str++;
    9642:	d3 01       	movw	r26, r6
    9644:	ed 91       	ld	r30, X+
    9646:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9648:	8e 2f       	mov	r24, r30
    964a:	80 53       	subi	r24, 0x30	; 48
    964c:	8a 30       	cpi	r24, 0x0A	; 10
    964e:	48 f3       	brcs	.-46     	; 0x9622 <f_printf+0x6a>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9650:	ec 36       	cpi	r30, 0x6C	; 108
    9652:	31 f4       	brne	.+12     	; 0x9660 <f_printf+0xa8>
			f |= 2; c = *str++;
    9654:	bb 89       	ldd	r27, Y+19	; 0x13
    9656:	b2 60       	ori	r27, 0x02	; 2
    9658:	bb 8b       	std	Y+19, r27	; 0x13
    965a:	d3 01       	movw	r26, r6
    965c:	ed 91       	ld	r30, X+
    965e:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9660:	e3 37       	cpi	r30, 0x73	; 115
    9662:	49 f4       	brne	.+18     	; 0x9676 <f_printf+0xbe>
			cc = f_puts(va_arg(arp, char*), fil);
    9664:	92 e0       	ldi	r25, 0x02	; 2
    9666:	89 2e       	mov	r8, r25
    9668:	91 2c       	mov	r9, r1
    966a:	80 0e       	add	r8, r16
    966c:	91 1e       	adc	r9, r17
    966e:	f8 01       	movw	r30, r16
    9670:	80 81       	ld	r24, Z
    9672:	91 81       	ldd	r25, Z+1	; 0x01
    9674:	bb c0       	rjmp	.+374    	; 0x97ec <f_printf+0x234>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9676:	e3 36       	cpi	r30, 0x63	; 99
    9678:	a9 f4       	brne	.+42     	; 0x96a4 <f_printf+0xec>
			cc = f_putc(va_arg(arp, int), fil);
    967a:	82 e0       	ldi	r24, 0x02	; 2
    967c:	88 2e       	mov	r8, r24
    967e:	91 2c       	mov	r9, r1
    9680:	80 0e       	add	r8, r16
    9682:	91 1e       	adc	r9, r17
    9684:	d8 01       	movw	r26, r16
    9686:	8d 91       	ld	r24, X+
    9688:	9c 91       	ld	r25, X
    968a:	69 a5       	ldd	r22, Y+41	; 0x29
    968c:	7a a5       	ldd	r23, Y+42	; 0x2a
    968e:	0e 94 8d 4a 	call	0x951a	; 0x951a <f_putc>
    9692:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9694:	bf ef       	ldi	r27, 0xFF	; 255
    9696:	8f 3f       	cpi	r24, 0xFF	; 255
    9698:	9b 07       	cpc	r25, r27
    969a:	09 f4       	brne	.+2      	; 0x969e <f_printf+0xe6>
    969c:	ac c0       	rjmp	.+344    	; 0x97f6 <f_printf+0x23e>
    969e:	21 e0       	ldi	r18, 0x01	; 1
    96a0:	30 e0       	ldi	r19, 0x00	; 0
    96a2:	a9 c0       	rjmp	.+338    	; 0x97f6 <f_printf+0x23e>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    96a4:	e4 36       	cpi	r30, 0x64	; 100
    96a6:	39 f0       	breq	.+14     	; 0x96b6 <f_printf+0xfe>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    96a8:	e5 37       	cpi	r30, 0x75	; 117
    96aa:	29 f0       	breq	.+10     	; 0x96b6 <f_printf+0xfe>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    96ac:	e8 35       	cpi	r30, 0x58	; 88
    96ae:	09 f0       	breq	.+2      	; 0x96b2 <f_printf+0xfa>
    96b0:	ae c0       	rjmp	.+348    	; 0x980e <f_printf+0x256>
    96b2:	20 e1       	ldi	r18, 0x10	; 16
    96b4:	01 c0       	rjmp	.+2      	; 0x96b8 <f_printf+0x100>
    96b6:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    96b8:	fb 89       	ldd	r31, Y+19	; 0x13
    96ba:	f1 ff       	sbrs	r31, 1
    96bc:	0d c0       	rjmp	.+26     	; 0x96d8 <f_printf+0x120>
			val = (ULONG)va_arg(arp, long);
    96be:	b4 e0       	ldi	r27, 0x04	; 4
    96c0:	8b 2e       	mov	r8, r27
    96c2:	91 2c       	mov	r9, r1
    96c4:	80 0e       	add	r8, r16
    96c6:	91 1e       	adc	r9, r17
    96c8:	d8 01       	movw	r26, r16
    96ca:	ed 90       	ld	r14, X+
    96cc:	fd 90       	ld	r15, X+
    96ce:	0d 91       	ld	r16, X+
    96d0:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    96d2:	e4 36       	cpi	r30, 0x64	; 100
    96d4:	09 f5       	brne	.+66     	; 0x9718 <f_printf+0x160>
    96d6:	13 c0       	rjmp	.+38     	; 0x96fe <f_printf+0x146>
    96d8:	c8 01       	movw	r24, r16
    96da:	02 96       	adiw	r24, 0x02	; 2
    96dc:	d8 01       	movw	r26, r16
    96de:	6d 91       	ld	r22, X+
    96e0:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    96e2:	e4 36       	cpi	r30, 0x64	; 100
    96e4:	39 f4       	brne	.+14     	; 0x96f4 <f_printf+0x13c>
    96e6:	4c 01       	movw	r8, r24
    96e8:	7b 01       	movw	r14, r22
    96ea:	00 27       	eor	r16, r16
    96ec:	f7 fc       	sbrc	r15, 7
    96ee:	00 95       	com	r16
    96f0:	10 2f       	mov	r17, r16
    96f2:	05 c0       	rjmp	.+10     	; 0x96fe <f_printf+0x146>
    96f4:	4c 01       	movw	r8, r24
    96f6:	7b 01       	movw	r14, r22
    96f8:	00 e0       	ldi	r16, 0x00	; 0
    96fa:	10 e0       	ldi	r17, 0x00	; 0
    96fc:	0d c0       	rjmp	.+26     	; 0x9718 <f_printf+0x160>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    96fe:	17 ff       	sbrs	r17, 7
    9700:	0b c0       	rjmp	.+22     	; 0x9718 <f_printf+0x160>
				val = 0 - val;
    9702:	10 95       	com	r17
    9704:	00 95       	com	r16
    9706:	f0 94       	com	r15
    9708:	e0 94       	com	r14
    970a:	e1 1c       	adc	r14, r1
    970c:	f1 1c       	adc	r15, r1
    970e:	01 1d       	adc	r16, r1
    9710:	11 1d       	adc	r17, r1
				f |= 4;
    9712:	bb 89       	ldd	r27, Y+19	; 0x13
    9714:	b4 60       	ori	r27, 0x04	; 4
    9716:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9718:	18 8a       	std	Y+16, r1	; 0x10
    971a:	af e0       	ldi	r26, 0x0F	; 15
    971c:	ca 2e       	mov	r12, r26
    971e:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9720:	22 2e       	mov	r2, r18
    9722:	33 24       	eor	r3, r3
    9724:	44 24       	eor	r4, r4
    9726:	55 24       	eor	r5, r5
    9728:	c8 01       	movw	r24, r16
    972a:	b7 01       	movw	r22, r14
    972c:	a2 01       	movw	r20, r4
    972e:	91 01       	movw	r18, r2
    9730:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    9734:	86 2f       	mov	r24, r22
    9736:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9738:	8a 33       	cpi	r24, 0x3A	; 58
    973a:	08 f0       	brcs	.+2      	; 0x973e <f_printf+0x186>
    973c:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    973e:	08 94       	sec
    9740:	c1 08       	sbc	r12, r1
    9742:	d1 08       	sbc	r13, r1
    9744:	e1 e0       	ldi	r30, 0x01	; 1
    9746:	f0 e0       	ldi	r31, 0x00	; 0
    9748:	ec 0f       	add	r30, r28
    974a:	fd 1f       	adc	r31, r29
    974c:	ec 0d       	add	r30, r12
    974e:	fd 1d       	adc	r31, r13
    9750:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9752:	c1 14       	cp	r12, r1
    9754:	d1 04       	cpc	r13, r1
    9756:	e9 f0       	breq	.+58     	; 0x9792 <f_printf+0x1da>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9758:	c8 01       	movw	r24, r16
    975a:	b7 01       	movw	r22, r14
    975c:	a2 01       	movw	r20, r4
    975e:	91 01       	movw	r18, r2
    9760:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    9764:	c9 01       	movw	r24, r18
    9766:	da 01       	movw	r26, r20
    9768:	7c 01       	movw	r14, r24
    976a:	8d 01       	movw	r16, r26
		} while (i && val);
    976c:	e1 14       	cp	r14, r1
    976e:	f1 04       	cpc	r15, r1
    9770:	01 05       	cpc	r16, r1
    9772:	11 05       	cpc	r17, r1
    9774:	c9 f6       	brne	.-78     	; 0x9728 <f_printf+0x170>
		if (i && (f & 4)) s[--i] = '-';
    9776:	eb 89       	ldd	r30, Y+19	; 0x13
    9778:	e2 ff       	sbrs	r30, 2
    977a:	0b c0       	rjmp	.+22     	; 0x9792 <f_printf+0x1da>
    977c:	08 94       	sec
    977e:	c1 08       	sbc	r12, r1
    9780:	d1 08       	sbc	r13, r1
    9782:	e1 e0       	ldi	r30, 0x01	; 1
    9784:	f0 e0       	ldi	r31, 0x00	; 0
    9786:	ec 0f       	add	r30, r28
    9788:	fd 1f       	adc	r31, r29
    978a:	ec 0d       	add	r30, r12
    978c:	fd 1d       	adc	r31, r13
    978e:	4d e2       	ldi	r20, 0x2D	; 45
    9790:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9792:	8f e0       	ldi	r24, 0x0F	; 15
    9794:	90 e0       	ldi	r25, 0x00	; 0
    9796:	8a 19       	sub	r24, r10
    9798:	9b 09       	sbc	r25, r11
    979a:	08 94       	sec
    979c:	c1 08       	sbc	r12, r1
    979e:	d1 08       	sbc	r13, r1
    97a0:	e1 e0       	ldi	r30, 0x01	; 1
    97a2:	f0 e0       	ldi	r31, 0x00	; 0
    97a4:	ec 0f       	add	r30, r28
    97a6:	fd 1f       	adc	r31, r29
    97a8:	ec 0d       	add	r30, r12
    97aa:	fd 1d       	adc	r31, r13
    97ac:	08 94       	sec
    97ae:	c1 1c       	adc	r12, r1
    97b0:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    97b2:	ab 89       	ldd	r26, Y+19	; 0x13
    97b4:	2a 2f       	mov	r18, r26
    97b6:	30 e0       	ldi	r19, 0x00	; 0
    97b8:	21 70       	andi	r18, 0x01	; 1
    97ba:	30 70       	andi	r19, 0x00	; 0
    97bc:	0b c0       	rjmp	.+22     	; 0x97d4 <f_printf+0x21c>
    97be:	08 94       	sec
    97c0:	c1 08       	sbc	r12, r1
    97c2:	d1 08       	sbc	r13, r1
    97c4:	21 15       	cp	r18, r1
    97c6:	31 05       	cpc	r19, r1
    97c8:	11 f4       	brne	.+4      	; 0x97ce <f_printf+0x216>
    97ca:	40 e2       	ldi	r20, 0x20	; 32
    97cc:	01 c0       	rjmp	.+2      	; 0x97d0 <f_printf+0x218>
    97ce:	40 e3       	ldi	r20, 0x30	; 48
    97d0:	40 83       	st	Z, r20
    97d2:	31 97       	sbiw	r30, 0x01	; 1
    97d4:	c1 14       	cp	r12, r1
    97d6:	d1 04       	cpc	r13, r1
    97d8:	19 f0       	breq	.+6      	; 0x97e0 <f_printf+0x228>
    97da:	8c 15       	cp	r24, r12
    97dc:	9d 05       	cpc	r25, r13
    97de:	7c f3       	brlt	.-34     	; 0x97be <f_printf+0x206>
		cc = f_puts(&s[i], fil);
    97e0:	81 e0       	ldi	r24, 0x01	; 1
    97e2:	90 e0       	ldi	r25, 0x00	; 0
    97e4:	8c 0f       	add	r24, r28
    97e6:	9d 1f       	adc	r25, r29
    97e8:	8c 0d       	add	r24, r12
    97ea:	9d 1d       	adc	r25, r13
    97ec:	69 a5       	ldd	r22, Y+41	; 0x29
    97ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    97f0:	0e 94 b8 4a 	call	0x9570	; 0x9570 <f_puts>
    97f4:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    97f6:	e9 89       	ldd	r30, Y+17	; 0x11
    97f8:	fa 89       	ldd	r31, Y+18	; 0x12
    97fa:	e2 0f       	add	r30, r18
    97fc:	f3 1f       	adc	r31, r19
    97fe:	e9 8b       	std	Y+17, r30	; 0x11
    9800:	fa 8b       	std	Y+18, r31	; 0x12
    9802:	ff ef       	ldi	r31, 0xFF	; 255
    9804:	2f 3f       	cpi	r18, 0xFF	; 255
    9806:	3f 07       	cpc	r19, r31
    9808:	41 f0       	breq	.+16     	; 0x981a <f_printf+0x262>
    980a:	84 01       	movw	r16, r8
    980c:	e4 ce       	rjmp	.-568    	; 0x95d6 <f_printf+0x1e>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    980e:	4f ef       	ldi	r20, 0xFF	; 255
    9810:	2f 3f       	cpi	r18, 0xFF	; 255
    9812:	34 07       	cpc	r19, r20
    9814:	11 f0       	breq	.+4      	; 0x981a <f_printf+0x262>
    9816:	29 89       	ldd	r18, Y+17	; 0x11
    9818:	3a 89       	ldd	r19, Y+18	; 0x12
}
    981a:	c9 01       	movw	r24, r18
    981c:	63 96       	adiw	r28, 0x13	; 19
    981e:	e2 e1       	ldi	r30, 0x12	; 18
    9820:	0c 94 bf 57 	jmp	0xaf7e	; 0xaf7e <__epilogue_restores__>

00009824 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9824:	a4 e2       	ldi	r26, 0x24	; 36
    9826:	b0 e0       	ldi	r27, 0x00	; 0
    9828:	e8 e1       	ldi	r30, 0x18	; 24
    982a:	fc e4       	ldi	r31, 0x4C	; 76
    982c:	0c 94 a6 57 	jmp	0xaf4c	; 0xaf4c <__prologue_saves__+0x6>
    9830:	5c 01       	movw	r10, r24
    9832:	6b a3       	std	Y+35, r22	; 0x23
    9834:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    9836:	dc 01       	movw	r26, r24
    9838:	1d 92       	st	X+, r1
    983a:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    983c:	0f e1       	ldi	r16, 0x1F	; 31
    983e:	50 2e       	mov	r5, r16
    9840:	54 22       	and	r5, r20
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    9842:	8e 01       	movw	r16, r28
    9844:	03 5f       	subi	r16, 0xF3	; 243
    9846:	1f 4f       	sbci	r17, 0xFF	; 255
    9848:	4e 71       	andi	r20, 0x1E	; 30
    984a:	ce 01       	movw	r24, r28
    984c:	83 96       	adiw	r24, 0x23	; 35
    984e:	b8 01       	movw	r22, r16
    9850:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9854:	00 97       	sbiw	r24, 0x00	; 0
    9856:	11 f0       	breq	.+4      	; 0x985c <f_open+0x38>
    9858:	9c 01       	movw	r18, r24
    985a:	f6 c0       	rjmp	.+492    	; 0x9a48 <f_open+0x224>
	INITBUF(dj, sfn, lfn);
    985c:	ce 01       	movw	r24, r28
    985e:	01 96       	adiw	r24, 0x01	; 1
    9860:	89 a3       	std	Y+33, r24	; 0x21
    9862:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    9864:	6b a1       	ldd	r22, Y+35	; 0x23
    9866:	7c a1       	ldd	r23, Y+36	; 0x24
    9868:	c8 01       	movw	r24, r16
    986a:	0e 94 0d 40 	call	0x801a	; 0x801a <follow_path>
    986e:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9870:	45 2d       	mov	r20, r5
    9872:	50 e0       	ldi	r21, 0x00	; 0
    9874:	ca 01       	movw	r24, r20
    9876:	8c 71       	andi	r24, 0x1C	; 28
    9878:	90 70       	andi	r25, 0x00	; 0
    987a:	89 2b       	or	r24, r25
    987c:	09 f4       	brne	.+2      	; 0x9880 <f_open+0x5c>
    987e:	7e c0       	rjmp	.+252    	; 0x997c <f_open+0x158>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    9880:	21 15       	cp	r18, r1
    9882:	31 05       	cpc	r19, r1
    9884:	81 f0       	breq	.+32     	; 0x98a6 <f_open+0x82>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    9886:	24 30       	cpi	r18, 0x04	; 4
    9888:	31 05       	cpc	r19, r1
    988a:	09 f0       	breq	.+2      	; 0x988e <f_open+0x6a>
    988c:	dd c0       	rjmp	.+442    	; 0x9a48 <f_open+0x224>
				res = dir_register(&dj);
    988e:	c8 01       	movw	r24, r16
    9890:	0e 94 31 42 	call	0x8462	; 0x8462 <dir_register>
    9894:	9c 01       	movw	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9896:	00 97       	sbiw	r24, 0x00	; 0
    9898:	09 f0       	breq	.+2      	; 0x989c <f_open+0x78>
    989a:	d6 c0       	rjmp	.+428    	; 0x9a48 <f_open+0x224>
			mode |= FA_CREATE_ALWAYS;
    989c:	b8 e0       	ldi	r27, 0x08	; 8
    989e:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    98a0:	cf 8c       	ldd	r12, Y+31	; 0x1f
    98a2:	d8 a0       	ldd	r13, Y+32	; 0x20
    98a4:	57 c0       	rjmp	.+174    	; 0x9954 <f_open+0x130>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    98a6:	52 fe       	sbrs	r5, 2
    98a8:	03 c0       	rjmp	.+6      	; 0x98b0 <f_open+0x8c>
    98aa:	28 e0       	ldi	r18, 0x08	; 8
    98ac:	30 e0       	ldi	r19, 0x00	; 0
    98ae:	cc c0       	rjmp	.+408    	; 0x9a48 <f_open+0x224>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    98b0:	cf 8c       	ldd	r12, Y+31	; 0x1f
    98b2:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    98b4:	c1 14       	cp	r12, r1
    98b6:	d1 04       	cpc	r13, r1
    98b8:	09 f4       	brne	.+2      	; 0x98bc <f_open+0x98>
    98ba:	c1 c0       	rjmp	.+386    	; 0x9a3e <f_open+0x21a>
    98bc:	f6 01       	movw	r30, r12
    98be:	83 85       	ldd	r24, Z+11	; 0x0b
    98c0:	81 71       	andi	r24, 0x11	; 17
    98c2:	09 f0       	breq	.+2      	; 0x98c6 <f_open+0xa2>
    98c4:	bc c0       	rjmp	.+376    	; 0x9a3e <f_open+0x21a>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    98c6:	53 fe       	sbrs	r5, 3
    98c8:	45 c0       	rjmp	.+138    	; 0x9954 <f_open+0x130>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    98ca:	84 89       	ldd	r24, Z+20	; 0x14
    98cc:	95 89       	ldd	r25, Z+21	; 0x15
    98ce:	a0 e0       	ldi	r26, 0x00	; 0
    98d0:	b0 e0       	ldi	r27, 0x00	; 0
    98d2:	8c 01       	movw	r16, r24
    98d4:	ff 24       	eor	r15, r15
    98d6:	ee 24       	eor	r14, r14
    98d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    98da:	93 8d       	ldd	r25, Z+27	; 0x1b
    98dc:	a0 e0       	ldi	r26, 0x00	; 0
    98de:	b0 e0       	ldi	r27, 0x00	; 0
    98e0:	e8 2a       	or	r14, r24
    98e2:	f9 2a       	or	r15, r25
    98e4:	0a 2b       	or	r16, r26
    98e6:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    98e8:	14 8a       	std	Z+20, r1	; 0x14
    98ea:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    98ec:	12 8e       	std	Z+26, r1	; 0x1a
    98ee:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    98f0:	d6 01       	movw	r26, r12
    98f2:	5c 96       	adiw	r26, 0x1c	; 28
    98f4:	1d 92       	st	X+, r1
    98f6:	1d 92       	st	X+, r1
    98f8:	1d 92       	st	X+, r1
    98fa:	1c 92       	st	X, r1
    98fc:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    98fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    9900:	fe 85       	ldd	r31, Y+14	; 0x0e
    9902:	81 e0       	ldi	r24, 0x01	; 1
    9904:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    9906:	66 a4       	ldd	r6, Z+46	; 0x2e
    9908:	77 a4       	ldd	r7, Z+47	; 0x2f
    990a:	80 a8       	ldd	r8, Z+48	; 0x30
    990c:	91 a8       	ldd	r9, Z+49	; 0x31
				if (cl) {
    990e:	e1 14       	cp	r14, r1
    9910:	f1 04       	cpc	r15, r1
    9912:	01 05       	cpc	r16, r1
    9914:	11 05       	cpc	r17, r1
    9916:	a1 f0       	breq	.+40     	; 0x9940 <f_open+0x11c>
					res = remove_chain(dj.fs, cl);
    9918:	cf 01       	movw	r24, r30
    991a:	b8 01       	movw	r22, r16
    991c:	a7 01       	movw	r20, r14
    991e:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <remove_chain>
    9922:	9c 01       	movw	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    9924:	00 97       	sbiw	r24, 0x00	; 0
    9926:	09 f0       	breq	.+2      	; 0x992a <f_open+0x106>
    9928:	8f c0       	rjmp	.+286    	; 0x9a48 <f_open+0x224>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    992a:	ed 85       	ldd	r30, Y+13	; 0x0d
    992c:	fe 85       	ldd	r31, Y+14	; 0x0e
    992e:	08 94       	sec
    9930:	e1 08       	sbc	r14, r1
    9932:	f1 08       	sbc	r15, r1
    9934:	01 09       	sbc	r16, r1
    9936:	11 09       	sbc	r17, r1
    9938:	e2 86       	std	Z+10, r14	; 0x0a
    993a:	f3 86       	std	Z+11, r15	; 0x0b
    993c:	04 87       	std	Z+12, r16	; 0x0c
    993e:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    9940:	8d 85       	ldd	r24, Y+13	; 0x0d
    9942:	9e 85       	ldd	r25, Y+14	; 0x0e
    9944:	b4 01       	movw	r22, r8
    9946:	a3 01       	movw	r20, r6
    9948:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    994c:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    994e:	00 97       	sbiw	r24, 0x00	; 0
    9950:	09 f0       	breq	.+2      	; 0x9954 <f_open+0x130>
    9952:	7a c0       	rjmp	.+244    	; 0x9a48 <f_open+0x224>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    9954:	53 fe       	sbrs	r5, 3
    9956:	24 c0       	rjmp	.+72     	; 0x99a0 <f_open+0x17c>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9958:	f6 01       	movw	r30, r12
    995a:	13 86       	std	Z+11, r1	; 0x0b
			ps = get_fattime();
    995c:	0e 94 7a 54 	call	0xa8f4	; 0xa8f4 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    9960:	d6 01       	movw	r26, r12
    9962:	1e 96       	adiw	r26, 0x0e	; 14
    9964:	6d 93       	st	X+, r22
    9966:	7d 93       	st	X+, r23
    9968:	8d 93       	st	X+, r24
    996a:	9c 93       	st	X, r25
    996c:	51 97       	sbiw	r26, 0x11	; 17
			dj.fs->wflag = 1;
    996e:	ed 85       	ldd	r30, Y+13	; 0x0d
    9970:	fe 85       	ldd	r31, Y+14	; 0x0e
    9972:	81 e0       	ldi	r24, 0x01	; 1
    9974:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    9976:	b0 e2       	ldi	r27, 0x20	; 32
    9978:	5b 2a       	or	r5, r27
    997a:	12 c0       	rjmp	.+36     	; 0x99a0 <f_open+0x17c>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    997c:	21 15       	cp	r18, r1
    997e:	31 05       	cpc	r19, r1
    9980:	09 f0       	breq	.+2      	; 0x9984 <f_open+0x160>
    9982:	62 c0       	rjmp	.+196    	; 0x9a48 <f_open+0x224>
		dir = dj.dir;
    9984:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9986:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    9988:	c1 14       	cp	r12, r1
    998a:	d1 04       	cpc	r13, r1
    998c:	09 f4       	brne	.+2      	; 0x9990 <f_open+0x16c>
    998e:	5a c0       	rjmp	.+180    	; 0x9a44 <f_open+0x220>
    9990:	f6 01       	movw	r30, r12
    9992:	83 85       	ldd	r24, Z+11	; 0x0b
    9994:	84 fd       	sbrc	r24, 4
    9996:	56 c0       	rjmp	.+172    	; 0x9a44 <f_open+0x220>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9998:	51 fe       	sbrs	r5, 1
    999a:	02 c0       	rjmp	.+4      	; 0x99a0 <f_open+0x17c>
    999c:	80 fd       	sbrc	r24, 0
    999e:	4f c0       	rjmp	.+158    	; 0x9a3e <f_open+0x21a>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    99a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    99a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    99a4:	db 01       	movw	r26, r22
    99a6:	9e 96       	adiw	r26, 0x2e	; 46
    99a8:	2d 91       	ld	r18, X+
    99aa:	3d 91       	ld	r19, X+
    99ac:	4d 91       	ld	r20, X+
    99ae:	5c 91       	ld	r21, X
    99b0:	d1 97       	sbiw	r26, 0x31	; 49
    99b2:	f5 01       	movw	r30, r10
    99b4:	22 8f       	std	Z+26, r18	; 0x1a
    99b6:	33 8f       	std	Z+27, r19	; 0x1b
    99b8:	44 8f       	std	Z+28, r20	; 0x1c
    99ba:	55 8f       	std	Z+29, r21	; 0x1d
	fp->dir_ptr = dj.dir;
    99bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    99be:	98 a1       	ldd	r25, Y+32	; 0x20
    99c0:	86 8f       	std	Z+30, r24	; 0x1e
    99c2:	97 8f       	std	Z+31, r25	; 0x1f
#endif
	fp->flag = mode;					/* File access mode */
    99c4:	54 82       	std	Z+4, r5	; 0x04
	fp->org_clust =						/* File start cluster */
    99c6:	d6 01       	movw	r26, r12
    99c8:	54 96       	adiw	r26, 0x14	; 20
    99ca:	8d 91       	ld	r24, X+
    99cc:	9c 91       	ld	r25, X
    99ce:	55 97       	sbiw	r26, 0x15	; 21
    99d0:	a0 e0       	ldi	r26, 0x00	; 0
    99d2:	b0 e0       	ldi	r27, 0x00	; 0
    99d4:	dc 01       	movw	r26, r24
    99d6:	99 27       	eor	r25, r25
    99d8:	88 27       	eor	r24, r24
    99da:	f6 01       	movw	r30, r12
    99dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    99de:	33 8d       	ldd	r19, Z+27	; 0x1b
    99e0:	40 e0       	ldi	r20, 0x00	; 0
    99e2:	50 e0       	ldi	r21, 0x00	; 0
    99e4:	82 2b       	or	r24, r18
    99e6:	93 2b       	or	r25, r19
    99e8:	a4 2b       	or	r26, r20
    99ea:	b5 2b       	or	r27, r21
    99ec:	f5 01       	movw	r30, r10
    99ee:	86 87       	std	Z+14, r24	; 0x0e
    99f0:	97 87       	std	Z+15, r25	; 0x0f
    99f2:	a0 8b       	std	Z+16, r26	; 0x10
    99f4:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    99f6:	f6 01       	movw	r30, r12
    99f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    99fa:	95 8d       	ldd	r25, Z+29	; 0x1d
    99fc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    99fe:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9a00:	f5 01       	movw	r30, r10
    9a02:	82 87       	std	Z+10, r24	; 0x0a
    9a04:	93 87       	std	Z+11, r25	; 0x0b
    9a06:	a4 87       	std	Z+12, r26	; 0x0c
    9a08:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    9a0a:	d5 01       	movw	r26, r10
    9a0c:	16 96       	adiw	r26, 0x06	; 6
    9a0e:	1d 92       	st	X+, r1
    9a10:	1d 92       	st	X+, r1
    9a12:	1d 92       	st	X+, r1
    9a14:	1c 92       	st	X, r1
    9a16:	19 97       	sbiw	r26, 0x09	; 9
    9a18:	8f ef       	ldi	r24, 0xFF	; 255
    9a1a:	15 96       	adiw	r26, 0x05	; 5
    9a1c:	8c 93       	st	X, r24
	fp->dsect = 0;
    9a1e:	16 8a       	std	Z+22, r1	; 0x16
    9a20:	17 8a       	std	Z+23, r1	; 0x17
    9a22:	10 8e       	std	Z+24, r1	; 0x18
    9a24:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    9a26:	60 83       	st	Z, r22
    9a28:	71 83       	std	Z+1, r23	; 0x01
    9a2a:	db 01       	movw	r26, r22
    9a2c:	15 96       	adiw	r26, 0x05	; 5
    9a2e:	8d 91       	ld	r24, X+
    9a30:	9c 91       	ld	r25, X
    9a32:	16 97       	sbiw	r26, 0x06	; 6
    9a34:	82 83       	std	Z+2, r24	; 0x02
    9a36:	93 83       	std	Z+3, r25	; 0x03
    9a38:	20 e0       	ldi	r18, 0x00	; 0
    9a3a:	30 e0       	ldi	r19, 0x00	; 0
    9a3c:	05 c0       	rjmp	.+10     	; 0x9a48 <f_open+0x224>

	LEAVE_FF(dj.fs, FR_OK);
    9a3e:	27 e0       	ldi	r18, 0x07	; 7
    9a40:	30 e0       	ldi	r19, 0x00	; 0
    9a42:	02 c0       	rjmp	.+4      	; 0x9a48 <f_open+0x224>
    9a44:	24 e0       	ldi	r18, 0x04	; 4
    9a46:	30 e0       	ldi	r19, 0x00	; 0
}
    9a48:	c9 01       	movw	r24, r18
    9a4a:	a4 96       	adiw	r28, 0x24	; 36
    9a4c:	ef e0       	ldi	r30, 0x0F	; 15
    9a4e:	0c 94 c2 57 	jmp	0xaf84	; 0xaf84 <__epilogue_restores__+0x6>

00009a52 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9a52:	a4 e0       	ldi	r26, 0x04	; 4
    9a54:	b0 e0       	ldi	r27, 0x00	; 0
    9a56:	ef e2       	ldi	r30, 0x2F	; 47
    9a58:	fd e4       	ldi	r31, 0x4D	; 77
    9a5a:	0c 94 a4 57 	jmp	0xaf48	; 0xaf48 <__prologue_saves__+0x2>
    9a5e:	8b 83       	std	Y+3, r24	; 0x03
    9a60:	9c 83       	std	Y+4, r25	; 0x04
    9a62:	16 2f       	mov	r17, r22
    9a64:	07 2f       	mov	r16, r23
    9a66:	3a 01       	movw	r6, r20
    9a68:	29 83       	std	Y+1, r18	; 0x01
    9a6a:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    9a6c:	d9 01       	movw	r26, r18
    9a6e:	1d 92       	st	X+, r1
    9a70:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    9a72:	fc 01       	movw	r30, r24
    9a74:	62 81       	ldd	r22, Z+2	; 0x02
    9a76:	73 81       	ldd	r23, Z+3	; 0x03
    9a78:	80 81       	ld	r24, Z
    9a7a:	91 81       	ldd	r25, Z+1	; 0x01
    9a7c:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <validate>
    9a80:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9a82:	00 97       	sbiw	r24, 0x00	; 0
    9a84:	09 f0       	breq	.+2      	; 0x9a88 <f_read+0x36>
    9a86:	8a c1       	rjmp	.+788    	; 0x9d9c <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    9a88:	ab 81       	ldd	r26, Y+3	; 0x03
    9a8a:	bc 81       	ldd	r27, Y+4	; 0x04
    9a8c:	14 96       	adiw	r26, 0x04	; 4
    9a8e:	8c 91       	ld	r24, X
    9a90:	87 fd       	sbrc	r24, 7
    9a92:	60 c0       	rjmp	.+192    	; 0x9b54 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    9a94:	80 fd       	sbrc	r24, 0
    9a96:	04 c0       	rjmp	.+8      	; 0x9aa0 <f_read+0x4e>
    9a98:	97 e0       	ldi	r25, 0x07	; 7
    9a9a:	89 2e       	mov	r8, r25
    9a9c:	91 2c       	mov	r9, r1
    9a9e:	7e c1       	rjmp	.+764    	; 0x9d9c <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    9aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    9aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    9aa4:	22 85       	ldd	r18, Z+10	; 0x0a
    9aa6:	33 85       	ldd	r19, Z+11	; 0x0b
    9aa8:	44 85       	ldd	r20, Z+12	; 0x0c
    9aaa:	55 85       	ldd	r21, Z+13	; 0x0d
    9aac:	86 81       	ldd	r24, Z+6	; 0x06
    9aae:	97 81       	ldd	r25, Z+7	; 0x07
    9ab0:	a0 85       	ldd	r26, Z+8	; 0x08
    9ab2:	b1 85       	ldd	r27, Z+9	; 0x09
    9ab4:	28 1b       	sub	r18, r24
    9ab6:	39 0b       	sbc	r19, r25
    9ab8:	4a 0b       	sbc	r20, r26
    9aba:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    9abc:	c3 01       	movw	r24, r6
    9abe:	a0 e0       	ldi	r26, 0x00	; 0
    9ac0:	b0 e0       	ldi	r27, 0x00	; 0
    9ac2:	28 17       	cp	r18, r24
    9ac4:	39 07       	cpc	r19, r25
    9ac6:	4a 07       	cpc	r20, r26
    9ac8:	5b 07       	cpc	r21, r27
    9aca:	08 f4       	brcc	.+2      	; 0x9ace <f_read+0x7c>
    9acc:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    9ace:	81 2f       	mov	r24, r17
    9ad0:	90 2f       	mov	r25, r16
    9ad2:	9c 01       	movw	r18, r24
    9ad4:	29 01       	movw	r4, r18
    9ad6:	5e c1       	rjmp	.+700    	; 0x9d94 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9ad8:	ab 81       	ldd	r26, Y+3	; 0x03
    9ada:	bc 81       	ldd	r27, Y+4	; 0x04
    9adc:	16 96       	adiw	r26, 0x06	; 6
    9ade:	2d 91       	ld	r18, X+
    9ae0:	3d 91       	ld	r19, X+
    9ae2:	4d 91       	ld	r20, X+
    9ae4:	5c 91       	ld	r21, X
    9ae6:	19 97       	sbiw	r26, 0x09	; 9
    9ae8:	da 01       	movw	r26, r20
    9aea:	c9 01       	movw	r24, r18
    9aec:	91 70       	andi	r25, 0x01	; 1
    9aee:	a0 70       	andi	r26, 0x00	; 0
    9af0:	b0 70       	andi	r27, 0x00	; 0
    9af2:	00 97       	sbiw	r24, 0x00	; 0
    9af4:	a1 05       	cpc	r26, r1
    9af6:	b1 05       	cpc	r27, r1
    9af8:	09 f0       	breq	.+2      	; 0x9afc <f_read+0xaa>
    9afa:	ef c0       	rjmp	.+478    	; 0x9cda <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9afc:	ab 81       	ldd	r26, Y+3	; 0x03
    9afe:	bc 81       	ldd	r27, Y+4	; 0x04
    9b00:	ed 91       	ld	r30, X+
    9b02:	fc 91       	ld	r31, X
    9b04:	11 97       	sbiw	r26, 0x01	; 1
    9b06:	15 96       	adiw	r26, 0x05	; 5
    9b08:	9c 91       	ld	r25, X
    9b0a:	15 97       	sbiw	r26, 0x05	; 5
    9b0c:	82 81       	ldd	r24, Z+2	; 0x02
    9b0e:	98 17       	cp	r25, r24
    9b10:	e8 f1       	brcs	.+122    	; 0x9b8c <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    9b12:	21 15       	cp	r18, r1
    9b14:	31 05       	cpc	r19, r1
    9b16:	41 05       	cpc	r20, r1
    9b18:	51 05       	cpc	r21, r1
    9b1a:	39 f4       	brne	.+14     	; 0x9b2a <f_read+0xd8>
    9b1c:	1e 96       	adiw	r26, 0x0e	; 14
    9b1e:	6d 91       	ld	r22, X+
    9b20:	7d 91       	ld	r23, X+
    9b22:	8d 91       	ld	r24, X+
    9b24:	9c 91       	ld	r25, X
    9b26:	51 97       	sbiw	r26, 0x11	; 17
    9b28:	0b c0       	rjmp	.+22     	; 0x9b40 <f_read+0xee>
    9b2a:	ab 81       	ldd	r26, Y+3	; 0x03
    9b2c:	bc 81       	ldd	r27, Y+4	; 0x04
    9b2e:	52 96       	adiw	r26, 0x12	; 18
    9b30:	4d 91       	ld	r20, X+
    9b32:	5d 91       	ld	r21, X+
    9b34:	6d 91       	ld	r22, X+
    9b36:	7c 91       	ld	r23, X
    9b38:	55 97       	sbiw	r26, 0x15	; 21
    9b3a:	cf 01       	movw	r24, r30
    9b3c:	0e 94 75 38 	call	0x70ea	; 0x70ea <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    9b40:	62 30       	cpi	r22, 0x02	; 2
    9b42:	71 05       	cpc	r23, r1
    9b44:	81 05       	cpc	r24, r1
    9b46:	91 05       	cpc	r25, r1
    9b48:	48 f4       	brcc	.+18     	; 0x9b5c <f_read+0x10a>
    9b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    9b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    9b4e:	84 81       	ldd	r24, Z+4	; 0x04
    9b50:	80 68       	ori	r24, 0x80	; 128
    9b52:	84 83       	std	Z+4, r24	; 0x04
    9b54:	82 e0       	ldi	r24, 0x02	; 2
    9b56:	88 2e       	mov	r8, r24
    9b58:	91 2c       	mov	r9, r1
    9b5a:	20 c1       	rjmp	.+576    	; 0x9d9c <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9b5c:	6f 3f       	cpi	r22, 0xFF	; 255
    9b5e:	ff ef       	ldi	r31, 0xFF	; 255
    9b60:	7f 07       	cpc	r23, r31
    9b62:	ff ef       	ldi	r31, 0xFF	; 255
    9b64:	8f 07       	cpc	r24, r31
    9b66:	ff ef       	ldi	r31, 0xFF	; 255
    9b68:	9f 07       	cpc	r25, r31
    9b6a:	49 f4       	brne	.+18     	; 0x9b7e <f_read+0x12c>
    9b6c:	ab 81       	ldd	r26, Y+3	; 0x03
    9b6e:	bc 81       	ldd	r27, Y+4	; 0x04
    9b70:	14 96       	adiw	r26, 0x04	; 4
    9b72:	8c 91       	ld	r24, X
    9b74:	14 97       	sbiw	r26, 0x04	; 4
    9b76:	80 68       	ori	r24, 0x80	; 128
    9b78:	14 96       	adiw	r26, 0x04	; 4
    9b7a:	8c 93       	st	X, r24
    9b7c:	c7 c0       	rjmp	.+398    	; 0x9d0c <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    9b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    9b80:	fc 81       	ldd	r31, Y+4	; 0x04
    9b82:	62 8b       	std	Z+18, r22	; 0x12
    9b84:	73 8b       	std	Z+19, r23	; 0x13
    9b86:	84 8b       	std	Z+20, r24	; 0x14
    9b88:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    9b8a:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9b8c:	ab 81       	ldd	r26, Y+3	; 0x03
    9b8e:	bc 81       	ldd	r27, Y+4	; 0x04
    9b90:	0d 91       	ld	r16, X+
    9b92:	1c 91       	ld	r17, X
    9b94:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9b96:	52 96       	adiw	r26, 0x12	; 18
    9b98:	2d 91       	ld	r18, X+
    9b9a:	3d 91       	ld	r19, X+
    9b9c:	4d 91       	ld	r20, X+
    9b9e:	5c 91       	ld	r21, X
    9ba0:	55 97       	sbiw	r26, 0x15	; 21
    9ba2:	22 50       	subi	r18, 0x02	; 2
    9ba4:	30 40       	sbci	r19, 0x00	; 0
    9ba6:	40 40       	sbci	r20, 0x00	; 0
    9ba8:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9baa:	f8 01       	movw	r30, r16
    9bac:	86 8d       	ldd	r24, Z+30	; 0x1e
    9bae:	97 8d       	ldd	r25, Z+31	; 0x1f
    9bb0:	a0 a1       	ldd	r26, Z+32	; 0x20
    9bb2:	b1 a1       	ldd	r27, Z+33	; 0x21
    9bb4:	02 97       	sbiw	r24, 0x02	; 2
    9bb6:	a1 09       	sbc	r26, r1
    9bb8:	b1 09       	sbc	r27, r1
    9bba:	28 17       	cp	r18, r24
    9bbc:	39 07       	cpc	r19, r25
    9bbe:	4a 07       	cpc	r20, r26
    9bc0:	5b 07       	cpc	r21, r27
    9bc2:	b8 f4       	brcc	.+46     	; 0x9bf2 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    9bc4:	32 80       	ldd	r3, Z+2	; 0x02
    9bc6:	63 2d       	mov	r22, r3
    9bc8:	70 e0       	ldi	r23, 0x00	; 0
    9bca:	80 e0       	ldi	r24, 0x00	; 0
    9bcc:	90 e0       	ldi	r25, 0x00	; 0
    9bce:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    9bd2:	9b 01       	movw	r18, r22
    9bd4:	ac 01       	movw	r20, r24
    9bd6:	f8 01       	movw	r30, r16
    9bd8:	82 a5       	ldd	r24, Z+42	; 0x2a
    9bda:	93 a5       	ldd	r25, Z+43	; 0x2b
    9bdc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9bde:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9be0:	28 0f       	add	r18, r24
    9be2:	39 1f       	adc	r19, r25
    9be4:	4a 1f       	adc	r20, r26
    9be6:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9be8:	21 15       	cp	r18, r1
    9bea:	31 05       	cpc	r19, r1
    9bec:	41 05       	cpc	r20, r1
    9bee:	51 05       	cpc	r21, r1
    9bf0:	49 f4       	brne	.+18     	; 0x9c04 <f_read+0x1b2>
    9bf2:	ab 81       	ldd	r26, Y+3	; 0x03
    9bf4:	bc 81       	ldd	r27, Y+4	; 0x04
    9bf6:	14 96       	adiw	r26, 0x04	; 4
    9bf8:	8c 91       	ld	r24, X
    9bfa:	14 97       	sbiw	r26, 0x04	; 4
    9bfc:	80 68       	ori	r24, 0x80	; 128
    9bfe:	14 96       	adiw	r26, 0x04	; 4
    9c00:	8c 93       	st	X, r24
    9c02:	a8 cf       	rjmp	.-176    	; 0x9b54 <f_read+0x102>
			sect += fp->csect;
    9c04:	eb 81       	ldd	r30, Y+3	; 0x03
    9c06:	fc 81       	ldd	r31, Y+4	; 0x04
    9c08:	85 81       	ldd	r24, Z+5	; 0x05
    9c0a:	69 01       	movw	r12, r18
    9c0c:	7a 01       	movw	r14, r20
    9c0e:	c8 0e       	add	r12, r24
    9c10:	d1 1c       	adc	r13, r1
    9c12:	e1 1c       	adc	r14, r1
    9c14:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9c16:	53 01       	movw	r10, r6
    9c18:	ab 2c       	mov	r10, r11
    9c1a:	bb 24       	eor	r11, r11
    9c1c:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    9c1e:	a1 14       	cp	r10, r1
    9c20:	b1 04       	cpc	r11, r1
    9c22:	09 f4       	brne	.+2      	; 0x9c26 <f_read+0x1d4>
    9c24:	52 c0       	rjmp	.+164    	; 0x9cca <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9c26:	28 2f       	mov	r18, r24
    9c28:	30 e0       	ldi	r19, 0x00	; 0
    9c2a:	c5 01       	movw	r24, r10
    9c2c:	82 0f       	add	r24, r18
    9c2e:	93 1f       	adc	r25, r19
    9c30:	63 2d       	mov	r22, r3
    9c32:	70 e0       	ldi	r23, 0x00	; 0
    9c34:	68 17       	cp	r22, r24
    9c36:	79 07       	cpc	r23, r25
    9c38:	18 f4       	brcc	.+6      	; 0x9c40 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    9c3a:	5b 01       	movw	r10, r22
    9c3c:	a2 1a       	sub	r10, r18
    9c3e:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    9c40:	d8 01       	movw	r26, r16
    9c42:	11 96       	adiw	r26, 0x01	; 1
    9c44:	8c 91       	ld	r24, X
    9c46:	b2 01       	movw	r22, r4
    9c48:	a7 01       	movw	r20, r14
    9c4a:	96 01       	movw	r18, r12
    9c4c:	0a 2d       	mov	r16, r10
    9c4e:	0e 94 8d 50 	call	0xa11a	; 0xa11a <disk_read>
    9c52:	89 2b       	or	r24, r25
    9c54:	09 f0       	breq	.+2      	; 0x9c58 <f_read+0x206>
    9c56:	55 c0       	rjmp	.+170    	; 0x9d02 <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    9c58:	ab 81       	ldd	r26, Y+3	; 0x03
    9c5a:	bc 81       	ldd	r27, Y+4	; 0x04
    9c5c:	6d 91       	ld	r22, X+
    9c5e:	7c 91       	ld	r23, X
    9c60:	fb 01       	movw	r30, r22
    9c62:	84 81       	ldd	r24, Z+4	; 0x04
    9c64:	88 23       	and	r24, r24
    9c66:	21 f1       	breq	.+72     	; 0x9cb0 <f_read+0x25e>
    9c68:	26 a5       	ldd	r18, Z+46	; 0x2e
    9c6a:	37 a5       	ldd	r19, Z+47	; 0x2f
    9c6c:	40 a9       	ldd	r20, Z+48	; 0x30
    9c6e:	51 a9       	ldd	r21, Z+49	; 0x31
    9c70:	2c 19       	sub	r18, r12
    9c72:	3d 09       	sbc	r19, r13
    9c74:	4e 09       	sbc	r20, r14
    9c76:	5f 09       	sbc	r21, r15
    9c78:	c5 01       	movw	r24, r10
    9c7a:	a0 e0       	ldi	r26, 0x00	; 0
    9c7c:	b0 e0       	ldi	r27, 0x00	; 0
    9c7e:	28 17       	cp	r18, r24
    9c80:	39 07       	cpc	r19, r25
    9c82:	4a 07       	cpc	r20, r26
    9c84:	5b 07       	cpc	r21, r27
    9c86:	a0 f4       	brcc	.+40     	; 0x9cb0 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9c88:	a9 e0       	ldi	r26, 0x09	; 9
    9c8a:	22 0f       	add	r18, r18
    9c8c:	33 1f       	adc	r19, r19
    9c8e:	44 1f       	adc	r20, r20
    9c90:	55 1f       	adc	r21, r21
    9c92:	aa 95       	dec	r26
    9c94:	d1 f7       	brne	.-12     	; 0x9c8a <f_read+0x238>
    9c96:	d2 01       	movw	r26, r4
    9c98:	a2 0f       	add	r26, r18
    9c9a:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    9c9c:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    9c9e:	9b 01       	movw	r18, r22
    9ca0:	2e 5c       	subi	r18, 0xCE	; 206
    9ca2:	3d 4f       	sbci	r19, 0xFD	; 253
    9ca4:	02 c0       	rjmp	.+4      	; 0x9caa <f_read+0x258>
    9ca6:	81 91       	ld	r24, Z+
    9ca8:	8d 93       	st	X+, r24
    9caa:	e2 17       	cp	r30, r18
    9cac:	f3 07       	cpc	r31, r19
    9cae:	d9 f7       	brne	.-10     	; 0x9ca6 <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9cb0:	ab 81       	ldd	r26, Y+3	; 0x03
    9cb2:	bc 81       	ldd	r27, Y+4	; 0x04
    9cb4:	15 96       	adiw	r26, 0x05	; 5
    9cb6:	8c 91       	ld	r24, X
    9cb8:	15 97       	sbiw	r26, 0x05	; 5
    9cba:	8a 0d       	add	r24, r10
    9cbc:	15 96       	adiw	r26, 0x05	; 5
    9cbe:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9cc0:	b5 01       	movw	r22, r10
    9cc2:	76 2f       	mov	r23, r22
    9cc4:	66 27       	eor	r22, r22
    9cc6:	77 0f       	add	r23, r23
    9cc8:	48 c0       	rjmp	.+144    	; 0x9d5a <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9cca:	eb 81       	ldd	r30, Y+3	; 0x03
    9ccc:	fc 81       	ldd	r31, Y+4	; 0x04
    9cce:	c6 8a       	std	Z+22, r12	; 0x16
    9cd0:	d7 8a       	std	Z+23, r13	; 0x17
    9cd2:	e0 8e       	std	Z+24, r14	; 0x18
    9cd4:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9cd6:	8f 5f       	subi	r24, 0xFF	; 255
    9cd8:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9cda:	ab 81       	ldd	r26, Y+3	; 0x03
    9cdc:	bc 81       	ldd	r27, Y+4	; 0x04
    9cde:	16 96       	adiw	r26, 0x06	; 6
    9ce0:	cd 90       	ld	r12, X+
    9ce2:	dd 90       	ld	r13, X+
    9ce4:	ed 90       	ld	r14, X+
    9ce6:	fc 90       	ld	r15, X
    9ce8:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9cea:	56 96       	adiw	r26, 0x16	; 22
    9cec:	4d 91       	ld	r20, X+
    9cee:	5d 91       	ld	r21, X+
    9cf0:	6d 91       	ld	r22, X+
    9cf2:	7c 91       	ld	r23, X
    9cf4:	59 97       	sbiw	r26, 0x19	; 25
    9cf6:	8d 91       	ld	r24, X+
    9cf8:	9c 91       	ld	r25, X
    9cfa:	0e 94 0b 38 	call	0x7016	; 0x7016 <move_window>
    9cfe:	89 2b       	or	r24, r25
    9d00:	49 f0       	breq	.+18     	; 0x9d14 <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    9d02:	eb 81       	ldd	r30, Y+3	; 0x03
    9d04:	fc 81       	ldd	r31, Y+4	; 0x04
    9d06:	84 81       	ldd	r24, Z+4	; 0x04
    9d08:	80 68       	ori	r24, 0x80	; 128
    9d0a:	84 83       	std	Z+4, r24	; 0x04
    9d0c:	81 e0       	ldi	r24, 0x01	; 1
    9d0e:	88 2e       	mov	r8, r24
    9d10:	91 2c       	mov	r9, r1
    9d12:	44 c0       	rjmp	.+136    	; 0x9d9c <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9d14:	c6 01       	movw	r24, r12
    9d16:	91 70       	andi	r25, 0x01	; 1
    9d18:	20 e0       	ldi	r18, 0x00	; 0
    9d1a:	32 e0       	ldi	r19, 0x02	; 2
    9d1c:	28 1b       	sub	r18, r24
    9d1e:	39 0b       	sbc	r19, r25
    9d20:	b3 01       	movw	r22, r6
    9d22:	26 15       	cp	r18, r6
    9d24:	37 05       	cpc	r19, r7
    9d26:	08 f4       	brcc	.+2      	; 0x9d2a <f_read+0x2d8>
    9d28:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9d2a:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    9d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    9d2e:	bc 81       	ldd	r27, Y+4	; 0x04
    9d30:	16 96       	adiw	r26, 0x06	; 6
    9d32:	8d 91       	ld	r24, X+
    9d34:	9c 91       	ld	r25, X
    9d36:	17 97       	sbiw	r26, 0x07	; 7
    9d38:	91 70       	andi	r25, 0x01	; 1
    9d3a:	c2 96       	adiw	r24, 0x32	; 50
    9d3c:	ed 91       	ld	r30, X+
    9d3e:	fc 91       	ld	r31, X
    9d40:	e8 0f       	add	r30, r24
    9d42:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    9d44:	9f 01       	movw	r18, r30
    9d46:	26 0f       	add	r18, r22
    9d48:	37 1f       	adc	r19, r23
    9d4a:	04 c0       	rjmp	.+8      	; 0x9d54 <f_read+0x302>
    9d4c:	81 91       	ld	r24, Z+
    9d4e:	da 01       	movw	r26, r20
    9d50:	8d 93       	st	X+, r24
    9d52:	ad 01       	movw	r20, r26
    9d54:	e2 17       	cp	r30, r18
    9d56:	f3 07       	cpc	r31, r19
    9d58:	c9 f7       	brne	.-14     	; 0x9d4c <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    9d5a:	46 0e       	add	r4, r22
    9d5c:	57 1e       	adc	r5, r23
    9d5e:	cb 01       	movw	r24, r22
    9d60:	a0 e0       	ldi	r26, 0x00	; 0
    9d62:	b0 e0       	ldi	r27, 0x00	; 0
    9d64:	eb 81       	ldd	r30, Y+3	; 0x03
    9d66:	fc 81       	ldd	r31, Y+4	; 0x04
    9d68:	26 81       	ldd	r18, Z+6	; 0x06
    9d6a:	37 81       	ldd	r19, Z+7	; 0x07
    9d6c:	40 85       	ldd	r20, Z+8	; 0x08
    9d6e:	51 85       	ldd	r21, Z+9	; 0x09
    9d70:	28 0f       	add	r18, r24
    9d72:	39 1f       	adc	r19, r25
    9d74:	4a 1f       	adc	r20, r26
    9d76:	5b 1f       	adc	r21, r27
    9d78:	26 83       	std	Z+6, r18	; 0x06
    9d7a:	37 83       	std	Z+7, r19	; 0x07
    9d7c:	40 87       	std	Z+8, r20	; 0x08
    9d7e:	51 87       	std	Z+9, r21	; 0x09
    9d80:	e9 81       	ldd	r30, Y+1	; 0x01
    9d82:	fa 81       	ldd	r31, Y+2	; 0x02
    9d84:	80 81       	ld	r24, Z
    9d86:	91 81       	ldd	r25, Z+1	; 0x01
    9d88:	86 0f       	add	r24, r22
    9d8a:	97 1f       	adc	r25, r23
    9d8c:	80 83       	st	Z, r24
    9d8e:	91 83       	std	Z+1, r25	; 0x01
    9d90:	66 1a       	sub	r6, r22
    9d92:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    9d94:	61 14       	cp	r6, r1
    9d96:	71 04       	cpc	r7, r1
    9d98:	09 f0       	breq	.+2      	; 0x9d9c <f_read+0x34a>
    9d9a:	9e ce       	rjmp	.-708    	; 0x9ad8 <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    9d9c:	c4 01       	movw	r24, r8
    9d9e:	24 96       	adiw	r28, 0x04	; 4
    9da0:	e1 e1       	ldi	r30, 0x11	; 17
    9da2:	0c 94 c0 57 	jmp	0xaf80	; 0xaf80 <__epilogue_restores__+0x2>

00009da6 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    9da6:	a2 e0       	ldi	r26, 0x02	; 2
    9da8:	b0 e0       	ldi	r27, 0x00	; 0
    9daa:	e9 ed       	ldi	r30, 0xD9	; 217
    9dac:	fe e4       	ldi	r31, 0x4E	; 78
    9dae:	0c 94 a7 57 	jmp	0xaf4e	; 0xaf4e <__prologue_saves__+0x8>
    9db2:	6c 01       	movw	r12, r24
    9db4:	5b 01       	movw	r10, r22
    9db6:	4a 01       	movw	r8, r20
    9db8:	8c 01       	movw	r16, r24
    9dba:	ee 24       	eor	r14, r14
    9dbc:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    9dbe:	08 94       	sec
    9dc0:	a1 08       	sbc	r10, r1
    9dc2:	b1 08       	sbc	r11, r1
		f_read(fil, p, 1, &rc);
    9dc4:	3e 01       	movw	r6, r28
    9dc6:	08 94       	sec
    9dc8:	61 1c       	adc	r6, r1
    9dca:	71 1c       	adc	r7, r1
    9dcc:	16 c0       	rjmp	.+44     	; 0x9dfa <f_gets+0x54>
    9dce:	c4 01       	movw	r24, r8
    9dd0:	b8 01       	movw	r22, r16
    9dd2:	41 e0       	ldi	r20, 0x01	; 1
    9dd4:	50 e0       	ldi	r21, 0x00	; 0
    9dd6:	93 01       	movw	r18, r6
    9dd8:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    9ddc:	89 81       	ldd	r24, Y+1	; 0x01
    9dde:	9a 81       	ldd	r25, Y+2	; 0x02
    9de0:	01 97       	sbiw	r24, 0x01	; 1
    9de2:	71 f4       	brne	.+28     	; 0x9e00 <f_gets+0x5a>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
    9de4:	f8 01       	movw	r30, r16
    9de6:	80 81       	ld	r24, Z
    9de8:	8d 30       	cpi	r24, 0x0D	; 13
    9dea:	39 f0       	breq	.+14     	; 0x9dfa <f_gets+0x54>
#endif
		i++;
    9dec:	08 94       	sec
    9dee:	e1 1c       	adc	r14, r1
    9df0:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    9df2:	0f 5f       	subi	r16, 0xFF	; 255
    9df4:	1f 4f       	sbci	r17, 0xFF	; 255
    9df6:	8a 30       	cpi	r24, 0x0A	; 10
    9df8:	19 f0       	breq	.+6      	; 0x9e00 <f_gets+0x5a>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    9dfa:	ea 14       	cp	r14, r10
    9dfc:	fb 04       	cpc	r15, r11
    9dfe:	3c f3       	brlt	.-50     	; 0x9dce <f_gets+0x28>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    9e00:	f8 01       	movw	r30, r16
    9e02:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    9e04:	e1 14       	cp	r14, r1
    9e06:	f1 04       	cpc	r15, r1
    9e08:	11 f4       	brne	.+4      	; 0x9e0e <f_gets+0x68>
    9e0a:	cc 24       	eor	r12, r12
    9e0c:	dd 24       	eor	r13, r13
}
    9e0e:	c6 01       	movw	r24, r12
    9e10:	22 96       	adiw	r28, 0x02	; 2
    9e12:	ee e0       	ldi	r30, 0x0E	; 14
    9e14:	0c 94 c3 57 	jmp	0xaf86	; 0xaf86 <__epilogue_restores__+0x8>

00009e18 <wait_ready>:
BYTE wait_ready (void)
{
  BYTE res;


  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
    9e18:	82 e3       	ldi	r24, 0x32	; 50
    9e1a:	80 93 6e 25 	sts	0x256E, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e1e:	8f ef       	ldi	r24, 0xFF	; 255
    9e20:	e0 ec       	ldi	r30, 0xC0	; 192
    9e22:	fa e0       	ldi	r31, 0x0A	; 10
    9e24:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9e26:	80 91 c2 0a 	lds	r24, 0x0AC2
    9e2a:	87 ff       	sbrs	r24, 7
    9e2c:	fc cf       	rjmp	.-8      	; 0x9e26 <wait_ready+0xe>
  return SPIE.DATA;
    9e2e:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e32:	e0 ec       	ldi	r30, 0xC0	; 192
    9e34:	fa e0       	ldi	r31, 0x0A	; 10
    9e36:	2f ef       	ldi	r18, 0xFF	; 255
    9e38:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9e3a:	80 91 c2 0a 	lds	r24, 0x0AC2
    9e3e:	87 ff       	sbrs	r24, 7
    9e40:	fc cf       	rjmp	.-8      	; 0x9e3a <wait_ready+0x22>
  return SPIE.DATA;
    9e42:	90 91 c3 0a 	lds	r25, 0x0AC3

  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
  rcvr_spi();
  do
    res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
    9e46:	9f 3f       	cpi	r25, 0xFF	; 255
    9e48:	21 f0       	breq	.+8      	; 0x9e52 <wait_ready+0x3a>
    9e4a:	80 91 6e 25 	lds	r24, 0x256E
    9e4e:	88 23       	and	r24, r24
    9e50:	99 f7       	brne	.-26     	; 0x9e38 <wait_ready+0x20>

  return res;
}
    9e52:	89 2f       	mov	r24, r25
    9e54:	08 95       	ret

00009e56 <power_off>:
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
}

static
void power_off (void)
{
    9e56:	ff 92       	push	r15
    9e58:	0f 93       	push	r16
    9e5a:	1f 93       	push	r17
  SELECT();        /* Wait for card ready */
    9e5c:	00 e8       	ldi	r16, 0x80	; 128
    9e5e:	16 e0       	ldi	r17, 0x06	; 6
    9e60:	80 e1       	ldi	r24, 0x10	; 16
    9e62:	f8 2e       	mov	r15, r24
    9e64:	f8 01       	movw	r30, r16
    9e66:	f6 82       	std	Z+6, r15	; 0x06
  wait_ready();
    9e68:	0e 94 0c 4f 	call	0x9e18	; 0x9e18 <wait_ready>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    9e6c:	f8 01       	movw	r30, r16
    9e6e:	f5 82       	std	Z+5, r15	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e70:	8f ef       	ldi	r24, 0xFF	; 255
    9e72:	e0 ec       	ldi	r30, 0xC0	; 192
    9e74:	fa e0       	ldi	r31, 0x0A	; 10
    9e76:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9e78:	80 91 c2 0a 	lds	r24, 0x0AC2
    9e7c:	87 ff       	sbrs	r24, 7
    9e7e:	fc cf       	rjmp	.-8      	; 0x9e78 <power_off+0x22>
  return SPIE.DATA;
    9e80:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  SELECT();        /* Wait for card ready */
  wait_ready();
  release_spi();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    9e84:	80 91 d9 24 	lds	r24, 0x24D9
    9e88:	81 60       	ori	r24, 0x01	; 1
    9e8a:	80 93 d9 24 	sts	0x24D9, r24
}
    9e8e:	1f 91       	pop	r17
    9e90:	0f 91       	pop	r16
    9e92:	ff 90       	pop	r15
    9e94:	08 95       	ret

00009e96 <rcvr_datablock>:
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    9e96:	fc 01       	movw	r30, r24
  BYTE token;


  Timer1 = 20;
    9e98:	84 e1       	ldi	r24, 0x14	; 20
    9e9a:	80 93 6d 25 	sts	0x256D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9e9e:	a0 ec       	ldi	r26, 0xC0	; 192
    9ea0:	ba e0       	ldi	r27, 0x0A	; 10
    9ea2:	9f ef       	ldi	r25, 0xFF	; 255
    9ea4:	13 96       	adiw	r26, 0x03	; 3
    9ea6:	9c 93       	st	X, r25
    9ea8:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9eaa:	80 91 c2 0a 	lds	r24, 0x0AC2
    9eae:	87 ff       	sbrs	r24, 7
    9eb0:	fc cf       	rjmp	.-8      	; 0x9eaa <rcvr_datablock+0x14>
  return SPIE.DATA;
    9eb2:	80 91 c3 0a 	lds	r24, 0x0AC3


  Timer1 = 20;
  do {              /* Wait for data packet in timeout of 200ms */
    token = rcvr_spi();
  } while ((token == 0xFF) && Timer1);
    9eb6:	8f 3f       	cpi	r24, 0xFF	; 255
    9eb8:	29 f4       	brne	.+10     	; 0x9ec4 <rcvr_datablock+0x2e>
    9eba:	80 91 6d 25 	lds	r24, 0x256D
    9ebe:	88 23       	and	r24, r24
    9ec0:	89 f7       	brne	.-30     	; 0x9ea4 <rcvr_datablock+0xe>
    9ec2:	4a c0       	rjmp	.+148    	; 0x9f58 <rcvr_datablock+0xc2>
  if(token != 0xFE) return FALSE;  /* If not valid data token, retutn with error */
    9ec4:	8e 3f       	cpi	r24, 0xFE	; 254
    9ec6:	09 f0       	breq	.+2      	; 0x9eca <rcvr_datablock+0x34>
    9ec8:	47 c0       	rjmp	.+142    	; 0x9f58 <rcvr_datablock+0xc2>

  do {              /* Receive the data block into buffer */
    rcvr_spi_m(buff++);
    9eca:	a0 ec       	ldi	r26, 0xC0	; 192
    9ecc:	ba e0       	ldi	r27, 0x0A	; 10
    9ece:	9f ef       	ldi	r25, 0xFF	; 255
    9ed0:	13 96       	adiw	r26, 0x03	; 3
    9ed2:	9c 93       	st	X, r25
    9ed4:	13 97       	sbiw	r26, 0x03	; 3
    9ed6:	80 91 c2 0a 	lds	r24, 0x0AC2
    9eda:	87 ff       	sbrs	r24, 7
    9edc:	fc cf       	rjmp	.-8      	; 0x9ed6 <rcvr_datablock+0x40>
    9ede:	80 91 c3 0a 	lds	r24, 0x0AC3
    9ee2:	80 83       	st	Z, r24
    rcvr_spi_m(buff++);
    9ee4:	13 96       	adiw	r26, 0x03	; 3
    9ee6:	9c 93       	st	X, r25
    9ee8:	13 97       	sbiw	r26, 0x03	; 3
    9eea:	80 91 c2 0a 	lds	r24, 0x0AC2
    9eee:	87 ff       	sbrs	r24, 7
    9ef0:	fc cf       	rjmp	.-8      	; 0x9eea <rcvr_datablock+0x54>
    9ef2:	80 91 c3 0a 	lds	r24, 0x0AC3
    9ef6:	81 83       	std	Z+1, r24	; 0x01
    rcvr_spi_m(buff++);
    9ef8:	13 96       	adiw	r26, 0x03	; 3
    9efa:	9c 93       	st	X, r25
    9efc:	13 97       	sbiw	r26, 0x03	; 3
    9efe:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f02:	87 ff       	sbrs	r24, 7
    9f04:	fc cf       	rjmp	.-8      	; 0x9efe <rcvr_datablock+0x68>
    9f06:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f0a:	82 83       	std	Z+2, r24	; 0x02
    rcvr_spi_m(buff++);
    9f0c:	13 96       	adiw	r26, 0x03	; 3
    9f0e:	9c 93       	st	X, r25
    9f10:	13 97       	sbiw	r26, 0x03	; 3
    9f12:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f16:	87 ff       	sbrs	r24, 7
    9f18:	fc cf       	rjmp	.-8      	; 0x9f12 <rcvr_datablock+0x7c>
    9f1a:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f1e:	83 83       	std	Z+3, r24	; 0x03
  } while (btr -= 4);
    9f20:	64 50       	subi	r22, 0x04	; 4
    9f22:	70 40       	sbci	r23, 0x00	; 0
    9f24:	11 f0       	breq	.+4      	; 0x9f2a <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    9f26:	34 96       	adiw	r30, 0x04	; 4
    9f28:	d3 cf       	rjmp	.-90     	; 0x9ed0 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9f2a:	8f ef       	ldi	r24, 0xFF	; 255
    9f2c:	e0 ec       	ldi	r30, 0xC0	; 192
    9f2e:	fa e0       	ldi	r31, 0x0A	; 10
    9f30:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9f32:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f36:	87 ff       	sbrs	r24, 7
    9f38:	fc cf       	rjmp	.-8      	; 0x9f32 <rcvr_datablock+0x9c>
  return SPIE.DATA;
    9f3a:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9f3e:	8f ef       	ldi	r24, 0xFF	; 255
    9f40:	e0 ec       	ldi	r30, 0xC0	; 192
    9f42:	fa e0       	ldi	r31, 0x0A	; 10
    9f44:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9f46:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f4a:	87 ff       	sbrs	r24, 7
    9f4c:	fc cf       	rjmp	.-8      	; 0x9f46 <rcvr_datablock+0xb0>
  return SPIE.DATA;
    9f4e:	80 91 c3 0a 	lds	r24, 0x0AC3
    9f52:	21 e0       	ldi	r18, 0x01	; 1
    9f54:	30 e0       	ldi	r19, 0x00	; 0
    9f56:	02 c0       	rjmp	.+4      	; 0x9f5c <rcvr_datablock+0xc6>
    rcvr_spi_m(buff++);
  } while (btr -= 4);
  rcvr_spi();            /* Discard CRC */
  rcvr_spi();

  return TRUE;          /* Return with success */
    9f58:	20 e0       	ldi	r18, 0x00	; 0
    9f5a:	30 e0       	ldi	r19, 0x00	; 0
}
    9f5c:	c9 01       	movw	r24, r18
    9f5e:	08 95       	ret

00009f60 <xmit_datablock>:
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    9f60:	1f 93       	push	r17
    9f62:	cf 93       	push	r28
    9f64:	df 93       	push	r29
    9f66:	ec 01       	movw	r28, r24
    9f68:	16 2f       	mov	r17, r22
  BYTE resp, wc;


  if (wait_ready() != 0xFF) return FALSE;
    9f6a:	0e 94 0c 4f 	call	0x9e18	; 0x9e18 <wait_ready>
    9f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    9f70:	19 f0       	breq	.+6      	; 0x9f78 <xmit_datablock+0x18>
    9f72:	20 e0       	ldi	r18, 0x00	; 0
    9f74:	30 e0       	ldi	r19, 0x00	; 0
    9f76:	42 c0       	rjmp	.+132    	; 0x9ffc <xmit_datablock+0x9c>

  xmit_spi(token);          /* Xmit data token */
    9f78:	e0 ec       	ldi	r30, 0xC0	; 192
    9f7a:	fa e0       	ldi	r31, 0x0A	; 10
    9f7c:	13 83       	std	Z+3, r17	; 0x03
    9f7e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f82:	87 ff       	sbrs	r24, 7
    9f84:	fc cf       	rjmp	.-8      	; 0x9f7e <xmit_datablock+0x1e>
  if (token != 0xFD) {  /* Is data token */
    9f86:	1d 3f       	cpi	r17, 0xFD	; 253
    9f88:	19 f4       	brne	.+6      	; 0x9f90 <xmit_datablock+0x30>
    9f8a:	21 e0       	ldi	r18, 0x01	; 1
    9f8c:	30 e0       	ldi	r19, 0x00	; 0
    9f8e:	36 c0       	rjmp	.+108    	; 0x9ffc <xmit_datablock+0x9c>
    9f90:	90 e0       	ldi	r25, 0x00	; 0
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
    9f92:	e0 ec       	ldi	r30, 0xC0	; 192
    9f94:	fa e0       	ldi	r31, 0x0A	; 10
    9f96:	88 81       	ld	r24, Y
    9f98:	83 83       	std	Z+3, r24	; 0x03
    9f9a:	80 91 c2 0a 	lds	r24, 0x0AC2
    9f9e:	87 ff       	sbrs	r24, 7
    9fa0:	fc cf       	rjmp	.-8      	; 0x9f9a <xmit_datablock+0x3a>
      xmit_spi(*buff++);
    9fa2:	89 81       	ldd	r24, Y+1	; 0x01
    9fa4:	83 83       	std	Z+3, r24	; 0x03
    9fa6:	80 91 c2 0a 	lds	r24, 0x0AC2
    9faa:	87 ff       	sbrs	r24, 7
    9fac:	fc cf       	rjmp	.-8      	; 0x9fa6 <xmit_datablock+0x46>
    } while (--wc);
    9fae:	91 50       	subi	r25, 0x01	; 1
    9fb0:	11 f0       	breq	.+4      	; 0x9fb6 <xmit_datablock+0x56>
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    9fb2:	22 96       	adiw	r28, 0x02	; 2
    9fb4:	f0 cf       	rjmp	.-32     	; 0x9f96 <xmit_datablock+0x36>
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
      xmit_spi(*buff++);
    } while (--wc);
    xmit_spi(0xFF);          /* CRC (Dummy) */
    9fb6:	8f ef       	ldi	r24, 0xFF	; 255
    9fb8:	e0 ec       	ldi	r30, 0xC0	; 192
    9fba:	fa e0       	ldi	r31, 0x0A	; 10
    9fbc:	83 83       	std	Z+3, r24	; 0x03
    9fbe:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fc2:	87 ff       	sbrs	r24, 7
    9fc4:	fc cf       	rjmp	.-8      	; 0x9fbe <xmit_datablock+0x5e>
    xmit_spi(0xFF);
    9fc6:	8f ef       	ldi	r24, 0xFF	; 255
    9fc8:	e0 ec       	ldi	r30, 0xC0	; 192
    9fca:	fa e0       	ldi	r31, 0x0A	; 10
    9fcc:	83 83       	std	Z+3, r24	; 0x03
    9fce:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fd2:	87 ff       	sbrs	r24, 7
    9fd4:	fc cf       	rjmp	.-8      	; 0x9fce <xmit_datablock+0x6e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    9fd6:	8f ef       	ldi	r24, 0xFF	; 255
    9fd8:	e0 ec       	ldi	r30, 0xC0	; 192
    9fda:	fa e0       	ldi	r31, 0x0A	; 10
    9fdc:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    9fde:	80 91 c2 0a 	lds	r24, 0x0AC2
    9fe2:	87 ff       	sbrs	r24, 7
    9fe4:	fc cf       	rjmp	.-8      	; 0x9fde <xmit_datablock+0x7e>
  return SPIE.DATA;
    9fe6:	80 91 c3 0a 	lds	r24, 0x0AC3
    9fea:	90 e0       	ldi	r25, 0x00	; 0
    9fec:	8f 71       	andi	r24, 0x1F	; 31
    9fee:	85 30       	cpi	r24, 0x05	; 5
    9ff0:	09 f0       	breq	.+2      	; 0x9ff4 <xmit_datablock+0x94>
    9ff2:	91 e0       	ldi	r25, 0x01	; 1
    9ff4:	81 e0       	ldi	r24, 0x01	; 1
    9ff6:	98 27       	eor	r25, r24
    9ff8:	29 2f       	mov	r18, r25
    9ffa:	30 e0       	ldi	r19, 0x00	; 0
    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
      return FALSE;
  }

  return TRUE;
}
    9ffc:	c9 01       	movw	r24, r18
    9ffe:	df 91       	pop	r29
    a000:	cf 91       	pop	r28
    a002:	1f 91       	pop	r17
    a004:	08 95       	ret

0000a006 <send_cmd>:
static
BYTE send_cmd (
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    a006:	df 92       	push	r13
    a008:	ef 92       	push	r14
    a00a:	ff 92       	push	r15
    a00c:	0f 93       	push	r16
    a00e:	1f 93       	push	r17
    a010:	d8 2e       	mov	r13, r24
    a012:	7a 01       	movw	r14, r20
    a014:	8b 01       	movw	r16, r22
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a016:	87 ff       	sbrs	r24, 7
    a018:	0c c0       	rjmp	.+24     	; 0xa032 <send_cmd+0x2c>
    cmd &= 0x7F;
    res = send_cmd(CMD55, 0);
    a01a:	87 e7       	ldi	r24, 0x77	; 119
    a01c:	40 e0       	ldi	r20, 0x00	; 0
    a01e:	50 e0       	ldi	r21, 0x00	; 0
    a020:	60 e0       	ldi	r22, 0x00	; 0
    a022:	70 e0       	ldi	r23, 0x00	; 0
    a024:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    if (res > 1) return res;
    a028:	82 30       	cpi	r24, 0x02	; 2
    a02a:	08 f0       	brcs	.+2      	; 0xa02e <send_cmd+0x28>
    a02c:	69 c0       	rjmp	.+210    	; 0xa100 <send_cmd+0xfa>
{
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    a02e:	8f e7       	ldi	r24, 0x7F	; 127
    a030:	d8 22       	and	r13, r24
    res = send_cmd(CMD55, 0);
    if (res > 1) return res;
  }

  /* Select the card and wait for ready */
  DESELECT();
    a032:	e0 e8       	ldi	r30, 0x80	; 128
    a034:	f6 e0       	ldi	r31, 0x06	; 6
    a036:	80 e1       	ldi	r24, 0x10	; 16
    a038:	85 83       	std	Z+5, r24	; 0x05
  SELECT();
    a03a:	86 83       	std	Z+6, r24	; 0x06
  if (wait_ready() != 0xFF) return 0xFF;
    a03c:	0e 94 0c 4f 	call	0x9e18	; 0x9e18 <wait_ready>
    a040:	8f 3f       	cpi	r24, 0xFF	; 255
    a042:	11 f0       	breq	.+4      	; 0xa048 <send_cmd+0x42>
    a044:	8f ef       	ldi	r24, 0xFF	; 255
    a046:	5c c0       	rjmp	.+184    	; 0xa100 <send_cmd+0xfa>

  /* Send command packet */
  xmit_spi(cmd);            /* Start + Command index */
    a048:	e0 ec       	ldi	r30, 0xC0	; 192
    a04a:	fa e0       	ldi	r31, 0x0A	; 10
    a04c:	d3 82       	std	Z+3, r13	; 0x03
    a04e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a052:	87 ff       	sbrs	r24, 7
    a054:	fc cf       	rjmp	.-8      	; 0xa04e <send_cmd+0x48>
  xmit_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
    a056:	81 2f       	mov	r24, r17
    a058:	99 27       	eor	r25, r25
    a05a:	aa 27       	eor	r26, r26
    a05c:	bb 27       	eor	r27, r27
    a05e:	e0 ec       	ldi	r30, 0xC0	; 192
    a060:	fa e0       	ldi	r31, 0x0A	; 10
    a062:	83 83       	std	Z+3, r24	; 0x03
    a064:	80 91 c2 0a 	lds	r24, 0x0AC2
    a068:	87 ff       	sbrs	r24, 7
    a06a:	fc cf       	rjmp	.-8      	; 0xa064 <send_cmd+0x5e>
  xmit_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
    a06c:	c8 01       	movw	r24, r16
    a06e:	aa 27       	eor	r26, r26
    a070:	bb 27       	eor	r27, r27
    a072:	e0 ec       	ldi	r30, 0xC0	; 192
    a074:	fa e0       	ldi	r31, 0x0A	; 10
    a076:	83 83       	std	Z+3, r24	; 0x03
    a078:	80 91 c2 0a 	lds	r24, 0x0AC2
    a07c:	87 ff       	sbrs	r24, 7
    a07e:	fc cf       	rjmp	.-8      	; 0xa078 <send_cmd+0x72>
  xmit_spi((BYTE)(arg >> 8));      /* Argument[15..8] */
    a080:	bb 27       	eor	r27, r27
    a082:	a1 2f       	mov	r26, r17
    a084:	90 2f       	mov	r25, r16
    a086:	8f 2d       	mov	r24, r15
    a088:	e0 ec       	ldi	r30, 0xC0	; 192
    a08a:	fa e0       	ldi	r31, 0x0A	; 10
    a08c:	83 83       	std	Z+3, r24	; 0x03
    a08e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a092:	87 ff       	sbrs	r24, 7
    a094:	fc cf       	rjmp	.-8      	; 0xa08e <send_cmd+0x88>
  xmit_spi((BYTE)arg);        /* Argument[7..0] */
    a096:	e0 ec       	ldi	r30, 0xC0	; 192
    a098:	fa e0       	ldi	r31, 0x0A	; 10
    a09a:	e3 82       	std	Z+3, r14	; 0x03
    a09c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0a0:	87 ff       	sbrs	r24, 7
    a0a2:	fc cf       	rjmp	.-8      	; 0xa09c <send_cmd+0x96>
  n = 0x01;              /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
    a0a4:	80 e4       	ldi	r24, 0x40	; 64
    a0a6:	d8 16       	cp	r13, r24
    a0a8:	11 f4       	brne	.+4      	; 0xa0ae <send_cmd+0xa8>
    a0aa:	85 e9       	ldi	r24, 0x95	; 149
    a0ac:	06 c0       	rjmp	.+12     	; 0xa0ba <send_cmd+0xb4>
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
    a0ae:	88 e4       	ldi	r24, 0x48	; 72
    a0b0:	d8 16       	cp	r13, r24
    a0b2:	11 f4       	brne	.+4      	; 0xa0b8 <send_cmd+0xb2>
    a0b4:	87 e8       	ldi	r24, 0x87	; 135
    a0b6:	01 c0       	rjmp	.+2      	; 0xa0ba <send_cmd+0xb4>
    a0b8:	81 e0       	ldi	r24, 0x01	; 1
  xmit_spi(n);
    a0ba:	e0 ec       	ldi	r30, 0xC0	; 192
    a0bc:	fa e0       	ldi	r31, 0x0A	; 10
    a0be:	83 83       	std	Z+3, r24	; 0x03
    a0c0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0c4:	87 ff       	sbrs	r24, 7
    a0c6:	fc cf       	rjmp	.-8      	; 0xa0c0 <send_cmd+0xba>

  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
    a0c8:	8c e4       	ldi	r24, 0x4C	; 76
    a0ca:	d8 16       	cp	r13, r24
    a0cc:	51 f4       	brne	.+20     	; 0xa0e2 <send_cmd+0xdc>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a0ce:	8f ef       	ldi	r24, 0xFF	; 255
    a0d0:	e0 ec       	ldi	r30, 0xC0	; 192
    a0d2:	fa e0       	ldi	r31, 0x0A	; 10
    a0d4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a0d6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0da:	87 ff       	sbrs	r24, 7
    a0dc:	fc cf       	rjmp	.-8      	; 0xa0d6 <send_cmd+0xd0>
  return SPIE.DATA;
    a0de:	80 91 c3 0a 	lds	r24, 0x0AC3
    a0e2:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a0e4:	e0 ec       	ldi	r30, 0xC0	; 192
    a0e6:	fa e0       	ldi	r31, 0x0A	; 10
    a0e8:	2f ef       	ldi	r18, 0xFF	; 255
    a0ea:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a0ec:	80 91 c2 0a 	lds	r24, 0x0AC2
    a0f0:	87 ff       	sbrs	r24, 7
    a0f2:	fc cf       	rjmp	.-8      	; 0xa0ec <send_cmd+0xe6>
  return SPIE.DATA;
    a0f4:	80 91 c3 0a 	lds	r24, 0x0AC3
  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    res = rcvr_spi();
  while ((res & 0x80) && --n);
    a0f8:	87 ff       	sbrs	r24, 7
    a0fa:	02 c0       	rjmp	.+4      	; 0xa100 <send_cmd+0xfa>
    a0fc:	91 50       	subi	r25, 0x01	; 1
    a0fe:	a9 f7       	brne	.-22     	; 0xa0ea <send_cmd+0xe4>

  return res;      /* Return with the response value */
}
    a100:	1f 91       	pop	r17
    a102:	0f 91       	pop	r16
    a104:	ff 90       	pop	r15
    a106:	ef 90       	pop	r14
    a108:	df 90       	pop	r13
    a10a:	08 95       	ret

0000a10c <disk_status>:

DSTATUS disk_status (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;    /* Supports only single drive */
    a10c:	88 23       	and	r24, r24
    a10e:	11 f0       	breq	.+4      	; 0xa114 <disk_status+0x8>
    a110:	81 e0       	ldi	r24, 0x01	; 1
    a112:	08 95       	ret
  return Stat;
    a114:	80 91 d9 24 	lds	r24, 0x24D9
}
    a118:	08 95       	ret

0000a11a <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a11a:	0f 93       	push	r16
    a11c:	cf 93       	push	r28
    a11e:	df 93       	push	r29
    a120:	eb 01       	movw	r28, r22
  if (drv || !count) return RES_PARERR;
    a122:	88 23       	and	r24, r24
    a124:	09 f0       	breq	.+2      	; 0xa128 <disk_read+0xe>
    a126:	57 c0       	rjmp	.+174    	; 0xa1d6 <disk_read+0xbc>
    a128:	00 23       	and	r16, r16
    a12a:	09 f4       	brne	.+2      	; 0xa12e <disk_read+0x14>
    a12c:	54 c0       	rjmp	.+168    	; 0xa1d6 <disk_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a12e:	80 91 d9 24 	lds	r24, 0x24D9
    a132:	80 ff       	sbrs	r24, 0
    a134:	03 c0       	rjmp	.+6      	; 0xa13c <disk_read+0x22>
    a136:	23 e0       	ldi	r18, 0x03	; 3
    a138:	30 e0       	ldi	r19, 0x00	; 0
    a13a:	4f c0       	rjmp	.+158    	; 0xa1da <disk_read+0xc0>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a13c:	80 91 6f 25 	lds	r24, 0x256F
    a140:	83 fd       	sbrc	r24, 3
    a142:	07 c0       	rjmp	.+14     	; 0xa152 <disk_read+0x38>
    a144:	69 e0       	ldi	r22, 0x09	; 9
    a146:	22 0f       	add	r18, r18
    a148:	33 1f       	adc	r19, r19
    a14a:	44 1f       	adc	r20, r20
    a14c:	55 1f       	adc	r21, r21
    a14e:	6a 95       	dec	r22
    a150:	d1 f7       	brne	.-12     	; 0xa146 <disk_read+0x2c>

  if (count == 1) {  /* Single block read */
    a152:	01 30       	cpi	r16, 0x01	; 1
    a154:	89 f4       	brne	.+34     	; 0xa178 <disk_read+0x5e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
    a156:	81 e5       	ldi	r24, 0x51	; 81
    a158:	ba 01       	movw	r22, r20
    a15a:	a9 01       	movw	r20, r18
    a15c:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a160:	88 23       	and	r24, r24
    a162:	21 f5       	brne	.+72     	; 0xa1ac <disk_read+0x92>
    a164:	ce 01       	movw	r24, r28
    a166:	60 e0       	ldi	r22, 0x00	; 0
    a168:	72 e0       	ldi	r23, 0x02	; 2
    a16a:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rcvr_datablock>
    a16e:	00 e0       	ldi	r16, 0x00	; 0
    a170:	89 2b       	or	r24, r25
    a172:	e1 f4       	brne	.+56     	; 0xa1ac <disk_read+0x92>
    a174:	01 e0       	ldi	r16, 0x01	; 1
    a176:	1a c0       	rjmp	.+52     	; 0xa1ac <disk_read+0x92>
      && rcvr_datablock(buff, 512))
      count = 0;
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    a178:	82 e5       	ldi	r24, 0x52	; 82
    a17a:	ba 01       	movw	r22, r20
    a17c:	a9 01       	movw	r20, r18
    a17e:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a182:	88 23       	and	r24, r24
    a184:	99 f4       	brne	.+38     	; 0xa1ac <disk_read+0x92>
      do {
        if (!rcvr_datablock(buff, 512)) break;
    a186:	ce 01       	movw	r24, r28
    a188:	60 e0       	ldi	r22, 0x00	; 0
    a18a:	72 e0       	ldi	r23, 0x02	; 2
    a18c:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rcvr_datablock>
    a190:	89 2b       	or	r24, r25
    a192:	29 f0       	breq	.+10     	; 0xa19e <disk_read+0x84>
        buff += 512;
      } while (--count);
    a194:	01 50       	subi	r16, 0x01	; 1
    a196:	19 f0       	breq	.+6      	; 0xa19e <disk_read+0x84>
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!rcvr_datablock(buff, 512)) break;
        buff += 512;
    a198:	c0 50       	subi	r28, 0x00	; 0
    a19a:	de 4f       	sbci	r29, 0xFE	; 254
    a19c:	f4 cf       	rjmp	.-24     	; 0xa186 <disk_read+0x6c>
      } while (--count);
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    a19e:	8c e4       	ldi	r24, 0x4C	; 76
    a1a0:	40 e0       	ldi	r20, 0x00	; 0
    a1a2:	50 e0       	ldi	r21, 0x00	; 0
    a1a4:	60 e0       	ldi	r22, 0x00	; 0
    a1a6:	70 e0       	ldi	r23, 0x00	; 0
    a1a8:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a1ac:	80 e1       	ldi	r24, 0x10	; 16
    a1ae:	e0 e8       	ldi	r30, 0x80	; 128
    a1b0:	f6 e0       	ldi	r31, 0x06	; 6
    a1b2:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a1b4:	8f ef       	ldi	r24, 0xFF	; 255
    a1b6:	e0 ec       	ldi	r30, 0xC0	; 192
    a1b8:	fa e0       	ldi	r31, 0x0A	; 10
    a1ba:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a1bc:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1c0:	87 ff       	sbrs	r24, 7
    a1c2:	fc cf       	rjmp	.-8      	; 0xa1bc <disk_read+0xa2>
  return SPIE.DATA;
    a1c4:	80 91 c3 0a 	lds	r24, 0x0AC3
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a1c8:	20 e0       	ldi	r18, 0x00	; 0
    a1ca:	30 e0       	ldi	r19, 0x00	; 0
    a1cc:	00 23       	and	r16, r16
    a1ce:	29 f0       	breq	.+10     	; 0xa1da <disk_read+0xc0>
    a1d0:	21 e0       	ldi	r18, 0x01	; 1
    a1d2:	30 e0       	ldi	r19, 0x00	; 0
    a1d4:	02 c0       	rjmp	.+4      	; 0xa1da <disk_read+0xc0>
    a1d6:	24 e0       	ldi	r18, 0x04	; 4
    a1d8:	30 e0       	ldi	r19, 0x00	; 0
}
    a1da:	c9 01       	movw	r24, r18
    a1dc:	df 91       	pop	r29
    a1de:	cf 91       	pop	r28
    a1e0:	0f 91       	pop	r16
    a1e2:	08 95       	ret

0000a1e4 <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a1e4:	cf 92       	push	r12
    a1e6:	df 92       	push	r13
    a1e8:	ef 92       	push	r14
    a1ea:	ff 92       	push	r15
    a1ec:	0f 93       	push	r16
    a1ee:	cf 93       	push	r28
    a1f0:	df 93       	push	r29
    a1f2:	eb 01       	movw	r28, r22
    a1f4:	69 01       	movw	r12, r18
    a1f6:	7a 01       	movw	r14, r20
  if (drv || !count) return RES_PARERR;
    a1f8:	88 23       	and	r24, r24
    a1fa:	09 f0       	breq	.+2      	; 0xa1fe <disk_write+0x1a>
    a1fc:	66 c0       	rjmp	.+204    	; 0xa2ca <disk_write+0xe6>
    a1fe:	00 23       	and	r16, r16
    a200:	09 f4       	brne	.+2      	; 0xa204 <disk_write+0x20>
    a202:	63 c0       	rjmp	.+198    	; 0xa2ca <disk_write+0xe6>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a204:	80 91 d9 24 	lds	r24, 0x24D9
    a208:	80 ff       	sbrs	r24, 0
    a20a:	03 c0       	rjmp	.+6      	; 0xa212 <disk_write+0x2e>
    a20c:	23 e0       	ldi	r18, 0x03	; 3
    a20e:	30 e0       	ldi	r19, 0x00	; 0
    a210:	5e c0       	rjmp	.+188    	; 0xa2ce <disk_write+0xea>
  if (Stat & STA_PROTECT) return RES_WRPRT;
    a212:	80 91 d9 24 	lds	r24, 0x24D9
    a216:	82 ff       	sbrs	r24, 2
    a218:	03 c0       	rjmp	.+6      	; 0xa220 <disk_write+0x3c>
    a21a:	22 e0       	ldi	r18, 0x02	; 2
    a21c:	30 e0       	ldi	r19, 0x00	; 0
    a21e:	57 c0       	rjmp	.+174    	; 0xa2ce <disk_write+0xea>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a220:	80 91 6f 25 	lds	r24, 0x256F
    a224:	90 e0       	ldi	r25, 0x00	; 0
    a226:	83 fd       	sbrc	r24, 3
    a228:	07 c0       	rjmp	.+14     	; 0xa238 <disk_write+0x54>
    a22a:	79 e0       	ldi	r23, 0x09	; 9
    a22c:	cc 0c       	add	r12, r12
    a22e:	dd 1c       	adc	r13, r13
    a230:	ee 1c       	adc	r14, r14
    a232:	ff 1c       	adc	r15, r15
    a234:	7a 95       	dec	r23
    a236:	d1 f7       	brne	.-12     	; 0xa22c <disk_write+0x48>

  if (count == 1) {  /* Single block write */
    a238:	01 30       	cpi	r16, 0x01	; 1
    a23a:	69 f4       	brne	.+26     	; 0xa256 <disk_write+0x72>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    a23c:	88 e5       	ldi	r24, 0x58	; 88
    a23e:	b7 01       	movw	r22, r14
    a240:	a6 01       	movw	r20, r12
    a242:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a246:	88 23       	and	r24, r24
    a248:	59 f5       	brne	.+86     	; 0xa2a0 <disk_write+0xbc>
    a24a:	ce 01       	movw	r24, r28
    a24c:	6e ef       	ldi	r22, 0xFE	; 254
    a24e:	0e 94 b0 4f 	call	0x9f60	; 0x9f60 <xmit_datablock>
    a252:	00 e0       	ldi	r16, 0x00	; 0
    a254:	22 c0       	rjmp	.+68     	; 0xa29a <disk_write+0xb6>
      && xmit_datablock(buff, 0xFE))
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    a256:	86 70       	andi	r24, 0x06	; 6
    a258:	90 70       	andi	r25, 0x00	; 0
    a25a:	89 2b       	or	r24, r25
    a25c:	39 f0       	breq	.+14     	; 0xa26c <disk_write+0x88>
    a25e:	40 2f       	mov	r20, r16
    a260:	50 e0       	ldi	r21, 0x00	; 0
    a262:	60 e0       	ldi	r22, 0x00	; 0
    a264:	70 e0       	ldi	r23, 0x00	; 0
    a266:	87 ed       	ldi	r24, 0xD7	; 215
    a268:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    a26c:	89 e5       	ldi	r24, 0x59	; 89
    a26e:	b7 01       	movw	r22, r14
    a270:	a6 01       	movw	r20, r12
    a272:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a276:	88 23       	and	r24, r24
    a278:	99 f4       	brne	.+38     	; 0xa2a0 <disk_write+0xbc>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    a27a:	ce 01       	movw	r24, r28
    a27c:	6c ef       	ldi	r22, 0xFC	; 252
    a27e:	0e 94 b0 4f 	call	0x9f60	; 0x9f60 <xmit_datablock>
    a282:	89 2b       	or	r24, r25
    a284:	29 f0       	breq	.+10     	; 0xa290 <disk_write+0xac>
        buff += 512;
      } while (--count);
    a286:	01 50       	subi	r16, 0x01	; 1
    a288:	19 f0       	breq	.+6      	; 0xa290 <disk_write+0xac>
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
        buff += 512;
    a28a:	c0 50       	subi	r28, 0x00	; 0
    a28c:	de 4f       	sbci	r29, 0xFE	; 254
    a28e:	f5 cf       	rjmp	.-22     	; 0xa27a <disk_write+0x96>
      } while (--count);
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    a290:	80 e0       	ldi	r24, 0x00	; 0
    a292:	90 e0       	ldi	r25, 0x00	; 0
    a294:	6d ef       	ldi	r22, 0xFD	; 253
    a296:	0e 94 b0 4f 	call	0x9f60	; 0x9f60 <xmit_datablock>
    a29a:	89 2b       	or	r24, r25
    a29c:	09 f4       	brne	.+2      	; 0xa2a0 <disk_write+0xbc>
    a29e:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a2a0:	80 e1       	ldi	r24, 0x10	; 16
    a2a2:	e0 e8       	ldi	r30, 0x80	; 128
    a2a4:	f6 e0       	ldi	r31, 0x06	; 6
    a2a6:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a2a8:	8f ef       	ldi	r24, 0xFF	; 255
    a2aa:	e0 ec       	ldi	r30, 0xC0	; 192
    a2ac:	fa e0       	ldi	r31, 0x0A	; 10
    a2ae:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a2b0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a2b4:	87 ff       	sbrs	r24, 7
    a2b6:	fc cf       	rjmp	.-8      	; 0xa2b0 <disk_write+0xcc>
  return SPIE.DATA;
    a2b8:	80 91 c3 0a 	lds	r24, 0x0AC3
        count = 1;
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a2bc:	20 e0       	ldi	r18, 0x00	; 0
    a2be:	30 e0       	ldi	r19, 0x00	; 0
    a2c0:	00 23       	and	r16, r16
    a2c2:	29 f0       	breq	.+10     	; 0xa2ce <disk_write+0xea>
    a2c4:	21 e0       	ldi	r18, 0x01	; 1
    a2c6:	30 e0       	ldi	r19, 0x00	; 0
    a2c8:	02 c0       	rjmp	.+4      	; 0xa2ce <disk_write+0xea>
    a2ca:	24 e0       	ldi	r18, 0x04	; 4
    a2cc:	30 e0       	ldi	r19, 0x00	; 0
}
    a2ce:	c9 01       	movw	r24, r18
    a2d0:	df 91       	pop	r29
    a2d2:	cf 91       	pop	r28
    a2d4:	0f 91       	pop	r16
    a2d6:	ff 90       	pop	r15
    a2d8:	ef 90       	pop	r14
    a2da:	df 90       	pop	r13
    a2dc:	cf 90       	pop	r12
    a2de:	08 95       	ret

0000a2e0 <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    a2e0:	a0 e1       	ldi	r26, 0x10	; 16
    a2e2:	b0 e0       	ldi	r27, 0x00	; 0
    a2e4:	e6 e7       	ldi	r30, 0x76	; 118
    a2e6:	f1 e5       	ldi	r31, 0x51	; 81
    a2e8:	0c 94 b0 57 	jmp	0xaf60	; 0xaf60 <__prologue_saves__+0x1a>
    a2ec:	8a 01       	movw	r16, r20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;


  if (drv) return RES_PARERR;
    a2ee:	88 23       	and	r24, r24
    a2f0:	09 f0       	breq	.+2      	; 0xa2f4 <disk_ioctl+0x14>
    a2f2:	a2 c1       	rjmp	.+836    	; 0xa638 <disk_ioctl+0x358>

  res = RES_ERROR;

  if (ctrl == CTRL_POWER) {
    a2f4:	64 30       	cpi	r22, 0x04	; 4
    a2f6:	f1 f4       	brne	.+60     	; 0xa334 <disk_ioctl+0x54>
    switch (*ptr) {
    a2f8:	fa 01       	movw	r30, r20
    a2fa:	80 81       	ld	r24, Z
    a2fc:	81 30       	cpi	r24, 0x01	; 1
    a2fe:	49 f0       	breq	.+18     	; 0xa312 <disk_ioctl+0x32>
    a300:	81 30       	cpi	r24, 0x01	; 1
    a302:	20 f0       	brcs	.+8      	; 0xa30c <disk_ioctl+0x2c>
    a304:	82 30       	cpi	r24, 0x02	; 2
    a306:	09 f0       	breq	.+2      	; 0xa30a <disk_ioctl+0x2a>
    a308:	97 c1       	rjmp	.+814    	; 0xa638 <disk_ioctl+0x358>
    a30a:	0e c0       	rjmp	.+28     	; 0xa328 <disk_ioctl+0x48>
    case 0:    /* Sub control code == 0 (POWER_OFF) */
      if (chk_power())
        power_off();    /* Power off */
    a30c:	0e 94 2b 4f 	call	0x9e56	; 0x9e56 <power_off>
    a310:	0e c0       	rjmp	.+28     	; 0xa32e <disk_ioctl+0x4e>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a312:	83 e0       	ldi	r24, 0x03	; 3
    a314:	80 93 6d 25 	sts	0x256D, r24
    a318:	80 91 6d 25 	lds	r24, 0x256D
    a31c:	88 23       	and	r24, r24
    a31e:	e1 f7       	brne	.-8      	; 0xa318 <disk_ioctl+0x38>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a320:	83 e5       	ldi	r24, 0x53	; 83
    a322:	80 93 c0 0a 	sts	0x0AC0, r24
    a326:	03 c0       	rjmp	.+6      	; 0xa32e <disk_ioctl+0x4e>
    case 1:    /* Sub control code == 1 (POWER_ON) */
      power_on();        /* Power on */
      res = RES_OK;
      break;
    case 2:    /* Sub control code == 2 (POWER_GET) */
      *(ptr+1) = (BYTE)chk_power();
    a328:	81 e0       	ldi	r24, 0x01	; 1
    a32a:	fa 01       	movw	r30, r20
    a32c:	81 83       	std	Z+1, r24	; 0x01
    a32e:	20 e0       	ldi	r18, 0x00	; 0
    a330:	30 e0       	ldi	r19, 0x00	; 0
    a332:	84 c1       	rjmp	.+776    	; 0xa63c <disk_ioctl+0x35c>
    default :
      res = RES_PARERR;
    }
  }
  else {
    if (Stat & STA_NOINIT) return RES_NOTRDY;
    a334:	80 91 d9 24 	lds	r24, 0x24D9
    a338:	80 ff       	sbrs	r24, 0
    a33a:	03 c0       	rjmp	.+6      	; 0xa342 <disk_ioctl+0x62>
    a33c:	23 e0       	ldi	r18, 0x03	; 3
    a33e:	30 e0       	ldi	r19, 0x00	; 0
    a340:	7d c1       	rjmp	.+762    	; 0xa63c <disk_ioctl+0x35c>

    switch (ctrl) {
    a342:	e6 2f       	mov	r30, r22
    a344:	f0 e0       	ldi	r31, 0x00	; 0
    a346:	ef 30       	cpi	r30, 0x0F	; 15
    a348:	f1 05       	cpc	r31, r1
    a34a:	20 f4       	brcc	.+8      	; 0xa354 <disk_ioctl+0x74>
    a34c:	ed 5f       	subi	r30, 0xFD	; 253
    a34e:	fe 4f       	sbci	r31, 0xFE	; 254
    a350:	0c 94 da 57 	jmp	0xafb4	; 0xafb4 <__tablejump2__>
    a354:	24 e0       	ldi	r18, 0x04	; 4
    a356:	30 e0       	ldi	r19, 0x00	; 0
    a358:	60 c1       	rjmp	.+704    	; 0xa61a <disk_ioctl+0x33a>
    case CTRL_SYNC :    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
      SELECT();
    a35a:	80 e1       	ldi	r24, 0x10	; 16
    a35c:	e0 e8       	ldi	r30, 0x80	; 128
    a35e:	f6 e0       	ldi	r31, 0x06	; 6
    a360:	86 83       	std	Z+6, r24	; 0x06
      if (wait_ready() == 0xFF)
    a362:	0e 94 0c 4f 	call	0x9e18	; 0x9e18 <wait_ready>
    a366:	20 e0       	ldi	r18, 0x00	; 0
    a368:	30 e0       	ldi	r19, 0x00	; 0
    a36a:	8f 3f       	cpi	r24, 0xFF	; 255
    a36c:	09 f0       	breq	.+2      	; 0xa370 <disk_ioctl+0x90>
    a36e:	53 c1       	rjmp	.+678    	; 0xa616 <disk_ioctl+0x336>
    a370:	54 c1       	rjmp	.+680    	; 0xa61a <disk_ioctl+0x33a>
        res = RES_OK;
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    a372:	89 e4       	ldi	r24, 0x49	; 73
    a374:	40 e0       	ldi	r20, 0x00	; 0
    a376:	50 e0       	ldi	r21, 0x00	; 0
    a378:	60 e0       	ldi	r22, 0x00	; 0
    a37a:	70 e0       	ldi	r23, 0x00	; 0
    a37c:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a380:	88 23       	and	r24, r24
    a382:	09 f0       	breq	.+2      	; 0xa386 <disk_ioctl+0xa6>
    a384:	48 c1       	rjmp	.+656    	; 0xa616 <disk_ioctl+0x336>
    a386:	ce 01       	movw	r24, r28
    a388:	01 96       	adiw	r24, 0x01	; 1
    a38a:	60 e1       	ldi	r22, 0x10	; 16
    a38c:	70 e0       	ldi	r23, 0x00	; 0
    a38e:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rcvr_datablock>
    a392:	89 2b       	or	r24, r25
    a394:	09 f4       	brne	.+2      	; 0xa398 <disk_ioctl+0xb8>
    a396:	3f c1       	rjmp	.+638    	; 0xa616 <disk_ioctl+0x336>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    a398:	89 81       	ldd	r24, Y+1	; 0x01
    a39a:	82 95       	swap	r24
    a39c:	86 95       	lsr	r24
    a39e:	86 95       	lsr	r24
    a3a0:	83 70       	andi	r24, 0x03	; 3
    a3a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    a3a4:	49 85       	ldd	r20, Y+9	; 0x09
    a3a6:	81 30       	cpi	r24, 0x01	; 1
    a3a8:	89 f4       	brne	.+34     	; 0xa3cc <disk_ioctl+0xec>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
    a3aa:	87 2f       	mov	r24, r23
    a3ac:	90 e0       	ldi	r25, 0x00	; 0
    a3ae:	01 96       	adiw	r24, 0x01	; 1
    a3b0:	34 2f       	mov	r19, r20
    a3b2:	20 e0       	ldi	r18, 0x00	; 0
    a3b4:	82 0f       	add	r24, r18
    a3b6:	93 1f       	adc	r25, r19
    a3b8:	a0 e0       	ldi	r26, 0x00	; 0
    a3ba:	b0 e0       	ldi	r27, 0x00	; 0
    a3bc:	2a e0       	ldi	r18, 0x0A	; 10
    a3be:	88 0f       	add	r24, r24
    a3c0:	99 1f       	adc	r25, r25
    a3c2:	aa 1f       	adc	r26, r26
    a3c4:	bb 1f       	adc	r27, r27
    a3c6:	2a 95       	dec	r18
    a3c8:	d1 f7       	brne	.-12     	; 0xa3be <disk_ioctl+0xde>
    a3ca:	cd c0       	rjmp	.+410    	; 0xa566 <disk_ioctl+0x286>
        } else {          /* SDC ver 1.XX or MMC*/
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    a3cc:	42 95       	swap	r20
    a3ce:	46 95       	lsr	r20
    a3d0:	46 95       	lsr	r20
    a3d2:	43 70       	andi	r20, 0x03	; 3
    a3d4:	28 85       	ldd	r18, Y+8	; 0x08
    a3d6:	30 e0       	ldi	r19, 0x00	; 0
    a3d8:	22 0f       	add	r18, r18
    a3da:	33 1f       	adc	r19, r19
    a3dc:	22 0f       	add	r18, r18
    a3de:	33 1f       	adc	r19, r19
    a3e0:	24 0f       	add	r18, r20
    a3e2:	31 1d       	adc	r19, r1
    a3e4:	2f 5f       	subi	r18, 0xFF	; 255
    a3e6:	3f 4f       	sbci	r19, 0xFF	; 255
    a3e8:	8f 81       	ldd	r24, Y+7	; 0x07
    a3ea:	90 e0       	ldi	r25, 0x00	; 0
    a3ec:	83 70       	andi	r24, 0x03	; 3
    a3ee:	90 70       	andi	r25, 0x00	; 0
    a3f0:	98 2f       	mov	r25, r24
    a3f2:	88 27       	eor	r24, r24
    a3f4:	99 0f       	add	r25, r25
    a3f6:	99 0f       	add	r25, r25
    a3f8:	28 0f       	add	r18, r24
    a3fa:	39 1f       	adc	r19, r25
    a3fc:	40 e0       	ldi	r20, 0x00	; 0
    a3fe:	50 e0       	ldi	r21, 0x00	; 0
    a400:	8e 81       	ldd	r24, Y+6	; 0x06
    a402:	8f 70       	andi	r24, 0x0F	; 15
    a404:	6b 85       	ldd	r22, Y+11	; 0x0b
    a406:	66 1f       	adc	r22, r22
    a408:	66 27       	eor	r22, r22
    a40a:	66 1f       	adc	r22, r22
    a40c:	86 0f       	add	r24, r22
    a40e:	8e 5f       	subi	r24, 0xFE	; 254
    a410:	73 70       	andi	r23, 0x03	; 3
    a412:	77 0f       	add	r23, r23
    a414:	87 0f       	add	r24, r23
    a416:	90 e0       	ldi	r25, 0x00	; 0
    a418:	09 97       	sbiw	r24, 0x09	; 9
    a41a:	04 c0       	rjmp	.+8      	; 0xa424 <disk_ioctl+0x144>
    a41c:	22 0f       	add	r18, r18
    a41e:	33 1f       	adc	r19, r19
    a420:	44 1f       	adc	r20, r20
    a422:	55 1f       	adc	r21, r21
    a424:	8a 95       	dec	r24
    a426:	d2 f7       	brpl	.-12     	; 0xa41c <disk_ioctl+0x13c>
    a428:	f8 01       	movw	r30, r16
    a42a:	20 83       	st	Z, r18
    a42c:	31 83       	std	Z+1, r19	; 0x01
    a42e:	42 83       	std	Z+2, r20	; 0x02
    a430:	53 83       	std	Z+3, r21	; 0x03
    a432:	9e c0       	rjmp	.+316    	; 0xa570 <disk_ioctl+0x290>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :  /* Get R/W sector size (WORD) */
      *(WORD*)buff = 512;
    a434:	80 e0       	ldi	r24, 0x00	; 0
    a436:	92 e0       	ldi	r25, 0x02	; 2
    a438:	fa 01       	movw	r30, r20
    a43a:	80 83       	st	Z, r24
    a43c:	91 83       	std	Z+1, r25	; 0x01
    a43e:	98 c0       	rjmp	.+304    	; 0xa570 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
    a440:	80 91 6f 25 	lds	r24, 0x256F
    a444:	f8 2e       	mov	r15, r24
    a446:	82 ff       	sbrs	r24, 2
    a448:	39 c0       	rjmp	.+114    	; 0xa4bc <disk_ioctl+0x1dc>
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
    a44a:	8d ec       	ldi	r24, 0xCD	; 205
    a44c:	40 e0       	ldi	r20, 0x00	; 0
    a44e:	50 e0       	ldi	r21, 0x00	; 0
    a450:	60 e0       	ldi	r22, 0x00	; 0
    a452:	70 e0       	ldi	r23, 0x00	; 0
    a454:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a458:	88 23       	and	r24, r24
    a45a:	09 f0       	breq	.+2      	; 0xa45e <disk_ioctl+0x17e>
    a45c:	dc c0       	rjmp	.+440    	; 0xa616 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a45e:	8f ef       	ldi	r24, 0xFF	; 255
    a460:	e0 ec       	ldi	r30, 0xC0	; 192
    a462:	fa e0       	ldi	r31, 0x0A	; 10
    a464:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a466:	80 91 c2 0a 	lds	r24, 0x0AC2
    a46a:	87 ff       	sbrs	r24, 7
    a46c:	fc cf       	rjmp	.-8      	; 0xa466 <disk_ioctl+0x186>
  return SPIE.DATA;
    a46e:	80 91 c3 0a 	lds	r24, 0x0AC3

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
    a472:	ce 01       	movw	r24, r28
    a474:	01 96       	adiw	r24, 0x01	; 1
    a476:	60 e1       	ldi	r22, 0x10	; 16
    a478:	70 e0       	ldi	r23, 0x00	; 0
    a47a:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rcvr_datablock>
    a47e:	89 2b       	or	r24, r25
    a480:	09 f4       	brne	.+2      	; 0xa484 <disk_ioctl+0x1a4>
    a482:	c9 c0       	rjmp	.+402    	; 0xa616 <disk_ioctl+0x336>
    a484:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a486:	e0 ec       	ldi	r30, 0xC0	; 192
    a488:	fa e0       	ldi	r31, 0x0A	; 10
    a48a:	2f ef       	ldi	r18, 0xFF	; 255
    a48c:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a48e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a492:	87 ff       	sbrs	r24, 7
    a494:	fc cf       	rjmp	.-8      	; 0xa48e <disk_ioctl+0x1ae>
  return SPIE.DATA;
    a496:	80 91 c3 0a 	lds	r24, 0x0AC3
    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
            for (n = 64 - 16; n; n--) rcvr_spi();  /* Purge trailing data */
    a49a:	91 50       	subi	r25, 0x01	; 1
    a49c:	b9 f7       	brne	.-18     	; 0xa48c <disk_ioctl+0x1ac>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    a49e:	2b 85       	ldd	r18, Y+11	; 0x0b
    a4a0:	22 95       	swap	r18
    a4a2:	2f 70       	andi	r18, 0x0F	; 15
    a4a4:	80 e1       	ldi	r24, 0x10	; 16
    a4a6:	90 e0       	ldi	r25, 0x00	; 0
    a4a8:	a0 e0       	ldi	r26, 0x00	; 0
    a4aa:	b0 e0       	ldi	r27, 0x00	; 0
    a4ac:	04 c0       	rjmp	.+8      	; 0xa4b6 <disk_ioctl+0x1d6>
    a4ae:	88 0f       	add	r24, r24
    a4b0:	99 1f       	adc	r25, r25
    a4b2:	aa 1f       	adc	r26, r26
    a4b4:	bb 1f       	adc	r27, r27
    a4b6:	2a 95       	dec	r18
    a4b8:	d2 f7       	brpl	.-12     	; 0xa4ae <disk_ioctl+0x1ce>
    a4ba:	55 c0       	rjmp	.+170    	; 0xa566 <disk_ioctl+0x286>
            res = RES_OK;
          }
        }
      } else {          /* SDC ver 1.XX or MMC */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
    a4bc:	89 e4       	ldi	r24, 0x49	; 73
    a4be:	40 e0       	ldi	r20, 0x00	; 0
    a4c0:	50 e0       	ldi	r21, 0x00	; 0
    a4c2:	60 e0       	ldi	r22, 0x00	; 0
    a4c4:	70 e0       	ldi	r23, 0x00	; 0
    a4c6:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a4ca:	88 23       	and	r24, r24
    a4cc:	09 f0       	breq	.+2      	; 0xa4d0 <disk_ioctl+0x1f0>
    a4ce:	a3 c0       	rjmp	.+326    	; 0xa616 <disk_ioctl+0x336>
    a4d0:	ce 01       	movw	r24, r28
    a4d2:	01 96       	adiw	r24, 0x01	; 1
    a4d4:	60 e1       	ldi	r22, 0x10	; 16
    a4d6:	70 e0       	ldi	r23, 0x00	; 0
    a4d8:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rcvr_datablock>
    a4dc:	89 2b       	or	r24, r25
    a4de:	09 f4       	brne	.+2      	; 0xa4e2 <disk_ioctl+0x202>
    a4e0:	9a c0       	rjmp	.+308    	; 0xa616 <disk_ioctl+0x336>
    a4e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    a4e4:	8c 85       	ldd	r24, Y+12	; 0x0c
          if (CardType & CT_SD1) {  /* SDC ver 1.XX */
    a4e6:	f1 fe       	sbrs	r15, 1
    a4e8:	1b c0       	rjmp	.+54     	; 0xa520 <disk_ioctl+0x240>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    a4ea:	88 1f       	adc	r24, r24
    a4ec:	88 27       	eor	r24, r24
    a4ee:	88 1f       	adc	r24, r24
    a4f0:	90 e0       	ldi	r25, 0x00	; 0
    a4f2:	01 96       	adiw	r24, 0x01	; 1
    a4f4:	24 2f       	mov	r18, r20
    a4f6:	30 e0       	ldi	r19, 0x00	; 0
    a4f8:	2f 73       	andi	r18, 0x3F	; 63
    a4fa:	30 70       	andi	r19, 0x00	; 0
    a4fc:	22 0f       	add	r18, r18
    a4fe:	33 1f       	adc	r19, r19
    a500:	82 0f       	add	r24, r18
    a502:	93 1f       	adc	r25, r19
    a504:	2e 85       	ldd	r18, Y+14	; 0x0e
    a506:	22 95       	swap	r18
    a508:	26 95       	lsr	r18
    a50a:	26 95       	lsr	r18
    a50c:	23 70       	andi	r18, 0x03	; 3
    a50e:	30 e0       	ldi	r19, 0x00	; 0
    a510:	21 50       	subi	r18, 0x01	; 1
    a512:	30 40       	sbci	r19, 0x00	; 0
    a514:	02 c0       	rjmp	.+4      	; 0xa51a <disk_ioctl+0x23a>
    a516:	88 0f       	add	r24, r24
    a518:	99 1f       	adc	r25, r25
    a51a:	2a 95       	dec	r18
    a51c:	e2 f7       	brpl	.-8      	; 0xa516 <disk_ioctl+0x236>
    a51e:	21 c0       	rjmp	.+66     	; 0xa562 <disk_ioctl+0x282>
          } else {          /* MMC */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    a520:	28 2f       	mov	r18, r24
    a522:	30 e0       	ldi	r19, 0x00	; 0
    a524:	23 70       	andi	r18, 0x03	; 3
    a526:	30 70       	andi	r19, 0x00	; 0
    a528:	f3 e0       	ldi	r31, 0x03	; 3
    a52a:	22 0f       	add	r18, r18
    a52c:	33 1f       	adc	r19, r19
    a52e:	fa 95       	dec	r31
    a530:	e1 f7       	brne	.-8      	; 0xa52a <disk_ioctl+0x24a>
    a532:	82 95       	swap	r24
    a534:	86 95       	lsr	r24
    a536:	87 70       	andi	r24, 0x07	; 7
    a538:	28 0f       	add	r18, r24
    a53a:	31 1d       	adc	r19, r1
    a53c:	2f 5f       	subi	r18, 0xFF	; 255
    a53e:	3f 4f       	sbci	r19, 0xFF	; 255
    a540:	84 2f       	mov	r24, r20
    a542:	90 e0       	ldi	r25, 0x00	; 0
    a544:	8c 77       	andi	r24, 0x7C	; 124
    a546:	90 70       	andi	r25, 0x00	; 0
    a548:	95 95       	asr	r25
    a54a:	87 95       	ror	r24
    a54c:	95 95       	asr	r25
    a54e:	87 95       	ror	r24
    a550:	01 96       	adiw	r24, 0x01	; 1
    a552:	ac 01       	movw	r20, r24
    a554:	24 9f       	mul	r18, r20
    a556:	c0 01       	movw	r24, r0
    a558:	25 9f       	mul	r18, r21
    a55a:	90 0d       	add	r25, r0
    a55c:	34 9f       	mul	r19, r20
    a55e:	90 0d       	add	r25, r0
    a560:	11 24       	eor	r1, r1
    a562:	a0 e0       	ldi	r26, 0x00	; 0
    a564:	b0 e0       	ldi	r27, 0x00	; 0
    a566:	f8 01       	movw	r30, r16
    a568:	80 83       	st	Z, r24
    a56a:	91 83       	std	Z+1, r25	; 0x01
    a56c:	a2 83       	std	Z+2, r26	; 0x02
    a56e:	b3 83       	std	Z+3, r27	; 0x03
    a570:	20 e0       	ldi	r18, 0x00	; 0
    a572:	30 e0       	ldi	r19, 0x00	; 0
    a574:	52 c0       	rjmp	.+164    	; 0xa61a <disk_ioctl+0x33a>
        }
      }
      break;

    case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
      *ptr = CardType;
    a576:	80 91 6f 25 	lds	r24, 0x256F
    a57a:	fa 01       	movw	r30, r20
    a57c:	80 83       	st	Z, r24
    a57e:	f8 cf       	rjmp	.-16     	; 0xa570 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
      if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
    a580:	89 e4       	ldi	r24, 0x49	; 73
    a582:	01 c0       	rjmp	.+2      	; 0xa586 <disk_ioctl+0x2a6>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
      if (send_cmd(CMD10, 0) == 0    /* READ_CID */
    a584:	8a e4       	ldi	r24, 0x4A	; 74
    a586:	40 e0       	ldi	r20, 0x00	; 0
    a588:	50 e0       	ldi	r21, 0x00	; 0
    a58a:	60 e0       	ldi	r22, 0x00	; 0
    a58c:	70 e0       	ldi	r23, 0x00	; 0
    a58e:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a592:	88 23       	and	r24, r24
    a594:	09 f0       	breq	.+2      	; 0xa598 <disk_ioctl+0x2b8>
    a596:	3f c0       	rjmp	.+126    	; 0xa616 <disk_ioctl+0x336>
    a598:	c8 01       	movw	r24, r16
    a59a:	60 e1       	ldi	r22, 0x10	; 16
    a59c:	70 e0       	ldi	r23, 0x00	; 0
    a59e:	35 c0       	rjmp	.+106    	; 0xa60a <disk_ioctl+0x32a>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
    a5a0:	8a e7       	ldi	r24, 0x7A	; 122
    a5a2:	40 e0       	ldi	r20, 0x00	; 0
    a5a4:	50 e0       	ldi	r21, 0x00	; 0
    a5a6:	60 e0       	ldi	r22, 0x00	; 0
    a5a8:	70 e0       	ldi	r23, 0x00	; 0
    a5aa:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a5ae:	88 23       	and	r24, r24
    a5b0:	91 f5       	brne	.+100    	; 0xa616 <disk_ioctl+0x336>
    a5b2:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5b4:	a0 ec       	ldi	r26, 0xC0	; 192
    a5b6:	ba e0       	ldi	r27, 0x0A	; 10
    a5b8:	9f ef       	ldi	r25, 0xFF	; 255
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a5ba:	98 01       	movw	r18, r16
    a5bc:	2d 5f       	subi	r18, 0xFD	; 253
    a5be:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5c0:	13 96       	adiw	r26, 0x03	; 3
    a5c2:	9c 93       	st	X, r25
    a5c4:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5c6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5ca:	87 ff       	sbrs	r24, 7
    a5cc:	fc cf       	rjmp	.-8      	; 0xa5c6 <disk_ioctl+0x2e6>
  return SPIE.DATA;
    a5ce:	80 91 c3 0a 	lds	r24, 0x0AC3
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a5d2:	80 83       	st	Z, r24
    a5d4:	e2 17       	cp	r30, r18
    a5d6:	f3 07       	cpc	r31, r19
    a5d8:	59 f2       	breq	.-106    	; 0xa570 <disk_ioctl+0x290>
    a5da:	31 96       	adiw	r30, 0x01	; 1
    a5dc:	f1 cf       	rjmp	.-30     	; 0xa5c0 <disk_ioctl+0x2e0>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
    a5de:	8d ec       	ldi	r24, 0xCD	; 205
    a5e0:	40 e0       	ldi	r20, 0x00	; 0
    a5e2:	50 e0       	ldi	r21, 0x00	; 0
    a5e4:	60 e0       	ldi	r22, 0x00	; 0
    a5e6:	70 e0       	ldi	r23, 0x00	; 0
    a5e8:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a5ec:	88 23       	and	r24, r24
    a5ee:	99 f4       	brne	.+38     	; 0xa616 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5f0:	8f ef       	ldi	r24, 0xFF	; 255
    a5f2:	e0 ec       	ldi	r30, 0xC0	; 192
    a5f4:	fa e0       	ldi	r31, 0x0A	; 10
    a5f6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5f8:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5fc:	87 ff       	sbrs	r24, 7
    a5fe:	fc cf       	rjmp	.-8      	; 0xa5f8 <disk_ioctl+0x318>
  return SPIE.DATA;
    a600:	80 91 c3 0a 	lds	r24, 0x0AC3
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
        rcvr_spi();
        if (rcvr_datablock(ptr, 64))
    a604:	c8 01       	movw	r24, r16
    a606:	60 e4       	ldi	r22, 0x40	; 64
    a608:	70 e0       	ldi	r23, 0x00	; 0
    a60a:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rcvr_datablock>
    a60e:	20 e0       	ldi	r18, 0x00	; 0
    a610:	30 e0       	ldi	r19, 0x00	; 0
    a612:	89 2b       	or	r24, r25
    a614:	11 f4       	brne	.+4      	; 0xa61a <disk_ioctl+0x33a>
    a616:	21 e0       	ldi	r18, 0x01	; 1
    a618:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a61a:	80 e1       	ldi	r24, 0x10	; 16
    a61c:	e0 e8       	ldi	r30, 0x80	; 128
    a61e:	f6 e0       	ldi	r31, 0x06	; 6
    a620:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a622:	8f ef       	ldi	r24, 0xFF	; 255
    a624:	e0 ec       	ldi	r30, 0xC0	; 192
    a626:	fa e0       	ldi	r31, 0x0A	; 10
    a628:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a62a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a62e:	87 ff       	sbrs	r24, 7
    a630:	fc cf       	rjmp	.-8      	; 0xa62a <disk_ioctl+0x34a>
  return SPIE.DATA;
    a632:	80 91 c3 0a 	lds	r24, 0x0AC3
    a636:	02 c0       	rjmp	.+4      	; 0xa63c <disk_ioctl+0x35c>
    a638:	24 e0       	ldi	r18, 0x04	; 4
    a63a:	30 e0       	ldi	r19, 0x00	; 0

    release_spi();
  }

  return res;
}
    a63c:	c9 01       	movw	r24, r18
    a63e:	60 96       	adiw	r28, 0x10	; 16
    a640:	e5 e0       	ldi	r30, 0x05	; 5
    a642:	0c 94 cc 57 	jmp	0xaf98	; 0xaf98 <__epilogue_restores__+0x1a>

0000a646 <disk_timerproc>:
{
  static BYTE pv;
  BYTE n, s;


  n = Timer1;            /* 100Hz decrement timer */
    a646:	80 91 6d 25 	lds	r24, 0x256D
  if (n) Timer1 = --n;
    a64a:	88 23       	and	r24, r24
    a64c:	19 f0       	breq	.+6      	; 0xa654 <disk_timerproc+0xe>
    a64e:	81 50       	subi	r24, 0x01	; 1
    a650:	80 93 6d 25 	sts	0x256D, r24
  n = Timer2;
    a654:	80 91 6e 25 	lds	r24, 0x256E
  if (n) Timer2 = --n;
    a658:	88 23       	and	r24, r24
    a65a:	19 f0       	breq	.+6      	; 0xa662 <disk_timerproc+0x1c>
    a65c:	81 50       	subi	r24, 0x01	; 1
    a65e:	80 93 6e 25 	sts	0x256E, r24

  n = pv;
    a662:	90 91 6c 25 	lds	r25, 0x256C
  pv = SOCKPORT & (SOCKWP | SOCKINS);  /* Sample socket switch */
    a666:	80 91 e8 06 	lds	r24, 0x06E8
    a66a:	83 70       	andi	r24, 0x03	; 3
    a66c:	80 93 6c 25 	sts	0x256C, r24

  if (n == pv) {          /* Have contacts stabled? */
    a670:	98 17       	cp	r25, r24
    a672:	71 f4       	brne	.+28     	; 0xa690 <disk_timerproc+0x4a>
    s = Stat;
    a674:	80 91 d9 24 	lds	r24, 0x24D9

    if (pv & SOCKWP)      /* WP is H (write protected) */
    a678:	90 ff       	sbrs	r25, 0
    a67a:	02 c0       	rjmp	.+4      	; 0xa680 <disk_timerproc+0x3a>
      s |= STA_PROTECT;
    a67c:	84 60       	ori	r24, 0x04	; 4
    a67e:	01 c0       	rjmp	.+2      	; 0xa682 <disk_timerproc+0x3c>
    else            /* WP is L (write enabled) */
      s &= ~STA_PROTECT;
    a680:	8b 7f       	andi	r24, 0xFB	; 251

    if (pv & SOCKINS)      /* INS = H (Socket empty) */
    a682:	91 ff       	sbrs	r25, 1
    a684:	02 c0       	rjmp	.+4      	; 0xa68a <disk_timerproc+0x44>
      s |= (STA_NODISK | STA_NOINIT);
    a686:	83 60       	ori	r24, 0x03	; 3
    a688:	01 c0       	rjmp	.+2      	; 0xa68c <disk_timerproc+0x46>
    else            /* INS = L (Card inserted) */
      s &= ~STA_NODISK;
    a68a:	8d 7f       	andi	r24, 0xFD	; 253

    Stat = s;
    a68c:	80 93 d9 24 	sts	0x24D9, r24
    a690:	08 95       	ret

0000a692 <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    a692:	1f 92       	push	r1
    a694:	0f 92       	push	r0
    a696:	0f b6       	in	r0, 0x3f	; 63
    a698:	0f 92       	push	r0
    a69a:	08 b6       	in	r0, 0x38	; 56
    a69c:	0f 92       	push	r0
    a69e:	09 b6       	in	r0, 0x39	; 57
    a6a0:	0f 92       	push	r0
    a6a2:	0b b6       	in	r0, 0x3b	; 59
    a6a4:	0f 92       	push	r0
    a6a6:	11 24       	eor	r1, r1
    a6a8:	18 be       	out	0x38, r1	; 56
    a6aa:	19 be       	out	0x39, r1	; 57
    a6ac:	1b be       	out	0x3b, r1	; 59
    a6ae:	2f 93       	push	r18
    a6b0:	3f 93       	push	r19
    a6b2:	4f 93       	push	r20
    a6b4:	5f 93       	push	r21
    a6b6:	6f 93       	push	r22
    a6b8:	7f 93       	push	r23
    a6ba:	8f 93       	push	r24
    a6bc:	9f 93       	push	r25
    a6be:	af 93       	push	r26
    a6c0:	bf 93       	push	r27
    a6c2:	ef 93       	push	r30
    a6c4:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    a6c6:	0e 94 23 53 	call	0xa646	; 0xa646 <disk_timerproc>
}
    a6ca:	ff 91       	pop	r31
    a6cc:	ef 91       	pop	r30
    a6ce:	bf 91       	pop	r27
    a6d0:	af 91       	pop	r26
    a6d2:	9f 91       	pop	r25
    a6d4:	8f 91       	pop	r24
    a6d6:	7f 91       	pop	r23
    a6d8:	6f 91       	pop	r22
    a6da:	5f 91       	pop	r21
    a6dc:	4f 91       	pop	r20
    a6de:	3f 91       	pop	r19
    a6e0:	2f 91       	pop	r18
    a6e2:	0f 90       	pop	r0
    a6e4:	0b be       	out	0x3b, r0	; 59
    a6e6:	0f 90       	pop	r0
    a6e8:	09 be       	out	0x39, r0	; 57
    a6ea:	0f 90       	pop	r0
    a6ec:	08 be       	out	0x38, r0	; 56
    a6ee:	0f 90       	pop	r0
    a6f0:	0f be       	out	0x3f, r0	; 63
    a6f2:	0f 90       	pop	r0
    a6f4:	1f 90       	pop	r1
    a6f6:	18 95       	reti

0000a6f8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    a6f8:	a4 e0       	ldi	r26, 0x04	; 4
    a6fa:	b0 e0       	ldi	r27, 0x00	; 0
    a6fc:	e2 e8       	ldi	r30, 0x82	; 130
    a6fe:	f3 e5       	ldi	r31, 0x53	; 83
    a700:	0c 94 af 57 	jmp	0xaf5e	; 0xaf5e <__prologue_saves__+0x18>
  BYTE n, cmd, ty, ocr[4];


  if (drv) return STA_NOINIT;      /* Supports only single drive */
    a704:	88 23       	and	r24, r24
    a706:	11 f0       	breq	.+4      	; 0xa70c <disk_initialize+0x14>
    a708:	81 e0       	ldi	r24, 0x01	; 1
    a70a:	d8 c0       	rjmp	.+432    	; 0xa8bc <disk_initialize+0x1c4>
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */
    a70c:	80 91 d9 24 	lds	r24, 0x24D9
    a710:	81 fd       	sbrc	r24, 1
    a712:	d2 c0       	rjmp	.+420    	; 0xa8b8 <disk_initialize+0x1c0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a714:	83 e0       	ldi	r24, 0x03	; 3
    a716:	80 93 6d 25 	sts	0x256D, r24
    a71a:	80 91 6d 25 	lds	r24, 0x256D
    a71e:	88 23       	and	r24, r24
    a720:	e1 f7       	brne	.-8      	; 0xa71a <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a722:	13 e5       	ldi	r17, 0x53	; 83
    a724:	10 93 c0 0a 	sts	0x0AC0, r17

  if (drv) return STA_NOINIT;      /* Supports only single drive */
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
    a728:	81 e4       	ldi	r24, 0x41	; 65
    a72a:	90 e0       	ldi	r25, 0x00	; 0
    a72c:	64 e0       	ldi	r22, 0x04	; 4
    a72e:	0e 94 49 20 	call	0x4092	; 0x4092 <CCPWrite>
  FCLK_SLOW();
    a732:	10 93 c0 0a 	sts	0x0AC0, r17
    a736:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a738:	e0 ec       	ldi	r30, 0xC0	; 192
    a73a:	fa e0       	ldi	r31, 0x0A	; 10
    a73c:	2f ef       	ldi	r18, 0xFF	; 255
    a73e:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a740:	80 91 c2 0a 	lds	r24, 0x0AC2
    a744:	87 ff       	sbrs	r24, 7
    a746:	fc cf       	rjmp	.-8      	; 0xa740 <disk_initialize+0x48>
  return SPIE.DATA;
    a748:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
  FCLK_SLOW();
  for (n = 10; n; n--) rcvr_spi();  /* 80 dummy clocks */
    a74c:	91 50       	subi	r25, 0x01	; 1
    a74e:	b9 f7       	brne	.-18     	; 0xa73e <disk_initialize+0x46>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    a750:	80 e4       	ldi	r24, 0x40	; 64
    a752:	40 e0       	ldi	r20, 0x00	; 0
    a754:	50 e0       	ldi	r21, 0x00	; 0
    a756:	60 e0       	ldi	r22, 0x00	; 0
    a758:	70 e0       	ldi	r23, 0x00	; 0
    a75a:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a75e:	81 30       	cpi	r24, 0x01	; 1
    a760:	09 f0       	breq	.+2      	; 0xa764 <disk_initialize+0x6c>
    a762:	87 c0       	rjmp	.+270    	; 0xa872 <disk_initialize+0x17a>
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    a764:	84 e6       	ldi	r24, 0x64	; 100
    a766:	80 93 6d 25 	sts	0x256D, r24
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
    a76a:	88 e4       	ldi	r24, 0x48	; 72
    a76c:	4a ea       	ldi	r20, 0xAA	; 170
    a76e:	51 e0       	ldi	r21, 0x01	; 1
    a770:	60 e0       	ldi	r22, 0x00	; 0
    a772:	70 e0       	ldi	r23, 0x00	; 0
    a774:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a778:	81 30       	cpi	r24, 0x01	; 1
    a77a:	09 f0       	breq	.+2      	; 0xa77e <disk_initialize+0x86>
    a77c:	53 c0       	rjmp	.+166    	; 0xa824 <disk_initialize+0x12c>
    a77e:	7e 01       	movw	r14, r28
    a780:	08 94       	sec
    a782:	e1 1c       	adc	r14, r1
    a784:	f1 1c       	adc	r15, r1
    a786:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a788:	e0 ec       	ldi	r30, 0xC0	; 192
    a78a:	fa e0       	ldi	r31, 0x0A	; 10
    a78c:	9f ef       	ldi	r25, 0xFF	; 255

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    a78e:	9e 01       	movw	r18, r28
    a790:	2b 5f       	subi	r18, 0xFB	; 251
    a792:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a794:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a796:	80 91 c2 0a 	lds	r24, 0x0AC2
    a79a:	87 ff       	sbrs	r24, 7
    a79c:	fc cf       	rjmp	.-8      	; 0xa796 <disk_initialize+0x9e>
  return SPIE.DATA;
    a79e:	80 91 c3 0a 	lds	r24, 0x0AC3

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    a7a2:	d8 01       	movw	r26, r16
    a7a4:	8d 93       	st	X+, r24
    a7a6:	8d 01       	movw	r16, r26
    a7a8:	a2 17       	cp	r26, r18
    a7aa:	b3 07       	cpc	r27, r19
    a7ac:	99 f7       	brne	.-26     	; 0xa794 <disk_initialize+0x9c>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
    a7ae:	8b 81       	ldd	r24, Y+3	; 0x03
    a7b0:	81 30       	cpi	r24, 0x01	; 1
    a7b2:	09 f0       	breq	.+2      	; 0xa7b6 <disk_initialize+0xbe>
    a7b4:	5e c0       	rjmp	.+188    	; 0xa872 <disk_initialize+0x17a>
    a7b6:	8c 81       	ldd	r24, Y+4	; 0x04
    a7b8:	8a 3a       	cpi	r24, 0xAA	; 170
    a7ba:	09 f0       	breq	.+2      	; 0xa7be <disk_initialize+0xc6>
    a7bc:	5a c0       	rjmp	.+180    	; 0xa872 <disk_initialize+0x17a>
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    a7be:	80 91 6d 25 	lds	r24, 0x256D
    a7c2:	88 23       	and	r24, r24
    a7c4:	49 f0       	breq	.+18     	; 0xa7d8 <disk_initialize+0xe0>
    a7c6:	89 ee       	ldi	r24, 0xE9	; 233
    a7c8:	40 e0       	ldi	r20, 0x00	; 0
    a7ca:	50 e0       	ldi	r21, 0x00	; 0
    a7cc:	60 e0       	ldi	r22, 0x00	; 0
    a7ce:	70 e4       	ldi	r23, 0x40	; 64
    a7d0:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a7d4:	88 23       	and	r24, r24
    a7d6:	99 f7       	brne	.-26     	; 0xa7be <disk_initialize+0xc6>
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
    a7d8:	80 91 6d 25 	lds	r24, 0x256D
    a7dc:	88 23       	and	r24, r24
    a7de:	09 f4       	brne	.+2      	; 0xa7e2 <disk_initialize+0xea>
    a7e0:	48 c0       	rjmp	.+144    	; 0xa872 <disk_initialize+0x17a>
    a7e2:	8a e7       	ldi	r24, 0x7A	; 122
    a7e4:	40 e0       	ldi	r20, 0x00	; 0
    a7e6:	50 e0       	ldi	r21, 0x00	; 0
    a7e8:	60 e0       	ldi	r22, 0x00	; 0
    a7ea:	70 e0       	ldi	r23, 0x00	; 0
    a7ec:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a7f0:	88 23       	and	r24, r24
    a7f2:	09 f0       	breq	.+2      	; 0xa7f6 <disk_initialize+0xfe>
    a7f4:	3e c0       	rjmp	.+124    	; 0xa872 <disk_initialize+0x17a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a7f6:	e0 ec       	ldi	r30, 0xC0	; 192
    a7f8:	fa e0       	ldi	r31, 0x0A	; 10
    a7fa:	9f ef       	ldi	r25, 0xFF	; 255
    a7fc:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a7fe:	80 91 c2 0a 	lds	r24, 0x0AC2
    a802:	87 ff       	sbrs	r24, 7
    a804:	fc cf       	rjmp	.-8      	; 0xa7fe <disk_initialize+0x106>
  return SPIE.DATA;
    a806:	80 91 c3 0a 	lds	r24, 0x0AC3
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
          for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    a80a:	d7 01       	movw	r26, r14
    a80c:	8d 93       	st	X+, r24
    a80e:	7d 01       	movw	r14, r26
    a810:	a0 17       	cp	r26, r16
    a812:	b1 07       	cpc	r27, r17
    a814:	99 f7       	brne	.-26     	; 0xa7fc <disk_initialize+0x104>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    a816:	89 81       	ldd	r24, Y+1	; 0x01
    a818:	86 fd       	sbrc	r24, 6
    a81a:	02 c0       	rjmp	.+4      	; 0xa820 <disk_initialize+0x128>
    a81c:	14 e0       	ldi	r17, 0x04	; 4
    a81e:	2a c0       	rjmp	.+84     	; 0xa874 <disk_initialize+0x17c>
    a820:	1c e0       	ldi	r17, 0x0C	; 12
    a822:	28 c0       	rjmp	.+80     	; 0xa874 <disk_initialize+0x17c>
        }
      }
    } else {              /* SDSC or MMC */
      if (send_cmd(ACMD41, 0) <= 1)   {
    a824:	89 ee       	ldi	r24, 0xE9	; 233
    a826:	40 e0       	ldi	r20, 0x00	; 0
    a828:	50 e0       	ldi	r21, 0x00	; 0
    a82a:	60 e0       	ldi	r22, 0x00	; 0
    a82c:	70 e0       	ldi	r23, 0x00	; 0
    a82e:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a832:	82 30       	cpi	r24, 0x02	; 2
    a834:	18 f0       	brcs	.+6      	; 0xa83c <disk_initialize+0x144>
    a836:	01 e4       	ldi	r16, 0x41	; 65
    a838:	11 e0       	ldi	r17, 0x01	; 1
    a83a:	02 c0       	rjmp	.+4      	; 0xa840 <disk_initialize+0x148>
    a83c:	09 ee       	ldi	r16, 0xE9	; 233
    a83e:	12 e0       	ldi	r17, 0x02	; 2
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      while (Timer1 && send_cmd(cmd, 0));      /* Wait for leaving idle state */
    a840:	80 91 6d 25 	lds	r24, 0x256D
    a844:	88 23       	and	r24, r24
    a846:	49 f0       	breq	.+18     	; 0xa85a <disk_initialize+0x162>
    a848:	80 2f       	mov	r24, r16
    a84a:	40 e0       	ldi	r20, 0x00	; 0
    a84c:	50 e0       	ldi	r21, 0x00	; 0
    a84e:	60 e0       	ldi	r22, 0x00	; 0
    a850:	70 e0       	ldi	r23, 0x00	; 0
    a852:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a856:	88 23       	and	r24, r24
    a858:	99 f7       	brne	.-26     	; 0xa840 <disk_initialize+0x148>
      if (!Timer1 || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    a85a:	80 91 6d 25 	lds	r24, 0x256D
    a85e:	88 23       	and	r24, r24
    a860:	41 f0       	breq	.+16     	; 0xa872 <disk_initialize+0x17a>
    a862:	80 e5       	ldi	r24, 0x50	; 80
    a864:	40 e0       	ldi	r20, 0x00	; 0
    a866:	52 e0       	ldi	r21, 0x02	; 2
    a868:	60 e0       	ldi	r22, 0x00	; 0
    a86a:	70 e0       	ldi	r23, 0x00	; 0
    a86c:	0e 94 03 50 	call	0xa006	; 0xa006 <send_cmd>
    a870:	81 11       	cpse	r24, r1
    a872:	10 e0       	ldi	r17, 0x00	; 0
        ty = 0;
    }
  }
  CardType = ty;
    a874:	10 93 6f 25 	sts	0x256F, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a878:	80 e1       	ldi	r24, 0x10	; 16
    a87a:	e0 e8       	ldi	r30, 0x80	; 128
    a87c:	f6 e0       	ldi	r31, 0x06	; 6
    a87e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a880:	8f ef       	ldi	r24, 0xFF	; 255
    a882:	e0 ec       	ldi	r30, 0xC0	; 192
    a884:	fa e0       	ldi	r31, 0x0A	; 10
    a886:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a888:	80 91 c2 0a 	lds	r24, 0x0AC2
    a88c:	87 ff       	sbrs	r24, 7
    a88e:	fc cf       	rjmp	.-8      	; 0xa888 <disk_initialize+0x190>
  return SPIE.DATA;
    a890:	80 91 c3 0a 	lds	r24, 0x0AC3
    }
  }
  CardType = ty;
  release_spi();

  if (ty) {      /* Initialization succeded */
    a894:	11 23       	and	r17, r17
    a896:	49 f0       	breq	.+18     	; 0xa8aa <disk_initialize+0x1b2>
    Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT */
    a898:	80 91 d9 24 	lds	r24, 0x24D9
    a89c:	8e 7f       	andi	r24, 0xFE	; 254
    a89e:	80 93 d9 24 	sts	0x24D9, r24
    FCLK_FAST();
    a8a2:	80 ed       	ldi	r24, 0xD0	; 208
    a8a4:	80 93 c0 0a 	sts	0x0AC0, r24
    a8a8:	02 c0       	rjmp	.+4      	; 0xa8ae <disk_initialize+0x1b6>
  } else {      /* Initialization failed */
    power_off();
    a8aa:	0e 94 2b 4f 	call	0x9e56	; 0x9e56 <power_off>
  }

  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
    a8ae:	81 e4       	ldi	r24, 0x41	; 65
    a8b0:	90 e0       	ldi	r25, 0x00	; 0
    a8b2:	60 e0       	ldi	r22, 0x00	; 0
    a8b4:	0e 94 49 20 	call	0x4092	; 0x4092 <CCPWrite>
  return Stat;
    a8b8:	80 91 d9 24 	lds	r24, 0x24D9
}
    a8bc:	24 96       	adiw	r28, 0x04	; 4
    a8be:	e6 e0       	ldi	r30, 0x06	; 6
    a8c0:	0c 94 cb 57 	jmp	0xaf96	; 0xaf96 <__epilogue_restores__+0x18>

0000a8c4 <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    a8c4:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    a8c6:	8e e1       	ldi	r24, 0x1E	; 30
    a8c8:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    a8ca:	8b e3       	ldi	r24, 0x3B	; 59
    a8cc:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    a8ce:	8b e0       	ldi	r24, 0x0B	; 11
    a8d0:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    a8d2:	83 e0       	ldi	r24, 0x03	; 3
    a8d4:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    a8d6:	89 e0       	ldi	r24, 0x09	; 9
    a8d8:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    a8da:	89 ed       	ldi	r24, 0xD9	; 217
    a8dc:	97 e0       	ldi	r25, 0x07	; 7
    a8de:	80 83       	st	Z, r24
    a8e0:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    a8e2:	81 e0       	ldi	r24, 0x01	; 1
    a8e4:	90 e0       	ldi	r25, 0x00	; 0
    a8e6:	08 95       	ret

0000a8e8 <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    a8e8:	81 e0       	ldi	r24, 0x01	; 1
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	08 95       	ret

0000a8ee <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    a8ee:	81 e0       	ldi	r24, 0x01	; 1
    a8f0:	90 e0       	ldi	r25, 0x00	; 0
    a8f2:	08 95       	ret

0000a8f4 <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    a8f4:	6f e6       	ldi	r22, 0x6F	; 111
    a8f6:	7f e5       	ldi	r23, 0x5F	; 95
    a8f8:	83 e2       	ldi	r24, 0x23	; 35
    a8fa:	9b e3       	ldi	r25, 0x3B	; 59
    a8fc:	08 95       	ret

0000a8fe <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    a8fe:	1f 92       	push	r1
    a900:	0f 92       	push	r0
    a902:	0f b6       	in	r0, 0x3f	; 63
    a904:	0f 92       	push	r0
    a906:	08 b6       	in	r0, 0x38	; 56
    a908:	0f 92       	push	r0
    a90a:	09 b6       	in	r0, 0x39	; 57
    a90c:	0f 92       	push	r0
    a90e:	11 24       	eor	r1, r1
    a910:	18 be       	out	0x38, r1	; 56
    a912:	19 be       	out	0x39, r1	; 57
    a914:	8f 93       	push	r24
    a916:	9f 93       	push	r25
    a918:	af 93       	push	r26
    a91a:	bf 93       	push	r27
	ticks++;
    a91c:	80 91 70 25 	lds	r24, 0x2570
    a920:	90 91 71 25 	lds	r25, 0x2571
    a924:	a0 91 72 25 	lds	r26, 0x2572
    a928:	b0 91 73 25 	lds	r27, 0x2573
    a92c:	01 96       	adiw	r24, 0x01	; 1
    a92e:	a1 1d       	adc	r26, r1
    a930:	b1 1d       	adc	r27, r1
    a932:	80 93 70 25 	sts	0x2570, r24
    a936:	90 93 71 25 	sts	0x2571, r25
    a93a:	a0 93 72 25 	sts	0x2572, r26
    a93e:	b0 93 73 25 	sts	0x2573, r27
}
    a942:	bf 91       	pop	r27
    a944:	af 91       	pop	r26
    a946:	9f 91       	pop	r25
    a948:	8f 91       	pop	r24
    a94a:	0f 90       	pop	r0
    a94c:	09 be       	out	0x39, r0	; 57
    a94e:	0f 90       	pop	r0
    a950:	08 be       	out	0x38, r0	; 56
    a952:	0f 90       	pop	r0
    a954:	0f be       	out	0x3f, r0	; 63
    a956:	0f 90       	pop	r0
    a958:	1f 90       	pop	r1
    a95a:	18 95       	reti

0000a95c <timer_init>:


void timer_init(void)
{	
	ticks=0;
    a95c:	10 92 70 25 	sts	0x2570, r1
    a960:	10 92 71 25 	sts	0x2571, r1
    a964:	10 92 72 25 	sts	0x2572, r1
    a968:	10 92 73 25 	sts	0x2573, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    a96c:	e0 e0       	ldi	r30, 0x00	; 0
    a96e:	fb e0       	ldi	r31, 0x0B	; 11
    a970:	84 e0       	ldi	r24, 0x04	; 4
    a972:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    a974:	8f e9       	ldi	r24, 0x9F	; 159
    a976:	9f e0       	ldi	r25, 0x0F	; 15
    a978:	86 a3       	std	Z+38, r24	; 0x26
    a97a:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    a97c:	82 e0       	ldi	r24, 0x02	; 2
    a97e:	86 83       	std	Z+6, r24	; 0x06
}
    a980:	08 95       	ret

0000a982 <Wait>:

void Wait(uint16_t delay)
{
    a982:	ef 92       	push	r14
    a984:	ff 92       	push	r15
    a986:	0f 93       	push	r16
    a988:	1f 93       	push	r17
	uint32_t temp=ticks;
    a98a:	e0 90 70 25 	lds	r14, 0x2570
    a98e:	f0 90 71 25 	lds	r15, 0x2571
    a992:	00 91 72 25 	lds	r16, 0x2572
    a996:	10 91 73 25 	lds	r17, 0x2573

	while(ticks - temp < delay);
    a99a:	9c 01       	movw	r18, r24
    a99c:	40 e0       	ldi	r20, 0x00	; 0
    a99e:	50 e0       	ldi	r21, 0x00	; 0
    a9a0:	80 91 70 25 	lds	r24, 0x2570
    a9a4:	90 91 71 25 	lds	r25, 0x2571
    a9a8:	a0 91 72 25 	lds	r26, 0x2572
    a9ac:	b0 91 73 25 	lds	r27, 0x2573
    a9b0:	8e 19       	sub	r24, r14
    a9b2:	9f 09       	sbc	r25, r15
    a9b4:	a0 0b       	sbc	r26, r16
    a9b6:	b1 0b       	sbc	r27, r17
    a9b8:	82 17       	cp	r24, r18
    a9ba:	93 07       	cpc	r25, r19
    a9bc:	a4 07       	cpc	r26, r20
    a9be:	b5 07       	cpc	r27, r21
    a9c0:	78 f3       	brcs	.-34     	; 0xa9a0 <Wait+0x1e>
}
    a9c2:	1f 91       	pop	r17
    a9c4:	0f 91       	pop	r16
    a9c6:	ff 90       	pop	r15
    a9c8:	ef 90       	pop	r14
    a9ca:	08 95       	ret

0000a9cc <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    a9cc:	e0 e4       	ldi	r30, 0x40	; 64
    a9ce:	fb e0       	ldi	r31, 0x0B	; 11
    a9d0:	85 e0       	ldi	r24, 0x05	; 5
    a9d2:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    a9d4:	10 a2       	std	Z+32, r1	; 0x20
    a9d6:	11 a2       	std	Z+33, r1	; 0x21
}
    a9d8:	08 95       	ret

0000a9da <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    a9da:	e0 e4       	ldi	r30, 0x40	; 64
    a9dc:	fb e0       	ldi	r31, 0x0B	; 11
    a9de:	20 a1       	ldd	r18, Z+32	; 0x20
    a9e0:	31 a1       	ldd	r19, Z+33	; 0x21
    a9e2:	22 0f       	add	r18, r18
    a9e4:	33 1f       	adc	r19, r19
	return del_t;
}	
    a9e6:	c9 01       	movw	r24, r18
    a9e8:	08 95       	ret

0000a9ea <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    a9ea:	10 92 70 25 	sts	0x2570, r1
    a9ee:	10 92 71 25 	sts	0x2571, r1
    a9f2:	10 92 72 25 	sts	0x2572, r1
    a9f6:	10 92 73 25 	sts	0x2573, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    a9fa:	e0 e0       	ldi	r30, 0x00	; 0
    a9fc:	fb e0       	ldi	r31, 0x0B	; 11
    a9fe:	84 e0       	ldi	r24, 0x04	; 4
    aa00:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    aa02:	8f e9       	ldi	r24, 0x9F	; 159
    aa04:	9f e0       	ldi	r25, 0x0F	; 15
    aa06:	86 a3       	std	Z+38, r24	; 0x26
    aa08:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    aa0a:	82 e0       	ldi	r24, 0x02	; 2
    aa0c:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    aa0e:	10 a2       	std	Z+32, r1	; 0x20
    aa10:	11 a2       	std	Z+33, r1	; 0x21
}
    aa12:	08 95       	ret

0000aa14 <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    aa14:	20 91 70 25 	lds	r18, 0x2570
    aa18:	30 91 71 25 	lds	r19, 0x2571
    aa1c:	40 91 72 25 	lds	r20, 0x2572
    aa20:	50 91 73 25 	lds	r21, 0x2573
	return del_t;
}	
    aa24:	b9 01       	movw	r22, r18
    aa26:	ca 01       	movw	r24, r20
    aa28:	08 95       	ret

0000aa2a <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    aa2a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aa2c:	e0 ec       	ldi	r30, 0xC0	; 192
    aa2e:	f1 e0       	ldi	r31, 0x01	; 1
    aa30:	80 91 cf 01 	lds	r24, 0x01CF
    aa34:	87 fd       	sbrc	r24, 7
    aa36:	fa cf       	rjmp	.-12     	; 0xaa2c <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    aa38:	26 2f       	mov	r18, r22
    aa3a:	30 e0       	ldi	r19, 0x00	; 0
    aa3c:	2f 71       	andi	r18, 0x1F	; 31
    aa3e:	30 70       	andi	r19, 0x00	; 0
    aa40:	89 2f       	mov	r24, r25
    aa42:	90 e0       	ldi	r25, 0x00	; 0
    aa44:	45 e0       	ldi	r20, 0x05	; 5
    aa46:	88 0f       	add	r24, r24
    aa48:	99 1f       	adc	r25, r25
    aa4a:	4a 95       	dec	r20
    aa4c:	e1 f7       	brne	.-8      	; 0xaa46 <EEPROM_ReadByte+0x1c>
    aa4e:	28 2b       	or	r18, r24
    aa50:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    aa52:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aa56:	83 2f       	mov	r24, r19
    aa58:	8f 71       	andi	r24, 0x1F	; 31
    aa5a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    aa5c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    aa5e:	86 e0       	ldi	r24, 0x06	; 6
    aa60:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aa62:	eb ec       	ldi	r30, 0xCB	; 203
    aa64:	f1 e0       	ldi	r31, 0x01	; 1
    aa66:	21 e0       	ldi	r18, 0x01	; 1
    aa68:	30 e0       	ldi	r19, 0x00	; 0
    aa6a:	88 ed       	ldi	r24, 0xD8	; 216
    aa6c:	90 e0       	ldi	r25, 0x00	; 0
    aa6e:	84 bf       	out	0x34, r24	; 52
    aa70:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    aa72:	80 91 c4 01 	lds	r24, 0x01C4
}
    aa76:	08 95       	ret

0000aa78 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aa78:	80 91 cf 01 	lds	r24, 0x01CF
    aa7c:	87 fd       	sbrc	r24, 7
    aa7e:	fc cf       	rjmp	.-8      	; 0xaa78 <EEPROM_WaitForNVM>
}
    aa80:	08 95       	ret

0000aa82 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aa82:	80 91 cf 01 	lds	r24, 0x01CF
    aa86:	87 fd       	sbrc	r24, 7
    aa88:	fc cf       	rjmp	.-8      	; 0xaa82 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    aa8a:	80 91 cf 01 	lds	r24, 0x01CF
    aa8e:	81 ff       	sbrs	r24, 1
    aa90:	0c c0       	rjmp	.+24     	; 0xaaaa <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    aa92:	86 e3       	ldi	r24, 0x36	; 54
    aa94:	e0 ec       	ldi	r30, 0xC0	; 192
    aa96:	f1 e0       	ldi	r31, 0x01	; 1
    aa98:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aa9a:	eb ec       	ldi	r30, 0xCB	; 203
    aa9c:	f1 e0       	ldi	r31, 0x01	; 1
    aa9e:	21 e0       	ldi	r18, 0x01	; 1
    aaa0:	30 e0       	ldi	r19, 0x00	; 0
    aaa2:	88 ed       	ldi	r24, 0xD8	; 216
    aaa4:	90 e0       	ldi	r25, 0x00	; 0
    aaa6:	84 bf       	out	0x34, r24	; 52
    aaa8:	20 83       	st	Z, r18
    aaaa:	08 95       	ret

0000aaac <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    aaac:	df 92       	push	r13
    aaae:	ef 92       	push	r14
    aab0:	ff 92       	push	r15
    aab2:	0f 93       	push	r16
    aab4:	1f 93       	push	r17
    aab6:	e8 2e       	mov	r14, r24
    aab8:	06 2f       	mov	r16, r22
    aaba:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    aabc:	0e 94 41 55 	call	0xaa82	; 0xaa82 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    aac0:	e0 ec       	ldi	r30, 0xC0	; 192
    aac2:	f1 e0       	ldi	r31, 0x01	; 1
    aac4:	83 e3       	ldi	r24, 0x33	; 51
    aac6:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    aac8:	10 e0       	ldi	r17, 0x00	; 0
    aaca:	0f 71       	andi	r16, 0x1F	; 31
    aacc:	10 70       	andi	r17, 0x00	; 0
    aace:	ff 24       	eor	r15, r15
    aad0:	55 e0       	ldi	r21, 0x05	; 5
    aad2:	ee 0c       	add	r14, r14
    aad4:	ff 1c       	adc	r15, r15
    aad6:	5a 95       	dec	r21
    aad8:	e1 f7       	brne	.-8      	; 0xaad2 <EEPROM_WriteByte+0x26>
    aada:	0e 29       	or	r16, r14
    aadc:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    aade:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aae0:	81 2f       	mov	r24, r17
    aae2:	8f 71       	andi	r24, 0x1F	; 31
    aae4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    aae6:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    aae8:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    aaea:	85 e3       	ldi	r24, 0x35	; 53
    aaec:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aaee:	eb ec       	ldi	r30, 0xCB	; 203
    aaf0:	f1 e0       	ldi	r31, 0x01	; 1
    aaf2:	21 e0       	ldi	r18, 0x01	; 1
    aaf4:	30 e0       	ldi	r19, 0x00	; 0
    aaf6:	88 ed       	ldi	r24, 0xD8	; 216
    aaf8:	90 e0       	ldi	r25, 0x00	; 0
    aafa:	84 bf       	out	0x34, r24	; 52
    aafc:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    aafe:	1f 91       	pop	r17
    ab00:	0f 91       	pop	r16
    ab02:	ff 90       	pop	r15
    ab04:	ef 90       	pop	r14
    ab06:	df 90       	pop	r13
    ab08:	08 95       	ret

0000ab0a <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    ab0a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab0c:	e0 ec       	ldi	r30, 0xC0	; 192
    ab0e:	f1 e0       	ldi	r31, 0x01	; 1
    ab10:	80 91 cf 01 	lds	r24, 0x01CF
    ab14:	87 fd       	sbrc	r24, 7
    ab16:	fa cf       	rjmp	.-12     	; 0xab0c <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ab18:	83 e3       	ldi	r24, 0x33	; 51
    ab1a:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    ab1c:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    ab20:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ab22:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    ab24:	64 83       	std	Z+4, r22	; 0x04
}
    ab26:	08 95       	ret

0000ab28 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    ab28:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab2a:	e0 ec       	ldi	r30, 0xC0	; 192
    ab2c:	f1 e0       	ldi	r31, 0x01	; 1
    ab2e:	80 91 cf 01 	lds	r24, 0x01CF
    ab32:	87 fd       	sbrc	r24, 7
    ab34:	fa cf       	rjmp	.-12     	; 0xab2a <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ab36:	83 e3       	ldi	r24, 0x33	; 51
    ab38:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    ab3a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ab3c:	12 82       	std	Z+2, r1	; 0x02
    ab3e:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    ab40:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    ab44:	8d 91       	ld	r24, X+
    ab46:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    ab48:	9f 5f       	subi	r25, 0xFF	; 255
    ab4a:	90 32       	cpi	r25, 0x20	; 32
    ab4c:	c9 f7       	brne	.-14     	; 0xab40 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    ab4e:	08 95       	ret

0000ab50 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    ab50:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab52:	e0 ec       	ldi	r30, 0xC0	; 192
    ab54:	f1 e0       	ldi	r31, 0x01	; 1
    ab56:	80 91 cf 01 	lds	r24, 0x01CF
    ab5a:	87 fd       	sbrc	r24, 7
    ab5c:	fa cf       	rjmp	.-12     	; 0xab52 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    ab5e:	89 2f       	mov	r24, r25
    ab60:	90 e0       	ldi	r25, 0x00	; 0
    ab62:	65 e0       	ldi	r22, 0x05	; 5
    ab64:	88 0f       	add	r24, r24
    ab66:	99 1f       	adc	r25, r25
    ab68:	6a 95       	dec	r22
    ab6a:	e1 f7       	brne	.-8      	; 0xab64 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    ab6c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    ab70:	89 2f       	mov	r24, r25
    ab72:	8f 71       	andi	r24, 0x1F	; 31
    ab74:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ab76:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    ab78:	85 e3       	ldi	r24, 0x35	; 53
    ab7a:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ab7c:	eb ec       	ldi	r30, 0xCB	; 203
    ab7e:	f1 e0       	ldi	r31, 0x01	; 1
    ab80:	21 e0       	ldi	r18, 0x01	; 1
    ab82:	30 e0       	ldi	r19, 0x00	; 0
    ab84:	88 ed       	ldi	r24, 0xD8	; 216
    ab86:	90 e0       	ldi	r25, 0x00	; 0
    ab88:	84 bf       	out	0x34, r24	; 52
    ab8a:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    ab8c:	08 95       	ret

0000ab8e <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    ab8e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ab90:	e0 ec       	ldi	r30, 0xC0	; 192
    ab92:	f1 e0       	ldi	r31, 0x01	; 1
    ab94:	80 91 cf 01 	lds	r24, 0x01CF
    ab98:	87 fd       	sbrc	r24, 7
    ab9a:	fa cf       	rjmp	.-12     	; 0xab90 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    ab9c:	89 2f       	mov	r24, r25
    ab9e:	90 e0       	ldi	r25, 0x00	; 0
    aba0:	75 e0       	ldi	r23, 0x05	; 5
    aba2:	88 0f       	add	r24, r24
    aba4:	99 1f       	adc	r25, r25
    aba6:	7a 95       	dec	r23
    aba8:	e1 f7       	brne	.-8      	; 0xaba2 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    abaa:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    abae:	89 2f       	mov	r24, r25
    abb0:	8f 71       	andi	r24, 0x1F	; 31
    abb2:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    abb4:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    abb6:	82 e3       	ldi	r24, 0x32	; 50
    abb8:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    abba:	eb ec       	ldi	r30, 0xCB	; 203
    abbc:	f1 e0       	ldi	r31, 0x01	; 1
    abbe:	21 e0       	ldi	r18, 0x01	; 1
    abc0:	30 e0       	ldi	r19, 0x00	; 0
    abc2:	88 ed       	ldi	r24, 0xD8	; 216
    abc4:	90 e0       	ldi	r25, 0x00	; 0
    abc6:	84 bf       	out	0x34, r24	; 52
    abc8:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    abca:	08 95       	ret

0000abcc <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    abcc:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    abce:	e0 ec       	ldi	r30, 0xC0	; 192
    abd0:	f1 e0       	ldi	r31, 0x01	; 1
    abd2:	80 91 cf 01 	lds	r24, 0x01CF
    abd6:	87 fd       	sbrc	r24, 7
    abd8:	fa cf       	rjmp	.-12     	; 0xabce <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    abda:	89 2f       	mov	r24, r25
    abdc:	90 e0       	ldi	r25, 0x00	; 0
    abde:	a5 e0       	ldi	r26, 0x05	; 5
    abe0:	88 0f       	add	r24, r24
    abe2:	99 1f       	adc	r25, r25
    abe4:	aa 95       	dec	r26
    abe6:	e1 f7       	brne	.-8      	; 0xabe0 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    abe8:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    abec:	89 2f       	mov	r24, r25
    abee:	8f 71       	andi	r24, 0x1F	; 31
    abf0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    abf2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    abf4:	84 e3       	ldi	r24, 0x34	; 52
    abf6:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    abf8:	eb ec       	ldi	r30, 0xCB	; 203
    abfa:	f1 e0       	ldi	r31, 0x01	; 1
    abfc:	21 e0       	ldi	r18, 0x01	; 1
    abfe:	30 e0       	ldi	r19, 0x00	; 0
    ac00:	88 ed       	ldi	r24, 0xD8	; 216
    ac02:	90 e0       	ldi	r25, 0x00	; 0
    ac04:	84 bf       	out	0x34, r24	; 52
    ac06:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    ac08:	08 95       	ret

0000ac0a <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ac0a:	80 91 cf 01 	lds	r24, 0x01CF
    ac0e:	87 fd       	sbrc	r24, 7
    ac10:	fc cf       	rjmp	.-8      	; 0xac0a <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    ac12:	80 e3       	ldi	r24, 0x30	; 48
    ac14:	e0 ec       	ldi	r30, 0xC0	; 192
    ac16:	f1 e0       	ldi	r31, 0x01	; 1
    ac18:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ac1a:	eb ec       	ldi	r30, 0xCB	; 203
    ac1c:	f1 e0       	ldi	r31, 0x01	; 1
    ac1e:	21 e0       	ldi	r18, 0x01	; 1
    ac20:	30 e0       	ldi	r19, 0x00	; 0
    ac22:	88 ed       	ldi	r24, 0xD8	; 216
    ac24:	90 e0       	ldi	r25, 0x00	; 0
    ac26:	84 bf       	out	0x34, r24	; 52
    ac28:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    ac2a:	08 95       	ret

0000ac2c <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    ac2c:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    ac2e:	19 f4       	brne	.+6      	; 0xac36 <xputc+0xa>
	ldi	r24, 13		;
    ac30:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    ac32:	01 d0       	rcall	.+2      	; 0xac36 <xputc+0xa>
	ldi	r24, 10		;/
    ac34:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    ac36:	ff 93       	push	r31
	push	ZL
    ac38:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    ac3a:	e0 91 74 25 	lds	r30, 0x2574
	lds	ZH, xfunc_out+1	;/
    ac3e:	f0 91 75 25 	lds	r31, 0x2575
	icall
    ac42:	09 95       	icall
	pop	ZL
    ac44:	ef 91       	pop	r30
	pop	ZH
    ac46:	ff 91       	pop	r31
	ret
    ac48:	08 95       	ret

0000ac4a <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    ac4a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    ac4c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    ac4e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    ac50:	11 f0       	breq	.+4      	; 0xac56 <xputs+0xc>
	rcall	xputc
    ac52:	ec df       	rcall	.-40     	; 0xac2c <xputc>
	rjmp	1b
    ac54:	fb cf       	rjmp	.-10     	; 0xac4c <xputs+0x2>
2:	ret
    ac56:	08 95       	ret

0000ac58 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    ac58:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    ac5a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    ac5c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    ac5e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    ac60:	0c c0       	rjmp	.+24     	; 0xac7a <xitoa+0x22>
	neg	r20		;
    ac62:	41 95       	neg	r20
	sbrs	r25, 7		;
    ac64:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    ac66:	09 c0       	rjmp	.+18     	; 0xac7a <xitoa+0x22>
	ldi	r30, '-'	;
    ac68:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    ac6a:	60 95       	com	r22
	com	r23		;
    ac6c:	70 95       	com	r23
	com	r24		;
    ac6e:	80 95       	com	r24
	com	r25		;
    ac70:	90 95       	com	r25
	adc	r22, r1		;
    ac72:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    ac74:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    ac76:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    ac78:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    ac7a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    ac7c:	02 c0       	rjmp	.+4      	; 0xac82 <xitoa+0x2a>
	neg	r18		;
    ac7e:	21 95       	neg	r18
	ldi	r19, '0'	;/
    ac80:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    ac82:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    ac84:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    ac86:	66 0f       	add	r22, r22
	rol	r23		;
    ac88:	77 1f       	adc	r23, r23
	rol	r24		;
    ac8a:	88 1f       	adc	r24, r24
	rol	r25		;
    ac8c:	99 1f       	adc	r25, r25
	rol	r26		;
    ac8e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    ac90:	a4 17       	cp	r26, r20
	brcs	3f		;
    ac92:	10 f0       	brcs	.+4      	; 0xac98 <xitoa+0x40>
	sub	r26, r20	;
    ac94:	a4 1b       	sub	r26, r20
	inc	r22		;
    ac96:	63 95       	inc	r22
3:	dec	r21		;
    ac98:	5a 95       	dec	r21
	brne	2b		;/
    ac9a:	a9 f7       	brne	.-22     	; 0xac86 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    ac9c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    ac9e:	08 f0       	brcs	.+2      	; 0xaca2 <xitoa+0x4a>
	subi	r26, -7		;
    aca0:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    aca2:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    aca4:	af 93       	push	r26
	inc	r31		;/
    aca6:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    aca8:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    acaa:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    acac:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    acae:	91 05       	cpc	r25, r1
	brne	1b		;/
    acb0:	41 f7       	brne	.-48     	; 0xac82 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    acb2:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    acb4:	11 f4       	brne	.+4      	; 0xacba <xitoa+0x62>
	push	r30		;
    acb6:	ef 93       	push	r30
	inc	r31		;/
    acb8:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    acba:	f2 17       	cp	r31, r18
	brcc	6f		;
    acbc:	18 f4       	brcc	.+6      	; 0xacc4 <xitoa+0x6c>
	push	r19		;
    acbe:	3f 93       	push	r19
	inc	r31		;
    acc0:	f3 95       	inc	r31
	rjmp	5b		;/
    acc2:	fb cf       	rjmp	.-10     	; 0xacba <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    acc4:	8f 91       	pop	r24
	rcall	xputc		;
    acc6:	b2 df       	rcall	.-156    	; 0xac2c <xputc>
	dec	r31		;
    acc8:	fa 95       	dec	r31
	brne	6b		;/
    acca:	e1 f7       	brne	.-8      	; 0xacc4 <xitoa+0x6c>

	ret
    accc:	08 95       	ret

0000acce <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    acce:	df 93       	push	r29
	push	YL
    acd0:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    acd2:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    acd4:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    acd6:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    acd8:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    acda:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    acdc:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    acde:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    ace0:	21 f0       	breq	.+8      	; 0xacea <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    ace2:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    ace4:	29 f0       	breq	.+10     	; 0xacf0 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    ace6:	a2 df       	rcall	.-188    	; 0xac2c <xputc>
	rjmp	0b		;/
    ace8:	f9 cf       	rjmp	.-14     	; 0xacdc <xprintf+0xe>
90:	pop	YL
    acea:	cf 91       	pop	r28
	pop	YH
    acec:	df 91       	pop	r29
	ret
    acee:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    acf0:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    acf2:	e8 94       	clt
	_LPMI	r21		;Get flags
    acf4:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    acf6:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    acf8:	b1 f3       	breq	.-20     	; 0xace6 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    acfa:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    acfc:	11 f4       	brne	.+4      	; 0xad02 <xprintf+0x34>
	set			;/
    acfe:	68 94       	set
22:	_LPMI	r21		;Get width
    ad00:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    ad02:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    ad04:	48 f4       	brcc	.+18     	; 0xad18 <xprintf+0x4a>
	subi	r21, '0'	;
    ad06:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    ad08:	80 f3       	brcs	.-32     	; 0xacea <xprintf+0x1c>
	lsl	r18		;
    ad0a:	22 0f       	add	r18, r18
	mov	r0, r18		;
    ad0c:	02 2e       	mov	r0, r18
	lsl	r18		;
    ad0e:	22 0f       	add	r18, r18
	lsl	r18		;
    ad10:	22 0f       	add	r18, r18
	add	r18, r0		;
    ad12:	20 0d       	add	r18, r0
	add	r18, r21	;
    ad14:	25 0f       	add	r18, r21
	rjmp	22b		;/
    ad16:	f4 cf       	rjmp	.-24     	; 0xad00 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    ad18:	0e f4       	brtc	.+2      	; 0xad1c <xprintf+0x4e>
	neg	r18		;
    ad1a:	21 95       	neg	r18
25:	ld	r24, Y+		;
    ad1c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    ad1e:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    ad20:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    ad22:	09 f3       	breq	.-62     	; 0xace6 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    ad24:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    ad26:	29 f1       	breq	.+74     	; 0xad72 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    ad28:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    ad2a:	59 f1       	breq	.+86     	; 0xad82 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    ad2c:	bc 01       	movw	r22, r24
	clr	r24		;
    ad2e:	88 27       	eor	r24, r24
	clr	r25		;
    ad30:	99 27       	eor	r25, r25
	clt			;/
    ad32:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    ad34:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    ad36:	21 f4       	brne	.+8      	; 0xad40 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    ad38:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    ad3a:	99 91       	ld	r25, Y+
	set			;
    ad3c:	68 94       	set
	_LPMI	r21		;/
    ad3e:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    ad40:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    ad42:	39 f4       	brne	.+14     	; 0xad52 <xprintf+0x84>
	ldi	r20, -10	;
    ad44:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    ad46:	7e f0       	brts	.+30     	; 0xad66 <xprintf+0x98>
	sbrs	r23, 7		;
    ad48:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    ad4a:	0d c0       	rjmp	.+26     	; 0xad66 <xprintf+0x98>
	ldi	r24, -1		;
    ad4c:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    ad4e:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    ad50:	0a c0       	rjmp	.+20     	; 0xad66 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    ad52:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    ad54:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    ad56:	39 f0       	breq	.+14     	; 0xad66 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    ad58:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    ad5a:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    ad5c:	21 f0       	breq	.+8      	; 0xad66 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    ad5e:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    ad60:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    ad62:	09 f0       	breq	.+2      	; 0xad66 <xprintf+0x98>
	rjmp	90b		;abort
    ad64:	c2 cf       	rjmp	.-124    	; 0xacea <xprintf+0x1c>
40:	push	ZH		;Output the value
    ad66:	ff 93       	push	r31
	push	ZL		;
    ad68:	ef 93       	push	r30
	rcall	xitoa		;
    ad6a:	76 df       	rcall	.-276    	; 0xac58 <xitoa>
42:	pop	ZL		;
    ad6c:	ef 91       	pop	r30
	pop	ZH		;
    ad6e:	ff 91       	pop	r31
	rjmp	0b		;/
    ad70:	b5 cf       	rjmp	.-150    	; 0xacdc <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    ad72:	ff 93       	push	r31
	push	ZL
    ad74:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    ad76:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    ad78:	81 91       	ld	r24, Z+
	cpi	r24, 0
    ad7a:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    ad7c:	b9 f3       	breq	.-18     	; 0xad6c <xprintf+0x9e>
	rcall	xputc
    ad7e:	56 df       	rcall	.-340    	; 0xac2c <xputc>
	rjmp	51b
    ad80:	fb cf       	rjmp	.-10     	; 0xad78 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    ad82:	ff 93       	push	r31
	push	ZL
    ad84:	ef 93       	push	r30
	rcall	xputs
    ad86:	61 df       	rcall	.-318    	; 0xac4a <xputs>
	rjmp	42b
    ad88:	f1 cf       	rjmp	.-30     	; 0xad6c <xprintf+0x9e>

0000ad8a <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    ad8a:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    ad8c:	dc 01       	movw	r26, r24
	ld	ZL, X+
    ad8e:	ed 91       	ld	r30, X+
	ld	ZH, X+
    ad90:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    ad92:	22 27       	eor	r18, r18
	clr	r19		;
    ad94:	33 27       	eor	r19, r19
	clr	r20		;
    ad96:	44 27       	eor	r20, r20
	clr	r21		;/
    ad98:	55 27       	eor	r21, r21
	clt			;T = 0;
    ad9a:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    ad9c:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    ad9e:	01 c0       	rjmp	.+2      	; 0xada2 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    ada0:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    ada2:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    ada4:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    ada6:	e1 f3       	breq	.-8      	; 0xada0 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    ada8:	a8 f1       	brcs	.+106    	; 0xae14 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    adaa:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    adac:	11 f4       	brne	.+4      	; 0xadb2 <xatoi+0x28>
	set			; continue;
    adae:	68 94       	set
	rjmp	40b		;}
    adb0:	f7 cf       	rjmp	.-18     	; 0xada0 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    adb2:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    adb4:	78 f5       	brcc	.+94     	; 0xae14 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    adb6:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    adb8:	68 f1       	brcs	.+90     	; 0xae14 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    adba:	71 f4       	brne	.+28     	; 0xadd8 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    adbc:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    adbe:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    adc0:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    adc2:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    adc4:	48 f1       	brcs	.+82     	; 0xae18 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    adc6:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    adc8:	11 f4       	brne	.+4      	; 0xadce <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    adca:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    adcc:	03 c0       	rjmp	.+6      	; 0xadd4 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    adce:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    add0:	19 f4       	brne	.+6      	; 0xadd8 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    add2:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    add4:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    add6:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    add8:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    adda:	f0 f0       	brcs	.+60     	; 0xae18 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    addc:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    adde:	08 f0       	brcs	.+2      	; 0xade2 <xatoi+0x58>
	subi	r22, 0x20	;/
    ade0:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    ade2:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    ade4:	b8 f0       	brcs	.+46     	; 0xae14 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    ade6:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    ade8:	18 f0       	brcs	.+6      	; 0xadf0 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    adea:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    adec:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    adee:	90 f0       	brcs	.+36     	; 0xae14 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    adf0:	69 17       	cp	r22, r25
	brcc	70f		;/
    adf2:	80 f4       	brcc	.+32     	; 0xae14 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    adf4:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    adf6:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    adf8:	08 f4       	brcc	.+2      	; 0xadfc <xatoi+0x72>
	add	r23, r25	;
    adfa:	79 0f       	add	r23, r25
62:	lsr	r23		;
    adfc:	76 95       	lsr	r23
	ror	r21		;
    adfe:	57 95       	ror	r21
	ror	r20		;
    ae00:	47 95       	ror	r20
	ror	r19		;
    ae02:	37 95       	ror	r19
	ror	r18		;
    ae04:	27 95       	ror	r18
	dec	r24		;
    ae06:	8a 95       	dec	r24
	brne	61b		;/
    ae08:	b9 f7       	brne	.-18     	; 0xadf8 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    ae0a:	26 0f       	add	r18, r22
	adc	r19, r24	;
    ae0c:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    ae0e:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    ae10:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    ae12:	e0 cf       	rjmp	.-64     	; 0xadd4 <xatoi+0x4a>

70:	ldi	r24, 0
    ae14:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    ae16:	01 c0       	rjmp	.+2      	; 0xae1a <xatoi+0x90>
80:	ldi	r24, 1
    ae18:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    ae1a:	4e f4       	brtc	.+18     	; 0xae2e <xatoi+0xa4>
	clr	r22
    ae1c:	66 27       	eor	r22, r22
	com	r18
    ae1e:	20 95       	com	r18
	com	r19
    ae20:	30 95       	com	r19
	com	r20
    ae22:	40 95       	com	r20
	com	r21
    ae24:	50 95       	com	r21
	adc	r18, r22
    ae26:	26 1f       	adc	r18, r22
	adc	r19, r22
    ae28:	36 1f       	adc	r19, r22
	adc	r20, r22
    ae2a:	46 1f       	adc	r20, r22
	adc	r21, r22
    ae2c:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    ae2e:	fe 93       	st	-X, r31
	st	-X, ZL
    ae30:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    ae32:	d0 01       	movw	r26, r0
	st	X+, r18
    ae34:	2d 93       	st	X+, r18
	st	X+, r19
    ae36:	3d 93       	st	X+, r19
	st	X+, r20
    ae38:	4d 93       	st	X+, r20
	st	X+, r21
    ae3a:	5d 93       	st	X+, r21
	clr	r1
    ae3c:	11 24       	eor	r1, r1
	ret
    ae3e:	08 95       	ret

0000ae40 <__mulsi3>:
    ae40:	62 9f       	mul	r22, r18
    ae42:	d0 01       	movw	r26, r0
    ae44:	73 9f       	mul	r23, r19
    ae46:	f0 01       	movw	r30, r0
    ae48:	82 9f       	mul	r24, r18
    ae4a:	e0 0d       	add	r30, r0
    ae4c:	f1 1d       	adc	r31, r1
    ae4e:	64 9f       	mul	r22, r20
    ae50:	e0 0d       	add	r30, r0
    ae52:	f1 1d       	adc	r31, r1
    ae54:	92 9f       	mul	r25, r18
    ae56:	f0 0d       	add	r31, r0
    ae58:	83 9f       	mul	r24, r19
    ae5a:	f0 0d       	add	r31, r0
    ae5c:	74 9f       	mul	r23, r20
    ae5e:	f0 0d       	add	r31, r0
    ae60:	65 9f       	mul	r22, r21
    ae62:	f0 0d       	add	r31, r0
    ae64:	99 27       	eor	r25, r25
    ae66:	72 9f       	mul	r23, r18
    ae68:	b0 0d       	add	r27, r0
    ae6a:	e1 1d       	adc	r30, r1
    ae6c:	f9 1f       	adc	r31, r25
    ae6e:	63 9f       	mul	r22, r19
    ae70:	b0 0d       	add	r27, r0
    ae72:	e1 1d       	adc	r30, r1
    ae74:	f9 1f       	adc	r31, r25
    ae76:	bd 01       	movw	r22, r26
    ae78:	cf 01       	movw	r24, r30
    ae7a:	11 24       	eor	r1, r1
    ae7c:	08 95       	ret

0000ae7e <__udivmodhi4>:
    ae7e:	aa 1b       	sub	r26, r26
    ae80:	bb 1b       	sub	r27, r27
    ae82:	51 e1       	ldi	r21, 0x11	; 17
    ae84:	07 c0       	rjmp	.+14     	; 0xae94 <__udivmodhi4_ep>

0000ae86 <__udivmodhi4_loop>:
    ae86:	aa 1f       	adc	r26, r26
    ae88:	bb 1f       	adc	r27, r27
    ae8a:	a6 17       	cp	r26, r22
    ae8c:	b7 07       	cpc	r27, r23
    ae8e:	10 f0       	brcs	.+4      	; 0xae94 <__udivmodhi4_ep>
    ae90:	a6 1b       	sub	r26, r22
    ae92:	b7 0b       	sbc	r27, r23

0000ae94 <__udivmodhi4_ep>:
    ae94:	88 1f       	adc	r24, r24
    ae96:	99 1f       	adc	r25, r25
    ae98:	5a 95       	dec	r21
    ae9a:	a9 f7       	brne	.-22     	; 0xae86 <__udivmodhi4_loop>
    ae9c:	80 95       	com	r24
    ae9e:	90 95       	com	r25
    aea0:	bc 01       	movw	r22, r24
    aea2:	cd 01       	movw	r24, r26
    aea4:	08 95       	ret

0000aea6 <__divmodhi4>:
    aea6:	97 fb       	bst	r25, 7
    aea8:	09 2e       	mov	r0, r25
    aeaa:	07 26       	eor	r0, r23
    aeac:	0a d0       	rcall	.+20     	; 0xaec2 <__divmodhi4_neg1>
    aeae:	77 fd       	sbrc	r23, 7
    aeb0:	04 d0       	rcall	.+8      	; 0xaeba <__divmodhi4_neg2>
    aeb2:	e5 df       	rcall	.-54     	; 0xae7e <__udivmodhi4>
    aeb4:	06 d0       	rcall	.+12     	; 0xaec2 <__divmodhi4_neg1>
    aeb6:	00 20       	and	r0, r0
    aeb8:	1a f4       	brpl	.+6      	; 0xaec0 <__divmodhi4_exit>

0000aeba <__divmodhi4_neg2>:
    aeba:	70 95       	com	r23
    aebc:	61 95       	neg	r22
    aebe:	7f 4f       	sbci	r23, 0xFF	; 255

0000aec0 <__divmodhi4_exit>:
    aec0:	08 95       	ret

0000aec2 <__divmodhi4_neg1>:
    aec2:	f6 f7       	brtc	.-4      	; 0xaec0 <__divmodhi4_exit>
    aec4:	90 95       	com	r25
    aec6:	81 95       	neg	r24
    aec8:	9f 4f       	sbci	r25, 0xFF	; 255
    aeca:	08 95       	ret

0000aecc <__udivmodsi4>:
    aecc:	a1 e2       	ldi	r26, 0x21	; 33
    aece:	1a 2e       	mov	r1, r26
    aed0:	aa 1b       	sub	r26, r26
    aed2:	bb 1b       	sub	r27, r27
    aed4:	fd 01       	movw	r30, r26
    aed6:	0d c0       	rjmp	.+26     	; 0xaef2 <__udivmodsi4_ep>

0000aed8 <__udivmodsi4_loop>:
    aed8:	aa 1f       	adc	r26, r26
    aeda:	bb 1f       	adc	r27, r27
    aedc:	ee 1f       	adc	r30, r30
    aede:	ff 1f       	adc	r31, r31
    aee0:	a2 17       	cp	r26, r18
    aee2:	b3 07       	cpc	r27, r19
    aee4:	e4 07       	cpc	r30, r20
    aee6:	f5 07       	cpc	r31, r21
    aee8:	20 f0       	brcs	.+8      	; 0xaef2 <__udivmodsi4_ep>
    aeea:	a2 1b       	sub	r26, r18
    aeec:	b3 0b       	sbc	r27, r19
    aeee:	e4 0b       	sbc	r30, r20
    aef0:	f5 0b       	sbc	r31, r21

0000aef2 <__udivmodsi4_ep>:
    aef2:	66 1f       	adc	r22, r22
    aef4:	77 1f       	adc	r23, r23
    aef6:	88 1f       	adc	r24, r24
    aef8:	99 1f       	adc	r25, r25
    aefa:	1a 94       	dec	r1
    aefc:	69 f7       	brne	.-38     	; 0xaed8 <__udivmodsi4_loop>
    aefe:	60 95       	com	r22
    af00:	70 95       	com	r23
    af02:	80 95       	com	r24
    af04:	90 95       	com	r25
    af06:	9b 01       	movw	r18, r22
    af08:	ac 01       	movw	r20, r24
    af0a:	bd 01       	movw	r22, r26
    af0c:	cf 01       	movw	r24, r30
    af0e:	08 95       	ret

0000af10 <__divmodsi4>:
    af10:	97 fb       	bst	r25, 7
    af12:	09 2e       	mov	r0, r25
    af14:	05 26       	eor	r0, r21
    af16:	0e d0       	rcall	.+28     	; 0xaf34 <__divmodsi4_neg1>
    af18:	57 fd       	sbrc	r21, 7
    af1a:	04 d0       	rcall	.+8      	; 0xaf24 <__divmodsi4_neg2>
    af1c:	d7 df       	rcall	.-82     	; 0xaecc <__udivmodsi4>
    af1e:	0a d0       	rcall	.+20     	; 0xaf34 <__divmodsi4_neg1>
    af20:	00 1c       	adc	r0, r0
    af22:	38 f4       	brcc	.+14     	; 0xaf32 <__divmodsi4_exit>

0000af24 <__divmodsi4_neg2>:
    af24:	50 95       	com	r21
    af26:	40 95       	com	r20
    af28:	30 95       	com	r19
    af2a:	21 95       	neg	r18
    af2c:	3f 4f       	sbci	r19, 0xFF	; 255
    af2e:	4f 4f       	sbci	r20, 0xFF	; 255
    af30:	5f 4f       	sbci	r21, 0xFF	; 255

0000af32 <__divmodsi4_exit>:
    af32:	08 95       	ret

0000af34 <__divmodsi4_neg1>:
    af34:	f6 f7       	brtc	.-4      	; 0xaf32 <__divmodsi4_exit>
    af36:	90 95       	com	r25
    af38:	80 95       	com	r24
    af3a:	70 95       	com	r23
    af3c:	61 95       	neg	r22
    af3e:	7f 4f       	sbci	r23, 0xFF	; 255
    af40:	8f 4f       	sbci	r24, 0xFF	; 255
    af42:	9f 4f       	sbci	r25, 0xFF	; 255
    af44:	08 95       	ret

0000af46 <__prologue_saves__>:
    af46:	2f 92       	push	r2
    af48:	3f 92       	push	r3
    af4a:	4f 92       	push	r4
    af4c:	5f 92       	push	r5
    af4e:	6f 92       	push	r6
    af50:	7f 92       	push	r7
    af52:	8f 92       	push	r8
    af54:	9f 92       	push	r9
    af56:	af 92       	push	r10
    af58:	bf 92       	push	r11
    af5a:	cf 92       	push	r12
    af5c:	df 92       	push	r13
    af5e:	ef 92       	push	r14
    af60:	ff 92       	push	r15
    af62:	0f 93       	push	r16
    af64:	1f 93       	push	r17
    af66:	cf 93       	push	r28
    af68:	df 93       	push	r29
    af6a:	cd b7       	in	r28, 0x3d	; 61
    af6c:	de b7       	in	r29, 0x3e	; 62
    af6e:	ca 1b       	sub	r28, r26
    af70:	db 0b       	sbc	r29, r27
    af72:	0f b6       	in	r0, 0x3f	; 63
    af74:	f8 94       	cli
    af76:	de bf       	out	0x3e, r29	; 62
    af78:	0f be       	out	0x3f, r0	; 63
    af7a:	cd bf       	out	0x3d, r28	; 61
    af7c:	19 94       	eijmp

0000af7e <__epilogue_restores__>:
    af7e:	2a 88       	ldd	r2, Y+18	; 0x12
    af80:	39 88       	ldd	r3, Y+17	; 0x11
    af82:	48 88       	ldd	r4, Y+16	; 0x10
    af84:	5f 84       	ldd	r5, Y+15	; 0x0f
    af86:	6e 84       	ldd	r6, Y+14	; 0x0e
    af88:	7d 84       	ldd	r7, Y+13	; 0x0d
    af8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    af8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    af8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    af90:	b9 84       	ldd	r11, Y+9	; 0x09
    af92:	c8 84       	ldd	r12, Y+8	; 0x08
    af94:	df 80       	ldd	r13, Y+7	; 0x07
    af96:	ee 80       	ldd	r14, Y+6	; 0x06
    af98:	fd 80       	ldd	r15, Y+5	; 0x05
    af9a:	0c 81       	ldd	r16, Y+4	; 0x04
    af9c:	1b 81       	ldd	r17, Y+3	; 0x03
    af9e:	aa 81       	ldd	r26, Y+2	; 0x02
    afa0:	b9 81       	ldd	r27, Y+1	; 0x01
    afa2:	ce 0f       	add	r28, r30
    afa4:	d1 1d       	adc	r29, r1
    afa6:	0f b6       	in	r0, 0x3f	; 63
    afa8:	f8 94       	cli
    afaa:	de bf       	out	0x3e, r29	; 62
    afac:	0f be       	out	0x3f, r0	; 63
    afae:	cd bf       	out	0x3d, r28	; 61
    afb0:	ed 01       	movw	r28, r26
    afb2:	08 95       	ret

0000afb4 <__tablejump2__>:
    afb4:	ee 0f       	add	r30, r30
    afb6:	ff 1f       	adc	r31, r31

0000afb8 <__tablejump__>:
    afb8:	05 90       	lpm	r0, Z+
    afba:	f4 91       	lpm	r31, Z+
    afbc:	e0 2d       	mov	r30, r0
    afbe:	19 94       	eijmp

0000afc0 <malloc>:
    afc0:	cf 93       	push	r28
    afc2:	df 93       	push	r29
    afc4:	bc 01       	movw	r22, r24
    afc6:	82 30       	cpi	r24, 0x02	; 2
    afc8:	91 05       	cpc	r25, r1
    afca:	10 f4       	brcc	.+4      	; 0xafd0 <malloc+0x10>
    afcc:	62 e0       	ldi	r22, 0x02	; 2
    afce:	70 e0       	ldi	r23, 0x00	; 0
    afd0:	a0 91 f9 2b 	lds	r26, 0x2BF9
    afd4:	b0 91 fa 2b 	lds	r27, 0x2BFA
    afd8:	ed 01       	movw	r28, r26
    afda:	e0 e0       	ldi	r30, 0x00	; 0
    afdc:	f0 e0       	ldi	r31, 0x00	; 0
    afde:	40 e0       	ldi	r20, 0x00	; 0
    afe0:	50 e0       	ldi	r21, 0x00	; 0
    afe2:	21 c0       	rjmp	.+66     	; 0xb026 <malloc+0x66>
    afe4:	88 81       	ld	r24, Y
    afe6:	99 81       	ldd	r25, Y+1	; 0x01
    afe8:	86 17       	cp	r24, r22
    afea:	97 07       	cpc	r25, r23
    afec:	69 f4       	brne	.+26     	; 0xb008 <malloc+0x48>
    afee:	8a 81       	ldd	r24, Y+2	; 0x02
    aff0:	9b 81       	ldd	r25, Y+3	; 0x03
    aff2:	30 97       	sbiw	r30, 0x00	; 0
    aff4:	19 f0       	breq	.+6      	; 0xaffc <malloc+0x3c>
    aff6:	82 83       	std	Z+2, r24	; 0x02
    aff8:	93 83       	std	Z+3, r25	; 0x03
    affa:	04 c0       	rjmp	.+8      	; 0xb004 <malloc+0x44>
    affc:	80 93 f9 2b 	sts	0x2BF9, r24
    b000:	90 93 fa 2b 	sts	0x2BFA, r25
    b004:	fe 01       	movw	r30, r28
    b006:	34 c0       	rjmp	.+104    	; 0xb070 <malloc+0xb0>
    b008:	68 17       	cp	r22, r24
    b00a:	79 07       	cpc	r23, r25
    b00c:	38 f4       	brcc	.+14     	; 0xb01c <malloc+0x5c>
    b00e:	41 15       	cp	r20, r1
    b010:	51 05       	cpc	r21, r1
    b012:	19 f0       	breq	.+6      	; 0xb01a <malloc+0x5a>
    b014:	84 17       	cp	r24, r20
    b016:	95 07       	cpc	r25, r21
    b018:	08 f4       	brcc	.+2      	; 0xb01c <malloc+0x5c>
    b01a:	ac 01       	movw	r20, r24
    b01c:	fe 01       	movw	r30, r28
    b01e:	8a 81       	ldd	r24, Y+2	; 0x02
    b020:	9b 81       	ldd	r25, Y+3	; 0x03
    b022:	9c 01       	movw	r18, r24
    b024:	e9 01       	movw	r28, r18
    b026:	20 97       	sbiw	r28, 0x00	; 0
    b028:	e9 f6       	brne	.-70     	; 0xafe4 <malloc+0x24>
    b02a:	41 15       	cp	r20, r1
    b02c:	51 05       	cpc	r21, r1
    b02e:	a9 f1       	breq	.+106    	; 0xb09a <malloc+0xda>
    b030:	ca 01       	movw	r24, r20
    b032:	86 1b       	sub	r24, r22
    b034:	97 0b       	sbc	r25, r23
    b036:	04 97       	sbiw	r24, 0x04	; 4
    b038:	08 f4       	brcc	.+2      	; 0xb03c <malloc+0x7c>
    b03a:	ba 01       	movw	r22, r20
    b03c:	e0 e0       	ldi	r30, 0x00	; 0
    b03e:	f0 e0       	ldi	r31, 0x00	; 0
    b040:	2a c0       	rjmp	.+84     	; 0xb096 <malloc+0xd6>
    b042:	8d 91       	ld	r24, X+
    b044:	9c 91       	ld	r25, X
    b046:	11 97       	sbiw	r26, 0x01	; 1
    b048:	84 17       	cp	r24, r20
    b04a:	95 07       	cpc	r25, r21
    b04c:	f9 f4       	brne	.+62     	; 0xb08c <malloc+0xcc>
    b04e:	64 17       	cp	r22, r20
    b050:	75 07       	cpc	r23, r21
    b052:	81 f4       	brne	.+32     	; 0xb074 <malloc+0xb4>
    b054:	12 96       	adiw	r26, 0x02	; 2
    b056:	8d 91       	ld	r24, X+
    b058:	9c 91       	ld	r25, X
    b05a:	13 97       	sbiw	r26, 0x03	; 3
    b05c:	30 97       	sbiw	r30, 0x00	; 0
    b05e:	19 f0       	breq	.+6      	; 0xb066 <malloc+0xa6>
    b060:	82 83       	std	Z+2, r24	; 0x02
    b062:	93 83       	std	Z+3, r25	; 0x03
    b064:	04 c0       	rjmp	.+8      	; 0xb06e <malloc+0xae>
    b066:	80 93 f9 2b 	sts	0x2BF9, r24
    b06a:	90 93 fa 2b 	sts	0x2BFA, r25
    b06e:	fd 01       	movw	r30, r26
    b070:	32 96       	adiw	r30, 0x02	; 2
    b072:	4f c0       	rjmp	.+158    	; 0xb112 <malloc+0x152>
    b074:	ca 01       	movw	r24, r20
    b076:	86 1b       	sub	r24, r22
    b078:	97 0b       	sbc	r25, r23
    b07a:	fd 01       	movw	r30, r26
    b07c:	e8 0f       	add	r30, r24
    b07e:	f9 1f       	adc	r31, r25
    b080:	61 93       	st	Z+, r22
    b082:	71 93       	st	Z+, r23
    b084:	02 97       	sbiw	r24, 0x02	; 2
    b086:	8d 93       	st	X+, r24
    b088:	9c 93       	st	X, r25
    b08a:	43 c0       	rjmp	.+134    	; 0xb112 <malloc+0x152>
    b08c:	fd 01       	movw	r30, r26
    b08e:	82 81       	ldd	r24, Z+2	; 0x02
    b090:	93 81       	ldd	r25, Z+3	; 0x03
    b092:	9c 01       	movw	r18, r24
    b094:	d9 01       	movw	r26, r18
    b096:	10 97       	sbiw	r26, 0x00	; 0
    b098:	a1 f6       	brne	.-88     	; 0xb042 <malloc+0x82>
    b09a:	80 91 f7 2b 	lds	r24, 0x2BF7
    b09e:	90 91 f8 2b 	lds	r25, 0x2BF8
    b0a2:	89 2b       	or	r24, r25
    b0a4:	41 f4       	brne	.+16     	; 0xb0b6 <malloc+0xf6>
    b0a6:	80 91 dc 24 	lds	r24, 0x24DC
    b0aa:	90 91 dd 24 	lds	r25, 0x24DD
    b0ae:	80 93 f7 2b 	sts	0x2BF7, r24
    b0b2:	90 93 f8 2b 	sts	0x2BF8, r25
    b0b6:	40 91 de 24 	lds	r20, 0x24DE
    b0ba:	50 91 df 24 	lds	r21, 0x24DF
    b0be:	41 15       	cp	r20, r1
    b0c0:	51 05       	cpc	r21, r1
    b0c2:	41 f4       	brne	.+16     	; 0xb0d4 <malloc+0x114>
    b0c4:	4d b7       	in	r20, 0x3d	; 61
    b0c6:	5e b7       	in	r21, 0x3e	; 62
    b0c8:	80 91 da 24 	lds	r24, 0x24DA
    b0cc:	90 91 db 24 	lds	r25, 0x24DB
    b0d0:	48 1b       	sub	r20, r24
    b0d2:	59 0b       	sbc	r21, r25
    b0d4:	20 91 f7 2b 	lds	r18, 0x2BF7
    b0d8:	30 91 f8 2b 	lds	r19, 0x2BF8
    b0dc:	24 17       	cp	r18, r20
    b0de:	35 07       	cpc	r19, r21
    b0e0:	b0 f4       	brcc	.+44     	; 0xb10e <malloc+0x14e>
    b0e2:	ca 01       	movw	r24, r20
    b0e4:	82 1b       	sub	r24, r18
    b0e6:	93 0b       	sbc	r25, r19
    b0e8:	86 17       	cp	r24, r22
    b0ea:	97 07       	cpc	r25, r23
    b0ec:	80 f0       	brcs	.+32     	; 0xb10e <malloc+0x14e>
    b0ee:	ab 01       	movw	r20, r22
    b0f0:	4e 5f       	subi	r20, 0xFE	; 254
    b0f2:	5f 4f       	sbci	r21, 0xFF	; 255
    b0f4:	84 17       	cp	r24, r20
    b0f6:	95 07       	cpc	r25, r21
    b0f8:	50 f0       	brcs	.+20     	; 0xb10e <malloc+0x14e>
    b0fa:	42 0f       	add	r20, r18
    b0fc:	53 1f       	adc	r21, r19
    b0fe:	40 93 f7 2b 	sts	0x2BF7, r20
    b102:	50 93 f8 2b 	sts	0x2BF8, r21
    b106:	f9 01       	movw	r30, r18
    b108:	61 93       	st	Z+, r22
    b10a:	71 93       	st	Z+, r23
    b10c:	02 c0       	rjmp	.+4      	; 0xb112 <malloc+0x152>
    b10e:	e0 e0       	ldi	r30, 0x00	; 0
    b110:	f0 e0       	ldi	r31, 0x00	; 0
    b112:	cf 01       	movw	r24, r30
    b114:	df 91       	pop	r29
    b116:	cf 91       	pop	r28
    b118:	08 95       	ret

0000b11a <free>:
    b11a:	cf 93       	push	r28
    b11c:	df 93       	push	r29
    b11e:	00 97       	sbiw	r24, 0x00	; 0
    b120:	09 f4       	brne	.+2      	; 0xb124 <free+0xa>
    b122:	50 c0       	rjmp	.+160    	; 0xb1c4 <free+0xaa>
    b124:	ec 01       	movw	r28, r24
    b126:	22 97       	sbiw	r28, 0x02	; 2
    b128:	1a 82       	std	Y+2, r1	; 0x02
    b12a:	1b 82       	std	Y+3, r1	; 0x03
    b12c:	a0 91 f9 2b 	lds	r26, 0x2BF9
    b130:	b0 91 fa 2b 	lds	r27, 0x2BFA
    b134:	10 97       	sbiw	r26, 0x00	; 0
    b136:	09 f1       	breq	.+66     	; 0xb17a <free+0x60>
    b138:	40 e0       	ldi	r20, 0x00	; 0
    b13a:	50 e0       	ldi	r21, 0x00	; 0
    b13c:	ac 17       	cp	r26, r28
    b13e:	bd 07       	cpc	r27, r29
    b140:	08 f1       	brcs	.+66     	; 0xb184 <free+0x6a>
    b142:	aa 83       	std	Y+2, r26	; 0x02
    b144:	bb 83       	std	Y+3, r27	; 0x03
    b146:	fe 01       	movw	r30, r28
    b148:	21 91       	ld	r18, Z+
    b14a:	31 91       	ld	r19, Z+
    b14c:	e2 0f       	add	r30, r18
    b14e:	f3 1f       	adc	r31, r19
    b150:	ae 17       	cp	r26, r30
    b152:	bf 07       	cpc	r27, r31
    b154:	79 f4       	brne	.+30     	; 0xb174 <free+0x5a>
    b156:	8d 91       	ld	r24, X+
    b158:	9c 91       	ld	r25, X
    b15a:	11 97       	sbiw	r26, 0x01	; 1
    b15c:	28 0f       	add	r18, r24
    b15e:	39 1f       	adc	r19, r25
    b160:	2e 5f       	subi	r18, 0xFE	; 254
    b162:	3f 4f       	sbci	r19, 0xFF	; 255
    b164:	28 83       	st	Y, r18
    b166:	39 83       	std	Y+1, r19	; 0x01
    b168:	12 96       	adiw	r26, 0x02	; 2
    b16a:	8d 91       	ld	r24, X+
    b16c:	9c 91       	ld	r25, X
    b16e:	13 97       	sbiw	r26, 0x03	; 3
    b170:	8a 83       	std	Y+2, r24	; 0x02
    b172:	9b 83       	std	Y+3, r25	; 0x03
    b174:	41 15       	cp	r20, r1
    b176:	51 05       	cpc	r21, r1
    b178:	71 f4       	brne	.+28     	; 0xb196 <free+0x7c>
    b17a:	c0 93 f9 2b 	sts	0x2BF9, r28
    b17e:	d0 93 fa 2b 	sts	0x2BFA, r29
    b182:	20 c0       	rjmp	.+64     	; 0xb1c4 <free+0xaa>
    b184:	12 96       	adiw	r26, 0x02	; 2
    b186:	8d 91       	ld	r24, X+
    b188:	9c 91       	ld	r25, X
    b18a:	13 97       	sbiw	r26, 0x03	; 3
    b18c:	ad 01       	movw	r20, r26
    b18e:	00 97       	sbiw	r24, 0x00	; 0
    b190:	11 f0       	breq	.+4      	; 0xb196 <free+0x7c>
    b192:	dc 01       	movw	r26, r24
    b194:	d3 cf       	rjmp	.-90     	; 0xb13c <free+0x22>
    b196:	fa 01       	movw	r30, r20
    b198:	c2 83       	std	Z+2, r28	; 0x02
    b19a:	d3 83       	std	Z+3, r29	; 0x03
    b19c:	21 91       	ld	r18, Z+
    b19e:	31 91       	ld	r19, Z+
    b1a0:	e2 0f       	add	r30, r18
    b1a2:	f3 1f       	adc	r31, r19
    b1a4:	ce 17       	cp	r28, r30
    b1a6:	df 07       	cpc	r29, r31
    b1a8:	69 f4       	brne	.+26     	; 0xb1c4 <free+0xaa>
    b1aa:	88 81       	ld	r24, Y
    b1ac:	99 81       	ldd	r25, Y+1	; 0x01
    b1ae:	28 0f       	add	r18, r24
    b1b0:	39 1f       	adc	r19, r25
    b1b2:	2e 5f       	subi	r18, 0xFE	; 254
    b1b4:	3f 4f       	sbci	r19, 0xFF	; 255
    b1b6:	fa 01       	movw	r30, r20
    b1b8:	20 83       	st	Z, r18
    b1ba:	31 83       	std	Z+1, r19	; 0x01
    b1bc:	8a 81       	ldd	r24, Y+2	; 0x02
    b1be:	9b 81       	ldd	r25, Y+3	; 0x03
    b1c0:	82 83       	std	Z+2, r24	; 0x02
    b1c2:	93 83       	std	Z+3, r25	; 0x03
    b1c4:	df 91       	pop	r29
    b1c6:	cf 91       	pop	r28
    b1c8:	08 95       	ret

0000b1ca <strtoul>:
    b1ca:	3f 92       	push	r3
    b1cc:	4f 92       	push	r4
    b1ce:	5f 92       	push	r5
    b1d0:	6f 92       	push	r6
    b1d2:	7f 92       	push	r7
    b1d4:	8f 92       	push	r8
    b1d6:	9f 92       	push	r9
    b1d8:	af 92       	push	r10
    b1da:	bf 92       	push	r11
    b1dc:	cf 92       	push	r12
    b1de:	df 92       	push	r13
    b1e0:	ef 92       	push	r14
    b1e2:	ff 92       	push	r15
    b1e4:	0f 93       	push	r16
    b1e6:	1f 93       	push	r17
    b1e8:	cf 93       	push	r28
    b1ea:	df 93       	push	r29
    b1ec:	ec 01       	movw	r28, r24
    b1ee:	2b 01       	movw	r4, r22
    b1f0:	6a 01       	movw	r12, r20
    b1f2:	61 15       	cp	r22, r1
    b1f4:	71 05       	cpc	r23, r1
    b1f6:	19 f0       	breq	.+6      	; 0xb1fe <strtoul+0x34>
    b1f8:	fb 01       	movw	r30, r22
    b1fa:	80 83       	st	Z, r24
    b1fc:	91 83       	std	Z+1, r25	; 0x01
    b1fe:	c1 14       	cp	r12, r1
    b200:	d1 04       	cpc	r13, r1
    b202:	49 f0       	breq	.+18     	; 0xb216 <strtoul+0x4c>
    b204:	c6 01       	movw	r24, r12
    b206:	02 97       	sbiw	r24, 0x02	; 2
    b208:	83 97       	sbiw	r24, 0x23	; 35
    b20a:	28 f0       	brcs	.+10     	; 0xb216 <strtoul+0x4c>
    b20c:	20 e0       	ldi	r18, 0x00	; 0
    b20e:	30 e0       	ldi	r19, 0x00	; 0
    b210:	40 e0       	ldi	r20, 0x00	; 0
    b212:	50 e0       	ldi	r21, 0x00	; 0
    b214:	dc c0       	rjmp	.+440    	; 0xb3ce <strtoul+0x204>
    b216:	a9 90       	ld	r10, Y+
    b218:	8a 2d       	mov	r24, r10
    b21a:	90 e0       	ldi	r25, 0x00	; 0
    b21c:	0e 94 fb 59 	call	0xb3f6	; 0xb3f6 <isspace>
    b220:	89 2b       	or	r24, r25
    b222:	c9 f7       	brne	.-14     	; 0xb216 <strtoul+0x4c>
    b224:	fd e2       	ldi	r31, 0x2D	; 45
    b226:	af 16       	cp	r10, r31
    b228:	21 f4       	brne	.+8      	; 0xb232 <strtoul+0x68>
    b22a:	a9 90       	ld	r10, Y+
    b22c:	33 24       	eor	r3, r3
    b22e:	33 94       	inc	r3
    b230:	05 c0       	rjmp	.+10     	; 0xb23c <strtoul+0x72>
    b232:	8b e2       	ldi	r24, 0x2B	; 43
    b234:	a8 16       	cp	r10, r24
    b236:	09 f4       	brne	.+2      	; 0xb23a <strtoul+0x70>
    b238:	a9 90       	ld	r10, Y+
    b23a:	33 24       	eor	r3, r3
    b23c:	c1 14       	cp	r12, r1
    b23e:	d1 04       	cpc	r13, r1
    b240:	21 f0       	breq	.+8      	; 0xb24a <strtoul+0x80>
    b242:	e0 e1       	ldi	r30, 0x10	; 16
    b244:	ce 16       	cp	r12, r30
    b246:	d1 04       	cpc	r13, r1
    b248:	11 f5       	brne	.+68     	; 0xb28e <strtoul+0xc4>
    b24a:	f0 e3       	ldi	r31, 0x30	; 48
    b24c:	af 16       	cp	r10, r31
    b24e:	69 f4       	brne	.+26     	; 0xb26a <strtoul+0xa0>
    b250:	88 81       	ld	r24, Y
    b252:	88 37       	cpi	r24, 0x78	; 120
    b254:	11 f0       	breq	.+4      	; 0xb25a <strtoul+0x90>
    b256:	88 35       	cpi	r24, 0x58	; 88
    b258:	41 f4       	brne	.+16     	; 0xb26a <strtoul+0xa0>
    b25a:	a9 80       	ldd	r10, Y+1	; 0x01
    b25c:	22 96       	adiw	r28, 0x02	; 2
    b25e:	82 e0       	ldi	r24, 0x02	; 2
    b260:	38 2a       	or	r3, r24
    b262:	20 e1       	ldi	r18, 0x10	; 16
    b264:	c2 2e       	mov	r12, r18
    b266:	d1 2c       	mov	r13, r1
    b268:	12 c0       	rjmp	.+36     	; 0xb28e <strtoul+0xc4>
    b26a:	c1 14       	cp	r12, r1
    b26c:	d1 04       	cpc	r13, r1
    b26e:	79 f4       	brne	.+30     	; 0xb28e <strtoul+0xc4>
    b270:	e0 e3       	ldi	r30, 0x30	; 48
    b272:	ae 16       	cp	r10, r30
    b274:	59 f1       	breq	.+86     	; 0xb2cc <strtoul+0x102>
    b276:	99 e9       	ldi	r25, 0x99	; 153
    b278:	e9 2e       	mov	r14, r25
    b27a:	99 e9       	ldi	r25, 0x99	; 153
    b27c:	f9 2e       	mov	r15, r25
    b27e:	99 e9       	ldi	r25, 0x99	; 153
    b280:	09 2f       	mov	r16, r25
    b282:	99 e1       	ldi	r25, 0x19	; 25
    b284:	19 2f       	mov	r17, r25
    b286:	8a e0       	ldi	r24, 0x0A	; 10
    b288:	c8 2e       	mov	r12, r24
    b28a:	d1 2c       	mov	r13, r1
    b28c:	3a c0       	rjmp	.+116    	; 0xb302 <strtoul+0x138>
    b28e:	fa e0       	ldi	r31, 0x0A	; 10
    b290:	cf 16       	cp	r12, r31
    b292:	d1 04       	cpc	r13, r1
    b294:	91 f0       	breq	.+36     	; 0xb2ba <strtoul+0xf0>
    b296:	80 e1       	ldi	r24, 0x10	; 16
    b298:	c8 16       	cp	r12, r24
    b29a:	d1 04       	cpc	r13, r1
    b29c:	29 f0       	breq	.+10     	; 0xb2a8 <strtoul+0xde>
    b29e:	e8 e0       	ldi	r30, 0x08	; 8
    b2a0:	ce 16       	cp	r12, r30
    b2a2:	d1 04       	cpc	r13, r1
    b2a4:	f9 f4       	brne	.+62     	; 0xb2e4 <strtoul+0x11a>
    b2a6:	15 c0       	rjmp	.+42     	; 0xb2d2 <strtoul+0x108>
    b2a8:	bf ef       	ldi	r27, 0xFF	; 255
    b2aa:	eb 2e       	mov	r14, r27
    b2ac:	bf ef       	ldi	r27, 0xFF	; 255
    b2ae:	fb 2e       	mov	r15, r27
    b2b0:	bf ef       	ldi	r27, 0xFF	; 255
    b2b2:	0b 2f       	mov	r16, r27
    b2b4:	bf e0       	ldi	r27, 0x0F	; 15
    b2b6:	1b 2f       	mov	r17, r27
    b2b8:	24 c0       	rjmp	.+72     	; 0xb302 <strtoul+0x138>
    b2ba:	a9 e9       	ldi	r26, 0x99	; 153
    b2bc:	ea 2e       	mov	r14, r26
    b2be:	a9 e9       	ldi	r26, 0x99	; 153
    b2c0:	fa 2e       	mov	r15, r26
    b2c2:	a9 e9       	ldi	r26, 0x99	; 153
    b2c4:	0a 2f       	mov	r16, r26
    b2c6:	a9 e1       	ldi	r26, 0x19	; 25
    b2c8:	1a 2f       	mov	r17, r26
    b2ca:	1b c0       	rjmp	.+54     	; 0xb302 <strtoul+0x138>
    b2cc:	f8 e0       	ldi	r31, 0x08	; 8
    b2ce:	cf 2e       	mov	r12, r31
    b2d0:	d1 2c       	mov	r13, r1
    b2d2:	ef ef       	ldi	r30, 0xFF	; 255
    b2d4:	ee 2e       	mov	r14, r30
    b2d6:	ef ef       	ldi	r30, 0xFF	; 255
    b2d8:	fe 2e       	mov	r15, r30
    b2da:	ef ef       	ldi	r30, 0xFF	; 255
    b2dc:	0e 2f       	mov	r16, r30
    b2de:	ef e1       	ldi	r30, 0x1F	; 31
    b2e0:	1e 2f       	mov	r17, r30
    b2e2:	0f c0       	rjmp	.+30     	; 0xb302 <strtoul+0x138>
    b2e4:	96 01       	movw	r18, r12
    b2e6:	44 27       	eor	r20, r20
    b2e8:	37 fd       	sbrc	r19, 7
    b2ea:	40 95       	com	r20
    b2ec:	54 2f       	mov	r21, r20
    b2ee:	6f ef       	ldi	r22, 0xFF	; 255
    b2f0:	7f ef       	ldi	r23, 0xFF	; 255
    b2f2:	8f ef       	ldi	r24, 0xFF	; 255
    b2f4:	9f ef       	ldi	r25, 0xFF	; 255
    b2f6:	0e 94 66 57 	call	0xaecc	; 0xaecc <__udivmodsi4>
    b2fa:	c9 01       	movw	r24, r18
    b2fc:	da 01       	movw	r26, r20
    b2fe:	7c 01       	movw	r14, r24
    b300:	8d 01       	movw	r16, r26
    b302:	20 e0       	ldi	r18, 0x00	; 0
    b304:	30 e0       	ldi	r19, 0x00	; 0
    b306:	40 e0       	ldi	r20, 0x00	; 0
    b308:	50 e0       	ldi	r21, 0x00	; 0
    b30a:	60 e0       	ldi	r22, 0x00	; 0
    b30c:	36 01       	movw	r6, r12
    b30e:	88 24       	eor	r8, r8
    b310:	77 fc       	sbrc	r7, 7
    b312:	80 94       	com	r8
    b314:	98 2c       	mov	r9, r8
    b316:	70 ed       	ldi	r23, 0xD0	; 208
    b318:	b7 2e       	mov	r11, r23
    b31a:	ba 0c       	add	r11, r10
    b31c:	f9 e0       	ldi	r31, 0x09	; 9
    b31e:	fb 15       	cp	r31, r11
    b320:	70 f4       	brcc	.+28     	; 0xb33e <strtoul+0x174>
    b322:	8a 2d       	mov	r24, r10
    b324:	81 54       	subi	r24, 0x41	; 65
    b326:	8a 31       	cpi	r24, 0x1A	; 26
    b328:	18 f4       	brcc	.+6      	; 0xb330 <strtoul+0x166>
    b32a:	99 ec       	ldi	r25, 0xC9	; 201
    b32c:	b9 2e       	mov	r11, r25
    b32e:	06 c0       	rjmp	.+12     	; 0xb33c <strtoul+0x172>
    b330:	8a 2d       	mov	r24, r10
    b332:	81 56       	subi	r24, 0x61	; 97
    b334:	8a 31       	cpi	r24, 0x1A	; 26
    b336:	48 f5       	brcc	.+82     	; 0xb38a <strtoul+0x1c0>
    b338:	89 ea       	ldi	r24, 0xA9	; 169
    b33a:	b8 2e       	mov	r11, r24
    b33c:	ba 0c       	add	r11, r10
    b33e:	8b 2d       	mov	r24, r11
    b340:	90 e0       	ldi	r25, 0x00	; 0
    b342:	8c 15       	cp	r24, r12
    b344:	9d 05       	cpc	r25, r13
    b346:	0c f5       	brge	.+66     	; 0xb38a <strtoul+0x1c0>
    b348:	6f 3f       	cpi	r22, 0xFF	; 255
    b34a:	e9 f0       	breq	.+58     	; 0xb386 <strtoul+0x1bc>
    b34c:	e2 16       	cp	r14, r18
    b34e:	f3 06       	cpc	r15, r19
    b350:	04 07       	cpc	r16, r20
    b352:	15 07       	cpc	r17, r21
    b354:	b8 f0       	brcs	.+46     	; 0xb384 <strtoul+0x1ba>
    b356:	ca 01       	movw	r24, r20
    b358:	b9 01       	movw	r22, r18
    b35a:	a4 01       	movw	r20, r8
    b35c:	93 01       	movw	r18, r6
    b35e:	0e 94 20 57 	call	0xae40	; 0xae40 <__mulsi3>
    b362:	9b 01       	movw	r18, r22
    b364:	ac 01       	movw	r20, r24
    b366:	8b 2d       	mov	r24, r11
    b368:	90 e0       	ldi	r25, 0x00	; 0
    b36a:	a0 e0       	ldi	r26, 0x00	; 0
    b36c:	b0 e0       	ldi	r27, 0x00	; 0
    b36e:	28 0f       	add	r18, r24
    b370:	39 1f       	adc	r19, r25
    b372:	4a 1f       	adc	r20, r26
    b374:	5b 1f       	adc	r21, r27
    b376:	28 17       	cp	r18, r24
    b378:	39 07       	cpc	r19, r25
    b37a:	4a 07       	cpc	r20, r26
    b37c:	5b 07       	cpc	r21, r27
    b37e:	10 f0       	brcs	.+4      	; 0xb384 <strtoul+0x1ba>
    b380:	61 e0       	ldi	r22, 0x01	; 1
    b382:	01 c0       	rjmp	.+2      	; 0xb386 <strtoul+0x1bc>
    b384:	6f ef       	ldi	r22, 0xFF	; 255
    b386:	a9 90       	ld	r10, Y+
    b388:	c6 cf       	rjmp	.-116    	; 0xb316 <strtoul+0x14c>
    b38a:	41 14       	cp	r4, r1
    b38c:	51 04       	cpc	r5, r1
    b38e:	51 f0       	breq	.+20     	; 0xb3a4 <strtoul+0x1da>
    b390:	66 23       	and	r22, r22
    b392:	11 f0       	breq	.+4      	; 0xb398 <strtoul+0x1ce>
    b394:	21 97       	sbiw	r28, 0x01	; 1
    b396:	03 c0       	rjmp	.+6      	; 0xb39e <strtoul+0x1d4>
    b398:	31 fe       	sbrs	r3, 1
    b39a:	04 c0       	rjmp	.+8      	; 0xb3a4 <strtoul+0x1da>
    b39c:	22 97       	sbiw	r28, 0x02	; 2
    b39e:	f2 01       	movw	r30, r4
    b3a0:	c0 83       	st	Z, r28
    b3a2:	d1 83       	std	Z+1, r29	; 0x01
    b3a4:	30 fe       	sbrs	r3, 0
    b3a6:	07 c0       	rjmp	.+14     	; 0xb3b6 <strtoul+0x1ec>
    b3a8:	50 95       	com	r21
    b3aa:	40 95       	com	r20
    b3ac:	30 95       	com	r19
    b3ae:	21 95       	neg	r18
    b3b0:	3f 4f       	sbci	r19, 0xFF	; 255
    b3b2:	4f 4f       	sbci	r20, 0xFF	; 255
    b3b4:	5f 4f       	sbci	r21, 0xFF	; 255
    b3b6:	67 ff       	sbrs	r22, 7
    b3b8:	0a c0       	rjmp	.+20     	; 0xb3ce <strtoul+0x204>
    b3ba:	82 e2       	ldi	r24, 0x22	; 34
    b3bc:	90 e0       	ldi	r25, 0x00	; 0
    b3be:	80 93 fb 2b 	sts	0x2BFB, r24
    b3c2:	90 93 fc 2b 	sts	0x2BFC, r25
    b3c6:	2f ef       	ldi	r18, 0xFF	; 255
    b3c8:	3f ef       	ldi	r19, 0xFF	; 255
    b3ca:	4f ef       	ldi	r20, 0xFF	; 255
    b3cc:	5f ef       	ldi	r21, 0xFF	; 255
    b3ce:	b9 01       	movw	r22, r18
    b3d0:	ca 01       	movw	r24, r20
    b3d2:	df 91       	pop	r29
    b3d4:	cf 91       	pop	r28
    b3d6:	1f 91       	pop	r17
    b3d8:	0f 91       	pop	r16
    b3da:	ff 90       	pop	r15
    b3dc:	ef 90       	pop	r14
    b3de:	df 90       	pop	r13
    b3e0:	cf 90       	pop	r12
    b3e2:	bf 90       	pop	r11
    b3e4:	af 90       	pop	r10
    b3e6:	9f 90       	pop	r9
    b3e8:	8f 90       	pop	r8
    b3ea:	7f 90       	pop	r7
    b3ec:	6f 90       	pop	r6
    b3ee:	5f 90       	pop	r5
    b3f0:	4f 90       	pop	r4
    b3f2:	3f 90       	pop	r3
    b3f4:	08 95       	ret

0000b3f6 <isspace>:
    b3f6:	91 11       	cpse	r25, r1
    b3f8:	64 c2       	rjmp	.+1224   	; 0xb8c2 <__ctype_isfalse>
    b3fa:	80 32       	cpi	r24, 0x20	; 32
    b3fc:	19 f0       	breq	.+6      	; 0xb404 <isspace+0xe>
    b3fe:	89 50       	subi	r24, 0x09	; 9
    b400:	85 50       	subi	r24, 0x05	; 5
    b402:	d0 f7       	brcc	.-12     	; 0xb3f8 <isspace+0x2>
    b404:	08 95       	ret

0000b406 <sprintf>:
    b406:	0f 93       	push	r16
    b408:	1f 93       	push	r17
    b40a:	df 93       	push	r29
    b40c:	cf 93       	push	r28
    b40e:	cd b7       	in	r28, 0x3d	; 61
    b410:	de b7       	in	r29, 0x3e	; 62
    b412:	2e 97       	sbiw	r28, 0x0e	; 14
    b414:	cd bf       	out	0x3d, r28	; 61
    b416:	de bf       	out	0x3e, r29	; 62
    b418:	0e 89       	ldd	r16, Y+22	; 0x16
    b41a:	1f 89       	ldd	r17, Y+23	; 0x17
    b41c:	86 e0       	ldi	r24, 0x06	; 6
    b41e:	8c 83       	std	Y+4, r24	; 0x04
    b420:	09 83       	std	Y+1, r16	; 0x01
    b422:	1a 83       	std	Y+2, r17	; 0x02
    b424:	8f ef       	ldi	r24, 0xFF	; 255
    b426:	9f e7       	ldi	r25, 0x7F	; 127
    b428:	8d 83       	std	Y+5, r24	; 0x05
    b42a:	9e 83       	std	Y+6, r25	; 0x06
    b42c:	9e 01       	movw	r18, r28
    b42e:	26 5e       	subi	r18, 0xE6	; 230
    b430:	3f 4f       	sbci	r19, 0xFF	; 255
    b432:	ce 01       	movw	r24, r28
    b434:	01 96       	adiw	r24, 0x01	; 1
    b436:	68 8d       	ldd	r22, Y+24	; 0x18
    b438:	79 8d       	ldd	r23, Y+25	; 0x19
    b43a:	a9 01       	movw	r20, r18
    b43c:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <vfprintf>
    b440:	2f 81       	ldd	r18, Y+7	; 0x07
    b442:	38 85       	ldd	r19, Y+8	; 0x08
    b444:	02 0f       	add	r16, r18
    b446:	13 1f       	adc	r17, r19
    b448:	f8 01       	movw	r30, r16
    b44a:	10 82       	st	Z, r1
    b44c:	2e 96       	adiw	r28, 0x0e	; 14
    b44e:	cd bf       	out	0x3d, r28	; 61
    b450:	de bf       	out	0x3e, r29	; 62
    b452:	cf 91       	pop	r28
    b454:	df 91       	pop	r29
    b456:	1f 91       	pop	r17
    b458:	0f 91       	pop	r16
    b45a:	08 95       	ret

0000b45c <vfprintf>:
    b45c:	2f 92       	push	r2
    b45e:	3f 92       	push	r3
    b460:	4f 92       	push	r4
    b462:	5f 92       	push	r5
    b464:	6f 92       	push	r6
    b466:	7f 92       	push	r7
    b468:	8f 92       	push	r8
    b46a:	9f 92       	push	r9
    b46c:	af 92       	push	r10
    b46e:	bf 92       	push	r11
    b470:	cf 92       	push	r12
    b472:	df 92       	push	r13
    b474:	ef 92       	push	r14
    b476:	ff 92       	push	r15
    b478:	0f 93       	push	r16
    b47a:	1f 93       	push	r17
    b47c:	df 93       	push	r29
    b47e:	cf 93       	push	r28
    b480:	cd b7       	in	r28, 0x3d	; 61
    b482:	de b7       	in	r29, 0x3e	; 62
    b484:	2b 97       	sbiw	r28, 0x0b	; 11
    b486:	cd bf       	out	0x3d, r28	; 61
    b488:	de bf       	out	0x3e, r29	; 62
    b48a:	3c 01       	movw	r6, r24
    b48c:	2b 01       	movw	r4, r22
    b48e:	5a 01       	movw	r10, r20
    b490:	fc 01       	movw	r30, r24
    b492:	16 82       	std	Z+6, r1	; 0x06
    b494:	17 82       	std	Z+7, r1	; 0x07
    b496:	83 81       	ldd	r24, Z+3	; 0x03
    b498:	81 fd       	sbrc	r24, 1
    b49a:	03 c0       	rjmp	.+6      	; 0xb4a2 <vfprintf+0x46>
    b49c:	6f ef       	ldi	r22, 0xFF	; 255
    b49e:	7f ef       	ldi	r23, 0xFF	; 255
    b4a0:	c6 c1       	rjmp	.+908    	; 0xb82e <vfprintf+0x3d2>
    b4a2:	9a e0       	ldi	r25, 0x0A	; 10
    b4a4:	89 2e       	mov	r8, r25
    b4a6:	1e 01       	movw	r2, r28
    b4a8:	08 94       	sec
    b4aa:	21 1c       	adc	r2, r1
    b4ac:	31 1c       	adc	r3, r1
    b4ae:	f3 01       	movw	r30, r6
    b4b0:	23 81       	ldd	r18, Z+3	; 0x03
    b4b2:	f2 01       	movw	r30, r4
    b4b4:	23 fd       	sbrc	r18, 3
    b4b6:	85 91       	lpm	r24, Z+
    b4b8:	23 ff       	sbrs	r18, 3
    b4ba:	81 91       	ld	r24, Z+
    b4bc:	2f 01       	movw	r4, r30
    b4be:	88 23       	and	r24, r24
    b4c0:	09 f4       	brne	.+2      	; 0xb4c4 <vfprintf+0x68>
    b4c2:	b2 c1       	rjmp	.+868    	; 0xb828 <vfprintf+0x3cc>
    b4c4:	85 32       	cpi	r24, 0x25	; 37
    b4c6:	39 f4       	brne	.+14     	; 0xb4d6 <vfprintf+0x7a>
    b4c8:	23 fd       	sbrc	r18, 3
    b4ca:	85 91       	lpm	r24, Z+
    b4cc:	23 ff       	sbrs	r18, 3
    b4ce:	81 91       	ld	r24, Z+
    b4d0:	2f 01       	movw	r4, r30
    b4d2:	85 32       	cpi	r24, 0x25	; 37
    b4d4:	29 f4       	brne	.+10     	; 0xb4e0 <vfprintf+0x84>
    b4d6:	90 e0       	ldi	r25, 0x00	; 0
    b4d8:	b3 01       	movw	r22, r6
    b4da:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b4de:	e7 cf       	rjmp	.-50     	; 0xb4ae <vfprintf+0x52>
    b4e0:	98 2f       	mov	r25, r24
    b4e2:	ff 24       	eor	r15, r15
    b4e4:	ee 24       	eor	r14, r14
    b4e6:	99 24       	eor	r9, r9
    b4e8:	ff e1       	ldi	r31, 0x1F	; 31
    b4ea:	ff 15       	cp	r31, r15
    b4ec:	d0 f0       	brcs	.+52     	; 0xb522 <vfprintf+0xc6>
    b4ee:	9b 32       	cpi	r25, 0x2B	; 43
    b4f0:	69 f0       	breq	.+26     	; 0xb50c <vfprintf+0xb0>
    b4f2:	9c 32       	cpi	r25, 0x2C	; 44
    b4f4:	28 f4       	brcc	.+10     	; 0xb500 <vfprintf+0xa4>
    b4f6:	90 32       	cpi	r25, 0x20	; 32
    b4f8:	59 f0       	breq	.+22     	; 0xb510 <vfprintf+0xb4>
    b4fa:	93 32       	cpi	r25, 0x23	; 35
    b4fc:	91 f4       	brne	.+36     	; 0xb522 <vfprintf+0xc6>
    b4fe:	0e c0       	rjmp	.+28     	; 0xb51c <vfprintf+0xc0>
    b500:	9d 32       	cpi	r25, 0x2D	; 45
    b502:	49 f0       	breq	.+18     	; 0xb516 <vfprintf+0xba>
    b504:	90 33       	cpi	r25, 0x30	; 48
    b506:	69 f4       	brne	.+26     	; 0xb522 <vfprintf+0xc6>
    b508:	41 e0       	ldi	r20, 0x01	; 1
    b50a:	24 c0       	rjmp	.+72     	; 0xb554 <vfprintf+0xf8>
    b50c:	52 e0       	ldi	r21, 0x02	; 2
    b50e:	f5 2a       	or	r15, r21
    b510:	84 e0       	ldi	r24, 0x04	; 4
    b512:	f8 2a       	or	r15, r24
    b514:	28 c0       	rjmp	.+80     	; 0xb566 <vfprintf+0x10a>
    b516:	98 e0       	ldi	r25, 0x08	; 8
    b518:	f9 2a       	or	r15, r25
    b51a:	25 c0       	rjmp	.+74     	; 0xb566 <vfprintf+0x10a>
    b51c:	e0 e1       	ldi	r30, 0x10	; 16
    b51e:	fe 2a       	or	r15, r30
    b520:	22 c0       	rjmp	.+68     	; 0xb566 <vfprintf+0x10a>
    b522:	f7 fc       	sbrc	r15, 7
    b524:	29 c0       	rjmp	.+82     	; 0xb578 <vfprintf+0x11c>
    b526:	89 2f       	mov	r24, r25
    b528:	80 53       	subi	r24, 0x30	; 48
    b52a:	8a 30       	cpi	r24, 0x0A	; 10
    b52c:	70 f4       	brcc	.+28     	; 0xb54a <vfprintf+0xee>
    b52e:	f6 fe       	sbrs	r15, 6
    b530:	05 c0       	rjmp	.+10     	; 0xb53c <vfprintf+0xe0>
    b532:	98 9c       	mul	r9, r8
    b534:	90 2c       	mov	r9, r0
    b536:	11 24       	eor	r1, r1
    b538:	98 0e       	add	r9, r24
    b53a:	15 c0       	rjmp	.+42     	; 0xb566 <vfprintf+0x10a>
    b53c:	e8 9c       	mul	r14, r8
    b53e:	e0 2c       	mov	r14, r0
    b540:	11 24       	eor	r1, r1
    b542:	e8 0e       	add	r14, r24
    b544:	f0 e2       	ldi	r31, 0x20	; 32
    b546:	ff 2a       	or	r15, r31
    b548:	0e c0       	rjmp	.+28     	; 0xb566 <vfprintf+0x10a>
    b54a:	9e 32       	cpi	r25, 0x2E	; 46
    b54c:	29 f4       	brne	.+10     	; 0xb558 <vfprintf+0xfc>
    b54e:	f6 fc       	sbrc	r15, 6
    b550:	6b c1       	rjmp	.+726    	; 0xb828 <vfprintf+0x3cc>
    b552:	40 e4       	ldi	r20, 0x40	; 64
    b554:	f4 2a       	or	r15, r20
    b556:	07 c0       	rjmp	.+14     	; 0xb566 <vfprintf+0x10a>
    b558:	9c 36       	cpi	r25, 0x6C	; 108
    b55a:	19 f4       	brne	.+6      	; 0xb562 <vfprintf+0x106>
    b55c:	50 e8       	ldi	r21, 0x80	; 128
    b55e:	f5 2a       	or	r15, r21
    b560:	02 c0       	rjmp	.+4      	; 0xb566 <vfprintf+0x10a>
    b562:	98 36       	cpi	r25, 0x68	; 104
    b564:	49 f4       	brne	.+18     	; 0xb578 <vfprintf+0x11c>
    b566:	f2 01       	movw	r30, r4
    b568:	23 fd       	sbrc	r18, 3
    b56a:	95 91       	lpm	r25, Z+
    b56c:	23 ff       	sbrs	r18, 3
    b56e:	91 91       	ld	r25, Z+
    b570:	2f 01       	movw	r4, r30
    b572:	99 23       	and	r25, r25
    b574:	09 f0       	breq	.+2      	; 0xb578 <vfprintf+0x11c>
    b576:	b8 cf       	rjmp	.-144    	; 0xb4e8 <vfprintf+0x8c>
    b578:	89 2f       	mov	r24, r25
    b57a:	85 54       	subi	r24, 0x45	; 69
    b57c:	83 30       	cpi	r24, 0x03	; 3
    b57e:	18 f0       	brcs	.+6      	; 0xb586 <vfprintf+0x12a>
    b580:	80 52       	subi	r24, 0x20	; 32
    b582:	83 30       	cpi	r24, 0x03	; 3
    b584:	38 f4       	brcc	.+14     	; 0xb594 <vfprintf+0x138>
    b586:	44 e0       	ldi	r20, 0x04	; 4
    b588:	50 e0       	ldi	r21, 0x00	; 0
    b58a:	a4 0e       	add	r10, r20
    b58c:	b5 1e       	adc	r11, r21
    b58e:	5f e3       	ldi	r21, 0x3F	; 63
    b590:	59 83       	std	Y+1, r21	; 0x01
    b592:	0f c0       	rjmp	.+30     	; 0xb5b2 <vfprintf+0x156>
    b594:	93 36       	cpi	r25, 0x63	; 99
    b596:	31 f0       	breq	.+12     	; 0xb5a4 <vfprintf+0x148>
    b598:	93 37       	cpi	r25, 0x73	; 115
    b59a:	79 f0       	breq	.+30     	; 0xb5ba <vfprintf+0x15e>
    b59c:	93 35       	cpi	r25, 0x53	; 83
    b59e:	09 f0       	breq	.+2      	; 0xb5a2 <vfprintf+0x146>
    b5a0:	56 c0       	rjmp	.+172    	; 0xb64e <vfprintf+0x1f2>
    b5a2:	20 c0       	rjmp	.+64     	; 0xb5e4 <vfprintf+0x188>
    b5a4:	f5 01       	movw	r30, r10
    b5a6:	80 81       	ld	r24, Z
    b5a8:	89 83       	std	Y+1, r24	; 0x01
    b5aa:	42 e0       	ldi	r20, 0x02	; 2
    b5ac:	50 e0       	ldi	r21, 0x00	; 0
    b5ae:	a4 0e       	add	r10, r20
    b5b0:	b5 1e       	adc	r11, r21
    b5b2:	61 01       	movw	r12, r2
    b5b4:	01 e0       	ldi	r16, 0x01	; 1
    b5b6:	10 e0       	ldi	r17, 0x00	; 0
    b5b8:	12 c0       	rjmp	.+36     	; 0xb5de <vfprintf+0x182>
    b5ba:	f5 01       	movw	r30, r10
    b5bc:	c0 80       	ld	r12, Z
    b5be:	d1 80       	ldd	r13, Z+1	; 0x01
    b5c0:	f6 fc       	sbrc	r15, 6
    b5c2:	03 c0       	rjmp	.+6      	; 0xb5ca <vfprintf+0x16e>
    b5c4:	6f ef       	ldi	r22, 0xFF	; 255
    b5c6:	7f ef       	ldi	r23, 0xFF	; 255
    b5c8:	02 c0       	rjmp	.+4      	; 0xb5ce <vfprintf+0x172>
    b5ca:	69 2d       	mov	r22, r9
    b5cc:	70 e0       	ldi	r23, 0x00	; 0
    b5ce:	42 e0       	ldi	r20, 0x02	; 2
    b5d0:	50 e0       	ldi	r21, 0x00	; 0
    b5d2:	a4 0e       	add	r10, r20
    b5d4:	b5 1e       	adc	r11, r21
    b5d6:	c6 01       	movw	r24, r12
    b5d8:	0e 94 6f 5c 	call	0xb8de	; 0xb8de <strnlen>
    b5dc:	8c 01       	movw	r16, r24
    b5de:	5f e7       	ldi	r21, 0x7F	; 127
    b5e0:	f5 22       	and	r15, r21
    b5e2:	14 c0       	rjmp	.+40     	; 0xb60c <vfprintf+0x1b0>
    b5e4:	f5 01       	movw	r30, r10
    b5e6:	c0 80       	ld	r12, Z
    b5e8:	d1 80       	ldd	r13, Z+1	; 0x01
    b5ea:	f6 fc       	sbrc	r15, 6
    b5ec:	03 c0       	rjmp	.+6      	; 0xb5f4 <vfprintf+0x198>
    b5ee:	6f ef       	ldi	r22, 0xFF	; 255
    b5f0:	7f ef       	ldi	r23, 0xFF	; 255
    b5f2:	02 c0       	rjmp	.+4      	; 0xb5f8 <vfprintf+0x19c>
    b5f4:	69 2d       	mov	r22, r9
    b5f6:	70 e0       	ldi	r23, 0x00	; 0
    b5f8:	42 e0       	ldi	r20, 0x02	; 2
    b5fa:	50 e0       	ldi	r21, 0x00	; 0
    b5fc:	a4 0e       	add	r10, r20
    b5fe:	b5 1e       	adc	r11, r21
    b600:	c6 01       	movw	r24, r12
    b602:	0e 94 64 5c 	call	0xb8c8	; 0xb8c8 <strnlen_P>
    b606:	8c 01       	movw	r16, r24
    b608:	50 e8       	ldi	r21, 0x80	; 128
    b60a:	f5 2a       	or	r15, r21
    b60c:	f3 fe       	sbrs	r15, 3
    b60e:	07 c0       	rjmp	.+14     	; 0xb61e <vfprintf+0x1c2>
    b610:	1a c0       	rjmp	.+52     	; 0xb646 <vfprintf+0x1ea>
    b612:	80 e2       	ldi	r24, 0x20	; 32
    b614:	90 e0       	ldi	r25, 0x00	; 0
    b616:	b3 01       	movw	r22, r6
    b618:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b61c:	ea 94       	dec	r14
    b61e:	8e 2d       	mov	r24, r14
    b620:	90 e0       	ldi	r25, 0x00	; 0
    b622:	08 17       	cp	r16, r24
    b624:	19 07       	cpc	r17, r25
    b626:	a8 f3       	brcs	.-22     	; 0xb612 <vfprintf+0x1b6>
    b628:	0e c0       	rjmp	.+28     	; 0xb646 <vfprintf+0x1ea>
    b62a:	f6 01       	movw	r30, r12
    b62c:	f7 fc       	sbrc	r15, 7
    b62e:	85 91       	lpm	r24, Z+
    b630:	f7 fe       	sbrs	r15, 7
    b632:	81 91       	ld	r24, Z+
    b634:	6f 01       	movw	r12, r30
    b636:	90 e0       	ldi	r25, 0x00	; 0
    b638:	b3 01       	movw	r22, r6
    b63a:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b63e:	e1 10       	cpse	r14, r1
    b640:	ea 94       	dec	r14
    b642:	01 50       	subi	r16, 0x01	; 1
    b644:	10 40       	sbci	r17, 0x00	; 0
    b646:	01 15       	cp	r16, r1
    b648:	11 05       	cpc	r17, r1
    b64a:	79 f7       	brne	.-34     	; 0xb62a <vfprintf+0x1ce>
    b64c:	ea c0       	rjmp	.+468    	; 0xb822 <vfprintf+0x3c6>
    b64e:	94 36       	cpi	r25, 0x64	; 100
    b650:	11 f0       	breq	.+4      	; 0xb656 <vfprintf+0x1fa>
    b652:	99 36       	cpi	r25, 0x69	; 105
    b654:	69 f5       	brne	.+90     	; 0xb6b0 <vfprintf+0x254>
    b656:	f7 fe       	sbrs	r15, 7
    b658:	08 c0       	rjmp	.+16     	; 0xb66a <vfprintf+0x20e>
    b65a:	f5 01       	movw	r30, r10
    b65c:	20 81       	ld	r18, Z
    b65e:	31 81       	ldd	r19, Z+1	; 0x01
    b660:	42 81       	ldd	r20, Z+2	; 0x02
    b662:	53 81       	ldd	r21, Z+3	; 0x03
    b664:	84 e0       	ldi	r24, 0x04	; 4
    b666:	90 e0       	ldi	r25, 0x00	; 0
    b668:	0a c0       	rjmp	.+20     	; 0xb67e <vfprintf+0x222>
    b66a:	f5 01       	movw	r30, r10
    b66c:	80 81       	ld	r24, Z
    b66e:	91 81       	ldd	r25, Z+1	; 0x01
    b670:	9c 01       	movw	r18, r24
    b672:	44 27       	eor	r20, r20
    b674:	37 fd       	sbrc	r19, 7
    b676:	40 95       	com	r20
    b678:	54 2f       	mov	r21, r20
    b67a:	82 e0       	ldi	r24, 0x02	; 2
    b67c:	90 e0       	ldi	r25, 0x00	; 0
    b67e:	a8 0e       	add	r10, r24
    b680:	b9 1e       	adc	r11, r25
    b682:	9f e6       	ldi	r25, 0x6F	; 111
    b684:	f9 22       	and	r15, r25
    b686:	57 ff       	sbrs	r21, 7
    b688:	09 c0       	rjmp	.+18     	; 0xb69c <vfprintf+0x240>
    b68a:	50 95       	com	r21
    b68c:	40 95       	com	r20
    b68e:	30 95       	com	r19
    b690:	21 95       	neg	r18
    b692:	3f 4f       	sbci	r19, 0xFF	; 255
    b694:	4f 4f       	sbci	r20, 0xFF	; 255
    b696:	5f 4f       	sbci	r21, 0xFF	; 255
    b698:	e0 e8       	ldi	r30, 0x80	; 128
    b69a:	fe 2a       	or	r15, r30
    b69c:	ca 01       	movw	r24, r20
    b69e:	b9 01       	movw	r22, r18
    b6a0:	a1 01       	movw	r20, r2
    b6a2:	2a e0       	ldi	r18, 0x0A	; 10
    b6a4:	30 e0       	ldi	r19, 0x00	; 0
    b6a6:	0e 94 a6 5c 	call	0xb94c	; 0xb94c <__ultoa_invert>
    b6aa:	d8 2e       	mov	r13, r24
    b6ac:	d2 18       	sub	r13, r2
    b6ae:	40 c0       	rjmp	.+128    	; 0xb730 <vfprintf+0x2d4>
    b6b0:	95 37       	cpi	r25, 0x75	; 117
    b6b2:	29 f4       	brne	.+10     	; 0xb6be <vfprintf+0x262>
    b6b4:	1f 2d       	mov	r17, r15
    b6b6:	1f 7e       	andi	r17, 0xEF	; 239
    b6b8:	2a e0       	ldi	r18, 0x0A	; 10
    b6ba:	30 e0       	ldi	r19, 0x00	; 0
    b6bc:	1d c0       	rjmp	.+58     	; 0xb6f8 <vfprintf+0x29c>
    b6be:	1f 2d       	mov	r17, r15
    b6c0:	19 7f       	andi	r17, 0xF9	; 249
    b6c2:	9f 36       	cpi	r25, 0x6F	; 111
    b6c4:	61 f0       	breq	.+24     	; 0xb6de <vfprintf+0x282>
    b6c6:	90 37       	cpi	r25, 0x70	; 112
    b6c8:	20 f4       	brcc	.+8      	; 0xb6d2 <vfprintf+0x276>
    b6ca:	98 35       	cpi	r25, 0x58	; 88
    b6cc:	09 f0       	breq	.+2      	; 0xb6d0 <vfprintf+0x274>
    b6ce:	ac c0       	rjmp	.+344    	; 0xb828 <vfprintf+0x3cc>
    b6d0:	0f c0       	rjmp	.+30     	; 0xb6f0 <vfprintf+0x294>
    b6d2:	90 37       	cpi	r25, 0x70	; 112
    b6d4:	39 f0       	breq	.+14     	; 0xb6e4 <vfprintf+0x288>
    b6d6:	98 37       	cpi	r25, 0x78	; 120
    b6d8:	09 f0       	breq	.+2      	; 0xb6dc <vfprintf+0x280>
    b6da:	a6 c0       	rjmp	.+332    	; 0xb828 <vfprintf+0x3cc>
    b6dc:	04 c0       	rjmp	.+8      	; 0xb6e6 <vfprintf+0x28a>
    b6de:	28 e0       	ldi	r18, 0x08	; 8
    b6e0:	30 e0       	ldi	r19, 0x00	; 0
    b6e2:	0a c0       	rjmp	.+20     	; 0xb6f8 <vfprintf+0x29c>
    b6e4:	10 61       	ori	r17, 0x10	; 16
    b6e6:	14 fd       	sbrc	r17, 4
    b6e8:	14 60       	ori	r17, 0x04	; 4
    b6ea:	20 e1       	ldi	r18, 0x10	; 16
    b6ec:	30 e0       	ldi	r19, 0x00	; 0
    b6ee:	04 c0       	rjmp	.+8      	; 0xb6f8 <vfprintf+0x29c>
    b6f0:	14 fd       	sbrc	r17, 4
    b6f2:	16 60       	ori	r17, 0x06	; 6
    b6f4:	20 e1       	ldi	r18, 0x10	; 16
    b6f6:	32 e0       	ldi	r19, 0x02	; 2
    b6f8:	17 ff       	sbrs	r17, 7
    b6fa:	08 c0       	rjmp	.+16     	; 0xb70c <vfprintf+0x2b0>
    b6fc:	f5 01       	movw	r30, r10
    b6fe:	60 81       	ld	r22, Z
    b700:	71 81       	ldd	r23, Z+1	; 0x01
    b702:	82 81       	ldd	r24, Z+2	; 0x02
    b704:	93 81       	ldd	r25, Z+3	; 0x03
    b706:	44 e0       	ldi	r20, 0x04	; 4
    b708:	50 e0       	ldi	r21, 0x00	; 0
    b70a:	08 c0       	rjmp	.+16     	; 0xb71c <vfprintf+0x2c0>
    b70c:	f5 01       	movw	r30, r10
    b70e:	80 81       	ld	r24, Z
    b710:	91 81       	ldd	r25, Z+1	; 0x01
    b712:	bc 01       	movw	r22, r24
    b714:	80 e0       	ldi	r24, 0x00	; 0
    b716:	90 e0       	ldi	r25, 0x00	; 0
    b718:	42 e0       	ldi	r20, 0x02	; 2
    b71a:	50 e0       	ldi	r21, 0x00	; 0
    b71c:	a4 0e       	add	r10, r20
    b71e:	b5 1e       	adc	r11, r21
    b720:	a1 01       	movw	r20, r2
    b722:	0e 94 a6 5c 	call	0xb94c	; 0xb94c <__ultoa_invert>
    b726:	d8 2e       	mov	r13, r24
    b728:	d2 18       	sub	r13, r2
    b72a:	8f e7       	ldi	r24, 0x7F	; 127
    b72c:	f8 2e       	mov	r15, r24
    b72e:	f1 22       	and	r15, r17
    b730:	f6 fe       	sbrs	r15, 6
    b732:	0b c0       	rjmp	.+22     	; 0xb74a <vfprintf+0x2ee>
    b734:	5e ef       	ldi	r21, 0xFE	; 254
    b736:	f5 22       	and	r15, r21
    b738:	d9 14       	cp	r13, r9
    b73a:	38 f4       	brcc	.+14     	; 0xb74a <vfprintf+0x2ee>
    b73c:	f4 fe       	sbrs	r15, 4
    b73e:	07 c0       	rjmp	.+14     	; 0xb74e <vfprintf+0x2f2>
    b740:	f2 fc       	sbrc	r15, 2
    b742:	05 c0       	rjmp	.+10     	; 0xb74e <vfprintf+0x2f2>
    b744:	8f ee       	ldi	r24, 0xEF	; 239
    b746:	f8 22       	and	r15, r24
    b748:	02 c0       	rjmp	.+4      	; 0xb74e <vfprintf+0x2f2>
    b74a:	1d 2d       	mov	r17, r13
    b74c:	01 c0       	rjmp	.+2      	; 0xb750 <vfprintf+0x2f4>
    b74e:	19 2d       	mov	r17, r9
    b750:	f4 fe       	sbrs	r15, 4
    b752:	0d c0       	rjmp	.+26     	; 0xb76e <vfprintf+0x312>
    b754:	fe 01       	movw	r30, r28
    b756:	ed 0d       	add	r30, r13
    b758:	f1 1d       	adc	r31, r1
    b75a:	80 81       	ld	r24, Z
    b75c:	80 33       	cpi	r24, 0x30	; 48
    b75e:	19 f4       	brne	.+6      	; 0xb766 <vfprintf+0x30a>
    b760:	99 ee       	ldi	r25, 0xE9	; 233
    b762:	f9 22       	and	r15, r25
    b764:	08 c0       	rjmp	.+16     	; 0xb776 <vfprintf+0x31a>
    b766:	1f 5f       	subi	r17, 0xFF	; 255
    b768:	f2 fe       	sbrs	r15, 2
    b76a:	05 c0       	rjmp	.+10     	; 0xb776 <vfprintf+0x31a>
    b76c:	03 c0       	rjmp	.+6      	; 0xb774 <vfprintf+0x318>
    b76e:	8f 2d       	mov	r24, r15
    b770:	86 78       	andi	r24, 0x86	; 134
    b772:	09 f0       	breq	.+2      	; 0xb776 <vfprintf+0x31a>
    b774:	1f 5f       	subi	r17, 0xFF	; 255
    b776:	0f 2d       	mov	r16, r15
    b778:	f3 fc       	sbrc	r15, 3
    b77a:	14 c0       	rjmp	.+40     	; 0xb7a4 <vfprintf+0x348>
    b77c:	f0 fe       	sbrs	r15, 0
    b77e:	0f c0       	rjmp	.+30     	; 0xb79e <vfprintf+0x342>
    b780:	1e 15       	cp	r17, r14
    b782:	10 f0       	brcs	.+4      	; 0xb788 <vfprintf+0x32c>
    b784:	9d 2c       	mov	r9, r13
    b786:	0b c0       	rjmp	.+22     	; 0xb79e <vfprintf+0x342>
    b788:	9d 2c       	mov	r9, r13
    b78a:	9e 0c       	add	r9, r14
    b78c:	91 1a       	sub	r9, r17
    b78e:	1e 2d       	mov	r17, r14
    b790:	06 c0       	rjmp	.+12     	; 0xb79e <vfprintf+0x342>
    b792:	80 e2       	ldi	r24, 0x20	; 32
    b794:	90 e0       	ldi	r25, 0x00	; 0
    b796:	b3 01       	movw	r22, r6
    b798:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b79c:	1f 5f       	subi	r17, 0xFF	; 255
    b79e:	1e 15       	cp	r17, r14
    b7a0:	c0 f3       	brcs	.-16     	; 0xb792 <vfprintf+0x336>
    b7a2:	04 c0       	rjmp	.+8      	; 0xb7ac <vfprintf+0x350>
    b7a4:	1e 15       	cp	r17, r14
    b7a6:	10 f4       	brcc	.+4      	; 0xb7ac <vfprintf+0x350>
    b7a8:	e1 1a       	sub	r14, r17
    b7aa:	01 c0       	rjmp	.+2      	; 0xb7ae <vfprintf+0x352>
    b7ac:	ee 24       	eor	r14, r14
    b7ae:	04 ff       	sbrs	r16, 4
    b7b0:	0f c0       	rjmp	.+30     	; 0xb7d0 <vfprintf+0x374>
    b7b2:	80 e3       	ldi	r24, 0x30	; 48
    b7b4:	90 e0       	ldi	r25, 0x00	; 0
    b7b6:	b3 01       	movw	r22, r6
    b7b8:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b7bc:	02 ff       	sbrs	r16, 2
    b7be:	1d c0       	rjmp	.+58     	; 0xb7fa <vfprintf+0x39e>
    b7c0:	01 fd       	sbrc	r16, 1
    b7c2:	03 c0       	rjmp	.+6      	; 0xb7ca <vfprintf+0x36e>
    b7c4:	88 e7       	ldi	r24, 0x78	; 120
    b7c6:	90 e0       	ldi	r25, 0x00	; 0
    b7c8:	0e c0       	rjmp	.+28     	; 0xb7e6 <vfprintf+0x38a>
    b7ca:	88 e5       	ldi	r24, 0x58	; 88
    b7cc:	90 e0       	ldi	r25, 0x00	; 0
    b7ce:	0b c0       	rjmp	.+22     	; 0xb7e6 <vfprintf+0x38a>
    b7d0:	80 2f       	mov	r24, r16
    b7d2:	86 78       	andi	r24, 0x86	; 134
    b7d4:	91 f0       	breq	.+36     	; 0xb7fa <vfprintf+0x39e>
    b7d6:	01 ff       	sbrs	r16, 1
    b7d8:	02 c0       	rjmp	.+4      	; 0xb7de <vfprintf+0x382>
    b7da:	8b e2       	ldi	r24, 0x2B	; 43
    b7dc:	01 c0       	rjmp	.+2      	; 0xb7e0 <vfprintf+0x384>
    b7de:	80 e2       	ldi	r24, 0x20	; 32
    b7e0:	f7 fc       	sbrc	r15, 7
    b7e2:	8d e2       	ldi	r24, 0x2D	; 45
    b7e4:	90 e0       	ldi	r25, 0x00	; 0
    b7e6:	b3 01       	movw	r22, r6
    b7e8:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b7ec:	06 c0       	rjmp	.+12     	; 0xb7fa <vfprintf+0x39e>
    b7ee:	80 e3       	ldi	r24, 0x30	; 48
    b7f0:	90 e0       	ldi	r25, 0x00	; 0
    b7f2:	b3 01       	movw	r22, r6
    b7f4:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b7f8:	9a 94       	dec	r9
    b7fa:	d9 14       	cp	r13, r9
    b7fc:	c0 f3       	brcs	.-16     	; 0xb7ee <vfprintf+0x392>
    b7fe:	da 94       	dec	r13
    b800:	f1 01       	movw	r30, r2
    b802:	ed 0d       	add	r30, r13
    b804:	f1 1d       	adc	r31, r1
    b806:	80 81       	ld	r24, Z
    b808:	90 e0       	ldi	r25, 0x00	; 0
    b80a:	b3 01       	movw	r22, r6
    b80c:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b810:	dd 20       	and	r13, r13
    b812:	a9 f7       	brne	.-22     	; 0xb7fe <vfprintf+0x3a2>
    b814:	06 c0       	rjmp	.+12     	; 0xb822 <vfprintf+0x3c6>
    b816:	80 e2       	ldi	r24, 0x20	; 32
    b818:	90 e0       	ldi	r25, 0x00	; 0
    b81a:	b3 01       	movw	r22, r6
    b81c:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <fputc>
    b820:	ea 94       	dec	r14
    b822:	ee 20       	and	r14, r14
    b824:	c1 f7       	brne	.-16     	; 0xb816 <vfprintf+0x3ba>
    b826:	43 ce       	rjmp	.-890    	; 0xb4ae <vfprintf+0x52>
    b828:	f3 01       	movw	r30, r6
    b82a:	66 81       	ldd	r22, Z+6	; 0x06
    b82c:	77 81       	ldd	r23, Z+7	; 0x07
    b82e:	cb 01       	movw	r24, r22
    b830:	2b 96       	adiw	r28, 0x0b	; 11
    b832:	cd bf       	out	0x3d, r28	; 61
    b834:	de bf       	out	0x3e, r29	; 62
    b836:	cf 91       	pop	r28
    b838:	df 91       	pop	r29
    b83a:	1f 91       	pop	r17
    b83c:	0f 91       	pop	r16
    b83e:	ff 90       	pop	r15
    b840:	ef 90       	pop	r14
    b842:	df 90       	pop	r13
    b844:	cf 90       	pop	r12
    b846:	bf 90       	pop	r11
    b848:	af 90       	pop	r10
    b84a:	9f 90       	pop	r9
    b84c:	8f 90       	pop	r8
    b84e:	7f 90       	pop	r7
    b850:	6f 90       	pop	r6
    b852:	5f 90       	pop	r5
    b854:	4f 90       	pop	r4
    b856:	3f 90       	pop	r3
    b858:	2f 90       	pop	r2
    b85a:	08 95       	ret

0000b85c <__eerd_byte_x128a1>:
    b85c:	03 d0       	rcall	.+6      	; 0xb864 <eeprom_mapen>
    b85e:	80 81       	ld	r24, Z
    b860:	99 27       	eor	r25, r25
    b862:	08 95       	ret

0000b864 <eeprom_mapen>:
    b864:	e0 ec       	ldi	r30, 0xC0	; 192
    b866:	f1 e0       	ldi	r31, 0x01	; 1
    b868:	37 85       	ldd	r19, Z+15	; 0x0f
    b86a:	37 fd       	sbrc	r19, 7
    b86c:	fd cf       	rjmp	.-6      	; 0xb868 <eeprom_mapen+0x4>
    b86e:	34 85       	ldd	r19, Z+12	; 0x0c
    b870:	38 60       	ori	r19, 0x08	; 8
    b872:	34 87       	std	Z+12, r19	; 0x0c
    b874:	fc 01       	movw	r30, r24
    b876:	e0 50       	subi	r30, 0x00	; 0
    b878:	f0 4f       	sbci	r31, 0xF0	; 240
    b87a:	08 95       	ret

0000b87c <__eewr_byte_x128a1>:
    b87c:	26 2f       	mov	r18, r22

0000b87e <__eewr_r18_x128a1>:
    b87e:	e0 ec       	ldi	r30, 0xC0	; 192
    b880:	f1 e0       	ldi	r31, 0x01	; 1
    b882:	37 85       	ldd	r19, Z+15	; 0x0f
    b884:	37 fd       	sbrc	r19, 7
    b886:	fd cf       	rjmp	.-6      	; 0xb882 <__eewr_r18_x128a1+0x4>
    b888:	34 85       	ldd	r19, Z+12	; 0x0c
    b88a:	37 7f       	andi	r19, 0xF7	; 247
    b88c:	34 87       	std	Z+12, r19	; 0x0c
    b88e:	37 85       	ldd	r19, Z+15	; 0x0f
    b890:	31 ff       	sbrs	r19, 1
    b892:	09 c0       	rjmp	.+18     	; 0xb8a6 <__eewr_r18_x128a1+0x28>
    b894:	36 e3       	ldi	r19, 0x36	; 54
    b896:	32 87       	std	Z+10, r19	; 0x0a
    b898:	38 ed       	ldi	r19, 0xD8	; 216
    b89a:	34 bf       	out	0x34, r19	; 52
    b89c:	31 e0       	ldi	r19, 0x01	; 1
    b89e:	33 87       	std	Z+11, r19	; 0x0b
    b8a0:	37 85       	ldd	r19, Z+15	; 0x0f
    b8a2:	37 fd       	sbrc	r19, 7
    b8a4:	fd cf       	rjmp	.-6      	; 0xb8a0 <__eewr_r18_x128a1+0x22>
    b8a6:	33 e3       	ldi	r19, 0x33	; 51
    b8a8:	32 87       	std	Z+10, r19	; 0x0a
    b8aa:	80 83       	st	Z, r24
    b8ac:	91 83       	std	Z+1, r25	; 0x01
    b8ae:	12 82       	std	Z+2, r1	; 0x02
    b8b0:	24 83       	std	Z+4, r18	; 0x04
    b8b2:	25 e3       	ldi	r18, 0x35	; 53
    b8b4:	22 87       	std	Z+10, r18	; 0x0a
    b8b6:	28 ed       	ldi	r18, 0xD8	; 216
    b8b8:	31 e0       	ldi	r19, 0x01	; 1
    b8ba:	24 bf       	out	0x34, r18	; 52
    b8bc:	33 87       	std	Z+11, r19	; 0x0b
    b8be:	01 96       	adiw	r24, 0x01	; 1
    b8c0:	08 95       	ret

0000b8c2 <__ctype_isfalse>:
    b8c2:	99 27       	eor	r25, r25
    b8c4:	88 27       	eor	r24, r24

0000b8c6 <__ctype_istrue>:
    b8c6:	08 95       	ret

0000b8c8 <strnlen_P>:
    b8c8:	fc 01       	movw	r30, r24
    b8ca:	05 90       	lpm	r0, Z+
    b8cc:	61 50       	subi	r22, 0x01	; 1
    b8ce:	70 40       	sbci	r23, 0x00	; 0
    b8d0:	01 10       	cpse	r0, r1
    b8d2:	d8 f7       	brcc	.-10     	; 0xb8ca <strnlen_P+0x2>
    b8d4:	80 95       	com	r24
    b8d6:	90 95       	com	r25
    b8d8:	8e 0f       	add	r24, r30
    b8da:	9f 1f       	adc	r25, r31
    b8dc:	08 95       	ret

0000b8de <strnlen>:
    b8de:	fc 01       	movw	r30, r24
    b8e0:	61 50       	subi	r22, 0x01	; 1
    b8e2:	70 40       	sbci	r23, 0x00	; 0
    b8e4:	01 90       	ld	r0, Z+
    b8e6:	01 10       	cpse	r0, r1
    b8e8:	d8 f7       	brcc	.-10     	; 0xb8e0 <strnlen+0x2>
    b8ea:	80 95       	com	r24
    b8ec:	90 95       	com	r25
    b8ee:	8e 0f       	add	r24, r30
    b8f0:	9f 1f       	adc	r25, r31
    b8f2:	08 95       	ret

0000b8f4 <fputc>:
    b8f4:	0f 93       	push	r16
    b8f6:	1f 93       	push	r17
    b8f8:	cf 93       	push	r28
    b8fa:	df 93       	push	r29
    b8fc:	8c 01       	movw	r16, r24
    b8fe:	eb 01       	movw	r28, r22
    b900:	8b 81       	ldd	r24, Y+3	; 0x03
    b902:	81 ff       	sbrs	r24, 1
    b904:	1b c0       	rjmp	.+54     	; 0xb93c <fputc+0x48>
    b906:	82 ff       	sbrs	r24, 2
    b908:	0d c0       	rjmp	.+26     	; 0xb924 <fputc+0x30>
    b90a:	2e 81       	ldd	r18, Y+6	; 0x06
    b90c:	3f 81       	ldd	r19, Y+7	; 0x07
    b90e:	8c 81       	ldd	r24, Y+4	; 0x04
    b910:	9d 81       	ldd	r25, Y+5	; 0x05
    b912:	28 17       	cp	r18, r24
    b914:	39 07       	cpc	r19, r25
    b916:	64 f4       	brge	.+24     	; 0xb930 <fputc+0x3c>
    b918:	e8 81       	ld	r30, Y
    b91a:	f9 81       	ldd	r31, Y+1	; 0x01
    b91c:	01 93       	st	Z+, r16
    b91e:	e8 83       	st	Y, r30
    b920:	f9 83       	std	Y+1, r31	; 0x01
    b922:	06 c0       	rjmp	.+12     	; 0xb930 <fputc+0x3c>
    b924:	e8 85       	ldd	r30, Y+8	; 0x08
    b926:	f9 85       	ldd	r31, Y+9	; 0x09
    b928:	80 2f       	mov	r24, r16
    b92a:	19 95       	eicall
    b92c:	89 2b       	or	r24, r25
    b92e:	31 f4       	brne	.+12     	; 0xb93c <fputc+0x48>
    b930:	8e 81       	ldd	r24, Y+6	; 0x06
    b932:	9f 81       	ldd	r25, Y+7	; 0x07
    b934:	01 96       	adiw	r24, 0x01	; 1
    b936:	8e 83       	std	Y+6, r24	; 0x06
    b938:	9f 83       	std	Y+7, r25	; 0x07
    b93a:	02 c0       	rjmp	.+4      	; 0xb940 <fputc+0x4c>
    b93c:	0f ef       	ldi	r16, 0xFF	; 255
    b93e:	1f ef       	ldi	r17, 0xFF	; 255
    b940:	c8 01       	movw	r24, r16
    b942:	df 91       	pop	r29
    b944:	cf 91       	pop	r28
    b946:	1f 91       	pop	r17
    b948:	0f 91       	pop	r16
    b94a:	08 95       	ret

0000b94c <__ultoa_invert>:
    b94c:	fa 01       	movw	r30, r20
    b94e:	aa 27       	eor	r26, r26
    b950:	28 30       	cpi	r18, 0x08	; 8
    b952:	51 f1       	breq	.+84     	; 0xb9a8 <__ultoa_invert+0x5c>
    b954:	20 31       	cpi	r18, 0x10	; 16
    b956:	81 f1       	breq	.+96     	; 0xb9b8 <__ultoa_invert+0x6c>
    b958:	e8 94       	clt
    b95a:	6f 93       	push	r22
    b95c:	6e 7f       	andi	r22, 0xFE	; 254
    b95e:	6e 5f       	subi	r22, 0xFE	; 254
    b960:	7f 4f       	sbci	r23, 0xFF	; 255
    b962:	8f 4f       	sbci	r24, 0xFF	; 255
    b964:	9f 4f       	sbci	r25, 0xFF	; 255
    b966:	af 4f       	sbci	r26, 0xFF	; 255
    b968:	b1 e0       	ldi	r27, 0x01	; 1
    b96a:	3e d0       	rcall	.+124    	; 0xb9e8 <__ultoa_invert+0x9c>
    b96c:	b4 e0       	ldi	r27, 0x04	; 4
    b96e:	3c d0       	rcall	.+120    	; 0xb9e8 <__ultoa_invert+0x9c>
    b970:	67 0f       	add	r22, r23
    b972:	78 1f       	adc	r23, r24
    b974:	89 1f       	adc	r24, r25
    b976:	9a 1f       	adc	r25, r26
    b978:	a1 1d       	adc	r26, r1
    b97a:	68 0f       	add	r22, r24
    b97c:	79 1f       	adc	r23, r25
    b97e:	8a 1f       	adc	r24, r26
    b980:	91 1d       	adc	r25, r1
    b982:	a1 1d       	adc	r26, r1
    b984:	6a 0f       	add	r22, r26
    b986:	71 1d       	adc	r23, r1
    b988:	81 1d       	adc	r24, r1
    b98a:	91 1d       	adc	r25, r1
    b98c:	a1 1d       	adc	r26, r1
    b98e:	20 d0       	rcall	.+64     	; 0xb9d0 <__ultoa_invert+0x84>
    b990:	09 f4       	brne	.+2      	; 0xb994 <__ultoa_invert+0x48>
    b992:	68 94       	set
    b994:	3f 91       	pop	r19
    b996:	2a e0       	ldi	r18, 0x0A	; 10
    b998:	26 9f       	mul	r18, r22
    b99a:	11 24       	eor	r1, r1
    b99c:	30 19       	sub	r19, r0
    b99e:	30 5d       	subi	r19, 0xD0	; 208
    b9a0:	31 93       	st	Z+, r19
    b9a2:	de f6       	brtc	.-74     	; 0xb95a <__ultoa_invert+0xe>
    b9a4:	cf 01       	movw	r24, r30
    b9a6:	08 95       	ret
    b9a8:	46 2f       	mov	r20, r22
    b9aa:	47 70       	andi	r20, 0x07	; 7
    b9ac:	40 5d       	subi	r20, 0xD0	; 208
    b9ae:	41 93       	st	Z+, r20
    b9b0:	b3 e0       	ldi	r27, 0x03	; 3
    b9b2:	0f d0       	rcall	.+30     	; 0xb9d2 <__ultoa_invert+0x86>
    b9b4:	c9 f7       	brne	.-14     	; 0xb9a8 <__ultoa_invert+0x5c>
    b9b6:	f6 cf       	rjmp	.-20     	; 0xb9a4 <__ultoa_invert+0x58>
    b9b8:	46 2f       	mov	r20, r22
    b9ba:	4f 70       	andi	r20, 0x0F	; 15
    b9bc:	40 5d       	subi	r20, 0xD0	; 208
    b9be:	4a 33       	cpi	r20, 0x3A	; 58
    b9c0:	18 f0       	brcs	.+6      	; 0xb9c8 <__ultoa_invert+0x7c>
    b9c2:	49 5d       	subi	r20, 0xD9	; 217
    b9c4:	31 fd       	sbrc	r19, 1
    b9c6:	40 52       	subi	r20, 0x20	; 32
    b9c8:	41 93       	st	Z+, r20
    b9ca:	02 d0       	rcall	.+4      	; 0xb9d0 <__ultoa_invert+0x84>
    b9cc:	a9 f7       	brne	.-22     	; 0xb9b8 <__ultoa_invert+0x6c>
    b9ce:	ea cf       	rjmp	.-44     	; 0xb9a4 <__ultoa_invert+0x58>
    b9d0:	b4 e0       	ldi	r27, 0x04	; 4
    b9d2:	a6 95       	lsr	r26
    b9d4:	97 95       	ror	r25
    b9d6:	87 95       	ror	r24
    b9d8:	77 95       	ror	r23
    b9da:	67 95       	ror	r22
    b9dc:	ba 95       	dec	r27
    b9de:	c9 f7       	brne	.-14     	; 0xb9d2 <__ultoa_invert+0x86>
    b9e0:	00 97       	sbiw	r24, 0x00	; 0
    b9e2:	61 05       	cpc	r22, r1
    b9e4:	71 05       	cpc	r23, r1
    b9e6:	08 95       	ret
    b9e8:	9b 01       	movw	r18, r22
    b9ea:	ac 01       	movw	r20, r24
    b9ec:	0a 2e       	mov	r0, r26
    b9ee:	06 94       	lsr	r0
    b9f0:	57 95       	ror	r21
    b9f2:	47 95       	ror	r20
    b9f4:	37 95       	ror	r19
    b9f6:	27 95       	ror	r18
    b9f8:	ba 95       	dec	r27
    b9fa:	c9 f7       	brne	.-14     	; 0xb9ee <__ultoa_invert+0xa2>
    b9fc:	62 0f       	add	r22, r18
    b9fe:	73 1f       	adc	r23, r19
    ba00:	84 1f       	adc	r24, r20
    ba02:	95 1f       	adc	r25, r21
    ba04:	a0 1d       	adc	r26, r0
    ba06:	08 95       	ret

0000ba08 <_exit>:
    ba08:	f8 94       	cli

0000ba0a <__stop_program>:
    ba0a:	ff cf       	rjmp	.-2      	; 0xba0a <__stop_program>
